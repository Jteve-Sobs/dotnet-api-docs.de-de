<Type Name="OpCodes" FullName="System.Reflection.Emit.OpCodes">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3d83d76933977f09396d3785edac9c15d9fd4cf6" />
    <Meta Name="ms.sourcegitcommit" Value="d40b35262cbc997b79bf76da3a39ccf59b738efc" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="12/05/2018" />
    <Meta Name="ms.locfileid" Value="52919045" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class OpCodes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit OpCodes extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.OpCodes" />
  <TypeSignature Language="VB.NET" Value="Public Class OpCodes" />
  <TypeSignature Language="C++ CLI" Value="public ref class OpCodes" />
  <TypeSignature Language="F#" Value="type OpCodes = class" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="5c934-101">Stellt die Microsoft Intermediate Language (MSIL)-Anweisungen für die Ausgabe der Compilerdiagnose durch die <see cref="T:System.Reflection.Emit.ILGenerator" /> Klassenmember (z. B. <see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" />).</span>
      <span class="sxs-lookup">
        <span data-stu-id="5c934-101">Provides field representations of the Microsoft Intermediate Language (MSIL) instructions for emission by the <see cref="T:System.Reflection.Emit.ILGenerator" /> class members (such as <see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" />).</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-102">Eine detaillierte Beschreibung von der Memberopcodes finden Sie in der Dokumentation der Common Language Infrastructure (CLI), insbesondere "Partition III: CIL Instruction Set" und "Partition II: Metadata Definition and Semantics".</span><span class="sxs-lookup"><span data-stu-id="5c934-102">For a detailed description of the member opcodes, see the Common Language Infrastructure (CLI) documentation, especially "Partition III: CIL Instruction Set" and "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="5c934-103">Die Dokumentation ist online verfügbar. Sie finden sie unter [ECMA C# and Common Language Infrastructure Standards (Standards von ECMA C# und Common Language Infrastructure)](https://go.microsoft.com/fwlink/?LinkID=99212) auf MSDN und [Standard ECMA-335 - Common Language Infrastructure (CLI) (Standard ECMA-335 – Common Language Infrastructure (CLI))](https://go.microsoft.com/fwlink/?LinkID=65552) auf der Ecma International-Website.</span><span class="sxs-lookup"><span data-stu-id="5c934-103">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c934-104">Das folgende Beispiel veranschaulicht die Erstellung von einer dynamischen Methode mit <xref:System.Reflection.Emit.ILGenerator> ausgeben `OpCodes` in einem <xref:System.Reflection.Emit.MethodBuilder>.</span><span class="sxs-lookup"><span data-stu-id="5c934-104">The following example demonstrates the construction of a dynamic method using <xref:System.Reflection.Emit.ILGenerator> to emit `OpCodes` into a <xref:System.Reflection.Emit.MethodBuilder>.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add;" />
      <MemberSignature Language="F#" Value=" staticval mutable Add : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Add" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-105">Addiert zwei Werte und legt das Ergebnis auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-105">Adds two values and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-106">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-106">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-107">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-107">Format</span></span>|<span data-ttu-id="5c934-108">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-108">Assembly Format</span></span>|<span data-ttu-id="5c934-109">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-109">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-110">58</span><span class="sxs-lookup"><span data-stu-id="5c934-110">58</span></span>|<span data-ttu-id="5c934-111">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-111">add</span></span>|<span data-ttu-id="5c934-112">Addiert zwei numerische Werte, einen neuen numerischen Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-112">Adds two numeric values, returning a new numeric value.</span></span>|  
  
 <span data-ttu-id="5c934-113">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-113">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-114">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-114">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-115">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-115">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-116">`value2` und `value1` werden aus den Stapel geholt `value1` hinzugefügt `value2`.</span><span class="sxs-lookup"><span data-stu-id="5c934-116">`value2` and `value1` are popped from the stack; `value1` is added to `value2`.</span></span>  
  
4.  <span data-ttu-id="5c934-117">Das Ergebnis wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-117">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-118">Überlauf ist nicht für Ganzzahloperationen (richtige Überlaufdaten, finden Sie unter <xref:System.Reflection.Emit.OpCodes.Add_Ovf>).</span><span class="sxs-lookup"><span data-stu-id="5c934-118">Overflow is not detected for integer operations (for proper overflow handling, see <xref:System.Reflection.Emit.OpCodes.Add_Ovf>).</span></span>  
  
 <span data-ttu-id="5c934-119">Ganze Zahl hinzufügen, und nicht das Sättigungsverfahren.</span><span class="sxs-lookup"><span data-stu-id="5c934-119">Integer addition wraps, rather than saturates.</span></span> <span data-ttu-id="5c934-120">Beispiel: vorausgesetzt der 8-Bit-Ganzzahlen, in denen `value1` auf 255 festgelegt und `value2` festgelegt ist auf 1 fest, das umschlossene Ergebnis lautet 0 und 256.</span><span class="sxs-lookup"><span data-stu-id="5c934-120">For example, assuming 8-bit integers where `value1` is set to 255 and `value2` is set to 1, the wrapped result is 0 rather than 256.</span></span>  
  
 <span data-ttu-id="5c934-121">Gleitkommaüberlauf gibt `+inf` (`PositiveInfinity`) oder `-inf` (`NegativeInfinity`).</span><span class="sxs-lookup"><span data-stu-id="5c934-121">Floating-point overflow returns `+inf` (`PositiveInfinity`) or `-inf` (`NegativeInfinity`).</span></span>  
  
 <span data-ttu-id="5c934-122">Die zulässigen Operandentypen und ihre entsprechenden Ergebnis-Datentyp werden in der folgenden Tabelle aufgeführt.</span><span class="sxs-lookup"><span data-stu-id="5c934-122">The acceptable operand types and their corresponding result data type are listed in the table below.</span></span> <span data-ttu-id="5c934-123">Wenn kein Eintrag für eine bestimmte vorhanden ist (z. B. `int32` und `float`; `int32` und `int64`), dabei handelt es sich eine ungültige Microsoft Intermediate Language (MSIL) wird ein Fehler generiert.</span><span class="sxs-lookup"><span data-stu-id="5c934-123">If there is no entry for a particular type combination (for example, `int32` and `float`; `int32` and `int64`), it is an invalid Microsoft Intermediate Language (MSIL) and generates an error.</span></span>  
  
|<span data-ttu-id="5c934-124">Operand</span><span class="sxs-lookup"><span data-stu-id="5c934-124">operand</span></span>|<span data-ttu-id="5c934-125">value1-Typ</span><span class="sxs-lookup"><span data-stu-id="5c934-125">value1 type</span></span>|<span data-ttu-id="5c934-126">value2-Typ</span><span class="sxs-lookup"><span data-stu-id="5c934-126">value2 type</span></span>|<span data-ttu-id="5c934-127">Ergebnistyp</span><span class="sxs-lookup"><span data-stu-id="5c934-127">result type</span></span>|  
|-------------|-----------------|-----------------|-----------------|  
|<span data-ttu-id="5c934-128">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-128">add</span></span>|`int32`|`int32`|`int32`|  
|<span data-ttu-id="5c934-129">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-129">add</span></span>|`int32`|`native int`|`native int`|  
|<span data-ttu-id="5c934-130">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-130">add</span></span>|`int32`|`&`|`&`|  
|<span data-ttu-id="5c934-131">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-131">add</span></span>|`int32`|`*`|`*`|  
|<span data-ttu-id="5c934-132">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-132">add</span></span>|`int64`|`int64`|`int64`|  
|<span data-ttu-id="5c934-133">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-133">add</span></span>|`native int`|`int32`|`native int`|  
|<span data-ttu-id="5c934-134">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-134">add</span></span>|`native int`|`native int`|`native int`|  
|<span data-ttu-id="5c934-135">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-135">add</span></span>|`native int`|`&`|`&`|  
|<span data-ttu-id="5c934-136">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-136">add</span></span>|`native int`|`*`|`*`|  
|<span data-ttu-id="5c934-137">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-137">add</span></span>|`F`|`F`|`F`|  
|<span data-ttu-id="5c934-138">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-138">add</span></span>|`&`|`int32`|`&`|  
|<span data-ttu-id="5c934-139">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-139">add</span></span>|`&`|`native int`|`&`|  
|<span data-ttu-id="5c934-140">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-140">add</span></span>|`*`|`int32`|`*`|  
|<span data-ttu-id="5c934-141">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-141">add</span></span>|`*`|`native int`|`*`|  
  
 <span data-ttu-id="5c934-142">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `add` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-142">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `add` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-143">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-143">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add_Ovf;" />
      <MemberSignature Language="F#" Value=" staticval mutable Add_Ovf : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Add_Ovf" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-144">Addiert zwei ganze Zahlen, führt eine Überlaufprüfung durch und legt das Ergebnis auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-144">Adds two integers, performs an overflow check, and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-145">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-145">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-146">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-146">Format</span></span>|<span data-ttu-id="5c934-147">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-147">Assembly Format</span></span>|<span data-ttu-id="5c934-148">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-148">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-149">D6</span><span class="sxs-lookup"><span data-stu-id="5c934-149">D6</span></span>|<span data-ttu-id="5c934-150">Add.ovf</span><span class="sxs-lookup"><span data-stu-id="5c934-150">add.ovf</span></span>|<span data-ttu-id="5c934-151">Addiert zwei ganze Zahl mit Vorzeichen-Werte, mit der eine überlaufprüfung.</span><span class="sxs-lookup"><span data-stu-id="5c934-151">Adds two signed integer values with an overflow check.</span></span>|  
  
 <span data-ttu-id="5c934-152">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-152">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-153">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-153">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-154">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-154">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-155">`value2` und `value1` werden aus den Stapel geholt `value1` hinzugefügt `value2` durch eine Suche nach einem Überlauf.</span><span class="sxs-lookup"><span data-stu-id="5c934-155">`value2` and `value1` are popped from the stack; `value1` is added to `value2` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="5c934-156">Das Ergebnis wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-156">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-157"><xref:System.OverflowException> wird ausgelöst, wenn das Ergebnis nicht im Ergebnistyp dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-157"><xref:System.OverflowException> is thrown if the result is not represented in the result type.</span></span>  
  
 <span data-ttu-id="5c934-158">Sie können diesen Vorgang auf Ganzzahlen mit Vorzeichen ausführen.</span><span class="sxs-lookup"><span data-stu-id="5c934-158">You can perform this operation on signed integers.</span></span> <span data-ttu-id="5c934-159">Verwenden Sie für Gleitkommawerte, <xref:System.Reflection.Emit.OpCodes.Add>.</span><span class="sxs-lookup"><span data-stu-id="5c934-159">For floating-point values, use <xref:System.Reflection.Emit.OpCodes.Add>.</span></span>  
  
 <span data-ttu-id="5c934-160">Die zulässigen Operandentypen und ihre entsprechenden Ergebnis-Datentyp werden in der folgenden Tabelle aufgeführt.</span><span class="sxs-lookup"><span data-stu-id="5c934-160">The acceptable operand types and their corresponding result data type are listed in the table below.</span></span> <span data-ttu-id="5c934-161">Wenn kein Eintrag für eine bestimmte vorhanden ist (z. B. `int32` und `float`; `int32` und `int64`), dabei handelt es sich eine ungültige Anweisung für die Microsoft Intermediate Language (MSIL) wird ein Fehler generiert.</span><span class="sxs-lookup"><span data-stu-id="5c934-161">If there is no entry for a particular type combination (for example, `int32` and `float`; `int32` and `int64`), it is an invalid Microsoft Intermediate Language (MSIL) instruction and generates an error.</span></span>  
  
|<span data-ttu-id="5c934-162">Operand</span><span class="sxs-lookup"><span data-stu-id="5c934-162">operand</span></span>|<span data-ttu-id="5c934-163">value1-Typ</span><span class="sxs-lookup"><span data-stu-id="5c934-163">value1 type</span></span>|<span data-ttu-id="5c934-164">value2-Typ</span><span class="sxs-lookup"><span data-stu-id="5c934-164">value2 type</span></span>|<span data-ttu-id="5c934-165">Ergebnistyp</span><span class="sxs-lookup"><span data-stu-id="5c934-165">result type</span></span>|  
|-------------|-----------------|-----------------|-----------------|  
|<span data-ttu-id="5c934-166">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-166">add</span></span>|`int32`|`int32`|`int32`|  
|<span data-ttu-id="5c934-167">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-167">add</span></span>|`int32`|`native int`|`native int`|  
|<span data-ttu-id="5c934-168">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-168">add</span></span>|`int32`|`&`|`&`|  
|<span data-ttu-id="5c934-169">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-169">add</span></span>|`int32`|`*`|`*`|  
|<span data-ttu-id="5c934-170">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-170">add</span></span>|`int64`|`int64`|`int64`|  
|<span data-ttu-id="5c934-171">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-171">add</span></span>|`native int`|`int32`|`native int`|  
|<span data-ttu-id="5c934-172">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-172">add</span></span>|`native int`|`native int`|`native int`|  
|<span data-ttu-id="5c934-173">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-173">add</span></span>|`native int`|`&`|`&`|  
|<span data-ttu-id="5c934-174">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-174">add</span></span>|`native int`|`*`|`*`|  
|<span data-ttu-id="5c934-175">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-175">add</span></span>|`F`|`F`|`F`|  
|<span data-ttu-id="5c934-176">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-176">add</span></span>|`&`|`int32`|`&`|  
|<span data-ttu-id="5c934-177">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-177">add</span></span>|`&`|`native int`|`&`|  
|<span data-ttu-id="5c934-178">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-178">add</span></span>|`*`|`int32`|`*`|  
|<span data-ttu-id="5c934-179">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-179">add</span></span>|`*`|`native int`|`*`|  
  
 <span data-ttu-id="5c934-180">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `add.ovf` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-180">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `add.ovf` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-181">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-181">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add_Ovf_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Add_Ovf_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Add_Ovf_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-182">Addiert zwei Ganzzahlwerte ohne Vorzeichen, führt eine Überlaufprüfung durch und legt das Ergebnis auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-182">Adds two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-183">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-183">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-184">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-184">Format</span></span>|<span data-ttu-id="5c934-185">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-185">Assembly Format</span></span>|<span data-ttu-id="5c934-186">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-186">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-187">D7</span><span class="sxs-lookup"><span data-stu-id="5c934-187">D7</span></span>|<span data-ttu-id="5c934-188">Add.ovf.un</span><span class="sxs-lookup"><span data-stu-id="5c934-188">add.ovf.un</span></span>|<span data-ttu-id="5c934-189">Fügt zwei Ganzzahlwerte ohne Vorzeichen mit eine überlaufprüfung hinzu.</span><span class="sxs-lookup"><span data-stu-id="5c934-189">Adds two unsigned integer values with an overflow check.</span></span>|  
  
 <span data-ttu-id="5c934-190">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-190">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-191">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-191">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-192">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-192">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-193">`value2` und `value1` werden aus den Stapel geholt `value1` hinzugefügt `value2` durch eine Suche nach einem Überlauf.</span><span class="sxs-lookup"><span data-stu-id="5c934-193">`value2` and `value1` are popped from the stack; `value1` is added to `value2` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="5c934-194">Das Ergebnis wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-194">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-195"><xref:System.OverflowException> wird ausgelöst, wenn das Ergebnis nicht im Ergebnistyp dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-195"><xref:System.OverflowException> is thrown if the result is not represented in the result type.</span></span>  
  
 <span data-ttu-id="5c934-196">Sie können diesen Vorgang auf Ganzzahlen mit Vorzeichen ausführen.</span><span class="sxs-lookup"><span data-stu-id="5c934-196">You can perform this operation on signed integers.</span></span> <span data-ttu-id="5c934-197">Verwenden Sie für Gleitkommawerte, <xref:System.Reflection.Emit.OpCodes.Add>.</span><span class="sxs-lookup"><span data-stu-id="5c934-197">For floating-point values, use <xref:System.Reflection.Emit.OpCodes.Add>.</span></span>  
  
 <span data-ttu-id="5c934-198">Die zulässigen Operandentypen und ihre entsprechenden Ergebnis-Datentyp werden in der folgenden Tabelle aufgeführt.</span><span class="sxs-lookup"><span data-stu-id="5c934-198">The acceptable operand types and their corresponding result data type are listed in the table below.</span></span> <span data-ttu-id="5c934-199">Wenn kein Eintrag für eine bestimmte vorhanden ist (z. B. `int32` und `float`; `int32` und `int64`), dabei handelt es sich eine ungültige Anweisung für die Microsoft Intermediate Language (MSIL) wird ein Fehler generiert.</span><span class="sxs-lookup"><span data-stu-id="5c934-199">If there is no entry for a particular type combination (for example, `int32` and `float`; `int32` and `int64`), it is an invalid Microsoft Intermediate Language (MSIL) instruction and generates an error.</span></span>  
  
|<span data-ttu-id="5c934-200">Operand</span><span class="sxs-lookup"><span data-stu-id="5c934-200">operand</span></span>|<span data-ttu-id="5c934-201">value1-Typ</span><span class="sxs-lookup"><span data-stu-id="5c934-201">value1 type</span></span>|<span data-ttu-id="5c934-202">value2-Typ</span><span class="sxs-lookup"><span data-stu-id="5c934-202">value2 type</span></span>|<span data-ttu-id="5c934-203">Ergebnistyp</span><span class="sxs-lookup"><span data-stu-id="5c934-203">result type</span></span>|  
|-------------|-----------------|-----------------|-----------------|  
|<span data-ttu-id="5c934-204">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-204">add</span></span>|`int32`|`int32`|`int32`|  
|<span data-ttu-id="5c934-205">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-205">add</span></span>|`int32`|`native int`|`native int`|  
|<span data-ttu-id="5c934-206">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-206">add</span></span>|`int32`|`&`|`&`|  
|<span data-ttu-id="5c934-207">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-207">add</span></span>|`int32`|`*`|`*`|  
|<span data-ttu-id="5c934-208">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-208">add</span></span>|`int64`|`int64`|`int64`|  
|<span data-ttu-id="5c934-209">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-209">add</span></span>|`native int`|`int32`|`native int`|  
|<span data-ttu-id="5c934-210">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-210">add</span></span>|`native int`|`native int`|`native int`|  
|<span data-ttu-id="5c934-211">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-211">add</span></span>|`native int`|`&`|`&`|  
|<span data-ttu-id="5c934-212">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-212">add</span></span>|`native int`|`*`|`*`|  
|<span data-ttu-id="5c934-213">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-213">add</span></span>|`F`|`F`|`F`|  
|<span data-ttu-id="5c934-214">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-214">add</span></span>|`&`|`int32`|`&`|  
|<span data-ttu-id="5c934-215">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-215">add</span></span>|`&`|`native int`|`&`|  
|<span data-ttu-id="5c934-216">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-216">add</span></span>|`*`|`int32`|`*`|  
|<span data-ttu-id="5c934-217">Hinzufügen</span><span class="sxs-lookup"><span data-stu-id="5c934-217">add</span></span>|`*`|`native int`|`*`|  
  
 <span data-ttu-id="5c934-218">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `add.ovf.un` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-218">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `add.ovf.un` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-219">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-219">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode And;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode And" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.And" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly And As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode And;" />
      <MemberSignature Language="F#" Value=" staticval mutable And : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.And" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-220">Berechnet das bitweise AND für zwei Werte und legt das Ergebnis auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-220">Computes the bitwise AND of two values and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-221">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-221">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-222">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-222">Format</span></span>|<span data-ttu-id="5c934-223">Anweisung</span><span class="sxs-lookup"><span data-stu-id="5c934-223">Instruction</span></span>|<span data-ttu-id="5c934-224">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-224">Description</span></span>|  
|------------|-----------------|-----------------|  
|<span data-ttu-id="5c934-225">5F</span><span class="sxs-lookup"><span data-stu-id="5c934-225">5F</span></span>|<span data-ttu-id="5c934-226">und</span><span class="sxs-lookup"><span data-stu-id="5c934-226">and</span></span>|<span data-ttu-id="5c934-227">Bestimmt, das bitweise AND von zwei ganzzahligen Werten.</span><span class="sxs-lookup"><span data-stu-id="5c934-227">Determines the bitwise AND of two integer values.</span></span>|  
  
 <span data-ttu-id="5c934-228">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-228">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-229">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-229">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-230">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-230">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-231">`value1` und `value2` werden aus den Stapel geholt, das bitweise AND von zwei Werten berechnet wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-231">`value1` and `value2` are popped from the stack; the bitwise AND of the two values is computed.</span></span>  
  
4.  <span data-ttu-id="5c934-232">Das Ergebnis wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-232">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-233">Die `and` Anweisung berechnet das bitweise AND für die beiden obersten Werte im Stapel, und das Ergebnis auf dem Stapel verbleibt.</span><span class="sxs-lookup"><span data-stu-id="5c934-233">The `and` instruction computes the bitwise AND of the top two values on the stack and leaves the result on the stack.</span></span>  
  
 <span data-ttu-id="5c934-234">`And` ist ein Vorgang für die ganze Zahlen.</span><span class="sxs-lookup"><span data-stu-id="5c934-234">`And` is an integer-specific operation.</span></span>  
  
 <span data-ttu-id="5c934-235">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `and` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-235">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `and` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-236">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-236">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Arglist">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Arglist;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Arglist" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Arglist" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Arglist As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Arglist;" />
      <MemberSignature Language="F#" Value=" staticval mutable Arglist : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Arglist" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-237">Gibt einen nicht verwalteten Zeiger auf die Argumentliste der aktuellen Methode zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-237">Returns an unmanaged pointer to the argument list of the current method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-238">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-238">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-239">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-239">Format</span></span>|<span data-ttu-id="5c934-240">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-240">Assembly Format</span></span>|<span data-ttu-id="5c934-241">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-241">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-242">FE 00</span><span class="sxs-lookup"><span data-stu-id="5c934-242">FE 00</span></span>|<span data-ttu-id="5c934-243">arglist</span><span class="sxs-lookup"><span data-stu-id="5c934-243">arglist</span></span>|<span data-ttu-id="5c934-244">Gibt ein Handle des Argument-Liste für die aktuelle Methode zurück.</span><span class="sxs-lookup"><span data-stu-id="5c934-244">Returns an argument list handle for the current method.</span></span>|  
  
 <span data-ttu-id="5c934-245">Keine Auswertung Stack Verhalten werden durch diesen Vorgang ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="5c934-245">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="5c934-246">Die `arglist` Anweisung zurückgibt, ein nicht transparentes Handle (ein nicht verwalteter Zeiger, Typ `native int`), die die Argumentliste der aktuellen Methode darstellt.</span><span class="sxs-lookup"><span data-stu-id="5c934-246">The `arglist` instruction returns an opaque handle (an unmanaged pointer, of type `native int`) that represents the argument list of the current method.</span></span> <span data-ttu-id="5c934-247">Dieses Handle ist nur während der Lebensdauer der aktuellen Methode gültig.</span><span class="sxs-lookup"><span data-stu-id="5c934-247">This handle is valid only during the lifetime of the current method.</span></span> <span data-ttu-id="5c934-248">Sie können jedoch das Handle an andere Methoden übergeben, solange die aktuelle Methode für den Thread des Steuerelements ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-248">You can, however, pass the handle to other methods as long as the current method is on the thread of control.</span></span> <span data-ttu-id="5c934-249">Sie können nur ausführen, die `arglist` Anweisung innerhalb einer Methode, die eine Variable Anzahl von Argumenten akzeptiert.</span><span class="sxs-lookup"><span data-stu-id="5c934-249">You can only execute the `arglist` instruction within a method that takes a variable number of arguments.</span></span>  
  
 <span data-ttu-id="5c934-250">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `arglist` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-250">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `arglist` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-251">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-251">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Beq">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Beq;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Beq" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Beq" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Beq As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Beq;" />
      <MemberSignature Language="F#" Value=" staticval mutable Beq : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Beq" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-252">Überträgt die Steuerung an eine Zielanweisung, wenn zwei Werte übereinstimmen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-252">Transfers control to a target instruction if two values are equal.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-253">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-253">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-254">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-254">Format</span></span>|<span data-ttu-id="5c934-255">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-255">Assembly Format</span></span>|<span data-ttu-id="5c934-256">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-256">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-257">3B < `int32` ></span><span class="sxs-lookup"><span data-stu-id="5c934-257">3B < `int32` ></span></span>|<span data-ttu-id="5c934-258">beq `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-258">beq `target`</span></span>|<span data-ttu-id="5c934-259">Branch für die zielanweisung am Offset `target` , wenn die beiden Werte gleich sind.</span><span class="sxs-lookup"><span data-stu-id="5c934-259">Branch to the target instruction at offset `target` if the two values are equal.</span></span>|  
  
 <span data-ttu-id="5c934-260">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-260">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-261">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-261">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-262">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-262">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-263">`value2` und `value1` werden aus den Stapel geholt, wenn `value1` gleich `value2`, der Branch-Vorgang ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-263">`value2` and `value1` are popped from the stack; if `value1` is equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5c934-264">Die `beq` -Anweisung überträgt die Steuerung an den angegebenen zielanweisung Wenn `value1` gleich `value2`.</span><span class="sxs-lookup"><span data-stu-id="5c934-264">The `beq` instruction transfers control to the specified target instruction if `value1` is equal to `value2`.</span></span> <span data-ttu-id="5c934-265">Der Effekt ist derselbe wie das Ausführen einer `ceq` Anweisung, gefolgt von einem `brtrue` Branch die bestimmte zielanweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-265">The effect is the same as performing a `ceq` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="5c934-266">Bei der zielinstruktion wird als mit 4-Byte-Offset vom Anfang der aktuelle Anweisung folgenden dargestellt.</span><span class="sxs-lookup"><span data-stu-id="5c934-266">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5c934-267">Die zulässigen Operandentypen werden unter folgenden Werten gekapselt:</span><span class="sxs-lookup"><span data-stu-id="5c934-267">The acceptable operand types are encapsulated below:</span></span>  
  
 <span data-ttu-id="5c934-268">Wenn bei der zielinstruktion Codes für eine oder mehrere Präfix verfügt, Steuerelement kann nur übertragen werden mit dem ersten dieser Präfixe.</span><span class="sxs-lookup"><span data-stu-id="5c934-268">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="5c934-269">Steuern von Übertragungen in und aus `try`, `catch`, `filter`, und `finally` Blöcke können durch diese Anweisung nicht ausgeführt werden (solche Übertragungen sind stark eingeschränkt und müssen die <xref:System.Reflection.Emit.OpCodes.Leave> Anweisung stattdessen).</span><span class="sxs-lookup"><span data-stu-id="5c934-269">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction (such transfers are severely restricted and must use the <xref:System.Reflection.Emit.OpCodes.Leave> instruction instead).</span></span>  
  
 <span data-ttu-id="5c934-270">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `beq` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-270">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `beq` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-271">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="5c934-271">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Beq_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Beq_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Beq_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Beq_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Beq_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Beq_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Beq_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Beq_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-272">Überträgt die Steuerung an eine Zielanweisung (Kurzform), wenn zwei Werte übereinstimmen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-272">Transfers control to a target instruction (short form) if two values are equal.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-273">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-273">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-274">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-274">Format</span></span>|<span data-ttu-id="5c934-275">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-275">Assembly Format</span></span>|<span data-ttu-id="5c934-276">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-276">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-277">2E < `int8` ></span><span class="sxs-lookup"><span data-stu-id="5c934-277">2E < `int8` ></span></span>|<span data-ttu-id="5c934-278">beq.s `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-278">beq.s `target`</span></span>|<span data-ttu-id="5c934-279">Branch für die zielanweisung am Offset `target` wenn gleich, Kurzform</span><span class="sxs-lookup"><span data-stu-id="5c934-279">Branch to the target instruction at offset `target` if equal, short form</span></span>|  
  
 <span data-ttu-id="5c934-280">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-280">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-281">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-281">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-282">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-282">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-283">`value2` und `value1` werden aus den Stapel geholt, wenn `value1` gleich `value2`, der Branch-Vorgang ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-283">`value2` and `value1` are popped from the stack; if `value1` is equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5c934-284">Die `beq.s` -Anweisung überträgt die Steuerung an den angegebenen zielanweisung Wenn `value1` gleich `value2`.</span><span class="sxs-lookup"><span data-stu-id="5c934-284">The `beq.s` instruction transfers control to the specified target instruction if `value1` is equal to `value2`.</span></span> <span data-ttu-id="5c934-285">Der Effekt ist derselbe wie das Ausführen einer `ceq` Anweisung, gefolgt von einem `brtrue` Branch die bestimmte zielanweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-285">The effect is the same as performing a `ceq` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="5c934-286">Bei der zielinstruktion wird als einer signierten 1-Byte-Offset vom Anfang der aktuelle Anweisung folgenden dargestellt.</span><span class="sxs-lookup"><span data-stu-id="5c934-286">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5c934-287">Die zulässigen Operandentypen werden unter folgenden Werten gekapselt:</span><span class="sxs-lookup"><span data-stu-id="5c934-287">The acceptable operand types are encapsulated below:</span></span>  
  
 <span data-ttu-id="5c934-288">Wenn bei der zielinstruktion Codes für eine oder mehrere Präfix verfügt, Steuerelement kann nur übertragen werden mit dem ersten dieser Präfixe.</span><span class="sxs-lookup"><span data-stu-id="5c934-288">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="5c934-289">Steuern von Übertragungen in und aus `try`, `catch`, `filter`, und `finally` Blöcke können durch diese Anweisung nicht ausgeführt werden (solche Übertragungen sind stark eingeschränkt und müssen die <xref:System.Reflection.Emit.OpCodes.Leave> Anweisung stattdessen).</span><span class="sxs-lookup"><span data-stu-id="5c934-289">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction (such transfers are severely restricted and must use the <xref:System.Reflection.Emit.OpCodes.Leave> instruction instead).</span></span>  
  
 <span data-ttu-id="5c934-290">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `beq.s` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-290">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `beq.s` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-291">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="5c934-291">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-292">Überträgt die Steuerung an eine Zielanweisung, wenn der erste Wert größer oder gleich dem zweiten Wert ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-292">Transfers control to a target instruction if the first value is greater than or equal to the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-293">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-293">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-294">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-294">Format</span></span>|<span data-ttu-id="5c934-295">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-295">Assembly Format</span></span>|<span data-ttu-id="5c934-296">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-296">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-297">3C `<int32>`</span><span class="sxs-lookup"><span data-stu-id="5c934-297">3C `<int32>`</span></span>|<span data-ttu-id="5c934-298">bge `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-298">bge `target`</span></span>|<span data-ttu-id="5c934-299">Die Verzweigung für die zielanweisung mit dem angegebenen Offset aus, wenn der erste Wert größer als oder gleich dem zweiten Wert ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-299">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value.</span></span>|  
  
 <span data-ttu-id="5c934-300">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-300">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-301">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-301">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-302">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-302">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-303">`value2` und `value1` werden aus den Stapel geholt, wenn `value1` ist größer als oder gleich `value2`, der Branch-Vorgang ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-303">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5c934-304">Die `bge` -Anweisung überträgt die Steuerung an den angegebenen zielanweisung Wenn `value1` ist größer als oder gleich `value2`.</span><span class="sxs-lookup"><span data-stu-id="5c934-304">The `bge` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`.</span></span> <span data-ttu-id="5c934-305">Der Effekt ist identisch mit der Ausführung einer `clt.un` Anweisung, gefolgt von einem `brfalse` Branch die bestimmte zielanweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-305">The effect is identical to performing a `clt.un` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="5c934-306">Bei der zielinstruktion wird als mit 4-Byte-Offset vom Anfang der aktuelle Anweisung folgenden dargestellt.</span><span class="sxs-lookup"><span data-stu-id="5c934-306">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5c934-307">Wenn bei der zielinstruktion Codes für eine oder mehrere Präfix verfügt, Steuerelement kann nur übertragen werden mit dem ersten dieser Präfixe.</span><span class="sxs-lookup"><span data-stu-id="5c934-307">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5c934-308">Steuern von Übertragungen in und aus `try`, `catch`, `filter`, und `finally` Blöcke können durch diese Anweisung nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-308">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5c934-309">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `bge` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-309">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-310">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="5c934-310">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-311">Überträgt die Steuerung an eine Zielanweisung (Kurzform), wenn der erste Wert größer oder gleich dem zweiten Wert ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-311">Transfers control to a target instruction (short form) if the first value is greater than or equal to the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-312">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-312">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-313">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-313">Format</span></span>|<span data-ttu-id="5c934-314">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-314">Assembly Format</span></span>|<span data-ttu-id="5c934-315">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-315">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-316">2F `<int8>`</span><span class="sxs-lookup"><span data-stu-id="5c934-316">2F `<int8>`</span></span>|<span data-ttu-id="5c934-317">bge.s `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-317">bge.s `target`</span></span>|<span data-ttu-id="5c934-318">Die Verzweigung für die zielanweisung mit dem angegebenen Offset ist der erste Wert größer als oder gleich dem zweiten Wert, Kurzform.</span><span class="sxs-lookup"><span data-stu-id="5c934-318">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value, short form.</span></span>|  
  
 <span data-ttu-id="5c934-319">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-319">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-320">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-320">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-321">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-321">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-322">`value2` und `value1` werden aus den Stapel geholt, wenn `value1` ist größer als oder gleich `value2`, der Branch-Vorgang ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-322">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5c934-323">Die `bge.s` -Anweisung überträgt die Steuerung an den angegebenen zielanweisung Wenn `value1` ist größer als oder gleich `value2`.</span><span class="sxs-lookup"><span data-stu-id="5c934-323">The `bge.s` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`.</span></span> <span data-ttu-id="5c934-324">Der Effekt ist identisch mit der Ausführung einer `clt.un` Anweisung, gefolgt von einem `brfalse` Branch die bestimmte zielanweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-324">The effect is identical to performing a `clt.un` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="5c934-325">Bei der zielinstruktion wird als einer signierten 1-Byte-Offset vom Anfang der aktuelle Anweisung folgenden dargestellt.</span><span class="sxs-lookup"><span data-stu-id="5c934-325">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5c934-326">Wenn bei der zielinstruktion Codes für eine oder mehrere Präfix verfügt, Steuerelement kann nur übertragen werden mit dem ersten dieser Präfixe.</span><span class="sxs-lookup"><span data-stu-id="5c934-326">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5c934-327">Steuern von Übertragungen in und aus `try`, `catch`, `filter`, und `finally` Blöcke können durch diese Anweisung nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-327">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5c934-328">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `bge.s` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-328">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge.s` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-329">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="5c934-329">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-330">Überträgt die Steuerung an eine Zielanweisung, wenn Ganzzahlwerte ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen werden und der erste Wert größer als der zweite Wert ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-330">Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-331">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-331">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-332">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-332">Format</span></span>|<span data-ttu-id="5c934-333">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-333">Assembly Format</span></span>|<span data-ttu-id="5c934-334">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-334">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-335">41 `<int32>`</span><span class="sxs-lookup"><span data-stu-id="5c934-335">41 `<int32>`</span></span>|<span data-ttu-id="5c934-336">bge.un `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-336">bge.un `target`</span></span>|<span data-ttu-id="5c934-337">Die Verzweigung für die zielanweisung mit dem angegebenen Offset aus, wenn der erste Wert größer als oder gleich dem zweiten Wert (Werte ohne Vorzeichen).</span><span class="sxs-lookup"><span data-stu-id="5c934-337">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="5c934-338">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-338">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-339">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-339">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-340">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-340">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-341">`value2` und `value1` werden aus den Stapel geholt, wenn `value1` ist größer als oder gleich `value2`, der Branch-Vorgang ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-341">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5c934-342">Die `bge.un` -Anweisung überträgt die Steuerung an den angegebenen zielanweisung Wenn `value1` ist größer als oder gleich `value2`, wenn Sie mithilfe von-Ganzzahl ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen.</span><span class="sxs-lookup"><span data-stu-id="5c934-342">The `bge.un` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="5c934-343">Der Effekt ist identisch mit der Ausführung einer `clt` Anweisung, gefolgt von einem `brfalse` Branch die bestimmte zielanweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-343">The effect is identical to performing a `clt` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="5c934-344">Bei der zielinstruktion wird als mit 4-Byte-Offset vom Anfang der aktuelle Anweisung folgenden dargestellt.</span><span class="sxs-lookup"><span data-stu-id="5c934-344">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5c934-345">Wenn bei der zielinstruktion Codes für eine oder mehrere Präfix verfügt, Steuerelement kann nur übertragen werden mit dem ersten dieser Präfixe.</span><span class="sxs-lookup"><span data-stu-id="5c934-345">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5c934-346">Steuern von Übertragungen in und aus `try`, `catch`, `filter`, und `finally` Blöcke können durch diese Anweisung nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-346">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5c934-347">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `bge.un` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-347">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge.un` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-348">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="5c934-348">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-349">Überträgt die Steuerung an eine Zielanweisung (Kurzform), wenn Ganzzahlwerte ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen werden und der erste Wert größer als der zweite Wert ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-349">Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-350">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-350">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-351">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-351">Format</span></span>|<span data-ttu-id="5c934-352">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-352">Assembly Format</span></span>|<span data-ttu-id="5c934-353">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-353">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-354">34 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="5c934-354">34 < `int8` ></span></span>|<span data-ttu-id="5c934-355">bge.un.s `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-355">bge.un.s `target`</span></span>|<span data-ttu-id="5c934-356">Die Verzweigung für die zielanweisung mit dem angegebenen Offset ist der erste Wert größer als oder gleich dem zweiten Wert (Werte ohne Vorzeichen), Kurzform.</span><span class="sxs-lookup"><span data-stu-id="5c934-356">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="5c934-357">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-357">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-358">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-358">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-359">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-359">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-360">`value2` und `value1` werden aus den Stapel geholt, wenn `value1` ist größer als oder gleich `value2`, der Branch-Vorgang ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-360">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5c934-361">Die `bge.un.s` -Anweisung überträgt die Steuerung an den angegebenen zielanweisung Wenn `value1` ist größer als oder gleich `value2`, wenn Sie mithilfe von-Ganzzahl ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen.</span><span class="sxs-lookup"><span data-stu-id="5c934-361">The `bge.un.s` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="5c934-362">Der Effekt ist identisch mit der Ausführung einer `clt` Anweisung, gefolgt von einem `brfalse` Branch die bestimmte zielanweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-362">The effect is identical to performing a `clt` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="5c934-363">Bei der zielinstruktion wird als einer signierten 1-Byte-Offset vom Anfang der aktuelle Anweisung folgenden dargestellt.</span><span class="sxs-lookup"><span data-stu-id="5c934-363">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5c934-364">Wenn bei der zielinstruktion Codes für eine oder mehrere Präfix verfügt, Steuerelement kann nur übertragen werden mit dem ersten dieser Präfixe.</span><span class="sxs-lookup"><span data-stu-id="5c934-364">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5c934-365">Steuern von Übertragungen in und aus `try`, `catch`, `filter`, und `finally` Blöcke können durch diese Anweisung nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-365">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5c934-366">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `bge.un.s` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-366">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-367">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="5c934-367">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-368">Überträgt die Steuerung an eine Zielanweisung, wenn der erste Wert größer als der zweite Wert ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-368">Transfers control to a target instruction if the first value is greater than the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-369">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-369">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-370">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-370">Format</span></span>|<span data-ttu-id="5c934-371">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-371">Assembly Format</span></span>|<span data-ttu-id="5c934-372">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-372">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-373">3D < `int32` ></span><span class="sxs-lookup"><span data-stu-id="5c934-373">3D < `int32` ></span></span>|<span data-ttu-id="5c934-374">bgt `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-374">bgt `target`</span></span>|<span data-ttu-id="5c934-375">Die Verzweigung für die zielanweisung mit dem angegebenen Offset aus, wenn der erste Wert größer als der zweite Wert ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-375">Branch to the target instruction at the specified offset if the first value is greater than the second value.</span></span>|  
  
 <span data-ttu-id="5c934-376">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-376">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-377">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-377">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-378">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-378">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-379">`value2` und `value1` werden aus den Stapel geholt, wenn `value1` ist größer als `value2`, der Branch-Vorgang ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-379">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5c934-380">Die `bgt` -Anweisung überträgt die Steuerung an den angegebenen zielanweisung Wenn `value1` ist größer als `value2`.</span><span class="sxs-lookup"><span data-stu-id="5c934-380">The `bgt` instruction transfers control to the specified target instruction if `value1` is greater than `value2`.</span></span> <span data-ttu-id="5c934-381">Der Effekt ist identisch mit der Ausführung einer `cgt` Anweisung, gefolgt von einem `brtrue` Branch die bestimmte zielanweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-381">The effect is identical to performing a `cgt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="5c934-382">Bei der zielinstruktion wird als mit 4-Byte-Offset vom Anfang der aktuelle Anweisung folgenden dargestellt.</span><span class="sxs-lookup"><span data-stu-id="5c934-382">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5c934-383">Wenn bei der zielinstruktion Codes für eine oder mehrere Präfix verfügt, Steuerelement kann nur übertragen werden mit dem ersten dieser Präfixe.</span><span class="sxs-lookup"><span data-stu-id="5c934-383">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5c934-384">Steuern von Übertragungen in und aus `try`, `catch`, `filter`, und `finally` Blöcke können durch diese Anweisung nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-384">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5c934-385">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `bgt` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-385">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-386">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="5c934-386">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-387">Überträgt die Steuerung an eine Zielanweisung (Kurzform), wenn der erste Wert größer als der zweite Wert ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-387">Transfers control to a target instruction (short form) if the first value is greater than the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-388">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-388">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-389">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-389">Format</span></span>|<span data-ttu-id="5c934-390">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-390">Assembly Format</span></span>|<span data-ttu-id="5c934-391">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-391">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-392">30 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="5c934-392">30 < `int8` ></span></span>|<span data-ttu-id="5c934-393">bgt.s `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-393">bgt.s `target`</span></span>|<span data-ttu-id="5c934-394">Die Verzweigung für die zielanweisung mit dem angegebenen Offset aus, wenn der erste Wert größer als der zweite Wert ist, kurzes Format ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-394">Branch to the target instruction at the specified offset if the first value is greater than the second value, short form.</span></span>|  
  
 <span data-ttu-id="5c934-395">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-395">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-396">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-396">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-397">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-397">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-398">`value2` und `value1` werden aus den Stapel geholt, wenn `value1` ist größer als `value2`, der Branch-Vorgang ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-398">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5c934-399">Die `bgt.s` -Anweisung überträgt die Steuerung an den angegebenen zielanweisung Wenn `value1` ist größer als `value2`.</span><span class="sxs-lookup"><span data-stu-id="5c934-399">The `bgt.s` instruction transfers control to the specified target instruction if `value1` is greater than `value2`.</span></span> <span data-ttu-id="5c934-400">Der Effekt ist identisch mit der Ausführung einer `cgt` Anweisung, gefolgt von einem `brtrue` Branch die bestimmte zielanweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-400">The effect is identical to performing a `cgt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="5c934-401">Bei der zielinstruktion wird als einer signierten 1-Byte-Offset vom Anfang der aktuelle Anweisung folgenden dargestellt.</span><span class="sxs-lookup"><span data-stu-id="5c934-401">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5c934-402">Wenn bei der zielinstruktion Codes für eine oder mehrere Präfix verfügt, Steuerelement kann nur übertragen werden mit dem ersten dieser Präfixe.</span><span class="sxs-lookup"><span data-stu-id="5c934-402">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5c934-403">Steuern von Übertragungen in und aus `try`, `catch`, `filter`, und `finally` Blöcke können durch diese Anweisung nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-403">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5c934-404">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `bgt.s` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-404">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt.s` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-405">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="5c934-405">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-406">Überträgt die Steuerung an eine Zielanweisung, wenn Ganzzahlwerte ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen werden und der erste Wert größer als der zweite Wert ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-406">Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-407">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-407">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-408">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-408">Format</span></span>|<span data-ttu-id="5c934-409">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-409">Assembly Format</span></span>|<span data-ttu-id="5c934-410">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-410">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-411">42 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="5c934-411">42 < `int32` ></span></span>|<span data-ttu-id="5c934-412">bgt.un `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-412">bgt.un `target`</span></span>|<span data-ttu-id="5c934-413">Die Verzweigung für die zielanweisung mit dem angegebenen Offset aus, wenn der erste Wert größer als der zweite Wert (Werte ohne Vorzeichen) ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-413">Branch to the target instruction at the specified offset if the first value is greater than the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="5c934-414">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-414">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-415">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-415">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-416">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-416">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-417">`value2` und `value1` werden aus den Stapel geholt, wenn `value1` ist größer als `value2`, der Branch-Vorgang ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-417">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5c934-418">Die `bgt.un` -Anweisung überträgt die Steuerung an den angegebenen zielanweisung Wenn `value1` ist größer als `value2`, wenn Sie mithilfe von-Ganzzahl ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen.</span><span class="sxs-lookup"><span data-stu-id="5c934-418">The `bgt.un` instruction transfers control to the specified target instruction if `value1` is greater than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="5c934-419">Der Effekt ist identisch mit der Ausführung einer `cgt.un` Anweisung, gefolgt von einem `brtrue` Branch die bestimmte zielanweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-419">The effect is identical to performing a `cgt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="5c934-420">Bei der zielinstruktion wird als mit 4-Byte-Offset vom Anfang der aktuelle Anweisung folgenden dargestellt.</span><span class="sxs-lookup"><span data-stu-id="5c934-420">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5c934-421">Wenn bei der zielinstruktion Codes für eine oder mehrere Präfix verfügt, Steuerelement kann nur übertragen werden mit dem ersten dieser Präfixe.</span><span class="sxs-lookup"><span data-stu-id="5c934-421">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5c934-422">Steuern von Übertragungen in und aus `try`, `catch`, `filter`, und `finally` Blöcke können durch diese Anweisung nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-422">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5c934-423">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `bgt.un` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-423">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt.un` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-424">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="5c934-424">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-425">Überträgt die Steuerung an eine Zielanweisung (Kurzform), wenn Ganzzahlwerte ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen werden und der erste Wert größer als der zweite Wert ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-425">Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-426">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-426">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-427">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-427">Format</span></span>|<span data-ttu-id="5c934-428">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-428">Assembly Format</span></span>|<span data-ttu-id="5c934-429">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-429">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-430">35 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="5c934-430">35 < `int8` ></span></span>|<span data-ttu-id="5c934-431">bgt.un.s `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-431">bgt.un.s `target`</span></span>|<span data-ttu-id="5c934-432">Die Verzweigung für die zielanweisung mit dem angegebenen Offset ist der erste Wert größer als der zweite Wert (Werte ohne Vorzeichen), Kurzform.</span><span class="sxs-lookup"><span data-stu-id="5c934-432">Branch to the target instruction at the specified offset if the first value is greater than the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="5c934-433">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-433">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-434">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-434">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-435">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-435">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-436">`value2` und `value1` werden aus den Stapel geholt, wenn `value1` ist größer als `value2`, der Branch-Vorgang ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-436">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5c934-437">Die `bgt.un.s` -Anweisung überträgt die Steuerung an den angegebenen zielanweisung Wenn `value1` ist größer als `value2`, wenn Sie mithilfe von-Ganzzahl ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen.</span><span class="sxs-lookup"><span data-stu-id="5c934-437">The `bgt.un.s` instruction transfers control to the specified target instruction if `value1` is greater than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="5c934-438">Der Effekt ist identisch mit der Ausführung einer `cgt.un` Anweisung, gefolgt von einem `brtrue` Branch die bestimmte zielanweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-438">The effect is identical to performing a `cgt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="5c934-439">Bei der zielinstruktion wird als einer signierten 1-Byte-Offset vom Anfang der aktuelle Anweisung folgenden dargestellt.</span><span class="sxs-lookup"><span data-stu-id="5c934-439">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5c934-440">Wenn bei der zielinstruktion Codes für eine oder mehrere Präfix verfügt, Steuerelement kann nur übertragen werden mit dem ersten dieser Präfixe.</span><span class="sxs-lookup"><span data-stu-id="5c934-440">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5c934-441">Steuern von Übertragungen in und aus `try`, `catch`, `filter`, und `finally` Blöcke können durch diese Anweisung nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-441">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5c934-442">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `bgt.un.s` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-442">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-443">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="5c934-443">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-444">Überträgt die Steuerung an eine Zielanweisung, wenn der erste Wert kleiner oder gleich dem zweiten Wert ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-444">Transfers control to a target instruction if the first value is less than or equal to the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-445">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-445">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-446">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-446">Format</span></span>|<span data-ttu-id="5c934-447">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-447">Assembly Format</span></span>|<span data-ttu-id="5c934-448">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-448">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-449">3E `<int32>`</span><span class="sxs-lookup"><span data-stu-id="5c934-449">3E `<int32>`</span></span>|<span data-ttu-id="5c934-450">ble `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-450">ble `target`</span></span>|<span data-ttu-id="5c934-451">Die Verzweigung für die zielanweisung mit dem angegebenen Offset aus, wenn der erste Wert kleiner oder gleich dem zweiten Wert ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-451">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value.</span></span>|  
  
 <span data-ttu-id="5c934-452">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-452">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-453">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-453">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-454">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-454">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-455">`value2` und `value1` werden aus den Stapel geholt, wenn `value1` ist kleiner als oder gleich `value2`, der Branch-Vorgang ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-455">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5c934-456">Die `ble` -Anweisung überträgt die Steuerung an den angegebenen zielanweisung Wenn `value1` ist kleiner als oder gleich `value2`.</span><span class="sxs-lookup"><span data-stu-id="5c934-456">The `ble` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`.</span></span> <span data-ttu-id="5c934-457">Der Effekt ist identisch mit der Ausführung einer `cgt` Anweisung (`cgt.un` für float) gefolgt von einem `brfalse` Branch die bestimmte zielanweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-457">The effect is identical to performing a `cgt` instruction (`cgt.un` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="5c934-458">Bei der zielinstruktion wird als mit 4-Byte-Offset vom Anfang der aktuelle Anweisung folgenden dargestellt.</span><span class="sxs-lookup"><span data-stu-id="5c934-458">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5c934-459">Wenn bei der zielinstruktion Codes für eine oder mehrere Präfix verfügt, Steuerelement kann nur übertragen werden mit dem ersten dieser Präfixe.</span><span class="sxs-lookup"><span data-stu-id="5c934-459">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5c934-460">Steuern von Übertragungen in und aus `try`, `catch`, `filter`, und `finally` Blöcke können durch diese Anweisung nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-460">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5c934-461">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ble` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-461">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-462">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="5c934-462">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-463">Überträgt die Steuerung an eine Zielanweisung (Kurzform), wenn der erste Wert kleiner oder gleich dem zweiten Wert ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-463">Transfers control to a target instruction (short form) if the first value is less than or equal to the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-464">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-464">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-465">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-465">Format</span></span>|<span data-ttu-id="5c934-466">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-466">Assembly Format</span></span>|<span data-ttu-id="5c934-467">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-467">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-468">31 `<int8>`</span><span class="sxs-lookup"><span data-stu-id="5c934-468">31 `<int8>`</span></span>|<span data-ttu-id="5c934-469">ble.s `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-469">ble.s `target`</span></span>|<span data-ttu-id="5c934-470">Die Verzweigung für die zielanweisung mit dem angegebenen Offset aus, wenn der erste Wert kleiner als oder gleich der zweite Wert ist, kurzes Format ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-470">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value, short form.</span></span>|  
  
 <span data-ttu-id="5c934-471">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-471">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-472">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-472">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-473">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-473">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-474">`value2` und `value1` werden aus den Stapel geholt, wenn `value1` ist kleiner als oder gleich `value2`, der Branch-Vorgang ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-474">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5c934-475">Die `ble.s` -Anweisung überträgt die Steuerung an den angegebenen zielanweisung Wenn `value1` ist kleiner als oder gleich `value2`.</span><span class="sxs-lookup"><span data-stu-id="5c934-475">The `ble.s` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`.</span></span> <span data-ttu-id="5c934-476">Der Effekt ist identisch mit der Ausführung einer `cgt` Anweisung (`cgt.un` für float) Anweisung, gefolgt von einem`brfalse` Branch die bestimmte zielanweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-476">The effect is identical to performing a `cgt` instruction (`cgt.un` for floats) instruction followed by a`brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="5c934-477">Bei der zielinstruktion wird als einer signierten 1-Byte-Offset vom Anfang der aktuelle Anweisung folgenden dargestellt.</span><span class="sxs-lookup"><span data-stu-id="5c934-477">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5c934-478">Wenn bei der zielinstruktion Codes für eine oder mehrere Präfix verfügt, Steuerelement kann nur übertragen werden mit dem ersten dieser Präfixe.</span><span class="sxs-lookup"><span data-stu-id="5c934-478">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5c934-479">Steuern von Übertragungen in und aus `try`, `catch`, `filter`, und `finally` Blöcke können durch diese Anweisung nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-479">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5c934-480">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ble.s` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-480">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble.s` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-481">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="5c934-481">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-482">Überträgt die Steuerung an eine Zielanweisung, wenn Ganzzahlwerte ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen werden und der erste Wert kleiner oder gleich dem zweiten Wert ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-482">Transfers control to a target instruction if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-483">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-483">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-484">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-484">Format</span></span>|<span data-ttu-id="5c934-485">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-485">Assembly Format</span></span>|<span data-ttu-id="5c934-486">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-486">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-487">43 `<int32>`</span><span class="sxs-lookup"><span data-stu-id="5c934-487">43 `<int32>`</span></span>|<span data-ttu-id="5c934-488">ble.un `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-488">ble.un `target`</span></span>|<span data-ttu-id="5c934-489">Die Verzweigung für die zielanweisung mit dem angegebenen Offset aus, wenn der erste Wert kleiner oder gleich dem zweiten Wert (Werte ohne Vorzeichen) ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-489">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="5c934-490">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-490">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-491">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-491">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-492">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-492">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-493">`value2` und `value1` werden aus den Stapel geholt, wenn `value1` ist kleiner als oder gleich `value2`, der Branch-Vorgang ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-493">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5c934-494">Die `ble.un` -Anweisung überträgt die Steuerung an den angegebenen zielanweisung Wenn `value1` ist kleiner als oder gleich `value2`, wenn Sie mithilfe von-Ganzzahl ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen.</span><span class="sxs-lookup"><span data-stu-id="5c934-494">The `ble.un` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="5c934-495">Der Effekt ist identisch mit der Ausführung einer `cgt.un` Anweisung (`cgt` für float) gefolgt von einem `brfalse` Branch die bestimmte zielanweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-495">The effect is identical to performing a `cgt.un` instruction (`cgt` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="5c934-496">Bei der zielinstruktion wird als mit 4-Byte-Offset vom Anfang der aktuelle Anweisung folgenden dargestellt.</span><span class="sxs-lookup"><span data-stu-id="5c934-496">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5c934-497">Wenn bei der zielinstruktion Codes für eine oder mehrere Präfix verfügt, Steuerelement kann nur übertragen werden mit dem ersten dieser Präfixe.</span><span class="sxs-lookup"><span data-stu-id="5c934-497">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5c934-498">Steuern von Übertragungen in und aus `try`, `catch`, `filter`, und `finally` Blöcke können durch diese Anweisung nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-498">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5c934-499">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ble.un` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-499">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble.un` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-500">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="5c934-500">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-501">Überträgt die Steuerung an eine Zielanweisung (Kurzform), wenn Ganzzahlwerte ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen werden und der erste Wert kleiner oder gleich dem zweiten Wert ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-501">Transfers control to a target instruction (short form) if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-502">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-502">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-503">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-503">Format</span></span>|<span data-ttu-id="5c934-504">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-504">Assembly Format</span></span>|<span data-ttu-id="5c934-505">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-505">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-506">36 `<int8>`</span><span class="sxs-lookup"><span data-stu-id="5c934-506">36 `<int8>`</span></span>|<span data-ttu-id="5c934-507">ble.un.s `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-507">ble.un.s `target`</span></span>|<span data-ttu-id="5c934-508">Die Verzweigung für die zielanweisung mit dem angegebenen Offset aus, wenn der erste Wert kleiner oder gleich dem zweiten Wert (Werte ohne Vorzeichen), Kurzform ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-508">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="5c934-509">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-509">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-510">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-510">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-511">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-511">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-512">`value2` und `value1` werden aus den Stapel geholt, wenn `value1` ist kleiner als oder gleich `value2`, der Branch-Vorgang ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-512">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5c934-513">Die `ble.un.s` -Anweisung überträgt die Steuerung an den angegebenen zielanweisung Wenn `value1` ist kleiner als oder gleich `value2`, wenn Sie mithilfe von-Ganzzahl ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen.</span><span class="sxs-lookup"><span data-stu-id="5c934-513">The `ble.un.s` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="5c934-514">Der Effekt ist identisch mit der Ausführung einer `cgt.un` Anweisung (`cgt` für float) gefolgt von einem `brfalse` Branch die bestimmte zielanweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-514">The effect is identical to performing a `cgt.un` instruction (`cgt` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="5c934-515">Bei der zielinstruktion wird als einer signierten 1-Byte-Offset vom Anfang der aktuelle Anweisung folgenden dargestellt.</span><span class="sxs-lookup"><span data-stu-id="5c934-515">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5c934-516">Wenn bei der zielinstruktion Codes für eine oder mehrere Präfix verfügt, Steuerelement kann nur übertragen werden mit dem ersten dieser Präfixe.</span><span class="sxs-lookup"><span data-stu-id="5c934-516">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5c934-517">Steuern von Übertragungen in und aus `try`, `catch`, `filter`, und `finally` Blöcke können durch diese Anweisung nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-517">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5c934-518">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ble.un.s` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-518">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-519">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="5c934-519">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-520">Überträgt die Steuerung an eine Zielanweisung, wenn der erste Wert kleiner als der zweite Wert ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-520">Transfers control to a target instruction if the first value is less than the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-521">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-521">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-522">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-522">Format</span></span>|<span data-ttu-id="5c934-523">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-523">Assembly Format</span></span>|<span data-ttu-id="5c934-524">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-524">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-525">3F &LT; `int32` ></span><span class="sxs-lookup"><span data-stu-id="5c934-525">3F < `int32` ></span></span>|<span data-ttu-id="5c934-526">blt `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-526">blt `target`</span></span>|<span data-ttu-id="5c934-527">Die Verzweigung, die zielanweisung, in dem angegebenen Offset aus, wenn der erste Wert ist kleiner als der zweite Wert.</span><span class="sxs-lookup"><span data-stu-id="5c934-527">Branch to the target instruction at the specified offset if the first value is less than the second value.</span></span>|  
  
 <span data-ttu-id="5c934-528">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-528">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-529">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-529">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-530">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-530">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-531">`value2` und `value1` werden aus den Stapel geholt, wenn `value1` ist kleiner als `value2`, der Branch-Vorgang ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-531">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5c934-532">Die `blt` -Anweisung überträgt die Steuerung an den angegebenen zielanweisung Wenn `value1` ist kleiner als oder gleich `value2`.</span><span class="sxs-lookup"><span data-stu-id="5c934-532">The `blt` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`.</span></span> <span data-ttu-id="5c934-533">Der Effekt ist identisch mit der Ausführung einer `clt` Anweisung, gefolgt von einem `brtrue` Branch die bestimmte zielanweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-533">The effect is identical to performing a `clt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="5c934-534">Bei der zielinstruktion wird als mit 4-Byte-Offset vom Anfang der aktuelle Anweisung folgenden dargestellt.</span><span class="sxs-lookup"><span data-stu-id="5c934-534">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5c934-535">Wenn bei der zielinstruktion Codes für eine oder mehrere Präfix verfügt, Steuerelement kann nur übertragen werden mit dem ersten dieser Präfixe.</span><span class="sxs-lookup"><span data-stu-id="5c934-535">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5c934-536">Steuern von Übertragungen in und aus `try`, `catch`, `filter`, und `finally` Blöcke können durch diese Anweisung nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-536">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5c934-537">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `blt` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-537">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-538">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="5c934-538">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-539">Überträgt die Steuerung an eine Zielanweisung (Kurzform), wenn der erste Wert kleiner als der zweite Wert ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-539">Transfers control to a target instruction (short form) if the first value is less than the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-540">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-540">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-541">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-541">Format</span></span>|<span data-ttu-id="5c934-542">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-542">Assembly Format</span></span>|<span data-ttu-id="5c934-543">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-543">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-544">32 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="5c934-544">32 < `int8` ></span></span>|<span data-ttu-id="5c934-545">blt.s `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-545">blt.s `target`</span></span>|<span data-ttu-id="5c934-546">Die Verzweigung für die zielanweisung auf dem angegebenen Offset aus, wenn der erste Wert ist kleiner als der zweite Wert, Kurzform.</span><span class="sxs-lookup"><span data-stu-id="5c934-546">Branch to the target instruction at the specified offset if the first value is less than the second value, short form.</span></span>|  
  
 <span data-ttu-id="5c934-547">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-547">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-548">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-548">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-549">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-549">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-550">`value2` und `value1` werden aus den Stapel geholt, wenn `value1` ist kleiner als `value2`, der Branch-Vorgang ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-550">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5c934-551">Die `blt.s` -Anweisung überträgt die Steuerung an den angegebenen zielanweisung Wenn `value1` ist kleiner als `value2`.</span><span class="sxs-lookup"><span data-stu-id="5c934-551">The `blt.s` instruction transfers control to the specified target instruction if `value1` is less than `value2`.</span></span> <span data-ttu-id="5c934-552">Der Effekt ist identisch mit der Ausführung einer `clt` Anweisung, gefolgt von einem `brtrue` Branch die bestimmte zielanweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-552">The effect is identical to performing a `clt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="5c934-553">Bei der zielinstruktion wird als einer signierten 1-Byte-Offset vom Anfang der aktuelle Anweisung folgenden dargestellt.</span><span class="sxs-lookup"><span data-stu-id="5c934-553">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5c934-554">Wenn bei der zielinstruktion Codes für eine oder mehrere Präfix verfügt, Steuerelement kann nur übertragen werden mit dem ersten dieser Präfixe.</span><span class="sxs-lookup"><span data-stu-id="5c934-554">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5c934-555">Steuern von Übertragungen in und aus `try`, `catch`, `filter`, und `finally` Blöcke können durch diese Anweisung nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-555">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5c934-556">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `blt.s` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-556">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt.s` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-557">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="5c934-557">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-558">Überträgt die Steuerung an eine Zielanweisung, wenn Ganzzahlwerte ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen werden und der erste Wert kleiner als der zweite Wert ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-558">Transfers control to a target instruction if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-559">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-559">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-560">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-560">Format</span></span>|<span data-ttu-id="5c934-561">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-561">Assembly Format</span></span>|<span data-ttu-id="5c934-562">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-562">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-563">44 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="5c934-563">44 < `int32` ></span></span>|<span data-ttu-id="5c934-564">blt.un `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-564">blt.un `target`</span></span>|<span data-ttu-id="5c934-565">Die Verzweigung, die zielanweisung, in dem angegebenen Offset aus, wenn der erste Wert ist kleiner als der zweite Wert (Werte ohne Vorzeichen).</span><span class="sxs-lookup"><span data-stu-id="5c934-565">Branch to the target instruction at the specified offset if the first value is less than the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="5c934-566">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-566">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-567">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-567">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-568">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-568">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-569">`value2` und `value1` werden aus den Stapel geholt, wenn `value1` ist kleiner als `value2`, der Branch-Vorgang ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-569">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5c934-570">Die `blt.un` -Anweisung überträgt die Steuerung an den angegebenen zielanweisung Wenn `value1` ist kleiner als `value2`, wenn Sie mithilfe von-Ganzzahl ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen.</span><span class="sxs-lookup"><span data-stu-id="5c934-570">The `blt.un` instruction transfers control to the specified target instruction if `value1` is less than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="5c934-571">Der Effekt ist identisch mit der Ausführung einer `clt.un` Anweisung, gefolgt von einem `brtrue` Branch die bestimmte zielanweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-571">The effect is identical to performing a `clt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="5c934-572">Bei der zielinstruktion wird als mit 4-Byte-Offset vom Anfang der aktuelle Anweisung folgenden dargestellt.</span><span class="sxs-lookup"><span data-stu-id="5c934-572">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5c934-573">Wenn bei der zielinstruktion Codes für eine oder mehrere Präfix verfügt, Steuerelement kann nur übertragen werden mit dem ersten dieser Präfixe.</span><span class="sxs-lookup"><span data-stu-id="5c934-573">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5c934-574">Steuern von Übertragungen in und aus `try`, `catch`, `filter`, und `finally` Blöcke können durch diese Anweisung nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-574">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5c934-575">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `blt.un` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-575">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt.un` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-576">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="5c934-576">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-577">Überträgt die Steuerung an eine Zielanweisung (Kurzform), wenn Ganzzahlwerte ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen werden und der erste Wert kleiner als der zweite Wert ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-577">Transfers control to a target instruction (short form) if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-578">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-578">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-579">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-579">Format</span></span>|<span data-ttu-id="5c934-580">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-580">Assembly Format</span></span>|<span data-ttu-id="5c934-581">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-581">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-582">37 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="5c934-582">37 < `int8` ></span></span>|<span data-ttu-id="5c934-583">blt.un.s `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-583">blt.un.s `target`</span></span>|<span data-ttu-id="5c934-584">Die Verzweigung, die zielanweisung, in dem angegebenen Offset aus, wenn der erste Wert ist kleiner als der zweite Wert (Werte ohne Vorzeichen), Kurzform.</span><span class="sxs-lookup"><span data-stu-id="5c934-584">Branch to the target instruction at the specified offset if the first value is less than the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="5c934-585">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-585">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-586">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-586">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-587">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-587">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-588">`value2` und `value1` werden aus den Stapel geholt, wenn `value1` ist kleiner als `value2`, der Branch-Vorgang ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-588">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5c934-589">Die `blt.un` -Anweisung überträgt die Steuerung an den angegebenen zielanweisung Wenn `value1` ist kleiner als `value2`, wenn Sie mithilfe von-Ganzzahl ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen.</span><span class="sxs-lookup"><span data-stu-id="5c934-589">The `blt.un` instruction transfers control to the specified target instruction if `value1` is less than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="5c934-590">Der Effekt ist identisch mit der Ausführung einer `clt.un` Anweisung, gefolgt von einem `brtrue` Branch die bestimmte zielanweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-590">The effect is identical to performing a `clt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="5c934-591">Bei der zielinstruktion wird als mit 4-Byte-Offset vom Anfang der aktuelle Anweisung folgenden dargestellt.</span><span class="sxs-lookup"><span data-stu-id="5c934-591">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5c934-592">Wenn bei der zielinstruktion Codes für eine oder mehrere Präfix verfügt, Steuerelement kann nur übertragen werden mit dem ersten dieser Präfixe.</span><span class="sxs-lookup"><span data-stu-id="5c934-592">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5c934-593">Steuern von Übertragungen in und aus `try`, `catch`, `filter`, und `finally` Blöcke können durch diese Anweisung nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-593">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5c934-594">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `blt.un.s` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-594">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-595">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="5c934-595">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bne_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bne_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bne_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bne_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bne_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bne_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bne_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bne_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-596">Überträgt die Steuerung an eine Zielanweisung, wenn zwei Ganzzahlwerte ohne Vorzeichen oder ungeordnete Gleitkommawerte ungleich sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-596">Transfers control to a target instruction when two unsigned integer values or unordered float values are not equal.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-597">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-597">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-598">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-598">Format</span></span>|<span data-ttu-id="5c934-599">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-599">Assembly Format</span></span>|<span data-ttu-id="5c934-600">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-600">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-601">40 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="5c934-601">40 < `int32` ></span></span>|<span data-ttu-id="5c934-602">bne.un `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-602">bne.un `target`</span></span>|<span data-ttu-id="5c934-603">Verzweigung an das Ziel der Anweisung mit dem angegebenen Offset aus, wenn zwei Ganzzahlwerte ohne Vorzeichen sind (Werte ohne Vorzeichen) nicht gleich.</span><span class="sxs-lookup"><span data-stu-id="5c934-603">Branch to the target instruction at the specified offset if two unsigned integer values are not equal (unsigned values).</span></span>|  
  
 <span data-ttu-id="5c934-604">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-604">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-605">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-605">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-606">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-606">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-607">`value2` und `value1` werden aus den Stapel geholt, wenn `value1` ist nicht gleich `value2`, der Branch-Vorgang ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-607">`value2` and `value1` are popped from the stack; if `value1` is not equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5c934-608">Die `bne.un` -Anweisung überträgt die Steuerung an den angegebenen zielanweisung Wenn `value1` ist nicht gleich `value2`, wenn Sie mithilfe von-Ganzzahl ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen.</span><span class="sxs-lookup"><span data-stu-id="5c934-608">The `bne.un` instruction transfers control to the specified target instruction if `value1` is not equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="5c934-609">Der Effekt ist identisch mit der Ausführung einer `ceq` Anweisung, gefolgt von einem `brfalse` Branch die bestimmte zielanweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-609">The effect is identical to performing a `ceq` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="5c934-610">Bei der zielinstruktion wird als mit 4-Byte-Offset vom Anfang der aktuelle Anweisung folgenden dargestellt.</span><span class="sxs-lookup"><span data-stu-id="5c934-610">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5c934-611">Wenn bei der zielinstruktion Codes für eine oder mehrere Präfix verfügt, Steuerelement kann nur übertragen werden mit dem ersten dieser Präfixe.</span><span class="sxs-lookup"><span data-stu-id="5c934-611">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5c934-612">Steuern von Übertragungen in und aus `try`, `catch`, `filter`, und `finally` Blöcke können durch diese Anweisung nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-612">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5c934-613">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `bne.un` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-613">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bne.un` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-614">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="5c934-614">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bne_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bne_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bne_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bne_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bne_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bne_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bne_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bne_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-615">Überträgt die Steuerung an eine Zielanweisung (Kurzform), wenn zwei Ganzzahlwerte ohne Vorzeichen oder ungeordnete Gleitkommawerte ungleich sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-615">Transfers control to a target instruction (short form) when two unsigned integer values or unordered float values are not equal.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-616">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-616">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-617">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-617">Format</span></span>|<span data-ttu-id="5c934-618">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-618">Assembly Format</span></span>|<span data-ttu-id="5c934-619">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-619">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-620">33 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="5c934-620">33 < `int8` ></span></span>|<span data-ttu-id="5c934-621">bne.un.s `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-621">bne.un.s `target`</span></span>|<span data-ttu-id="5c934-622">Verzweigung an das Ziel die Anweisung mit dem angegebenen Offset aus, wenn zwei Ganzzahlwerte ohne Vorzeichen sind, nicht gleich (Werte ohne Vorzeichen), Kurzform.</span><span class="sxs-lookup"><span data-stu-id="5c934-622">Branch to the target instruction at the specified offset if two unsigned integer values are not equal (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="5c934-623">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-623">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-624">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-624">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-625">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-625">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-626">`value2` und `value1` werden aus den Stapel geholt, wenn `value1` ist nicht gleich `value2`, der Branch-Vorgang ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-626">`value2` and `value1` are popped from the stack; if `value1` is not equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5c934-627">Die `bne.un` -Anweisung überträgt die Steuerung an den angegebenen zielanweisung Wenn `value1` ist nicht gleich `value2`, wenn Sie mithilfe von-Ganzzahl ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen.</span><span class="sxs-lookup"><span data-stu-id="5c934-627">The `bne.un` instruction transfers control to the specified target instruction if `value1` is not equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="5c934-628">Der Effekt ist identisch mit der Ausführung einer `ceq` Anweisung, gefolgt von einem `brfalse` Branch die bestimmte zielanweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-628">The effect is identical to performing a `ceq` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="5c934-629">Bei der zielinstruktion wird als mit 4-Byte-Offset vom Anfang der aktuelle Anweisung folgenden dargestellt.</span><span class="sxs-lookup"><span data-stu-id="5c934-629">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5c934-630">Wenn bei der zielinstruktion Codes für eine oder mehrere Präfix verfügt, Steuerelement kann nur übertragen werden mit dem ersten dieser Präfixe.</span><span class="sxs-lookup"><span data-stu-id="5c934-630">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5c934-631">Steuern von Übertragungen in und aus `try`, `catch`, `filter`, und `finally` Blöcke können durch diese Anweisung nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-631">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5c934-632">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `bne.un.s` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-632">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bne.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-633">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="5c934-633">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Box">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Box;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Box" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Box" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Box As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Box;" />
      <MemberSignature Language="F#" Value=" staticval mutable Box : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Box" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-634">Konvertiert einen Werttyp in einen Objektverweis (Typ <see langword="O" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-634">Converts a value type to an object reference (type <see langword="O" />).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-635">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-635">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-636">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-636">Format</span></span>|<span data-ttu-id="5c934-637">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-637">Assembly Format</span></span>|<span data-ttu-id="5c934-638">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-638">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-639">8C < `T` ></span><span class="sxs-lookup"><span data-stu-id="5c934-639">8C < `T` ></span></span>|<span data-ttu-id="5c934-640">Feld `valTypeToken`</span><span class="sxs-lookup"><span data-stu-id="5c934-640">box `valTypeToken`</span></span>|<span data-ttu-id="5c934-641">Konvertiert einen Werttyp (des Typs im angegebenen `valTypeToken`) in einen Objektverweis für die "true".</span><span class="sxs-lookup"><span data-stu-id="5c934-641">Convert a value type (of the type specified in `valTypeToken`) to a true object reference.</span></span>|  
  
 <span data-ttu-id="5c934-642">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-642">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-643">Ein Werttyp ist auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-643">A value type is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-644">Der Werttyp wird vom Stapel geholt. die `box` Vorgang ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-644">The value type is popped from the stack; the `box` operation is performed.</span></span>  
  
3.  <span data-ttu-id="5c934-645">Ein Objektverweis auf den resultierenden Typ von "geschachtelten" Wert ist auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-645">An object reference to the resulting "boxed" value type is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-646">Ein Werttyp verfügt über zwei separate Darstellungen in der Common Language Infrastructure (CLI):</span><span class="sxs-lookup"><span data-stu-id="5c934-646">A value type has two separate representations within the Common Language Infrastructure (CLI):</span></span>  
  
-   <span data-ttu-id="5c934-647">Eine "raw" Form verwendet, wenn ein Werttyp in ein anderes Objekt oder auf dem Stapel eingebettet ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-647">A 'raw' form used when a value type is embedded within another object or on the stack.</span></span>  
  
-   <span data-ttu-id="5c934-648">Ein "geschachtelte" Formular, in denen die Daten in den Werttyp in ein Objekt umschlossen (geschachtelt) ist, sodass es als unabhängige Einheit vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-648">A 'boxed' form, where the data in the value type is wrapped (boxed) into an object so it can exist as an independent entity.</span></span>  
  
 <span data-ttu-id="5c934-649">Die `box` -Anweisung konvertiert den für "raw" (nicht geschachtelten)-Werttyp in einen Objektverweis (Typ `O`).</span><span class="sxs-lookup"><span data-stu-id="5c934-649">The `box` instruction converts the 'raw' (unboxed) value type into an object reference (type `O`).</span></span> <span data-ttu-id="5c934-650">Dies wird erreicht, indem Sie ein neues Objekt erstellen und Kopieren der Daten aus dem Werttyp in das neu zugeordnete Objekt.</span><span class="sxs-lookup"><span data-stu-id="5c934-650">This is accomplished by creating a new object and copying the data from the value type into the newly allocated object.</span></span> <span data-ttu-id="5c934-651">`valTypeToken` ist ein Metadatentoken, das den Typ des Werttyps auf dem Stapel angibt.</span><span class="sxs-lookup"><span data-stu-id="5c934-651">`valTypeToken` is a metadata token indicating the type of the value type on the stack.</span></span>  
  
 <span data-ttu-id="5c934-652"><xref:System.OutOfMemoryException> wird ausgelöst, wenn nicht genügend zum Erfüllen der Anforderung Arbeitsspeicher.</span><span class="sxs-lookup"><span data-stu-id="5c934-652"><xref:System.OutOfMemoryException> is thrown if there is insufficient memory to satisfy the request.</span></span>  
  
 <span data-ttu-id="5c934-653"><xref:System.TypeLoadException> wird ausgelöst, wenn die Klasse nicht gefunden werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-653"><xref:System.TypeLoadException> is thrown if the class cannot be found.</span></span> <span data-ttu-id="5c934-654">Dies wird in der Regel erkannt, wenn Microsoft Intermediate Language (MSIL) in systemeigenen Code anstelle einer zur Laufzeit konvertiert wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-654">This is typically detected when Microsoft Intermediate Language (MSIL) is converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="5c934-655">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `box` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-655">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `box` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-656">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="5c934-656">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Br">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Br;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Br" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Br" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Br As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Br;" />
      <MemberSignature Language="F#" Value=" staticval mutable Br : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Br" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-657">Überträgt die Steuerung bedingungslos an eine Zielanweisung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-657">Unconditionally transfers control to a target instruction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-658">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-658">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-659">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-659">Format</span></span>|<span data-ttu-id="5c934-660">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-660">Assembly Format</span></span>|<span data-ttu-id="5c934-661">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-661">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-662">38 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="5c934-662">38 < `int32` ></span></span>|<span data-ttu-id="5c934-663">br `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-663">br `target`</span></span>|<span data-ttu-id="5c934-664">Branches an eine zielanweisung am angegebenen Offset.</span><span class="sxs-lookup"><span data-stu-id="5c934-664">Branches to a target instruction at the specified offset.</span></span>|  
  
 <span data-ttu-id="5c934-665">Keine Auswertung Stack Verhalten werden durch diesen Vorgang ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="5c934-665">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="5c934-666">Die `br` -Anweisung überträgt die Steuerung bedingungslos an eine zielanweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-666">The `br` instruction unconditionally transfers control to a target instruction.</span></span> <span data-ttu-id="5c934-667">Bei der zielinstruktion wird als mit 4-Byte-Offset vom Anfang der aktuelle Anweisung folgenden dargestellt.</span><span class="sxs-lookup"><span data-stu-id="5c934-667">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5c934-668">Wenn bei der zielinstruktion Codes für eine oder mehrere Präfix verfügt, Steuerelement kann nur übertragen werden mit dem ersten dieser Präfixe.</span><span class="sxs-lookup"><span data-stu-id="5c934-668">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5c934-669">Steuern von Übertragungen in und aus `try`, `catch`, `filter`, und `finally` Blöcke können durch diese Anweisung nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-669">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5c934-670">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `br` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-670">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `br` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-671">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="5c934-671">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Br_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Br_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Br_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Br_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Br_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Br_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Br_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Br_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-672">Überträgt die Steuerung bedingungslos an eine Zielanweisung (Kurzform).</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-672">Unconditionally transfers control to a target instruction (short form).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-673">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-673">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-674">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-674">Format</span></span>|<span data-ttu-id="5c934-675">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-675">Assembly Format</span></span>|<span data-ttu-id="5c934-676">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-676">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-677">2B < `int8` ></span><span class="sxs-lookup"><span data-stu-id="5c934-677">2B < `int8` ></span></span>|<span data-ttu-id="5c934-678">br.s `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-678">br.s `target`</span></span>|<span data-ttu-id="5c934-679">Branches an eine zielanweisung am angegebenen Offset, Kurzform.</span><span class="sxs-lookup"><span data-stu-id="5c934-679">Branches to a target instruction at the specified offset, short form.</span></span>|  
  
 <span data-ttu-id="5c934-680">Keine Auswertung Stack Verhalten werden durch diesen Vorgang ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="5c934-680">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="5c934-681">Die `br.s` -Anweisung überträgt die Steuerung bedingungslos an eine zielanweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-681">The `br.s` instruction unconditionally transfers control to a target instruction.</span></span> <span data-ttu-id="5c934-682">Bei der zielinstruktion wird als einer signierten 1-Byte-Offset vom Anfang der aktuelle Anweisung folgenden dargestellt.</span><span class="sxs-lookup"><span data-stu-id="5c934-682">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5c934-683">Wenn bei der zielinstruktion Codes für eine oder mehrere Präfix verfügt, Steuerelement kann nur übertragen werden mit dem ersten dieser Präfixe.</span><span class="sxs-lookup"><span data-stu-id="5c934-683">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5c934-684">Steuern von Übertragungen in und aus `try`, `catch`, `filter`, und `finally` Blöcke können durch diese Anweisung nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-684">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5c934-685">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `br.s` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-685">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `br.s` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-686">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="5c934-686">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Break;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Break" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Break" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Break As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Break;" />
      <MemberSignature Language="F#" Value=" staticval mutable Break : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Break" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-687">Signalisiert CLI (Common Language Infrastructure), den Debugger darüber zu informieren, dass ein Haltepunkt erreicht wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-687">Signals the Common Language Infrastructure (CLI) to inform the debugger that a break point has been tripped.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-688">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-688">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-689">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-689">Format</span></span>|<span data-ttu-id="5c934-690">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-690">Assembly Format</span></span>|<span data-ttu-id="5c934-691">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-691">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-692">01</span><span class="sxs-lookup"><span data-stu-id="5c934-692">01</span></span>|<span data-ttu-id="5c934-693">break</span><span class="sxs-lookup"><span data-stu-id="5c934-693">break</span></span>|<span data-ttu-id="5c934-694">Informieren Sie einem Debugger, dass ein Haltepunkt erreicht wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-694">inform a debugger that a breakpoint has been reached.</span></span>|  
  
 <span data-ttu-id="5c934-695">Keine Auswertung Stack Verhalten werden durch diesen Vorgang ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="5c934-695">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="5c934-696">Die `break` Anweisung ist für die Debugunterstützung.</span><span class="sxs-lookup"><span data-stu-id="5c934-696">The `break` instruction is for debugging support.</span></span> <span data-ttu-id="5c934-697">Es signalisiert die CLI, um den Debugger darüber zu informieren, dass ein Haltepunkt erreicht wurde.</span><span class="sxs-lookup"><span data-stu-id="5c934-697">It signals the CLI to inform the debugger that a break point has been tripped.</span></span> <span data-ttu-id="5c934-698">Es wurde keine anderen Auswirkungen auf den Interpreter-Zustand.</span><span class="sxs-lookup"><span data-stu-id="5c934-698">It has no other effect on the interpreter state.</span></span>  
  
 <span data-ttu-id="5c934-699">Die `break` Anweisung weist den kleinsten mögliche-Anweisung Größe aktivieren Code einen Haltepunkt Patchen und minimale Unruhen, um den umgebenden Code zu generieren.</span><span class="sxs-lookup"><span data-stu-id="5c934-699">The `break` instruction has the smallest possible instruction size enabling code patching with a break point and generating minimal disturbance to the surrounding code.</span></span>  
  
 <span data-ttu-id="5c934-700">Die `break` Anweisung an einen Debugger abgefangen, keine Aktion durchführen oder eine Sicherheitsausnahme auslösen kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-700">The `break` instruction can trap to a debugger, do nothing, or raise a security exception.</span></span> <span data-ttu-id="5c934-701">Das genaue Verhalten ist implementierungsdefiniert.</span><span class="sxs-lookup"><span data-stu-id="5c934-701">The exact behavior is implementation-defined.</span></span>  
  
 <span data-ttu-id="5c934-702">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `break` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-702">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `break` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-703">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-703">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brfalse">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brfalse;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brfalse" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brfalse" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brfalse As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brfalse;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brfalse : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brfalse" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-704">Überträgt die Steuerung an eine zielanweisung Wenn <paramref name="value" /> ist <see langword="false" />, ein null-Verweis (<see langword="Nothing" /> in Visual Basic), oder 0 (null).</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-704">Transfers control to a target instruction if <paramref name="value" /> is <see langword="false" />, a null reference (<see langword="Nothing" /> in Visual Basic), or zero.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-705">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-705">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-706">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-706">Format</span></span>|<span data-ttu-id="5c934-707">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-707">Assembly Format</span></span>|<span data-ttu-id="5c934-708">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-708">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-709">39 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="5c934-709">39 < `int32` ></span></span>|<span data-ttu-id="5c934-710">brfalse `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-710">brfalse `target`</span></span><br /><br /> <span data-ttu-id="5c934-711">brnull `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-711">brnull `target`</span></span><br /><br /> <span data-ttu-id="5c934-712">brzero `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-712">brzero `target`</span></span>|<span data-ttu-id="5c934-713">Branches an eine zielanweisung am angegebenen Offset bei `false`.</span><span class="sxs-lookup"><span data-stu-id="5c934-713">Branches to a target instruction at the specified offset if `false`.</span></span>|  
  
 <span data-ttu-id="5c934-714">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-714">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-715">`value` wird durch einen vorherigen Vorgang auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-715">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="5c934-716">`value` wird vom Stapel geholt. Wenn `value` ist `false`, branch `target`.</span><span class="sxs-lookup"><span data-stu-id="5c934-716">`value` is popped from the stack; if `value` is `false`, branch to `target`.</span></span>  
  
 <span data-ttu-id="5c934-717">Die `brfalse` Anweisung (und seiner Aliase `brnull` und `brzero`) überträgt die Steuerung an den angegebenen zielanweisung Wenn `value` (des Typs `int32`, `int64`, Objektverweis `O`verwaltete Zeiger `&`, flüchtigen Zeiger `*`, `native int`) 0 (null) (`false`).</span><span class="sxs-lookup"><span data-stu-id="5c934-717">The `brfalse` instruction (and its aliases `brnull` and `brzero`) transfers control to the specified target instruction if `value` (of type `int32`, `int64`, object reference `O`, managed pointer `&`, transient pointer `*`, `native int`) is zero (`false`).</span></span> <span data-ttu-id="5c934-718">Wenn `value` ungleich Null (`true`) die Ausführung wird fortgeführt, bei der nächsten Anweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-718">If `value` is non-zero (`true`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="5c934-719">Bei der zielinstruktion wird als mit 4-Byte-Offset vom Anfang der aktuelle Anweisung folgenden dargestellt.</span><span class="sxs-lookup"><span data-stu-id="5c934-719">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5c934-720">Wenn bei der zielinstruktion Codes für eine oder mehrere Präfix verfügt, Steuerelement kann nur übertragen werden mit dem ersten dieser Präfixe.</span><span class="sxs-lookup"><span data-stu-id="5c934-720">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5c934-721">Steuern von Übertragungen in und aus `try`, `catch`, `filter`, und `finally` Blöcke können durch diese Anweisung nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-721">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5c934-722">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `brfalse` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-722">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brfalse` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-723">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="5c934-723">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brfalse_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brfalse_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brfalse_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brfalse_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brfalse_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brfalse_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brfalse_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brfalse_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-724">Überträgt die Steuerung an eine zielanweisung Wenn <paramref name="value" /> ist <see langword="false" />, ein null-Verweis oder 0 (null).</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-724">Transfers control to a target instruction if <paramref name="value" /> is <see langword="false" />, a null reference, or zero.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-725">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-725">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-726">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-726">Format</span></span>|<span data-ttu-id="5c934-727">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-727">Assembly Format</span></span>|<span data-ttu-id="5c934-728">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-728">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-729">2C &LT;`int8` ></span><span class="sxs-lookup"><span data-stu-id="5c934-729">2C <`int8` ></span></span>|<span data-ttu-id="5c934-730">brfalse.s `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-730">brfalse.s `target`</span></span><br /><br /> <span data-ttu-id="5c934-731">brnull.s `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-731">brnull.s `target`</span></span><br /><br /> <span data-ttu-id="5c934-732">brzero.s `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-732">brzero.s `target`</span></span>|<span data-ttu-id="5c934-733">Branches an eine zielanweisung am angegebenen Offset bei `false`, Kurzform.</span><span class="sxs-lookup"><span data-stu-id="5c934-733">Branches to a target instruction at the specified offset if `false`, short form.</span></span>|  
  
 <span data-ttu-id="5c934-734">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-734">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-735">`value` wird durch einen vorherigen Vorgang auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-735">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="5c934-736">`value` wird vom Stapel geholt. Wenn `value` ist `false`, branch `target`.</span><span class="sxs-lookup"><span data-stu-id="5c934-736">`value` is popped from the stack; if `value` is `false`, branch to `target`.</span></span>  
  
 <span data-ttu-id="5c934-737">Die `brfalse.s` Anweisung (und seiner Aliase `brnull` und `brzero`) überträgt die Steuerung an den angegebenen zielanweisung Wenn `value` (des Typs `int32`, `int64`, Objektverweis `O`verwaltete Zeiger `&`, flüchtigen Zeiger `*`, `native int`) 0 (null) (`false`).</span><span class="sxs-lookup"><span data-stu-id="5c934-737">The `brfalse.s` instruction (and its aliases `brnull` and `brzero`) transfers control to the specified target instruction if `value` (of type `int32`, `int64`, object reference `O`, managed pointer `&`, transient pointer `*`, `native int`) is zero (`false`).</span></span> <span data-ttu-id="5c934-738">Wenn `value` ungleich Null (`true`) die Ausführung wird fortgeführt, bei der nächsten Anweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-738">If `value` is non-zero (`true`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="5c934-739">Bei der zielinstruktion wird als einer signierten 1-Byte-Offset vom Anfang der aktuelle Anweisung folgenden dargestellt.</span><span class="sxs-lookup"><span data-stu-id="5c934-739">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5c934-740">Wenn bei der zielinstruktion Codes für eine oder mehrere Präfix verfügt, Steuerelement kann nur übertragen werden mit dem ersten dieser Präfixe.</span><span class="sxs-lookup"><span data-stu-id="5c934-740">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5c934-741">Steuern von Übertragungen in und aus `try`, `catch`, `filter`, und `finally` Blöcke können durch diese Anweisung nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-741">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5c934-742">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `brfalse.s` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-742">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brfalse.s` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-743">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="5c934-743">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brtrue">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brtrue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brtrue" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brtrue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brtrue As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brtrue;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brtrue : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brtrue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-744">Überträgt die Steuerung an eine zielanweisung Wenn <paramref name="value" /> ist <see langword="true" />, nicht null oder ungleich NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-744">Transfers control to a target instruction if <paramref name="value" /> is <see langword="true" />, not null, or non-zero.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-745">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-745">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-746">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-746">Format</span></span>|<span data-ttu-id="5c934-747">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-747">Assembly Format</span></span>|<span data-ttu-id="5c934-748">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-748">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-749">3A < `int32` ></span><span class="sxs-lookup"><span data-stu-id="5c934-749">3A < `int32` ></span></span>|<span data-ttu-id="5c934-750">brtrue `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-750">brtrue `target`</span></span><br /><br /> <span data-ttu-id="5c934-751">brinst `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-751">brinst `target`</span></span>|<span data-ttu-id="5c934-752">Branch an eine zielanweisung am angegebenen Offset NULL ungleich (`true`).</span><span class="sxs-lookup"><span data-stu-id="5c934-752">Branch to a target instruction at the specified offset if non-zero (`true`).</span></span>|  
  
 <span data-ttu-id="5c934-753">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-753">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-754">`value` wird durch einen vorherigen Vorgang auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-754">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="5c934-755">`value` wird vom Stapel geholt. Wenn `value` ist `true`, branch `target`.</span><span class="sxs-lookup"><span data-stu-id="5c934-755">`value` is popped from the stack; if `value` is `true`, branch to `target`.</span></span>  
  
 <span data-ttu-id="5c934-756">Die `brtrue` -Anweisung überträgt die Steuerung an den angegebenen zielanweisung Wenn `value` (Typ `native int`) ungleich NULL ist (`true`).</span><span class="sxs-lookup"><span data-stu-id="5c934-756">The `brtrue` instruction transfers control to the specified target instruction if `value` (type `native int`) is nonzero (`true`).</span></span> <span data-ttu-id="5c934-757">Wenn `value` ist 0 (null) (`false`) die Ausführung wird fortgeführt, bei der nächsten Anweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-757">If `value` is zero (`false`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="5c934-758">Wenn `value` ist ein Objektverweis (Typ `O`) klicken Sie dann `brinst` (ein Alias für `brtrue`) überträgt die Steuerung, wenn es sich um eine Instanz eines Objekts darstellt (z. B. ist dies nicht der null-Objektverweis; finden Sie unter <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span><span class="sxs-lookup"><span data-stu-id="5c934-758">If `value` is an object reference (type `O`) then `brinst` (an alias for `brtrue`) transfers control if it represents an instance of an object (for example, if it is not the null object reference; see <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span></span>  
  
 <span data-ttu-id="5c934-759">Bei der zielinstruktion wird als mit 4-Byte-Offset vom Anfang der aktuelle Anweisung folgenden dargestellt.</span><span class="sxs-lookup"><span data-stu-id="5c934-759">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5c934-760">Wenn bei der zielinstruktion Codes für eine oder mehrere Präfix verfügt, Steuerelement kann nur übertragen werden mit dem ersten dieser Präfixe.</span><span class="sxs-lookup"><span data-stu-id="5c934-760">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5c934-761">Steuern von Übertragungen in und aus `try`, `catch`, `filter`, und `finally` Blöcke können durch diese Anweisung nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-761">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5c934-762">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `brtrue` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-762">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brtrue` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-763">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="5c934-763">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brtrue_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brtrue_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brtrue_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brtrue_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brtrue_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brtrue_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brtrue_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brtrue_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-764">Überträgt die Steuerung an eine zielanweisung (Kurzform) Wenn <paramref name="value" /> ist <see langword="true" />, nicht null oder ungleich NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-764">Transfers control to a target instruction (short form) if <paramref name="value" /> is <see langword="true" />, not null, or non-zero.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-765">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-765">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-766">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-766">Format</span></span>|<span data-ttu-id="5c934-767">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-767">Assembly Format</span></span>|<span data-ttu-id="5c934-768">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-768">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-769">2D < `int8` ></span><span class="sxs-lookup"><span data-stu-id="5c934-769">2D < `int8` ></span></span>|<span data-ttu-id="5c934-770">brtrue.s `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-770">brtrue.s `target`</span></span><br /><br /> <span data-ttu-id="5c934-771">brinst.s `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-771">brinst.s `target`</span></span>|<span data-ttu-id="5c934-772">Branch an eine zielanweisung am angegebenen Offset NULL ungleich (`true`), Kurzform.</span><span class="sxs-lookup"><span data-stu-id="5c934-772">Branch to a target instruction at the specified offset if non-zero (`true`), short form.</span></span>|  
  
 <span data-ttu-id="5c934-773">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-773">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-774">`value` wird durch einen vorherigen Vorgang auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-774">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="5c934-775">`value` wird vom Stapel geholt. Wenn `value` ist `true`, branch `target`.</span><span class="sxs-lookup"><span data-stu-id="5c934-775">`value` is popped from the stack; if `value` is `true`, branch to `target`.</span></span>  
  
 <span data-ttu-id="5c934-776">Die `brtrue.s` -Anweisung überträgt die Steuerung an den angegebenen zielanweisung Wenn `value` (Typ `native int`) ungleich NULL ist (`true`).</span><span class="sxs-lookup"><span data-stu-id="5c934-776">The `brtrue.s` instruction transfers control to the specified target instruction if `value` (type `native int`) is nonzero (`true`).</span></span> <span data-ttu-id="5c934-777">Wenn `value` ist 0 (null) (`false`) die Ausführung wird fortgeführt, bei der nächsten Anweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-777">If `value` is zero (`false`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="5c934-778">Wenn `value` ist ein Objektverweis (Typ `O`) klicken Sie dann `brinst` (ein Alias für `brtrue`) überträgt die Steuerung, wenn es sich um eine Instanz eines Objekts darstellt (z. B. ist dies nicht der null-Objektverweis; finden Sie unter <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span><span class="sxs-lookup"><span data-stu-id="5c934-778">If `value` is an object reference (type `O`) then `brinst` (an alias for `brtrue`) transfers control if it represents an instance of an object (for example, if it is not the null object reference; see <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span></span>  
  
 <span data-ttu-id="5c934-779">Bei der zielinstruktion wird als einer signierten 1-Byte-Offset vom Anfang der aktuelle Anweisung folgenden dargestellt.</span><span class="sxs-lookup"><span data-stu-id="5c934-779">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5c934-780">Wenn bei der zielinstruktion Codes für eine oder mehrere Präfix verfügt, Steuerelement kann nur übertragen werden mit dem ersten dieser Präfixe.</span><span class="sxs-lookup"><span data-stu-id="5c934-780">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5c934-781">Steuern von Übertragungen in und aus `try`, `catch`, `filter`, und `finally` Blöcke können durch diese Anweisung nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-781">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5c934-782">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `brtrue.s` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-782">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brtrue.s` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-783">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="5c934-783">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Call;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Call" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Call" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Call As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Call;" />
      <MemberSignature Language="F#" Value=" staticval mutable Call : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Call" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-784">Ruft die Methode auf, die der übergebene Methodendeskriptor angibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-784">Calls the method indicated by the passed method descriptor.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-785">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-785">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-786">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-786">Format</span></span>|<span data-ttu-id="5c934-787">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-787">Assembly Format</span></span>|<span data-ttu-id="5c934-788">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-788">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-789">28 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5c934-789">28 < `T` ></span></span>|<span data-ttu-id="5c934-790">Rufen Sie `methodDesc`</span><span class="sxs-lookup"><span data-stu-id="5c934-790">call `methodDesc`</span></span>|<span data-ttu-id="5c934-791">Rufen Sie die Methode, die beschriebenen `methodDesc`.</span><span class="sxs-lookup"><span data-stu-id="5c934-791">Call the method described by `methodDesc`.</span></span>|  
  
 <span data-ttu-id="5c934-792">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-792">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-793">Methodenargumente `arg1` über `argN` auf dem Stapel abgelegt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-793">Method arguments `arg1` through `argN` are pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-794">Methodenargumente `arg1` über `argN` werden aus den Stapel geholt Aufruf der Methode mit diesen Argumenten ausgeführt wird und die Steuerung an die Methode, die von der Methodendeskriptor bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="5c934-794">Method arguments `arg1` through `argN` are popped from the stack; the method call is performed with these arguments and control is transferred to the method referred to by the method descriptor.</span></span> <span data-ttu-id="5c934-795">Nach Abschluss des Vorgangs ist ein Wert von der aufgerufenermethode generiert und an den Aufrufer gesendet.</span><span class="sxs-lookup"><span data-stu-id="5c934-795">When complete, a return value is generated by the callee method and sent to the caller.</span></span>  
  
3.  <span data-ttu-id="5c934-796">Der Rückgabewert ist auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-796">The return value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-797">Die `call` -Anweisung ruft die Methode, die mit der Anweisung übergeben Methodendeskriptor verweist.</span><span class="sxs-lookup"><span data-stu-id="5c934-797">The `call` instruction calls the method indicated by the method descriptor passed with the instruction.</span></span> <span data-ttu-id="5c934-798">Der Methodendeskriptor ist ein Metadatentoken, das gibt die Methode an den Aufruf und die Anzahl, Typ und Reihenfolge der Argumente, die auf dem Stapel an die Methode als auch für die Aufrufkonvention, die verwendet werden zu übergebenden platziert wurden.</span><span class="sxs-lookup"><span data-stu-id="5c934-798">The method descriptor is a metadata token that indicates the method to call and the number, type, and order of the arguments that have been placed on the stack to be passed to that method as well as the calling convention to be used.</span></span> <span data-ttu-id="5c934-799">Der `call` Anweisung kann unmittelbar vorangestellt werden, wird eine `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) Präfix-Anweisung, um anzugeben, dass der aktuelle Methodenzustand freigegeben werden sollen, bevor die Steuerung zu übertragen.</span><span class="sxs-lookup"><span data-stu-id="5c934-799">The `call` instruction can be immediately preceded by a `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) prefix instruction to specify that the current method state should be released before transferring control.</span></span> <span data-ttu-id="5c934-800">Der Aufruf Steuerelement auf eine höhere Vertrauensstellung als die Origin-Methode übertragen, wird der Stapelrahmen nicht freigegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-800">If the call transfers control to a method of higher trust than the origin method, the stack frame is not released.</span></span> <span data-ttu-id="5c934-801">Stattdessen wird die Ausführung im Hintergrund fortgesetzt als ob die `tail` hatte, wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-801">Instead, the execution continues silently as if the `tail` had not been supplied.</span></span> <span data-ttu-id="5c934-802">Das Metadatentoken enthält genügend Informationen, um zu bestimmen, ob eine statische Methode, eine Instanzmethode, eine virtuelle Methode oder eine globale Funktion aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-802">The metadata token carries sufficient information to determine whether the call is to a static method, an instance method, a virtual method, or a global function.</span></span> <span data-ttu-id="5c934-803">In all diesen Fällen die Zieladresse wird vollständig von der Methodendeskriptor bestimmt (vergleichen Sie dies mit der <xref:System.Reflection.Emit.OpCodes.Callvirt> Anweisung zum Aufrufen von virtueller Methoden, in denen hängt von der Zieladresse auch die Common Language Runtime-Typ der Instanz Referenz zu übertragen, bevor die <xref:System.Reflection.Emit.OpCodes.Callvirt>).</span><span class="sxs-lookup"><span data-stu-id="5c934-803">In all of these cases the destination address is determined entirely from the method descriptor (contrast this with the <xref:System.Reflection.Emit.OpCodes.Callvirt> instruction for calling virtual methods, where the destination address also depends upon the runtime type of the instance reference pushed before the <xref:System.Reflection.Emit.OpCodes.Callvirt>).</span></span>  
  
 <span data-ttu-id="5c934-804">Die Argumente werden auf dem Stapel in links-nach-rechts-Reihenfolge platziert.</span><span class="sxs-lookup"><span data-stu-id="5c934-804">The arguments are placed on the stack in left-to-right order.</span></span> <span data-ttu-id="5c934-805">Das erste Argument ist, also berechnet und auf dem Stapel, auf das zweite Argument und dann auf die dritte, platziert werden, bis alle erforderlichen Argumente auf dem Stapel in absteigender Reihenfolge sind.</span><span class="sxs-lookup"><span data-stu-id="5c934-805">That is, the first argument is computed and placed on the stack, then the second argument, then the third, until all necessary arguments are atop the stack in descending order.</span></span> <span data-ttu-id="5c934-806">Es gibt drei wichtige Sonderfälle:</span><span class="sxs-lookup"><span data-stu-id="5c934-806">There are three important special cases:</span></span>  
  
 1. <span data-ttu-id="5c934-807">Aufrufe mit einer Instanz (oder virtuell) Methode muss mithilfe von Push übertragen, Instanzverweis vor allen für den Benutzer sichtbare Argumenten.</span><span class="sxs-lookup"><span data-stu-id="5c934-807">Calls to an instance (or virtual) method must push that instance reference before any of the user-visible arguments.</span></span> <span data-ttu-id="5c934-808">Die Instanzverweis muss kein null-Verweis sein.</span><span class="sxs-lookup"><span data-stu-id="5c934-808">The instance reference must not be a null reference.</span></span> <span data-ttu-id="5c934-809">Die Signatur in den Metadaten enthält einen Eintrag in der Parameterliste für keine der `this` Zeiger; stattdessen wird ein wenig an, ob die Methode übergeben werden muss die `this` Zeiger.</span><span class="sxs-lookup"><span data-stu-id="5c934-809">The signature carried in the metadata does not contain an entry in the parameter list for the `this` pointer; instead, it uses a bit to indicate whether the method requires passing the `this` pointer.</span></span>  
  
 2. <span data-ttu-id="5c934-810">Es ist zulässig, rufen Sie eine virtuelle Methode mit `call` (statt `callvirt`); Dies bedeutet, dass die Methode besteht darin, mit der Klasse, die Methode statt als dynamisch vom aufgerufenen Objekt angegebenen aufgelöst werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-810">It is valid to call a virtual method using `call` (rather than `callvirt`); this indicates that the method is to be resolved using the class specified by method rather than as specified dynamically from the object being invoked.</span></span>  
  
 3. <span data-ttu-id="5c934-811">Beachten Sie, dass ein Delegat des `Invoke` Methode kann aufgerufen werden, entweder mit der `call` oder `callvirt` Anweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-811">Note that a delegate's `Invoke` method can be called with either the `call` or `callvirt` instruction.</span></span>  
  
 <span data-ttu-id="5c934-812"><xref:System.Security.SecurityException> kann ausgelöst werden, wenn die Sicherheit des Systems den Aufrufer Zugriff an die aufgerufene Methode nicht gewährt.</span><span class="sxs-lookup"><span data-stu-id="5c934-812"><xref:System.Security.SecurityException> may be thrown if system security does not grant the caller access to the called method.</span></span> <span data-ttu-id="5c934-813">Die sicherheitsüberprüfung kann auftreten, wenn die Microsoft Intermediate Language (MSIL)-Anweisungen in systemeigenen Code nicht zur Laufzeit konvertiert werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-813">The security check may occur when the Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5c934-814">Beim Aufrufen von Methoden, die "System.Object" für Werttypen, erwägen Sie die Verwendung der `constrained` mit dem Präfix die `callvirt` Anweisung anstelle von Ausgeben einer `call` Anweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-814">When calling methods of System.Object on value types, consider using the `constrained` prefix with the `callvirt` instruction instead of emitting a `call` instruction.</span></span> <span data-ttu-id="5c934-815">Dies besteht keine Notwendigkeit zum Ausgeben von anderen Integritätsstufe abhängig davon, ob der Typ die Methode überschreibt, die ein potenzielles Problem der versionsverwaltung vermeiden.</span><span class="sxs-lookup"><span data-stu-id="5c934-815">This removes the need to emit different IL depending on whether or not the value type overrides the method, avoiding a potential versioning problem.</span></span> <span data-ttu-id="5c934-816">Erwägen Sie die Verwendung der `constrained` Präfix beim Aufrufen von Methoden für Werttypen, da der Value-Type-Methode implementiert die Schnittstellenmethode kann geändert werden, mithilfe einer `MethodImpl`.</span><span class="sxs-lookup"><span data-stu-id="5c934-816">Consider using the `constrained` prefix when invoking interface methods on value types, since the value type method implementing the interface method can be changed using a `MethodImpl`.</span></span> <span data-ttu-id="5c934-817">Diese Probleme werden ausführlicher beschrieben. die <xref:System.Reflection.Emit.OpCodes.Constrained> Opcode.</span><span class="sxs-lookup"><span data-stu-id="5c934-817">These issues are described in more detail in the <xref:System.Reflection.Emit.OpCodes.Constrained> opcode.</span></span>  
  
 <span data-ttu-id="5c934-818">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> methodenüberladungen können die `call` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-818">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `call` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-819">ILGenerator.Emit (OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="5c934-819">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
-   <span data-ttu-id="5c934-820">ILGenerator.EmitCall (OpCode, MethodInfo, Type</span><span class="sxs-lookup"><span data-stu-id="5c934-820">ILGenerator.EmitCall(OpCode, MethodInfo, Type[])</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5c934-821">Die <xref:System.Reflection.Emit.ILGenerator.EmitCall%2A> Methode dient zur `varargs` aufrufen.</span><span class="sxs-lookup"><span data-stu-id="5c934-821">The <xref:System.Reflection.Emit.ILGenerator.EmitCall%2A> method is provided for `varargs` calls.</span></span> <span data-ttu-id="5c934-822">Verwenden der <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Methode für die normale Aufrufe.</span><span class="sxs-lookup"><span data-stu-id="5c934-822">Use the <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method for normal calls.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Calli">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Calli;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Calli" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Calli" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Calli As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Calli;" />
      <MemberSignature Language="F#" Value=" staticval mutable Calli : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Calli" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-823">Ruft die angegebene Methode auf dem Auswertungsstapel (als Zeiger auf einen Einstiegspunkt) mit Argumenten auf, die durch eine Aufrufkonvention beschrieben sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-823">Calls the method indicated on the evaluation stack (as a pointer to an entry point) with arguments described by a calling convention.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-824">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-824">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-825">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-825">Format</span></span>|<span data-ttu-id="5c934-826">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-826">Assembly Format</span></span>|<span data-ttu-id="5c934-827">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-827">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-828">29 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5c934-828">29 < `T` ></span></span>|<span data-ttu-id="5c934-829">die calli `callSiteDescr`</span><span class="sxs-lookup"><span data-stu-id="5c934-829">calli `callSiteDescr`</span></span>|<span data-ttu-id="5c934-830">Ruft die Methode, die auf den verwiesen wird mit Argumenten, die durch die Aufrufkonvention beschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-830">Calls the method pointed to with arguments described by the calling convention.</span></span>|  
  
 <span data-ttu-id="5c934-831">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-831">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-832">Methodenargumente `arg1` über `argN` auf dem Stapel abgelegt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-832">Method arguments `arg1` through `argN` are pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-833">Die Zeiger auf den Eintrag ist auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-833">The method entry pointer is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-834">Methodenargumente `arg1` über `argN` und die Zeiger auf den Eintrag vom Stapel geholt werden; der Aufruf der Methode erfolgt.</span><span class="sxs-lookup"><span data-stu-id="5c934-834">Method arguments `arg1` through `argN` and the method entry pointer are popped from the stack; the call to the method is performed.</span></span> <span data-ttu-id="5c934-835">Nach Abschluss des Vorgangs ist ein Wert von der aufgerufenermethode generiert und an den Aufrufer gesendet.</span><span class="sxs-lookup"><span data-stu-id="5c934-835">When complete, a return value is generated by the callee method and sent to the caller.</span></span>  
  
4.  <span data-ttu-id="5c934-836">Der Rückgabewert ist auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-836">The return value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-837">Die `calli` Anweisung ruft den Eintrag Zeiger mit den Argumenten `arg1` über `argN`.</span><span class="sxs-lookup"><span data-stu-id="5c934-837">The `calli` instruction calls the method entry pointer with the arguments `arg1` through `argN`.</span></span> <span data-ttu-id="5c934-838">Die Typen der diese Argumente werden durch die bestimmte Aufrufkonvention beschrieben (`callSiteDesc`).</span><span class="sxs-lookup"><span data-stu-id="5c934-838">The types of these arguments are described by the specific calling convention (`callSiteDesc`).</span></span> <span data-ttu-id="5c934-839">Die `calli` Anweisung kann unmittelbar vorangestellt werden eine `tail` Präfix (<xref:System.Reflection.Emit.OpCodes.Tailcall>) angeben, dass der aktuelle Methodenzustand freigegeben werden sollen, bevor die Steuerung zu übertragen.</span><span class="sxs-lookup"><span data-stu-id="5c934-839">The `calli` instruction may be immediately preceded by a `tail` prefix (<xref:System.Reflection.Emit.OpCodes.Tailcall>) to specify that the current method state should be released before transferring control.</span></span> <span data-ttu-id="5c934-840">Wenn der Aufruf übertragen würden wird Steuerelement auf eine höhere Vertrauensstellung als die Origin-Methode der Stapelrahmen nicht freigegeben. stattdessen die Ausführung im Hintergrund fortgesetzt wird wie die `tail` hatte, wurde nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-840">If the call would transfer control to a method of higher trust than the origin method the stack frame will not be released; instead, the execution will continue silently as if the `tail` had not been supplied.</span></span>  
  
 <span data-ttu-id="5c934-841">Die Zeiger auf den Eintrag wird davon ausgegangen, dass ein bestimmter Zeiger in systemeigenen Code (des Zielcomputers) sein, die mit den Argumenten, die durch die Aufrufkonvention (ein Metadatentoken für eine eigenständige Signatur) beschriebenen legitim aufgerufen werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-841">The method entry pointer is assumed to be a specific pointer to native code (of the target machine) that can be legitimately called with the arguments described by the calling convention (a metadata token for a stand-alone signature).</span></span> <span data-ttu-id="5c934-842">Ein solchen Zeiger kann erstellt werden, mithilfe der <xref:System.Reflection.Emit.OpCodes.Ldftn> oder <xref:System.Reflection.Emit.OpCodes.Ldvirtftn> Anweisungen oder von nativem Code übergeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-842">Such a pointer can be created using the <xref:System.Reflection.Emit.OpCodes.Ldftn> or <xref:System.Reflection.Emit.OpCodes.Ldvirtftn> instructions, or passed in from native code.</span></span>  
  
 <span data-ttu-id="5c934-843">Die Aufrufkonvention nicht dynamisch aktiviert wird, sodass code mit einem `calli` Anweisung funktioniert nicht ordnungsgemäß, wenn das Ziel die angegebene Aufrufkonvention nicht tatsächlich verwendet.</span><span class="sxs-lookup"><span data-stu-id="5c934-843">The calling convention is not checked dynamically, so code that uses a `calli` instruction does not work correctly if the destination does not actually use the specified calling convention.</span></span>  
  
 <span data-ttu-id="5c934-844">Die Argumente werden auf dem Stapel in links-nach-rechts-Reihenfolge platziert.</span><span class="sxs-lookup"><span data-stu-id="5c934-844">The arguments are placed on the stack in left-to-right order.</span></span> <span data-ttu-id="5c934-845">Das erste Argument ist, also berechnet und auf dem Stapel, auf das zweite Argument und dann auf die dritte, platziert werden, bis alle erforderlichen Argumente auf dem Stapel in absteigender Reihenfolge sind.</span><span class="sxs-lookup"><span data-stu-id="5c934-845">That is, the first argument is computed and placed on the stack, then the second argument, then the third, until all necessary arguments are atop the stack in descending order.</span></span> <span data-ttu-id="5c934-846">Die Reihenfolge der Argument-Erstellung-Codes für eine Instanz oder eine virtuelle Methode muss mithilfe von Push übertragen, Instanz-Verweis (der keine null-Verweis sein muss) vor allen für den Benutzer sichtbare Argumenten.</span><span class="sxs-lookup"><span data-stu-id="5c934-846">The argument-building code sequence for an instance or virtual method must push that instance reference (which must not be a null reference) before any of the user-visible arguments.</span></span>  
  
 <span data-ttu-id="5c934-847"><xref:System.Security.SecurityException> kann ausgelöst werden, wenn die Sicherheit des Systems den Aufrufer Zugriff an die aufgerufene Methode nicht gewährt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-847"><xref:System.Security.SecurityException> may be thrown if the system security does not grant the caller access to the called method.</span></span> <span data-ttu-id="5c934-848">Die sicherheitsüberprüfung kann auftreten, wenn die Microsoft Intermediate Language (MSIL)-Anweisungen nicht zur Laufzeit, sondern in systemeigenen Code konvertiert werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-848">The security check can occur when the Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="5c934-849">Die folgenden <xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> Methoden können verwendet werden, um das Ausführen einer `calli` Anweisung auf dem Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-849">The following <xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> methods can be used to perform a `calli` instruction on the stack.</span></span> <span data-ttu-id="5c934-850">Beachten Sie, dass `calli` aufgerufen werden soll, über die unten aufgeführten Methoden mithilfe der <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Klasse, um die Anweisung direkt auf dem Stapel platzieren.</span><span class="sxs-lookup"><span data-stu-id="5c934-850">Note that `calli` should be called through the below methods rather than using the <xref:System.Reflection.Emit.ILGenerator.Emit%2A> class to place the instruction directly on the stack.</span></span>  
  
-   <span data-ttu-id="5c934-851">ILGenerator.EmitCalli(Opcode, CallingConventions, Type, Type[], Type[]) for calls using a managed calling convention.</span><span class="sxs-lookup"><span data-stu-id="5c934-851">ILGenerator.EmitCalli(Opcode, CallingConventions, Type, Type[], Type[]) for calls using a managed calling convention.</span></span>  
  
-   <span data-ttu-id="5c934-852">ILGenerator.EmitCalli(Opcode, CallingConvention, Type, Type[]) for calls using an unmanaged calling convention.</span><span class="sxs-lookup"><span data-stu-id="5c934-852">ILGenerator.EmitCalli(Opcode, CallingConvention, Type, Type[]) for calls using an unmanaged calling convention.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Callvirt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Callvirt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Callvirt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Callvirt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Callvirt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Callvirt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Callvirt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Callvirt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-853">Ruft eine spät gebundene Methode für ein Objekt auf und legt den Rückgabewert auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-853">Calls a late-bound method on an object, pushing the return value onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-854">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-854">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-855">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-855">Format</span></span>|<span data-ttu-id="5c934-856">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-856">Assembly Format</span></span>|<span data-ttu-id="5c934-857">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-857">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-858">6F &LT; `T` ></span><span class="sxs-lookup"><span data-stu-id="5c934-858">6F < `T` ></span></span>|<span data-ttu-id="5c934-859">callvirt `method`</span><span class="sxs-lookup"><span data-stu-id="5c934-859">callvirt `method`</span></span>|<span data-ttu-id="5c934-860">Ruft eine bestimmte Methode zugeordnete `obj`.</span><span class="sxs-lookup"><span data-stu-id="5c934-860">Calls a specific method associated with `obj`.</span></span>|  
  
 <span data-ttu-id="5c934-861">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-861">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-862">Ein Verweis auf eine `obj` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-862">An object reference `obj` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-863">Methodenargumente `arg1` über `argN` auf dem Stapel abgelegt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-863">Method arguments `arg1` through `argN` are pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-864">Methodenargumente `arg1` über `argN` und der Objektverweis `obj` werden aus den Stapel geholt Aufruf der Methode mit diesen Argumenten ausgeführt wird und die Steuerung an die Methode in `obj` verweist die-Methode Metadatentoken.</span><span class="sxs-lookup"><span data-stu-id="5c934-864">Method arguments `arg1` through `argN` and the object reference `obj` are popped from the stack; the method call is performed with these arguments and control is transferred to the method in `obj` referred to by the method metadata token.</span></span> <span data-ttu-id="5c934-865">Nach Abschluss des Vorgangs ist ein Wert von der aufgerufenermethode generiert und an den Aufrufer gesendet.</span><span class="sxs-lookup"><span data-stu-id="5c934-865">When complete, a return value is generated by the callee method and sent to the caller.</span></span>  
  
4.  <span data-ttu-id="5c934-866">Der Rückgabewert ist auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-866">The return value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-867">Die `callvirt` Anweisung ruft eine spät gebundene Methode für ein Objekt.</span><span class="sxs-lookup"><span data-stu-id="5c934-867">The `callvirt` instruction calls a late-bound method on an object.</span></span> <span data-ttu-id="5c934-868">D. h. die Methode basierend auf den Laufzeittyp der ausgewählt wird `obj` statt der während der Kompilierung-Klasse, die in den Zeiger auf den angezeigt.</span><span class="sxs-lookup"><span data-stu-id="5c934-868">That is, the method is chosen based on the runtime type of `obj` rather than the compile-time class visible in the method pointer.</span></span> <span data-ttu-id="5c934-869">`Callvirt` Dient zum Aufrufen von virtuellen Methoden und Instanzenmethoden.</span><span class="sxs-lookup"><span data-stu-id="5c934-869">`Callvirt` can be used to call both virtual and instance methods.</span></span> <span data-ttu-id="5c934-870">Die `callvirt` Anweisung kann unmittelbar vorangestellt werden, wird eine `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) Präfix, um anzugeben, dass der aktuelle Stapelrahmen freigegeben werden sollen, bevor die Steuerung zu übertragen.</span><span class="sxs-lookup"><span data-stu-id="5c934-870">The `callvirt` instruction may be immediately preceded by a `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) prefix to specify that the current stack frame should be released before transferring control.</span></span> <span data-ttu-id="5c934-871">Steuerung auf eine höhere Vertrauensstellung als die ursprüngliche Methode den Stapelrahmen wird nicht freigegeben werden, wenn der Aufruf übertragen würden.</span><span class="sxs-lookup"><span data-stu-id="5c934-871">If the call would transfer control to a method of higher trust than the original method the stack frame will not be released.</span></span>  
  
 <span data-ttu-id="5c934-872">Das Metadatentoken der Methode stellt den Namen, die Klasse und die Signatur der Methode aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="5c934-872">The method metadata token provides the name, class and signature of the method to call.</span></span> <span data-ttu-id="5c934-873">Die zugeordnete Klasse `obj` ist die Klasse, von denen, die es eine Instanz ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-873">The class associated with `obj` is the class of which it is an instance.</span></span> <span data-ttu-id="5c934-874">Wenn die Klasse eine nicht statische Methode, die den Namen angegebenen Methode und der Signatur entspricht definiert, wird diese Methode aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="5c934-874">If the class defines a non-static method that matches the indicated method name and signature, this method is called.</span></span> <span data-ttu-id="5c934-875">Andernfalls werden alle Klassen in der Kette der Basisklasse dieser Klasse in der Reihenfolge überprüft.</span><span class="sxs-lookup"><span data-stu-id="5c934-875">Otherwise all classes in the base class chain of this class are checked in order.</span></span> <span data-ttu-id="5c934-876">Es ist ein Fehler, wenn keine Methode gefunden wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-876">It is an error if no method is found.</span></span>  
  
 <span data-ttu-id="5c934-877">`Callvirt` Holt vor dem Aufrufen der Methode das Objekt und die zugehörigen Argumente aus dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-877">`Callvirt` pops the object and the associated arguments off the evaluation stack before calling the method.</span></span> <span data-ttu-id="5c934-878">Wenn die Methode einen Rückgabewert verfügt, wird es auf dem Stapel nach Abschluss der Methode abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-878">If the method has a return value, it is pushed on the stack upon method completion.</span></span> <span data-ttu-id="5c934-879">Klicken Sie auf der aufgerufenen Seite das `obj` Parameter als Argument 0 (null) zugegriffen wird `arg1` als Argument 1 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="5c934-879">On the callee side, the `obj` parameter is accessed as argument 0, `arg1` as argument 1, and so on.</span></span>  
  
 <span data-ttu-id="5c934-880">Die Argumente werden auf dem Stapel in links-nach-rechts-Reihenfolge platziert.</span><span class="sxs-lookup"><span data-stu-id="5c934-880">The arguments are placed on the stack in left-to-right order.</span></span> <span data-ttu-id="5c934-881">Das erste Argument ist, also berechnet und auf dem Stapel, auf das zweite Argument und dann auf die dritte, platziert werden, bis alle erforderlichen Argumente auf dem Stapel in absteigender Reihenfolge sind.</span><span class="sxs-lookup"><span data-stu-id="5c934-881">That is, the first argument is computed and placed on the stack, then the second argument, then the third, until all necessary arguments are atop the stack in descending order.</span></span> <span data-ttu-id="5c934-882">Den Instanzverweis `obj` (immer erforderlich, für die `callvirt`) muss vor allen für den Benutzer sichtbare Argumenten abgelegt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-882">The instance reference `obj` (always required for `callvirt`) must be pushed before any of the user-visible arguments.</span></span> <span data-ttu-id="5c934-883">Die Signatur (in das Metadatentoken) muss keinen Eintrag in der Parameterliste für diesen Zeiger.</span><span class="sxs-lookup"><span data-stu-id="5c934-883">The signature (carried in the metadata token) need not contain an entry in the parameter list for the this pointer.</span></span>  
  
 <span data-ttu-id="5c934-884">Beachten Sie, dass eine virtuelle Methode auch aufgerufen werden kann, mit der <xref:System.Reflection.Emit.OpCodes.Call> Anweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-884">Note that a virtual method can also be called using the <xref:System.Reflection.Emit.OpCodes.Call> instruction.</span></span>  
  
 <span data-ttu-id="5c934-885"><xref:System.MissingMethodException> wird ausgelöst, wenn eine nicht statische Methode mit dem angegebenen Namen und die Signatur nicht konnte, können Sie in der zugeordneten Klasse gefunden werden `obj` oder einer seiner Basisklassen.</span><span class="sxs-lookup"><span data-stu-id="5c934-885"><xref:System.MissingMethodException> is thrown if a non-static method with the indicated name and signature could not be found in the class associated with `obj` or any of its base classes.</span></span> <span data-ttu-id="5c934-886">Dies wird in der Regel erkannt, wenn Microsoft Intermediate Language (MSIL)-Anweisungen in systemeigenen Code anstelle einer zur Laufzeit konvertiert werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-886">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="5c934-887"><xref:System.NullReferenceException> wird ausgelöst, wenn Obj null ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-887"><xref:System.NullReferenceException> is thrown if obj is null.</span></span>  
  
 <span data-ttu-id="5c934-888"><xref:System.Security.SecurityException> wird ausgelöst, wenn die Sicherheit des Systems den Aufrufer Zugriff an die aufgerufene Methode nicht gewährt.</span><span class="sxs-lookup"><span data-stu-id="5c934-888"><xref:System.Security.SecurityException> is thrown if system security does not grant the caller access to the called method.</span></span> <span data-ttu-id="5c934-889">Die sicherheitsüberprüfung kann auftreten, wenn die CIL in systemeigenen Code nicht zur Laufzeit konvertiert wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-889">The security check may occur when the CIL is converted to native code rather than at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5c934-890">Beim Aufrufen von Methoden, die "System.Object" für Werttypen, erwägen Sie die Verwendung der `constrained` mit dem Präfix die `callvirt` Anweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-890">When calling methods of System.Object on value types, consider using the `constrained` prefix with the `callvirt` instruction.</span></span> <span data-ttu-id="5c934-891">Dies besteht keine Notwendigkeit zum Ausgeben von anderen Integritätsstufe abhängig davon, ob der Typ die Methode überschreibt, die ein potenzielles Problem der versionsverwaltung vermeiden.</span><span class="sxs-lookup"><span data-stu-id="5c934-891">This removes the need to emit different IL depending on whether or not the value type overrides the method, avoiding a potential versioning problem.</span></span> <span data-ttu-id="5c934-892">Erwägen Sie die Verwendung der `constrained` Präfix beim Aufrufen von Methoden für Werttypen, da der Value-Type-Methode implementiert die Schnittstellenmethode kann geändert werden, mithilfe einer `MethodImpl`.</span><span class="sxs-lookup"><span data-stu-id="5c934-892">Consider using the `constrained` prefix when invoking interface methods on value types, since the value type method implementing the interface method can be changed using a `MethodImpl`.</span></span> <span data-ttu-id="5c934-893">Diese Probleme werden ausführlicher beschrieben. die <xref:System.Reflection.Emit.OpCodes.Constrained> Opcode.</span><span class="sxs-lookup"><span data-stu-id="5c934-893">These issues are described in more detail in the <xref:System.Reflection.Emit.OpCodes.Constrained> opcode.</span></span>  
  
 <span data-ttu-id="5c934-894">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `callvirt` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-894">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `callvirt` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-895">ILGenerator.Emit (OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="5c934-895">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
-   <span data-ttu-id="5c934-896">ILGenerator.EmitCall (OpCode, MethodInfo, Type</span><span class="sxs-lookup"><span data-stu-id="5c934-896">ILGenerator.EmitCall(OpCode, MethodInfo, Type[])</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Castclass">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Castclass;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Castclass" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Castclass" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Castclass As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Castclass;" />
      <MemberSignature Language="F#" Value=" staticval mutable Castclass : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Castclass" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-897">Wandelt ein als Verweis übergebenes Objekt in die angegebene Klasse um.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-897">Attempts to cast an object passed by reference to the specified class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-898">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-898">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-899">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-899">Format</span></span>|<span data-ttu-id="5c934-900">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-900">Assembly Format</span></span>|<span data-ttu-id="5c934-901">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-901">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-902">74 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5c934-902">74 < `T` ></span></span>|<span data-ttu-id="5c934-903">castclass `class`</span><span class="sxs-lookup"><span data-stu-id="5c934-903">castclass `class`</span></span>|<span data-ttu-id="5c934-904">Wandelt ein Objekt in ein neues Objekt des Typs `class`.</span><span class="sxs-lookup"><span data-stu-id="5c934-904">Casts an object to a new object of type `class`.</span></span>|  
  
 <span data-ttu-id="5c934-905">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-905">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-906">Es ist ein Objektverweis auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-906">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-907">Der Objektverweis wird vom Stapel geholt. Das referenzierte Objekt umgewandelt wird wie die angegebene `class`.</span><span class="sxs-lookup"><span data-stu-id="5c934-907">The object reference is popped from the stack; the referenced object is cast as the specified `class`.</span></span>  
  
3.  <span data-ttu-id="5c934-908">Bei erfolgreicher Ausführung wird ein neuen Objektverweis auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-908">If successful, a new object reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-909">Die `castclass` -Anweisung wird den Objektverweis umgewandelt (Typ `O`) auf dem Stapel zu einer angegebenen Klasse.</span><span class="sxs-lookup"><span data-stu-id="5c934-909">The `castclass` instruction attempts to cast the object reference (type `O`) atop the stack to a specified class.</span></span> <span data-ttu-id="5c934-910">Die neue Klasse, die durch ein Metadatentoken, das angibt, der gewünschten Klasse angegeben ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-910">The new class is specified by a metadata token indicating the desired class.</span></span> <span data-ttu-id="5c934-911">Wenn die Klasse des Objekts oben im Stapel nicht die neue Klasse implementiert (vorausgesetzt, die neue Klasse ist eine Schnittstelle) und keine abgeleitete Klasse von der neuen Klasse wird eine <xref:System.InvalidCastException> ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-911">If the class of the object on the top of the stack does not implement the new class (assuming the new class is an interface) and is not a derived class of the new class then an <xref:System.InvalidCastException> is thrown.</span></span> <span data-ttu-id="5c934-912">Wenn der Objektverweis auf einen null-Verweis ist `castclass` erfolgreich ist, und gibt das neue Objekt als null-Verweis zurück.</span><span class="sxs-lookup"><span data-stu-id="5c934-912">If the object reference is a null reference, `castclass` succeeds and returns the new object as a null reference.</span></span>  
  
 <span data-ttu-id="5c934-913"><xref:System.InvalidCastException> wird ausgelöst, wenn Obj Klasse umgewandelt werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-913"><xref:System.InvalidCastException> is thrown if obj cannot be cast to class.</span></span>  
  
 <span data-ttu-id="5c934-914"><xref:System.TypeLoadException> wird ausgelöst, wenn die Klasse nicht gefunden werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-914"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="5c934-915">Dies wird in der Regel erkannt, wenn eine Anweisung für die Microsoft Intermediate Language (MSIL) in systemeigenen Code statt zur Laufzeit konvertiert wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-915">This is typically detected when a Microsoft Intermediate Language (MSIL) instruction is converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="5c934-916">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `castclass` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-916">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `castclass` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-917">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="5c934-917">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceq">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ceq;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ceq" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ceq" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ceq As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ceq;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ceq : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ceq" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-918">Vergleicht zwei Werte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-918">Compares two values.</span>
          </span>
          <span data-ttu-id="5c934-919">Wenn sie gleich sind, wird der Ganzzahlwert 1 <see langword="(int32" />) auf dem Auswertungsstapel ab; mithilfe von Push übertragen wird andernfalls 0 (<see langword="int32" />) wird auf dem Auswertungsstapel abgelegt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-919">If they are equal, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-920">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-920">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-921">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-921">Format</span></span>|<span data-ttu-id="5c934-922">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-922">Assembly Format</span></span>|<span data-ttu-id="5c934-923">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-923">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-924">FE 01</span><span class="sxs-lookup"><span data-stu-id="5c934-924">FE 01</span></span>|<span data-ttu-id="5c934-925">ceq</span><span class="sxs-lookup"><span data-stu-id="5c934-925">ceq</span></span>|<span data-ttu-id="5c934-926">1 überträgt, wenn `value1` gleich `value2`ist, andernfalls 0 überträgt.</span><span class="sxs-lookup"><span data-stu-id="5c934-926">Pushes 1 if `value1` equals `value2`; else pushes 0.</span></span>|  
  
 <span data-ttu-id="5c934-927">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-927">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-928">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-928">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-929">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-929">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-930">`value2` und `value1` werden aus den Stapel geholt `value1` im Vergleich zu `value2`.</span><span class="sxs-lookup"><span data-stu-id="5c934-930">`value2` and `value1` are popped from the stack; `value1` is compared to `value2`.</span></span>  
  
4.  <span data-ttu-id="5c934-931">Wenn `value1` gleich `value2`, 1 auf dem Stapel abgelegt wird; andernfalls wird 0 auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-931">If `value1` is equal to `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-932">Die `ceq` Anweisung vergleicht `value1` und `value2`.</span><span class="sxs-lookup"><span data-stu-id="5c934-932">The `ceq` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="5c934-933">Wenn `value1` gleich `value2`, dann 1 (des Typs `int32`) auf dem Stapel abgelegt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-933">If `value1` is equal to `value2`, then 1 (of type `int32`) is pushed on the stack.</span></span> <span data-ttu-id="5c934-934">Andernfalls 0 (des Typs `int32`) auf dem Stapel abgelegt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-934">Otherwise 0 (of type `int32`) is pushed on the stack.</span></span>  
  
 <span data-ttu-id="5c934-935">Bei Gleitkommazahlen `ceq` gibt 0 zurück, wenn die Zahlen nicht sortiert sind (eine oder beide sind NaN).</span><span class="sxs-lookup"><span data-stu-id="5c934-935">For floating-point number, `ceq` will return 0 if the numbers are unordered (either or both are NaN).</span></span> <span data-ttu-id="5c934-936">Die Werte unendlich sind gleich auf sich selbst.</span><span class="sxs-lookup"><span data-stu-id="5c934-936">The infinite values are equal to themselves.</span></span>  
  
 <span data-ttu-id="5c934-937">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ceq` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-937">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ceq` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-938">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-938">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cgt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cgt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cgt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cgt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cgt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cgt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cgt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cgt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-939">Vergleicht zwei Werte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-939">Compares two values.</span>
          </span>
          <span data-ttu-id="5c934-940">Wenn der erste Wert größer als der zweite ist, wird der Ganzzahlwert 1 <see langword="(int32" />) auf dem Auswertungsstapel ab; mithilfe von Push übertragen wird andernfalls 0 (<see langword="int32" />) wird auf dem Auswertungsstapel abgelegt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-940">If the first value is greater than the second, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-941">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-941">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-942">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-942">Format</span></span>|<span data-ttu-id="5c934-943">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-943">Assembly Format</span></span>|<span data-ttu-id="5c934-944">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-944">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-945">FE 02</span><span class="sxs-lookup"><span data-stu-id="5c934-945">FE 02</span></span>|<span data-ttu-id="5c934-946">cgt</span><span class="sxs-lookup"><span data-stu-id="5c934-946">cgt</span></span>|<span data-ttu-id="5c934-947">1 überträgt, wenn `value1` ist größer als `value2`ist, andernfalls 0 überträgt.</span><span class="sxs-lookup"><span data-stu-id="5c934-947">Pushes 1 if `value1` is greater than `value2`; else pushes 0.</span></span>|  
  
 <span data-ttu-id="5c934-948">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-948">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-949">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-949">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-950">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-950">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-951">`value2` und `value1` werden aus den Stapel geholt `cgt` testet, ob `value1` ist größer als `value2`.</span><span class="sxs-lookup"><span data-stu-id="5c934-951">`value2` and `value1` are popped from the stack; `cgt` tests if `value1` is greater than `value2`.</span></span>  
  
4.  <span data-ttu-id="5c934-952">Wenn `value1` ist größer als `value2`, 1 auf dem Stapel abgelegt wird; andernfalls wird 0 auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-952">If `value1` is greater than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-953">Die `cgt` Anweisung vergleicht `value1` und `value2`.</span><span class="sxs-lookup"><span data-stu-id="5c934-953">The `cgt` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="5c934-954">Wenn `value1` ist größer als `value2`, und klicken Sie dann eine `int32` Wert 1 auf dem Stapel abgelegt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-954">If `value1` is strictly greater than `value2`, then an `int32` value of 1 is pushed on the stack.</span></span> <span data-ttu-id="5c934-955">Andernfalls ein `int32` ist der Wert 0 auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-955">Otherwise, an `int32` value of 0 is pushed on the stack.</span></span>  
  
-   <span data-ttu-id="5c934-956">Für Gleitkommazahlen `cgt` gibt 0 zurück, wenn die Zahlen nicht sortiert sind (d.h., wenn ein oder beide Argumente NaN sind).</span><span class="sxs-lookup"><span data-stu-id="5c934-956">For floating-point numbers, `cgt` returns 0 if the numbers are unordered (that is, if one or both of the arguments are NaN).</span></span>  
  
 <span data-ttu-id="5c934-957">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `cgt` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-957">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cgt` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-958">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-958">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cgt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cgt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cgt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cgt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cgt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cgt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cgt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cgt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-959">Vergleicht zwei Werte ohne Vorzeichen oder zwei ungeordnete Werte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-959">Compares two unsigned or unordered values.</span>
          </span>
          <span data-ttu-id="5c934-960">Wenn der erste Wert größer als der zweite ist, wird der Ganzzahlwert 1 <see langword="(int32" />) auf dem Auswertungsstapel ab; mithilfe von Push übertragen wird andernfalls 0 (<see langword="int32" />) wird auf dem Auswertungsstapel abgelegt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-960">If the first value is greater than the second, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-961">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-961">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-962">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-962">Format</span></span>|<span data-ttu-id="5c934-963">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-963">Assembly Format</span></span>|<span data-ttu-id="5c934-964">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-964">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-965">FE 03</span><span class="sxs-lookup"><span data-stu-id="5c934-965">FE 03</span></span>|<span data-ttu-id="5c934-966">cgt.un</span><span class="sxs-lookup"><span data-stu-id="5c934-966">cgt.un</span></span>|<span data-ttu-id="5c934-967">1 überträgt, wenn `value1` ist größer als `value2`ist, andernfalls 0 (Werte ohne Vorzeichen) überträgt.</span><span class="sxs-lookup"><span data-stu-id="5c934-967">Pushes 1 if `value1` is greater than `value2`; else pushes 0 (unsigned values).</span></span>|  
  
 <span data-ttu-id="5c934-968">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-968">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-969">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-969">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-970">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-970">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-971">`value2` und `value1` werden aus den Stapel geholt `cgt.un` testet, ob `value1` ist größer als `value2`.</span><span class="sxs-lookup"><span data-stu-id="5c934-971">`value2` and `value1` are popped from the stack; `cgt.un` tests if `value1` is greater than `value2`.</span></span>  
  
4.  <span data-ttu-id="5c934-972">Wenn `value1` ist größer als `value2`, 1 auf dem Stapel abgelegt wird; andernfalls wird 0 auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-972">If `value1` is greater than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-973">Ein `int32` Wert 1 wird auf dem Stapel abgelegt, wenn eine der folgenden `true` :</span><span class="sxs-lookup"><span data-stu-id="5c934-973">An `int32` value of 1 is pushed on the stack if any of the following is `true` :</span></span>  
  
 <span data-ttu-id="5c934-974">Für Gleitkommazahlen `value1` ist nicht in Bezug auf geordnet `value2`.</span><span class="sxs-lookup"><span data-stu-id="5c934-974">For floating-point numbers, `value1` is not ordered with respect to `value2`.</span></span>  
  
 <span data-ttu-id="5c934-975">Bei Ganzzahlwerten gibt `value1` ist größer als `value2` Wenn Sie als Zahlen ohne Vorzeichen interpretiert.</span><span class="sxs-lookup"><span data-stu-id="5c934-975">For integer values, `value1` is strictly greater than `value2` when considered as unsigned numbers.</span></span>  
  
 <span data-ttu-id="5c934-976">Andernfalls ein `int32` ist der Wert 0 auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-976">Otherwise an `int32` value of 0 is pushed on the stack.</span></span>  
  
 <span data-ttu-id="5c934-977">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `cgt.un` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-977">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cgt.un` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-978">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-978">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ckfinite">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ckfinite;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ckfinite" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ckfinite" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ckfinite As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ckfinite;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ckfinite : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ckfinite" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-979">Löst <see cref="T:System.ArithmeticException" /> Wenn der Wert keine endliche Zahl ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-979">Throws <see cref="T:System.ArithmeticException" /> if value is not a finite number.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-980">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-980">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-981">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-981">Format</span></span>|<span data-ttu-id="5c934-982">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-982">Assembly Format</span></span>|<span data-ttu-id="5c934-983">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-983">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-984">C3</span><span class="sxs-lookup"><span data-stu-id="5c934-984">C3</span></span>|<span data-ttu-id="5c934-985">ckfinite</span><span class="sxs-lookup"><span data-stu-id="5c934-985">ckfinite</span></span>|<span data-ttu-id="5c934-986">löst <xref:System.ArithmeticException> Wenn der Wert keine endliche Zahl ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-986">throw <xref:System.ArithmeticException> if value is not a finite number.</span></span>|  
  
 <span data-ttu-id="5c934-987">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-987">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-988">`value` ist auf dem Stapel abgelegt...</span><span class="sxs-lookup"><span data-stu-id="5c934-988">`value` is pushed onto the stack..</span></span>  
  
2.  <span data-ttu-id="5c934-989">`value` wird das Element vom Stapel geholt und `ckfinite` Anweisung wird für diese ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="5c934-989">`value` is popped from the stack and the `ckfinite` instruction is performed on it.</span></span>  
  
3.  <span data-ttu-id="5c934-990">`value` wird zurück auf dem Stapel abgelegt werden, wenn keine Ausnahme ausgelöst wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-990">`value` is pushed back onto the stack if no exception is thrown.</span></span>  
  
 <span data-ttu-id="5c934-991">Die `ckfinite instruction` löst <xref:System.ArithmeticException> Wenn `value` (Gleitkommazahl) ist entweder ein "not a Number", Wert (NaN) oder ein `+-` Infinity-Wert.</span><span class="sxs-lookup"><span data-stu-id="5c934-991">The `ckfinite instruction` throws <xref:System.ArithmeticException> if `value` (a floating-point number) is either a "not a number" value (NaN) or a `+-` infinity value.</span></span> <span data-ttu-id="5c934-992">`Ckfinite` jedes Mal, wenn keine Ausnahme ausgelöst wird, lässt der Wert im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-992">`Ckfinite` leaves the value on the stack if no exception is thrown.</span></span> <span data-ttu-id="5c934-993">Ausführung ist nicht festgelegt, wenn `value` keine Gleitkommazahl ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-993">Execution is unspecified if `value` is not a floating-point number.</span></span>  
  
 <span data-ttu-id="5c934-994"><xref:System.ArithmeticException> wird ausgelöst, wenn `value` ist keine Zahl 'normale'.</span><span class="sxs-lookup"><span data-stu-id="5c934-994"><xref:System.ArithmeticException> is thrown if `value` is not a 'normal' number.</span></span>  
  
 <span data-ttu-id="5c934-995">Beachten Sie, dass eine spezielle Ausnahme oder eine abgeleitete Klasse von <xref:System.ArithmeticException> möglicherweise besser geeignet, den falschen Wert an den Ausnahmehandler übergeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-995">Note that a special exception or a derived class of <xref:System.ArithmeticException> may be more appropriate, passing the incorrect value to the exception handler.</span></span>  
  
 <span data-ttu-id="5c934-996">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ckfinite` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-996">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ckfinite` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-997">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-997">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Clt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Clt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Clt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Clt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Clt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Clt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Clt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-998">Vergleicht zwei Werte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-998">Compares two values.</span>
          </span>
          <span data-ttu-id="5c934-999">Wenn der erste Wert kleiner ist als der zweite Wert wird der Ganzzahlwert 1 <see langword="(int32" />) auf dem Auswertungsstapel ab; mithilfe von Push übertragen wird andernfalls 0 (<see langword="int32" />) wird auf dem Auswertungsstapel abgelegt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-999">If the first value is less than the second, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1000">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1000">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1001">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1001">Format</span></span>|<span data-ttu-id="5c934-1002">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1002">Assembly Format</span></span>|<span data-ttu-id="5c934-1003">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1003">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1004">FE 04</span><span class="sxs-lookup"><span data-stu-id="5c934-1004">FE 04</span></span>|<span data-ttu-id="5c934-1005">clt</span><span class="sxs-lookup"><span data-stu-id="5c934-1005">clt</span></span>|<span data-ttu-id="5c934-1006">1 überträgt, wenn `value1` ist kleiner als `value2`ist, andernfalls 0 überträgt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1006">Pushes 1 if `value1` is less than `value2`; else pushes 0.</span></span>|  
  
 <span data-ttu-id="5c934-1007">Im Stapel-laufen in sequenzieller Reihenfolge ist: `value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1007">The stack transitional behavior, in sequential order, is: `value1` is pushed onto the stack.</span></span>  
  
1.  <span data-ttu-id="5c934-1008">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1008">`value2` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1009">`value2` und `value1` werden aus den Stapel geholt `clt` testet, ob `value1` ist kleiner als `value2`.</span><span class="sxs-lookup"><span data-stu-id="5c934-1009">`value2` and `value1` are popped from the stack; `clt` tests if `value1` is less than `value2`.</span></span>  
  
3.  <span data-ttu-id="5c934-1010">Wenn `value1` ist kleiner als `value2`, 1 auf dem Stapel abgelegt wird; andernfalls wird 0 auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1010">If `value1` is less than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1011">Die `clt` Anweisung vergleicht `value1` und `value2`.</span><span class="sxs-lookup"><span data-stu-id="5c934-1011">The `clt` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="5c934-1012">Wenn `value1` ist kleiner als `value2`, und klicken Sie dann eine `int32` Wert 1 auf dem Stapel abgelegt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-1012">If `value1` is strictly less than `value2`, then an `int32` value of 1 is pushed on the stack.</span></span> <span data-ttu-id="5c934-1013">Andernfalls ein `int32` ist der Wert 0 auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1013">Otherwise, an `int32` value of 0 is pushed on the stack.</span></span>  
  
-   <span data-ttu-id="5c934-1014">Für Gleitkommazahlen `clt` gibt 0 zurück, wenn die Zahlen nicht sortiert sind (d.h., wenn ein oder beide Argumente NaN sind).</span><span class="sxs-lookup"><span data-stu-id="5c934-1014">For floating-point numbers, `clt` returns 0 if the numbers are unordered (that is, if one or both of the arguments are NaN).</span></span>  
  
 <span data-ttu-id="5c934-1015">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `clt` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1015">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `clt` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1016">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1016">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Clt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Clt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Clt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Clt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Clt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Clt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Clt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1017">Vergleicht die Werte ohne Vorzeichen oder ungeordnete <paramref name="value1" /> und <paramref name="value2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1017">Compares the unsigned or unordered values <paramref name="value1" /> and <paramref name="value2" />.</span>
          </span>
          <span data-ttu-id="5c934-1018">IF <paramref name="value1" /> ist kleiner als <paramref name="value2" />, wird der Ganzzahlwert 1 <see langword="(int32" />) wird auf dem Auswertungsstapel abgelegt abgelegt, andernfalls wird 0 (<see langword="int32" />) wird auf dem Auswertungsstapel abgelegt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1018">If <paramref name="value1" /> is less than <paramref name="value2" />, then the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1019">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1019">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1020">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1020">Format</span></span>|<span data-ttu-id="5c934-1021">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1021">Assembly Format</span></span>|<span data-ttu-id="5c934-1022">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1022">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1023">FE 05</span><span class="sxs-lookup"><span data-stu-id="5c934-1023">FE 05</span></span>|<span data-ttu-id="5c934-1024">clt.un</span><span class="sxs-lookup"><span data-stu-id="5c934-1024">clt.un</span></span>|<span data-ttu-id="5c934-1025">1 überträgt, wenn `value1` ist kleiner als `value2`ist, andernfalls 0 (Werte ohne Vorzeichen) überträgt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1025">Pushes 1 if `value1` is less than `value2`; else pushes 0 (unsigned values).</span></span>|  
  
 <span data-ttu-id="5c934-1026">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1026">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1027">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1027">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1028">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1028">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-1029">`value2` und `value1` werden aus den Stapel geholt `clt.un` testet, ob `value1` ist kleiner als `value2`.</span><span class="sxs-lookup"><span data-stu-id="5c934-1029">`value2` and `value1` are popped from the stack; `clt.un` tests if `value1` is less than `value2`.</span></span>  
  
4.  <span data-ttu-id="5c934-1030">Wenn `value1` ist kleiner als `value2`, 1 auf dem Stapel abgelegt wird; andernfalls wird 0 auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1030">If `value1` is less than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1031">Die `clt.un` Anweisung vergleicht `value1` und `value2`.</span><span class="sxs-lookup"><span data-stu-id="5c934-1031">The `clt.un` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="5c934-1032">Ein `int32` Wert 1 wird auf dem Stapel abgelegt, wenn eine der folgenden Aussagen zutrifft:</span><span class="sxs-lookup"><span data-stu-id="5c934-1032">An `int32` value of 1 is pushed on the stack if any of the following is true:</span></span>  
  
-   <span data-ttu-id="5c934-1033">`value1` ist kleiner als `value2` (wie bei `clt`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1033">`value1` is strictly less than `value2` (as for `clt`).</span></span>  
  
-   <span data-ttu-id="5c934-1034">Für Gleitkommazahlen `value1` ist nicht in Bezug auf geordnet `value2`.</span><span class="sxs-lookup"><span data-stu-id="5c934-1034">For floating-point numbers, `value1` is not ordered with respect to `value2`.</span></span>  
  
-   <span data-ttu-id="5c934-1035">Bei Ganzzahlwerten gibt `value1` ist kleiner als `value2` Wenn Sie als Zahlen ohne Vorzeichen interpretiert.</span><span class="sxs-lookup"><span data-stu-id="5c934-1035">For integer values, `value1` is strictly less than `value2` when considered as unsigned numbers.</span></span>  
  
 <span data-ttu-id="5c934-1036">Andernfalls ein `int32` ist der Wert 0 auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1036">Otherwise, an `int32` value of 0 is pushed on the stack.</span></span>  
  
 <span data-ttu-id="5c934-1037">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `clt.un` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1037">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `clt.un` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1038">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1038">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Constrained">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Constrained;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Constrained" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Constrained" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Constrained As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Constrained;" />
      <MemberSignature Language="F#" Value=" staticval mutable Constrained : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Constrained" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1039">Schränkt den Typ ein, für den eine virtuelle Methode aufgerufen wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1039">Constrains the type on which a virtual method call is made.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1040">Die folgende Tabelle enthält die hexadezimale und Microsoft intermediate Language (MSIL) Assembly-Format, sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1040">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1041">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1041">Format</span></span>|<span data-ttu-id="5c934-1042">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1042">Assembly Format</span></span>|<span data-ttu-id="5c934-1043">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1043">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1044">FE 16 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5c934-1044">FE 16 < `T` ></span></span>|<span data-ttu-id="5c934-1045">eingeschränkt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1045">constrained.</span></span> `thisType`|<span data-ttu-id="5c934-1046">Aufruf eine virtuelle Methode für einen Typ eingeschränkten Typ `T`.</span><span class="sxs-lookup"><span data-stu-id="5c934-1046">Call a virtual method on a type constrained to be type `T`.</span></span>|  
  
 <span data-ttu-id="5c934-1047">Die `constrained` Präfix ist nur zulässig, einen `callvirt` Anweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-1047">The `constrained` prefix is permitted only on a `callvirt` instruction.</span></span>  
  
 <span data-ttu-id="5c934-1048">Der Status des MSIL-Stapels an diesem Punkt muss wie folgt lauten:</span><span class="sxs-lookup"><span data-stu-id="5c934-1048">The state of the MSIL stack at this point must be as follows:</span></span>  
  
1.  <span data-ttu-id="5c934-1049">Ein verwalteter Zeiger, `ptr`, auf dem Stapel abgelegt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-1049">A managed pointer, `ptr`, is pushed onto the stack.</span></span> <span data-ttu-id="5c934-1050">Der Typ des `ptr` muss ein verwalteter Zeiger sein (`&`) zu `thisType`.</span><span class="sxs-lookup"><span data-stu-id="5c934-1050">The type of `ptr` must be a managed pointer (`&`) to `thisType`.</span></span> <span data-ttu-id="5c934-1051">Beachten Sie, dass dies der Fall, der einem schmalzeichenliteral ohne Präfix unterscheidet `callvirt` -Anweisung, die einen Verweis erwartet `thisType`.</span><span class="sxs-lookup"><span data-stu-id="5c934-1051">Note that this is different from the case of an unprefixed `callvirt` instruction, which expects a reference of `thisType`.</span></span>  
  
2.  <span data-ttu-id="5c934-1052">Methodenargumente `arg1` über `argN` werden auf den Stapel abgelegt, genau wie bei einem schmalzeichenliteral ohne Präfix `callvirt` Anweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-1052">Method arguments `arg1` through `argN` are pushed onto the stack, just as with an unprefixed `callvirt` instruction.</span></span>  
  
 <span data-ttu-id="5c934-1053">Die `constrained` Präfix soll es ermöglicht `callvirt` Anweisungen, um eine einheitliche Weise unabhängig davon, ob erfolgen `thisType` ist ein Werttyp oder ein Verweistyp.</span><span class="sxs-lookup"><span data-stu-id="5c934-1053">The `constrained` prefix is designed to allow `callvirt` instructions to be made in a uniform way independent of whether `thisType` is a value type or a reference type.</span></span>  
  
 <span data-ttu-id="5c934-1054">Wenn eine `callvirt` `method` Anweisung vorangestellt `constrained` `thisType`, die Anweisung wird wie folgt ausgeführt:</span><span class="sxs-lookup"><span data-stu-id="5c934-1054">When a `callvirt` `method` instruction has been prefixed by `constrained` `thisType`, the instruction is executed as follows:</span></span>  
  
-   <span data-ttu-id="5c934-1055">Wenn `thisType` ist ein Verweistyp (im Gegensatz zu einem Werttyp) `ptr` dereferenziert und übergeben Sie als der "this"-Zeiger an die `callvirt` von `method`.</span><span class="sxs-lookup"><span data-stu-id="5c934-1055">If `thisType` is a reference type (as opposed to a value type) then `ptr` is dereferenced and passed as the 'this' pointer to the `callvirt` of `method`.</span></span>  
  
-   <span data-ttu-id="5c934-1056">Wenn `thisType` ist ein Werttyp und `thisType` implementiert `method` dann `ptr` unverändert als das "this"-Zeiger zu übergeben eine `call` `method` -Anweisung, für die Implementierung von `method` von `thisType`.</span><span class="sxs-lookup"><span data-stu-id="5c934-1056">If `thisType` is a value type and `thisType` implements `method` then `ptr` is passed unmodified as the 'this' pointer to a `call` `method` instruction, for the implementation of `method` by `thisType`.</span></span>  
  
-   <span data-ttu-id="5c934-1057">Wenn `thisType` ist ein Werttyp und `thisType` implementiert nicht `method` dann `ptr` dereferenziert, geschachtelt und als das "this"-Zeiger zu übergeben, die `callvirt` `method` Anweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-1057">If `thisType` is a value type and `thisType` does not implement `method` then `ptr` is dereferenced, boxed, and passed as the 'this' pointer to the `callvirt` `method` instruction.</span></span>  
  
 <span data-ttu-id="5c934-1058">Dieser letzte Fall tritt nur dann, wenn `method` definiert wurde <xref:System.Object>, <xref:System.ValueType>, oder <xref:System.Enum> und nicht überschrieben werden, indem `thisType`.</span><span class="sxs-lookup"><span data-stu-id="5c934-1058">This last case can occur only when `method` was defined on <xref:System.Object>, <xref:System.ValueType>, or <xref:System.Enum> and not overridden by `thisType`.</span></span> <span data-ttu-id="5c934-1059">In diesem Fall führt das Boxing eine Kopie des ursprünglichen Objekts vorgenommen werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-1059">In this case, the boxing causes a copy of the original object to be made.</span></span> <span data-ttu-id="5c934-1060">Aber da keine der Methoden der <xref:System.Object>, <xref:System.ValueType>, und <xref:System.Enum> ändern den Zustand des Objekts, die diese Tatsache nicht erkannt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-1060">However, because none of the methods of <xref:System.Object>, <xref:System.ValueType>, and <xref:System.Enum> modify the state of the object, this fact cannot be detected.</span></span>  
  
 <span data-ttu-id="5c934-1061">Die `constrained` Präfix unterstützt IL-Generatoren, generischen Code zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="5c934-1061">The `constrained` prefix supports IL generators that create generic code.</span></span> <span data-ttu-id="5c934-1062">Normalerweise die `callvirt` Anweisung gilt nicht für Werttypen.</span><span class="sxs-lookup"><span data-stu-id="5c934-1062">Normally the `callvirt` instruction is not valid on value types.</span></span> <span data-ttu-id="5c934-1063">Stattdessen ist es erforderlich, dass die IL-Compiler die "this" Transformation, die zum Zeitpunkt der Kompilierung, je nach Art des oben beschriebenen umfassend `ptr` und die-Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-1063">Instead it is required that IL compilers effectively perform the 'this' transformation outlined above at compile time, depending on the type of `ptr` and the method being called.</span></span> <span data-ttu-id="5c934-1064">Aber wenn `ptr` ist ein generischer Typ, der zum Zeitpunkt der Kompilierung unbekannt ist es ist nicht möglich, um diese Transformation zum Zeitpunkt der Kompilierung zu machen.</span><span class="sxs-lookup"><span data-stu-id="5c934-1064">However, when `ptr` is a generic type that is unknown at compile time, it is not possible to make this transformation at compile time.</span></span>  
  
 <span data-ttu-id="5c934-1065">Die `constrained` Opcode bietet IL-Compilern einen Aufruf einer virtuellen Funktion in eine einheitliche Weise unabhängig davon, ob `ptr` ist ein Werttyp oder ein Verweistyp.</span><span class="sxs-lookup"><span data-stu-id="5c934-1065">The `constrained` opcode allows IL compilers to make a call to a virtual function in a uniform way independent of whether `ptr` is a value type or a reference type.</span></span> <span data-ttu-id="5c934-1066">Obwohl es für den Fall vorgesehen ist, in denen `thisType` wird eine Variablen des generischen Typs, der `constrained` Präfix auch funktioniert für nicht generische Typen und können vereinfachen Sie die zum Generieren von virtuelle Aufrufe in Sprachen, die der Unterschied zwischen Werttypen und Verweistypen.</span><span class="sxs-lookup"><span data-stu-id="5c934-1066">Although it is intended for the case where `thisType` is a generic type variable, the `constrained` prefix also works for nongeneric types and can reduce the complexity of generating virtual calls in languages that hide the distinction between value types and reference types.</span></span>  
  
 <span data-ttu-id="5c934-1067">Mithilfe der `constrained` Präfix können auch Versionskonflikte mit Werttypen vermeiden.</span><span class="sxs-lookup"><span data-stu-id="5c934-1067">Using the `constrained` prefix also avoids potential versioning problems with value types.</span></span> <span data-ttu-id="5c934-1068">Wenn die `constrained` Präfix nicht verwendet wird, je nachdem, ob ein Wert eine Methode von System.Object überschreibt andere IL ausgegeben werden muss.</span><span class="sxs-lookup"><span data-stu-id="5c934-1068">If the `constrained` prefix is not used, different IL must be emitted depending on whether or not a value type overrides a method of System.Object.</span></span> <span data-ttu-id="5c934-1069">Wenn ein Werttyp z. B. `V` überschreibt die Object.ToString()-Methode eine `call` `V.ToString()` Anweisung wird ausgegeben, wenn nicht, eine `box` Anweisung und eine `callvirt` `Object.ToString()` Anweisung ausgegeben werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-1069">For example, if a value type `V` overrides the Object.ToString() method, a `call` `V.ToString()` instruction is emitted; if it does not, a `box` instruction and a `callvirt` `Object.ToString()` instruction are emitted.</span></span> <span data-ttu-id="5c934-1070">Ein Problem für die versionsverwaltung kann im ersten Fall, wenn die Überschreibung später entfernt wird, und klicken Sie im zweiten Fall auftreten, wenn eine Überschreibung später hinzugefügt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-1070">A versioning problem can arise in the former case if the override is later removed, and in the latter case if an override is later added.</span></span>  
  
 <span data-ttu-id="5c934-1071">Die `constrained` Präfix kann auch für das Aufrufen von Methoden für Werttypen verwendet werden, da die Value-Type-Methode implementiert die Schnittstellenmethode geändert werden kann, mithilfe einer `MethodImpl`.</span><span class="sxs-lookup"><span data-stu-id="5c934-1071">The `constrained` prefix can also be used for invocation of interface methods on value types, because the value type method implementing the interface method can be changed using a `MethodImpl`.</span></span> <span data-ttu-id="5c934-1072">Wenn die `constrained` Präfix wird nicht verwendet, wird der Compiler gezwungen, des Werts der Methoden zum Binden an zum Zeitpunkt der Kompilierung des Typs auswählen.</span><span class="sxs-lookup"><span data-stu-id="5c934-1072">If the `constrained` prefix is not used, the compiler is forced to choose which of the value type's methods to bind to at compile time.</span></span> <span data-ttu-id="5c934-1073">Mithilfe der `constrained` Präfix ermöglicht die MSIL für die Methode zu binden, die Schnittstellenmethode zur Laufzeit anstatt zur Kompilierzeit implementiert.</span><span class="sxs-lookup"><span data-stu-id="5c934-1073">Using the `constrained` prefix allows the MSIL to bind to the method that implements the interface method at run time, rather than at compile time.</span></span>  
  
 <span data-ttu-id="5c934-1074">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `constrained` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1074">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `constrained` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1075">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="5c934-1075">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1076">Konvertiert den Wert an oberster Position des Auswertungsstapels in <see langword="native int" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1076">Converts the value on top of the evaluation stack to <see langword="native int" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1077">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1077">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1078">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1078">Format</span></span>|<span data-ttu-id="5c934-1079">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1079">Assembly Format</span></span>|<span data-ttu-id="5c934-1080">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1080">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1081">D3</span><span class="sxs-lookup"><span data-stu-id="5c934-1081">D3</span></span>|<span data-ttu-id="5c934-1082">conv.i</span><span class="sxs-lookup"><span data-stu-id="5c934-1082">conv.i</span></span>|<span data-ttu-id="5c934-1083">Konvertieren in `native int`, Ablegevorgänge `native int` auf dem Stapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-1083">Convert to `native int`, pushing `native int` on stack.</span></span>|  
  
 <span data-ttu-id="5c934-1084">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1084">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1085">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1085">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1086">`value` per pop ausgelesen wird aus dem Stapel und die Konvertierung wird der Vorgang wird versucht.</span><span class="sxs-lookup"><span data-stu-id="5c934-1086">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="5c934-1087">Wenn die Konvertierung erfolgreich ist, wird der resultierende Wert auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1087">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1088">Die `conv.i` Opcode konvertiert die `value` oberster Position des Stapels in den Typ in den Opcode, und lässt konvertierten Wert oben im Stapel angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1088">The `conv.i` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="5c934-1089">Ganzzahlige Werte von weniger als 4 Bytes wurden erweitert, um `int32` werden beim Laden auf dem Auswertungsstapel ab (es sei denn, `conv.i` oder `conv.u` verwendet wird, in diesem Fall ist auch das Ergebnis `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1089">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="5c934-1090">Gleitkommawerte werden konvertiert, um die `F` Typ.</span><span class="sxs-lookup"><span data-stu-id="5c934-1090">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="5c934-1091">Konvertierung von Gleitkommazahlen in ganzzahlige Werte werden die Zahlen in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1091">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="5c934-1092">Bei der Konvertierung von einer `float64` auf eine `float32`, Genauigkeit unterbrochen werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1092">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="5c934-1093">Wenn `value` ist zu groß für eine `float32 (F)`, plus unendlich (Wenn `value` positiv ist) oder minus unendlich (Wenn `value` ist ein negativer Wert) wird zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1093">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="5c934-1094">Wenn Überlauf Konvertieren einer Ganzzahl-Typ in einen anderen auftritt, werden die höherwertigen Bits abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1094">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="5c934-1095">Wenn das Ergebnis kleiner als ein `int32`, der Wert ist, geben Sie den Slot signaturerweitert.</span><span class="sxs-lookup"><span data-stu-id="5c934-1095">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="5c934-1096">Wenn ein Überlauf auftritt, ist die Konvertierung von eines Gleitkommatyps in eine ganze Zahl, die den Rückgabewert nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1096">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="5c934-1097">Ständig werden keine Ausnahmen ausgelöst, wenn Sie dieses Feld verwenden.</span><span class="sxs-lookup"><span data-stu-id="5c934-1097">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="5c934-1098">Finden Sie unter <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> und <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> entsprechende Anweisungen, die eine Ausnahme auslöst, wenn der Ergebnistyp den Ergebniswert nicht ordnungsgemäß darstellen kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1098">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="5c934-1099">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `conv.i` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1099">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1100">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1100">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1101">Konvertiert den Wert an oberster Position des Auswertungsstapels in <see langword="int8" />, klicken Sie dann erweitert (durch Auffüllen) damit <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1101">Converts the value on top of the evaluation stack to <see langword="int8" />, then extends (pads) it to <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1102">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1102">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1103">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1103">Format</span></span>|<span data-ttu-id="5c934-1104">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1104">Assembly Format</span></span>|<span data-ttu-id="5c934-1105">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1105">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1106">67</span><span class="sxs-lookup"><span data-stu-id="5c934-1106">67</span></span>|<span data-ttu-id="5c934-1107">i1</span><span class="sxs-lookup"><span data-stu-id="5c934-1107">conv.i1</span></span>|<span data-ttu-id="5c934-1108">Konvertieren in `int8`, Ablegevorgänge `int32` auf dem Stapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-1108">Convert to `int8`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="5c934-1109">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1109">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1110">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1110">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1111">`value` per pop ausgelesen wird aus dem Stapel und die Konvertierung wird der Vorgang wird versucht.</span><span class="sxs-lookup"><span data-stu-id="5c934-1111">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="5c934-1112">Wenn die Konvertierung erfolgreich ist, wird der resultierende Wert auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1112">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1113">Die `conv.i1` Opcode konvertiert die `value` oberster Position des Stapels in den Typ in den Opcode, und lässt konvertierten Wert oben im Stapel angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1113">The `conv.i1` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="5c934-1114">Ganzzahlige Werte von weniger als 4 Bytes wurden erweitert, um `int32` werden beim Laden auf dem Auswertungsstapel ab (es sei denn, `conv.i` oder `conv.u` verwendet wird, in diesem Fall ist auch das Ergebnis `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1114">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="5c934-1115">Gleitkommawerte werden konvertiert, um die `F` Typ.</span><span class="sxs-lookup"><span data-stu-id="5c934-1115">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="5c934-1116">Konvertierung von Gleitkommazahlen in ganzzahlige Werte werden die Zahlen in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1116">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="5c934-1117">Bei der Konvertierung von einer `float64` auf eine `float32`, Genauigkeit unterbrochen werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1117">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="5c934-1118">Wenn `value` ist zu groß für eine `float32 (F)`, plus unendlich (Wenn `value` positiv ist) oder minus unendlich (Wenn `value` ist ein negativer Wert) wird zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1118">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="5c934-1119">Wenn Überlauf Konvertieren einer Ganzzahl-Typ in einen anderen auftritt, werden die höherwertigen Bits abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1119">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="5c934-1120">Wenn das Ergebnis kleiner als ein `int32`, der Wert ist, geben Sie den Slot signaturerweitert.</span><span class="sxs-lookup"><span data-stu-id="5c934-1120">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="5c934-1121">Wenn ein Überlauf auftritt, ist die Konvertierung von eines Gleitkommatyps in eine ganze Zahl, die den Rückgabewert nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1121">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="5c934-1122">Ständig werden keine Ausnahmen ausgelöst, wenn Sie dieses Feld verwenden.</span><span class="sxs-lookup"><span data-stu-id="5c934-1122">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="5c934-1123">Finden Sie unter <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> und <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> entsprechende Anweisungen, die eine Ausnahme auslöst, wenn der Ergebnistyp den Ergebniswert nicht ordnungsgemäß darstellen kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1123">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="5c934-1124">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `conv.i1` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1124">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i1` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1125">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1125">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1126">Konvertiert den Wert an oberster Position des Auswertungsstapels in <see langword="int16" />, klicken Sie dann erweitert (durch Auffüllen) damit <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1126">Converts the value on top of the evaluation stack to <see langword="int16" />, then extends (pads) it to <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1127">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1127">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1128">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1128">Format</span></span>|<span data-ttu-id="5c934-1129">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1129">Assembly Format</span></span>|<span data-ttu-id="5c934-1130">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1130">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1131">68</span><span class="sxs-lookup"><span data-stu-id="5c934-1131">68</span></span>|<span data-ttu-id="5c934-1132">i2</span><span class="sxs-lookup"><span data-stu-id="5c934-1132">conv.i2</span></span>|<span data-ttu-id="5c934-1133">Konvertieren in `int16`, Ablegevorgänge `int32` auf dem Stapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-1133">Convert to `int16`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="5c934-1134">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1134">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1135">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1135">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1136">`value` per pop ausgelesen wird aus dem Stapel und die Konvertierung wird der Vorgang wird versucht.</span><span class="sxs-lookup"><span data-stu-id="5c934-1136">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="5c934-1137">Wenn die Konvertierung erfolgreich ist, wird der resultierende Wert auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1137">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1138">Die `conv.i2` Opcode konvertiert die `value` oberster Position des Stapels in den Typ in den Opcode, und lässt konvertierten Wert oben im Stapel angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1138">The `conv.i2` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="5c934-1139">Ganzzahlige Werte von weniger als 4 Bytes wurden erweitert, um `int32` werden beim Laden auf dem Auswertungsstapel ab (es sei denn, `conv.i` oder `conv.u` verwendet wird, in diesem Fall ist auch das Ergebnis `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1139">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="5c934-1140">Gleitkommawerte werden konvertiert, um die `F` Typ.</span><span class="sxs-lookup"><span data-stu-id="5c934-1140">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="5c934-1141">Konvertierung von Gleitkommazahlen in ganzzahlige Werte werden die Zahlen in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1141">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="5c934-1142">Bei der Konvertierung von einer `float64` auf eine `float32`, Genauigkeit unterbrochen werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1142">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="5c934-1143">Wenn `value` ist zu groß für eine `float32 (F)`, plus unendlich (Wenn `value` positiv ist) oder minus unendlich (Wenn `value` ist ein negativer Wert) wird zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1143">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="5c934-1144">Wenn Überlauf Konvertieren einer Ganzzahl-Typ in einen anderen auftritt, werden die höherwertigen Bits abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1144">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="5c934-1145">Wenn das Ergebnis kleiner als ein `int32`, der Wert ist, geben Sie den Slot signaturerweitert.</span><span class="sxs-lookup"><span data-stu-id="5c934-1145">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="5c934-1146">Wenn ein Überlauf auftritt, ist die Konvertierung von eines Gleitkommatyps in eine ganze Zahl, die den Rückgabewert nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1146">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="5c934-1147">Ständig werden keine Ausnahmen ausgelöst, wenn Sie dieses Feld verwenden.</span><span class="sxs-lookup"><span data-stu-id="5c934-1147">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="5c934-1148">Finden Sie unter <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> und <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> entsprechende Anweisungen, die eine Ausnahme auslöst, wenn der Ergebnistyp den Ergebniswert nicht ordnungsgemäß darstellen kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1148">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="5c934-1149">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `conv.i2` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1149">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i2` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1150">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1150">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1151">Konvertiert den Wert an oberster Position des Auswertungsstapels in <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1151">Converts the value on top of the evaluation stack to <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1152">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1152">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1153">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1153">Format</span></span>|<span data-ttu-id="5c934-1154">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1154">Assembly Format</span></span>|<span data-ttu-id="5c934-1155">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1155">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1156">69</span><span class="sxs-lookup"><span data-stu-id="5c934-1156">69</span></span>|<span data-ttu-id="5c934-1157">i4</span><span class="sxs-lookup"><span data-stu-id="5c934-1157">conv.i4</span></span>|<span data-ttu-id="5c934-1158">Konvertieren in `int32`, Ablegevorgänge `int32` auf dem Stapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-1158">Convert to `int32`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="5c934-1159">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1159">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1160">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1160">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1161">`value` per pop ausgelesen wird aus dem Stapel und die Konvertierung wird der Vorgang wird versucht.</span><span class="sxs-lookup"><span data-stu-id="5c934-1161">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="5c934-1162">Wenn die Konvertierung erfolgreich ist, wird der resultierende Wert auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1162">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1163">Die `conv.i4` Opcode konvertiert die `value` oberster Position des Stapels in den Typ in den Opcode, und lässt konvertierten Wert oben im Stapel angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1163">The `conv.i4` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="5c934-1164">Ganzzahlige Werte von weniger als 4 Bytes wurden erweitert, um `int32` werden beim Laden auf dem Auswertungsstapel ab (es sei denn, `conv.i` oder `conv.u` verwendet wird, in diesem Fall ist auch das Ergebnis `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1164">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="5c934-1165">Gleitkommawerte werden konvertiert, um die `F` Typ.</span><span class="sxs-lookup"><span data-stu-id="5c934-1165">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="5c934-1166">Konvertierung von Gleitkommazahlen in ganzzahlige Werte werden die Zahlen in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1166">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="5c934-1167">Bei der Konvertierung von einer `float64` auf eine `float32`, Genauigkeit unterbrochen werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1167">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="5c934-1168">Wenn `value` ist zu groß für eine `float32 (F)`, plus unendlich (Wenn `value` positiv ist) oder minus unendlich (Wenn `value` ist ein negativer Wert) wird zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1168">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="5c934-1169">Wenn Überlauf Konvertieren einer Ganzzahl-Typ in einen anderen auftritt, werden die höherwertigen Bits abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1169">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="5c934-1170">Wenn das Ergebnis kleiner als ein `int32`, der Wert ist, geben Sie den Slot signaturerweitert.</span><span class="sxs-lookup"><span data-stu-id="5c934-1170">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="5c934-1171">Wenn ein Überlauf auftritt, ist die Konvertierung von eines Gleitkommatyps in eine ganze Zahl, die den Rückgabewert nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1171">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="5c934-1172">Ständig werden keine Ausnahmen ausgelöst, wenn Sie dieses Feld verwenden.</span><span class="sxs-lookup"><span data-stu-id="5c934-1172">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="5c934-1173">Finden Sie unter <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> und <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> entsprechende Anweisungen, die eine Ausnahme auslöst, wenn der Ergebnistyp den Ergebniswert nicht ordnungsgemäß darstellen kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1173">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="5c934-1174">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `conv.i4` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1174">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i4` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1175">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1175">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1176">Konvertiert den Wert an oberster Position des Auswertungsstapels in <see langword="int64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1176">Converts the value on top of the evaluation stack to <see langword="int64" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1177">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1177">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1178">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1178">Format</span></span>|<span data-ttu-id="5c934-1179">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1179">Assembly Format</span></span>|<span data-ttu-id="5c934-1180">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1180">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1181">6A</span><span class="sxs-lookup"><span data-stu-id="5c934-1181">6A</span></span>|<span data-ttu-id="5c934-1182">i8</span><span class="sxs-lookup"><span data-stu-id="5c934-1182">conv.i8</span></span>|<span data-ttu-id="5c934-1183">Konvertieren in `int64`, Ablegevorgänge `int64` auf dem Stapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-1183">Convert to `int64`, pushing `int64` on stack.</span></span>|  
  
 <span data-ttu-id="5c934-1184">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1184">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1185">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1185">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1186">`value` per pop ausgelesen wird aus dem Stapel und die Konvertierung wird der Vorgang wird versucht.</span><span class="sxs-lookup"><span data-stu-id="5c934-1186">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="5c934-1187">Wenn die Konvertierung erfolgreich ist, wird der resultierende Wert auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1187">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1188">Die `conv.i8` Opcode konvertiert die `value` oberster Position des Stapels in den Typ in den Opcode, und lässt konvertierten Wert oben im Stapel angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1188">The `conv.i8` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="5c934-1189">Ganzzahlige Werte von weniger als 4 Bytes wurden erweitert, um `int32` werden beim Laden auf dem Auswertungsstapel ab (es sei denn, `conv.i` oder `conv.u` verwendet wird, in diesem Fall ist auch das Ergebnis `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1189">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="5c934-1190">Gleitkommawerte werden konvertiert, um die `F` Typ.</span><span class="sxs-lookup"><span data-stu-id="5c934-1190">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="5c934-1191">Konvertierung von Gleitkommazahlen in ganzzahlige Werte werden die Zahlen in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1191">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="5c934-1192">Bei der Konvertierung von einer `float64` auf eine `float32`, Genauigkeit unterbrochen werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1192">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="5c934-1193">Wenn `value` ist zu groß für eine `float32 (F)`, plus unendlich (Wenn `value` positiv ist) oder minus unendlich (Wenn `value` ist ein negativer Wert) wird zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1193">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="5c934-1194">Wenn Überlauf Konvertieren einer Ganzzahl-Typ in einen anderen auftritt, werden die höherwertigen Bits abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1194">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="5c934-1195">Wenn das Ergebnis kleiner als ein `int32`, der Wert ist, geben Sie den Slot signaturerweitert.</span><span class="sxs-lookup"><span data-stu-id="5c934-1195">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="5c934-1196">Wenn ein Überlauf auftritt, ist die Konvertierung von eines Gleitkommatyps in eine ganze Zahl, die den Rückgabewert nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1196">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="5c934-1197">Ständig werden keine Ausnahmen ausgelöst, wenn Sie dieses Feld verwenden.</span><span class="sxs-lookup"><span data-stu-id="5c934-1197">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="5c934-1198">Finden Sie unter <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> und <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> entsprechende Anweisungen, die eine Ausnahme auslöst, wenn der Ergebnistyp den Ergebniswert nicht ordnungsgemäß darstellen kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1198">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="5c934-1199">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `conv.i8` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1199">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i8` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1200">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1200">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1201">Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels signiert <see langword="native int" />eine <see cref="T:System.OverflowException" /> bei einem Überlauf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1201">Converts the signed value on top of the evaluation stack to signed <see langword="native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1202">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1202">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1203">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1203">Format</span></span>|<span data-ttu-id="5c934-1204">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1204">Assembly Format</span></span>|<span data-ttu-id="5c934-1205">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1205">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1206">D4</span><span class="sxs-lookup"><span data-stu-id="5c934-1206">D4</span></span>|<span data-ttu-id="5c934-1207">conv.ovf.i</span><span class="sxs-lookup"><span data-stu-id="5c934-1207">conv.ovf.i</span></span>|<span data-ttu-id="5c934-1208">Konvertieren in ein `native int` (auf dem Stapel als `native int`) und löst eine Ausnahme bei einem Überlauf.</span><span class="sxs-lookup"><span data-stu-id="5c934-1208">Convert to a `native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5c934-1209">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1209">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1210">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1210">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1211">`value` per pop ausgelesen wird aus dem Stapel und die Konvertierung wird der Vorgang wird versucht.</span><span class="sxs-lookup"><span data-stu-id="5c934-1211">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5c934-1212">Wenn ein Überlauf auftritt, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1212">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5c934-1213">Wenn die Konvertierung erfolgreich ist, wird der resultierende Wert auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1213">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1214">Die `conv.ovf.i` Opcode konvertiert die `value` oberster Position des Stapels in den Typ in den Opcode, und setzt konvertierten Wert oben im Stapel angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1214">The `conv.ovf.i` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5c934-1215">Wenn der Wert zu groß oder zu klein, um durch den Typ des dargestellt ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1215">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5c934-1216">Konvertierungen von Gleitkommazahlen in ganzzahlige Werte werden die Zahlen in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1216">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5c934-1217">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` werden beim Laden auf dem Auswertungsstapel ab (es sei denn, `conv.ovf.i` oder `conv.ovf.u` verwendet werden, wird in diesem Fall ist auch das Ergebnis `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1217">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5c934-1218"><xref:System.OverflowException> wird ausgelöst, wenn das Ergebnis nicht im Ergebnistyp dargestellt werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1218"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5c934-1219">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `conv.ovf.i` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1219">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1220">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1220">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1221">Konvertiert den Wert ohne Vorzeichen oberster Position des Auswertungsstapels signiert <see langword="native int" />eine <see cref="T:System.OverflowException" /> bei einem Überlauf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1221">Converts the unsigned value on top of the evaluation stack to signed <see langword="native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1222">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1222">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1223">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1223">Format</span></span>|<span data-ttu-id="5c934-1224">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1224">Assembly Format</span></span>|<span data-ttu-id="5c934-1225">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1225">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1226">8A</span><span class="sxs-lookup"><span data-stu-id="5c934-1226">8A</span></span>|<span data-ttu-id="5c934-1227">conv.ovf.i.un</span><span class="sxs-lookup"><span data-stu-id="5c934-1227">conv.ovf.i.un</span></span>|<span data-ttu-id="5c934-1228">Konvertiert einen Wert ohne Vorzeichen zu einem `native int` (auf dem Stapel als `native int`) und löst eine Ausnahme bei einem Überlauf.</span><span class="sxs-lookup"><span data-stu-id="5c934-1228">Converts an unsigned value to a `native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5c934-1229">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1229">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1230">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1230">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1231">`value` per pop ausgelesen wird aus dem Stapel und die Konvertierung wird der Vorgang wird versucht.</span><span class="sxs-lookup"><span data-stu-id="5c934-1231">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5c934-1232">Wenn ein Überlauf auftritt, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1232">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5c934-1233">Wenn die Konvertierung erfolgreich ist, wird der resultierende Wert auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1233">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1234">Die `conv.ovf.i.un` Opcode konvertiert die `value` oberster Position des Stapels in den Typ in den Opcode, und setzt konvertierten Wert oben im Stapel angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1234">The `conv.ovf.i.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5c934-1235">Wenn der Wert zu groß oder zu klein, um durch den Typ des dargestellt ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1235">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5c934-1236">Konvertierungen von Gleitkommazahlen in ganzzahlige Werte werden die Zahlen in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1236">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5c934-1237">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` werden beim Laden auf dem Auswertungsstapel ab (es sei denn, `conv.ovf.i` oder `conv.ovf.u` verwendet werden, wird in diesem Fall ist auch das Ergebnis `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1237">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5c934-1238"><xref:System.OverflowException> wird ausgelöst, wenn das Ergebnis nicht im Ergebnistyp dargestellt werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1238"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5c934-1239">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `conv.ovf.i.un` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1239">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i.un` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1240">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1240">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1241">Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels in <see langword="int8" /> mit Vorzeichen und erweitert ihn auf <see langword="int32" />. Bei einem Überlauf wird eine <see cref="T:System.OverflowException" /> ausgelöst.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1241">Converts the signed value on top of the evaluation stack to signed <see langword="int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1242">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1242">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1243">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1243">Format</span></span>|<span data-ttu-id="5c934-1244">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1244">Assembly Format</span></span>|<span data-ttu-id="5c934-1245">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1245">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1246">B3</span><span class="sxs-lookup"><span data-stu-id="5c934-1246">B3</span></span>|<span data-ttu-id="5c934-1247">conv.ovf.i1</span><span class="sxs-lookup"><span data-stu-id="5c934-1247">conv.ovf.i1</span></span>|<span data-ttu-id="5c934-1248">Konvertieren in ein `int8` (auf dem Stapel als `int32`) und löst eine Ausnahme bei einem Überlauf.</span><span class="sxs-lookup"><span data-stu-id="5c934-1248">Convert to an `int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5c934-1249">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1249">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1250">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1250">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1251">`value` per pop ausgelesen wird aus dem Stapel und die Konvertierung wird der Vorgang wird versucht.</span><span class="sxs-lookup"><span data-stu-id="5c934-1251">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5c934-1252">Wenn ein Überlauf auftritt, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1252">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5c934-1253">Wenn die Konvertierung erfolgreich ist, wird der resultierende Wert auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1253">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1254">Die `conv.ovf.i1` Opcode konvertiert die `value` oberster Position des Stapels in den Typ in den Opcode, und setzt konvertierten Wert oben im Stapel angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1254">The `conv.ovf.i1` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5c934-1255">Wenn der Wert zu groß oder zu klein, um durch den Typ des dargestellt ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1255">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5c934-1256">Konvertierungen von Gleitkommazahlen in ganzzahlige Werte werden die Zahlen in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1256">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5c934-1257">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` werden beim Laden auf dem Auswertungsstapel ab (es sei denn, `conv.ovf.i` oder `conv.ovf.u` verwendet werden, wird in diesem Fall ist auch das Ergebnis `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1257">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5c934-1258"><xref:System.OverflowException> wird ausgelöst, wenn das Ergebnis nicht im Ergebnistyp dargestellt werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1258"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5c934-1259">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `conv.ovf.i1` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1259">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i1` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1260">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1260">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I1_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I1_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I1_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I1_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I1_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I1_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1261">Konvertiert den Wert ohne Vorzeichen oberster Position des Auswertungsstapels signiert <see langword="int8" /> und erweitert ihn auf <see langword="int32" />eine <see cref="T:System.OverflowException" /> bei einem Überlauf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1261">Converts the unsigned value on top of the evaluation stack to signed <see langword="int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1262">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1262">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1263">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1263">Format</span></span>|<span data-ttu-id="5c934-1264">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1264">Assembly Format</span></span>|<span data-ttu-id="5c934-1265">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1265">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1266">82</span><span class="sxs-lookup"><span data-stu-id="5c934-1266">82</span></span>|<span data-ttu-id="5c934-1267">conv.ovf.i1.un</span><span class="sxs-lookup"><span data-stu-id="5c934-1267">conv.ovf.i1.un</span></span>|<span data-ttu-id="5c934-1268">Konvertiert einen Wert ohne Vorzeichen zu einem `int8` (auf dem Stapel als `int32`) und löst eine Ausnahme bei einem Überlauf.</span><span class="sxs-lookup"><span data-stu-id="5c934-1268">Converts an unsigned value to an `int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5c934-1269">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1269">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1270">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1270">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1271">`value` per pop ausgelesen wird aus dem Stapel und die Konvertierung wird der Vorgang wird versucht.</span><span class="sxs-lookup"><span data-stu-id="5c934-1271">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5c934-1272">Wenn ein Überlauf auftritt, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1272">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5c934-1273">Wenn die Konvertierung erfolgreich ist, wird der resultierende Wert auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1273">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1274">Die `conv.ovf.i1.un` Opcode konvertiert die `value` oberster Position des Stapels in den Typ in den Opcode, und setzt konvertierten Wert oben im Stapel angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1274">The `conv.ovf.i1.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5c934-1275">Wenn der Wert zu groß oder zu klein, um durch den Typ des dargestellt ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1275">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5c934-1276">Konvertierungen von Gleitkommazahlen in ganzzahlige Werte werden die Zahlen in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1276">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5c934-1277">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` werden beim Laden auf dem Auswertungsstapel ab (es sei denn, `conv.ovf.i` oder `conv.ovf.u` verwendet werden, wird in diesem Fall ist auch das Ergebnis `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1277">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5c934-1278"><xref:System.OverflowException> wird ausgelöst, wenn das Ergebnis nicht im Ergebnistyp dargestellt werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1278"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5c934-1279">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `conv.ovf.i1.un` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1279">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i1.un` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1280">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1280">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1281">Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels signiert <see langword="int16" /> und erweitert ihn auf <see langword="int32" />eine <see cref="T:System.OverflowException" /> bei einem Überlauf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1281">Converts the signed value on top of the evaluation stack to signed <see langword="int16" /> and extending it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1282">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1282">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1283">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1283">Format</span></span>|<span data-ttu-id="5c934-1284">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1284">Assembly Format</span></span>|<span data-ttu-id="5c934-1285">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1285">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1286">B5</span><span class="sxs-lookup"><span data-stu-id="5c934-1286">B5</span></span>|<span data-ttu-id="5c934-1287">conv.ovf. i2</span><span class="sxs-lookup"><span data-stu-id="5c934-1287">conv.ovf.i2</span></span>|<span data-ttu-id="5c934-1288">Konvertieren in ein `int16` (auf dem Stapel als `int32`) und löst eine Ausnahme bei einem Überlauf.</span><span class="sxs-lookup"><span data-stu-id="5c934-1288">Convert to an `int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5c934-1289">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1289">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1290">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1290">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1291">`value` per pop ausgelesen wird aus dem Stapel und die Konvertierung wird der Vorgang wird versucht.</span><span class="sxs-lookup"><span data-stu-id="5c934-1291">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5c934-1292">Wenn ein Überlauf auftritt, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1292">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5c934-1293">Wenn die Konvertierung erfolgreich ist, wird der resultierende Wert auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1293">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1294">Die `conv.ovf.i2` Opcode konvertiert die `value` oberster Position des Stapels in den Typ in den Opcode, und setzt konvertierten Wert oben im Stapel angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1294">The `conv.ovf.i2` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5c934-1295">Wenn der Wert zu groß oder zu klein, um durch den Typ des dargestellt ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1295">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5c934-1296">Konvertierungen von Gleitkommazahlen in ganzzahlige Werte werden die Zahlen in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1296">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5c934-1297">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` werden beim Laden auf dem Auswertungsstapel ab (es sei denn, `conv.ovf.i` oder `conv.ovf.u` verwendet werden, wird in diesem Fall ist auch das Ergebnis `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1297">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5c934-1298"><xref:System.OverflowException> wird ausgelöst, wenn das Ergebnis nicht im Ergebnistyp dargestellt werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1298"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5c934-1299">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `conv.ovf.i2` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1299">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i2` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1300">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1300">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I2_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I2_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I2_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I2_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I2_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I2_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1301">Konvertiert den Wert ohne Vorzeichen oberster Position des Auswertungsstapels signiert <see langword="int16" /> und erweitert ihn auf <see langword="int32" />eine <see cref="T:System.OverflowException" /> bei einem Überlauf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1301">Converts the unsigned value on top of the evaluation stack to signed <see langword="int16" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1302">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1302">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1303">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1303">Format</span></span>|<span data-ttu-id="5c934-1304">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1304">Assembly Format</span></span>|<span data-ttu-id="5c934-1305">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1305">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1306">83</span><span class="sxs-lookup"><span data-stu-id="5c934-1306">83</span></span>|<span data-ttu-id="5c934-1307">conv.ovf.i2.un</span><span class="sxs-lookup"><span data-stu-id="5c934-1307">conv.ovf.i2.un</span></span>|<span data-ttu-id="5c934-1308">Konvertiert einen Wert ohne Vorzeichen zu einem `int16` (auf dem Stapel als `int32`) und löst eine Ausnahme bei einem Überlauf.</span><span class="sxs-lookup"><span data-stu-id="5c934-1308">Converts an unsigned value to an `int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5c934-1309">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1309">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1310">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1310">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1311">`value` per pop ausgelesen wird aus dem Stapel und die Konvertierung wird der Vorgang wird versucht.</span><span class="sxs-lookup"><span data-stu-id="5c934-1311">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5c934-1312">Wenn ein Überlauf auftritt, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1312">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5c934-1313">Wenn die Konvertierung erfolgreich ist, wird der resultierende Wert auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1313">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1314">Die `conv.ovf.i2.un` Opcode konvertiert die `value` oberster Position des Stapels in den Typ in den Opcode, und setzt konvertierten Wert oben im Stapel angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1314">The `conv.ovf.i2.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5c934-1315">Wenn der Wert zu groß oder zu klein, um durch den Typ des dargestellt ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1315">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5c934-1316">Konvertierungen von Gleitkommazahlen in ganzzahlige Werte werden die Zahlen in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1316">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5c934-1317">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` werden beim Laden auf dem Auswertungsstapel ab (es sei denn, `conv.ovf.i` oder `conv.ovf.u` verwendet werden, wird in diesem Fall ist auch das Ergebnis `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1317">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5c934-1318"><xref:System.OverflowException> wird ausgelöst, wenn das Ergebnis nicht im Ergebnistyp dargestellt werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1318"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5c934-1319">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `conv.ovf.i2.un` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1319">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i2.un` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1320">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1320">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1321">Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels signiert <see langword="int32" />eine <see cref="T:System.OverflowException" /> bei einem Überlauf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1321">Converts the signed value on top of the evaluation stack to signed <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1322">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1322">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1323">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1323">Format</span></span>|<span data-ttu-id="5c934-1324">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1324">Assembly Format</span></span>|<span data-ttu-id="5c934-1325">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1325">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1326">B7</span><span class="sxs-lookup"><span data-stu-id="5c934-1326">B7</span></span>|<span data-ttu-id="5c934-1327">conv.ovf. i4</span><span class="sxs-lookup"><span data-stu-id="5c934-1327">conv.ovf.i4</span></span>|<span data-ttu-id="5c934-1328">Konvertieren in ein `int32` (auf dem Stapel als `int32`) und löst eine Ausnahme bei einem Überlauf.</span><span class="sxs-lookup"><span data-stu-id="5c934-1328">Convert to an `int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5c934-1329">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1329">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1330">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1330">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1331">`value` per pop ausgelesen wird aus dem Stapel und die Konvertierung wird der Vorgang wird versucht.</span><span class="sxs-lookup"><span data-stu-id="5c934-1331">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5c934-1332">Wenn ein Überlauf auftritt, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1332">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5c934-1333">Wenn die Konvertierung erfolgreich ist, wird der resultierende Wert auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1333">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1334">Die `conv.ovf.i4` Opcode konvertiert die `value` oberster Position des Stapels in den Typ in den Opcode, und setzt konvertierten Wert oben im Stapel angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1334">The `conv.ovf.i4` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5c934-1335">Wenn der Wert zu groß oder zu klein, um durch den Typ des dargestellt ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1335">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5c934-1336">Konvertierungen von Gleitkommazahlen in ganzzahlige Werte werden die Zahlen in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1336">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5c934-1337">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` werden beim Laden auf dem Auswertungsstapel ab (es sei denn, `conv.ovf.i` oder `conv.ovf.u` verwendet werden, wird in diesem Fall ist auch das Ergebnis `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1337">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5c934-1338"><xref:System.OverflowException> wird ausgelöst, wenn das Ergebnis nicht im Ergebnistyp dargestellt werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1338"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5c934-1339">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `conv.ovf.i4` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1339">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i4` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1340">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1340">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I4_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I4_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I4_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I4_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I4_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I4_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1341">Konvertiert den Wert ohne Vorzeichen oberster Position des Auswertungsstapels signiert <see langword="int32" />eine <see cref="T:System.OverflowException" /> bei einem Überlauf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1341">Converts the unsigned value on top of the evaluation stack to signed <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1342">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1342">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1343">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1343">Format</span></span>|<span data-ttu-id="5c934-1344">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1344">Assembly Format</span></span>|<span data-ttu-id="5c934-1345">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1345">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1346">84</span><span class="sxs-lookup"><span data-stu-id="5c934-1346">84</span></span>|<span data-ttu-id="5c934-1347">conv.ovf.i4.un</span><span class="sxs-lookup"><span data-stu-id="5c934-1347">conv.ovf.i4.un</span></span>|<span data-ttu-id="5c934-1348">Konvertiert einen Wert ohne Vorzeichen zu einem `int32` (auf dem Stapel als `int32`) und löst eine Ausnahme bei einem Überlauf.</span><span class="sxs-lookup"><span data-stu-id="5c934-1348">Converts an unsigned value to an `int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5c934-1349">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1349">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1350">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1350">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1351">`value` per pop ausgelesen wird aus dem Stapel und die Konvertierung wird der Vorgang wird versucht.</span><span class="sxs-lookup"><span data-stu-id="5c934-1351">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5c934-1352">Wenn ein Überlauf auftritt, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1352">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5c934-1353">Wenn die Konvertierung erfolgreich ist, wird der resultierende Wert auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1353">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1354">Die `conv.ovf.i4.un` Opcode konvertiert die `value` oberster Position des Stapels in den Typ in den Opcode, und setzt konvertierten Wert oben im Stapel angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1354">The `conv.ovf.i4.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5c934-1355">Wenn der Wert zu groß oder zu klein, um durch den Typ des dargestellt ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1355">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5c934-1356">Konvertierungen von Gleitkommazahlen in ganzzahlige Werte werden die Zahlen in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1356">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5c934-1357">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` werden beim Laden auf dem Auswertungsstapel ab (es sei denn, `conv.ovf.i` oder `conv.ovf.u` verwendet werden, wird in diesem Fall ist auch das Ergebnis `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1357">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5c934-1358"><xref:System.OverflowException> wird ausgelöst, wenn das Ergebnis nicht im Ergebnistyp dargestellt werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1358"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5c934-1359">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `conv.ovf.i4.un` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1359">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i4.un` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1360">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1360">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1361">Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels signiert <see langword="int64" />eine <see cref="T:System.OverflowException" /> bei einem Überlauf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1361">Converts the signed value on top of the evaluation stack to signed <see langword="int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1362">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1362">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1363">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1363">Format</span></span>|<span data-ttu-id="5c934-1364">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1364">Assembly Format</span></span>|<span data-ttu-id="5c934-1365">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1365">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1366">B9</span><span class="sxs-lookup"><span data-stu-id="5c934-1366">B9</span></span>|<span data-ttu-id="5c934-1367">i8</span><span class="sxs-lookup"><span data-stu-id="5c934-1367">conv.ovf.i8</span></span>|<span data-ttu-id="5c934-1368">Konvertieren in ein `int64` (auf dem Stapel als `int64`) und löst eine Ausnahme bei einem Überlauf.</span><span class="sxs-lookup"><span data-stu-id="5c934-1368">Convert to an `int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5c934-1369">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1369">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1370">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1370">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1371">`value` per pop ausgelesen wird aus dem Stapel und die Konvertierung wird der Vorgang wird versucht.</span><span class="sxs-lookup"><span data-stu-id="5c934-1371">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5c934-1372">Wenn ein Überlauf auftritt, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1372">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5c934-1373">Wenn die Konvertierung erfolgreich ist, wird der resultierende Wert auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1373">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1374">Die `conv.ovf.i8` Opcode konvertiert die `value` oberster Position des Stapels in den Typ in den Opcode, und setzt konvertierten Wert oben im Stapel angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1374">The `conv.ovf.i8` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5c934-1375">Wenn der Wert zu groß oder zu klein, um durch den Typ des dargestellt ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1375">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5c934-1376">Konvertierungen von Gleitkommazahlen in ganzzahlige Werte werden die Zahlen in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1376">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5c934-1377">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` werden beim Laden auf dem Auswertungsstapel ab (es sei denn, `conv.ovf.i` oder `conv.ovf.u` verwendet werden, wird in diesem Fall ist auch das Ergebnis `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1377">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5c934-1378"><xref:System.OverflowException> wird ausgelöst, wenn das Ergebnis nicht im Ergebnistyp dargestellt werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1378"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5c934-1379">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `conv.ovf.i8` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1379">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i8` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1380">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1380">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I8_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I8_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I8_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I8_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I8_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I8_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1381">Konvertiert den Wert ohne Vorzeichen oberster Position des Auswertungsstapels signiert <see langword="int64" />eine <see cref="T:System.OverflowException" /> bei einem Überlauf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1381">Converts the unsigned value on top of the evaluation stack to signed <see langword="int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1382">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1382">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1383">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1383">Format</span></span>|<span data-ttu-id="5c934-1384">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1384">Assembly Format</span></span>|<span data-ttu-id="5c934-1385">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1385">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1386">85</span><span class="sxs-lookup"><span data-stu-id="5c934-1386">85</span></span>|<span data-ttu-id="5c934-1387">conv.ovf.i8.un</span><span class="sxs-lookup"><span data-stu-id="5c934-1387">conv.ovf.i8.un</span></span>|<span data-ttu-id="5c934-1388">Konvertiert einen Wert ohne Vorzeichen zu einem `int64` (auf dem Stapel als `int64`) und löst eine Ausnahme bei einem Überlauf.</span><span class="sxs-lookup"><span data-stu-id="5c934-1388">Converts an unsigned value to an `int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5c934-1389">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1389">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1390">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1390">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1391">`value` per pop ausgelesen wird aus dem Stapel und die Konvertierung wird der Vorgang wird versucht.</span><span class="sxs-lookup"><span data-stu-id="5c934-1391">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5c934-1392">Wenn ein Überlauf auftritt, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1392">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5c934-1393">Wenn die Konvertierung erfolgreich ist, wird der resultierende Wert auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1393">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1394">Die `conv.ovf.i8.un` Opcode konvertiert die `value` oberster Position des Stapels in den Typ in den Opcode, und setzt konvertierten Wert oben im Stapel angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1394">The `conv.ovf.i8.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5c934-1395">Wenn der Wert zu groß oder zu klein, um durch den Typ des dargestellt ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1395">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5c934-1396">Konvertierungen von Gleitkommazahlen in ganzzahlige Werte werden die Zahlen in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1396">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5c934-1397">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` werden beim Laden auf dem Auswertungsstapel ab (es sei denn, `conv.ovf.i` oder `conv.ovf.u` verwendet werden, wird in diesem Fall ist auch das Ergebnis `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1397">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5c934-1398"><xref:System.OverflowException> wird ausgelöst, wenn das Ergebnis nicht im Ergebnistyp dargestellt werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1398"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5c934-1399">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `conv.ovf.i8.un` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1399">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i8.un` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1400">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1400">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1401">Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels zu <see langword="unsigned native int" />eine <see cref="T:System.OverflowException" /> bei einem Überlauf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1401">Converts the signed value on top of the evaluation stack to <see langword="unsigned native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1402">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1402">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1403">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1403">Format</span></span>|<span data-ttu-id="5c934-1404">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1404">Assembly Format</span></span>|<span data-ttu-id="5c934-1405">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1405">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1406">D5</span><span class="sxs-lookup"><span data-stu-id="5c934-1406">D5</span></span>|<span data-ttu-id="5c934-1407">conv.ovf.u</span><span class="sxs-lookup"><span data-stu-id="5c934-1407">conv.ovf.u</span></span>|<span data-ttu-id="5c934-1408">Konvertieren in ein `unsigned native int` (auf dem Stapel als `native int`) und löst eine Ausnahme bei einem Überlauf.</span><span class="sxs-lookup"><span data-stu-id="5c934-1408">Convert to an `unsigned native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5c934-1409">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1409">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1410">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1410">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1411">`value` per pop ausgelesen wird aus dem Stapel und die Konvertierung wird der Vorgang wird versucht.</span><span class="sxs-lookup"><span data-stu-id="5c934-1411">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5c934-1412">Wenn ein Überlauf auftritt, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1412">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5c934-1413">Wenn die Konvertierung erfolgreich ist, wird der resultierende Wert auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1413">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1414">Die `conv.ovf.u` Opcode konvertiert die `value` oberster Position des Stapels in den Typ in den Opcode, und setzt konvertierten Wert oben im Stapel angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1414">The `conv.ovf.u` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5c934-1415">Wenn der Wert zu groß oder zu klein, um durch den Typ des dargestellt ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1415">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5c934-1416">Konvertierungen von Gleitkommazahlen in ganzzahlige Werte werden die Zahlen in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1416">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5c934-1417">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` werden beim Laden auf dem Auswertungsstapel ab (es sei denn, `conv.ovf.i` oder `conv.ovf.u` verwendet werden, wird in diesem Fall ist auch das Ergebnis `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1417">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5c934-1418"><xref:System.OverflowException> wird ausgelöst, wenn das Ergebnis nicht im Ergebnistyp dargestellt werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1418"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5c934-1419">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `conv.ovf.u` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1419">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1420">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1420">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1421">Konvertiert den Wert ohne Vorzeichen an oberster Position des Auswertungsstapels in <see langword="unsigned native int" />eine <see cref="T:System.OverflowException" /> bei einem Überlauf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1421">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1422">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1422">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1423">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1423">Format</span></span>|<span data-ttu-id="5c934-1424">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1424">Assembly Format</span></span>|<span data-ttu-id="5c934-1425">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1425">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1426">8 B</span><span class="sxs-lookup"><span data-stu-id="5c934-1426">8B</span></span>|<span data-ttu-id="5c934-1427">conv.ovf.u.un</span><span class="sxs-lookup"><span data-stu-id="5c934-1427">conv.ovf.u.un</span></span>|<span data-ttu-id="5c934-1428">Konvertiert Wert ohne Vorzeichen in eine `unsigned native int` (auf dem Stapel als `native int`) und löst eine Ausnahme bei einem Überlauf.</span><span class="sxs-lookup"><span data-stu-id="5c934-1428">Converts un unsigned value to an `unsigned native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5c934-1429">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1429">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1430">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1430">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1431">`value` per pop ausgelesen wird aus dem Stapel und die Konvertierung wird der Vorgang wird versucht.</span><span class="sxs-lookup"><span data-stu-id="5c934-1431">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5c934-1432">Wenn ein Überlauf auftritt, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1432">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5c934-1433">Wenn die Konvertierung erfolgreich ist, wird der resultierende Wert auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1433">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1434">Die `conv.ovf.u.un` Opcode konvertiert die `value` oberster Position des Stapels in den Typ in den Opcode, und setzt konvertierten Wert oben im Stapel angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1434">The `conv.ovf.u.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5c934-1435">Wenn der Wert zu groß oder zu klein, um durch den Typ des dargestellt ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1435">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5c934-1436">Konvertierungen von Gleitkommazahlen in ganzzahlige Werte werden die Zahlen in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1436">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5c934-1437">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` werden beim Laden auf dem Auswertungsstapel ab (es sei denn, `conv.ovf.i` oder `conv.ovf.u` verwendet werden, wird in diesem Fall ist auch das Ergebnis `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1437">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5c934-1438"><xref:System.OverflowException> wird ausgelöst, wenn das Ergebnis nicht im Ergebnistyp dargestellt werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1438"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5c934-1439">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `conv.uvf.u.un` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1439">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.uvf.u.un` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1440">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1440">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1441">Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels zu <see langword="unsigned int8" /> und erweitert ihn auf <see langword="int32" />eine <see cref="T:System.OverflowException" /> bei einem Überlauf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1441">Converts the signed value on top of the evaluation stack to <see langword="unsigned int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1442">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1442">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1443">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1443">Format</span></span>|<span data-ttu-id="5c934-1444">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1444">Assembly Format</span></span>|<span data-ttu-id="5c934-1445">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1445">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1446">B4</span><span class="sxs-lookup"><span data-stu-id="5c934-1446">B4</span></span>|<span data-ttu-id="5c934-1447">conv.ovf. U1</span><span class="sxs-lookup"><span data-stu-id="5c934-1447">conv.ovf.u1</span></span>|<span data-ttu-id="5c934-1448">Konvertieren in ein `unsigned int8` (auf dem Stapel als `int32`) und löst eine Ausnahme bei einem Überlauf.</span><span class="sxs-lookup"><span data-stu-id="5c934-1448">Convert to an `unsigned int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5c934-1449">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1449">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1450">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1450">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1451">`value` per pop ausgelesen wird aus dem Stapel und die Konvertierung wird der Vorgang wird versucht.</span><span class="sxs-lookup"><span data-stu-id="5c934-1451">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5c934-1452">Wenn ein Überlauf auftritt, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1452">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5c934-1453">Wenn die Konvertierung erfolgreich ist, wird der resultierende Wert auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1453">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1454">Die `conv.ovf.u1` Opcode konvertiert die `value` oberster Position des Stapels in den Typ in den Opcode, und setzt konvertierten Wert oben im Stapel angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1454">The `conv.ovf.u1` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5c934-1455">Wenn der Wert zu groß oder zu klein, um durch den Typ des dargestellt ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1455">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5c934-1456">Konvertierungen von Gleitkommazahlen in ganzzahlige Werte werden die Zahlen in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1456">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5c934-1457">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` werden beim Laden auf dem Auswertungsstapel ab (es sei denn, `conv.ovf.i` oder `conv.ovf.u` verwendet werden, wird in diesem Fall ist auch das Ergebnis `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1457">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5c934-1458"><xref:System.OverflowException> wird ausgelöst, wenn das Ergebnis nicht im Ergebnistyp dargestellt werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1458"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5c934-1459">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `conv.ovf.u1` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1459">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u1` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1460">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1460">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U1_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U1_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U1_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U1_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U1_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U1_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1461">Konvertiert den Wert ohne Vorzeichen an oberster Position des Auswertungsstapels in <see langword="unsigned int8" /> und erweitert ihn auf <see langword="int32" />eine <see cref="T:System.OverflowException" /> bei einem Überlauf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1461">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1462">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1462">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1463">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1463">Format</span></span>|<span data-ttu-id="5c934-1464">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1464">Assembly Format</span></span>|<span data-ttu-id="5c934-1465">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1465">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1466">86</span><span class="sxs-lookup"><span data-stu-id="5c934-1466">86</span></span>|<span data-ttu-id="5c934-1467">conv.ovf.u1.un</span><span class="sxs-lookup"><span data-stu-id="5c934-1467">conv.ovf.u1.un</span></span>|<span data-ttu-id="5c934-1468">Konvertiert einen Wert ohne Vorzeichen zu einem `unsigned int8` (auf dem Stapel als `int32`) und löst eine Ausnahme bei einem Überlauf.</span><span class="sxs-lookup"><span data-stu-id="5c934-1468">Converts an unsigned value to an `unsigned int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5c934-1469">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1469">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1470">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1470">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1471">`value` per pop ausgelesen wird aus dem Stapel und die Konvertierung wird der Vorgang wird versucht.</span><span class="sxs-lookup"><span data-stu-id="5c934-1471">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5c934-1472">Wenn ein Überlauf auftritt, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1472">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5c934-1473">Wenn die Konvertierung erfolgreich ist, wird der resultierende Wert auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1473">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1474">Die `conv.ovf.u1.un` Opcode konvertiert die `value` oberster Position des Stapels in den Typ in den Opcode, und setzt konvertierten Wert oben im Stapel angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1474">The `conv.ovf.u1.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5c934-1475">Wenn der Wert zu groß oder zu klein, um durch den Typ des dargestellt ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1475">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5c934-1476">Konvertierungen von Gleitkommazahlen in ganzzahlige Werte werden die Zahlen in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1476">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5c934-1477">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` werden beim Laden auf dem Auswertungsstapel ab (es sei denn, `conv.ovf.i` oder `conv.ovf.u` verwendet werden, wird in diesem Fall ist auch das Ergebnis `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1477">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5c934-1478"><xref:System.OverflowException> wird ausgelöst, wenn das Ergebnis nicht im Ergebnistyp dargestellt werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1478"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5c934-1479">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `conv.ovf.u1.un` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1479">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u1.un` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1480">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1480">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1481">Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels zu <see langword="unsigned int16" /> und erweitert ihn auf <see langword="int32" />eine <see cref="T:System.OverflowException" /> bei einem Überlauf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1481">Converts the signed value on top of the evaluation stack to <see langword="unsigned int16" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1482">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1482">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1483">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1483">Format</span></span>|<span data-ttu-id="5c934-1484">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1484">Assembly Format</span></span>|<span data-ttu-id="5c934-1485">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1485">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1486">B6</span><span class="sxs-lookup"><span data-stu-id="5c934-1486">B6</span></span>|<span data-ttu-id="5c934-1487">conv.ovf. u2</span><span class="sxs-lookup"><span data-stu-id="5c934-1487">conv.ovf.u2</span></span>|<span data-ttu-id="5c934-1488">Konvertieren in ein `unsigned int16` (auf dem Stapel als `int32`) und löst eine Ausnahme bei einem Überlauf.</span><span class="sxs-lookup"><span data-stu-id="5c934-1488">Convert to an `unsigned int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5c934-1489">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1489">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1490">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1490">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1491">`value` per pop ausgelesen wird aus dem Stapel und die Konvertierung wird der Vorgang wird versucht.</span><span class="sxs-lookup"><span data-stu-id="5c934-1491">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5c934-1492">Wenn ein Überlauf auftritt, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1492">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5c934-1493">Wenn die Konvertierung erfolgreich ist, wird der resultierende Wert auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1493">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1494">Die `conv.ovf.u2` Opcode konvertiert die `value` oberster Position des Stapels in den Typ in den Opcode, und setzt konvertierten Wert oben im Stapel angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1494">The `conv.ovf.u2` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5c934-1495">Wenn der Wert zu groß oder zu klein, um durch den Typ des dargestellt ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1495">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5c934-1496">Konvertierungen von Gleitkommazahlen in ganzzahlige Werte werden die Zahlen in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1496">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5c934-1497">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` werden beim Laden auf dem Auswertungsstapel ab (es sei denn, `conv.ovf.i` oder `conv.ovf.u` verwendet werden, wird in diesem Fall ist auch das Ergebnis `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1497">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5c934-1498"><xref:System.OverflowException> wird ausgelöst, wenn das Ergebnis nicht im Ergebnistyp dargestellt werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1498"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5c934-1499">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `conv.ovf.u2` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1499">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u2` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1500">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1500">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U2_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U2_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U2_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U2_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U2_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U2_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1501">Konvertiert den Wert ohne Vorzeichen an oberster Position des Auswertungsstapels in <see langword="unsigned int16" /> und erweitert ihn auf <see langword="int32" />eine <see cref="T:System.OverflowException" /> bei einem Überlauf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1501">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int16" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1502">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1502">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1503">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1503">Format</span></span>|<span data-ttu-id="5c934-1504">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1504">Assembly Format</span></span>|<span data-ttu-id="5c934-1505">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1505">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1506">87</span><span class="sxs-lookup"><span data-stu-id="5c934-1506">87</span></span>|<span data-ttu-id="5c934-1507">conv.ovf.u2.un</span><span class="sxs-lookup"><span data-stu-id="5c934-1507">conv.ovf.u2.un</span></span>|<span data-ttu-id="5c934-1508">Konvertiert einen Wert ohne Vorzeichen zu einem `unsigned int16` (auf dem Stapel als `int32`) und löst eine Ausnahme bei einem Überlauf.</span><span class="sxs-lookup"><span data-stu-id="5c934-1508">Converts an unsigned value to an `unsigned int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5c934-1509">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1509">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1510">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1510">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1511">`value` per pop ausgelesen wird aus dem Stapel und die Konvertierung wird der Vorgang wird versucht.</span><span class="sxs-lookup"><span data-stu-id="5c934-1511">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5c934-1512">Wenn ein Überlauf auftritt, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1512">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5c934-1513">Wenn die Konvertierung erfolgreich ist, wird der resultierende Wert auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1513">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1514">Die `conv.ovf.u2.un` Opcode konvertiert die `value` oberster Position des Stapels in den Typ in den Opcode, und setzt konvertierten Wert oben im Stapel angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1514">The `conv.ovf.u2.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5c934-1515">Wenn der Wert zu groß oder zu klein, um durch den Typ des dargestellt ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1515">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5c934-1516">Konvertierungen von Gleitkommazahlen in ganzzahlige Werte werden die Zahlen in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1516">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5c934-1517">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` werden beim Laden auf dem Auswertungsstapel ab (es sei denn, `conv.ovf.i` oder `conv.ovf.u` verwendet werden, wird in diesem Fall ist auch das Ergebnis `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1517">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5c934-1518"><xref:System.OverflowException> wird ausgelöst, wenn das Ergebnis nicht im Ergebnistyp dargestellt werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1518"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5c934-1519">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `conv.ovf.u2.un` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1519">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u2.un` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1520">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1520">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1521">Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels zu <see langword="unsigned int32" />eine <see cref="T:System.OverflowException" /> bei einem Überlauf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1521">Converts the signed value on top of the evaluation stack to <see langword="unsigned int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1522">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1522">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1523">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1523">Format</span></span>|<span data-ttu-id="5c934-1524">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1524">Assembly Format</span></span>|<span data-ttu-id="5c934-1525">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1525">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1526">B8</span><span class="sxs-lookup"><span data-stu-id="5c934-1526">B8</span></span>|<span data-ttu-id="5c934-1527">U4</span><span class="sxs-lookup"><span data-stu-id="5c934-1527">conv.ovf.u4</span></span>|<span data-ttu-id="5c934-1528">Konvertieren in ein `unsigned int32` (auf dem Stapel als `int32`) und löst eine Ausnahme bei einem Überlauf.</span><span class="sxs-lookup"><span data-stu-id="5c934-1528">Convert to an `unsigned int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5c934-1529">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1529">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1530">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1530">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1531">`value` per pop ausgelesen wird aus dem Stapel und die Konvertierung wird der Vorgang wird versucht.</span><span class="sxs-lookup"><span data-stu-id="5c934-1531">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5c934-1532">Wenn ein Überlauf auftritt, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1532">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5c934-1533">Wenn die Konvertierung erfolgreich ist, wird der resultierende Wert auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1533">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1534">Die `conv.ovf.u4` Opcode konvertiert die `value` oberster Position des Stapels in den Typ in den Opcode, und setzt konvertierten Wert oben im Stapel angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1534">The `conv.ovf.u4` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5c934-1535">Wenn der Wert zu groß oder zu klein, um durch den Typ des dargestellt ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1535">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5c934-1536">Konvertierungen von Gleitkommazahlen in ganzzahlige Werte werden die Zahlen in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1536">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5c934-1537">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` werden beim Laden auf dem Auswertungsstapel ab (es sei denn, `conv.ovf.i` oder `conv.ovf.u` verwendet werden, wird in diesem Fall ist auch das Ergebnis `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1537">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5c934-1538"><xref:System.OverflowException> wird ausgelöst, wenn das Ergebnis nicht im Ergebnistyp dargestellt werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1538"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5c934-1539">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `conv.ovf.u4` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1539">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u4` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1540">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1540">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U4_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U4_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U4_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U4_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U4_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U4_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1541">Konvertiert den Wert ohne Vorzeichen an oberster Position des Auswertungsstapels in <see langword="unsigned int32" />eine <see cref="T:System.OverflowException" /> bei einem Überlauf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1541">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1542">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1542">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1543">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1543">Format</span></span>|<span data-ttu-id="5c934-1544">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1544">Assembly Format</span></span>|<span data-ttu-id="5c934-1545">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1545">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1546">88</span><span class="sxs-lookup"><span data-stu-id="5c934-1546">88</span></span>|<span data-ttu-id="5c934-1547">conv.ovf.u4.un</span><span class="sxs-lookup"><span data-stu-id="5c934-1547">conv.ovf.u4.un</span></span>|<span data-ttu-id="5c934-1548">Konvertiert einen Wert ohne Vorzeichen zu einem `unsigned int32` (auf dem Stapel als `int32`) und löst eine Ausnahme bei einem Überlauf.</span><span class="sxs-lookup"><span data-stu-id="5c934-1548">Converts an unsigned value to an `unsigned int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5c934-1549">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1549">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1550">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1550">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1551">`value` per pop ausgelesen wird aus dem Stapel und die Konvertierung wird der Vorgang wird versucht.</span><span class="sxs-lookup"><span data-stu-id="5c934-1551">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5c934-1552">Wenn ein Überlauf auftritt, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1552">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5c934-1553">Wenn die Konvertierung erfolgreich ist, wird der resultierende Wert auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1553">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1554">Die `conv.ovf.u4.un` Opcode konvertiert die `value` oberster Position des Stapels in den Typ in den Opcode, und setzt konvertierten Wert oben im Stapel angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1554">The `conv.ovf.u4.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5c934-1555">Wenn der Wert zu groß oder zu klein, um durch den Typ des dargestellt ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1555">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5c934-1556">Konvertierungen von Gleitkommazahlen in ganzzahlige Werte werden die Zahlen in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1556">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5c934-1557">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` werden beim Laden auf dem Auswertungsstapel ab (es sei denn, `conv.ovf.i` oder `conv.ovf.u` verwendet werden, wird in diesem Fall ist auch das Ergebnis `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1557">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5c934-1558"><xref:System.OverflowException> wird ausgelöst, wenn das Ergebnis nicht im Ergebnistyp dargestellt werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1558"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5c934-1559">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `conv.ovf.u4.un` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1559">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u4.un` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1560">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1560">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1561">Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels zu <see langword="unsigned int64" />eine <see cref="T:System.OverflowException" /> bei einem Überlauf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1561">Converts the signed value on top of the evaluation stack to <see langword="unsigned int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1562">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1562">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1563">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1563">Format</span></span>|<span data-ttu-id="5c934-1564">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1564">Assembly Format</span></span>|<span data-ttu-id="5c934-1565">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1565">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1566">BA</span><span class="sxs-lookup"><span data-stu-id="5c934-1566">BA</span></span>|<span data-ttu-id="5c934-1567">U8</span><span class="sxs-lookup"><span data-stu-id="5c934-1567">conv.ovf.u8</span></span>|<span data-ttu-id="5c934-1568">Konvertieren in ein `unsigned int64` (auf dem Stapel als `int64`) und löst eine Ausnahme bei einem Überlauf.</span><span class="sxs-lookup"><span data-stu-id="5c934-1568">Convert to an `unsigned int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5c934-1569">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1569">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1570">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1570">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1571">`value` per pop ausgelesen wird aus dem Stapel und die Konvertierung wird der Vorgang wird versucht.</span><span class="sxs-lookup"><span data-stu-id="5c934-1571">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5c934-1572">Wenn ein Überlauf auftritt, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1572">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5c934-1573">Wenn die Konvertierung erfolgreich ist, wird der resultierende Wert auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1573">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1574">Die `conv.ovf.u8` Opcode konvertiert die `value` oberster Position des Stapels in den Typ in den Opcode, und setzt konvertierten Wert oben im Stapel angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1574">The `conv.ovf.u8` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5c934-1575">Wenn der Wert zu groß oder zu klein, um durch den Typ des dargestellt ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1575">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5c934-1576">Konvertierungen von Gleitkommazahlen in ganzzahlige Werte werden die Zahlen in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1576">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5c934-1577">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` werden beim Laden auf dem Auswertungsstapel ab (es sei denn, `conv.ovf.i` oder `conv.ovf.u` verwendet werden, wird in diesem Fall ist auch das Ergebnis `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1577">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5c934-1578"><xref:System.OverflowException> wird ausgelöst, wenn das Ergebnis nicht im Ergebnistyp dargestellt werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1578"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5c934-1579">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `conv.ovf.u8` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1579">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u8` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1580">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1580">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U8_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U8_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U8_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U8_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U8_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U8_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1581">Konvertiert den Wert ohne Vorzeichen an oberster Position des Auswertungsstapels in <see langword="unsigned int64" />eine <see cref="T:System.OverflowException" /> bei einem Überlauf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1581">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1582">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1582">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1583">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1583">Format</span></span>|<span data-ttu-id="5c934-1584">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1584">Assembly Format</span></span>|<span data-ttu-id="5c934-1585">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1585">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1586">89</span><span class="sxs-lookup"><span data-stu-id="5c934-1586">89</span></span>|<span data-ttu-id="5c934-1587">conv.ovf.u8.un</span><span class="sxs-lookup"><span data-stu-id="5c934-1587">conv.ovf.u8.un</span></span>|<span data-ttu-id="5c934-1588">Konvertiert einen Wert ohne Vorzeichen zu einem `unsigned int64` (auf dem Stapel als `int64`) und löst eine Ausnahme bei einem Überlauf.</span><span class="sxs-lookup"><span data-stu-id="5c934-1588">Converts an unsigned value to an `unsigned int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5c934-1589">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1589">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1590">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1590">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1591">`value` per pop ausgelesen wird aus dem Stapel und die Konvertierung wird der Vorgang wird versucht.</span><span class="sxs-lookup"><span data-stu-id="5c934-1591">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5c934-1592">Wenn ein Überlauf auftritt, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1592">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5c934-1593">Wenn die Konvertierung erfolgreich ist, wird der resultierende Wert auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1593">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1594">Die `conv.ovf.u8.un` Opcode konvertiert die `value` oberster Position des Stapels in den Typ in den Opcode, und setzt konvertierten Wert oben im Stapel angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1594">The `conv.ovf.u8.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5c934-1595">Wenn der Wert zu groß oder zu klein, um durch den Typ des dargestellt ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5c934-1595">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5c934-1596">Konvertierungen von Gleitkommazahlen in ganzzahlige Werte werden die Zahlen in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1596">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5c934-1597">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` werden beim Laden auf dem Auswertungsstapel ab (es sei denn, `conv.ovf.i` oder `conv.ovf.u` verwendet werden, wird in diesem Fall ist auch das Ergebnis `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1597">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5c934-1598"><xref:System.OverflowException> wird ausgelöst, wenn das Ergebnis nicht im Ergebnistyp dargestellt werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1598"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5c934-1599">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `conv.ovf.u8.un` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1599">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u8.un` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1600">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1600">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_R_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_R_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1601">Konvertiert den Ganzzahlwert ohne Vorzeichen an oberster Position des Auswertungsstapels in <see langword="float32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1601">Converts the unsigned integer value on top of the evaluation stack to <see langword="float32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1602">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1602">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1603">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1603">Format</span></span>|<span data-ttu-id="5c934-1604">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1604">Assembly Format</span></span>|<span data-ttu-id="5c934-1605">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1605">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1606">76</span><span class="sxs-lookup"><span data-stu-id="5c934-1606">76</span></span>|<span data-ttu-id="5c934-1607">conv.r.un</span><span class="sxs-lookup"><span data-stu-id="5c934-1607">conv.r.un</span></span>|<span data-ttu-id="5c934-1608">Convert-Ganzzahl ohne Vorzeichen in Gleitkommazahlen mithilfe von Push übertragen `F` auf dem Stapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-1608">Convert unsigned integer to floating-point, pushing `F` on stack.</span></span>|  
  
 <span data-ttu-id="5c934-1609">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1609">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1610">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1610">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1611">`value` per pop ausgelesen wird aus dem Stapel und die Konvertierung wird der Vorgang wird versucht.</span><span class="sxs-lookup"><span data-stu-id="5c934-1611">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="5c934-1612">Wenn die Konvertierung erfolgreich ist, wird der resultierende Wert auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1612">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1613">Die `conv.r.un` Opcode konvertiert die `value` oberster Position des Stapels in den Typ in den Opcode, und lässt konvertierten Wert oben im Stapel angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1613">The `conv.r.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="5c934-1614">Ganzzahlige Werte von weniger als 4 Bytes wurden erweitert, um `int32` werden beim Laden auf dem Auswertungsstapel ab (es sei denn, `conv.i` oder `conv.u` verwendet wird, in diesem Fall ist auch das Ergebnis `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1614">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="5c934-1615">Gleitkommawerte werden konvertiert, um die `F` Typ.</span><span class="sxs-lookup"><span data-stu-id="5c934-1615">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="5c934-1616">Konvertierung von Gleitkommazahlen in ganzzahlige Werte werden die Zahlen in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1616">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="5c934-1617">Bei der Konvertierung von einer `float64` auf eine `float32`, Genauigkeit unterbrochen werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1617">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="5c934-1618">Wenn `value` ist zu groß für eine `float32 (F)`, plus unendlich (Wenn `value` positiv ist) oder minus unendlich (Wenn `value` ist ein negativer Wert) wird zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1618">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="5c934-1619">Wenn Überlauf Konvertieren einer Ganzzahl-Typ in einen anderen auftritt, werden die höherwertigen Bits abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1619">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="5c934-1620">Wenn das Ergebnis kleiner als ein `int32`, der Wert ist, geben Sie den Slot signaturerweitert.</span><span class="sxs-lookup"><span data-stu-id="5c934-1620">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="5c934-1621">Wenn ein Überlauf tritt auf, Konvertieren von einem Gleitkommatyp in eine ganze Zahl die `result` zurückgegeben, ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1621">If overflow occurs converting a floating-point type to an integer the `result` returned is unspecified.</span></span> <span data-ttu-id="5c934-1622">Die `conv.r.un` Vorgang eine Ganzzahl vom Stapel akzeptiert, wird als ohne Vorzeichen interpretiert und ersetzt diese durch eine Gleitkommazahl, die ganze Zahl darstellt: entweder ein `float32`, wenn es sich um breit genug ist, um die ganze Zahl ohne Genauigkeitsverlust darstellen, oder andernfalls handelt eine `float64`.</span><span class="sxs-lookup"><span data-stu-id="5c934-1622">The `conv.r.un` operation takes an integer off the stack, interprets it as unsigned, and replaces it with a floating-point number to represent the integer: either a `float32`, if this is wide enough to represent the integer without loss of precision, or else a `float64`.</span></span>  
  
 <span data-ttu-id="5c934-1623">Ständig werden keine Ausnahmen ausgelöst, wenn Sie dieses Feld verwenden.</span><span class="sxs-lookup"><span data-stu-id="5c934-1623">No exceptions are ever thrown when using this field.</span></span>  
  
 <span data-ttu-id="5c934-1624">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `conv.r.un` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1624">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.r.un` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1625">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1625">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1626">Konvertiert den Wert an oberster Position des Auswertungsstapels in <see langword="float32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1626">Converts the value on top of the evaluation stack to <see langword="float32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1627">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1627">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1628">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1628">Format</span></span>|<span data-ttu-id="5c934-1629">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1629">Assembly Format</span></span>|<span data-ttu-id="5c934-1630">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1630">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1631">6B</span><span class="sxs-lookup"><span data-stu-id="5c934-1631">6B</span></span>|<span data-ttu-id="5c934-1632">R4</span><span class="sxs-lookup"><span data-stu-id="5c934-1632">conv.r4</span></span>|<span data-ttu-id="5c934-1633">Konvertieren in `float32`, Ablegevorgänge `F` auf dem Stapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-1633">Convert to `float32`, pushing `F` on stack.</span></span>|  
  
 <span data-ttu-id="5c934-1634">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1634">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1635">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1635">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1636">`value` per pop ausgelesen wird aus dem Stapel und die Konvertierung wird der Vorgang wird versucht.</span><span class="sxs-lookup"><span data-stu-id="5c934-1636">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="5c934-1637">Wenn die Konvertierung erfolgreich ist, wird der resultierende Wert auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1637">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1638">Die `conv.r4` Opcode konvertiert die `value` oberster Position des Stapels in den Typ in den Opcode, und lässt konvertierten Wert oben im Stapel angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1638">The `conv.r4` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="5c934-1639">Ganzzahlige Werte von weniger als 4 Bytes wurden erweitert, um `int32` werden beim Laden auf dem Auswertungsstapel ab (es sei denn, `conv.i` oder `conv.u` verwendet wird, in diesem Fall ist auch das Ergebnis `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1639">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="5c934-1640">Gleitkommawerte werden konvertiert, um die `F` Typ.</span><span class="sxs-lookup"><span data-stu-id="5c934-1640">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="5c934-1641">Konvertierung von Gleitkommazahlen in ganzzahlige Werte werden die Zahlen in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1641">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="5c934-1642">Bei der Konvertierung von einer `float64` auf eine `float32`, Genauigkeit unterbrochen werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1642">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="5c934-1643">Wenn `value` ist zu groß für eine `float32 (F)`, plus unendlich (Wenn `value` positiv ist) oder minus unendlich (Wenn `value` ist ein negativer Wert) wird zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1643">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="5c934-1644">Wenn Überlauf Konvertieren einer Ganzzahl-Typ in einen anderen auftritt, werden die höherwertigen Bits abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1644">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="5c934-1645">Wenn das Ergebnis kleiner als ein `int32`, der Wert ist, geben Sie den Slot signaturerweitert.</span><span class="sxs-lookup"><span data-stu-id="5c934-1645">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="5c934-1646">Wenn ein Überlauf auftritt, ist die Konvertierung von eines Gleitkommatyps in eine ganze Zahl, die den Rückgabewert nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1646">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="5c934-1647">Ständig werden keine Ausnahmen ausgelöst, wenn Sie dieses Feld verwenden.</span><span class="sxs-lookup"><span data-stu-id="5c934-1647">No exceptions are ever thrown when using this field.</span></span>  
  
 <span data-ttu-id="5c934-1648">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `conv.r4` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1648">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.r4` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1649">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1649">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1650">Konvertiert den Wert an oberster Position des Auswertungsstapels in <see langword="float64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1650">Converts the value on top of the evaluation stack to <see langword="float64" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1651">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1651">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1652">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1652">Format</span></span>|<span data-ttu-id="5c934-1653">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1653">Assembly Format</span></span>|<span data-ttu-id="5c934-1654">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1654">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1655">6C</span><span class="sxs-lookup"><span data-stu-id="5c934-1655">6C</span></span>|<span data-ttu-id="5c934-1656">conv. r8</span><span class="sxs-lookup"><span data-stu-id="5c934-1656">conv.r8</span></span>|<span data-ttu-id="5c934-1657">Konvertieren in `float64`, Ablegevorgänge `F` auf dem Stapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-1657">Convert to `float64`, pushing `F` on stack.</span></span>|  
  
 <span data-ttu-id="5c934-1658">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1658">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1659">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1659">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1660">`value` per pop ausgelesen wird aus dem Stapel und die Konvertierung wird der Vorgang wird versucht.</span><span class="sxs-lookup"><span data-stu-id="5c934-1660">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="5c934-1661">Wenn die Konvertierung erfolgreich ist, wird der resultierende Wert auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1661">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1662">Die `conv.r8` Opcode konvertiert die `value` oberster Position des Stapels in den Typ in den Opcode, und lässt konvertierten Wert oben im Stapel angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1662">The `conv.r8` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="5c934-1663">Ganzzahlige Werte von weniger als 4 Bytes wurden erweitert, um `int32` werden beim Laden auf dem Auswertungsstapel ab (es sei denn, `conv.i` oder `conv.u` verwendet wird, in diesem Fall ist auch das Ergebnis `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1663">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="5c934-1664">Gleitkommawerte werden konvertiert, um die `F` Typ.</span><span class="sxs-lookup"><span data-stu-id="5c934-1664">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="5c934-1665">Konvertierung von Gleitkommazahlen in ganzzahlige Werte werden die Zahlen in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1665">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="5c934-1666">Bei der Konvertierung von einer `float64` auf eine `float32`, Genauigkeit unterbrochen werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1666">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="5c934-1667">Wenn `value` ist zu groß für eine `float32 (F)`, plus unendlich (Wenn `value` positiv ist) oder minus unendlich (Wenn `value` ist ein negativer Wert) wird zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1667">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="5c934-1668">Wenn Überlauf Konvertieren einer Ganzzahl-Typ in einen anderen auftritt, werden die höherwertigen Bits abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1668">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="5c934-1669">Wenn das Ergebnis kleiner als ein `int32`, der Wert ist, geben Sie den Slot signaturerweitert.</span><span class="sxs-lookup"><span data-stu-id="5c934-1669">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="5c934-1670">Wenn ein Überlauf auftritt, ist die Konvertierung von eines Gleitkommatyps in eine ganze Zahl, die den Rückgabewert nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1670">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="5c934-1671">Ständig werden keine Ausnahmen ausgelöst, wenn Sie dieses Feld verwenden.</span><span class="sxs-lookup"><span data-stu-id="5c934-1671">No exceptions are ever thrown when using this field.</span></span>  
  
 <span data-ttu-id="5c934-1672">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `conv.r8` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1672">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.r8` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1673">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1673">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1674">Konvertiert den Wert an oberster Position des Auswertungsstapels in <see langword="unsigned native int" />, und erweitert ihn auf <see langword="native int" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1674">Converts the value on top of the evaluation stack to <see langword="unsigned native int" />, and extends it to <see langword="native int" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1675">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1675">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1676">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1676">Format</span></span>|<span data-ttu-id="5c934-1677">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1677">Assembly Format</span></span>|<span data-ttu-id="5c934-1678">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1678">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1679">E0</span><span class="sxs-lookup"><span data-stu-id="5c934-1679">E0</span></span>|<span data-ttu-id="5c934-1680">conv.u</span><span class="sxs-lookup"><span data-stu-id="5c934-1680">conv.u</span></span>|<span data-ttu-id="5c934-1681">Konvertieren in `unsigned native int`, Ablegevorgänge `native int` auf dem Stapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-1681">Convert to `unsigned native int`, pushing `native int` on stack.</span></span>|  
  
 <span data-ttu-id="5c934-1682">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1682">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1683">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1683">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1684">`value` per pop ausgelesen wird aus dem Stapel und die Konvertierung wird der Vorgang wird versucht.</span><span class="sxs-lookup"><span data-stu-id="5c934-1684">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="5c934-1685">Wenn die Konvertierung erfolgreich ist, wird der resultierende Wert auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1685">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1686">Die `conv.u` Opcode konvertiert die `value` oberster Position des Stapels in den Typ in den Opcode, und lässt konvertierten Wert oben im Stapel angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1686">The `conv.u` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="5c934-1687">Ganzzahlige Werte von weniger als 4 Bytes wurden erweitert, um `int32` werden beim Laden auf dem Auswertungsstapel ab (es sei denn, `conv.i` oder `conv.u` verwendet wird, in diesem Fall ist auch das Ergebnis `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1687">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="5c934-1688">Gleitkommawerte werden konvertiert, um die `F` Typ.</span><span class="sxs-lookup"><span data-stu-id="5c934-1688">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="5c934-1689">Konvertierung von Gleitkommazahlen in ganzzahlige Werte werden die Zahlen in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1689">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="5c934-1690">Bei der Konvertierung von einer `float64` auf eine `float32`, Genauigkeit unterbrochen werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1690">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="5c934-1691">Wenn `value` ist zu groß für eine `float32 (F)`, plus unendlich (Wenn `value` positiv ist) oder minus unendlich (Wenn `value` ist ein negativer Wert) wird zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1691">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="5c934-1692">Wenn Überlauf Konvertieren einer Ganzzahl-Typ in einen anderen auftritt, werden die höherwertigen Bits abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1692">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="5c934-1693">Wenn das Ergebnis kleiner als ein `int32`, der Wert ist, geben Sie den Slot signaturerweitert.</span><span class="sxs-lookup"><span data-stu-id="5c934-1693">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="5c934-1694">Wenn ein Überlauf auftritt, ist die Konvertierung von eines Gleitkommatyps in eine ganze Zahl, die den Rückgabewert nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1694">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="5c934-1695">Ständig werden keine Ausnahmen ausgelöst, wenn Sie dieses Feld verwenden.</span><span class="sxs-lookup"><span data-stu-id="5c934-1695">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="5c934-1696">Finden Sie unter <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> und <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> entsprechende Anweisungen, die eine Ausnahme auslöst, wenn der Ergebnistyp den Ergebniswert nicht ordnungsgemäß darstellen kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1696">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="5c934-1697">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `conv.u` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1697">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1698">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1698">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1699">Konvertiert den Wert an oberster Position des Auswertungsstapels in <see langword="unsigned int8" />, und erweitert ihn auf <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1699">Converts the value on top of the evaluation stack to <see langword="unsigned int8" />, and extends it to <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1700">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1700">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1701">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1701">Format</span></span>|<span data-ttu-id="5c934-1702">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1702">Assembly Format</span></span>|<span data-ttu-id="5c934-1703">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1703">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1704">D2</span><span class="sxs-lookup"><span data-stu-id="5c934-1704">D2</span></span>|<span data-ttu-id="5c934-1705">conv. U1</span><span class="sxs-lookup"><span data-stu-id="5c934-1705">conv.u1</span></span>|<span data-ttu-id="5c934-1706">Konvertieren in `int8`, Ablegevorgänge `int32` auf dem Stapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-1706">Convert to `int8`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="5c934-1707">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1707">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1708">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1708">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1709">`value` per pop ausgelesen wird aus dem Stapel und die Konvertierung wird der Vorgang wird versucht.</span><span class="sxs-lookup"><span data-stu-id="5c934-1709">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="5c934-1710">Wenn die Konvertierung erfolgreich ist, wird der resultierende Wert auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1710">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1711">Die `conv.u1` Opcode konvertiert die `value` oberster Position des Stapels in den Typ in den Opcode, und lässt konvertierten Wert oben im Stapel angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1711">The `conv.u1` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="5c934-1712">Ganzzahlige Werte von weniger als 4 Bytes wurden erweitert, um `int32` werden beim Laden auf dem Auswertungsstapel ab (es sei denn, `conv.i` oder `conv.u` verwendet wird, in diesem Fall ist auch das Ergebnis `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1712">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="5c934-1713">Gleitkommawerte werden konvertiert, um die `F` Typ.</span><span class="sxs-lookup"><span data-stu-id="5c934-1713">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="5c934-1714">Konvertierung von Gleitkommazahlen in ganzzahlige Werte werden die Zahlen in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1714">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="5c934-1715">Bei der Konvertierung von einer `float64` auf eine `float32`, Genauigkeit unterbrochen werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1715">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="5c934-1716">Wenn `value` ist zu groß für eine `float32 (F)`, plus unendlich (Wenn `value` positiv ist) oder minus unendlich (Wenn `value` ist ein negativer Wert) wird zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1716">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="5c934-1717">Wenn Überlauf Konvertieren einer Ganzzahl-Typ in einen anderen auftritt, werden die höherwertigen Bits abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1717">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="5c934-1718">Wenn das Ergebnis kleiner als ein `int32`, der Wert ist, geben Sie den Slot signaturerweitert.</span><span class="sxs-lookup"><span data-stu-id="5c934-1718">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="5c934-1719">Wenn ein Überlauf auftritt, ist die Konvertierung von eines Gleitkommatyps in eine ganze Zahl, die den Rückgabewert nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1719">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="5c934-1720">Ständig werden keine Ausnahmen ausgelöst, wenn Sie dieses Feld verwenden.</span><span class="sxs-lookup"><span data-stu-id="5c934-1720">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="5c934-1721">Finden Sie unter <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> und <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> entsprechende Anweisungen, die eine Ausnahme auslöst, wenn der Ergebnistyp den Ergebniswert nicht ordnungsgemäß darstellen kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1721">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="5c934-1722">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `conv.u1` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1722">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u1` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1723">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1723">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1724">Konvertiert den Wert an oberster Position des Auswertungsstapels in <see langword="unsigned int16" />, und erweitert ihn auf <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1724">Converts the value on top of the evaluation stack to <see langword="unsigned int16" />, and extends it to <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1725">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1725">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1726">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1726">Format</span></span>|<span data-ttu-id="5c934-1727">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1727">Assembly Format</span></span>|<span data-ttu-id="5c934-1728">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1728">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1729">D1</span><span class="sxs-lookup"><span data-stu-id="5c934-1729">D1</span></span>|<span data-ttu-id="5c934-1730">conv. u2</span><span class="sxs-lookup"><span data-stu-id="5c934-1730">conv.u2</span></span>|<span data-ttu-id="5c934-1731">Konvertieren in `int16`, Ablegevorgänge `int32` auf dem Stapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-1731">Convert to `int16`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="5c934-1732">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1732">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1733">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1733">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1734">`value` per pop ausgelesen wird aus dem Stapel und die Konvertierung wird der Vorgang wird versucht.</span><span class="sxs-lookup"><span data-stu-id="5c934-1734">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="5c934-1735">Wenn die Konvertierung erfolgreich ist, wird der resultierende Wert auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1735">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1736">Die `conv.u2` Opcode konvertiert die `value` oberster Position des Stapels in den Typ in den Opcode, und lässt konvertierten Wert oben im Stapel angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1736">The `conv.u2` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="5c934-1737">Ganzzahlige Werte von weniger als 4 Bytes wurden erweitert, um `int32` werden beim Laden auf dem Auswertungsstapel ab (es sei denn, `conv.i` oder `conv.u` verwendet wird, in diesem Fall ist auch das Ergebnis `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1737">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="5c934-1738">Gleitkommawerte werden konvertiert, um die `F` Typ.</span><span class="sxs-lookup"><span data-stu-id="5c934-1738">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="5c934-1739">Konvertierung von Gleitkommazahlen in ganzzahlige Werte werden die Zahlen in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1739">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="5c934-1740">Bei der Konvertierung von einer `float64` auf eine `float32`, Genauigkeit unterbrochen werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1740">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="5c934-1741">Wenn `value` ist zu groß für eine `float32 (F)`, plus unendlich (Wenn `value` positiv ist) oder minus unendlich (Wenn `value` ist ein negativer Wert) wird zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1741">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="5c934-1742">Wenn Überlauf Konvertieren einer Ganzzahl-Typ in einen anderen auftritt, werden die höherwertigen Bits abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1742">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="5c934-1743">Wenn das Ergebnis kleiner als ein `int32`, der Wert ist, geben Sie den Slot signaturerweitert.</span><span class="sxs-lookup"><span data-stu-id="5c934-1743">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="5c934-1744">Wenn ein Überlauf auftritt, ist die Konvertierung von eines Gleitkommatyps in eine ganze Zahl, die den Rückgabewert nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1744">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="5c934-1745">Ständig werden keine Ausnahmen ausgelöst, wenn Sie dieses Feld verwenden.</span><span class="sxs-lookup"><span data-stu-id="5c934-1745">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="5c934-1746">Finden Sie unter <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> und <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> entsprechende Anweisungen, die eine Ausnahme auslöst, wenn der Ergebnistyp den Ergebniswert nicht ordnungsgemäß darstellen kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1746">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="5c934-1747">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `conv.u2` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1747">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u2` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1748">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1748">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1749">Konvertiert den Wert an oberster Position des Auswertungsstapels in <see langword="unsigned int32" />, und erweitert ihn auf <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1749">Converts the value on top of the evaluation stack to <see langword="unsigned int32" />, and extends it to <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1750">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1750">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1751">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1751">Format</span></span>|<span data-ttu-id="5c934-1752">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1752">Assembly Format</span></span>|<span data-ttu-id="5c934-1753">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1753">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1754">6D</span><span class="sxs-lookup"><span data-stu-id="5c934-1754">6D</span></span>|<span data-ttu-id="5c934-1755">U4</span><span class="sxs-lookup"><span data-stu-id="5c934-1755">conv.u4</span></span>|<span data-ttu-id="5c934-1756">Konvertieren in `unsigned int32`, Ablegevorgänge `int32` auf dem Stapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-1756">Convert to `unsigned int32`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="5c934-1757">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1757">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1758">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1758">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1759">`value` per pop ausgelesen wird aus dem Stapel und die Konvertierung wird der Vorgang wird versucht.</span><span class="sxs-lookup"><span data-stu-id="5c934-1759">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="5c934-1760">Wenn die Konvertierung erfolgreich ist, wird der resultierende Wert auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1760">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1761">Die `conv.u4` Opcode konvertiert die `value` oberster Position des Stapels in den Typ in den Opcode, und lässt konvertierten Wert oben im Stapel angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1761">The `conv.u4` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="5c934-1762">Ganzzahlige Werte von weniger als 4 Bytes wurden erweitert, um `int32` werden beim Laden auf dem Auswertungsstapel ab (es sei denn, `conv.i` oder `conv.u` verwendet wird, in diesem Fall ist auch das Ergebnis `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1762">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="5c934-1763">Gleitkommawerte werden konvertiert, um die `F` Typ.</span><span class="sxs-lookup"><span data-stu-id="5c934-1763">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="5c934-1764">Konvertierung von Gleitkommazahlen in ganzzahlige Werte werden die Zahlen in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1764">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="5c934-1765">Bei der Konvertierung von einer `float64` auf eine `float32`, Genauigkeit unterbrochen werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1765">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="5c934-1766">Wenn `value` ist zu groß für eine `float32 (F)`, plus unendlich (Wenn `value` positiv ist) oder minus unendlich (Wenn `value` ist ein negativer Wert) wird zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1766">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="5c934-1767">Wenn Überlauf Konvertieren einer Ganzzahl-Typ in einen anderen auftritt, werden die höherwertigen Bits abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1767">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="5c934-1768">Wenn das Ergebnis kleiner als ein `int32`, der Wert ist, geben Sie den Slot signaturerweitert.</span><span class="sxs-lookup"><span data-stu-id="5c934-1768">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="5c934-1769">Wenn ein Überlauf auftritt, ist die Konvertierung von eines Gleitkommatyps in eine ganze Zahl, die den Rückgabewert nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1769">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="5c934-1770">Ständig werden keine Ausnahmen ausgelöst, wenn Sie dieses Feld verwenden.</span><span class="sxs-lookup"><span data-stu-id="5c934-1770">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="5c934-1771">Finden Sie unter <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> und <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> entsprechende Anweisungen, die eine Ausnahme auslöst, wenn der Ergebnistyp den Ergebniswert nicht ordnungsgemäß darstellen kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1771">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="5c934-1772">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `conv.u4` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1772">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u4` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1773">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1773">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1774">Konvertiert den Wert an oberster Position des Auswertungsstapels in <see langword="unsigned int64" />, und erweitert ihn auf <see langword="int64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1774">Converts the value on top of the evaluation stack to <see langword="unsigned int64" />, and extends it to <see langword="int64" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1775">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1775">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1776">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1776">Format</span></span>|<span data-ttu-id="5c934-1777">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1777">Assembly Format</span></span>|<span data-ttu-id="5c934-1778">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1778">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1779">6E</span><span class="sxs-lookup"><span data-stu-id="5c934-1779">6E</span></span>|<span data-ttu-id="5c934-1780">U8</span><span class="sxs-lookup"><span data-stu-id="5c934-1780">conv.u8</span></span>|<span data-ttu-id="5c934-1781">Konvertieren in `int64`, Ablegevorgänge `int64` auf dem Stapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-1781">Convert to `int64`, pushing `int64` on stack.</span></span>|  
  
 <span data-ttu-id="5c934-1782">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1782">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1783">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1783">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1784">`value` per pop ausgelesen wird aus dem Stapel und die Konvertierung wird der Vorgang wird versucht.</span><span class="sxs-lookup"><span data-stu-id="5c934-1784">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="5c934-1785">Wenn die Konvertierung erfolgreich ist, wird der resultierende Wert auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1785">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1786">Die `conv.u8` Opcode konvertiert die `value` oberster Position des Stapels in den Typ in den Opcode, und lässt konvertierten Wert oben im Stapel angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1786">The `conv.u8` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="5c934-1787">Ganzzahlige Werte von weniger als 4 Bytes wurden erweitert, um `int32` werden beim Laden auf dem Auswertungsstapel ab (es sei denn, `conv.i` oder `conv.u` verwendet wird, in diesem Fall ist auch das Ergebnis `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1787">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="5c934-1788">Gleitkommawerte werden konvertiert, um die `F` Typ.</span><span class="sxs-lookup"><span data-stu-id="5c934-1788">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="5c934-1789">Konvertierung von Gleitkommazahlen in ganzzahlige Werte werden die Zahlen in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1789">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="5c934-1790">Bei der Konvertierung von einer `float64` auf eine `float32`, Genauigkeit unterbrochen werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1790">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="5c934-1791">Wenn `value` ist zu groß für eine `float32 (F)`, plus unendlich (Wenn `value` positiv ist) oder minus unendlich (Wenn `value` ist ein negativer Wert) wird zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1791">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="5c934-1792">Wenn Überlauf Konvertieren einer Ganzzahl-Typ in einen anderen auftritt, werden die höherwertigen Bits abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1792">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="5c934-1793">Wenn das Ergebnis kleiner als ein `int32`, der Wert ist, geben Sie den Slot signaturerweitert.</span><span class="sxs-lookup"><span data-stu-id="5c934-1793">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="5c934-1794">Wenn ein Überlauf auftritt, ist die Konvertierung von eines Gleitkommatyps in eine ganze Zahl, die den Rückgabewert nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1794">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="5c934-1795">Ständig werden keine Ausnahmen ausgelöst, wenn Sie dieses Feld verwenden.</span><span class="sxs-lookup"><span data-stu-id="5c934-1795">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="5c934-1796">Finden Sie unter <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> und <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> entsprechende Anweisungen, die eine Ausnahme auslöst, wenn der Ergebnistyp den Ergebniswert nicht ordnungsgemäß darstellen kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1796">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="5c934-1797">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `conv.u8` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1797">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u8` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1798">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1798">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cpblk">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cpblk;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cpblk" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cpblk" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cpblk As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cpblk;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cpblk : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cpblk" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1799">Kopiert eine angegebene Anzahl von Bytes von einer Quelladresse an eine Zieladresse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1799">Copies a specified number bytes from a source address to a destination address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1800">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1800">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1801">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1801">Format</span></span>|<span data-ttu-id="5c934-1802">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1802">Assembly Format</span></span>|<span data-ttu-id="5c934-1803">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1803">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1804">FE 17</span><span class="sxs-lookup"><span data-stu-id="5c934-1804">FE 17</span></span>|<span data-ttu-id="5c934-1805">cpblk</span><span class="sxs-lookup"><span data-stu-id="5c934-1805">cpblk</span></span>|<span data-ttu-id="5c934-1806">Kopieren von Daten aus einem Speicherblock zu einem anderen.</span><span class="sxs-lookup"><span data-stu-id="5c934-1806">Copy data from one memory block to another.</span></span>|  
  
 <span data-ttu-id="5c934-1807">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1807">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1808">Die Zieladresse wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1808">The destination address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1809">Die Quelladresse wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1809">The source address is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-1810">Die Anzahl der zu kopierenden Bytes wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1810">The number of bytes to copy is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="5c934-1811">Die Anzahl der Bytes, die Quelladresse und die Zieladresse werden vom Stapel geholt. die angegebene Anzahl von Bytes, werden von der Quelladresse zur Zieladresse kopiert.</span><span class="sxs-lookup"><span data-stu-id="5c934-1811">The number of bytes, the source address, and the destination address are popped from the stack; the specified number of bytes are copied from the source address to the destination address.</span></span>  
  
 <span data-ttu-id="5c934-1812">Die `cpblk` -Anweisung kopiert eine Zahl (Typ `unsigned int32`) von Bytes, die von einer Quelladresse (des Typs `*`, `native int`, oder `&`) an eine Zieladresse (des Typs `*`, `native int`, oder `&`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1812">The `cpblk` instruction copies a number (type `unsigned int32`) of bytes from a source address (of type `*`, `native int`, or `&`) to a destination address (of type `*`, `native int`, or `&`).</span></span> <span data-ttu-id="5c934-1813">Das Verhalten der `cpblk` ist undefiniert, wenn die Quell- und Zielbereiche überlappen.</span><span class="sxs-lookup"><span data-stu-id="5c934-1813">The behavior of `cpblk` is unspecified if the source and destination areas overlap.</span></span>  
  
 <span data-ttu-id="5c934-1814">`cpblk` wird davon ausgegangen, dass sowohl die Quell- und Zieladresse an die Größe des Computers ausgerichtet sind.</span><span class="sxs-lookup"><span data-stu-id="5c934-1814">`cpblk` assumes that both the source and destination addressed are aligned to the natural size of the machine.</span></span> <span data-ttu-id="5c934-1815">Die `cpblk` Anweisung kann unmittelbar vorangestellt werden die `unaligned.<prefix>` Anweisung, um anzugeben, dass die Quelle oder das Ziel nicht ausgerichtete ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-1815">The `cpblk` instruction can be immediately preceded by the `unaligned.<prefix>` instruction to indicate that either the source or the destination is unaligned.</span></span>  
  
 <span data-ttu-id="5c934-1816">Den Betrieb der `cpblk` Anweisung kann geändert werden, einen unmittelbar vorangehenden <xref:System.Reflection.Emit.OpCodes.Volatile> oder <xref:System.Reflection.Emit.OpCodes.Unaligned> unmittelbar vorangestellt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-1816">The operation of the `cpblk` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="5c934-1817"><xref:System.NullReferenceException> kann ausgelöst werden, wenn eine ungültige Adresse erkannt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-1817"><xref:System.NullReferenceException> may be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="5c934-1818">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `cpblk` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1818">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cpblk` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1819">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1819">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cpobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cpobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cpobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cpobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cpobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cpobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cpobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cpobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1820">Kopiert der Werttyp, der an die Adresse eines Objekts gespeichert (Typ <see langword="&amp;" />, <see langword="*" /> oder <see langword="native int" />) an die Adresse des Zielobjekts (Typ <see langword="&amp;" />, <see langword="*" /> oder <see langword="native int" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1820">Copies the value type located at the address of an object (type <see langword="&amp;" />, <see langword="*" /> or <see langword="native int" />) to the address of the destination object (type <see langword="&amp;" />, <see langword="*" /> or <see langword="native int" />).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1821">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1821">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1822">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1822">Format</span></span>|<span data-ttu-id="5c934-1823">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1823">Assembly Format</span></span>|<span data-ttu-id="5c934-1824">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1824">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1825">70 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5c934-1825">70 < `T` ></span></span>|<span data-ttu-id="5c934-1826">cpobj `classTok`</span><span class="sxs-lookup"><span data-stu-id="5c934-1826">cpobj `classTok`</span></span>|<span data-ttu-id="5c934-1827">Geben Sie Kopien, die einen Wert von einem Quellobjekt zu einem Zielobjekt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1827">Copies a value type from a source object to a destination object.</span></span>|  
  
 <span data-ttu-id="5c934-1828">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1828">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1829">Der Zielobjektverweis wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1829">The destination object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1830">Der Objektverweis für die Quelle wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1830">The source object reference is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-1831">Die zwei Objektverweise werden vom Stapel geholt. kopiert der Werttyp an der Adresse des Quellobjekts an die Adresse des Zielobjekts.</span><span class="sxs-lookup"><span data-stu-id="5c934-1831">The two object references are popped from the stack; the value type at the address of the source object is copied to the address of the destination object.</span></span>  
  
 <span data-ttu-id="5c934-1832">Das Verhalten der `cpobj` ist nicht angegeben, ob die Quelle und Ziel-Objekt Verweise sind nicht auf Instanzen der durch das Klassentoken dargestellten Klasse `classTok` (eine `typeref` oder `typedef`), oder wenn `classTok` stellt keinen dar. ein ein Werttyp.</span><span class="sxs-lookup"><span data-stu-id="5c934-1832">The behavior of `cpobj` is unspecified if the source and destination object references are not pointers to instances of the class represented by the class token `classTok` (a `typeref` or `typedef`), or if `classTok` does not represent a value type.</span></span>  
  
 <span data-ttu-id="5c934-1833"><xref:System.NullReferenceException> kann ausgelöst werden, wenn eine ungültige Adresse erkannt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-1833"><xref:System.NullReferenceException> may be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="5c934-1834">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `cpobj` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1834">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cpobj` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1835">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="5c934-1835">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Div">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Div;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Div" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Div" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Div As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Div;" />
      <MemberSignature Language="F#" Value=" staticval mutable Div : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Div" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1836">Dividiert zwei Werte und legt das Ergebnis als Gleitkommawert (Typ <see langword="F" />) oder Quotient (Typ <see langword="int32" />) auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1836">Divides two values and pushes the result as a floating-point (type <see langword="F" />) or quotient (type <see langword="int32" />) onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1837">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1837">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1838">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1838">Format</span></span>|<span data-ttu-id="5c934-1839">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1839">Assembly Format</span></span>|<span data-ttu-id="5c934-1840">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1840">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1841">5B</span><span class="sxs-lookup"><span data-stu-id="5c934-1841">5B</span></span>|<span data-ttu-id="5c934-1842">div</span><span class="sxs-lookup"><span data-stu-id="5c934-1842">div</span></span>|<span data-ttu-id="5c934-1843">Dividiert zwei Werte und gibt Quotient oder Gleitkommaergebnis zurück.</span><span class="sxs-lookup"><span data-stu-id="5c934-1843">Divides two values to return a quotient or floating-point result.</span></span>|  
  
 <span data-ttu-id="5c934-1844">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1844">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1845">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1845">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1846">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1846">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-1847">`value2` und `value1` werden aus den Stapel geholt `value1` wird geteilt durch `value2`.</span><span class="sxs-lookup"><span data-stu-id="5c934-1847">`value2` and `value1` are popped from the stack; `value1` is divided by `value2`.</span></span>  
  
4.  <span data-ttu-id="5c934-1848">Das Ergebnis wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1848">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1849">`result` = `value1` Div value2 werden die folgenden Bedingungen erfüllt:</span><span class="sxs-lookup"><span data-stu-id="5c934-1849">`result` = `value1` div value2 satisfies the following conditions:</span></span>  
  
 <span data-ttu-id="5c934-1850">&#124; `result` &#124; = &#124; `value1` &#124; / &#124; `value2` &#124;, and:</span><span class="sxs-lookup"><span data-stu-id="5c934-1850">&#124; `result` &#124; = &#124; `value1` &#124; / &#124; `value2` &#124;, and:</span></span>  
  
 <span data-ttu-id="5c934-1851">Sign (`result`) = +, wenn anmelden (`value1`) = Vorzeichen (`value2`), "oder"-, wenn anmelden (`value1`) ~ = Vorzeichen (`value2`)</span><span class="sxs-lookup"><span data-stu-id="5c934-1851">sign(`result`) = +, if sign(`value1`) = sign(`value2`), or -, if sign(`value1`) ~= sign(`value2`)</span></span>  
  
 <span data-ttu-id="5c934-1852">Die `div` Anweisung berechnet das Ergebnis und per Pushvorgang auf den Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-1852">The `div` instruction computes the result and pushes it on the stack.</span></span>  
  
 <span data-ttu-id="5c934-1853">Division ganzer Zahlen abgeschnitten in Richtung 0 (null).</span><span class="sxs-lookup"><span data-stu-id="5c934-1853">Integer division truncates towards zero.</span></span>  
  
 <span data-ttu-id="5c934-1854">Division einer begrenzten Zahl durch 0 (null), erzeugt die ordnungsgemäß signierten unendlichen Wert.</span><span class="sxs-lookup"><span data-stu-id="5c934-1854">Division of a finite number by zero produces the correctly signed infinite value.</span></span>  
  
 <span data-ttu-id="5c934-1855">Division von 0 (null) von 0 (null) oder unendlich durch unendlich wird den Wert von NaN (Not-A-Number).</span><span class="sxs-lookup"><span data-stu-id="5c934-1855">Dividing zero by zero or infinity by infinity produces the NaN (Not-A-Number) value.</span></span> <span data-ttu-id="5c934-1856">Eine beliebige Anzahl geteilt durch unendlich erzeugt einen NULL-Wert.</span><span class="sxs-lookup"><span data-stu-id="5c934-1856">Any number divided by infinity will produce a zero value.</span></span>  
  
 <span data-ttu-id="5c934-1857">Ganzzahloperationen lösen <xref:System.ArithmeticException> Wenn das Ergebnis im Ergebnistyp dargestellt werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1857">Integral operations throw <xref:System.ArithmeticException> if the result cannot be represented in the result type.</span></span> <span data-ttu-id="5c934-1858">Dies kann passieren, wenn `value1` ist der Höchstwert von negativen und `value2` ist-1.</span><span class="sxs-lookup"><span data-stu-id="5c934-1858">This can happen if `value1` is the maximum negative value, and `value2` is -1.</span></span>  
  
 <span data-ttu-id="5c934-1859">Ganzzahloperationen lösen <xref:System.DivideByZeroException> Wenn `value2` ist 0 (null).</span><span class="sxs-lookup"><span data-stu-id="5c934-1859">Integral operations throw <xref:System.DivideByZeroException> if `value2` is zero.</span></span>  
  
 <span data-ttu-id="5c934-1860">Beachten Sie, dass auf Intel-basierten Plattformen eine <xref:System.OverflowException> wird ausgelöst, wenn (Minint div-1).</span><span class="sxs-lookup"><span data-stu-id="5c934-1860">Note that on Intel-based platforms an <xref:System.OverflowException> is thrown when computing (minint div -1).</span></span> <span data-ttu-id="5c934-1861">Gleitkommaoperationen lösen niemals Ausnahmen (sie erzeugt NaN oder unendlich stattdessen) aus.</span><span class="sxs-lookup"><span data-stu-id="5c934-1861">Floating-point operations never throw an exception (they produce NaNs or infinities instead).</span></span>  
  
 <span data-ttu-id="5c934-1862">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `div` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1862">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `div` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1863">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1863">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Div_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Div_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Div_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Div_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Div_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Div_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Div_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Div_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1864">Dividiert zwei Ganzzahlwerte ohne Vorzeichen und legt das Ergebnis (<see langword="int32" />) auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1864">Divides two unsigned integer values and pushes the result (<see langword="int32" />) onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1865">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1865">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1866">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1866">Format</span></span>|<span data-ttu-id="5c934-1867">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1867">Assembly Format</span></span>|<span data-ttu-id="5c934-1868">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1868">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1869">5C</span><span class="sxs-lookup"><span data-stu-id="5c934-1869">5C</span></span>|<span data-ttu-id="5c934-1870">div.un</span><span class="sxs-lookup"><span data-stu-id="5c934-1870">div.un</span></span>|<span data-ttu-id="5c934-1871">Dividiert zwei Werte ohne Vorzeichen und gibt einen Quotienten zurück.</span><span class="sxs-lookup"><span data-stu-id="5c934-1871">Divides two values, unsigned, returning a quotient.</span></span>|  
  
 <span data-ttu-id="5c934-1872">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1872">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1873">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1873">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1874">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1874">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-1875">`value2` und `value1` werden aus den Stapel geholt `value1` wird geteilt durch `value2`.</span><span class="sxs-lookup"><span data-stu-id="5c934-1875">`value2` and `value1` are popped from the stack; `value1` is divided by `value2`.</span></span>  
  
4.  <span data-ttu-id="5c934-1876">Das Ergebnis wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1876">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1877">Die `div.un` Anweisung berechnet `value1` geteilt durch `value2`, beide als ganze Zahlen ohne Vorzeichen und Push-Vorgänge die `result` auf dem Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-1877">The `div.un` instruction computes `value1` divided by `value2`, both taken as unsigned integers, and pushes the `result` on the stack.</span></span>  
  
 <span data-ttu-id="5c934-1878">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `div.un` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1878">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `div.un` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1879">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1879">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dup">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Dup;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Dup" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Dup" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Dup As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Dup;" />
      <MemberSignature Language="F#" Value=" staticval mutable Dup : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Dup" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1880">Kopiert den obersten Wert auf dem Auswertungsstapel und legt die Kopie dann auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1880">Copies the current topmost value on the evaluation stack, and then pushes the copy onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1881">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1881">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1882">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1882">Format</span></span>|<span data-ttu-id="5c934-1883">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1883">Assembly Format</span></span>|<span data-ttu-id="5c934-1884">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1884">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1885">25</span><span class="sxs-lookup"><span data-stu-id="5c934-1885">25</span></span>|<span data-ttu-id="5c934-1886">Dup</span><span class="sxs-lookup"><span data-stu-id="5c934-1886">dup</span></span>|<span data-ttu-id="5c934-1887">Den Wert des Stapels wird dupliziert.</span><span class="sxs-lookup"><span data-stu-id="5c934-1887">Duplicates the value on the top of the stack.</span></span>|  
  
 <span data-ttu-id="5c934-1888">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1888">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1889">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1889">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1890">`value` der Stapel für die Duplizierung per pop ausgelesen wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-1890">`value` is popped off of the stack for duplication.</span></span>  
  
3.  <span data-ttu-id="5c934-1891">`value` zurück wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1891">`value` is pushed back onto the stack.</span></span>  
  
4.  <span data-ttu-id="5c934-1892">Ein doppelter Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1892">A duplicate value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1893">Die `dup` Anweisung dupliziert das oberste Element des Stapels und bewirkt, dass zwei identische Werte auf sie.</span><span class="sxs-lookup"><span data-stu-id="5c934-1893">The `dup` instruction duplicates the top element of the stack, and leaves two identical values atop it.</span></span>  
  
 <span data-ttu-id="5c934-1894">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `dup` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1894">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `dup` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1895">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1895">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Endfilter">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Endfilter;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Endfilter" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Endfilter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Endfilter As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Endfilter;" />
      <MemberSignature Language="F#" Value=" staticval mutable Endfilter : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Endfilter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1896">Überträgt die Steuerung von der <see langword="filter" /> -Klausel einer Ausnahme zurück an den Ausnahmehandler für die Common Language Infrastructure (CLI).</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1896">Transfers control from the <see langword="filter" /> clause of an exception back to the Common Language Infrastructure (CLI) exception handler.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1897">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1897">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1898">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1898">Format</span></span>|<span data-ttu-id="5c934-1899">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1899">Assembly Format</span></span>|<span data-ttu-id="5c934-1900">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1900">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1901">FE 11</span><span class="sxs-lookup"><span data-stu-id="5c934-1901">FE 11</span></span>|<span data-ttu-id="5c934-1902">endfilter</span><span class="sxs-lookup"><span data-stu-id="5c934-1902">endfilter</span></span>|<span data-ttu-id="5c934-1903">End-Filter-Klausel der SEH-Ausnahmebehandlung.</span><span class="sxs-lookup"><span data-stu-id="5c934-1903">End filter clause of SEH exception handling.</span></span>|  
  
 <span data-ttu-id="5c934-1904">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1904">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1905">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1905">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1906">`value` wird vom Stapel geholt. `endfilter` ausgeführt wird und die Steuerung an den Ausnahmehandler übergeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1906">`value` is popped from the stack; `endfilter` is executed and control is transferred to the exception handler.</span></span>  
  
 <span data-ttu-id="5c934-1907">`Value` (die muss vom Typ `int32` und ist von einem bestimmten Satz von Werten) von der Filterklausel zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-1907">`Value` (which must be of type `int32` and is one of a specific set of values) is returned from the filter clause.</span></span> <span data-ttu-id="5c934-1908">Es sollte möglich:</span><span class="sxs-lookup"><span data-stu-id="5c934-1908">It should be one of:</span></span>  
  
-   <span data-ttu-id="5c934-1909">`exception_continue_search` (`value` = 0) Suche nach einem Ausnahmehandler fortgesetzt werden</span><span class="sxs-lookup"><span data-stu-id="5c934-1909">`exception_continue_search` (`value` = 0) to continue searching for an exception handler</span></span>  
  
-   <span data-ttu-id="5c934-1910">`exception_execute_handler` (`value` = 1) starten Sie die zweite Phase der Behandlung von Ausnahmen, in dem finally-Blöcke ausgeführt werden, bis diese Filter-Klausel der Handler zugeordnete, gefunden wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-1910">`exception_execute_handler` (`value` = 1) to start the second phase of exception handling where finally blocks are run until the handler associated with this filter clause is located.</span></span> <span data-ttu-id="5c934-1911">Bei der Ermittlung wird der Handler ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1911">Upon discovery, the handler is executed.</span></span>  
  
 <span data-ttu-id="5c934-1912">Andere ganzzahlige Werte werden führen zu undefinierten Ergebnissen.</span><span class="sxs-lookup"><span data-stu-id="5c934-1912">Other integer values will produce unspecified results.</span></span>  
  
 <span data-ttu-id="5c934-1913">Der Einstiegspunkt eines Filters, muss die erste Anweisung im Codeblock des Filters wie in der Methode die Ausnahmetabelle, dargestellt sein.</span><span class="sxs-lookup"><span data-stu-id="5c934-1913">The entry point of a filter, as shown in the method's exception table, must be the first instruction in the filter's code block.</span></span> <span data-ttu-id="5c934-1914">Die `endfilter` Anweisung muss die letzte Anweisung im Codeblock des Filters (daher gibt es nur möglich `endfilter` für alle einzelnen Filter-Block).</span><span class="sxs-lookup"><span data-stu-id="5c934-1914">The `endfilter` instruction must be the last instruction in the filter's code block (hence there can only be one `endfilter` for any single filter block).</span></span> <span data-ttu-id="5c934-1915">Nach dem Ausführen der `endfilter` -Anweisung, logisch ablaufsteuerung an der Befehlszeilenschnittstelle Ausnahmebehandlungsmechanismus.</span><span class="sxs-lookup"><span data-stu-id="5c934-1915">After executing the `endfilter` instruction, control logically flows back to the CLI exception handling mechanism.</span></span>  
  
 <span data-ttu-id="5c934-1916">Steuerelement kann nicht in einen Filterblock, mit Ausnahme von über den Ausnahmemechanismus übertragen werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-1916">Control cannot be transferred into a filter block except through the exception mechanism.</span></span> <span data-ttu-id="5c934-1917">Steuerelement kann nicht übertragen werden, aus eines Filterblocks außer durch die Verwendung von einem `throw` Anweisung oder durch Ausführen den letzten `endfilter` Anweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-1917">Control cannot be transferred out of a filter block except through the use of a `throw` instruction or by executing the final `endfilter` instruction.</span></span> <span data-ttu-id="5c934-1918">Kann nicht eingebettet werden eine `try` -Block in einem `filter` Block.</span><span class="sxs-lookup"><span data-stu-id="5c934-1918">You cannot embed a `try` block within a `filter` block.</span></span> <span data-ttu-id="5c934-1919">Wenn eine Ausnahme, in ausgelöst wird der `filter` -Block abgefangen wird und den Wert 0 (`exception_continue_search`) wird zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-1919">If an exception is thrown inside the `filter` block, it is intercepted and a value of 0 (`exception_continue_search`) is returned.</span></span>  
  
 <span data-ttu-id="5c934-1920">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `endfilter` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1920">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `endfilter` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1921">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1921">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Endfinally">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Endfinally;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Endfinally" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Endfinally" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Endfinally As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Endfinally;" />
      <MemberSignature Language="F#" Value=" staticval mutable Endfinally : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Endfinally" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1922">Überträgt die Steuerung von der <see langword="fault" /> oder <see langword="finally" /> -Klausel eines Ausnahmeblockes zurück an den Ausnahmehandler für die Common Language Infrastructure (CLI).</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1922">Transfers control from the <see langword="fault" /> or <see langword="finally" /> clause of an exception block back to the Common Language Infrastructure (CLI) exception handler.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1923">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1923">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1924">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1924">Format</span></span>|<span data-ttu-id="5c934-1925">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1925">Assembly Format</span></span>|<span data-ttu-id="5c934-1926">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1926">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1927">DOMÄNENCONTROLLER</span><span class="sxs-lookup"><span data-stu-id="5c934-1927">DC</span></span>|<span data-ttu-id="5c934-1928">endfinally</span><span class="sxs-lookup"><span data-stu-id="5c934-1928">endfinally</span></span><br /><br /> <span data-ttu-id="5c934-1929">Fault</span><span class="sxs-lookup"><span data-stu-id="5c934-1929">endfault</span></span>|<span data-ttu-id="5c934-1930">Beendet die `finally` oder `fault` -Klausel eines Ausnahmeblockes.</span><span class="sxs-lookup"><span data-stu-id="5c934-1930">Ends the `finally` or `fault` clause of an exception block.</span></span>|  
  
 <span data-ttu-id="5c934-1931">Es gibt kein Stapel Übergangsverhalten für diese Anweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-1931">There are no stack transition behaviors for this instruction.</span></span>  
  
 <span data-ttu-id="5c934-1932">`Endfinally` und `endfault` signalisiert das Ende der `finally` oder `fault` Klausel, sodass diese stapelentladung fortfahren kann, bis der Ausnahmehandler aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-1932">`Endfinally` and `endfault` signal the end of the `finally` or `fault` clause so that stack unwinding can continue until the exception handler is invoked.</span></span> <span data-ttu-id="5c934-1933">Die `endfinally` oder `endfault` -Anweisung überträgt die Steuerung wieder an den CLI-Ausnahmemechanismus.</span><span class="sxs-lookup"><span data-stu-id="5c934-1933">The `endfinally` or `endfault` instruction transfers control back to the CLI exception mechanism.</span></span> <span data-ttu-id="5c934-1934">Der Mechanismus und sucht nach der nächsten `finally` -Klausel in der Kette, wenn der geschützte Block mit eine verlassen-Anweisung beendet wurde.</span><span class="sxs-lookup"><span data-stu-id="5c934-1934">The mechanism then searches for the next `finally` clause in the chain if the protected block was exited with a leave instruction.</span></span> <span data-ttu-id="5c934-1935">Wenn der geschützte Block mit einer Ausnahme beendet wurde, sucht die CLI für die nächsten `finally` oder `fault`, oder geben Sie den Ausnahmehandler, der während der ersten Phase der Ausnahmebehandlung ausgewählt wurde.</span><span class="sxs-lookup"><span data-stu-id="5c934-1935">If the protected block was exited with an exception, the CLI will search for the next `finally` or `fault`, or enter the exception handler chosen during the first pass of exception handling.</span></span>  
  
 <span data-ttu-id="5c934-1936">Ein `endfinally` Anweisung scheinen nur lexikalisch innerhalb einer `finally` Block.</span><span class="sxs-lookup"><span data-stu-id="5c934-1936">An `endfinally` instruction might only appear lexically within a `finally` block.</span></span> <span data-ttu-id="5c934-1937">Im Gegensatz zu den `endfilter` -Anweisung, besteht keine Notwendigkeit, das Beenden des Blocks mit einer `endfinally` -Anweisung, und es können beliebig viele werden `endfinally` Anweisungen innerhalb des Blocks nach Bedarf.</span><span class="sxs-lookup"><span data-stu-id="5c934-1937">Unlike the `endfilter` instruction, there is no requirement that the block end with an `endfinally` instruction, and there can be as many `endfinally` instructions within the block as required.</span></span> <span data-ttu-id="5c934-1938">Diese gleichen Einschränkungen gelten für die `endfault` Anweisung und die `fault` Block.</span><span class="sxs-lookup"><span data-stu-id="5c934-1938">These same restrictions apply to the `endfault` instruction and the `fault` block.</span></span>  
  
 <span data-ttu-id="5c934-1939">Steuerelement kann nicht übertragen werden, in einem `finally` (oder `fault`)-block, außer über den Ausnahmemechanismus.</span><span class="sxs-lookup"><span data-stu-id="5c934-1939">Control cannot be transferred into a `finally` (or `fault`) block except through the exception mechanism.</span></span> <span data-ttu-id="5c934-1940">Steuerelement kann nicht übertragen werden, von einer `finally` (oder `fault`)-block, außer mithilfe des eine `throw` Anweisung oder in der Ausführung der `endfinally` (oder `endfault`) Anweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-1940">Control cannot be transferred out of a `finally` (or `fault`) block except through the use of a `throw` instruction or executing the `endfinally` (or `endfault`) instruction.</span></span> <span data-ttu-id="5c934-1941">Sie nicht "können Sie" von einer `finally` (oder `fault`) Block oder zum Ausführen einer <xref:System.Reflection.Emit.OpCodes.Ret> oder <xref:System.Reflection.Emit.OpCodes.Leave> Anweisung innerhalb einer `finally` (oder `fault`) Block.</span><span class="sxs-lookup"><span data-stu-id="5c934-1941">In particular, you cannot "fall out" of a `finally` (or `fault`) block or to execute a <xref:System.Reflection.Emit.OpCodes.Ret> or <xref:System.Reflection.Emit.OpCodes.Leave> instruction within a `finally` (or `fault`) block.</span></span>  
  
 <span data-ttu-id="5c934-1942">Beachten Sie, dass die `endfault` und `endfinally` Anweisungen sind Aliase – sie entsprechen den gleichen Opcode.</span><span class="sxs-lookup"><span data-stu-id="5c934-1942">Note that the `endfault` and `endfinally` instructions are aliases - they correspond to the same opcode.</span></span>  
  
 <span data-ttu-id="5c934-1943">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `endfinally` (`endfault`) Opcode, als auch die `ILGenerator` Methode <xref:System.Reflection.Emit.ILGenerator.EndExceptionBlock%2A>.</span><span class="sxs-lookup"><span data-stu-id="5c934-1943">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `endfinally` (`endfault`) opcode, as well as the `ILGenerator` method <xref:System.Reflection.Emit.ILGenerator.EndExceptionBlock%2A>.</span></span>  
  
-   <span data-ttu-id="5c934-1944">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1944">ILGenerator.Emit(OpCode)</span></span>  
  
-   <span data-ttu-id="5c934-1945">ILGenerator.EndExceptionBlock()</span><span class="sxs-lookup"><span data-stu-id="5c934-1945">ILGenerator.EndExceptionBlock()</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initblk">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Initblk;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Initblk" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Initblk" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Initblk As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Initblk;" />
      <MemberSignature Language="F#" Value=" staticval mutable Initblk : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Initblk" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1946">Initialisiert einen angegebenen Speicherblock an einer bestimmten Adresse mit einer angegebenen Größe und einem angegebenen Anfangswert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1946">Initializes a specified block of memory at a specific address to a given size and initial value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1947">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1947">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1948">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1948">Format</span></span>|<span data-ttu-id="5c934-1949">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1949">Assembly Format</span></span>|<span data-ttu-id="5c934-1950">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1950">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1951">FE 18</span><span class="sxs-lookup"><span data-stu-id="5c934-1951">FE 18</span></span>|<span data-ttu-id="5c934-1952">initblk</span><span class="sxs-lookup"><span data-stu-id="5c934-1952">initblk</span></span>|<span data-ttu-id="5c934-1953">Legen Sie jeden Standort in einen Speicherblock auf einen angegebenen Wert ein.</span><span class="sxs-lookup"><span data-stu-id="5c934-1953">Set each location in a block of memory to a given value.</span></span>|  
  
 <span data-ttu-id="5c934-1954">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1954">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1955">Die Startadresse ist auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1955">A starting address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1956">Ein Initialisierungswert ist auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1956">An initialization value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-1957">Die Anzahl der zu initialisierenden Bytes wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1957">The number of bytes to initialize is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="5c934-1958">Die Anzahl der Bytes, den Initialisierungswert und die Startadresse vom Stapel geholt werden, und die Initialisierung erfolgt gemäß der jeweiligen Werte.</span><span class="sxs-lookup"><span data-stu-id="5c934-1958">The number of bytes, the initialization value, and the starting address are popped from the stack, and the initialization is performed as per their values.</span></span>  
  
 <span data-ttu-id="5c934-1959">Die `initblk` -Anweisung legt die Anzahl (`unsigned int32`) von Bytes, beginnend ab der angegebenen Adresse (des Typs `native int`, `&`, oder `*`) auf den Initialisierungswert (des Typs `unsigned int8`).</span><span class="sxs-lookup"><span data-stu-id="5c934-1959">The `initblk` instruction sets the number (`unsigned int32`) of bytes starting at the specified address (of type `native int`, `&`, or `*`) to the initialization value (of type `unsigned int8`).</span></span> <span data-ttu-id="5c934-1960">`initblk` wird davon ausgegangen, dass die Startadresse an die Größe des Computers ausgerichtet ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-1960">`initblk` assumes that the starting address is aligned to the natural size of the machine.</span></span>  
  
 <span data-ttu-id="5c934-1961">Der Vorgang von der `initblk` Anweisungen können geändert werden, ein unmittelbar vor <xref:System.Reflection.Emit.OpCodes.Volatile> oder <xref:System.Reflection.Emit.OpCodes.Unaligned> unmittelbar vorangestellt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-1961">The operation of the `initblk` instructions can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="5c934-1962"><xref:System.NullReferenceException> kann ausgelöst werden, wenn eine ungültige Adresse erkannt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-1962"><xref:System.NullReferenceException> may be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="5c934-1963">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `initblk` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1963">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `initblk` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1964">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-1964">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Initobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Initobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Initobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Initobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Initobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Initobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Initobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1965">Initialisiert alle Felder des Werttyps an einer angegebenen Adresse mit einem NULL-Verweis oder dem Wert 0 des entsprechenden primitiven Typs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1965">Initializes each field of the value type at a specified address to a null reference or a 0 of the appropriate primitive type.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1966">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1966">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1967">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1967">Format</span></span>|<span data-ttu-id="5c934-1968">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1968">Assembly Format</span></span>|<span data-ttu-id="5c934-1969">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1969">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1970">FE 15 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5c934-1970">FE 15 < `T` ></span></span>|<span data-ttu-id="5c934-1971">`initobj` `typeTok`</span><span class="sxs-lookup"><span data-stu-id="5c934-1971">`initobj` `typeTok`</span></span>|<span data-ttu-id="5c934-1972">Initialisiert einen Werttyp an.</span><span class="sxs-lookup"><span data-stu-id="5c934-1972">Initializes a value type.</span></span>|  
  
 <span data-ttu-id="5c934-1973">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1973">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1974">Die Adresse des Werttyps initialisiert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1974">The address of the value type to initialize is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1975">Die Adresse wird vom Stapel geholt. der Werttyp an der angegebenen Adresse wird als Typ initialisiert `typeTok`.</span><span class="sxs-lookup"><span data-stu-id="5c934-1975">The address is popped from the stack; the value type at the specified address is initialized as type `typeTok`.</span></span>  
  
 <span data-ttu-id="5c934-1976">Die `initobj` Anweisung initialisiert alle Felder des Werttyps angegebene Adresse (des Typs `native int`, `&`, oder `*`) auf einen null-Verweis oder 0 des entsprechenden primitiven Typs.</span><span class="sxs-lookup"><span data-stu-id="5c934-1976">The `initobj` instruction initializes each field of the value type specified by the pushed address (of type `native int`, `&`, or `*`) to a null reference or a 0 of the appropriate primitive type.</span></span> <span data-ttu-id="5c934-1977">Nachdem diese Methode aufgerufen wurde, ist die Instanz kann eine Konstruktormethode aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-1977">After this method is called, the instance is ready for a constructor method to be called.</span></span> <span data-ttu-id="5c934-1978">Wenn `typeTok` ein Verweistyp handelt, wird diese Anweisung hat dieselbe Wirkung wie das `ldnull` gefolgt von `stind.ref`.</span><span class="sxs-lookup"><span data-stu-id="5c934-1978">If `typeTok` is a reference type, this instruction has the same effect as `ldnull` followed by `stind.ref`.</span></span>  
  
 <span data-ttu-id="5c934-1979">Im Gegensatz zu <xref:System.Reflection.Emit.OpCodes.Newobj>, `initobj` wird nicht die Konstruktormethode aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="5c934-1979">Unlike <xref:System.Reflection.Emit.OpCodes.Newobj>, `initobj` does not call the constructor method.</span></span> <span data-ttu-id="5c934-1980">`Initobj` wird zum Initialisieren von Werttypen vorgesehen, während er sich `newobj` dient zum Zuordnen und Initialisieren von Objekten.</span><span class="sxs-lookup"><span data-stu-id="5c934-1980">`Initobj` is intended for initializing value types, while `newobj` is used to allocate and initialize objects.</span></span>  
  
 <span data-ttu-id="5c934-1981">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `initobj` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-1981">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `initobj` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-1982">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="5c934-1982">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Isinst">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Isinst;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Isinst" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Isinst" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Isinst As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Isinst;" />
      <MemberSignature Language="F#" Value=" staticval mutable Isinst : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Isinst" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-1983">Testet, ob ein Objektverweis (Typ <see langword="O" />) ist eine Instanz einer bestimmten Klasse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-1983">Tests whether an object reference (type <see langword="O" />) is an instance of a particular class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-1984">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-1984">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-1985">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-1985">Format</span></span>|<span data-ttu-id="5c934-1986">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-1986">Assembly Format</span></span>|<span data-ttu-id="5c934-1987">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-1987">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-1988">75 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5c934-1988">75 < `T` ></span></span>|<span data-ttu-id="5c934-1989">isinst `class`</span><span class="sxs-lookup"><span data-stu-id="5c934-1989">isinst `class`</span></span>|<span data-ttu-id="5c934-1990">Testet, ob ein Objektverweis auf eine Instanz ist `class`, zurückgeben, entweder einen null-Verweis oder eine Instanz dieser Klasse oder Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="5c934-1990">Tests if an object reference is an instance of `class`, returning either a null reference or an instance of that class or interface.</span></span>|  
  
 <span data-ttu-id="5c934-1991">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-1991">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-1992">Es ist ein Objektverweis auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1992">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-1993">Der Objektverweis ist vom Stapel geholt und getestet werden, um festzustellen, ob es sich um eine Instanz der Klasse übergeben ist `class`.</span><span class="sxs-lookup"><span data-stu-id="5c934-1993">The object reference is popped from the stack and tested to see if it is an instance of the class passed in `class`.</span></span>  
  
3.  <span data-ttu-id="5c934-1994">Das Ergebnis (einen Objektverweis oder ein null-Verweis) wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1994">The result (either an object reference or a null reference) is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-1995">`Class` ist ein Metadatentoken, das die gewünschte Klasse angibt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1995">`Class` is a metadata token indicating the desired class.</span></span> <span data-ttu-id="5c934-1996">Wenn die Klasse des Objekts oben im Stapel implementiert `class` (Wenn `class` ist eine Schnittstelle) oder eine abgeleitete Klasse von `class` (Wenn `class` eine normale Klasse ist) und sie in den Typ umgewandelt wird `class` und das Ergebnis wird auf dem Stapel abgelegt. genau als ob <xref:System.Reflection.Emit.OpCodes.Castclass> war aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="5c934-1996">If the class of the object on the top of the stack implements `class` (if `class` is an interface) or is a derived class of `class` (if `class` is a regular class) then it is cast to type `class` and the result is pushed on the stack, exactly as though <xref:System.Reflection.Emit.OpCodes.Castclass> had been called.</span></span> <span data-ttu-id="5c934-1997">Andernfalls wird ein null-Verweis auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1997">Otherwise, a null reference is pushed on the stack.</span></span> <span data-ttu-id="5c934-1998">Wenn der Objektverweis selbst ein null-Verweis dann ist `isinst` ebenso einen null-Verweis zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="5c934-1998">If the object reference itself is a null reference, then `isinst` likewise returns a null reference.</span></span>  
  
 <span data-ttu-id="5c934-1999"><xref:System.TypeLoadException> wird ausgelöst, wenn die Klasse nicht gefunden werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-1999"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="5c934-2000">Dies wird in der Regel erkannt, wenn die Microsoft Intermediate Language (MSIL)-Anweisungen nicht zur Laufzeit, sondern in systemeigenen Code konvertiert werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-2000">This is typically detected when the Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="5c934-2001">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `isinst` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2001">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `isinst` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2002">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="5c934-2002">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Jmp">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Jmp;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Jmp" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Jmp" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Jmp As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Jmp;" />
      <MemberSignature Language="F#" Value=" staticval mutable Jmp : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Jmp" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2003">Beendet die aktuelle Methode und wechselt zur angegebenen Methode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2003">Exits current method and jumps to specified method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2004">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2004">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2005">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2005">Format</span></span>|<span data-ttu-id="5c934-2006">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2006">Assembly Format</span></span>|<span data-ttu-id="5c934-2007">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2007">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2008">27 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5c934-2008">27 < `T` ></span></span>|<span data-ttu-id="5c934-2009">"jmp" `method`</span><span class="sxs-lookup"><span data-stu-id="5c934-2009">jmp `method`</span></span>|<span data-ttu-id="5c934-2010">Beendet die aktuelle Methode aus, und fahren Sie mit der angegebenen Methode.</span><span class="sxs-lookup"><span data-stu-id="5c934-2010">Exit current method and jump to specified method.</span></span>|  
  
 <span data-ttu-id="5c934-2011">Es gibt kein Stapel Übergangsverhalten für diese Anweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-2011">There are no stack transition behaviors for this instruction.</span></span>  
  
 <span data-ttu-id="5c934-2012">Die `jmp` (springen)-Anweisung überträgt die Steuerung an die Methode angegeben werden, `method`, d.h. ein Metadatentoken für einen Methodenverweis.</span><span class="sxs-lookup"><span data-stu-id="5c934-2012">The `jmp` (jump) instruction transfers control to the method specified by `method`, which is a metadata token for a method reference.</span></span> <span data-ttu-id="5c934-2013">Die aktuellen Argumente werden an die Zielmethode übertragen.</span><span class="sxs-lookup"><span data-stu-id="5c934-2013">The current arguments are transferred to the destination method.</span></span>  
  
 <span data-ttu-id="5c934-2014">Auswertungsstapels muss leer sein, wenn diese Anweisung ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-2014">The evaluation stack must be empty when this instruction is executed.</span></span> <span data-ttu-id="5c934-2015">Die Aufrufkonvention, Anzahl und Typ der Argumente an die Zieladresse müssen mit der aktuellen Methode übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="5c934-2015">The calling convention, number and type of arguments at the destination address must match that of the current method.</span></span>  
  
 <span data-ttu-id="5c934-2016">Die `jmp` Anweisung kann nicht verwendet werden, um das Übertragen der Steuerung aus einer `try`, `filter`, `catch`, oder `finally` Block.</span><span class="sxs-lookup"><span data-stu-id="5c934-2016">The `jmp` instruction cannot be used to transferred control out of a `try`, `filter`, `catch`, or `finally` block.</span></span>  
  
 <span data-ttu-id="5c934-2017">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `jmp` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2017">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `jmp` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2018">ILGenerator.Emit (OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="5c934-2018">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2019">Lädt ein Argument, auf das ein angegebener Indexwert verweist, in den Stapel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2019">Loads an argument (referenced by a specified index value) onto the stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2020">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2020">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2021">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2021">Format</span></span>|<span data-ttu-id="5c934-2022">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2022">Assembly Format</span></span>|<span data-ttu-id="5c934-2023">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2023">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2024">FE 09 < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="5c934-2024">FE 09 < `unsigned int16` ></span></span>|<span data-ttu-id="5c934-2025">ldarg `index`</span><span class="sxs-lookup"><span data-stu-id="5c934-2025">ldarg `index`</span></span>|<span data-ttu-id="5c934-2026">Lädt das Argument am `index` Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2026">Load argument at `index` onto stack.</span></span>|  
  
 <span data-ttu-id="5c934-2027">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2027">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2028">Der Wert des Arguments an `index` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2028">The argument value at `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2029">Die `ldarg` Anweisung legt das Argument am `index`, wobei die Argumente von 0 oder höher, auf dem Auswertungsstapel ab Indizierung werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-2029">The `ldarg` instruction pushes the argument indexed at `index`, where arguments are indexed from 0 onwards, onto the evaluation stack.</span></span> <span data-ttu-id="5c934-2030">Die `ldarg` Anweisung kann verwendet werden, um das Kopieren aus einem eingehenden Argument ein Werttyp oder ein primitiver Wert im Stapel zu laden.</span><span class="sxs-lookup"><span data-stu-id="5c934-2030">The `ldarg` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="5c934-2031">Der Typ des Argumentwerts ist identisch mit dem Typ des Arguments, gemäß der aktuellen Methodensignatur.</span><span class="sxs-lookup"><span data-stu-id="5c934-2031">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="5c934-2032">Für Prozeduren, die eine Argumentliste variabler Länge, kann die `ldarg` Anweisung kann nur auf die festen Argumente, nicht auf die in der Variable Teil der Signatur verwendet werden (finden Sie unter den <xref:System.Reflection.Emit.OpCodes.Arglist> Anleitungen für die weitere Details).</span><span class="sxs-lookup"><span data-stu-id="5c934-2032">For procedures that take a variable-length argument list, the `ldarg` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature (see the <xref:System.Reflection.Emit.OpCodes.Arglist> instruction for more details).</span></span>  
  
 <span data-ttu-id="5c934-2033">Argumente, die einen ganzzahligen Wert, der kürzer als 4 Bytes lang Typ erweitert `int32` werden beim Laden auf den Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2033">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="5c934-2034">Gleitkommawerte werden auf ihre systemeigene Größe erweitert (Typ `F`).</span><span class="sxs-lookup"><span data-stu-id="5c934-2034">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="5c934-2035">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldarg` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2035">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2036">ILGenerator.Emit (OpCode, short)</span><span class="sxs-lookup"><span data-stu-id="5c934-2036">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2037">Lädt das Argument am Index 0 in den Auswertungsstapel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2037">Loads the argument at index 0 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2038">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2038">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2039">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2039">Format</span></span>|<span data-ttu-id="5c934-2040">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2040">Assembly Format</span></span>|<span data-ttu-id="5c934-2041">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2041">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2042">02</span><span class="sxs-lookup"><span data-stu-id="5c934-2042">02</span></span>|<span data-ttu-id="5c934-2043">ldarg.0</span><span class="sxs-lookup"><span data-stu-id="5c934-2043">ldarg.0</span></span>|<span data-ttu-id="5c934-2044">Lädt das Argument 0 Stapel</span><span class="sxs-lookup"><span data-stu-id="5c934-2044">Load argument 0 onto stack</span></span>|  
  
 <span data-ttu-id="5c934-2045">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2045">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2046">Der Wert des Arguments am Index 0 wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2046">The argument value at index 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2047">Die `ldarg.0` Anweisung ist eine effiziente Codierung für das Laden des Argumentwerts am Index 0.</span><span class="sxs-lookup"><span data-stu-id="5c934-2047">The `ldarg.0` instruction is an efficient encoding for loading the argument value at index 0.</span></span>  
  
 <span data-ttu-id="5c934-2048">Die `ldarg.0` -Anweisung legt das Argument mit dem Index 0 auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2048">The `ldarg.0` instruction pushes the argument indexed at 0 onto the evaluation stack.</span></span> <span data-ttu-id="5c934-2049">Die `ldarg.0` Anweisung kann verwendet werden, um das Kopieren aus einem eingehenden Argument ein Werttyp oder ein primitiver Wert im Stapel zu laden.</span><span class="sxs-lookup"><span data-stu-id="5c934-2049">The `ldarg.0` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="5c934-2050">Der Typ des Argumentwerts ist identisch mit dem Typ des Arguments, gemäß der aktuellen Methodensignatur.</span><span class="sxs-lookup"><span data-stu-id="5c934-2050">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="5c934-2051">Argumente, die einen ganzzahligen Wert, der kürzer als 4 Bytes lang Typ erweitert `int32` werden beim Laden auf den Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2051">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="5c934-2052">Gleitkommawerte werden auf ihre systemeigene Größe erweitert (Typ `F`).</span><span class="sxs-lookup"><span data-stu-id="5c934-2052">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="5c934-2053">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldarg.0` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2053">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.0` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2054">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2054">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2055">Lädt das Argument am Index 1 in den Auswertungsstapel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2055">Loads the argument at index 1 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2056">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2056">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2057">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2057">Format</span></span>|<span data-ttu-id="5c934-2058">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2058">Assembly Format</span></span>|<span data-ttu-id="5c934-2059">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2059">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2060">03</span><span class="sxs-lookup"><span data-stu-id="5c934-2060">03</span></span>|<span data-ttu-id="5c934-2061">ldarg. 1</span><span class="sxs-lookup"><span data-stu-id="5c934-2061">ldarg.1</span></span>|<span data-ttu-id="5c934-2062">Laden Sie das Argument 1 Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2062">Load argument 1 onto stack.</span></span>|  
  
 <span data-ttu-id="5c934-2063">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2063">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2064">Der Wert des Arguments am Index 1 wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2064">The argument value at index 1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2065">Die `ldarg.1` Anweisung ist eine effiziente Codierung für das Laden des Argumentwerts am Index 1.</span><span class="sxs-lookup"><span data-stu-id="5c934-2065">The `ldarg.1` instruction is an efficient encoding for loading the argument value at index 1.</span></span>  
  
 <span data-ttu-id="5c934-2066">Die `ldarg.1` -Anweisung legt das Argument mit dem Index 1 auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2066">The `ldarg.1` instruction pushes the argument indexed at 1 onto the evaluation stack.</span></span> <span data-ttu-id="5c934-2067">Die `ldarg.1` Anweisung kann verwendet werden, um das Kopieren aus einem eingehenden Argument ein Werttyp oder ein primitiver Wert im Stapel zu laden.</span><span class="sxs-lookup"><span data-stu-id="5c934-2067">The `ldarg.1` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="5c934-2068">Der Typ des Argumentwerts ist identisch mit dem Typ des Arguments, gemäß der aktuellen Methodensignatur.</span><span class="sxs-lookup"><span data-stu-id="5c934-2068">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="5c934-2069">Argumente, die einen ganzzahligen Wert, der kürzer als 4 Bytes lang Typ erweitert `int32` werden beim Laden auf den Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2069">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="5c934-2070">Gleitkommawerte werden auf ihre systemeigene Größe erweitert (Typ `F`).</span><span class="sxs-lookup"><span data-stu-id="5c934-2070">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="5c934-2071">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldarg.1` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2071">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.1` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2072">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2072">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2073">Lädt das Argument am Index 2 in den Auswertungsstapel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2073">Loads the argument at index 2 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2074">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2074">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2075">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2075">Format</span></span>|<span data-ttu-id="5c934-2076">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2076">Assembly Format</span></span>|<span data-ttu-id="5c934-2077">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2077">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2078">04</span><span class="sxs-lookup"><span data-stu-id="5c934-2078">04</span></span>|<span data-ttu-id="5c934-2079">ldarg. 2</span><span class="sxs-lookup"><span data-stu-id="5c934-2079">ldarg.2</span></span>|<span data-ttu-id="5c934-2080">Laden Sie Argument 2 in den Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2080">Load argument 2 onto stack.</span></span>|  
  
 <span data-ttu-id="5c934-2081">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2081">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2082">Der Wert des Arguments am Index 2 ist auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2082">The argument value at index 2 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2083">Die `ldarg.2` Anweisung ist eine effiziente Codierung für das Laden des Argumentwerts am Index 2.</span><span class="sxs-lookup"><span data-stu-id="5c934-2083">The `ldarg.2` instruction is an efficient encoding for loading the argument value at index 2.</span></span>  
  
 <span data-ttu-id="5c934-2084">Die `ldarg.2` Anweisung legt das Argument auf 2 auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2084">The `ldarg.2` instruction pushes the argument indexed at 2 onto the evaluation stack.</span></span> <span data-ttu-id="5c934-2085">Die `ldarg.2` Anweisung kann verwendet werden, um das Kopieren aus einem eingehenden Argument ein Werttyp oder ein primitiver Wert im Stapel zu laden.</span><span class="sxs-lookup"><span data-stu-id="5c934-2085">The `ldarg.2` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="5c934-2086">Der Typ des Argumentwerts ist identisch mit dem Typ des Arguments, gemäß der aktuellen Methodensignatur.</span><span class="sxs-lookup"><span data-stu-id="5c934-2086">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="5c934-2087">Argumente, die einen ganzzahligen Wert, der kürzer als 4 Bytes lang Typ erweitert `int32` werden beim Laden auf den Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2087">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="5c934-2088">Gleitkommawerte werden auf ihre systemeigene Größe erweitert (Typ `F`).</span><span class="sxs-lookup"><span data-stu-id="5c934-2088">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="5c934-2089">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldarg.2` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2089">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.2` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2090">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2090">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2091">Lädt das Argument am Index 3 in den Auswertungsstapel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2091">Loads the argument at index 3 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2092">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2092">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2093">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2093">Format</span></span>|<span data-ttu-id="5c934-2094">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2094">Assembly Format</span></span>|<span data-ttu-id="5c934-2095">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2095">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2096">05</span><span class="sxs-lookup"><span data-stu-id="5c934-2096">05</span></span>|<span data-ttu-id="5c934-2097">ldarg. 3</span><span class="sxs-lookup"><span data-stu-id="5c934-2097">ldarg.3</span></span>|<span data-ttu-id="5c934-2098">Lädt das Argument 3 Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2098">Load argument 3 onto stack.</span></span>|  
  
 <span data-ttu-id="5c934-2099">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2099">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2100">Der Wert des Arguments am Index 3 wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2100">The argument value at index 3 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2101">Die `ldarg.3` Anweisung ist eine effiziente Codierung für das Laden des Argumentwerts am Index 3.</span><span class="sxs-lookup"><span data-stu-id="5c934-2101">The `ldarg.3` instruction is an efficient encoding for loading the argument value at index 3.</span></span>  
  
 <span data-ttu-id="5c934-2102">Die `ldarg.3` -Anweisung legt das Argument mit dem Index 3 auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2102">The `ldarg.3` instruction pushes the argument indexed at 3 onto the evaluation stack.</span></span> <span data-ttu-id="5c934-2103">Die `ldarg.3` Anweisung kann verwendet werden, um das Kopieren aus einem eingehenden Argument ein Werttyp oder ein primitiver Wert im Stapel zu laden.</span><span class="sxs-lookup"><span data-stu-id="5c934-2103">The `ldarg.3` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="5c934-2104">Der Typ des Argumentwerts ist identisch mit dem Typ des Arguments, gemäß der aktuellen Methodensignatur.</span><span class="sxs-lookup"><span data-stu-id="5c934-2104">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="5c934-2105">Argumente, die einen ganzzahligen Wert, der kürzer als 4 Bytes lang Typ erweitert `int32` werden beim Laden auf den Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2105">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="5c934-2106">Gleitkommawerte werden auf ihre systemeigene Größe erweitert (Typ `F`).</span><span class="sxs-lookup"><span data-stu-id="5c934-2106">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="5c934-2107">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldarg.3` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2107">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.3` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2108">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2108">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2109">Lädt das Argument, auf das ein angegebener Kurzformindex verweist, in den Stapel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2109">Loads the argument (referenced by a specified short form index) onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2110">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2110">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2111">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2111">Format</span></span>|<span data-ttu-id="5c934-2112">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2112">Assembly Format</span></span>|<span data-ttu-id="5c934-2113">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2113">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2114">0E < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="5c934-2114">0E < `unsigned int8` ></span></span>|<span data-ttu-id="5c934-2115">ldarg.s `index`</span><span class="sxs-lookup"><span data-stu-id="5c934-2115">ldarg.s `index`</span></span>|<span data-ttu-id="5c934-2116">Lädt das Argument am `index` in den Stapel, Kurzform.</span><span class="sxs-lookup"><span data-stu-id="5c934-2116">Load argument at `index` onto stack, short form.</span></span>|  
  
 <span data-ttu-id="5c934-2117">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2117">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2118">Der Wert des Arguments an `index` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2118">The argument value at `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2119">Die `ldarg.s` -Anweisung ist eine effiziente Codierung für das Laden der Argumente, die aus 4 bis 255 indiziert.</span><span class="sxs-lookup"><span data-stu-id="5c934-2119">The `ldarg.s` instruction is an efficient encoding for loading arguments indexed from 4 through 255.</span></span>  
  
 <span data-ttu-id="5c934-2120">Die `ldarg.s` Anweisung legt das Argument am `index`, wobei die Argumente von 0 oder höher, auf dem Auswertungsstapel ab Indizierung werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-2120">The `ldarg.s` instruction pushes the argument indexed at `index`, where arguments are indexed from 0 onwards, onto the evaluation stack.</span></span> <span data-ttu-id="5c934-2121">Die `ldarg.s` Anweisung kann verwendet werden, um das Kopieren aus einem eingehenden Argument ein Werttyp oder ein primitiver Wert im Stapel zu laden.</span><span class="sxs-lookup"><span data-stu-id="5c934-2121">The `ldarg.s` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="5c934-2122">Der Typ des Argumentwerts ist identisch mit dem Typ des Arguments, gemäß der aktuellen Methodensignatur.</span><span class="sxs-lookup"><span data-stu-id="5c934-2122">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="5c934-2123">Für Prozeduren, die eine Argumentliste variabler Länge, kann die `ldarg.s` Anweisung kann nur auf die festen Argumente, nicht auf die in der Variable Teil der Signatur verwendet werden (finden Sie unter den <xref:System.Reflection.Emit.OpCodes.Arglist> Anleitungen für die weitere Details).</span><span class="sxs-lookup"><span data-stu-id="5c934-2123">For procedures that take a variable-length argument list, the `ldarg.s` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature (see the <xref:System.Reflection.Emit.OpCodes.Arglist> instruction for more details).</span></span>  
  
 <span data-ttu-id="5c934-2124">Argumente, die einen ganzzahligen Wert, der kürzer als 4 Bytes lang Typ erweitert `int32` werden beim Laden auf den Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2124">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="5c934-2125">Gleitkommawerte werden auf ihre systemeigene Größe erweitert (Typ `F`).</span><span class="sxs-lookup"><span data-stu-id="5c934-2125">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="5c934-2126">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldarg.s` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2126">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.s` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2127">ILGenerator.Emit(OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="5c934-2127">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarga">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarga;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarga" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarga" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarga As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarga;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarga : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarga" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2128">Lädt eine Argumentadresse in den Auswertungsstapel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2128">Load an argument address onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2129">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2129">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2130">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2130">Format</span></span>|<span data-ttu-id="5c934-2131">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2131">Assembly Format</span></span>|<span data-ttu-id="5c934-2132">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2132">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2133">FE 0A < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="5c934-2133">FE 0A < `unsigned int16` ></span></span>|<span data-ttu-id="5c934-2134">ldarga `index`</span><span class="sxs-lookup"><span data-stu-id="5c934-2134">ldarga `index`</span></span>|<span data-ttu-id="5c934-2135">Ruft die Adresse des Arguments ab, das von `index`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2135">Fetch the address of argument indexed by `index`.</span></span>|  
  
 <span data-ttu-id="5c934-2136">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2136">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2137">Die Adresse `addr` des Arguments ab, indem `index` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2137">The address `addr` of the argument indexed by `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2138">Die `ldarga` -Anweisung ruft die Adresse (des Typs `*`) des Arguments ab, indem `index`, wobei die Argumente von 0 oder höher Indizierung.</span><span class="sxs-lookup"><span data-stu-id="5c934-2138">The `ldarga` instruction fetches the address (of type `*`) of the argument indexed by `index`, where arguments are indexed from 0 onwards.</span></span> <span data-ttu-id="5c934-2139">Die Adresse `addr` immer auf dem Zielcomputer eine natürliche Grenze ausgerichtet ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-2139">The address `addr` is always aligned to a natural boundary on the target machine.</span></span>  
  
 <span data-ttu-id="5c934-2140">Für Prozeduren, die eine Argumentliste variabler Länge, kann die `ldarga` Anweisung kann nur auf die festen Argumente, nicht auf die in der Variable Teil der Signatur verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-2140">For procedures that take a variable-length argument list, the `ldarga` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="5c934-2141">`ldarga` wird für durch Verweis übergeben von Parametern verwendet.</span><span class="sxs-lookup"><span data-stu-id="5c934-2141">`ldarga` is used for by-ref parameter passing.</span></span> <span data-ttu-id="5c934-2142">In anderen Fällen <xref:System.Reflection.Emit.OpCodes.Ldarg> und <xref:System.Reflection.Emit.OpCodes.Starg> verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="5c934-2142">For other cases, <xref:System.Reflection.Emit.OpCodes.Ldarg> and <xref:System.Reflection.Emit.OpCodes.Starg> should be used.</span></span>  
  
 <span data-ttu-id="5c934-2143">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldarga` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2143">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarga` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2144">ILGenerator.Emit (OpCode, short)</span><span class="sxs-lookup"><span data-stu-id="5c934-2144">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarga_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarga_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarga_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarga_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarga_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarga_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarga_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarga_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2145">Lädt eine Argumentadresse in Kurzform in den Auswertungsstapel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2145">Load an argument address, in short form, onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2146">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2146">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2147">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2147">Format</span></span>|<span data-ttu-id="5c934-2148">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2148">Assembly Format</span></span>|<span data-ttu-id="5c934-2149">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2149">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2150">0F &LT; `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="5c934-2150">0F < `unsigned int8` ></span></span>|<span data-ttu-id="5c934-2151">ldarga.s `index`</span><span class="sxs-lookup"><span data-stu-id="5c934-2151">ldarga.s `index`</span></span>|<span data-ttu-id="5c934-2152">Ruft die Adresse des Arguments ab, das von `index`, Kurzform.</span><span class="sxs-lookup"><span data-stu-id="5c934-2152">Fetch the address of argument indexed by `index`, short form.</span></span>|  
  
 <span data-ttu-id="5c934-2153">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2153">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2154">Die Adresse `addr` des Arguments ab, indem `index` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2154">The address `addr` of the argument indexed by `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2155">`ldarga.s` (die Kurzform der `ldarga`) sollte verwendet werden, für die Argumente von 0 bis 255 und ist ein effizienter Codierung.</span><span class="sxs-lookup"><span data-stu-id="5c934-2155">`ldarga.s` (the short form of `ldarga`) should be used for argument numbers 0 through 255, and is a more efficient encoding.</span></span>  
  
 <span data-ttu-id="5c934-2156">Die `ldarga.s` -Anweisung ruft die Adresse (des Typs`*`) des Arguments ab, indem `index`, wobei die Argumente von 0 oder höher Indizierung.</span><span class="sxs-lookup"><span data-stu-id="5c934-2156">The `ldarga.s` instruction fetches the address (of type`*`) of the argument indexed by `index`, where arguments are indexed from 0 onwards.</span></span> <span data-ttu-id="5c934-2157">Die Adresse `addr` immer auf dem Zielcomputer eine natürliche Grenze ausgerichtet ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-2157">The address `addr` is always aligned to a natural boundary on the target machine.</span></span>  
  
 <span data-ttu-id="5c934-2158">Für Prozeduren, die eine Argumentliste variabler Länge, kann die `ldarga.s` Anweisung kann nur auf die festen Argumente, nicht auf die in der Variable Teil der Signatur verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-2158">For procedures that take a variable-length argument list, the `ldarga.s` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="5c934-2159">`ldarga.s` wird für durch Verweis übergeben von Parametern verwendet.</span><span class="sxs-lookup"><span data-stu-id="5c934-2159">`ldarga.s` is used for by-ref parameter passing.</span></span> <span data-ttu-id="5c934-2160">In anderen Fällen <xref:System.Reflection.Emit.OpCodes.Ldarg_S> und <xref:System.Reflection.Emit.OpCodes.Starg_S> verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="5c934-2160">For other cases, <xref:System.Reflection.Emit.OpCodes.Ldarg_S> and <xref:System.Reflection.Emit.OpCodes.Starg_S> should be used.</span></span>  
  
 <span data-ttu-id="5c934-2161">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldarga.s` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2161">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarga.s` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2162">ILGenerator.Emit(OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="5c934-2162">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2163">Legt einen bereitgestellten Wert vom Typ <see langword="int32" /> auf dem Auswertungsstapel ab als eine <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2163">Pushes a supplied value of type <see langword="int32" /> onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2164">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2164">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2165">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2165">Format</span></span>|<span data-ttu-id="5c934-2166">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2166">Assembly Format</span></span>|<span data-ttu-id="5c934-2167">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2167">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2168">20 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="5c934-2168">20 < `int32` ></span></span>|<span data-ttu-id="5c934-2169">ldc. i4 `num`</span><span class="sxs-lookup"><span data-stu-id="5c934-2169">ldc.i4 `num`</span></span>|<span data-ttu-id="5c934-2170">Legt den Wert `num` im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2170">Pushes the value `num` onto the stack.</span></span>|  
  
 <span data-ttu-id="5c934-2171">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2171">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2172">Der Wert `num` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2172">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2173">Beachten Sie, dass besondere Codierungen mit kurze (und daher eine effizientere) für die ganzen Zahlen-128 bis 127, und besonders kurze Codierungen für – 1 bis 8.</span><span class="sxs-lookup"><span data-stu-id="5c934-2173">Note that there are special short (and hence more efficient) encodings for the integers -128 through 127, and especially short encodings for -1 through 8.</span></span> <span data-ttu-id="5c934-2174">Alle kurze Codierungen werden 4 Bytes langen ganzen Zahlen auf dem Stapel übertragen.</span><span class="sxs-lookup"><span data-stu-id="5c934-2174">All short encodings push 4 byte integers on the stack.</span></span> <span data-ttu-id="5c934-2175">Längere Codierungen werden verwendet, für die 8-Byte-Ganzzahlen, 4 und 8 Byte-Gleitkommazahlen, sowie 4-Byte-Werte, die nicht in die Kurzformen passen.</span><span class="sxs-lookup"><span data-stu-id="5c934-2175">Longer encodings are used for 8 byte integers and 4 and 8 byte floating-point numbers, as well as 4-byte values that do not fit in the short forms.</span></span> <span data-ttu-id="5c934-2176">Es gibt drei Möglichkeiten, eine 8-Byte-Ganzzahlkonstante im Stapel mithilfe von Push übertragen</span><span class="sxs-lookup"><span data-stu-id="5c934-2176">There are three ways to push an 8 byte integer constant onto the stack</span></span>  
  
 1. <span data-ttu-id="5c934-2177">Verwenden der <xref:System.Reflection.Emit.OpCodes.Ldc_I8> Anleitungen für die Konstanten, die mehr als 32 Bits ausgedrückt werden müssen.</span><span class="sxs-lookup"><span data-stu-id="5c934-2177">Use the <xref:System.Reflection.Emit.OpCodes.Ldc_I8> instruction for constants that must be expressed in more than 32 bits.</span></span>  
  
 2. <span data-ttu-id="5c934-2178">Verwenden der <xref:System.Reflection.Emit.OpCodes.Ldc_I4> Anweisung, gefolgt von einem <xref:System.Reflection.Emit.OpCodes.Conv_I8> für Konstanten, die von 9 bis 32 Bits erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="5c934-2178">Use the <xref:System.Reflection.Emit.OpCodes.Ldc_I4> instruction followed by a <xref:System.Reflection.Emit.OpCodes.Conv_I8> for constants that require 9 to 32 bits.</span></span>  
  
 3. <span data-ttu-id="5c934-2179">Verwenden Sie eine Kurzform-Anweisung, gefolgt von einem <xref:System.Reflection.Emit.OpCodes.Conv_I8> für Konstanten, die in 8 oder weniger Bit ausgedrückt werden können.</span><span class="sxs-lookup"><span data-stu-id="5c934-2179">Use a short form instruction followed by a <xref:System.Reflection.Emit.OpCodes.Conv_I8> for constants that can be expressed in 8 or fewer bits.</span></span>  
  
 <span data-ttu-id="5c934-2180">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldc.i4` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2180">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2181">ILGenerator.Emit (OpCode, Int)</span><span class="sxs-lookup"><span data-stu-id="5c934-2181">ILGenerator.Emit(OpCode, int)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2182">Legt den Ganzzahlwert 0 auf dem Auswertungsstapel ab als eine <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2182">Pushes the integer value of 0 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2183">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2183">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2184">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2184">Format</span></span>|<span data-ttu-id="5c934-2185">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2185">Assembly Format</span></span>|<span data-ttu-id="5c934-2186">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2186">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2187">16</span><span class="sxs-lookup"><span data-stu-id="5c934-2187">16</span></span>|<span data-ttu-id="5c934-2188">ldc.i4.0</span><span class="sxs-lookup"><span data-stu-id="5c934-2188">ldc.i4.0</span></span>|<span data-ttu-id="5c934-2189">Überträgt 0 auf den Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2189">Pushes 0 onto the stack.</span></span>|  
  
 <span data-ttu-id="5c934-2190">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2190">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2191">Der Wert 0 wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2191">The value 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2192">Dies ist eine spezielle kurze Codierung für den Push von der ganzzahlige Wert 0.</span><span class="sxs-lookup"><span data-stu-id="5c934-2192">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="5c934-2193">Alle spezielle kurze Codierungen werden 4 Bytes langen ganzen Zahlen auf dem Stapel übertragen.</span><span class="sxs-lookup"><span data-stu-id="5c934-2193">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="5c934-2194">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldc.i4.0` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2194">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.0` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2195">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2195">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2196">Legt den Ganzzahlwert 1 als <see langword="int32" /> auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2196">Pushes the integer value of 1 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2197">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2197">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2198">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2198">Format</span></span>|<span data-ttu-id="5c934-2199">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2199">Assembly Format</span></span>|<span data-ttu-id="5c934-2200">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2200">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2201">17</span><span class="sxs-lookup"><span data-stu-id="5c934-2201">17</span></span>|<span data-ttu-id="5c934-2202">ldc.i4.1</span><span class="sxs-lookup"><span data-stu-id="5c934-2202">ldc.i4.1</span></span>|<span data-ttu-id="5c934-2203">Legt die 1 auf den Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2203">Pushes 1 onto the stack.</span></span>|  
  
 <span data-ttu-id="5c934-2204">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2204">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2205">Der Wert 1 wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2205">The value 1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2206">Dies ist eine spezielle kurze Codierung für den Push von der ganzzahlige Wert 0.</span><span class="sxs-lookup"><span data-stu-id="5c934-2206">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="5c934-2207">Alle spezielle kurze Codierungen werden 4 Bytes langen ganzen Zahlen auf dem Stapel übertragen.</span><span class="sxs-lookup"><span data-stu-id="5c934-2207">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="5c934-2208">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldc.i4.1` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2208">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.1` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2209">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2209">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2210">Legt den Ganzzahlwert 2 als <see langword="int32" /> auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2210">Pushes the integer value of 2 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2211">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2211">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2212">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2212">Format</span></span>|<span data-ttu-id="5c934-2213">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2213">Assembly Format</span></span>|<span data-ttu-id="5c934-2214">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2214">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2215">18</span><span class="sxs-lookup"><span data-stu-id="5c934-2215">18</span></span>|<span data-ttu-id="5c934-2216">ldc.i4.2</span><span class="sxs-lookup"><span data-stu-id="5c934-2216">ldc.i4.2</span></span>|<span data-ttu-id="5c934-2217">Legt die 2 in den Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2217">Pushes 2 onto the stack.</span></span>|  
  
 <span data-ttu-id="5c934-2218">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2218">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2219">Der Wert 2 ist auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2219">The value 2 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2220">Dies ist eine spezielle kurze Codierung für den Push von der ganzzahlige Wert 0.</span><span class="sxs-lookup"><span data-stu-id="5c934-2220">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="5c934-2221">Alle spezielle kurze Codierungen werden 4 Bytes langen ganzen Zahlen auf dem Stapel übertragen.</span><span class="sxs-lookup"><span data-stu-id="5c934-2221">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="5c934-2222">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldc.i4.2` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2222">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.2` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2223">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2223">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2224">Legt den Ganzzahlwert 3 als <see langword="int32" /> auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2224">Pushes the integer value of 3 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2225">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2225">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2226">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2226">Format</span></span>|<span data-ttu-id="5c934-2227">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2227">Assembly Format</span></span>|<span data-ttu-id="5c934-2228">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2228">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2229">19</span><span class="sxs-lookup"><span data-stu-id="5c934-2229">19</span></span>|<span data-ttu-id="5c934-2230">ldc.i4.3</span><span class="sxs-lookup"><span data-stu-id="5c934-2230">ldc.i4.3</span></span>|<span data-ttu-id="5c934-2231">Legt die 3 auf dem Stapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2231">Pushes 3 onto the stack.</span></span>|  
  
 <span data-ttu-id="5c934-2232">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2232">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2233">Der Wert 3 wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2233">The value 3 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2234">Dies ist eine spezielle kurze Codierung für den Push von der ganzzahlige Wert 0.</span><span class="sxs-lookup"><span data-stu-id="5c934-2234">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="5c934-2235">Alle spezielle kurze Codierungen werden 4 Bytes langen ganzen Zahlen auf dem Stapel übertragen.</span><span class="sxs-lookup"><span data-stu-id="5c934-2235">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="5c934-2236">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldc.i4.3` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2236">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.3` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2237">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2237">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2238">Legt den Ganzzahlwert 4 als <see langword="int32" /> auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2238">Pushes the integer value of 4 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2239">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2239">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2240">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2240">Format</span></span>|<span data-ttu-id="5c934-2241">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2241">Assembly Format</span></span>|<span data-ttu-id="5c934-2242">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2242">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2243">1A</span><span class="sxs-lookup"><span data-stu-id="5c934-2243">1A</span></span>|<span data-ttu-id="5c934-2244">ldc.i4.4</span><span class="sxs-lookup"><span data-stu-id="5c934-2244">ldc.i4.4</span></span>|<span data-ttu-id="5c934-2245">Legt die 4 im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2245">Pushes 4 onto the stack.</span></span>|  
  
 <span data-ttu-id="5c934-2246">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2246">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2247">Der Wert 4 ist auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2247">The value 4 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2248">Dies ist eine spezielle kurze Codierung für den Push von der ganzzahlige Wert 0.</span><span class="sxs-lookup"><span data-stu-id="5c934-2248">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="5c934-2249">Alle spezielle kurze Codierungen werden 4 Bytes langen ganzen Zahlen auf dem Stapel übertragen.</span><span class="sxs-lookup"><span data-stu-id="5c934-2249">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="5c934-2250">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldc.i4.4` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2250">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.4` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2251">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2251">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_5">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_5;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_5" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_5" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_5 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_5;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_5 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_5" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2252">Legt den Ganzzahlwert 5 als <see langword="int32" /> auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2252">Pushes the integer value of 5 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2253">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2253">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2254">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2254">Format</span></span>|<span data-ttu-id="5c934-2255">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2255">Assembly Format</span></span>|<span data-ttu-id="5c934-2256">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2256">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2257">1B</span><span class="sxs-lookup"><span data-stu-id="5c934-2257">1B</span></span>|<span data-ttu-id="5c934-2258">ldc.i4.5</span><span class="sxs-lookup"><span data-stu-id="5c934-2258">ldc.i4.5</span></span>|<span data-ttu-id="5c934-2259">Legt die 5 im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2259">Pushes 5 onto the stack.</span></span>|  
  
 <span data-ttu-id="5c934-2260">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2260">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2261">Der Wert 5 ist auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2261">The value 5 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2262">Dies ist eine spezielle kurze Codierung für den Push von der ganzzahlige Wert 0.</span><span class="sxs-lookup"><span data-stu-id="5c934-2262">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="5c934-2263">Alle spezielle kurze Codierungen werden 4 Bytes langen ganzen Zahlen auf dem Stapel übertragen.</span><span class="sxs-lookup"><span data-stu-id="5c934-2263">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="5c934-2264">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldc.i4.5` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2264">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.5` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2265">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2265">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_6">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_6;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_6" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_6" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_6 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_6;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_6 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_6" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2266">Legt den Ganzzahlwert 6 als <see langword="int32" /> auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2266">Pushes the integer value of 6 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2267">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2267">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2268">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2268">Format</span></span>|<span data-ttu-id="5c934-2269">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2269">Assembly Format</span></span>|<span data-ttu-id="5c934-2270">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2270">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2271">1C</span><span class="sxs-lookup"><span data-stu-id="5c934-2271">1C</span></span>|<span data-ttu-id="5c934-2272">ldc.i4.6</span><span class="sxs-lookup"><span data-stu-id="5c934-2272">ldc.i4.6</span></span>|<span data-ttu-id="5c934-2273">Legt die 6 auf dem Stapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2273">Pushes 6 onto the stack.</span></span>|  
  
 <span data-ttu-id="5c934-2274">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2274">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2275">Der Wert 6 wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2275">The value 6 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2276">Dies ist eine spezielle kurze Codierung für den Push von der ganzzahlige Wert 0.</span><span class="sxs-lookup"><span data-stu-id="5c934-2276">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="5c934-2277">Alle spezielle kurze Codierungen werden 4 Bytes langen ganzen Zahlen auf dem Stapel übertragen.</span><span class="sxs-lookup"><span data-stu-id="5c934-2277">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="5c934-2278">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldc.i4.6` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2278">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.6` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2279">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2279">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_7">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_7;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_7" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_7" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_7 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_7;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_7 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_7" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2280">Legt den Ganzzahlwert 7 als <see langword="int32" /> auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2280">Pushes the integer value of 7 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2281">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2281">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2282">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2282">Format</span></span>|<span data-ttu-id="5c934-2283">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2283">Assembly Format</span></span>|<span data-ttu-id="5c934-2284">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2284">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2285">1D</span><span class="sxs-lookup"><span data-stu-id="5c934-2285">1D</span></span>|<span data-ttu-id="5c934-2286">ldc.i4.7</span><span class="sxs-lookup"><span data-stu-id="5c934-2286">ldc.i4.7</span></span>|<span data-ttu-id="5c934-2287">Legt die 7 auf den Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2287">Pushes 7 onto the stack.</span></span>|  
  
 <span data-ttu-id="5c934-2288">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2288">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2289">Der Wert 7 wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2289">The value 7 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2290">Dies ist eine spezielle kurze Codierung für den Push von der ganzzahlige Wert 0.</span><span class="sxs-lookup"><span data-stu-id="5c934-2290">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="5c934-2291">Alle spezielle kurze Codierungen werden 4 Bytes langen ganzen Zahlen auf dem Stapel übertragen.</span><span class="sxs-lookup"><span data-stu-id="5c934-2291">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="5c934-2292">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldc.i4.7` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2292">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.7` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2293">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2293">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2294">Legt den Ganzzahlwert 8 als <see langword="int32" /> auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2294">Pushes the integer value of 8 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2295">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2295">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2296">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2296">Format</span></span>|<span data-ttu-id="5c934-2297">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2297">Assembly Format</span></span>|<span data-ttu-id="5c934-2298">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2298">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2299">1E</span><span class="sxs-lookup"><span data-stu-id="5c934-2299">1E</span></span>|<span data-ttu-id="5c934-2300">ldc.i4.8</span><span class="sxs-lookup"><span data-stu-id="5c934-2300">ldc.i4.8</span></span>|<span data-ttu-id="5c934-2301">Überträgt 8 auf den Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2301">Pushes 8 onto the stack.</span></span>|  
  
 <span data-ttu-id="5c934-2302">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2302">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2303">Der Wert 8 ist auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2303">The value 8 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2304">Dies ist eine spezielle kurze Codierung für den Push von der ganzzahlige Wert 0.</span><span class="sxs-lookup"><span data-stu-id="5c934-2304">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="5c934-2305">Alle spezielle kurze Codierungen werden 4 Bytes langen ganzen Zahlen auf dem Stapel übertragen.</span><span class="sxs-lookup"><span data-stu-id="5c934-2305">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="5c934-2306">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldc.i4.8` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2306">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.8` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2307">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2307">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_M1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_M1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_M1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_M1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_M1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_M1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_M1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2308">Legt den Ganzzahlwert -1 als <see langword="int32" /> auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2308">Pushes the integer value of -1 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2309">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2309">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2310">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2310">Format</span></span>|<span data-ttu-id="5c934-2311">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2311">Assembly Format</span></span>|<span data-ttu-id="5c934-2312">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2312">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2313">15</span><span class="sxs-lookup"><span data-stu-id="5c934-2313">15</span></span>|<span data-ttu-id="5c934-2314">ldc.i4.m1</span><span class="sxs-lookup"><span data-stu-id="5c934-2314">ldc.i4.m1</span></span>|<span data-ttu-id="5c934-2315">Legt-1 auf dem Stapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2315">Pushes -1 onto the stack.</span></span>|  
  
 <span data-ttu-id="5c934-2316">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2316">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2317">Der Wert-1 wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2317">The value -1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2318">Dies ist eine spezielle kurze Codierung für den Push von der ganzzahlige Wert 0.</span><span class="sxs-lookup"><span data-stu-id="5c934-2318">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="5c934-2319">Alle spezielle kurze Codierungen werden 4 Bytes langen ganzen Zahlen auf dem Stapel übertragen.</span><span class="sxs-lookup"><span data-stu-id="5c934-2319">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="5c934-2320">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldc.i4.m1` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2320">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.m1` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2321">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2321">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2322">Legt den bereitgestellten <see langword="int8" /> Wert in den Auswertungsstapel, als ein <see langword="int32" />, Kurzform.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2322">Pushes the supplied <see langword="int8" /> value onto the evaluation stack as an <see langword="int32" />, short form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2323">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2323">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2324">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2324">Format</span></span>|<span data-ttu-id="5c934-2325">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2325">Assembly Format</span></span>|<span data-ttu-id="5c934-2326">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2326">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2327">1F &LT; `int8` ></span><span class="sxs-lookup"><span data-stu-id="5c934-2327">1F < `int8` ></span></span>|<span data-ttu-id="5c934-2328">ldc.i4.s `num`</span><span class="sxs-lookup"><span data-stu-id="5c934-2328">ldc.i4.s `num`</span></span>|<span data-ttu-id="5c934-2329">Überträgt `num` als in den Stapel `int32`, Kurzform.</span><span class="sxs-lookup"><span data-stu-id="5c934-2329">Pushes `num` onto the stack as `int32`, short form.</span></span>|  
  
 <span data-ttu-id="5c934-2330">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2330">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2331">Der Wert `num` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2331">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2332">`ldc.i4.s` ist ein effizienter Codierung für die ganzen Zahlen von-128 bis 127 zu übertragen, auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2332">`ldc.i4.s` is a more efficient encoding for pushing the integers from -128 to 127 onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5c934-2333">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldc.i4.s` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2333">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.s` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2334">ILGenerator.Emit(OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="5c934-2334">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2335">Legt einen bereitgestellten Wert vom Typ <see langword="int64" /> auf dem Auswertungsstapel ab als eine <see langword="int64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2335">Pushes a supplied value of type <see langword="int64" /> onto the evaluation stack as an <see langword="int64" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2336">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2336">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2337">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2337">Format</span></span>|<span data-ttu-id="5c934-2338">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2338">Assembly Format</span></span>|<span data-ttu-id="5c934-2339">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2339">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2340">21 < `int64` ></span><span class="sxs-lookup"><span data-stu-id="5c934-2340">21 < `int64` ></span></span>|<span data-ttu-id="5c934-2341">ldc. i8 `num`</span><span class="sxs-lookup"><span data-stu-id="5c934-2341">ldc.i8 `num`</span></span>|<span data-ttu-id="5c934-2342">Überträgt `num` als in den Stapel `int64`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2342">Pushes `num` onto the stack as `int64`.</span></span>|  
  
 <span data-ttu-id="5c934-2343">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2343">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2344">Der Wert `num` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2344">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2345">Diese Codierung legt eine `int64` in den Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2345">This encoding pushes an `int64` value onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2346">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldc.i8` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2346">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i8` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2347">ILGenerator.Emit (OpCode, long)</span><span class="sxs-lookup"><span data-stu-id="5c934-2347">ILGenerator.Emit(OpCode, long)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2348">Legt einen bereitgestellten Wert vom Typ <see langword="float32" /> auf dem Auswertungsstapel ab als Typ <see langword="F" /> (Float).</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2348">Pushes a supplied value of type <see langword="float32" /> onto the evaluation stack as type <see langword="F" /> (float).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2349">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2349">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2350">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2350">Format</span></span>|<span data-ttu-id="5c934-2351">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2351">Assembly Format</span></span>|<span data-ttu-id="5c934-2352">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2352">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2353">22 < `float32` ></span><span class="sxs-lookup"><span data-stu-id="5c934-2353">22 < `float32` ></span></span>|<span data-ttu-id="5c934-2354">ldc. r4 `num`</span><span class="sxs-lookup"><span data-stu-id="5c934-2354">ldc.r4 `num`</span></span>|<span data-ttu-id="5c934-2355">Überträgt `num` als in den Stapel `F`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2355">Pushes `num` onto the stack as `F`.</span></span>|  
  
 <span data-ttu-id="5c934-2356">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2356">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2357">Der Wert `num` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2357">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2358">Diese Codierung legt eine `float32` in den Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2358">This encoding pushes a `float32` value onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2359">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldc.r4` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2359">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.r4` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2360">ILGenerator.Emit(OpCode, single)</span><span class="sxs-lookup"><span data-stu-id="5c934-2360">ILGenerator.Emit(OpCode, single)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2361">Legt einen bereitgestellten Wert vom Typ <see langword="float64" /> auf dem Auswertungsstapel ab als Typ <see langword="F" /> (Float).</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2361">Pushes a supplied value of type <see langword="float64" /> onto the evaluation stack as type <see langword="F" /> (float).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2362">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2362">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2363">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2363">Format</span></span>|<span data-ttu-id="5c934-2364">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2364">Assembly Format</span></span>|<span data-ttu-id="5c934-2365">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2365">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2366">23 < `float64` ></span><span class="sxs-lookup"><span data-stu-id="5c934-2366">23 < `float64` ></span></span>|<span data-ttu-id="5c934-2367">r8 `num`</span><span class="sxs-lookup"><span data-stu-id="5c934-2367">ldc.r8 `num`</span></span>|<span data-ttu-id="5c934-2368">Überträgt `num` als in den Stapel `F`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2368">Pushes `num` onto the stack as `F`.</span></span>|  
  
 <span data-ttu-id="5c934-2369">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2369">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2370">Der Wert `num` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2370">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2371">Diese Codierung legt eine `float64` in den Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2371">This encoding pushes a `float64` value onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2372">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldc.r8` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2372">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.r8` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2373">ILGenerator.Emit (OpCode, double)</span><span class="sxs-lookup"><span data-stu-id="5c934-2373">ILGenerator.Emit(OpCode, double)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2374">Lädt das Element an einem angegebenen Arrayindex, an die oberste Position des Auswertungsstapels als in der Anweisung angegebene Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2374">Loads the element at a specified array index onto the top of the evaluation stack as the type specified in the instruction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2375">Die folgende Tabelle enthält die hexadezimale und Microsoft intermediate Language (MSIL) Assembly-Format, sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2375">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2376">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2376">Format</span></span>|<span data-ttu-id="5c934-2377">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2377">Assembly Format</span></span>|<span data-ttu-id="5c934-2378">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2378">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2379">A3 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5c934-2379">A3 < `T` ></span></span>|<span data-ttu-id="5c934-2380">ldelem `typeTok`</span><span class="sxs-lookup"><span data-stu-id="5c934-2380">ldelem `typeTok`</span></span>|<span data-ttu-id="5c934-2381">Lädt das Element an `index` an die oberste Position des Stapels als Typ `typeTok`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2381">Loads the element at `index` onto the top of the stack as type `typeTok`.</span></span>|  
  
 <span data-ttu-id="5c934-2382">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2382">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2383">Ein Verweis auf eine `array` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2383">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-2384">Ein Indexwert `index` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2384">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-2385">`index` und `array` werden aus dem Stapel per POP entfernt den Wert an Position abgelegt `index` in `array` gesucht wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-2385">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="5c934-2386">Der Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2386">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2387">Die `ldelem` Anweisung lädt den Wert der Elements mit dem Index `index` (Typ `native int`) in der nullbasierten, eindimensionalen Array `array` und platziert sie oben im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2387">The `ldelem` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="5c934-2388">Arrays sind Objekte, und daher ein Wert vom Typ dargestellt `O`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2388">Arrays are objects, and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="5c934-2389">Der Typ des Rückgabewerts wird angegeben, durch das Token `typeTok` in der Anweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-2389">The type of the return value is specified by the token `typeTok` in the instruction.</span></span>  
  
 <span data-ttu-id="5c934-2390"><xref:System.NullReferenceException> wird ausgelöst, wenn `array` ist ein null-Verweis.</span><span class="sxs-lookup"><span data-stu-id="5c934-2390"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5c934-2391"><xref:System.IndexOutOfRangeException> wird ausgelöst, wenn `index` ist negativ oder größer als die obere Grenze der `array`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2391"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the upper bound of `array`.</span></span>  
  
 <span data-ttu-id="5c934-2392">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldelem` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2392">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2393">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="5c934-2393">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2394">Lädt das Element mit dem Typ <see langword="native int" /> an einem angegebenen Arrayindex, an die oberste Position des Auswertungsstapels als eine <see langword="native int" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2394">Loads the element with type <see langword="native int" /> at a specified array index onto the top of the evaluation stack as a <see langword="native int" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2395">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2395">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2396">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2396">Format</span></span>|<span data-ttu-id="5c934-2397">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2397">Assembly Format</span></span>|<span data-ttu-id="5c934-2398">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2398">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2399">97</span><span class="sxs-lookup"><span data-stu-id="5c934-2399">97</span></span>|<span data-ttu-id="5c934-2400">ldelem.i</span><span class="sxs-lookup"><span data-stu-id="5c934-2400">ldelem.i</span></span>|<span data-ttu-id="5c934-2401">Lädt das Element mit dem Typ `native int` am `index` an die oberste Position des Stapels als eine `native int`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2401">Loads the element with type `native int` at `index` onto the top of the stack as a `native int`.</span></span>|  
  
 <span data-ttu-id="5c934-2402">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2402">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2403">Ein Verweis auf eine `array` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2403">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-2404">Ein Indexwert `index` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2404">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-2405">`index` und `array` werden aus dem Stapel per POP entfernt den Wert an Position abgelegt `index` in `array` gesucht wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-2405">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="5c934-2406">Der Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2406">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2407">Die `ldelem.i` Anweisung lädt den Wert der Elements mit dem Index `index` (Typ `native int`) in der nullbasierten, eindimensionalen Array `array` und platziert sie oben im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2407">The `ldelem.i` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="5c934-2408">Arrays sind Objekte, und daher ein Wert vom Typ dargestellt `O`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2408">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="5c934-2409">Der Rückgabewert für `ldelem.i` ist `native int`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2409">The return value for `ldelem.i` is `native int`.</span></span>  
  
 <span data-ttu-id="5c934-2410">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` (nicht `native int`) werden beim Laden auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2410">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5c934-2411"><xref:System.NullReferenceException> wird ausgelöst, wenn `array` ist ein null-Verweis.</span><span class="sxs-lookup"><span data-stu-id="5c934-2411"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5c934-2412"><xref:System.ArrayTypeMismatchException> wird ausgelöst, wenn `array` errichtet keine Elemente des erforderlichen Typs.</span><span class="sxs-lookup"><span data-stu-id="5c934-2412"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5c934-2413"><xref:System.IndexOutOfRangeException> wird ausgelöst, wenn `index` ist negativ oder größer als die Grenze der `array`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2413"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5c934-2414">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldelem.i` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2414">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2415">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2415">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2416">Lädt das Element mit dem Typ <see langword="int8" /> an einem angegebenen Arrayindex, an die oberste Position des Auswertungsstapels als ein <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2416">Loads the element with type <see langword="int8" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2417">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2417">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2418">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2418">Format</span></span>|<span data-ttu-id="5c934-2419">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2419">Assembly Format</span></span>|<span data-ttu-id="5c934-2420">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2420">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2421">90</span><span class="sxs-lookup"><span data-stu-id="5c934-2421">90</span></span>|<span data-ttu-id="5c934-2422">i1</span><span class="sxs-lookup"><span data-stu-id="5c934-2422">ldelem.i1</span></span>|<span data-ttu-id="5c934-2423">Lädt das Element mit dem Typ `int8` am `index` an die oberste Position des Stapels als ein `int32`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2423">Loads the element with type `int8` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="5c934-2424">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2424">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2425">Ein Verweis auf eine `array` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2425">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-2426">Ein Indexwert `index` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2426">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-2427">`index` und `array` werden aus dem Stapel per POP entfernt den Wert an Position abgelegt `index` in `array` gesucht wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-2427">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="5c934-2428">Der Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2428">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2429">Die `ldelem.i1` Anweisung lädt den Wert der Elements mit dem Index `index` (Typ `native int`) in der nullbasierten, eindimensionalen Array `array` und platziert sie oben im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2429">The `ldelem.i1` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="5c934-2430">Arrays sind Objekte, und daher ein Wert vom Typ dargestellt `O`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2430">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="5c934-2431">Der Rückgabewert für `ldelem.i1` ist `int8`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2431">The return value for `ldelem.i1` is `int8`.</span></span>  
  
 <span data-ttu-id="5c934-2432">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` (nicht `native int`) werden beim Laden auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2432">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5c934-2433"><xref:System.NullReferenceException> wird ausgelöst, wenn `array` ist ein null-Verweis.</span><span class="sxs-lookup"><span data-stu-id="5c934-2433"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5c934-2434"><xref:System.ArrayTypeMismatchException> wird ausgelöst, wenn `array` errichtet keine Elemente des erforderlichen Typs.</span><span class="sxs-lookup"><span data-stu-id="5c934-2434"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5c934-2435"><xref:System.IndexOutOfRangeException> wird ausgelöst, wenn `index` ist negativ oder größer als die Grenze der `array`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2435"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5c934-2436">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldelem.i1` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2436">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i1` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2437">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2437">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2438">Lädt das Element mit dem Typ <see langword="int16" /> an einem angegebenen Arrayindex, an die oberste Position des Auswertungsstapels als ein <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2438">Loads the element with type <see langword="int16" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2439">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2439">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2440">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2440">Format</span></span>|<span data-ttu-id="5c934-2441">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2441">Assembly Format</span></span>|<span data-ttu-id="5c934-2442">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2442">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2443">92</span><span class="sxs-lookup"><span data-stu-id="5c934-2443">92</span></span>|<span data-ttu-id="5c934-2444">i2</span><span class="sxs-lookup"><span data-stu-id="5c934-2444">ldelem.i2</span></span>|<span data-ttu-id="5c934-2445">Lädt das Element mit dem Typ `int16` am `index` an die oberste Position des Stapels als ein `int32`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2445">Loads the element with type `int16` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="5c934-2446">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2446">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2447">Ein Verweis auf eine `array` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2447">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-2448">Ein Indexwert `index` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2448">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-2449">`index` und `array` werden aus dem Stapel per POP entfernt den Wert an Position abgelegt `index` in `array` gesucht wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-2449">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="5c934-2450">Der Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2450">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2451">Die `ldelem.i2` Anweisung lädt den Wert der Elements mit dem Index `index` (Typ `native int`) in der nullbasierten, eindimensionalen Array `array` und platziert sie oben im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2451">The `ldelem.i2` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="5c934-2452">Arrays sind Objekte, und daher ein Wert vom Typ dargestellt `O`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2452">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="5c934-2453">Der Rückgabewert für `ldelem.i2` ist `int16`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2453">The return value for `ldelem.i2` is `int16`.</span></span>  
  
 <span data-ttu-id="5c934-2454">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` (nicht `native int`) werden beim Laden auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2454">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5c934-2455"><xref:System.NullReferenceException> wird ausgelöst, wenn `array` ist ein null-Verweis.</span><span class="sxs-lookup"><span data-stu-id="5c934-2455"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5c934-2456"><xref:System.ArrayTypeMismatchException> wird ausgelöst, wenn `array` errichtet keine Elemente des erforderlichen Typs.</span><span class="sxs-lookup"><span data-stu-id="5c934-2456"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5c934-2457"><xref:System.IndexOutOfRangeException> wird ausgelöst, wenn `index` ist negativ oder größer als die Grenze der `array`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2457"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5c934-2458">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldelem.i2` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2458">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i2` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2459">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2459">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2460">Lädt das Element mit dem Typ <see langword="int32" /> an einem angegebenen Arrayindex, an die oberste Position des Auswertungsstapels als ein <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2460">Loads the element with type <see langword="int32" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2461">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2461">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2462">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2462">Format</span></span>|<span data-ttu-id="5c934-2463">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2463">Assembly Format</span></span>|<span data-ttu-id="5c934-2464">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2464">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2465">94</span><span class="sxs-lookup"><span data-stu-id="5c934-2465">94</span></span>|<span data-ttu-id="5c934-2466">i4</span><span class="sxs-lookup"><span data-stu-id="5c934-2466">ldelem.i4</span></span>|<span data-ttu-id="5c934-2467">Lädt das Element mit dem Typ `int32` am `index` an die oberste Position des Stapels als ein `int32`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2467">Loads the element with type `int32` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="5c934-2468">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2468">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2469">Ein Verweis auf eine `array` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2469">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-2470">Ein Indexwert `index` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2470">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-2471">`index` und `array` werden aus dem Stapel per POP entfernt den Wert an Position abgelegt `index` in `array` gesucht wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-2471">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="5c934-2472">Der Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2472">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2473">Die `ldelem.i4` Anweisung lädt den Wert der Elements mit dem Index `index` (Typ `native int`) in der nullbasierten, eindimensionalen Array `array` und platziert sie oben im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2473">The `ldelem.i4` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="5c934-2474">Arrays sind Objekte, und daher ein Wert vom Typ dargestellt `O`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2474">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="5c934-2475">Der Rückgabewert für `ldelem.i4` ist `int32`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2475">The return value for `ldelem.i4` is `int32`.</span></span>  
  
 <span data-ttu-id="5c934-2476">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` (nicht `native int`) werden beim Laden auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2476">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5c934-2477"><xref:System.NullReferenceException> wird ausgelöst, wenn `array` ist ein null-Verweis.</span><span class="sxs-lookup"><span data-stu-id="5c934-2477"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5c934-2478"><xref:System.ArrayTypeMismatchException> wird ausgelöst, wenn `array` errichtet keine Elemente des erforderlichen Typs.</span><span class="sxs-lookup"><span data-stu-id="5c934-2478"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5c934-2479"><xref:System.IndexOutOfRangeException> wird ausgelöst, wenn `index` ist negativ oder größer als die Grenze der `array`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2479"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5c934-2480">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldelem.i4` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2480">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i4` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2481">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2481">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2482">Lädt das Element mit dem Typ <see langword="int64" /> an einem angegebenen Arrayindex, an die oberste Position des Auswertungsstapels als ein <see langword="int64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2482">Loads the element with type <see langword="int64" /> at a specified array index onto the top of the evaluation stack as an <see langword="int64" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2483">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2483">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2484">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2484">Format</span></span>|<span data-ttu-id="5c934-2485">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2485">Assembly Format</span></span>|<span data-ttu-id="5c934-2486">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2486">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2487">96</span><span class="sxs-lookup"><span data-stu-id="5c934-2487">96</span></span>|<span data-ttu-id="5c934-2488">i8</span><span class="sxs-lookup"><span data-stu-id="5c934-2488">ldelem.i8</span></span>|<span data-ttu-id="5c934-2489">Lädt das Element mit dem Typ `int64` am `index` an die oberste Position des Stapels als ein `int64`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2489">Loads the element with type `int64` at `index` onto the top of the stack as an `int64`.</span></span>|  
  
 <span data-ttu-id="5c934-2490">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2490">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2491">Ein Verweis auf eine `array` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2491">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-2492">Ein Indexwert `index` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2492">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-2493">`index` und `array` werden aus dem Stapel per POP entfernt den Wert an Position abgelegt `index` in `array` gesucht wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-2493">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="5c934-2494">Der Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2494">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2495">Die `ldelem.i8` Anweisung lädt den Wert der Elements mit dem Index `index` (Typ `native int`) in der nullbasierten, eindimensionalen Array `array` und platziert sie oben im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2495">The `ldelem.i8` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="5c934-2496">Arrays sind Objekte, und daher ein Wert vom Typ dargestellt `O`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2496">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="5c934-2497">Der Rückgabewert für `ldelem.i8` ist `int64`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2497">The return value for `ldelem.i8` is `int64`.</span></span>  
  
 <span data-ttu-id="5c934-2498">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` (nicht `native int`) werden beim Laden auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2498">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5c934-2499"><xref:System.NullReferenceException> wird ausgelöst, wenn `array` ist ein null-Verweis.</span><span class="sxs-lookup"><span data-stu-id="5c934-2499"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5c934-2500"><xref:System.ArrayTypeMismatchException> wird ausgelöst, wenn `array` errichtet keine Elemente des erforderlichen Typs.</span><span class="sxs-lookup"><span data-stu-id="5c934-2500"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5c934-2501"><xref:System.IndexOutOfRangeException> wird ausgelöst, wenn `index` ist negativ oder größer als die Grenze der `array`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2501"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5c934-2502">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldelem.i8` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2502">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i8` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2503">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2503">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2504">Lädt das Element mit dem Typ <see langword="float32" /> an einem angegebenen Arrayindex, an die oberste Position des Auswertungsstapels als Typ <see langword="F" /> (Float).</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2504">Loads the element with type <see langword="float32" /> at a specified array index onto the top of the evaluation stack as type <see langword="F" /> (float).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2505">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2505">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2506">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2506">Format</span></span>|<span data-ttu-id="5c934-2507">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2507">Assembly Format</span></span>|<span data-ttu-id="5c934-2508">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2508">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2509">98</span><span class="sxs-lookup"><span data-stu-id="5c934-2509">98</span></span>|<span data-ttu-id="5c934-2510">R4</span><span class="sxs-lookup"><span data-stu-id="5c934-2510">ldelem.r4</span></span>|<span data-ttu-id="5c934-2511">Lädt das Element mit dem Typ `float32` am `index` an die oberste Position des Stapels als Typ `F`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2511">Loads the element with type `float32` at `index` onto the top of the stack as a type `F`.</span></span>|  
  
 <span data-ttu-id="5c934-2512">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2512">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2513">Ein Verweis auf eine `array` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2513">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-2514">Ein Indexwert `index` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2514">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-2515">`index` und `array` werden aus dem Stapel per POP entfernt den Wert an Position abgelegt `index` in `array` gesucht wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-2515">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="5c934-2516">Der Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2516">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2517">Die `ldelem.r4` Anweisung lädt den Wert der Elements mit dem Index `index` (Typ `native int`) in der nullbasierten, eindimensionalen Array `array` und platziert sie oben im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2517">The `ldelem.r4` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="5c934-2518">Arrays sind Objekte, und daher ein Wert vom Typ dargestellt `O`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2518">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="5c934-2519">Der Rückgabewert für `ldelem.r4` ist `float32`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2519">The return value for `ldelem.r4` is `float32`.</span></span>  
  
 <span data-ttu-id="5c934-2520">Gleitkommazahlen-Punktwerte sind in den Typ konvertiert `F` beim Laden auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2520">Floating-point values are converted to type `F` when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5c934-2521"><xref:System.NullReferenceException> wird ausgelöst, wenn `array` ist ein null-Verweis.</span><span class="sxs-lookup"><span data-stu-id="5c934-2521"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5c934-2522"><xref:System.ArrayTypeMismatchException> wird ausgelöst, wenn `array` errichtet keine Elemente des erforderlichen Typs.</span><span class="sxs-lookup"><span data-stu-id="5c934-2522"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5c934-2523"><xref:System.IndexOutOfRangeException> wird ausgelöst, wenn `index` ist negativ oder größer als die Grenze der `array`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2523"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5c934-2524">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldelem.r4` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2524">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.r4` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2525">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2525">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2526">Lädt das Element mit dem Typ <see langword="float64" /> an einem angegebenen Arrayindex, an die oberste Position des Auswertungsstapels als Typ <see langword="F" /> (Float).</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2526">Loads the element with type <see langword="float64" /> at a specified array index onto the top of the evaluation stack as type <see langword="F" /> (float).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2527">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2527">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2528">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2528">Format</span></span>|<span data-ttu-id="5c934-2529">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2529">Assembly Format</span></span>|<span data-ttu-id="5c934-2530">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2530">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2531">99</span><span class="sxs-lookup"><span data-stu-id="5c934-2531">99</span></span>|<span data-ttu-id="5c934-2532">r8</span><span class="sxs-lookup"><span data-stu-id="5c934-2532">ldelem.r8</span></span>|<span data-ttu-id="5c934-2533">Lädt das Element mit dem Typ `float64` am `index` an die oberste Position des Stapels als Typ `F`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2533">Loads the element with type `float64` at `index` onto the top of the stack as type `F`.</span></span>|  
  
 <span data-ttu-id="5c934-2534">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2534">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2535">Ein Verweis auf eine `array` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2535">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-2536">Ein Indexwert `index` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2536">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-2537">`index` und `array` werden aus dem Stapel per POP entfernt den Wert an Position abgelegt `index` in `array` gesucht wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-2537">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="5c934-2538">Der Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2538">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2539">Die `ldelem.r8` Anweisung lädt den Wert der Elements mit dem Index `index` (Typ `native int`) in der nullbasierten, eindimensionalen Array `array` und platziert sie oben im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2539">The `ldelem.r8` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="5c934-2540">Arrays sind Objekte, und daher ein Wert vom Typ dargestellt `O`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2540">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="5c934-2541">Der Rückgabewert für `ldelem.r8` ist `float64`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2541">The return value for `ldelem.r8` is `float64`.</span></span>  
  
 <span data-ttu-id="5c934-2542">Gleitkommazahlen-Punktwerte sind in den Typ konvertiert `F` beim Laden auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2542">Floating-point values are converted to type `F` when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5c934-2543"><xref:System.NullReferenceException> wird ausgelöst, wenn `array` ist ein null-Verweis.</span><span class="sxs-lookup"><span data-stu-id="5c934-2543"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5c934-2544"><xref:System.ArrayTypeMismatchException> wird ausgelöst, wenn `array` errichtet keine Elemente des erforderlichen Typs.</span><span class="sxs-lookup"><span data-stu-id="5c934-2544"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5c934-2545"><xref:System.IndexOutOfRangeException> wird ausgelöst, wenn `index` ist negativ oder größer als die Grenze der `array`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2545"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5c934-2546">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldelem.r8` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2546">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.r8` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2547">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2547">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2548">Lädt das Element mit Objektverweis an einem angegebenen Arrayindex, an die oberste Position des Auswertungsstapels als Typ <see langword="O" /> (Objektverweis).</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2548">Loads the element containing an object reference at a specified array index onto the top of the evaluation stack as type <see langword="O" /> (object reference).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2549">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2549">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2550">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2550">Format</span></span>|<span data-ttu-id="5c934-2551">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2551">Assembly Format</span></span>|<span data-ttu-id="5c934-2552">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2552">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2553">9A</span><span class="sxs-lookup"><span data-stu-id="5c934-2553">9A</span></span>|<span data-ttu-id="5c934-2554">ldelem.ref</span><span class="sxs-lookup"><span data-stu-id="5c934-2554">ldelem.ref</span></span>|<span data-ttu-id="5c934-2555">Lädt das Element mit Objektverweis an `index` an die oberste Position des Stapels als Typ `O`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2555">Loads the element with an object reference at `index` onto the top of the stack as type `O`.</span></span>|  
  
 <span data-ttu-id="5c934-2556">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2556">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2557">Ein Verweis auf eine `array` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2557">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-2558">Ein Indexwert `index` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2558">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-2559">`index` und `array` werden aus dem Stapel per POP entfernt den Wert an Position abgelegt `index` in `array` gesucht wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-2559">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="5c934-2560">Der Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2560">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2561">Die `ldelem.ref` Anweisung lädt den Wert der Elements mit dem Index `index` (Typ `native int`) in der nullbasierten, eindimensionalen Array `array` und platziert sie oben im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2561">The `ldelem.ref` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="5c934-2562">Arrays sind Objekte, und daher ein Wert vom Typ dargestellt `O`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2562">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="5c934-2563">Der Rückgabewert für `ldelem.ref` Typ `O` (Objektverweis).</span><span class="sxs-lookup"><span data-stu-id="5c934-2563">The return value for `ldelem.ref` is type `O` (object reference).</span></span>  
  
 <span data-ttu-id="5c934-2564"><xref:System.NullReferenceException> wird ausgelöst, wenn `array` ist ein null-Verweis.</span><span class="sxs-lookup"><span data-stu-id="5c934-2564"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5c934-2565"><xref:System.ArrayTypeMismatchException> wird ausgelöst, wenn `array` errichtet keine Elemente des erforderlichen Typs.</span><span class="sxs-lookup"><span data-stu-id="5c934-2565"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5c934-2566"><xref:System.IndexOutOfRangeException> wird ausgelöst, wenn `index` ist negativ oder größer als die Grenze der `array`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2566"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5c934-2567">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldelem.ref` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2567">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.ref` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2568">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2568">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2569">Lädt das Element mit dem Typ <see langword="unsigned int8" /> an einem angegebenen Arrayindex, an die oberste Position des Auswertungsstapels als ein <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2569">Loads the element with type <see langword="unsigned int8" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2570">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2570">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2571">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2571">Format</span></span>|<span data-ttu-id="5c934-2572">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2572">Assembly Format</span></span>|<span data-ttu-id="5c934-2573">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2573">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2574">91</span><span class="sxs-lookup"><span data-stu-id="5c934-2574">91</span></span>|<span data-ttu-id="5c934-2575">ldelem. U1</span><span class="sxs-lookup"><span data-stu-id="5c934-2575">ldelem.u1</span></span>|<span data-ttu-id="5c934-2576">Lädt das Element mit dem Typ `unsigned int8` am `index` an die oberste Position des Stapels als ein `int32`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2576">Loads the element with type `unsigned int8` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="5c934-2577">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2577">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2578">Ein Verweis auf eine `array` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2578">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-2579">Ein Indexwert `index` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2579">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-2580">`index` und `array` werden aus dem Stapel per POP entfernt den Wert an Position abgelegt `index` in `array` gesucht wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-2580">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="5c934-2581">Der Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2581">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2582">Die `ldelem.u1` Anweisung lädt den Wert der Elements mit dem Index `index` (Typ `native int`) in der nullbasierten, eindimensionalen Array `array` und platziert sie oben im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2582">The `ldelem.u1` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="5c934-2583">Arrays sind Objekte, und daher ein Wert vom Typ dargestellt `O`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2583">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="5c934-2584">Der Rückgabewert für `ldelem.u1` ist `int8`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2584">The return value for `ldelem.u1` is `int8`.</span></span>  
  
 <span data-ttu-id="5c934-2585">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` (nicht `native int`) werden beim Laden auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2585">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5c934-2586"><xref:System.NullReferenceException> wird ausgelöst, wenn `array` ist ein null-Verweis.</span><span class="sxs-lookup"><span data-stu-id="5c934-2586"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5c934-2587"><xref:System.ArrayTypeMismatchException> wird ausgelöst, wenn `array` errichtet keine Elemente des erforderlichen Typs.</span><span class="sxs-lookup"><span data-stu-id="5c934-2587"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5c934-2588"><xref:System.IndexOutOfRangeException> wird ausgelöst, wenn `index` ist negativ oder größer als die Grenze der `array`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2588"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5c934-2589">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldelem.u1` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2589">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.u1` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2590">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2590">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2591">Lädt das Element mit dem Typ <see langword="unsigned int16" /> an einem angegebenen Arrayindex, an die oberste Position des Auswertungsstapels als ein <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2591">Loads the element with type <see langword="unsigned int16" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2592">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2592">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2593">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2593">Format</span></span>|<span data-ttu-id="5c934-2594">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2594">Assembly Format</span></span>|<span data-ttu-id="5c934-2595">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2595">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2596">93</span><span class="sxs-lookup"><span data-stu-id="5c934-2596">93</span></span>|<span data-ttu-id="5c934-2597">U2</span><span class="sxs-lookup"><span data-stu-id="5c934-2597">ldelem.u2</span></span>|<span data-ttu-id="5c934-2598">Lädt das Element mit dem Typ `unsigned int16` am Index, an die oberste Position des Stapels als ein `int32`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2598">Loads the element with type `unsigned int16` at index onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="5c934-2599">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2599">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2600">Ein Verweis auf eine `array` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2600">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-2601">Ein Indexwert `index` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2601">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-2602">`index` und `array` werden aus dem Stapel per POP entfernt den Wert an Position abgelegt `index` in `array` gesucht wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-2602">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="5c934-2603">Der Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2603">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2604">Die `ldelem.u2` Anweisung lädt den Wert der Elements mit dem Index `index` (Typ `native int`) in der nullbasierten, eindimensionalen Array `array` und platziert sie oben im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2604">The `ldelem.u2` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="5c934-2605">Arrays sind Objekte, und daher ein Wert vom Typ dargestellt `O`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2605">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="5c934-2606">Der Rückgabewert für `ldelem.u2` ist `int16`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2606">The return value for `ldelem.u2` is `int16`.</span></span>  
  
 <span data-ttu-id="5c934-2607">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` (nicht `native int`) werden beim Laden auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2607">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5c934-2608"><xref:System.NullReferenceException> wird ausgelöst, wenn `array` ist ein null-Verweis.</span><span class="sxs-lookup"><span data-stu-id="5c934-2608"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5c934-2609"><xref:System.ArrayTypeMismatchException> wird ausgelöst, wenn `array` errichtet keine Elemente des erforderlichen Typs.</span><span class="sxs-lookup"><span data-stu-id="5c934-2609"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5c934-2610"><xref:System.IndexOutOfRangeException> wird ausgelöst, wenn `index` ist negativ oder größer als die Grenze der `array`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2610"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5c934-2611">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldelem.u2` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2611">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.u2` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2612">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2612">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2613">Lädt das Element mit dem Typ <see langword="unsigned int32" /> an einem angegebenen Arrayindex, an die oberste Position des Auswertungsstapels als ein <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2613">Loads the element with type <see langword="unsigned int32" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2614">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2614">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2615">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2615">Format</span></span>|<span data-ttu-id="5c934-2616">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2616">Assembly Format</span></span>|<span data-ttu-id="5c934-2617">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2617">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2618">95</span><span class="sxs-lookup"><span data-stu-id="5c934-2618">95</span></span>|<span data-ttu-id="5c934-2619">U4</span><span class="sxs-lookup"><span data-stu-id="5c934-2619">ldelem.u4</span></span>|<span data-ttu-id="5c934-2620">Lädt das Element mit dem Typ `unsigned int32` am Index, an die oberste Position des Stapels als ein `int32`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2620">Loads the element with type `unsigned int32` at index onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="5c934-2621">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2621">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2622">Ein Verweis auf eine `array` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2622">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-2623">Ein Indexwert `index` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2623">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-2624">`index` und `array` werden aus dem Stapel per POP entfernt den Wert an Position abgelegt `index` in `array` gesucht wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-2624">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="5c934-2625">Der Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2625">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2626">Die `ldelem.u4` Anweisung lädt den Wert der Elements mit dem Index `index` (Typ `native int`) in der nullbasierten, eindimensionalen Array `array` und platziert sie oben im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2626">The `ldelem.u4` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="5c934-2627">Arrays sind Objekte, und daher ein Wert vom Typ dargestellt `O`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2627">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="5c934-2628">Der Rückgabewert für `ldelem.u4` ist `int32`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2628">The return value for `ldelem.u4` is `int32`.</span></span>  
  
 <span data-ttu-id="5c934-2629">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` (nicht `native int`) werden beim Laden auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2629">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5c934-2630"><xref:System.NullReferenceException> wird ausgelöst, wenn `array` ist ein null-Verweis.</span><span class="sxs-lookup"><span data-stu-id="5c934-2630"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5c934-2631"><xref:System.ArrayTypeMismatchException> wird ausgelöst, wenn Arrays nicht Elemente des erforderlichen Typs enthält.</span><span class="sxs-lookup"><span data-stu-id="5c934-2631"><xref:System.ArrayTypeMismatchException> is thrown if array does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5c934-2632"><xref:System.IndexOutOfRangeException> wird ausgelöst, wenn `index` ist negativ oder größer als die Grenze der `array`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2632"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5c934-2633">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldelem.u4` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2633">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.u4` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2634">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2634">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelema">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelema;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelema" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelema" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelema As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelema;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelema : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelema" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2635">Lädt die Adresse des Arrayelements an einem angegebenen Arrayindex, an die oberste Position des Auswertungsstapels als Typ <see langword="&amp;" /> (verwalteter Zeiger).</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2635">Loads the address of the array element at a specified array index onto the top of the evaluation stack as type <see langword="&amp;" /> (managed pointer).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2636">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2636">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2637">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2637">Format</span></span>|<span data-ttu-id="5c934-2638">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2638">Assembly Format</span></span>|<span data-ttu-id="5c934-2639">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2639">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2640">8F &LT; `T` ></span><span class="sxs-lookup"><span data-stu-id="5c934-2640">8F < `T` ></span></span>|<span data-ttu-id="5c934-2641">ldelema `class`</span><span class="sxs-lookup"><span data-stu-id="5c934-2641">ldelema `class`</span></span>|<span data-ttu-id="5c934-2642">Lädt die Adresse des Arrayelements an `index` an die oberste Position des Auswertungsstapels als Typ `&` (verwalteter Zeiger).</span><span class="sxs-lookup"><span data-stu-id="5c934-2642">Loads the address of the array element at `index` onto the top of the evaluation stack as type `&` (managed pointer).</span></span>|  
  
 <span data-ttu-id="5c934-2643">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2643">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2644">Ein Verweis auf eine `array` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2644">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-2645">Ein Indexwert `index` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2645">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-2646">`index` und `array` , die von den Stapel geholt werden an der Position gespeicherte Adresse `index` in `array` gesucht wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-2646">`index` and `array` are popped from the stack; the address stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="5c934-2647">Die Adresse wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2647">The address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2648">Die `ldelema` dient zum Abrufen der Adresse eines Objekts an einem bestimmten Index in ein Array von Objekten (des Typs `class`).</span><span class="sxs-lookup"><span data-stu-id="5c934-2648">The `ldelema` is used to retrieve the address of an object at a particular index in an array of objects (of type `class`).</span></span> <span data-ttu-id="5c934-2649">Die `ldelema` Anweisung lädt die Adresse der den Wert am Index `index` (Typ `native int`) in der nullbasierten, eindimensionalen Array `array` und platziert sie oben im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2649">The `ldelema` instruction loads the address of the value at index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="5c934-2650">Arrays sind Objekte, und daher ein Wert vom Typ dargestellt `O`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2650">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="5c934-2651">Der Wert muss vom Typ `class` mit der Anweisung übergeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-2651">The value must be of type `class` passed with the instruction.</span></span>  
  
 <span data-ttu-id="5c934-2652">Der Rückgabewert für `ldelema` ist ein verwalteter Zeiger (Typ `&`).</span><span class="sxs-lookup"><span data-stu-id="5c934-2652">The return value for `ldelema` is a managed pointer (type `&`).</span></span>  
  
 <span data-ttu-id="5c934-2653">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` (nicht `native int`) werden beim Laden auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2653">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5c934-2654"><xref:System.NullReferenceException> wird ausgelöst, wenn `array` ist ein null-Verweis.</span><span class="sxs-lookup"><span data-stu-id="5c934-2654"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5c934-2655"><xref:System.ArrayTypeMismatchException> wird ausgelöst, wenn `array` errichtet keine Elemente des erforderlichen Typs.</span><span class="sxs-lookup"><span data-stu-id="5c934-2655"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5c934-2656"><xref:System.IndexOutOfRangeException> wird ausgelöst, wenn `index` ist negativ oder größer als die Grenze der `array`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2656"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5c934-2657">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldelema` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2657">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelema` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2658">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="5c934-2658">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2659">Sucht den Wert eines Felds in dem Objekt, für das sich derzeit ein Verweis auf dem Auswertungsstapel befindet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2659">Finds the value of a field in the object whose reference is currently on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2660">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2660">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2661">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2661">Format</span></span>|<span data-ttu-id="5c934-2662">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2662">Assembly Format</span></span>|<span data-ttu-id="5c934-2663">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2663">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2664">7B < `T` ></span><span class="sxs-lookup"><span data-stu-id="5c934-2664">7B < `T` ></span></span>|<span data-ttu-id="5c934-2665">ldfld `field`</span><span class="sxs-lookup"><span data-stu-id="5c934-2665">ldfld `field`</span></span>|<span data-ttu-id="5c934-2666">Legt den Wert eines Felds in ein angegebenes Objekt im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2666">Pushes the value of a field in a specified object onto the stack.</span></span>|  
  
 <span data-ttu-id="5c934-2667">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2667">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2668">Ein Objektverweis (oder Zeiger) wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2668">An object reference (or pointer) is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-2669">Der Objektverweis (oder Zeiger) wird vom Stapel geholt. der Wert des angegebenen Felds in dem Objekt wurde gefunden.</span><span class="sxs-lookup"><span data-stu-id="5c934-2669">The object reference (or pointer) is popped from the stack; the value of the specified field in the object is found.</span></span>  
  
3.  <span data-ttu-id="5c934-2670">Der Wert im Feld gespeicherten wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2670">The value stored in the field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2671">Die `ldfld` -Anweisung legt den Wert eines Felds in einem Objekt im Stapel befindet.</span><span class="sxs-lookup"><span data-stu-id="5c934-2671">The `ldfld` instruction pushes the value of a field located in an object onto the stack.</span></span> <span data-ttu-id="5c934-2672">Das Objekt muss auf dem Stapel als einen Objektverweis (Typ `O`), einen verwalteten Zeiger (Typ `&`), einen nicht verwalteten Zeiger (Typ `native int`), einen flüchtigen Zeiger (Typ `*`), oder eine Instanz eines Werttyps.</span><span class="sxs-lookup"><span data-stu-id="5c934-2672">The object must be on the stack as an object reference (type `O`), a managed pointer (type `&`), an unmanaged pointer (type `native int`), a transient pointer (type `*`), or an instance of a value type.</span></span> <span data-ttu-id="5c934-2673">Die Verwendung eines nicht verwalteten Zeigers ist nicht in überprüfbarem Code zulässig.</span><span class="sxs-lookup"><span data-stu-id="5c934-2673">The use of an unmanaged pointer is not permitted in verifiable code.</span></span> <span data-ttu-id="5c934-2674">Das Feld des Objekts wird durch ein Metadatentoken angegeben, die auf einen Feldmember verweisen muss.</span><span class="sxs-lookup"><span data-stu-id="5c934-2674">The object's field is specified by a metadata token that must refer to a field member.</span></span> <span data-ttu-id="5c934-2675">Der Rückgabetyp ist identisch mit dem Feld zugeordnet.</span><span class="sxs-lookup"><span data-stu-id="5c934-2675">The return type is the same as the one associated with the field.</span></span> <span data-ttu-id="5c934-2676">Das Feld kann ein Instanzfeld (in diesem Fall das Objekt kein null-Verweis sein muss) oder ein statisches Feld sein.</span><span class="sxs-lookup"><span data-stu-id="5c934-2676">The field may be either an instance field (in which case the object must not be a null reference) or a static field.</span></span>  
  
 <span data-ttu-id="5c934-2677">Die `ldfld` Anweisung kann vorangestellt werden eine oder beide der <xref:System.Reflection.Emit.OpCodes.Unaligned> und <xref:System.Reflection.Emit.OpCodes.Volatile> Präfixe.</span><span class="sxs-lookup"><span data-stu-id="5c934-2677">The `ldfld` instruction can be preceded by either or both of the <xref:System.Reflection.Emit.OpCodes.Unaligned> and <xref:System.Reflection.Emit.OpCodes.Volatile> prefixes.</span></span>  
  
 <span data-ttu-id="5c934-2678"><xref:System.NullReferenceException> wird ausgelöst, wenn das Objekt null ist, und das Feld nicht statisch ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-2678"><xref:System.NullReferenceException> is thrown if the object is null and the field is not static.</span></span>  
  
 <span data-ttu-id="5c934-2679"><xref:System.MissingFieldException> wird ausgelöst, wenn das angegebene Feld in den Metadaten nicht gefunden wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-2679"><xref:System.MissingFieldException> is thrown if the specified field is not found in the metadata.</span></span> <span data-ttu-id="5c934-2680">Dies ist in der Regel aktiviert, wenn Microsoft Intermediate Language (MSIL)-Anweisungen nicht zur Laufzeit in nativen Code konvertiert werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-2680">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at run time.</span></span>  
  
 <span data-ttu-id="5c934-2681">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldfld` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2681">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldfld` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2682">ILGenerator.Emit(OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="5c934-2682">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldflda">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldflda;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldflda" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldflda" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldflda As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldflda;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldflda : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldflda" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2683">Sucht die Adresse eines Felds in dem Objekt, für das sich derzeit ein Verweis auf dem Auswertungsstapel befindet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2683">Finds the address of a field in the object whose reference is currently on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2684">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2684">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2685">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2685">Format</span></span>|<span data-ttu-id="5c934-2686">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2686">Assembly Format</span></span>|<span data-ttu-id="5c934-2687">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2687">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2688">7C < `T` ></span><span class="sxs-lookup"><span data-stu-id="5c934-2688">7C < `T` ></span></span>|<span data-ttu-id="5c934-2689">ldflda `field`</span><span class="sxs-lookup"><span data-stu-id="5c934-2689">ldflda `field`</span></span>|<span data-ttu-id="5c934-2690">Legt die Adresse eines `field` in ein angegebenes Objekt im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2690">Pushes the address of `field` in a specified object onto the stack.</span></span>|  
  
 <span data-ttu-id="5c934-2691">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2691">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2692">Ein Objektverweis (oder Zeiger) wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2692">An object reference (or pointer) is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-2693">Der Objektverweis (oder Zeiger) wird vom Stapel geholt. die Adresse des angegebenen Felds in dem Objekt wurde gefunden.</span><span class="sxs-lookup"><span data-stu-id="5c934-2693">The object reference (or pointer) is popped from the stack; the address of the specified field in the object is found.</span></span>  
  
3.  <span data-ttu-id="5c934-2694">Die Adresse des angegebenen Felds wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2694">The address of the specified field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2695">Die `ldflda` Anweisung legt die Adresse eines Felds in einem Objekt im Stapel befindet.</span><span class="sxs-lookup"><span data-stu-id="5c934-2695">The `ldflda` instruction pushes the address of a field located in an object onto the stack.</span></span> <span data-ttu-id="5c934-2696">Das Objekt muss auf dem Stapel als einen Objektverweis (Typ `O`), einen verwalteten Zeiger (Typ `&`), einen nicht verwalteten Zeiger (Typ `native int`), einen flüchtigen Zeiger (Typ `*`), oder eine Instanz eines Werttyps.</span><span class="sxs-lookup"><span data-stu-id="5c934-2696">The object must be on the stack as an object reference (type `O`), a managed pointer (type `&`), an unmanaged pointer (type `native int`), a transient pointer (type `*`), or an instance of a value type.</span></span> <span data-ttu-id="5c934-2697">Die Verwendung eines nicht verwalteten Zeigers ist nicht in überprüfbarem Code zulässig.</span><span class="sxs-lookup"><span data-stu-id="5c934-2697">The use of an unmanaged pointer is not permitted in verifiable code.</span></span> <span data-ttu-id="5c934-2698">Das Feld des Objekts wird durch ein Metadatentoken angegeben, die auf einen Feldmember verweisen muss.</span><span class="sxs-lookup"><span data-stu-id="5c934-2698">The object's field is specified by a metadata token that must refer to a field member.</span></span>  
  
 <span data-ttu-id="5c934-2699">Der Rückgabewert von `ldflda` ist ein verwalteter Zeiger (Typ `&`), wenn das Objekt wird als ein nicht verwalteter Zeiger in den Stapel abgelegt, in diesem Fall die Absenderadresse ist auch ein nicht verwalteter Zeiger (Typ `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-2699">The value returned by `ldflda` is a managed pointer (type `&`) unless the object is pushed onto the stack as an unmanaged pointer, in which case the return address is also an unmanaged pointer (type `native int`).</span></span>  
  
 <span data-ttu-id="5c934-2700">Die `ldflda` Anweisung kann vorangestellt werden eine oder beide der <xref:System.Reflection.Emit.OpCodes.Unaligned> und <xref:System.Reflection.Emit.OpCodes.Volatile> Präfixe.</span><span class="sxs-lookup"><span data-stu-id="5c934-2700">The `ldflda` instruction can be preceded by either or both of the <xref:System.Reflection.Emit.OpCodes.Unaligned> and <xref:System.Reflection.Emit.OpCodes.Volatile> prefixes.</span></span>  
  
 <span data-ttu-id="5c934-2701"><xref:System.InvalidOperationException> wird ausgelöst, wenn das Objekt nicht innerhalb der Anwendungsdomäne ist von dem sie zugegriffen wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-2701"><xref:System.InvalidOperationException> is thrown if the object is not within the application domain from which it is being accessed.</span></span> <span data-ttu-id="5c934-2702">Die Adresse eines Felds, das nicht innerhalb der Zugriff auf die Anwendungsdomäne ist, kann nicht geladen werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-2702">The address of a field that is not inside the accessing application domain cannot be loaded.</span></span>  
  
 <span data-ttu-id="5c934-2703"><xref:System.NullReferenceException> wird ausgelöst, wenn das Objekt null ist, und das Feld nicht statisch ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-2703"><xref:System.NullReferenceException> is thrown if the object is null and the field is not static.</span></span>  
  
 <span data-ttu-id="5c934-2704"><xref:System.MissingFieldException> wird ausgelöst, wenn das angegebene Feld in den Metadaten nicht gefunden wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-2704"><xref:System.MissingFieldException> is thrown if the specified field is not found in the metadata.</span></span> <span data-ttu-id="5c934-2705">Dies ist in der Regel aktiviert, wenn Microsoft Intermediate Language (MSIL)-Anweisungen nicht zur Laufzeit in nativen Code konvertiert werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-2705">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at run time.</span></span>  
  
 <span data-ttu-id="5c934-2706">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldflda` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2706">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldflda` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2707">ILGenerator.Emit(OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="5c934-2707">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldftn">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldftn;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldftn" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldftn" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldftn As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldftn;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldftn : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldftn" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2708">Legt einen nicht verwalteten Zeiger (Typ <see langword="native int" />) auf den systemeigenen Code implementiert eine bestimmte Methode auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2708">Pushes an unmanaged pointer (type <see langword="native int" />) to the native code implementing a specific method onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2709">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2709">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2710">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2710">Format</span></span>|<span data-ttu-id="5c934-2711">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2711">Assembly Format</span></span>|<span data-ttu-id="5c934-2712">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2712">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2713">FE 06 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5c934-2713">FE 06 < `T` ></span></span>|<span data-ttu-id="5c934-2714">ldftn `method`</span><span class="sxs-lookup"><span data-stu-id="5c934-2714">ldftn `method`</span></span>|<span data-ttu-id="5c934-2715">Legt einen Zeiger auf eine Methode verweist `method` auf dem Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2715">Pushes a pointer to a method referenced by `method` on the stack.</span></span>|  
  
 <span data-ttu-id="5c934-2716">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2716">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2717">Der nicht verwaltete Zeiger auf eine bestimmte Methode wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2717">The unmanaged pointer to a specific method is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2718">Die spezifische Methode (`method`) kann aufgerufen werden, mithilfe der <xref:System.Reflection.Emit.OpCodes.Calli> Anweisung, wenn er verweist auf eine verwaltete Methode (oder einen Stub, der Übergang von verwaltetem zu nicht verwaltetem Code).</span><span class="sxs-lookup"><span data-stu-id="5c934-2718">The specific method (`method`) can be called using the <xref:System.Reflection.Emit.OpCodes.Calli> instruction if it references a managed method (or a stub that transitions from managed to unmanaged code).</span></span>  
  
 <span data-ttu-id="5c934-2719">Der zurückgegebene Wert zeigt in systemeigenen Code mit der CLR, die Aufrufkonvention.</span><span class="sxs-lookup"><span data-stu-id="5c934-2719">The value returned points to native code using the CLR calling convention.</span></span> <span data-ttu-id="5c934-2720">Diese Methodenzeiger sollten nicht in nicht verwalteten nativen Code als Rückrufroutine übergeben werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-2720">This method pointer should not be passed to unmanaged native code as a callback routine.</span></span>  
  
 <span data-ttu-id="5c934-2721">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldftn` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2721">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldftn` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2722">ILGenerator.Emit (OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="5c934-2722">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2723">Lädt einen Wert vom Typ <see langword="native int" /> als eine <see langword="native int" /> indirekt auf dem Auswertungsstapel Stapeln.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2723">Loads a value of type <see langword="native int" /> as a <see langword="native int" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2724">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2724">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2725">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2725">Format</span></span>|<span data-ttu-id="5c934-2726">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2726">Assembly Format</span></span>|<span data-ttu-id="5c934-2727">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2727">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2728">4D</span><span class="sxs-lookup"><span data-stu-id="5c934-2728">4D</span></span>|<span data-ttu-id="5c934-2729">ldind.i</span><span class="sxs-lookup"><span data-stu-id="5c934-2729">ldind.i</span></span>|<span data-ttu-id="5c934-2730">Lädt die `native int` Wert unter Adresse `addr` im Stapel als eine `native int`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2730">Loads the `native int` value at address `addr` onto the stack as a `native int`.</span></span>|  
  
 <span data-ttu-id="5c934-2731">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2731">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2732">Eine Adresse wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2732">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-2733">Die Adresse wird vom Stapel geholt. der Wert bei der Adresse wird abgerufen.</span><span class="sxs-lookup"><span data-stu-id="5c934-2733">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="5c934-2734">Der abgerufene Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2734">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2735">Die `ldind.i` -Anweisung indirekt lädt eine `native int` Wert aus der angegebenen Adresse (des Typs `native int`, `&`, oder \*) als in den Stapel eine `native int`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2735">The `ldind.i` instruction indirectly loads a `native int` value from the specified address (of type `native int`, `&`, or \*) onto the stack as a `native int`.</span></span>  
  
 <span data-ttu-id="5c934-2736">Alle der `ldind` Anweisungen sind Verknüpfungen für eine <xref:System.Reflection.Emit.OpCodes.Ldobj> Anweisung, die die entsprechende Wertklasse für den integrierten angibt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2736">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="5c934-2737">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` (nicht `native int`) werden beim Laden auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2737">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="5c934-2738">Gleitkommazahlen-Punktwerte werden in konvertiert `F` Geben Sie beim Laden auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2738">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5c934-2739">Ordnungsgemäß formatierte Microsoft Intermediate Language (MSIL) wird sichergestellt, dass die `ldind` Anweisungen werden in Übereinstimmung mit dem Typ des Zeigers verwendet.</span><span class="sxs-lookup"><span data-stu-id="5c934-2739">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="5c934-2740">Die Adresse, die ursprünglich auf dem Stapel abgelegt muss ausgerichtet sein, an die Größe der Objekte auf dem Computer oder ein <xref:System.NullReferenceException> auftreten können (finden Sie unter der <xref:System.Reflection.Emit.OpCodes.Unaligned> Präfix Anleitungen für die vorbeugende Maßnahmen).</span><span class="sxs-lookup"><span data-stu-id="5c934-2740">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="5c934-2741">Die Ergebnisse von allen MSIL-Anweisungen, die Adressen zurückgegeben (z. B. <xref:System.Reflection.Emit.OpCodes.Ldloca> und <xref:System.Reflection.Emit.OpCodes.Ldarga>) sicher ausgerichtet sind.</span><span class="sxs-lookup"><span data-stu-id="5c934-2741">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="5c934-2742">Für Datentypen, die größer als 1 Byte ist die Anordnung der Bytes abhängig von der Ziel-CPU.</span><span class="sxs-lookup"><span data-stu-id="5c934-2742">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="5c934-2743">Code, der die Bytereihenfolge hängt möglicherweise nicht auf allen Plattformen ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-2743">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="5c934-2744"><xref:System.NullReferenceException> kann ausgelöst werden, wenn eine ungültige Adresse erkannt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-2744"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="5c934-2745">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldind.i` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2745">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2746">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2746">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2747">Lädt einen Wert vom Typ <see langword="int8" /> als ein <see langword="int32" /> indirekt auf dem Auswertungsstapel Stapeln.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2747">Loads a value of type <see langword="int8" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2748">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2748">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2749">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2749">Format</span></span>|<span data-ttu-id="5c934-2750">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2750">Assembly Format</span></span>|<span data-ttu-id="5c934-2751">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2751">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2752">46</span><span class="sxs-lookup"><span data-stu-id="5c934-2752">46</span></span>|<span data-ttu-id="5c934-2753">ldind. i1</span><span class="sxs-lookup"><span data-stu-id="5c934-2753">ldind.i1</span></span>|<span data-ttu-id="5c934-2754">Lädt die `int8` Wert unter Adresse `addr` im Stapel als ein `int32`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2754">Loads the `int8` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="5c934-2755">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2755">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2756">Eine Adresse wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2756">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-2757">Die Adresse wird vom Stapel geholt. der Wert bei der Adresse wird abgerufen.</span><span class="sxs-lookup"><span data-stu-id="5c934-2757">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="5c934-2758">Der abgerufene Wert ist auf dem Stapel abgelegt...</span><span class="sxs-lookup"><span data-stu-id="5c934-2758">The fetched value is pushed onto the stack..</span></span>  
  
 <span data-ttu-id="5c934-2759">Die `ldind.i1` -Anweisung indirekt lädt ein `int8` Wert aus der angegebenen Adresse (des Typs `native int`, `&`, oder \*) als in den Stapel eine `int32`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2759">The `ldind.i1` instruction indirectly loads an `int8` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="5c934-2760">Alle der `ldind` Anweisungen sind Verknüpfungen für eine <xref:System.Reflection.Emit.OpCodes.Ldobj> Anweisung, die die entsprechende Wertklasse für den integrierten angibt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2760">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="5c934-2761">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` (nicht `native int`) werden beim Laden auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2761">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="5c934-2762">Gleitkommazahlen-Punktwerte werden in konvertiert `F` Geben Sie beim Laden auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2762">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5c934-2763">Ordnungsgemäß formatierte Microsoft Intermediate Language (MSIL) wird sichergestellt, dass die `ldind` Anweisungen werden in Übereinstimmung mit dem Typ des Zeigers verwendet.</span><span class="sxs-lookup"><span data-stu-id="5c934-2763">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="5c934-2764">Die Adresse, die ursprünglich auf dem Stapel abgelegt muss ausgerichtet sein, an die Größe der Objekte auf dem Computer oder ein <xref:System.NullReferenceException> auftreten können (finden Sie unter der <xref:System.Reflection.Emit.OpCodes.Unaligned> Präfix Anleitungen für die vorbeugende Maßnahmen).</span><span class="sxs-lookup"><span data-stu-id="5c934-2764">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="5c934-2765">Die Ergebnisse von allen MSIL-Anweisungen, die Adressen zurückgegeben (z. B. <xref:System.Reflection.Emit.OpCodes.Ldloca> und <xref:System.Reflection.Emit.OpCodes.Ldarga>) sicher ausgerichtet sind.</span><span class="sxs-lookup"><span data-stu-id="5c934-2765">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="5c934-2766">Für Datentypen, die größer als 1 Byte ist die Anordnung der Bytes abhängig von der Ziel-CPU.</span><span class="sxs-lookup"><span data-stu-id="5c934-2766">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="5c934-2767">Code, der die Bytereihenfolge hängt möglicherweise nicht auf allen Plattformen ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-2767">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="5c934-2768"><xref:System.NullReferenceException> kann ausgelöst werden, wenn eine ungültige Adresse erkannt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-2768"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="5c934-2769">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldind.i1` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2769">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i1` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2770">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2770">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2771">Lädt einen Wert vom Typ <see langword="int16" /> als ein <see langword="int32" /> indirekt auf dem Auswertungsstapel Stapeln.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2771">Loads a value of type <see langword="int16" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2772">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2772">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2773">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2773">Format</span></span>|<span data-ttu-id="5c934-2774">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2774">Assembly Format</span></span>|<span data-ttu-id="5c934-2775">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2775">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2776">48</span><span class="sxs-lookup"><span data-stu-id="5c934-2776">48</span></span>|<span data-ttu-id="5c934-2777">ldind. i2</span><span class="sxs-lookup"><span data-stu-id="5c934-2777">ldind.i2</span></span>|<span data-ttu-id="5c934-2778">Lädt die `int16` Wert unter Adresse `addr` im Stapel als ein `int32`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2778">Loads the `int16` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="5c934-2779">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2779">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2780">Eine Adresse wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2780">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-2781">Die Adresse wird vom Stapel geholt. der Wert bei der Adresse wird abgerufen.</span><span class="sxs-lookup"><span data-stu-id="5c934-2781">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="5c934-2782">Der abgerufene Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2782">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2783">Die `ldind.i2` -Anweisung indirekt lädt ein `int16` Wert aus der angegebenen Adresse (des Typs `native int`, `&`, oder \*) als in den Stapel eine `int32`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2783">The `ldind.i2` instruction indirectly loads an `int16` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="5c934-2784">Alle der `ldind` Anweisungen sind Verknüpfungen für eine <xref:System.Reflection.Emit.OpCodes.Ldobj> Anweisung, die die entsprechende Wertklasse für den integrierten angibt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2784">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="5c934-2785">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` (nicht `native int`) werden beim Laden auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2785">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="5c934-2786">Gleitkommazahlen-Punktwerte werden in konvertiert `F` Geben Sie beim Laden auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2786">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5c934-2787">Ordnungsgemäß formatierte Microsoft Intermediate Language (MSIL) wird sichergestellt, dass die `ldind` Anweisungen werden in Übereinstimmung mit dem Typ des Zeigers verwendet.</span><span class="sxs-lookup"><span data-stu-id="5c934-2787">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="5c934-2788">Die Adresse, die ursprünglich auf dem Stapel abgelegt muss ausgerichtet sein, an die Größe der Objekte auf dem Computer oder ein <xref:System.NullReferenceException> auftreten können (finden Sie unter der <xref:System.Reflection.Emit.OpCodes.Unaligned> Präfix Anleitungen für die vorbeugende Maßnahmen).</span><span class="sxs-lookup"><span data-stu-id="5c934-2788">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="5c934-2789">Die Ergebnisse von allen MSIL-Anweisungen, die Adressen zurückgegeben (z. B. <xref:System.Reflection.Emit.OpCodes.Ldloca> und <xref:System.Reflection.Emit.OpCodes.Ldarga>) sicher ausgerichtet sind.</span><span class="sxs-lookup"><span data-stu-id="5c934-2789">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="5c934-2790">Für Datentypen, die größer als 1 Byte ist die Anordnung der Bytes abhängig von der Ziel-CPU.</span><span class="sxs-lookup"><span data-stu-id="5c934-2790">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="5c934-2791">Code, der die Bytereihenfolge hängt möglicherweise nicht auf allen Plattformen ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-2791">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="5c934-2792"><xref:System.NullReferenceException> kann ausgelöst werden, wenn eine ungültige Adresse erkannt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-2792"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="5c934-2793">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldind.i2` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2793">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i2` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2794">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2794">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2795">Lädt einen Wert vom Typ <see langword="int32" /> als ein <see langword="int32" /> indirekt auf dem Auswertungsstapel Stapeln.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2795">Loads a value of type <see langword="int32" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2796">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2796">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2797">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2797">Format</span></span>|<span data-ttu-id="5c934-2798">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2798">Assembly Format</span></span>|<span data-ttu-id="5c934-2799">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2799">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2800">4A</span><span class="sxs-lookup"><span data-stu-id="5c934-2800">4A</span></span>|<span data-ttu-id="5c934-2801">i4</span><span class="sxs-lookup"><span data-stu-id="5c934-2801">ldind.i4</span></span>|<span data-ttu-id="5c934-2802">Lädt die `int32` Wert unter Adresse `addr` im Stapel als ein `int32`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2802">Loads the `int32` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="5c934-2803">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2803">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2804">Eine Adresse wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2804">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-2805">Die Adresse wird vom Stapel geholt. der Wert bei der Adresse wird abgerufen.</span><span class="sxs-lookup"><span data-stu-id="5c934-2805">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="5c934-2806">Der abgerufene Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2806">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2807">Die `ldind.i4` -Anweisung indirekt lädt ein `int32` Wert aus der angegebenen Adresse (des Typs `native int`, `&`, oder \*) als in den Stapel eine `int32`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2807">The `ldind.i4` instruction indirectly loads an `int32` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="5c934-2808">Alle der `ldind` Anweisungen sind Verknüpfungen für eine <xref:System.Reflection.Emit.OpCodes.Ldobj> Anweisung, die die entsprechende Wertklasse für den integrierten angibt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2808">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="5c934-2809">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` (nicht `native int`) werden beim Laden auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2809">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="5c934-2810">Gleitkommazahlen-Punktwerte werden in konvertiert `F` Geben Sie beim Laden auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2810">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5c934-2811">Ordnungsgemäß formatierte Microsoft Intermediate Language (MSIL) wird sichergestellt, dass die `ldind` Anweisungen werden in Übereinstimmung mit dem Typ des Zeigers verwendet.</span><span class="sxs-lookup"><span data-stu-id="5c934-2811">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="5c934-2812">Die Adresse, die ursprünglich auf dem Stapel abgelegt muss ausgerichtet sein, an die Größe der Objekte auf dem Computer oder ein <xref:System.NullReferenceException> auftreten können (finden Sie unter der <xref:System.Reflection.Emit.OpCodes.Unaligned> Präfix Anleitungen für die vorbeugende Maßnahmen).</span><span class="sxs-lookup"><span data-stu-id="5c934-2812">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="5c934-2813">Die Ergebnisse von allen MSIL-Anweisungen, die Adressen zurückgegeben (z. B. <xref:System.Reflection.Emit.OpCodes.Ldloca> und <xref:System.Reflection.Emit.OpCodes.Ldarga>) sicher ausgerichtet sind.</span><span class="sxs-lookup"><span data-stu-id="5c934-2813">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="5c934-2814">Für Datentypen, die größer als 1 Byte ist die Anordnung der Bytes abhängig von der Ziel-CPU.</span><span class="sxs-lookup"><span data-stu-id="5c934-2814">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="5c934-2815">Code, der die Bytereihenfolge hängt möglicherweise nicht auf allen Plattformen ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-2815">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="5c934-2816"><xref:System.NullReferenceException> kann ausgelöst werden, wenn eine ungültige Adresse erkannt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-2816"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="5c934-2817">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldind.i4` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2817">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i4` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2818">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2818">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2819">Lädt einen Wert vom Typ <see langword="int64" /> als ein <see langword="int64" /> indirekt auf dem Auswertungsstapel Stapeln.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2819">Loads a value of type <see langword="int64" /> as an <see langword="int64" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2820">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2820">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2821">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2821">Format</span></span>|<span data-ttu-id="5c934-2822">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2822">Assembly Format</span></span>|<span data-ttu-id="5c934-2823">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2823">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2824">4C</span><span class="sxs-lookup"><span data-stu-id="5c934-2824">4C</span></span>|<span data-ttu-id="5c934-2825">i8</span><span class="sxs-lookup"><span data-stu-id="5c934-2825">ldind.i8</span></span>|<span data-ttu-id="5c934-2826">Lädt die `int64` Wert unter Adresse `addr` im Stapel als ein `int64`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2826">Loads the `int64` value at address `addr` onto the stack as an `int64`.</span></span>|  
  
 <span data-ttu-id="5c934-2827">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2827">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2828">Eine Adresse wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2828">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-2829">Die Adresse wird vom Stapel geholt. der Wert bei der Adresse wird abgerufen.</span><span class="sxs-lookup"><span data-stu-id="5c934-2829">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="5c934-2830">Der abgerufene Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2830">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2831">Die `ldind.i8` -Anweisung indirekt lädt ein `int64` Wert aus der angegebenen Adresse (des Typs `native int`, `&`, oder \*) als in den Stapel eine `int64`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2831">The `ldind.i8` instruction indirectly loads an `int64` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int64`.</span></span>  
  
 <span data-ttu-id="5c934-2832">Alle der `ldind` Anweisungen sind Verknüpfungen für eine <xref:System.Reflection.Emit.OpCodes.Ldobj> Anweisung, die die entsprechende Wertklasse für den integrierten angibt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2832">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="5c934-2833">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` (nicht `native int`) werden beim Laden auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2833">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="5c934-2834">Gleitkommazahlen-Punktwerte werden in konvertiert `F` Geben Sie beim Laden auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2834">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5c934-2835">Ordnungsgemäß formatierte Microsoft Intermediate Language (MSIL) wird sichergestellt, dass die `ldind` Anweisungen werden in Übereinstimmung mit dem Typ des Zeigers verwendet.</span><span class="sxs-lookup"><span data-stu-id="5c934-2835">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="5c934-2836">Die Adresse, die ursprünglich auf dem Stapel abgelegt muss ausgerichtet sein, an die Größe der Objekte auf dem Computer oder ein <xref:System.NullReferenceException> auftreten können (finden Sie unter der <xref:System.Reflection.Emit.OpCodes.Unaligned> Präfix Anleitungen für die vorbeugende Maßnahmen).</span><span class="sxs-lookup"><span data-stu-id="5c934-2836">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="5c934-2837">Die Ergebnisse von allen MSIL-Anweisungen, die Adressen zurückgegeben (z. B. <xref:System.Reflection.Emit.OpCodes.Ldloca> und <xref:System.Reflection.Emit.OpCodes.Ldarga>) sicher ausgerichtet sind.</span><span class="sxs-lookup"><span data-stu-id="5c934-2837">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="5c934-2838">Für Datentypen, die größer als 1 Byte ist die Anordnung der Bytes abhängig von der Ziel-CPU.</span><span class="sxs-lookup"><span data-stu-id="5c934-2838">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="5c934-2839">Code, der die Bytereihenfolge hängt möglicherweise nicht auf allen Plattformen ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-2839">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="5c934-2840"><xref:System.NullReferenceException> kann ausgelöst werden, wenn eine ungültige Adresse erkannt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-2840"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="5c934-2841">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldind.i8` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2841">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i8` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2842">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2842">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2843">Lädt einen Wert vom Typ <see langword="float32" /> als Typ <see langword="F" /> (Gleitkommawert) auf dem Auswertungsstapel ab indirekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2843">Loads a value of type <see langword="float32" /> as a type <see langword="F" /> (float) onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2844">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2844">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2845">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2845">Format</span></span>|<span data-ttu-id="5c934-2846">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2846">Assembly Format</span></span>|<span data-ttu-id="5c934-2847">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2847">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2848">4E</span><span class="sxs-lookup"><span data-stu-id="5c934-2848">4E</span></span>|<span data-ttu-id="5c934-2849">ldind. r4</span><span class="sxs-lookup"><span data-stu-id="5c934-2849">ldind.r4</span></span>|<span data-ttu-id="5c934-2850">Lädt die `float32` Wert unter Adresse `addr` als einen Typ in den Stapel `F`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2850">Loads the `float32` value at address `addr` onto the stack as a type `F`.</span></span>|  
  
 <span data-ttu-id="5c934-2851">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2851">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2852">Eine Adresse wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2852">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-2853">Die Adresse wird vom Stapel geholt. der Wert bei der Adresse wird abgerufen.</span><span class="sxs-lookup"><span data-stu-id="5c934-2853">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="5c934-2854">Der abgerufene Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2854">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2855">Die `ldind.r4` -Anweisung indirekt lädt eine `float32` Wert aus der angegebenen Adresse (des Typs `native int`, `&`, oder \*) als einen Typ in den Stapel `F`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2855">The `ldind.r4` instruction indirectly loads a `float32` value from the specified address (of type `native int`, `&`, or \*) onto the stack as a type `F`.</span></span>  
  
 <span data-ttu-id="5c934-2856">Alle der `ldind` Anweisungen sind Verknüpfungen für eine <xref:System.Reflection.Emit.OpCodes.Ldobj> Anweisung, die die entsprechende Wertklasse für den integrierten angibt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2856">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="5c934-2857">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` (nicht `native int`) werden beim Laden auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2857">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="5c934-2858">Gleitkommazahlen-Punktwerte werden in konvertiert `F` Geben Sie beim Laden auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2858">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5c934-2859">Ordnungsgemäß formatierte Microsoft Intermediate Language (MSIL) wird sichergestellt, dass die `ldind` Anweisungen werden in Übereinstimmung mit dem Typ des Zeigers verwendet.</span><span class="sxs-lookup"><span data-stu-id="5c934-2859">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="5c934-2860">Die Adresse, die ursprünglich auf dem Stapel abgelegt muss ausgerichtet sein, an die Größe der Objekte auf dem Computer oder ein <xref:System.NullReferenceException> auftreten können (finden Sie unter der <xref:System.Reflection.Emit.OpCodes.Unaligned> Präfix Anleitungen für die vorbeugende Maßnahmen).</span><span class="sxs-lookup"><span data-stu-id="5c934-2860">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="5c934-2861">Die Ergebnisse von allen MSIL-Anweisungen, die Adressen zurückgegeben (z. B. <xref:System.Reflection.Emit.OpCodes.Ldloca> und <xref:System.Reflection.Emit.OpCodes.Ldarga>) sicher ausgerichtet sind.</span><span class="sxs-lookup"><span data-stu-id="5c934-2861">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="5c934-2862">Für Datentypen, die größer als 1 Byte ist die Anordnung der Bytes abhängig von der Ziel-CPU.</span><span class="sxs-lookup"><span data-stu-id="5c934-2862">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="5c934-2863">Code, der die Bytereihenfolge hängt möglicherweise nicht auf allen Plattformen ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-2863">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="5c934-2864"><xref:System.NullReferenceException> kann ausgelöst werden, wenn eine ungültige Adresse erkannt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-2864"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="5c934-2865">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldind.r4` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2865">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.r4` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2866">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2866">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2867">Lädt einen Wert vom Typ <see langword="float64" /> als Typ <see langword="F" /> (Gleitkommawert) auf dem Auswertungsstapel ab indirekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2867">Loads a value of type <see langword="float64" /> as a type <see langword="F" /> (float) onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2868">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2868">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2869">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2869">Format</span></span>|<span data-ttu-id="5c934-2870">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2870">Assembly Format</span></span>|<span data-ttu-id="5c934-2871">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2871">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2872">4F</span><span class="sxs-lookup"><span data-stu-id="5c934-2872">4F</span></span>|<span data-ttu-id="5c934-2873">ldind. r8</span><span class="sxs-lookup"><span data-stu-id="5c934-2873">ldind.r8</span></span>|<span data-ttu-id="5c934-2874">Lädt die `float64` Wert unter Adresse `addr` als einen Typ in den Stapel `F`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2874">Loads the `float64` value at address `addr` onto the stack as a type `F`.</span></span>|  
  
 <span data-ttu-id="5c934-2875">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2875">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2876">Eine Adresse wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2876">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-2877">Die Adresse wird vom Stapel geholt. der Wert bei der Adresse wird abgerufen.</span><span class="sxs-lookup"><span data-stu-id="5c934-2877">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="5c934-2878">Der abgerufene Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2878">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2879">Die `ldind.r8` -Anweisung indirekt lädt eine `float64` Wert aus der angegebenen Adresse (des Typs `native int`, `&`, oder \*) als in den Stapel eine `float64`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2879">The `ldind.r8` instruction indirectly loads a `float64` value from the specified address (of type `native int`, `&`, or \*) onto the stack as a `float64`.</span></span>  
  
 <span data-ttu-id="5c934-2880">Alle der `ldind` Anweisungen sind Verknüpfungen für eine <xref:System.Reflection.Emit.OpCodes.Ldobj> Anweisung, die die entsprechende Wertklasse für den integrierten angibt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2880">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="5c934-2881">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` (nicht `native int`) werden beim Laden auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2881">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="5c934-2882">Gleitkommazahlen-Punktwerte werden in konvertiert `F` Geben Sie beim Laden auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2882">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5c934-2883">Ordnungsgemäß formatierte Microsoft Intermediate Language (MSIL) wird sichergestellt, dass die `ldind` Anweisungen werden in Übereinstimmung mit dem Typ des Zeigers verwendet.</span><span class="sxs-lookup"><span data-stu-id="5c934-2883">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="5c934-2884">Die Adresse, die ursprünglich auf dem Stapel abgelegt muss ausgerichtet sein, an die Größe der Objekte auf dem Computer oder ein <xref:System.NullReferenceException> auftreten können (finden Sie unter der <xref:System.Reflection.Emit.OpCodes.Unaligned> Präfix Anleitungen für die vorbeugende Maßnahmen).</span><span class="sxs-lookup"><span data-stu-id="5c934-2884">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="5c934-2885">Die Ergebnisse von allen MSIL-Anweisungen, die Adressen zurückgegeben (z. B. <xref:System.Reflection.Emit.OpCodes.Ldloca> und <xref:System.Reflection.Emit.OpCodes.Ldarga>) sicher ausgerichtet sind.</span><span class="sxs-lookup"><span data-stu-id="5c934-2885">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="5c934-2886">Für Datentypen, die größer als 1 Byte ist die Anordnung der Bytes abhängig von der Ziel-CPU.</span><span class="sxs-lookup"><span data-stu-id="5c934-2886">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="5c934-2887">Code, der die Bytereihenfolge hängt möglicherweise nicht auf allen Plattformen ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-2887">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="5c934-2888"><xref:System.NullReferenceException> kann ausgelöst werden, wenn eine ungültige Adresse erkannt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-2888"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="5c934-2889">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldind.r8` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2889">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.r8` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2890">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2890">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2891">Lädt einen Objektverweis als Typ <see langword="O" /> (Objektverweis) in den Auswertungsstapel stack indirekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2891">Loads an object reference as a type <see langword="O" /> (object reference) onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2892">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2892">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2893">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2893">Format</span></span>|<span data-ttu-id="5c934-2894">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2894">Assembly Format</span></span>|<span data-ttu-id="5c934-2895">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2895">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2896">50</span><span class="sxs-lookup"><span data-stu-id="5c934-2896">50</span></span>|<span data-ttu-id="5c934-2897">ldind.ref</span><span class="sxs-lookup"><span data-stu-id="5c934-2897">ldind.ref</span></span>|<span data-ttu-id="5c934-2898">Lädt den Objektverweis Downloadadresse `addr` als einen Typ in den Stapel `O`</span><span class="sxs-lookup"><span data-stu-id="5c934-2898">Loads the object reference at address `addr` onto the stack as a type `O`</span></span>|  
  
 <span data-ttu-id="5c934-2899">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2899">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2900">Eine Adresse wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2900">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-2901">Die Adresse wird vom Stapel geholt. Der Objektverweis, der an der Adresse gespeichert, wird abgerufen.</span><span class="sxs-lookup"><span data-stu-id="5c934-2901">The address is popped from the stack; the object reference located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="5c934-2902">Der abgerufene Verweis wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2902">The fetched reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2903">Die `ldind.ref` -Anweisung lädt indirekt den Objektverweis der angegebenen Adresse (des Typs `native int`, `&`, oder \*) als Typ in den Stapel `O`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2903">The `ldind.ref` instruction indirectly loads the object reference the specified address (of type `native int`, `&`, or \*) onto the stack as type `O`.</span></span>  
  
 <span data-ttu-id="5c934-2904">Alle der `ldind` Anweisungen sind Verknüpfungen für eine <xref:System.Reflection.Emit.OpCodes.Ldobj> Anweisung, die die entsprechende Wertklasse für den integrierten angibt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2904">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="5c934-2905">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` (nicht `native int`) werden beim Laden auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2905">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="5c934-2906">Gleitkommazahlen-Punktwerte werden in konvertiert `F` Geben Sie beim Laden auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2906">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5c934-2907">Ordnungsgemäß formatierte Microsoft Intermediate Language (MSIL) wird sichergestellt, dass die `ldind` Anweisungen werden in Übereinstimmung mit dem Typ des Zeigers verwendet.</span><span class="sxs-lookup"><span data-stu-id="5c934-2907">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="5c934-2908">Die Adresse, die ursprünglich auf dem Stapel abgelegt muss ausgerichtet sein, an die Größe der Objekte auf dem Computer oder ein <xref:System.NullReferenceException> auftreten können (finden Sie unter der <xref:System.Reflection.Emit.OpCodes.Unaligned> Präfix Anleitungen für die vorbeugende Maßnahmen).</span><span class="sxs-lookup"><span data-stu-id="5c934-2908">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="5c934-2909">Die Ergebnisse von allen MSIL-Anweisungen, die Adressen zurückgegeben (z. B. <xref:System.Reflection.Emit.OpCodes.Ldloca> und <xref:System.Reflection.Emit.OpCodes.Ldarga>) sicher ausgerichtet sind.</span><span class="sxs-lookup"><span data-stu-id="5c934-2909">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="5c934-2910">Für Datentypen, die größer als 1 Byte ist die Anordnung der Bytes abhängig von der Ziel-CPU.</span><span class="sxs-lookup"><span data-stu-id="5c934-2910">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="5c934-2911">Code, der die Bytereihenfolge hängt möglicherweise nicht auf allen Plattformen ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-2911">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="5c934-2912"><xref:System.NullReferenceException> kann ausgelöst werden, wenn eine ungültige Adresse erkannt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-2912"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="5c934-2913">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldind.ref` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2913">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.ref` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2914">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2914">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2915">Lädt einen Wert vom Typ <see langword="unsigned int8" /> als ein <see langword="int32" /> indirekt auf dem Auswertungsstapel Stapeln.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2915">Loads a value of type <see langword="unsigned int8" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2916">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2916">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2917">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2917">Format</span></span>|<span data-ttu-id="5c934-2918">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2918">Assembly Format</span></span>|<span data-ttu-id="5c934-2919">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2919">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2920">47</span><span class="sxs-lookup"><span data-stu-id="5c934-2920">47</span></span>|<span data-ttu-id="5c934-2921">ldind. U1</span><span class="sxs-lookup"><span data-stu-id="5c934-2921">ldind.u1</span></span>|<span data-ttu-id="5c934-2922">Lädt die `unsigned int8` Wert unter Adresse `addr` im Stapel als ein `int32`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2922">Loads the `unsigned int8` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="5c934-2923">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2923">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2924">Eine Adresse wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2924">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-2925">Die Adresse wird vom Stapel geholt. der Wert bei der Adresse wird abgerufen.</span><span class="sxs-lookup"><span data-stu-id="5c934-2925">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="5c934-2926">Der abgerufene Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2926">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2927">Die `ldind.u1` -Anweisung indirekt lädt ein `unsigned int8` Wert aus der angegebenen Adresse (des Typs`native int`, `&`, oder \*) als in den Stapel eine `int32`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2927">The `ldind.u1` instruction indirectly loads an `unsigned int8` value from the specified address (of type`native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="5c934-2928">Alle der `ldind` Anweisungen sind Verknüpfungen für eine <xref:System.Reflection.Emit.OpCodes.Ldobj> Anweisung, die die entsprechende Wertklasse für den integrierten angibt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2928">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="5c934-2929">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` (nicht `native int`) werden beim Laden auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2929">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="5c934-2930">Gleitkommazahlen-Punktwerte werden in konvertiert `F` Geben Sie beim Laden auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2930">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5c934-2931">Ordnungsgemäß formatierte Microsoft Intermediate Language (MSIL) wird sichergestellt, dass die `ldind` Anweisungen werden in Übereinstimmung mit dem Typ des Zeigers verwendet.</span><span class="sxs-lookup"><span data-stu-id="5c934-2931">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="5c934-2932">Die Adresse, die ursprünglich auf dem Stapel abgelegt muss ausgerichtet sein, an die Größe der Objekte auf dem Computer oder ein <xref:System.NullReferenceException> auftreten können (finden Sie unter der <xref:System.Reflection.Emit.OpCodes.Unaligned> Präfix Anleitungen für die vorbeugende Maßnahmen).</span><span class="sxs-lookup"><span data-stu-id="5c934-2932">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="5c934-2933">Die Ergebnisse von allen MSIL-Anweisungen, die Adressen zurückgegeben (z. B. <xref:System.Reflection.Emit.OpCodes.Ldloca> und <xref:System.Reflection.Emit.OpCodes.Ldarga>) sicher ausgerichtet sind.</span><span class="sxs-lookup"><span data-stu-id="5c934-2933">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="5c934-2934">Für Datentypen, die größer als 1 Byte ist die Anordnung der Bytes abhängig von der Ziel-CPU.</span><span class="sxs-lookup"><span data-stu-id="5c934-2934">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="5c934-2935">Code, der die Bytereihenfolge hängt möglicherweise nicht auf allen Plattformen ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-2935">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="5c934-2936"><xref:System.NullReferenceException> kann ausgelöst werden, wenn eine ungültige Adresse erkannt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-2936"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="5c934-2937">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldind.u1` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2937">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.u1` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2938">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2938">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2939">Lädt einen Wert vom Typ <see langword="unsigned int16" /> als ein <see langword="int32" /> indirekt auf dem Auswertungsstapel Stapeln.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2939">Loads a value of type <see langword="unsigned int16" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2940">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2940">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2941">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2941">Format</span></span>|<span data-ttu-id="5c934-2942">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2942">Assembly Format</span></span>|<span data-ttu-id="5c934-2943">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2943">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2944">49</span><span class="sxs-lookup"><span data-stu-id="5c934-2944">49</span></span>|<span data-ttu-id="5c934-2945">ldind. u2</span><span class="sxs-lookup"><span data-stu-id="5c934-2945">ldind.u2</span></span>|<span data-ttu-id="5c934-2946">Lädt die `unsigned int16` Wert unter Adresse `addr` im Stapel als ein `int32`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2946">Loads the `unsigned int16` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="5c934-2947">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2947">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2948">Eine Adresse wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2948">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-2949">Die Adresse wird vom Stapel geholt. der Wert bei der Adresse wird abgerufen.</span><span class="sxs-lookup"><span data-stu-id="5c934-2949">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="5c934-2950">Der abgerufene Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2950">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2951">Die `ldind.u2` -Anweisung indirekt lädt ein `unsigned int16` Wert aus der angegebenen Adresse (des Typs `native int`, `&`, oder \*) als in den Stapel eine `int32`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2951">The `ldind.u2` instruction indirectly loads an `unsigned int16` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="5c934-2952">Alle der `ldind` Anweisungen sind Verknüpfungen für eine <xref:System.Reflection.Emit.OpCodes.Ldobj> Anweisung, die die entsprechende Wertklasse für den integrierten angibt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2952">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="5c934-2953">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` (nicht `native int`) werden beim Laden auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2953">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="5c934-2954">Gleitkommazahlen-Punktwerte werden in konvertiert `F` Geben Sie beim Laden auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2954">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5c934-2955">Ordnungsgemäß formatierte Microsoft Intermediate Language (MSIL) wird sichergestellt, dass die `ldind` Anweisungen werden in Übereinstimmung mit dem Typ des Zeigers verwendet.</span><span class="sxs-lookup"><span data-stu-id="5c934-2955">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="5c934-2956">Die Adresse, die ursprünglich auf dem Stapel abgelegt muss ausgerichtet sein, an die Größe der Objekte auf dem Computer oder ein <xref:System.NullReferenceException> auftreten können (finden Sie unter der <xref:System.Reflection.Emit.OpCodes.Unaligned> Präfix Anleitungen für die vorbeugende Maßnahmen).</span><span class="sxs-lookup"><span data-stu-id="5c934-2956">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="5c934-2957">Die Ergebnisse von allen MSIL-Anweisungen, die Adressen zurückgegeben (z. B. <xref:System.Reflection.Emit.OpCodes.Ldloca> und <xref:System.Reflection.Emit.OpCodes.Ldarga>) sicher ausgerichtet sind.</span><span class="sxs-lookup"><span data-stu-id="5c934-2957">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="5c934-2958">Für Datentypen, die größer als 1 Byte ist die Anordnung der Bytes abhängig von der Ziel-CPU.</span><span class="sxs-lookup"><span data-stu-id="5c934-2958">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="5c934-2959">Code, der die Bytereihenfolge hängt möglicherweise nicht auf allen Plattformen ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-2959">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="5c934-2960"><xref:System.NullReferenceException> kann ausgelöst werden, wenn eine ungültige Adresse erkannt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-2960"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="5c934-2961">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldind.u2` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2961">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.u2` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2962">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2962">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2963">Lädt einen Wert vom Typ <see langword="unsigned int32" /> als ein <see langword="int32" /> indirekt auf dem Auswertungsstapel Stapeln.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2963">Loads a value of type <see langword="unsigned int32" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2964">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2964">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2965">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2965">Format</span></span>|<span data-ttu-id="5c934-2966">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2966">Assembly Format</span></span>|<span data-ttu-id="5c934-2967">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2967">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2968">4 B</span><span class="sxs-lookup"><span data-stu-id="5c934-2968">4B</span></span>|<span data-ttu-id="5c934-2969">U4</span><span class="sxs-lookup"><span data-stu-id="5c934-2969">ldind.u4</span></span>|<span data-ttu-id="5c934-2970">Lädt die `unsigned int32` Wert unter Adresse `addr` im Stapel als ein `int32`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2970">Loads the `unsigned int32` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="5c934-2971">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2971">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2972">Eine Adresse wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2972">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-2973">Die Adresse wird vom Stapel geholt. der Wert bei der Adresse wird abgerufen.</span><span class="sxs-lookup"><span data-stu-id="5c934-2973">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="5c934-2974">Der abgerufene Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2974">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2975">Die `ldind.u4` -Anweisung indirekt lädt ein `unsigned int32` Wert aus der angegebenen Adresse (des Typs `native int`, `&`, oder \*) als in den Stapel eine `int32`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2975">The `ldind.u4` instruction indirectly loads an `unsigned int32` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="5c934-2976">Alle der `ldind` Anweisungen sind Verknüpfungen für eine <xref:System.Reflection.Emit.OpCodes.Ldobj> Anweisung, die die entsprechende Wertklasse für den integrierten angibt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2976">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="5c934-2977">Beachten Sie, dass ganzzahlige Werte von weniger als 4 Bytes auf ausgedehnt werden `int32` (nicht `native int`) werden beim Laden auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2977">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="5c934-2978">Gleitkommazahlen-Punktwerte werden in konvertiert `F` Geben Sie beim Laden auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-2978">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5c934-2979">Ordnungsgemäß formatierte Microsoft Intermediate Language (MSIL) wird sichergestellt, dass die `ldind` Anweisungen werden in Übereinstimmung mit dem Typ des Zeigers verwendet.</span><span class="sxs-lookup"><span data-stu-id="5c934-2979">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="5c934-2980">Die Adresse, die ursprünglich auf dem Stapel abgelegt muss ausgerichtet sein, an die Größe der Objekte auf dem Computer oder ein <xref:System.NullReferenceException> auftreten können (finden Sie unter der <xref:System.Reflection.Emit.OpCodes.Unaligned> Präfix Anleitungen für die vorbeugende Maßnahmen).</span><span class="sxs-lookup"><span data-stu-id="5c934-2980">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="5c934-2981">Die Ergebnisse von allen MSIL-Anweisungen, die Adressen zurückgegeben (z. B. <xref:System.Reflection.Emit.OpCodes.Ldloca> und <xref:System.Reflection.Emit.OpCodes.Ldarga>) sicher ausgerichtet sind.</span><span class="sxs-lookup"><span data-stu-id="5c934-2981">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="5c934-2982">Für Datentypen, die größer als 1 Byte ist die Anordnung der Bytes abhängig von der Ziel-CPU.</span><span class="sxs-lookup"><span data-stu-id="5c934-2982">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="5c934-2983">Code, der die Bytereihenfolge hängt möglicherweise nicht auf allen Plattformen ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-2983">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="5c934-2984"><xref:System.NullReferenceException> kann ausgelöst werden, wenn eine ungültige Adresse erkannt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-2984"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="5c934-2985">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldind.u4` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-2985">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.u4` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-2986">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-2986">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldlen">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldlen;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldlen" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldlen" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldlen As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldlen;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldlen : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldlen" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-2987">Legt die Anzahl der Elemente eines nullbasierten, eindimensionalen Arrays auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-2987">Pushes the number of elements of a zero-based, one-dimensional array onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-2988">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-2988">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-2989">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-2989">Format</span></span>|<span data-ttu-id="5c934-2990">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-2990">Assembly Format</span></span>|<span data-ttu-id="5c934-2991">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-2991">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-2992">8E</span><span class="sxs-lookup"><span data-stu-id="5c934-2992">8E</span></span>|<span data-ttu-id="5c934-2993">ldlen</span><span class="sxs-lookup"><span data-stu-id="5c934-2993">ldlen</span></span>|<span data-ttu-id="5c934-2994">Legt die Länge (des Typs `natural unsigned int`) eines Arrays auf dem Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-2994">Pushes the length (of type `natural unsigned int`) of an array on the stack.</span></span>|  
  
 <span data-ttu-id="5c934-2995">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-2995">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-2996">Ein Objektverweis auf ein Array ist auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2996">An object reference to an array is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-2997">Der Arrayverweis als aus dem Stapel per pop ausgelesen wird, und die Länge berechnet wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-2997">The array reference is popped from the stack and the length is computed.</span></span>  
  
3.  <span data-ttu-id="5c934-2998">Die Länge ist auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-2998">The length is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-2999">Arrays sind Objekte, und daher ein Wert vom Typ dargestellt `O`.</span><span class="sxs-lookup"><span data-stu-id="5c934-2999">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="5c934-3000">Die Länge wird zurückgegeben, als eine `natural unsigned int`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3000">The length is returned as a `natural unsigned int`.</span></span>  
  
 <span data-ttu-id="5c934-3001"><xref:System.NullReferenceException> wird ausgelöst, wenn der Arrayverweis als null-Verweis ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-3001"><xref:System.NullReferenceException> is thrown if the array reference is a null reference.</span></span>  
  
 <span data-ttu-id="5c934-3002">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldlen` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3002">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldlen` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3003">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-3003">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3004">Lädt die lokale Variable an einem bestimmten Index in den Auswertungsstapel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3004">Loads the local variable at a specific index onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3005">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3005">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3006">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3006">Format</span></span>|<span data-ttu-id="5c934-3007">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3007">Assembly Format</span></span>|<span data-ttu-id="5c934-3008">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3008">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3009">FE 0C < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="5c934-3009">FE 0C < `unsigned int16` ></span></span>|<span data-ttu-id="5c934-3010">ldloc `index`</span><span class="sxs-lookup"><span data-stu-id="5c934-3010">ldloc `index`</span></span>|<span data-ttu-id="5c934-3011">Lädt die lokale Variable am Index `index` Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3011">Loads the local variable at index `index` onto stack.</span></span>|  
  
 <span data-ttu-id="5c934-3012">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3012">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3013">Der Wert der lokale Variable am angegebenen Index ist auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3013">The local variable value at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3014">Die `ldloc` -Anweisung legt den Inhalt der lokalen Variable Zahl am durchlaufenen Index in den Auswertungsstapel, wo die lokalen Variablen oder höher 0 nummeriert sind.</span><span class="sxs-lookup"><span data-stu-id="5c934-3014">The `ldloc` instruction pushes the contents of the local variable number at the passed index onto the evaluation stack, where the local variables are numbered 0 onwards.</span></span> <span data-ttu-id="5c934-3015">Lokale Variablen werden vor der Eingabe der Methode, nur dann, wenn das Initialisierungsflag für die Methode "true" ist auf 0 initialisiert.</span><span class="sxs-lookup"><span data-stu-id="5c934-3015">Local variables are initialized to 0 before entering the method only if the initialize flag on the method is true.</span></span> <span data-ttu-id="5c934-3016">Es gibt 65.535 (2 ^ 16 - 1) lokale Variablen möglich (0-65.534).</span><span class="sxs-lookup"><span data-stu-id="5c934-3016">There are 65,535 (2^16-1) local variables possible (0-65,534).</span></span> <span data-ttu-id="5c934-3017">Index 65.535 ist ungültig, da wahrscheinliche Implementierungen eine 2-Byte-Ganzzahl verwenden werden, um sowohl eine lokale Index zusammen mit der Gesamtanzahl der lokalen Variablen für eine bestimmte Methode nachzuverfolgen.</span><span class="sxs-lookup"><span data-stu-id="5c934-3017">Index 65,535 is not valid since likely implementations will use a 2-byte integer to track both a local's index, along with the total number of locals for a given method.</span></span> <span data-ttu-id="5c934-3018">Wenn ein Index der 65535 gültig vorgenommen wurden hatte, müssten eine größere ganze Zahl, um die Anzahl der lokalen Variablen in einer solchen Methode nachzuverfolgen.</span><span class="sxs-lookup"><span data-stu-id="5c934-3018">If an index of 65535 had been made valid, it would require a wider integer to track the number of locals in such a method.</span></span>  
  
 <span data-ttu-id="5c934-3019">Die `ldloc.0`, `ldloc.1`, `ldloc.2`, und `ldloc.3` Anweisungen ermöglichen eine effiziente Codierung für den Zugriff auf die ersten vier lokalen Variablen.</span><span class="sxs-lookup"><span data-stu-id="5c934-3019">The `ldloc.0`, `ldloc.1`, `ldloc.2`, and `ldloc.3` instructions provide an efficient encoding for accessing the first four local variables.</span></span>  
  
 <span data-ttu-id="5c934-3020">Der Typ des Werts ist identisch mit den Typ der lokalen Variablen, die in das Method-Header angegeben ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-3020">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="5c934-3021">Finden Sie unter Partition i lokale Variablen, die kleiner sind als 4 Byte lange erweitert werden, geben Sie `int32` werden beim Laden auf den Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3021">See Partition I. Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="5c934-3022">Gleitkommawerte werden auf ihre systemeigene Größe erweitert (Typ `F`).</span><span class="sxs-lookup"><span data-stu-id="5c934-3022">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="5c934-3023">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> methodenüberladungen können die `ldloc` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3023">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `ldloc` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3024">ILGenerator.Emit (OpCode, LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="5c934-3024">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="5c934-3025">ILGenerator.Emit (OpCode, short)</span><span class="sxs-lookup"><span data-stu-id="5c934-3025">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3026">Lädt die lokale Variable am Index 0 in den Auswertungsstapel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3026">Loads the local variable at index 0 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3027">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3027">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3028">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3028">Format</span></span>|<span data-ttu-id="5c934-3029">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3029">Assembly Format</span></span>|<span data-ttu-id="5c934-3030">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3030">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3031">06</span><span class="sxs-lookup"><span data-stu-id="5c934-3031">06</span></span>|<span data-ttu-id="5c934-3032">ldloc.0</span><span class="sxs-lookup"><span data-stu-id="5c934-3032">ldloc.0</span></span>|<span data-ttu-id="5c934-3033">Lädt die lokale Variable am Index 0 in den Auswertungsstapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3033">Loads the local variable at index 0 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="5c934-3034">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3034">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3035">Der Wert der lokale Variable am Index 0 wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3035">The local variable value at the index 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3036">`ldloc.0` ist eine besonders effiziente Codierung für <xref:System.Reflection.Emit.OpCodes.Ldloc>, ermöglicht den Zugriff auf die lokale Variable am Index 0.</span><span class="sxs-lookup"><span data-stu-id="5c934-3036">`ldloc.0` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 0.</span></span>  
  
 <span data-ttu-id="5c934-3037">Der Typ des Werts ist identisch mit den Typ der lokalen Variablen, die in das Method-Header angegeben ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-3037">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="5c934-3038">Lokale Variablen, die kleiner als 4 Byte lang sind Typ erweitert `int32` werden beim Laden auf den Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3038">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="5c934-3039">Gleitkommawerte werden auf ihre systemeigene Größe erweitert (Typ `F`).</span><span class="sxs-lookup"><span data-stu-id="5c934-3039">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="5c934-3040">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldloc.0` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3040">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.0` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3041">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-3041">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3042">Lädt die lokale Variable am Index 1 in den Auswertungsstapel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3042">Loads the local variable at index 1 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3043">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3043">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3044">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3044">Format</span></span>|<span data-ttu-id="5c934-3045">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3045">Assembly Format</span></span>|<span data-ttu-id="5c934-3046">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3046">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3047">07</span><span class="sxs-lookup"><span data-stu-id="5c934-3047">07</span></span>|<span data-ttu-id="5c934-3048">ldloc. 1</span><span class="sxs-lookup"><span data-stu-id="5c934-3048">ldloc.1</span></span>|<span data-ttu-id="5c934-3049">Lädt die lokale Variable am Index 1 in den Auswertungsstapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3049">Loads the local variable at index 1 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="5c934-3050">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3050">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3051">Der Wert der lokale Variable am Index 1 wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3051">The local variable value at the index 1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3052">`ldloc.1` ist eine besonders effiziente Codierung für <xref:System.Reflection.Emit.OpCodes.Ldloc>, ermöglicht den Zugriff auf die lokale Variable am Index 1.</span><span class="sxs-lookup"><span data-stu-id="5c934-3052">`ldloc.1` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 1.</span></span>  
  
 <span data-ttu-id="5c934-3053">Der Typ des Werts ist identisch mit den Typ der lokalen Variablen, die in das Method-Header angegeben ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-3053">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="5c934-3054">Lokale Variablen, die kleiner als 4 Byte lang sind Typ erweitert `int32` werden beim Laden auf den Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3054">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="5c934-3055">Gleitkommawerte werden auf ihre systemeigene Größe erweitert (Typ `F`).</span><span class="sxs-lookup"><span data-stu-id="5c934-3055">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="5c934-3056">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldloc.1` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3056">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.1` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3057">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-3057">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3058">Lädt die lokale Variable am Index 2 in den Auswertungsstapel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3058">Loads the local variable at index 2 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3059">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3059">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3060">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3060">Format</span></span>|<span data-ttu-id="5c934-3061">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3061">Assembly Format</span></span>|<span data-ttu-id="5c934-3062">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3062">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3063">08</span><span class="sxs-lookup"><span data-stu-id="5c934-3063">08</span></span>|<span data-ttu-id="5c934-3064">ldloc.2</span><span class="sxs-lookup"><span data-stu-id="5c934-3064">ldloc.2</span></span>|<span data-ttu-id="5c934-3065">Lädt die lokale Variable am Index 2 in den Auswertungsstapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3065">Loads the local variable at index 2 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="5c934-3066">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3066">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3067">Der Wert der lokale Variable am Index 2 ist auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3067">The local variable value at the index 2 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3068">`ldloc.2` ist eine besonders effiziente Codierung für <xref:System.Reflection.Emit.OpCodes.Ldloc>, ermöglicht den Zugriff auf die lokale Variable am Index 2.</span><span class="sxs-lookup"><span data-stu-id="5c934-3068">`ldloc.2` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 2.</span></span>  
  
 <span data-ttu-id="5c934-3069">Der Typ des Werts ist identisch mit den Typ der lokalen Variablen, die in das Method-Header angegeben ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-3069">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="5c934-3070">Lokale Variablen, die kleiner als 4 Byte lang sind Typ erweitert `int32` werden beim Laden auf den Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3070">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="5c934-3071">Gleitkommawerte werden auf ihre systemeigene Größe erweitert (Typ `F`).</span><span class="sxs-lookup"><span data-stu-id="5c934-3071">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="5c934-3072">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldloc.2` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3072">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.2` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3073">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-3073">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3074">Lädt die lokale Variable am Index 3 in den Auswertungsstapel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3074">Loads the local variable at index 3 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3075">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3075">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3076">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3076">Format</span></span>|<span data-ttu-id="5c934-3077">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3077">Assembly Format</span></span>|<span data-ttu-id="5c934-3078">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3078">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3079">09</span><span class="sxs-lookup"><span data-stu-id="5c934-3079">09</span></span>|<span data-ttu-id="5c934-3080">ldloc. 3</span><span class="sxs-lookup"><span data-stu-id="5c934-3080">ldloc.3</span></span>|<span data-ttu-id="5c934-3081">Lädt die lokale Variable am Index 3 in den Auswertungsstapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3081">Loads the local variable at index 3 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="5c934-3082">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3082">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3083">Der Wert der lokale Variable am Index 3 wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3083">The local variable value at the index 3 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3084">`ldloc.3` ist eine besonders effiziente Codierung für <xref:System.Reflection.Emit.OpCodes.Ldloc>, ermöglicht den Zugriff auf die lokale Variable am Index 3.</span><span class="sxs-lookup"><span data-stu-id="5c934-3084">`ldloc.3` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 3.</span></span>  
  
 <span data-ttu-id="5c934-3085">Der Typ des Werts ist identisch mit den Typ der lokalen Variablen, die in das Method-Header angegeben ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-3085">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="5c934-3086">Lokale Variablen, die kleiner als 4 Byte lang sind Typ erweitert `int32` werden beim Laden auf den Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3086">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="5c934-3087">Gleitkommawerte werden auf ihre systemeigene Größe erweitert (Typ `F`).</span><span class="sxs-lookup"><span data-stu-id="5c934-3087">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="5c934-3088">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldloc.3` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3088">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.3` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3089">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-3089">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3090">Lädt die lokale Variable an einem bestimmten Index in den Auswertungsstapel, Kurzform.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3090">Loads the local variable at a specific index onto the evaluation stack, short form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3091">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3091">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3092">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3092">Format</span></span>|<span data-ttu-id="5c934-3093">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3093">Assembly Format</span></span>|<span data-ttu-id="5c934-3094">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3094">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3095">11 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="5c934-3095">11 < `unsigned int8` ></span></span>|<span data-ttu-id="5c934-3096">ldloc.s `index`</span><span class="sxs-lookup"><span data-stu-id="5c934-3096">ldloc.s `index`</span></span>|<span data-ttu-id="5c934-3097">Lädt die lokale Variable am Index `index` in den Stapel, Kurzform.</span><span class="sxs-lookup"><span data-stu-id="5c934-3097">Loads the local variable at index `index` onto stack, short form.</span></span>|  
  
 <span data-ttu-id="5c934-3098">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3098">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3099">Der Wert der lokale Variable am angegebenen Index ist auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3099">The local variable value at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3100">Die `ldloc.s` -Anweisung legt den Inhalt der lokalen Variable Zahl am durchlaufenen Index in den Auswertungsstapel, wo die lokalen Variablen oder höher 0 nummeriert sind.</span><span class="sxs-lookup"><span data-stu-id="5c934-3100">The `ldloc.s` instruction pushes the contents of the local variable number at the passed index onto the evaluation stack, where the local variables are numbered 0 onwards.</span></span> <span data-ttu-id="5c934-3101">Lokale Variablen werden vor der Eingabe der Methode, wenn das Initialisierungsflag für die Methode "true" ist auf 0 initialisiert.</span><span class="sxs-lookup"><span data-stu-id="5c934-3101">Local variables are initialized to 0 before entering the method if the initialize flag on the method is true.</span></span> <span data-ttu-id="5c934-3102">Es sind 256 (2 ^ 8) lokale Variablen (0-255) in der Kurzform möglich Dies ist eine effizientere Codierung als `ldloc`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3102">There are 256 (2^8) local variables possible (0-255) in the short form, which is a more efficient encoding than `ldloc`.</span></span>  
  
 <span data-ttu-id="5c934-3103">Der Typ des Werts ist identisch mit den Typ der lokalen Variablen, die in das Method-Header angegeben ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-3103">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="5c934-3104">Finden Sie unter Partition i lokale Variablen, die kleiner sind als 4 Byte lange erweitert werden, geben Sie `int32` werden beim Laden auf den Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3104">See Partition I. Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="5c934-3105">Gleitkommawerte werden auf ihre systemeigene Größe erweitert (Typ `F`).</span><span class="sxs-lookup"><span data-stu-id="5c934-3105">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="5c934-3106">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> methodenüberladungen können die `ldloc.s` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3106">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `ldloc.s` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3107">ILGenerator.Emit (OpCode, LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="5c934-3107">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="5c934-3108">ILGenerator.Emit(OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="5c934-3108">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloca">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloca;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloca" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloca" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloca As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloca;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloca : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloca" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3109">Lädt die Adresse der lokalen Variablen am angegebenen Index in den Auswertungsstapel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3109">Loads the address of the local variable at a specific index onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3110">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3110">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3111">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3111">Format</span></span>|<span data-ttu-id="5c934-3112">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3112">Assembly Format</span></span>|<span data-ttu-id="5c934-3113">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3113">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3114">FRONT-END-OD &LT; `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="5c934-3114">FE OD < `unsigned int16` ></span></span>|<span data-ttu-id="5c934-3115">ldloca `index`</span><span class="sxs-lookup"><span data-stu-id="5c934-3115">ldloca `index`</span></span>|<span data-ttu-id="5c934-3116">Lädt die Adresse der lokalen Variablen am `index` auf dem Auswertungsstapel ab.</span><span class="sxs-lookup"><span data-stu-id="5c934-3116">Loads the address of the local variable at `index` onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="5c934-3117">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3117">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3118">In der lokalen Variablen am angegebenen Index gespeicherte Adresse wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3118">The address stored in the local variable at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3119">Die `ldloca` Anweisung legt die Adresse der lokalen Variable Zahl am durchlaufenen Index auf den Stapel, in dem lokale Variablen 0 nummeriert oder höher.</span><span class="sxs-lookup"><span data-stu-id="5c934-3119">The `ldloca` instruction pushes the address of the local variable number at the passed index onto the stack, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="5c934-3120">Der Wert, der auf dem Stapel abgelegt wurde bereits ordnungsgemäß ausgerichtet für die Verwendung mit Anweisungen wie <xref:System.Reflection.Emit.OpCodes.Ldind_I> und <xref:System.Reflection.Emit.OpCodes.Stind_I>.</span><span class="sxs-lookup"><span data-stu-id="5c934-3120">The value pushed on the stack is already aligned correctly for use with instructions like <xref:System.Reflection.Emit.OpCodes.Ldind_I> and <xref:System.Reflection.Emit.OpCodes.Stind_I>.</span></span> <span data-ttu-id="5c934-3121">Das Ergebnis ist eine vorübergehende Zeiger (Typ `*`).</span><span class="sxs-lookup"><span data-stu-id="5c934-3121">The result is a transient pointer (type `*`).</span></span>  
  
 <span data-ttu-id="5c934-3122">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldloca` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3122">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloca` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3123">ILGenerator.Emit (OpCode, short)</span><span class="sxs-lookup"><span data-stu-id="5c934-3123">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloca_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloca_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloca_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloca_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloca_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloca_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloca_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloca_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3124">Lädt die Adresse der lokalen Variablen am angegebenen Index in den Auswertungsstapel, Kurzform.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3124">Loads the address of the local variable at a specific index onto the evaluation stack, short form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3125">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3125">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3126">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3126">Format</span></span>|<span data-ttu-id="5c934-3127">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3127">Assembly Format</span></span>|<span data-ttu-id="5c934-3128">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3128">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3129">12 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="5c934-3129">12 < `unsigned int8` ></span></span>|<span data-ttu-id="5c934-3130">ldloca.s `index`</span><span class="sxs-lookup"><span data-stu-id="5c934-3130">ldloca.s `index`</span></span>|<span data-ttu-id="5c934-3131">Lädt die Adresse der lokalen Variablen am `index` in den Auswertungsstapel, Kurzform.</span><span class="sxs-lookup"><span data-stu-id="5c934-3131">Loads the address of the local variable at `index` onto the evaluation stack, short form.</span></span>|  
  
 <span data-ttu-id="5c934-3132">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3132">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3133">In der lokalen Variablen am angegebenen Index gespeicherte Adresse wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3133">The address stored in the local variable at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3134">Die `ldloca.s` Anweisung legt die Adresse der lokalen Variable Zahl am durchlaufenen Index auf den Stapel, in dem lokale Variablen 0 nummeriert oder höher.</span><span class="sxs-lookup"><span data-stu-id="5c934-3134">The `ldloca.s` instruction pushes the address of the local variable number at the passed index onto the stack, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="5c934-3135">Der Wert, der auf dem Stapel abgelegt wurde bereits ordnungsgemäß ausgerichtet für die Verwendung mit Anweisungen wie <xref:System.Reflection.Emit.OpCodes.Ldind_I> und <xref:System.Reflection.Emit.OpCodes.Stind_I>.</span><span class="sxs-lookup"><span data-stu-id="5c934-3135">The value pushed on the stack is already aligned correctly for use with instructions like <xref:System.Reflection.Emit.OpCodes.Ldind_I> and <xref:System.Reflection.Emit.OpCodes.Stind_I>.</span></span> <span data-ttu-id="5c934-3136">Das Ergebnis ist eine vorübergehende Zeiger (Typ `*`).</span><span class="sxs-lookup"><span data-stu-id="5c934-3136">The result is a transient pointer (type `*`).</span></span>  
  
 <span data-ttu-id="5c934-3137">Die `ldloca.s` Anweisung bietet eine effiziente Codierung für die Verwendung mit der lokalen Variablen von 0 bis 255.</span><span class="sxs-lookup"><span data-stu-id="5c934-3137">The `ldloca.s` instruction provides an efficient encoding for use with the local variables 0 through 255.</span></span>  
  
 <span data-ttu-id="5c934-3138">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldloca.s` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3138">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloca.s` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3139">ILGenerator.Emit(OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="5c934-3139">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldnull">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldnull;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldnull" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldnull" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldnull As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldnull;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldnull : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldnull" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3140">Legt einen null-Verweis (Typ <see langword="O" />) auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3140">Pushes a null reference (type <see langword="O" />) onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3141">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3141">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3142">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3142">Format</span></span>|<span data-ttu-id="5c934-3143">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3143">Assembly Format</span></span>|<span data-ttu-id="5c934-3144">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3144">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3145">14</span><span class="sxs-lookup"><span data-stu-id="5c934-3145">14</span></span>|<span data-ttu-id="5c934-3146">ldnull</span><span class="sxs-lookup"><span data-stu-id="5c934-3146">ldnull</span></span>|<span data-ttu-id="5c934-3147">einen null-Verweis auf den Stapel mithilfe von Push übertragen</span><span class="sxs-lookup"><span data-stu-id="5c934-3147">push a null reference onto the stack</span></span>|  
  
 <span data-ttu-id="5c934-3148">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3148">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3149">Ein null-Objektverweis ist auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3149">A null object reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3150">`ldnull` Legt einen null-Verweis (Typ `O`) auf dem Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3150">`ldnull` pushes a null reference (type `O`) on the stack.</span></span> <span data-ttu-id="5c934-3151">Hiermit wird die Speicherorte initialisiert, bevor sie mit Daten aufgefüllt werden, oder wenn sie veraltet sind.</span><span class="sxs-lookup"><span data-stu-id="5c934-3151">This is used to initialize locations before they are populated with data, or when they become deprecated.</span></span>  
  
 <span data-ttu-id="5c934-3152">`ldnull` enthält einen null-Verweis, der Größe unabhängig ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-3152">`ldnull` provides a null reference that is size-independent.</span></span>  
  
 <span data-ttu-id="5c934-3153">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldnull` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3153">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldnull` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3154">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-3154">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3155">Kopiert das Werttypobjekt, auf das eine Adresse zeigt, an die oberste Position des Auswertungsstapels.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3155">Copies the value type object pointed to by an address to the top of the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3156">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3156">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3157">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3157">Format</span></span>|<span data-ttu-id="5c934-3158">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3158">Assembly Format</span></span>|<span data-ttu-id="5c934-3159">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3159">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3160">71 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5c934-3160">71 < `T` ></span></span>|<span data-ttu-id="5c934-3161">ldobj `class`</span><span class="sxs-lookup"><span data-stu-id="5c934-3161">ldobj `class`</span></span>|<span data-ttu-id="5c934-3162">Kopiert eine Instanz des Werttyps `class` auf den Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3162">Copy instance of value type `class` to the stack.</span></span>|  
  
 <span data-ttu-id="5c934-3163">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3163">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3164">Die Adresse eines Objekts vom Typ Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3164">The address of a value type object is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-3165">Die Adresse aus dem Stapel per pop ausgelesen wird, und die Instanz an der betreffenden Adresse gesucht wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-3165">The address is popped from the stack and the instance at that particular address is looked up.</span></span>  
  
3.  <span data-ttu-id="5c934-3166">Der Wert des Objekts an dieser Adresse gespeichert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3166">The value of the object stored at that address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3167">Die `ldobj` Anweisung wird verwendet, um einen Werttyp als Parameter übergeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-3167">The `ldobj` instruction is used to pass a value type as a parameter.</span></span>  
  
 <span data-ttu-id="5c934-3168">Die `ldobj` -Anweisung kopiert den Wert verweist `addrOfValObj` (des Typs `&`, `*`, oder `native int`) am Anfang des Stapels.</span><span class="sxs-lookup"><span data-stu-id="5c934-3168">The `ldobj` instruction copies the value pointed to by `addrOfValObj` (of type `&`, `*`, or `native int`) to the top of the stack.</span></span> <span data-ttu-id="5c934-3169">Die Anzahl der kopierten Bytes hängt von der Größe der Klasse (gemäß der `class` Parameter).</span><span class="sxs-lookup"><span data-stu-id="5c934-3169">The number of bytes copied depends on the size of the class (as specified by the `class` parameter).</span></span> <span data-ttu-id="5c934-3170">Die `class` -Parameter ist ein Metadatentoken, das den Werttyp darstellt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3170">The `class` parameter is a metadata token representing the value type.</span></span>  
  
 <span data-ttu-id="5c934-3171">Den Betrieb der `ldobj` Anweisung kann geändert werden, einen unmittelbar vorangehenden <xref:System.Reflection.Emit.OpCodes.Volatile> oder <xref:System.Reflection.Emit.OpCodes.Unaligned> unmittelbar vorangestellt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-3171">The operation of the `ldobj` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="5c934-3172"><xref:System.TypeLoadException> wird ausgelöst, wenn die Klasse nicht gefunden werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-3172"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="5c934-3173">Dies wird in der Regel erkannt, wenn die Microsoft Intermediate Language (MSIL)-Anweisung in systemeigenen Code statt zur Laufzeit konvertiert wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-3173">This is typically detected when the Microsoft Intermediate Language (MSIL) instruction is converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="5c934-3174">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldobj` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3174">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldobj` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3175">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="5c934-3175">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldsfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldsfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldsfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldsfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldsfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldsfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldsfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldsfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3176">Legt den Wert eines statischen Felds auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3176">Pushes the value of a static field onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3177">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3177">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3178">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3178">Format</span></span>|<span data-ttu-id="5c934-3179">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3179">Assembly Format</span></span>|<span data-ttu-id="5c934-3180">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3180">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3181">7E < `T` ></span><span class="sxs-lookup"><span data-stu-id="5c934-3181">7E < `T` ></span></span>|<span data-ttu-id="5c934-3182">ldsfld `field`</span><span class="sxs-lookup"><span data-stu-id="5c934-3182">ldsfld `field`</span></span>|<span data-ttu-id="5c934-3183">Legt den Wert von `field` auf dem Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3183">Push the value of `field` on the stack.</span></span>|  
  
 <span data-ttu-id="5c934-3184">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3184">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3185">Der Wert des Felds wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3185">The value of the specific field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3186">Die `ldsfld` -Anweisung legt den Wert eines statischen (freigegeben für alle Instanzen einer Klasse) Feld auf dem Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3186">The `ldsfld` instruction pushes the value of a static (shared among all instances of a class) field on the stack.</span></span> <span data-ttu-id="5c934-3187">Der Rückgabetyp ist, die dem übergebenen Metadatentoken zugeordnet `field`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3187">The return type is that associated with the passed metadata token `field`.</span></span>  
  
 <span data-ttu-id="5c934-3188">Die `ldsfld` Anweisung haben eine <xref:System.Reflection.Emit.OpCodes.Volatile> Präfix.</span><span class="sxs-lookup"><span data-stu-id="5c934-3188">The `ldsfld` instruction can have a <xref:System.Reflection.Emit.OpCodes.Volatile> prefix.</span></span>  
  
 <span data-ttu-id="5c934-3189">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldsfld` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3189">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldsfld` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3190">ILGenerator.Emit(OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="5c934-3190">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldsflda">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldsflda;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldsflda" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldsflda" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldsflda As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldsflda;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldsflda : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldsflda" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3191">Legt die Adresse eines statischen Felds auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3191">Pushes the address of a static field onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3192">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3192">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3193">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3193">Format</span></span>|<span data-ttu-id="5c934-3194">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3194">Assembly Format</span></span>|<span data-ttu-id="5c934-3195">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3195">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3196">7F &LT; `T` ></span><span class="sxs-lookup"><span data-stu-id="5c934-3196">7F < `T` ></span></span>|<span data-ttu-id="5c934-3197">ldsflda `field`</span><span class="sxs-lookup"><span data-stu-id="5c934-3197">ldsflda `field`</span></span>|<span data-ttu-id="5c934-3198">Legt die Adresse von `field` auf dem Stapel</span><span class="sxs-lookup"><span data-stu-id="5c934-3198">Push the address of `field` on the stack</span></span>|  
  
 <span data-ttu-id="5c934-3199">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3199">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3200">Die Adresse eines bestimmten Felds wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3200">The address of a specific field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3201">Die `ldsflda` Anweisung legt die Adresse eines statischen (freigegeben für alle Instanzen einer Klasse) Feld auf dem Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3201">The `ldsflda` instruction pushes the address of a static (shared among all instances of a class) field on the stack.</span></span> <span data-ttu-id="5c934-3202">Die Adresse dargestellt werden kann, als einen flüchtigen Zeiger (Typ `*`) Wenn das Metadatentoken `field` verweist auf einen Typ, dessen Speicher verwaltet wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-3202">The address may be represented as a transient pointer (type `*`) if the metadata token `field` refers to a type whose memory is managed.</span></span> <span data-ttu-id="5c934-3203">Andernfalls entspricht es einen nicht verwalteten Zeiger (Typ `native int`).</span><span class="sxs-lookup"><span data-stu-id="5c934-3203">Otherwise, it corresponds to an unmanaged pointer (type `native int`).</span></span> <span data-ttu-id="5c934-3204">Beachten Sie, dass `field` möglicherweise ein statischen global mit einer zugewiesenen relative virtuelle Adresse (der Offset des Felds aus der Basisadresse, der seine PE-Datei in den Arbeitsspeicher geladen wird), in dem der Arbeitsspeicher wird nicht verwaltet.</span><span class="sxs-lookup"><span data-stu-id="5c934-3204">Note that `field` may be a static global with an assigned relative virtual address (the offset of the field from the base address at which its containing PE file is loaded into memory) where the memory is unmanaged.</span></span>  
  
 <span data-ttu-id="5c934-3205">Die `ldsflda` Anweisung haben eine <xref:System.Reflection.Emit.OpCodes.Volatile> Präfix.</span><span class="sxs-lookup"><span data-stu-id="5c934-3205">The `ldsflda` instruction can have a <xref:System.Reflection.Emit.OpCodes.Volatile> prefix.</span></span>  
  
 <span data-ttu-id="5c934-3206"><xref:System.MissingFieldException> wird ausgelöst, wenn Feld in den Metadaten nicht gefunden wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-3206"><xref:System.MissingFieldException> is thrown if field is not found in the metadata.</span></span> <span data-ttu-id="5c934-3207">Dies ist in der Regel aktiviert, wenn Microsoft Intermediate Language (MSIL)-Anweisungen in systemeigenen Code, nicht zur Laufzeit konvertiert werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-3207">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at runtime.</span></span>  
  
 <span data-ttu-id="5c934-3208">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldsflda` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3208">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldsflda` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3209">ILGenerator.Emit(OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="5c934-3209">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldstr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldstr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldstr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldstr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldstr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldstr;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldstr : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldstr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3210">Legt einen neuen Objektverweis auf ein in den Metadaten gespeichertes Zeichenfolgenliteral mittels Push ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3210">Pushes a new object reference to a string literal stored in the metadata.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3211">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3211">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3212">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3212">Format</span></span>|<span data-ttu-id="5c934-3213">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3213">Assembly Format</span></span>|<span data-ttu-id="5c934-3214">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3214">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3215">72 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5c934-3215">72 < `T` ></span></span>|<span data-ttu-id="5c934-3216">ldstr `mdToken`</span><span class="sxs-lookup"><span data-stu-id="5c934-3216">ldstr `mdToken`</span></span>|<span data-ttu-id="5c934-3217">Legt ein Zeichenfolgenobjekt, das für den-Metadatenzeichenfolgetoken `mdToken`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3217">Pushes a string object for the metadata string token `mdToken`.</span></span>|  
  
 <span data-ttu-id="5c934-3218">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3218">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3219">Ein Objektverweis auf eine Zeichenfolge wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3219">An object reference to a string is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3220">Die `ldstr` -Anweisung legt einen Objektverweis (Typ `O`), ein neues Zeichenfolgenobjekt, das in den Metadaten gespeicherte Zeichenfolgenliteral darstellt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3220">The `ldstr` instruction pushes an object reference (type `O`) to a new string object representing the specific string literal stored in the metadata.</span></span> <span data-ttu-id="5c934-3221">Die `ldstr` Anweisung weist die erforderliche Menge an Arbeitsspeicher und führt Konvertierung erforderlich, um das Formular, in der Datei in das Zeichenfolgenformat, das zur Laufzeit erforderlich verwendet das Zeichenfolgenliteral konvertieren.</span><span class="sxs-lookup"><span data-stu-id="5c934-3221">The `ldstr` instruction allocates the requisite amount of memory and performs any format conversion required to convert the string literal from the form used in the file to the string format required at runtime.</span></span>  
  
 <span data-ttu-id="5c934-3222">Die Common Language Infrastructure (CLI) wird sichergestellt, dass das Ergebnis von zwei `ldstr` Anweisungen verweisen auf zwei Metadatentoken verwendet, die die gleiche Sequenz von Zeichen zurück, genau das gleiche Zeichenfolgenobjekt (ein Prozess als "Internalisieren von Zeichenfolgen" bezeichnet).</span><span class="sxs-lookup"><span data-stu-id="5c934-3222">The Common Language Infrastructure (CLI) guarantees that the result of two `ldstr` instructions referring to two metadata tokens that have the same sequence of characters return precisely the same string object (a process known as "string interning").</span></span>  
  
 <span data-ttu-id="5c934-3223">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldstr` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3223">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldstr` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3224">ILGenerator.Emit(OpCode, string)</span><span class="sxs-lookup"><span data-stu-id="5c934-3224">ILGenerator.Emit(OpCode, string)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldtoken">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldtoken;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldtoken" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldtoken" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldtoken As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldtoken;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldtoken : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldtoken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3225">Konvertiert ein Metadatentoken in seine Laufzeitdarstellung und legt es auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3225">Converts a metadata token to its runtime representation, pushing it onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3226">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3226">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3227">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3227">Format</span></span>|<span data-ttu-id="5c934-3228">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3228">Assembly Format</span></span>|<span data-ttu-id="5c934-3229">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3229">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3230">D0 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5c934-3230">D0 < `T` ></span></span>|<span data-ttu-id="5c934-3231">ldtoken `token`</span><span class="sxs-lookup"><span data-stu-id="5c934-3231">ldtoken `token`</span></span>|<span data-ttu-id="5c934-3232">Konvertiert ein Metadatentoken in seine laufzeitdarstellung an.</span><span class="sxs-lookup"><span data-stu-id="5c934-3232">Converts a metadata token to its runtime representation.</span></span>|  
  
 <span data-ttu-id="5c934-3233">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3233">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3234">Das übergebene Token wird in konvertiert eine `RuntimeHandle` und auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3234">The passed token is converted to a `RuntimeHandle` and pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3235">Die `ldtoken` Anweisung Pushvorgänge einen `RuntimeHandle` für das angegebene Metadatentoken.</span><span class="sxs-lookup"><span data-stu-id="5c934-3235">The `ldtoken` instruction pushes a `RuntimeHandle` for the specified metadata token.</span></span> <span data-ttu-id="5c934-3236">Ein `RuntimeHandle` kann eine `fieldref/fielddef`, `methodref/methoddef`, oder ein `typeref/typedef`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3236">A `RuntimeHandle` can be a `fieldref/fielddef`, a `methodref/methoddef`, or a `typeref/typedef`.</span></span>  
  
 <span data-ttu-id="5c934-3237">Der Wert, der auf dem Stapel abgelegt kann verwendet werden, in Aufrufen von `Reflection` Methoden in der System-Klassenbibliothek.</span><span class="sxs-lookup"><span data-stu-id="5c934-3237">The value pushed on the stack can be used in calls to `Reflection` methods in the system class library.</span></span>  
  
 <span data-ttu-id="5c934-3238">Informationen über Laufzeithandles finden Sie die folgenden Klassen: <xref:System.RuntimeFieldHandle>, <xref:System.RuntimeTypeHandle>, und <xref:System.RuntimeMethodHandle>.</span><span class="sxs-lookup"><span data-stu-id="5c934-3238">For information on runtime handles, see the following classes: <xref:System.RuntimeFieldHandle>, <xref:System.RuntimeTypeHandle>, and <xref:System.RuntimeMethodHandle>.</span></span>  
  
 <span data-ttu-id="5c934-3239">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> methodenüberladungen können die `ldtoken` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3239">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `ldtoken` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3240">ILGenerator.Emit (OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="5c934-3240">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
-   <span data-ttu-id="5c934-3241">ILGenerator.Emit(OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="5c934-3241">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
-   <span data-ttu-id="5c934-3242">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="5c934-3242">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldvirtftn">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldvirtftn;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldvirtftn" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldvirtftn" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldvirtftn As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldvirtftn;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldvirtftn : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldvirtftn" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3243">Legt einen nicht verwalteten Zeiger (Typ <see langword="native int" />) auf den systemeigenen Code implementiert eine bestimmte virtuelle Methode, die auf dem Auswertungsstapel ab einem angegebenen Objekt zugeordnet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3243">Pushes an unmanaged pointer (type <see langword="native int" />) to the native code implementing a particular virtual method associated with a specified object onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3244">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3244">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3245">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3245">Format</span></span>|<span data-ttu-id="5c934-3246">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3246">Assembly Format</span></span>|<span data-ttu-id="5c934-3247">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3247">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3248">FE 07 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5c934-3248">FE 07 < `T` ></span></span>|<span data-ttu-id="5c934-3249">ldvirtftn `method`</span><span class="sxs-lookup"><span data-stu-id="5c934-3249">ldvirtftn `method`</span></span>|<span data-ttu-id="5c934-3250">Legt einen Zeiger auf ein Objekt der virtuellen Methode `method` auf dem Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3250">Pushes the pointer to an object's virtual method `method` on the stack.</span></span>|  
  
 <span data-ttu-id="5c934-3251">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3251">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3252">Es ist ein Objektverweis auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3252">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-3253">Der Objektverweis per pop ausgelesen wird aus dem Stapel und die Adresse des Einstiegspunkts der-Methode (entsprechend der Angabe durch das Metadatentoken `method`) gesucht wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-3253">The object reference is popped from the stack and the address of the entry point to the method (as specified by the metadata token `method`) is looked up.</span></span>  
  
3.  <span data-ttu-id="5c934-3254">Der Zeiger auf `method` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3254">The pointer to `method` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3255">Der resultierende nicht verwaltete Zeiger auf den Stapel von übertragen die `ldvirtftn` Anweisung kann aufgerufen werden, mithilfe der <xref:System.Reflection.Emit.OpCodes.Calli> Anweisung, wenn er verweist auf eine verwaltete Methode (oder einen Stub, der Übergang von verwaltetem zu nicht verwaltetem Code).</span><span class="sxs-lookup"><span data-stu-id="5c934-3255">The resulting unmanaged pointer pushed onto the stack by the `ldvirtftn` instruction can be called using the <xref:System.Reflection.Emit.OpCodes.Calli> instruction if it references a managed method (or a stub that transitions from managed to unmanaged code).</span></span>  
  
 <span data-ttu-id="5c934-3256">Der nicht verwaltete Zeiger verweist auf systemeigenen Code mit der CLR, die Aufrufkonvention.</span><span class="sxs-lookup"><span data-stu-id="5c934-3256">The unmanaged pointer points to native code using the CLR calling convention.</span></span> <span data-ttu-id="5c934-3257">Diese Methodenzeiger sollten nicht in nicht verwalteten nativen Code als Rückrufroutine übergeben werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-3257">This method pointer should not be passed to unmanaged native code as a callback routine.</span></span>  
  
 <span data-ttu-id="5c934-3258">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ldvirtftn` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3258">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldvirtftn` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3259">ILGenerator.Emit (OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="5c934-3259">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Leave">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Leave;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Leave" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Leave" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Leave As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Leave;" />
      <MemberSignature Language="F#" Value=" staticval mutable Leave : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Leave" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3260">Beendet einen geschützten Codebereich, wobei die Steuerung bedingungslos an eine bestimmte Zielanweisung übertragen wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3260">Exits a protected region of code, unconditionally transferring control to a specific target instruction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3261">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3261">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3262">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3262">Format</span></span>|<span data-ttu-id="5c934-3263">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3263">Assembly Format</span></span>|<span data-ttu-id="5c934-3264">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3264">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3265">TT &LT; `int32` ></span><span class="sxs-lookup"><span data-stu-id="5c934-3265">DD < `int32` ></span></span>|<span data-ttu-id="5c934-3266">Lassen Sie `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-3266">leave `target`</span></span>|<span data-ttu-id="5c934-3267">Beendet einen geschützten Codebereich an.</span><span class="sxs-lookup"><span data-stu-id="5c934-3267">Exits a protected region of code.</span></span>|  
  
 <span data-ttu-id="5c934-3268">Es gibt keine Zustandswechsel, die für diese Anweisung angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-3268">There is no stack transition behavior specified for this instruction.</span></span>  
  
 <span data-ttu-id="5c934-3269">Die `leave` -Anweisung überträgt die Steuerung bedingungslos an die bestimmte zielanweisung, dargestellt als mit 4-Byte-Offset vom Anfang der aktuelle Anweisung folgenden.</span><span class="sxs-lookup"><span data-stu-id="5c934-3269">The `leave` instruction unconditionally transfers control to the specific target instruction, represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5c934-3270">Die `leave` Anweisung ähnelt der `br` -Anweisung, aber es kann verwendet werden, um das Beenden einer `try`, `filter`, oder `catch` blockieren, während die normale verzweigungsanweisungen nur in solchen Blocks können zum Übertragen des Steuerelements in verwendet werden Es ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-3270">The `leave` instruction is similar to the `br` instruction, but it can be used to exit a `try`, `filter`, or `catch` block whereas the ordinary branch instructions can only be used in such a block to transfer control within it.</span></span> <span data-ttu-id="5c934-3271">Die `leave` Anweisung leert den Auswertungsstapel und stellt sicher, dass die entsprechenden umgebenden `finally` -blocke ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-3271">The `leave` instruction empties the evaluation stack and ensures that the appropriate surrounding `finally` blocks are executed.</span></span>  
  
 <span data-ttu-id="5c934-3272">Können keine `leave` Anweisungen zum Beenden einer `finally` Block.</span><span class="sxs-lookup"><span data-stu-id="5c934-3272">You cannot use a `leave` instruction to exit a `finally` block.</span></span> <span data-ttu-id="5c934-3273">Um die codegenerierung für Ausnahmehandler zu erleichtern es innerhalb eines Catch-Blocks verwenden gültig ist eine `leave` -Anweisung die Steuerung an eine beliebige Anweisung in der zugeordneten übertragen `try` Block.</span><span class="sxs-lookup"><span data-stu-id="5c934-3273">To ease code generation for exception handlers it is valid from within a catch block to use a `leave` instruction to transfer control to any instruction within the associated `try` block.</span></span>  
  
 <span data-ttu-id="5c934-3274">Weist eine Anweisung auf einen oder mehrere Präfix-Codes, können nur werden die Steuerung an die erste dieser Präfixe.</span><span class="sxs-lookup"><span data-stu-id="5c934-3274">If an instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="5c934-3275">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> methodenüberladungen können die `leave` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3275">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `leave` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3276">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="5c934-3276">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Leave_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Leave_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Leave_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Leave_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Leave_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Leave_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Leave_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Leave_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3277">Beendet einen geschützten Codebereich, wobei die Steuerung bedingungslos an eine bestimmte Zielanweisung übertragen wird, Kurzform.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3277">Exits a protected region of code, unconditionally transferring control to a target instruction (short form).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3278">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3278">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3279">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3279">Format</span></span>|<span data-ttu-id="5c934-3280">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3280">Assembly Format</span></span>|<span data-ttu-id="5c934-3281">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3281">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3282">DE < `int8` ></span><span class="sxs-lookup"><span data-stu-id="5c934-3282">DE < `int8` ></span></span>|<span data-ttu-id="5c934-3283">leave.s `target`</span><span class="sxs-lookup"><span data-stu-id="5c934-3283">leave.s `target`</span></span>|<span data-ttu-id="5c934-3284">Beendet einen geschützten Codebereich, Kurzform.</span><span class="sxs-lookup"><span data-stu-id="5c934-3284">Exit a protected region of code, short form.</span></span>|  
  
 <span data-ttu-id="5c934-3285">Es gibt keine Zustandswechsel, die für diese Anweisung angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-3285">There is no stack transition behavior specified for this instruction.</span></span>  
  
 <span data-ttu-id="5c934-3286">Die `leave.s` -Anweisung überträgt die Steuerung bedingungslos an die übergebene zielanweisung, als mit 1-Byte-Offset vom Anfang der aktuelle Anweisung folgenden dargestellt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3286">The `leave.s` instruction unconditionally transfers control to the passed target instruction, represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5c934-3287">Die `leave.s` Anweisung ähnelt der `br` -Anweisung, aber es kann verwendet werden, um das Beenden einer `try`, `filter`, oder `catch` blockieren, während die normale verzweigungsanweisungen nur in solchen Blocks können zum Übertragen des Steuerelements in verwendet werden Es ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-3287">The `leave.s` instruction is similar to the `br` instruction, but it can be used to exit a `try`, `filter`, or `catch` block whereas the ordinary branch instructions can only be used in such a block to transfer control within it.</span></span> <span data-ttu-id="5c934-3288">Die `leave.s` Anweisung leert den Auswertungsstapel und stellt sicher, dass die entsprechenden umgebenden `finally` -blocke ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-3288">The `leave.s` instruction empties the evaluation stack and ensures that the appropriate surrounding `finally` blocks are executed.</span></span>  
  
 <span data-ttu-id="5c934-3289">Können keine `leave.s` Anweisungen zum Beenden einer `finally` Block.</span><span class="sxs-lookup"><span data-stu-id="5c934-3289">You cannot use a `leave.s` instruction to exit a `finally` block.</span></span> <span data-ttu-id="5c934-3290">Um die codegenerierung für Ausnahmehandler zu erleichtern es innerhalb eines Catch-Blocks verwenden gültig ist eine `leave.s` -Anweisung die Steuerung an eine beliebige Anweisung in der zugeordneten übertragen `try` Block.</span><span class="sxs-lookup"><span data-stu-id="5c934-3290">To ease code generation for exception handlers it is valid from within a catch block to use a `leave.s` instruction to transfer control to any instruction within the associated `try` block.</span></span>  
  
 <span data-ttu-id="5c934-3291">Weist eine Anweisung auf einen oder mehrere Präfix-Codes, können nur werden die Steuerung an die erste dieser Präfixe.</span><span class="sxs-lookup"><span data-stu-id="5c934-3291">If an instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="5c934-3292">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `leave.s` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3292">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `leave.s` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3293">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="5c934-3293">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Localloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Localloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Localloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Localloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Localloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Localloc;" />
      <MemberSignature Language="F#" Value=" staticval mutable Localloc : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Localloc" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3294">Ordnet eine bestimmte Anzahl von Bytes aus dem lokalen dynamischen Speicherpool und legt die Adresse (einen flüchtigen Zeiger, Typ <see langword="*" />) des ersten reservierten Bytes auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3294">Allocates a certain number of bytes from the local dynamic memory pool and pushes the address (a transient pointer, type <see langword="*" />) of the first allocated byte onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3295">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3295">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3296">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3296">Format</span></span>|<span data-ttu-id="5c934-3297">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3297">Assembly Format</span></span>|<span data-ttu-id="5c934-3298">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3298">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3299">FRONT-END-0F</span><span class="sxs-lookup"><span data-stu-id="5c934-3299">FE 0F</span></span>|<span data-ttu-id="5c934-3300">localloc</span><span class="sxs-lookup"><span data-stu-id="5c934-3300">localloc</span></span>|<span data-ttu-id="5c934-3301">Speicherplatz wird vom lokalen Heap zuordnen.</span><span class="sxs-lookup"><span data-stu-id="5c934-3301">Allocate space from the local heap.</span></span>|  
  
 <span data-ttu-id="5c934-3302">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3302">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3303">Die Anzahl der Bytes, die zugeordnet werden, wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3303">The number of bytes to be allocated is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-3304">Die Anzahl von Bytes wird vom Stapel geholt. Größe des Arbeitsspeichers, die für die Größe wird vom lokalen Heap zugeordnet.</span><span class="sxs-lookup"><span data-stu-id="5c934-3304">The number of bytes is popped from the stack; an amount of memory corresponding to the size is allocated from the local heap.</span></span>  
  
3.  <span data-ttu-id="5c934-3305">Ein Zeiger auf das erste Byte der belegte Arbeitsspeicher ist auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3305">A pointer to the first byte of the allocated memory is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3306">Die `localloc` Anweisung ordnet `size` (Typ `natural unsigned int`) Bytes aus dem lokalen dynamischen Arbeitsspeicher pool und die Adresse zurückgibt (einen flüchtigen Zeiger, Typ `*`) des ersten reservierten Bytes.</span><span class="sxs-lookup"><span data-stu-id="5c934-3306">The `localloc` instruction allocates `size` (type `natural unsigned int`) bytes from the local dynamic memory pool and returns the address (a transient pointer, type `*`) of the first allocated byte.</span></span> <span data-ttu-id="5c934-3307">Der Speicherblock, der zurückgegeben wird nur dann, wenn das Initialisierungsflag für die Methode wird mit 0 initialisiert `true`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3307">The block of memory returned is initialized to 0 only if the initialize flag on the method is `true`.</span></span> <span data-ttu-id="5c934-3308">Wenn die aktuelle Methode führt eine <xref:System.Reflection.Emit.OpCodes.Ret>, lokalen Speicherpool für die erneute Verwendung zur Verfügung gestellt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-3308">When the current method executes a <xref:System.Reflection.Emit.OpCodes.Ret>, the local memory pool is made available for reuse.</span></span>  
  
 <span data-ttu-id="5c934-3309">Die resultierende Adresse orientiert, damit alle primitiven Datentyp es gespeichert werden kann, mit der `stind` Anweisungen (z. B. <xref:System.Reflection.Emit.OpCodes.Stind_I4>) und geladen, mit der `ldind` Anweisungen (z. B. <xref:System.Reflection.Emit.OpCodes.Ldind_I4>).</span><span class="sxs-lookup"><span data-stu-id="5c934-3309">The resulting address is aligned so that any primitive data type can be stored there using the `stind` instructions (such as <xref:System.Reflection.Emit.OpCodes.Stind_I4>) and loaded using the `ldind` instructions (such as <xref:System.Reflection.Emit.OpCodes.Ldind_I4>).</span></span>  
  
 <span data-ttu-id="5c934-3310">Die `localloc` Anweisung kann nicht auftreten, in einem `filter`, `catch`, `finally`, oder `fault` Block.</span><span class="sxs-lookup"><span data-stu-id="5c934-3310">The `localloc` instruction cannot occur within a `filter`, `catch`, `finally`, or `fault` block.</span></span>  
  
 <span data-ttu-id="5c934-3311"><xref:System.StackOverflowException> wird ausgelöst, wenn nicht genügend zur Verarbeitung die Anfrage Arbeitsspeicher.</span><span class="sxs-lookup"><span data-stu-id="5c934-3311"><xref:System.StackOverflowException> is thrown if there is insufficient memory to service the request.</span></span>  
  
 <span data-ttu-id="5c934-3312">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `localloc` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3312">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `localloc` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3313">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-3313">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mkrefany">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mkrefany;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mkrefany" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mkrefany" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mkrefany As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mkrefany;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mkrefany : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mkrefany" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3314">Legt einen typisierten Verweis auf eine Instanz eines bestimmten Typs auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3314">Pushes a typed reference to an instance of a specific type onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3315">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3315">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3316">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3316">Format</span></span>|<span data-ttu-id="5c934-3317">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3317">Assembly Format</span></span>|<span data-ttu-id="5c934-3318">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3318">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3319">C6 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5c934-3319">C6 < `T` ></span></span>|<span data-ttu-id="5c934-3320">mkrefany `class`</span><span class="sxs-lookup"><span data-stu-id="5c934-3320">mkrefany `class`</span></span>|<span data-ttu-id="5c934-3321">Legt einen typisierten Verweis des Typs `class` im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3321">Pushes a typed reference of type `class` onto the stack.</span></span>|  
  
 <span data-ttu-id="5c934-3322">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3322">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3323">Ein Zeiger auf Daten auf dem Stapel abgelegt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-3323">A pointer to piece of data is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-3324">Der Zeiger wird per pop ausgelesen und in einen typisierten Verweis des Typs konvertiert `class`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3324">The pointer is popped and converted to a typed reference of type `class`.</span></span>  
  
3.  <span data-ttu-id="5c934-3325">Die typisierte Verweis wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3325">The typed reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3326">Die `mkrefany` -Anweisung unterstützt das Übergeben von dynamisch typisierten verweisen.</span><span class="sxs-lookup"><span data-stu-id="5c934-3326">The `mkrefany` instruction supports the passing of dynamically typed references.</span></span> <span data-ttu-id="5c934-3327">Der Zeiger muss vom Typ `&`, `*`, oder `native int`, und halten Sie die gültige Adresse eines Datenelements.</span><span class="sxs-lookup"><span data-stu-id="5c934-3327">The pointer must be of type `&`, `*`, or `native int`, and hold the valid address of a piece of data.</span></span> <span data-ttu-id="5c934-3328">`Class` Beschreibt das Klassentoken den Typ der Daten, auf der Zeiger verweist.</span><span class="sxs-lookup"><span data-stu-id="5c934-3328">`Class` is the class token describing the type of the data referenced by the pointer.</span></span> <span data-ttu-id="5c934-3329">`Mkrefany` Legt einen typisierten Verweis auf dem Stapel, wobei ein nicht transparenten Deskriptor des Zeigers und der Typ `class`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3329">`Mkrefany` pushes a typed reference on the stack, providing an opaque descriptor of the pointer and the type `class`.</span></span>  
  
 <span data-ttu-id="5c934-3330">Der einzige zulässige Operation auf einen typisierten Verweis ist auf eine Methode übergeben, die einen typisierten Verweis als Parameter erforderlich.</span><span class="sxs-lookup"><span data-stu-id="5c934-3330">The only valid operation permitted upon a typed reference is to pass it to a method that requires a typed reference as a parameter.</span></span> <span data-ttu-id="5c934-3331">Der aufgerufene können Sie dann die <xref:System.Reflection.Emit.OpCodes.Refanytype> und <xref:System.Reflection.Emit.OpCodes.Refanyval> Anweisungen, um den Typ (Klasse) und die Adresse bzw. abgerufen.</span><span class="sxs-lookup"><span data-stu-id="5c934-3331">The callee can then use the <xref:System.Reflection.Emit.OpCodes.Refanytype> and <xref:System.Reflection.Emit.OpCodes.Refanyval> instructions to retrieve the type (class) and the address respectively.</span></span>  
  
 <span data-ttu-id="5c934-3332"><xref:System.TypeLoadException> wird ausgelöst, wenn `class` wurde nicht gefunden.</span><span class="sxs-lookup"><span data-stu-id="5c934-3332"><xref:System.TypeLoadException> is thrown if `class` cannot be found.</span></span> <span data-ttu-id="5c934-3333">Dies wird in der Regel erkannt, wenn Microsoft Intermediate Language (MSIL)-Anweisungen nicht zur Laufzeit, sondern in systemeigenen Code konvertiert werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-3333">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="5c934-3334">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `mkrefany` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3334">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mkrefany` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3335">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="5c934-3335">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mul : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mul" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3336">Multipliziert zwei Werte und legt das Ergebnis auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3336">Multiplies two values and pushes the result on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3337">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3337">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3338">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3338">Format</span></span>|<span data-ttu-id="5c934-3339">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3339">Assembly Format</span></span>|<span data-ttu-id="5c934-3340">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3340">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3341">5A</span><span class="sxs-lookup"><span data-stu-id="5c934-3341">5A</span></span>|<span data-ttu-id="5c934-3342">mul</span><span class="sxs-lookup"><span data-stu-id="5c934-3342">mul</span></span>|<span data-ttu-id="5c934-3343">Multipliziert zwei Werte im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3343">Multiplies two values on the stack.</span></span>|  
  
 <span data-ttu-id="5c934-3344">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3344">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3345">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3345">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-3346">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3346">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-3347">`value2` und `value1` werden aus den Stapel geholt `value1` multipliziert wird `value2`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3347">`value2` and `value1` are popped from the stack; `value1` is multiplied by `value2`.</span></span>  
  
4.  <span data-ttu-id="5c934-3348">Das Ergebnis wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3348">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3349">Die `mul` -Anweisung multipliziert `value1` von `value2` und legt das Ergebnis im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3349">The `mul` instruction multiplies `value1` by `value2` and pushes the result on the stack.</span></span> <span data-ttu-id="5c934-3350">Operationen mit ganzen Zahlen abgeschnitten werden, automatisch die höherwertigen Bits bei einem Überlauf.</span><span class="sxs-lookup"><span data-stu-id="5c934-3350">Integer operations silently truncate the upper bits on overflow.</span></span>  
  
 <span data-ttu-id="5c934-3351">Finden Sie unter <xref:System.Reflection.Emit.OpCodes.Mul_Ovf> für eine ganze Zahlen multiply-Vorgang mit der Bearbeitung von Überlaufdaten.</span><span class="sxs-lookup"><span data-stu-id="5c934-3351">See <xref:System.Reflection.Emit.OpCodes.Mul_Ovf> for an integer-specific multiply operation with overflow handling.</span></span>  
  
 <span data-ttu-id="5c934-3352">Für die Gleitkommatypen 0 \* Unendlich = NaN.</span><span class="sxs-lookup"><span data-stu-id="5c934-3352">For floating-point types, 0 \* infinity = NaN.</span></span>  
  
 <span data-ttu-id="5c934-3353">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `mul` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3353">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mul` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3354">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-3354">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul_Ovf;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mul_Ovf : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mul_Ovf" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3355">Multipliziert zwei Ganzzahlwerte, führt eine Überlaufprüfung durch und legt das Ergebnis auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3355">Multiplies two integer values, performs an overflow check, and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3356">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3356">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3357">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3357">Format</span></span>|<span data-ttu-id="5c934-3358">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3358">Assembly Format</span></span>|<span data-ttu-id="5c934-3359">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3359">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3360">D8</span><span class="sxs-lookup"><span data-stu-id="5c934-3360">D8</span></span>|<span data-ttu-id="5c934-3361">mul.ovf</span><span class="sxs-lookup"><span data-stu-id="5c934-3361">mul.ovf</span></span>|<span data-ttu-id="5c934-3362">Multipliziert zwei Ganzzahlwerte auf dem Stapel mit eine überlaufprüfung an.</span><span class="sxs-lookup"><span data-stu-id="5c934-3362">Multiplies two integer values on the stack with an overflow check.</span></span>|  
  
 <span data-ttu-id="5c934-3363">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3363">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3364">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3364">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-3365">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3365">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-3366">`value2` und `value1` werden aus den Stapel geholt `value1` multipliziert wird `value2`, mit der eine überlaufprüfung.</span><span class="sxs-lookup"><span data-stu-id="5c934-3366">`value2` and `value1` are popped from the stack; `value1` is multiplied by `value2`, with an overflow check.</span></span>  
  
4.  <span data-ttu-id="5c934-3367">Das Ergebnis wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3367">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3368">Die `mul.ovf` Anweisung multipliziert die ganze Zahl `value1` durch eine ganze Zahl `value2` und legt das Ergebnis im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3368">The `mul.ovf` instruction multiplies integer `value1` by integer `value2` and pushes the result on the stack.</span></span> <span data-ttu-id="5c934-3369">Eine Ausnahme wird ausgelöst, wenn das Ergebnis nicht im Ergebnistyp passen.</span><span class="sxs-lookup"><span data-stu-id="5c934-3369">An exception is thrown if the result will not fit in the result type.</span></span>  
  
 <span data-ttu-id="5c934-3370"><xref:System.OverflowException> wird ausgelöst, wenn das Ergebnis nicht im Ergebnistyp dargestellt werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-3370"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5c934-3371">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `mul.ovf` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3371">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mul.ovf` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3372">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-3372">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul_Ovf_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mul_Ovf_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mul_Ovf_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3373">Multipliziert zwei Ganzzahlwerte ohne Vorzeichen, führt eine Überlaufprüfung durch und legt das Ergebnis auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3373">Multiplies two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3374">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3374">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3375">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3375">Format</span></span>|<span data-ttu-id="5c934-3376">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3376">Assembly Format</span></span>|<span data-ttu-id="5c934-3377">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3377">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3378">D9</span><span class="sxs-lookup"><span data-stu-id="5c934-3378">D9</span></span>|<span data-ttu-id="5c934-3379">mul.ovf.un</span><span class="sxs-lookup"><span data-stu-id="5c934-3379">mul.ovf.un</span></span>|<span data-ttu-id="5c934-3380">Multipliziert zwei Werte, die auf dem Stapel mit eine überlaufprüfung ohne Vorzeichen.</span><span class="sxs-lookup"><span data-stu-id="5c934-3380">Multiplies two unsigned values on the stack with an overflow check.</span></span>|  
  
 <span data-ttu-id="5c934-3381">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3381">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3382">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3382">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-3383">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3383">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-3384">`value2` und `value1` werden aus den Stapel geholt `value1` multipliziert wird `value2`, mit der eine überlaufprüfung.</span><span class="sxs-lookup"><span data-stu-id="5c934-3384">`value2` and `value1` are popped from the stack; `value1` is multiplied by `value2`, with an overflow check.</span></span>  
  
4.  <span data-ttu-id="5c934-3385">Das Ergebnis wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3385">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3386">Die `mul.ovf.un` -Anweisung multipliziert die ganze Zahl ohne Vorzeichen `value1` von Ganzzahl ohne Vorzeichen `value2` und legt das Ergebnis im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3386">The `mul.ovf.un` instruction multiplies unsigned integer `value1` by unsigned integer `value2` and pushes the result on the stack.</span></span> <span data-ttu-id="5c934-3387">Eine Ausnahme wird ausgelöst, wenn das Ergebnis nicht im Ergebnistyp passen.</span><span class="sxs-lookup"><span data-stu-id="5c934-3387">An exception is thrown if the result will not fit in the result type.</span></span>  
  
 <span data-ttu-id="5c934-3388"><xref:System.OverflowException> wird ausgelöst, wenn das Ergebnis nicht im Ergebnistyp dargestellt werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-3388"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5c934-3389">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `mul.ovf.un` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3389">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mul.ovf.un` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3390">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-3390">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Neg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Neg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Neg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Neg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Neg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Neg;" />
      <MemberSignature Language="F#" Value=" staticval mutable Neg : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Neg" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3391">Negiert einen Wert und legt das Ergebnis auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3391">Negates a value and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3392">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3392">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3393">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3393">Format</span></span>|<span data-ttu-id="5c934-3394">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3394">Assembly Format</span></span>|<span data-ttu-id="5c934-3395">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3395">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3396">65</span><span class="sxs-lookup"><span data-stu-id="5c934-3396">65</span></span>|<span data-ttu-id="5c934-3397">Neg</span><span class="sxs-lookup"><span data-stu-id="5c934-3397">neg</span></span>|<span data-ttu-id="5c934-3398">Negiert den Wert derzeit an oberster Position im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3398">Negates the value currently on top of the stack.</span></span>|  
  
 <span data-ttu-id="5c934-3399">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3399">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3400">Ein Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3400">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-3401">Ein Wert vom Stapel geholt und negiert.</span><span class="sxs-lookup"><span data-stu-id="5c934-3401">A value is popped from the stack and negated.</span></span>  
  
3.  <span data-ttu-id="5c934-3402">Das Ergebnis wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3402">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3403">Die `neg` Anweisung negiert den Wert und legt das Ergebnis auf dem Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3403">The `neg` instruction negates value and pushes the result on top of the stack.</span></span> <span data-ttu-id="5c934-3404">Der Rückgabetyp ist identisch mit dem Operandentyp.</span><span class="sxs-lookup"><span data-stu-id="5c934-3404">The return type is the same as the operand type.</span></span>  
  
 <span data-ttu-id="5c934-3405">Negation von ganzzahligen Werten ist die standardmäßige Zweierkomplement Negation.</span><span class="sxs-lookup"><span data-stu-id="5c934-3405">Negation of integral values is standard two's complement negation.</span></span> <span data-ttu-id="5c934-3406">Insbesondere führt die kleinste negative Zahl (der keine positive Entsprechung), wird die kleinste negative Zahl ergibt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3406">In particular, negating the most negative number (which does not have a positive counterpart) yields the most negative number.</span></span> <span data-ttu-id="5c934-3407">Diese Verwendung Überlauf erkennen die <xref:System.Reflection.Emit.OpCodes.Sub_Ovf> Anweisung stattdessen (d. h. 0 subtrahiert).</span><span class="sxs-lookup"><span data-stu-id="5c934-3407">To detect this overflow use the <xref:System.Reflection.Emit.OpCodes.Sub_Ovf> instruction instead (that is, subtract from 0).</span></span>  
  
 <span data-ttu-id="5c934-3408">Negiert eine Gleitkommazahl kann kein Überlauf und negieren NaN wird NaN zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-3408">Negating a floating-point number cannot overflow, and negating NaN returns NaN.</span></span>  
  
 <span data-ttu-id="5c934-3409">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `neg` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3409">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `neg` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3410">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-3410">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Newarr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Newarr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Newarr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Newarr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Newarr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Newarr;" />
      <MemberSignature Language="F#" Value=" staticval mutable Newarr : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Newarr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3411">Legt einen Objektverweis auf ein neues nullbasiertes, eindimensionales Array auf dem Auswertungsstapel ab, dessen Elemente einen bestimmten Typ aufweisen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3411">Pushes an object reference to a new zero-based, one-dimensional array whose elements are of a specific type onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3412">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3412">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3413">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3413">Format</span></span>|<span data-ttu-id="5c934-3414">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3414">Assembly Format</span></span>|<span data-ttu-id="5c934-3415">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3415">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3416">8D < `T` ></span><span class="sxs-lookup"><span data-stu-id="5c934-3416">8D < `T` ></span></span>|<span data-ttu-id="5c934-3417">newarr `etype`</span><span class="sxs-lookup"><span data-stu-id="5c934-3417">newarr `etype`</span></span>|<span data-ttu-id="5c934-3418">Erstellt ein neues Array mit Elementen des Typs `etype`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3418">Creates a new array with elements of type `etype`.</span></span>|  
  
 <span data-ttu-id="5c934-3419">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3419">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3420">Die Anzahl der Elemente im Array ist auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3420">The number of elements in the array is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-3421">Die Anzahl der Elemente aus dem Stapel per pop ausgelesen wird, und das Array wird erstellt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3421">The number of elements is popped from the stack and the array is created.</span></span>  
  
3.  <span data-ttu-id="5c934-3422">Ein Objektverweis auf das neue Array ist auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3422">An object reference to the new array is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3423">Die `newarr` -Anweisung legt einen Objektverweis (Typ `O`) in ein neues nullbasiertes, eindimensionales Array, dessen Elemente vom Typ sind `etype` (ein Metadatentoken, das den Typ beschreibt).</span><span class="sxs-lookup"><span data-stu-id="5c934-3423">The `newarr` instruction pushes an object reference (type `O`) to a new zero-based, one-dimensional array whose elements are of type `etype` (a metadata token describing the type).</span></span> <span data-ttu-id="5c934-3424">Die Anzahl der Elemente im neuen Array sollte angegeben werden, als eine `native int`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3424">The number of elements in the new array should be specified as a `native int`.</span></span> <span data-ttu-id="5c934-3425">Gültiges Array Indizes im Bereich von 0 (null), auf die maximale Anzahl von Elementen, die minus eins.</span><span class="sxs-lookup"><span data-stu-id="5c934-3425">Valid array indexes range from zero to the maximum number of elements minus one.</span></span>  
  
 <span data-ttu-id="5c934-3426">Die Elemente eines Arrays können beliebigen Typs, einschließlich Werttypen sein.</span><span class="sxs-lookup"><span data-stu-id="5c934-3426">The elements of an array can be any type, including value types.</span></span>  
  
 <span data-ttu-id="5c934-3427">Nullbasierten, eindimensionalen Arrays von Zahlen werden erstellt, die mit einem Verweis auf den entsprechenden Werttyp Metadatentoken (<xref:System.Int32>und so weiter).</span><span class="sxs-lookup"><span data-stu-id="5c934-3427">Zero-based, one-dimensional arrays of numbers are created using a metadata token referencing the appropriate value type (<xref:System.Int32>, and so on).</span></span> <span data-ttu-id="5c934-3428">Elemente des Arrays werden mit 0 des entsprechenden Typs initialisiert.</span><span class="sxs-lookup"><span data-stu-id="5c934-3428">Elements of the array are initialized to 0 of the appropriate type.</span></span>  
  
 <span data-ttu-id="5c934-3429">Eindimensionale Arrays, nicht nullbasiert sind und mehrdimensionale Arrays werden mit erstellt <xref:System.Reflection.Emit.OpCodes.Newobj> statt `newarr`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3429">Nonzero-based one-dimensional arrays and multidimensional arrays are created using <xref:System.Reflection.Emit.OpCodes.Newobj> rather than `newarr`.</span></span> <span data-ttu-id="5c934-3430">Sie werden in der Regel erstellt, mit den Methoden der der <xref:System.Array> Klasse in .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="5c934-3430">More commonly, they are created using the methods of the <xref:System.Array> class in the .NET Framework.</span></span>  
  
 <span data-ttu-id="5c934-3431"><xref:System.OutOfMemoryException> wird ausgelöst, wenn nicht genügend zum Erfüllen der Anforderung Arbeitsspeicher.</span><span class="sxs-lookup"><span data-stu-id="5c934-3431"><xref:System.OutOfMemoryException> is thrown if there is insufficient memory to satisfy the request.</span></span>  
  
 <span data-ttu-id="5c934-3432"><xref:System.OverflowException> wird ausgelöst, wenn `numElems` ist kleiner als 0.</span><span class="sxs-lookup"><span data-stu-id="5c934-3432"><xref:System.OverflowException> is thrown if `numElems` is less than 0.</span></span>  
  
 <span data-ttu-id="5c934-3433">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `newarr` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3433">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `newarr` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3434">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="5c934-3434">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Newobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Newobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Newobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Newobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Newobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Newobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Newobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Newobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3435">Erstellt ein neues Objekt oder eine neue Instanz eines Werttyps, wobei ein Objektverweis (Typ <see langword="O" />) auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3435">Creates a new object or a new instance of a value type, pushing an object reference (type <see langword="O" />) onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3436">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3436">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3437">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3437">Format</span></span>|<span data-ttu-id="5c934-3438">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3438">Assembly Format</span></span>|<span data-ttu-id="5c934-3439">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3439">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3440">73 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5c934-3440">73 < `T` ></span></span>|<span data-ttu-id="5c934-3441">newobj `ctor`</span><span class="sxs-lookup"><span data-stu-id="5c934-3441">newobj `ctor`</span></span>|<span data-ttu-id="5c934-3442">Reserviert ein nicht initialisiertes Objekt oder den Wert ein, und ruft die Konstruktormethode `ctor`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3442">Allocates an uninitialized object or value type and calls the constructor method `ctor`.</span></span>|  
  
 <span data-ttu-id="5c934-3443">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3443">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3444">Argumente `arg1` über `argn` auf dem Stapel abgelegt werden, die in der Sequenz.</span><span class="sxs-lookup"><span data-stu-id="5c934-3444">Arguments `arg1` through `argn` are pushed on the stack in sequence.</span></span>  
  
2.  <span data-ttu-id="5c934-3445">Argumente `argn` über `arg1` werden vom Stapel geholt und an `ctor` für die objekterstellung.</span><span class="sxs-lookup"><span data-stu-id="5c934-3445">Arguments `argn` through `arg1` are popped from the stack and passed to `ctor` for object creation.</span></span>  
  
3.  <span data-ttu-id="5c934-3446">Ein Verweis auf das neue Objekt wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3446">A reference to the new object is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3447">Die `newobj` -Anweisung erstellt ein neues Objekt oder eine neue Instanz eines Werttyps.</span><span class="sxs-lookup"><span data-stu-id="5c934-3447">The `newobj` instruction creates a new object or a new instance of a value type.</span></span> <span data-ttu-id="5c934-3448">`Ctor` ist ein Metadatentoken (eine `methodref` oder `methoddef` , die als Konstruktor markiert werden muss), die angibt, die Namen, die Klasse und die Signatur des Konstruktors aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="5c934-3448">`Ctor` is a metadata token (a `methodref` or `methoddef` that must be marked as a constructor) that indicates the name, class and signature of the constructor to call.</span></span>  
  
 <span data-ttu-id="5c934-3449">Die `newobj` Anweisung weist eine neue Instanz der Klasse zugeordneten `ctor` und initialisiert alle Felder in der neuen Instanz auf 0 (des richtigen Typs) oder null-Verweise nach Bedarf.</span><span class="sxs-lookup"><span data-stu-id="5c934-3449">The `newobj` instruction allocates a new instance of the class associated with `ctor` and initializes all the fields in the new instance to 0 (of the proper type) or null references as appropriate.</span></span> <span data-ttu-id="5c934-3450">Er ruft dann den Konstruktor `ctor` mit den angegebenen Argumenten sowie die neu erstellte Instanz.</span><span class="sxs-lookup"><span data-stu-id="5c934-3450">It then calls the constructor `ctor` with the given arguments along with the newly created instance.</span></span> <span data-ttu-id="5c934-3451">Nachdem der Konstruktor aufgerufen wurde, wird nun initialisiert Objektverweis (Typ `O`) auf dem Stapel abgelegt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-3451">After the constructor has been called, the now initialized object reference (type `O`) is pushed on the stack.</span></span>  
  
 <span data-ttu-id="5c934-3452">Aus Sicht des Konstruktors das nicht initialisierte Objekt ist Argument 0, und führen Sie die anderen Newobj übergebenen Argumente in der Reihenfolge.</span><span class="sxs-lookup"><span data-stu-id="5c934-3452">From the constructor's point of view, the uninitialized object is argument 0 and the other arguments passed to newobj follow in order.</span></span>  
  
 <span data-ttu-id="5c934-3453">Alle nullbasierten, eindimensionalen Arrays werden mit erstellt <xref:System.Reflection.Emit.OpCodes.Newarr>, nicht `newobj`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3453">All zero-based, one-dimensional arrays are created using <xref:System.Reflection.Emit.OpCodes.Newarr>, not `newobj`.</span></span> <span data-ttu-id="5c934-3454">Auf der anderen Seite werden alle anderen Arrays (mehr als eine Dimension oder eindimensionale, nicht nullbasiert) mit erstellt `newobj`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3454">On the other hand, all other arrays (more than one dimension, or one-dimensional but not zero-based) are created using `newobj`.</span></span>  
  
 <span data-ttu-id="5c934-3455">Werttypen sind nicht in der Regel mit erstellt `newobj`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3455">Value types are not usually created using `newobj`.</span></span> <span data-ttu-id="5c934-3456">Sie werden in der Regel zugeordnet, entweder als Argumente oder lokale Variablen mit `newarr` (für nullbasierten, eindimensionalen Arrays), oder als Felder von Objekten.</span><span class="sxs-lookup"><span data-stu-id="5c934-3456">They are usually allocated either as arguments or local variables, using `newarr` (for zero-based, one-dimensional arrays), or as fields of objects.</span></span> <span data-ttu-id="5c934-3457">Nach der Zuweisung werden sie mithilfe initialisiert <xref:System.Reflection.Emit.OpCodes.Initobj>.</span><span class="sxs-lookup"><span data-stu-id="5c934-3457">Once allocated, they are initialized using <xref:System.Reflection.Emit.OpCodes.Initobj>.</span></span> <span data-ttu-id="5c934-3458">Allerdings die `newobj` Anweisung kann verwendet werden, um eine neue Instanz eines Werttyps auf dem Stapel zu erstellen, die dann als Argument, gespeichert in einer lokalen usw. übergeben werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-3458">However, the `newobj` instruction can be used to create a new instance of a value type on the stack, that can then be passed as an argument, stored in a local, and so on.</span></span>  
  
 <span data-ttu-id="5c934-3459"><xref:System.OutOfMemoryException> wird ausgelöst, wenn nicht genügend zum Erfüllen der Anforderung Arbeitsspeicher.</span><span class="sxs-lookup"><span data-stu-id="5c934-3459"><xref:System.OutOfMemoryException> is thrown if there is insufficient memory to satisfy the request.</span></span>  
  
 <span data-ttu-id="5c934-3460"><xref:System.MissingMethodException> wird ausgelöst, wenn eine Konstruktormethode `ctor` mit dem angegebenen Namen, Klasse und die Signatur wurde nicht gefunden.</span><span class="sxs-lookup"><span data-stu-id="5c934-3460"><xref:System.MissingMethodException> is thrown if a constructor method `ctor` with the indicated name, class and signature could not be found.</span></span> <span data-ttu-id="5c934-3461">Dies wird in der Regel erkannt, wenn Microsoft Intermediate Language (MSIL)-Anweisungen in systemeigenen Code anstelle einer zur Laufzeit konvertiert werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-3461">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="5c934-3462">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `newobj` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3462">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `newobj` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3463">ILGenerator.Emit(OpCode, ConstructorInfo)</span><span class="sxs-lookup"><span data-stu-id="5c934-3463">ILGenerator.Emit(OpCode, ConstructorInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Nop">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Nop;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Nop" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Nop" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Nop As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Nop;" />
      <MemberSignature Language="F#" Value=" staticval mutable Nop : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Nop" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3464">Füllt Speicherplatz auf, wenn Opcodes gepatcht werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3464">Fills space if opcodes are patched.</span>
          </span>
          <span data-ttu-id="5c934-3465">Es wird keine sinnvolle Operation ausgeführt, obwohl ein Verarbeitungszyklus ausgeführt werden kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3465">No meaningful operation is performed although a processing cycle can be consumed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3466">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3466">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3467">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3467">Format</span></span>|<span data-ttu-id="5c934-3468">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3468">Assembly Format</span></span>|<span data-ttu-id="5c934-3469">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3469">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3470">00</span><span class="sxs-lookup"><span data-stu-id="5c934-3470">00</span></span>|<span data-ttu-id="5c934-3471">NOP</span><span class="sxs-lookup"><span data-stu-id="5c934-3471">nop</span></span>|<span data-ttu-id="5c934-3472">Führt einen Vorgang ohne Verhalten.</span><span class="sxs-lookup"><span data-stu-id="5c934-3472">Performs an operation without behavior.</span></span>|  
  
 <span data-ttu-id="5c934-3473">Es gibt keine Stapel-laufen, die für diese Anweisung definiert.</span><span class="sxs-lookup"><span data-stu-id="5c934-3473">There is no stack transitional behavior defined for this instruction.</span></span>  
  
 <span data-ttu-id="5c934-3474">Die `nop` nichts.</span><span class="sxs-lookup"><span data-stu-id="5c934-3474">The `nop` operation does nothing.</span></span> <span data-ttu-id="5c934-3475">Es soll im Raum zu füllen, wenn Opcodes gepatcht werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-3475">It is intended to fill in space if opcodes are patched.</span></span>  
  
 <span data-ttu-id="5c934-3476">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `nop` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3476">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `nop` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3477">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-3477">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Not;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Not" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Not" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Not As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Not;" />
      <MemberSignature Language="F#" Value=" staticval mutable Not : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Not" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3478">Berechnet das bitweise Komplement des Ganzzahlwerts an oberster Position des Stapels und legt das Ergebnis als denselben Typ auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3478">Computes the bitwise complement of the integer value on top of the stack and pushes the result onto the evaluation stack as the same type.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3479">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3479">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3480">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3480">Format</span></span>|<span data-ttu-id="5c934-3481">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3481">Assembly Format</span></span>|<span data-ttu-id="5c934-3482">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3482">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3483">66</span><span class="sxs-lookup"><span data-stu-id="5c934-3483">66</span></span>|<span data-ttu-id="5c934-3484">not</span><span class="sxs-lookup"><span data-stu-id="5c934-3484">not</span></span>|<span data-ttu-id="5c934-3485">Berechnet das bitweise Komplement eines Werts an.</span><span class="sxs-lookup"><span data-stu-id="5c934-3485">Computes the bitwise complement of a value.</span></span>|  
  
 <span data-ttu-id="5c934-3486">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3486">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3487">`value` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3487">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-3488">`value` per pop ausgelesen wird, aus dem Stapel und das bitweise Komplement berechnet.</span><span class="sxs-lookup"><span data-stu-id="5c934-3488">`value` is popped from the stack and its bitwise complement computed.</span></span>  
  
3.  <span data-ttu-id="5c934-3489">Das Ergebnis wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3489">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3490">Die `not` Anweisung berechnet das bitweise Komplement des ein ganzzahliger Wert und legt das Ergebnis im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3490">The `not` instruction computes the bitwise complement of an integer value and pushes the result onto the stack.</span></span> <span data-ttu-id="5c934-3491">Der Rückgabetyp ist identisch mit dem Operandentyp.</span><span class="sxs-lookup"><span data-stu-id="5c934-3491">The return type is the same as the operand type.</span></span>  
  
 <span data-ttu-id="5c934-3492">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `not` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3492">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `not` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3493">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-3493">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Or;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Or" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Or" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Or As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Or;" />
      <MemberSignature Language="F#" Value=" staticval mutable Or : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Or" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3494">Berechnet das bitweise Komplement der beiden Ganzzahlwerte an oberster Position des Stapels und legt das Ergebnis auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3494">Compute the bitwise complement of the two integer values on top of the stack and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3495">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3495">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3496">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3496">Format</span></span>|<span data-ttu-id="5c934-3497">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3497">Assembly Format</span></span>|<span data-ttu-id="5c934-3498">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3498">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3499">60</span><span class="sxs-lookup"><span data-stu-id="5c934-3499">60</span></span>|<span data-ttu-id="5c934-3500">oder</span><span class="sxs-lookup"><span data-stu-id="5c934-3500">or</span></span>|<span data-ttu-id="5c934-3501">Berechnet das bitweise OR von zwei ganzzahligen Werten gibt eine Ganzzahl zurück.</span><span class="sxs-lookup"><span data-stu-id="5c934-3501">Computes the bitwise OR of two integer values, returns an integer.</span></span>|  
  
 <span data-ttu-id="5c934-3502">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3502">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3503">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3503">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-3504">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3504">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-3505">`value2` und `value1` werden per pop ausgelesen, aus dem Stapel und das bitweise OR berechnet.</span><span class="sxs-lookup"><span data-stu-id="5c934-3505">`value2` and `value1` are popped from the stack and their bitwise OR computed.</span></span>  
  
4.  <span data-ttu-id="5c934-3506">Das Ergebnis wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3506">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3507">Die `or` -Anweisung berechnet das bitweise OR von zwei Werten auf den Stapel legt das Ergebnis im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3507">The `or` instruction computes the bitwise OR of two values atop the stack, pushing the result onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3508">`Or` ist ein Vorgang für die ganze Zahlen.</span><span class="sxs-lookup"><span data-stu-id="5c934-3508">`Or` is an integer-specific operation.</span></span>  
  
 <span data-ttu-id="5c934-3509">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `or` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3509">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `or` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3510">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-3510">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Pop;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Pop" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Pop As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Pop;" />
      <MemberSignature Language="F#" Value=" staticval mutable Pop : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Pop" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3511">Entfernt den Wert, der sich derzeit an oberster Position des Auswertungsstapels befindet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3511">Removes the value currently on top of the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3512">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3512">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3513">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3513">Format</span></span>|<span data-ttu-id="5c934-3514">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3514">Assembly Format</span></span>|<span data-ttu-id="5c934-3515">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3515">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3516">26</span><span class="sxs-lookup"><span data-stu-id="5c934-3516">26</span></span>|<span data-ttu-id="5c934-3517">pop</span><span class="sxs-lookup"><span data-stu-id="5c934-3517">pop</span></span>|<span data-ttu-id="5c934-3518">Holt den obersten Wert aus dem Stapel an.</span><span class="sxs-lookup"><span data-stu-id="5c934-3518">Pops the top value from the stack.</span></span>|  
  
 <span data-ttu-id="5c934-3519">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3519">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3520">Der Höchstwert wird vom Stapel geholt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3520">The top value is popped from the stack.</span></span>  
  
 <span data-ttu-id="5c934-3521">Die `pop` Anweisung entfernt das oberste Element vom Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3521">The `pop` instruction removes the top element from the stack.</span></span>  
  
 <span data-ttu-id="5c934-3522">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `pop` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3522">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `pop` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3523">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-3523">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3524">Dies ist eine reservierte Anweisung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3524">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3525">Dies ist eine reservierte Anweisung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3525">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3526">Dies ist eine reservierte Anweisung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3526">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3527">Dies ist eine reservierte Anweisung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3527">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix5">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix5;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix5" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix5" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix5 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix5;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix5 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix5" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3528">Dies ist eine reservierte Anweisung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3528">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix6">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix6;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix6" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix6" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix6 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix6;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix6 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix6" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3529">Dies ist eine reservierte Anweisung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3529">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix7">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix7;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix7" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix7" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix7 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix7;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix7 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix7" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3530">Dies ist eine reservierte Anweisung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3530">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefixref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefixref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefixref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefixref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefixref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefixref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefixref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefixref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3531">Dies ist eine reservierte Anweisung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3531">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Readonly">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Readonly;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Readonly" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Readonly" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Readonly As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Readonly;" />
      <MemberSignature Language="F#" Value=" staticval mutable Readonly : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Readonly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3532">Gibt an, dass beim nachfolgenden Vorgang zur Arrayadresse zur Laufzeit keine Typüberprüfung durchgeführt wird und dass ein verwalteter Zeiger zurückgegeben wird, der nur bedingt geändert werden kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3532">Specifies that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer whose mutability is restricted.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3533">Die folgende Tabelle enthält die hexadezimale und Microsoft intermediate Language (MSIL) Assembly-Format, sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3533">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3534">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3534">Format</span></span>|<span data-ttu-id="5c934-3535">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3535">Assembly Format</span></span>|<span data-ttu-id="5c934-3536">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3536">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3537">FE 1E</span><span class="sxs-lookup"><span data-stu-id="5c934-3537">FE 1E</span></span>|<span data-ttu-id="5c934-3538">ReadOnly.</span><span class="sxs-lookup"><span data-stu-id="5c934-3538">readonly.</span></span>|<span data-ttu-id="5c934-3539">Geben Sie, dass die nachfolgenden Vorgang keine typüberprüfung zur Laufzeit ausgeführt und gibt einen verwalteten Zeiger mit eingeschränkten Veränderlichkeit.</span><span class="sxs-lookup"><span data-stu-id="5c934-3539">Specify that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer with restricted mutability.</span></span>|  
  
 <span data-ttu-id="5c934-3540">Dieses Präfix kann nur unmittelbar vorangehenden werden die `ldelema` Anweisung und Aufrufe an die speziellen `Address` Methode für Arrays.</span><span class="sxs-lookup"><span data-stu-id="5c934-3540">This prefix can only appear immediately preceding the `ldelema` instruction and calls to the special `Address` method on arrays.</span></span> <span data-ttu-id="5c934-3541">Die Auswirkungen auf den nachfolgenden Vorgang hat zwei Aspekte:</span><span class="sxs-lookup"><span data-stu-id="5c934-3541">Its effect on the subsequent operation is twofold:</span></span>  
  
1.  <span data-ttu-id="5c934-3542">Zur Laufzeit wird kein Typ-Check-Vorgang ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3542">At run time, no type check operation is performed.</span></span> <span data-ttu-id="5c934-3543">Beachten Sie, dass die Regel wird ein impliziter Typ überprüft die `ldelema` und `stelem` Anweisungen auf Verweis geben Arrays.</span><span class="sxs-lookup"><span data-stu-id="5c934-3543">Note that there is normally an implicit type check for the `ldelema` and `stelem` instructions when used on reference type arrays.</span></span> <span data-ttu-id="5c934-3544">Wird niemals eine Laufzeit-Typinformationen überprüft Wertklassen, also `readonly` in diesem Fall führt keine Aktion aus.</span><span class="sxs-lookup"><span data-stu-id="5c934-3544">There is never a run-time type check for value classes, so `readonly` is a no-op in that case.</span></span>  
  
2.  <span data-ttu-id="5c934-3545">Die Überprüfung behandelt das Ergebnis des Vorgangs die Adresse des als einen verwalteten Zeiger mit eingeschränkten Veränderlichkeit.</span><span class="sxs-lookup"><span data-stu-id="5c934-3545">The verifier treats the result of the address-of operation as a managed pointer with restricted mutability.</span></span>  
  
 <span data-ttu-id="5c934-3546">Der Zeiger wird als Veränderlichkeit eingeschränkt, da der definierende Typ steuert, ob der Wert geändert werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-3546">The pointer is said to have restricted mutability because the defining type controls whether the value can be mutated.</span></span> <span data-ttu-id="5c934-3547">Für die Wertklassen, die verfügbar zu machen, nicht öffentliche Felder oder Methoden, die den Wert direkt zu aktualisieren, der Zeiger ist schreibgeschützt (daher der Name des Präfixes).</span><span class="sxs-lookup"><span data-stu-id="5c934-3547">For value classes that expose no public fields or methods that update the value in place, the pointer is read-only (hence the name of the prefix).</span></span> <span data-ttu-id="5c934-3548">Insbesondere die Klassen, die primitive Typen (z. B. System. Int32) Mutatoren nicht verfügbar machen und somit auch schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3548">In particular, the classes representing primitive types (for example, System.Int32) do not expose mutators and thus are read-only.</span></span>  
  
 <span data-ttu-id="5c934-3549">Ein verwalteter Zeiger auf diese Weise eingeschränkt werden, kann nur auf folgende Weise verwendet werden:</span><span class="sxs-lookup"><span data-stu-id="5c934-3549">A managed pointer restricted in this fashion can be used only in the following ways:</span></span>  
  
-   <span data-ttu-id="5c934-3550">Als die `object` -Parameter für die `ldfld`, `ldflda`, `stfld`, `call`, oder`constrained callvirt` Anweisungen.</span><span class="sxs-lookup"><span data-stu-id="5c934-3550">As the `object` parameter for the `ldfld`, `ldflda`, `stfld`, `call`, or`constrained callvirt` instructions.</span></span>  
  
-   <span data-ttu-id="5c934-3551">Als die `pointer` Parameter, um die `ldobj` Anweisung oder eines der `ldind` Anweisungen.</span><span class="sxs-lookup"><span data-stu-id="5c934-3551">As the `pointer` parameter to the `ldobj` instruction or to one of the `ldind` instructions.</span></span>  
  
-   <span data-ttu-id="5c934-3552">Als die `source` Parameter, um die `cpobj` Anweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-3552">As the `source` parameter to the `cpobj` instruction.</span></span>  
  
 <span data-ttu-id="5c934-3553">Alle anderen Vorgänge nicht zulässig, einschließlich der `stobj`, `initobj`, oder `mkrefany` Vorgänge oder eines der `stind` Anweisungen.</span><span class="sxs-lookup"><span data-stu-id="5c934-3553">All other operations disallowed, including the `stobj`, `initobj`, or `mkrefany` operations, or any of the `stind` instructions.</span></span>  
  
 <span data-ttu-id="5c934-3554">Der Zweck der `readonly` Präfix ist, um eine typüberprüfung zu vermeiden, wenn Sie ein Element aus einem Array in generischem Code abrufen.</span><span class="sxs-lookup"><span data-stu-id="5c934-3554">The purpose of the `readonly` prefix is to avoid a type check when fetching an element from an array in generic code.</span></span> <span data-ttu-id="5c934-3555">Beispiel: der Ausdruck `arr[i].m()`, bei dem der Elementtyp des Arrays `arr` ist ein generischer Typ, der auf eine Schnittstelle mit der Methode eingeschränkt `m`, möglicherweise in der folgenden MSIL kompiliert.</span><span class="sxs-lookup"><span data-stu-id="5c934-3555">For example, the expression `arr[i].m()`, where the element type of the array `arr` is a generic type that has been constrained to have an interface with method `m`, might compile to the following MSIL.</span></span>  
  
```  
ldloc arr  
ldloc i  
readonly.  
ldelema !0    // Loads the pointer to the object.  
…             // Load the arguments to the call.  
constrained. !0  
callvirt m  
```  
  
 <span data-ttu-id="5c934-3556">Ohne die `readonly` Präfix, das `ldelema` Anweisung würde eine typüberprüfung ausführen, in dem Fall, in denen! 0 wurde ein Verweistyp.</span><span class="sxs-lookup"><span data-stu-id="5c934-3556">Without the `readonly` prefix, the `ldelema` instruction would perform a type check in the case where !0 was a reference type.</span></span> <span data-ttu-id="5c934-3557">Nicht nur diese typüberprüfung ineffizient ist, aber es ist semantisch inkorrekt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3557">Not only is this type check inefficient, but it is semantically incorrect.</span></span> <span data-ttu-id="5c934-3558">Die typüberprüfung für `ldelema` ist eine genaue Übereinstimmung, die zu stark ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-3558">The type check for `ldelema` is an exact match, which is too strong.</span></span> <span data-ttu-id="5c934-3559">Wenn das Array Unterklassen des Typs gehalten! 0, der obige Code würde die typüberprüfung fehlschlagen.</span><span class="sxs-lookup"><span data-stu-id="5c934-3559">If the array held subclasses of type !0, the code above would fail the type check.</span></span>  
  
 <span data-ttu-id="5c934-3560">Die Adresse des Arrayelements abgerufen, statt dem Element selbst, um ein Handle für `arr[i]` funktioniert für sowohl Werttypen und Verweistypen und können daher übergeben werden, um die `constrained callvirt` Anweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-3560">The address of the array element is fetched, instead of the element itself, in order to have a handle for `arr[i]` that works for both value types and reference types, and thus can be passed to the `constrained callvirt` instruction.</span></span>  
  
 <span data-ttu-id="5c934-3561">Im Allgemeinen ist es wäre unsicher, die die Laufzeit-Überprüfung übersprungen wird, wenn das Array die Elemente eines Referenztyps aufrechterhalten.</span><span class="sxs-lookup"><span data-stu-id="5c934-3561">In general it would be unsafe to skip the run-time check if the array held elements of a reference type.</span></span> <span data-ttu-id="5c934-3562">Merken Sie sich, ist es erforderlich, um sicherzustellen, dass keine Änderungen in das Array über diesen Zeiger vorgenommen werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-3562">To be safe, it is necessary to ensure that no modifications to the array are made through this pointer.</span></span> <span data-ttu-id="5c934-3563">Die Prüfregeln Vergewissern Sie sich der.</span><span class="sxs-lookup"><span data-stu-id="5c934-3563">The verifier rules ensure this.</span></span> <span data-ttu-id="5c934-3564">Der eingeschränkte verwaltete Zeiger kann als Objekt der Instanz-Methodenaufrufen, übergeben werden, es ist nicht genau genommen nur Lesezugriff für Werttypen, aber es ist kein Typ Safety-Problem für Werttypen.</span><span class="sxs-lookup"><span data-stu-id="5c934-3564">The restricted managed pointer can be passed as the object of instance method calls, so it is not strictly speaking read-only for value types, but there is no type safety problem for value types.</span></span>  
  
 <span data-ttu-id="5c934-3565">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `readonly` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3565">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `readonly` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3566">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-3566">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refanytype">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Refanytype;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Refanytype" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Refanytype" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Refanytype As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Refanytype;" />
      <MemberSignature Language="F#" Value=" staticval mutable Refanytype : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Refanytype" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3567">Ruft das Typtoken ab, das in einen typisierten Verweis eingebettet ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3567">Retrieves the type token embedded in a typed reference.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3568">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3568">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3569">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3569">Format</span></span>|<span data-ttu-id="5c934-3570">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3570">Assembly Format</span></span>|<span data-ttu-id="5c934-3571">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3571">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3572">FE 1D</span><span class="sxs-lookup"><span data-stu-id="5c934-3572">FE 1D</span></span>|<span data-ttu-id="5c934-3573">refanytype</span><span class="sxs-lookup"><span data-stu-id="5c934-3573">refanytype</span></span>|<span data-ttu-id="5c934-3574">Legt das Typtoken in einen typisierten Verweis gespeichert.</span><span class="sxs-lookup"><span data-stu-id="5c934-3574">Pushes the type token stored in a typed reference.</span></span>|  
  
 <span data-ttu-id="5c934-3575">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3575">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3576">Ein Werttyp-Verweis ist auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3576">A value type reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-3577">Die typisierte Verweis aus dem Stapel per pop ausgelesen wird, und das entsprechende Typtoken abgerufen.</span><span class="sxs-lookup"><span data-stu-id="5c934-3577">The typed reference is popped from the stack and its corresponding type token retrieved.</span></span>  
  
3.  <span data-ttu-id="5c934-3578">Das Typtoken wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3578">The type token is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3579">Ein typisierter Verweis enthält ein Typtoken und eine Adresse auf eine Objektinstanz.</span><span class="sxs-lookup"><span data-stu-id="5c934-3579">A typed reference contains a type token and an address to an object instance.</span></span>  
  
 <span data-ttu-id="5c934-3580">Die `refanytype` Anweisung ruft das Typtoken ab in die typisierten Verweis eingebettet.</span><span class="sxs-lookup"><span data-stu-id="5c934-3580">The `refanytype` instruction retrieves the type token embedded in the typed reference.</span></span> <span data-ttu-id="5c934-3581">Finden Sie unter den <xref:System.Reflection.Emit.OpCodes.Mkrefany> Anleitungen für die Informationen zum Erstellen von typisierten verweisen.</span><span class="sxs-lookup"><span data-stu-id="5c934-3581">See the <xref:System.Reflection.Emit.OpCodes.Mkrefany> instruction for information on creating typed references.</span></span>  
  
 <span data-ttu-id="5c934-3582">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `refanytype` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3582">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `refanytype` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3583">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-3583">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refanyval">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Refanyval;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Refanyval" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Refanyval" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Refanyval As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Refanyval;" />
      <MemberSignature Language="F#" Value=" staticval mutable Refanyval : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Refanyval" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3584">Ruft die Adresse (Typ <see langword="&amp;" />) in einen typisierten Verweis eingebettet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3584">Retrieves the address (type <see langword="&amp;" />) embedded in a typed reference.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3585">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3585">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3586">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3586">Format</span></span>|<span data-ttu-id="5c934-3587">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3587">Assembly Format</span></span>|<span data-ttu-id="5c934-3588">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3588">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3589">C2 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5c934-3589">C2 < `T` ></span></span>|<span data-ttu-id="5c934-3590">refanyval `type`</span><span class="sxs-lookup"><span data-stu-id="5c934-3590">refanyval `type`</span></span>|<span data-ttu-id="5c934-3591">Legt die Adresse in einen typisierten Verweis gespeichert.</span><span class="sxs-lookup"><span data-stu-id="5c934-3591">Pushes the address stored in a typed reference.</span></span>|  
  
 <span data-ttu-id="5c934-3592">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3592">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3593">Ein Werttyp-Verweis ist auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3593">A value type reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-3594">Die typisierte Verweis aus dem Stapel per pop ausgelesen wird, und die entsprechende Adresse abgerufen.</span><span class="sxs-lookup"><span data-stu-id="5c934-3594">The typed reference is popped from the stack and the corresponding address retrieved.</span></span>  
  
3.  <span data-ttu-id="5c934-3595">Die Adresse wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3595">The address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3596">Ein typisierter Verweis enthält ein Typtoken und eine Adresse auf eine Objektinstanz.</span><span class="sxs-lookup"><span data-stu-id="5c934-3596">A typed reference contains a type token and an address to an object instance.</span></span>  
  
 <span data-ttu-id="5c934-3597">Die `refanyval` -Anweisung ruft die Adresse, die in eingebetteten ab, der einen typisierten Verweis.</span><span class="sxs-lookup"><span data-stu-id="5c934-3597">The `refanyval` instruction retrieves the address embedded in the a typed reference.</span></span> <span data-ttu-id="5c934-3598">Der Typ, die in der angegeben wird, auf dem Stapel typisierten Verweis eingebettet muss den vom angegebenen Typ übereinstimmen `type` (ein Metadatentoken, entweder eine `typedef` oder `typeref`).</span><span class="sxs-lookup"><span data-stu-id="5c934-3598">The type embedded in the typed reference supplied on the stack must match the type specified by `type` (a metadata token, either a `typedef` or a `typeref`).</span></span> <span data-ttu-id="5c934-3599">Finden Sie unter den <xref:System.Reflection.Emit.OpCodes.Mkrefany> -Anweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-3599">See the <xref:System.Reflection.Emit.OpCodes.Mkrefany> instruction for related content.</span></span>  
  
 <span data-ttu-id="5c934-3600"><xref:System.InvalidCastException> wird ausgelöst, wenn `type` ist nicht identisch mit dem in der Typverweis gespeicherten Typ (in diesem Fall `type` wird die Klasse bereitgestellt die <xref:System.Reflection.Emit.OpCodes.Mkrefany> Anweisung, die erstellt, allerdings typisierten Verweis).</span><span class="sxs-lookup"><span data-stu-id="5c934-3600"><xref:System.InvalidCastException> is thrown if `type` is not identical to the type stored in the type reference (in this case, `type` is the class supplied to the <xref:System.Reflection.Emit.OpCodes.Mkrefany> instruction that constructed said typed reference).</span></span>  
  
 <span data-ttu-id="5c934-3601"><xref:System.TypeLoadException> wird ausgelöst, wenn `type` wurde nicht gefunden.</span><span class="sxs-lookup"><span data-stu-id="5c934-3601"><xref:System.TypeLoadException> is thrown if `type` cannot be found.</span></span>  
  
 <span data-ttu-id="5c934-3602">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `refanyval` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3602">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `refanyval` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3603">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="5c934-3603">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rem;" />
      <MemberSignature Language="F#" Value=" staticval mutable Rem : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Rem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3604">Dividiert zwei Werte und legt den Rest auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3604">Divides two values and pushes the remainder onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3605">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3605">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3606">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3606">Format</span></span>|<span data-ttu-id="5c934-3607">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3607">Assembly Format</span></span>|<span data-ttu-id="5c934-3608">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3608">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3609">5D</span><span class="sxs-lookup"><span data-stu-id="5c934-3609">5D</span></span>|<span data-ttu-id="5c934-3610">REM</span><span class="sxs-lookup"><span data-stu-id="5c934-3610">rem</span></span>|<span data-ttu-id="5c934-3611">Legt den Rest der Division `value1` von `value2` im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3611">Pushes the remainder of dividing `value1` by `value2` onto the stack.</span></span>|  
  
  
 <span data-ttu-id="5c934-3612">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3612">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3613">Ein `value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3613">A `value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-3614">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3614">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-3615">`value2` und `value1` werden vom Stapel und die restlichen geholt `value1` `div` `value2` berechnet.</span><span class="sxs-lookup"><span data-stu-id="5c934-3615">`value2` and `value1` are popped from the stack and the remainder of `value1` `div` `value2` computed.</span></span>  
  
4.  <span data-ttu-id="5c934-3616">Das Ergebnis wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3616">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3617">`result` = `value1` `rem` `value2` die folgenden Bedingungen erfüllt:</span><span class="sxs-lookup"><span data-stu-id="5c934-3617">`result` = `value1` `rem` `value2` satisfies the following conditions:</span></span>  
  
 <span data-ttu-id="5c934-3618">`result` = `value1` - `value2` `×` (`value1` `div` `value2`), und:</span><span class="sxs-lookup"><span data-stu-id="5c934-3618">`result` = `value1` - `value2` `×` (`value1` `div` `value2`), and:</span></span>  
  
 <span data-ttu-id="5c934-3619">0 = &#124; `result` &#124; < &#124; `value2` &#124;, Anmeldung (`result`) = Vorzeichen (`value1`), wobei `div` ist die Division-Anweisung, die in Richtung Null abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="5c934-3619">0 = &#124; `result` &#124; < &#124; `value2` &#124;, sign(`result`) = sign(`value1`), where `div` is the division instruction that truncates towards zero.</span></span>  
  
 <span data-ttu-id="5c934-3620">Wenn `value2` ist 0 (null) oder `value1` unendlich, die das Ergebnis NaN ist ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-3620">If `value2` is zero or `value1` is infinity the result is NaN.</span></span> <span data-ttu-id="5c934-3621">Wenn `value2` unendlich, ist das Ergebnis ist `value1` (negiert für `-infinity`).</span><span class="sxs-lookup"><span data-stu-id="5c934-3621">If `value2` is infinity, the result is `value1` (negated for `-infinity`).</span></span>  
  
 <span data-ttu-id="5c934-3622">Ganzzahloperationen lösen <xref:System.DivideByZeroException> Wenn `value2` ist 0 (null).</span><span class="sxs-lookup"><span data-stu-id="5c934-3622">Integral operations throw <xref:System.DivideByZeroException> if `value2` is zero.</span></span>  
  
 <span data-ttu-id="5c934-3623">Beachten Sie, dass auf den Intel-basierten Plattformen eine <xref:System.OverflowException> wird ausgelöst, bei der Berechnung (Minint `rem` -1).</span><span class="sxs-lookup"><span data-stu-id="5c934-3623">Note that on the Intel-based platforms an <xref:System.OverflowException> is thrown when computing (minint `rem` -1).</span></span>  
  
 <span data-ttu-id="5c934-3624">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `rem` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3624">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `rem` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3625">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-3625">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rem_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rem_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rem_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rem_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rem_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rem_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Rem_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Rem_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3626">Dividiert zwei Werte ohne Vorzeichen und legt den Rest auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3626">Divides two unsigned values and pushes the remainder onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3627">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3627">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3628">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3628">Format</span></span>|<span data-ttu-id="5c934-3629">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3629">Assembly Format</span></span>|<span data-ttu-id="5c934-3630">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3630">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3631">5E</span><span class="sxs-lookup"><span data-stu-id="5c934-3631">5E</span></span>|<span data-ttu-id="5c934-3632">rem.un</span><span class="sxs-lookup"><span data-stu-id="5c934-3632">rem.un</span></span>|<span data-ttu-id="5c934-3633">Legt den Rest der Division ohne Vorzeichen `value1` von nicht signierten `value2` im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3633">Pushes the remainder of dividing unsigned `value1` by unsigned `value2` onto the stack.</span></span>|  
  
 <span data-ttu-id="5c934-3634">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3634">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3635">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3635">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-3636">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3636">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-3637">`value2` und `value1` werden vom Stapel und die restlichen geholt `value1` `div` `value2` berechnet.</span><span class="sxs-lookup"><span data-stu-id="5c934-3637">`value2` and `value1` are popped from the stack and the remainder of `value1` `div` `value2` computed.</span></span>  
  
4.  <span data-ttu-id="5c934-3638">Das Ergebnis wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3638">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3639">`result` = `value1` `rem.un` `value2` die folgenden Bedingungen erfüllt:</span><span class="sxs-lookup"><span data-stu-id="5c934-3639">`result` = `value1` `rem.un` `value2` satisfies the following conditions:</span></span>  
  
 <span data-ttu-id="5c934-3640">`result` = `value1` - `value2` X (`value1` `div.un` `value2`), und:</span><span class="sxs-lookup"><span data-stu-id="5c934-3640">`result` = `value1` - `value2` x(`value1` `div.un` `value2`), and:</span></span>  
  
 <span data-ttu-id="5c934-3641">0 = `result`  <  `value2`, wobei `div.un` die Anweisung ist ohne Vorzeichen dividieren.</span><span class="sxs-lookup"><span data-stu-id="5c934-3641">0 = `result` < `value2`, where `div.un` is the unsigned division instruction.</span></span>  
  
 <span data-ttu-id="5c934-3642">Die `rem.un` Anweisung berechnet `result` und per Pushvorgang auf den Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3642">The `rem.un` instruction computes `result` and pushes it on the stack.</span></span> <span data-ttu-id="5c934-3643">`Rem.un` behandelt die Argumente als Ganzzahlen ohne Vorzeichen, während <xref:System.Reflection.Emit.OpCodes.Rem> behandelt werden als Ganzzahlen mit Vorzeichen.</span><span class="sxs-lookup"><span data-stu-id="5c934-3643">`Rem.un` treats its arguments as unsigned integers, while <xref:System.Reflection.Emit.OpCodes.Rem> treats them as signed integers.</span></span>  
  
 <span data-ttu-id="5c934-3644">`Rem.un` ist für Gleitkommazahlen nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-3644">`Rem.un` is unspecified for floating-point numbers.</span></span>  
  
 <span data-ttu-id="5c934-3645">Ganzzahloperationen lösen <xref:System.DivideByZeroException> Wenn `value2` ist 0 (null).</span><span class="sxs-lookup"><span data-stu-id="5c934-3645">Integral operations throw <xref:System.DivideByZeroException> if `value2` is zero.</span></span>  
  
 <span data-ttu-id="5c934-3646">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `rem.un` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3646">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `rem.un` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3647">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-3647">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ret">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ret;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ret" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ret" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ret As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ret;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ret : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ret" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3648">Wird von der aktuellen Methode zurückgegeben und legt einen Rückgabewert (sofern vorhanden) vom Auswertungsstapel des Aufgerufenen auf dem Auswertungsstapel des Aufrufenden ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3648">Returns from the current method, pushing a return value (if present) from the callee's evaluation stack onto the caller's evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3649">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3649">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3650">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3650">Format</span></span>|<span data-ttu-id="5c934-3651">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3651">Assembly Format</span></span>|<span data-ttu-id="5c934-3652">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3652">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3653">2A</span><span class="sxs-lookup"><span data-stu-id="5c934-3653">2A</span></span>|<span data-ttu-id="5c934-3654">ret</span><span class="sxs-lookup"><span data-stu-id="5c934-3654">ret</span></span>|<span data-ttu-id="5c934-3655">Wird von Methode, die möglicherweise einen Wert zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3655">Returns from method, possibly returning a value.</span></span>|  
  
 <span data-ttu-id="5c934-3656">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3656">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3657">Der zurückgegebene Wert vom Auswertungsstapel aufgerufenen per pop ausgelesen wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-3657">The return value is popped from the callee evaluation stack.</span></span>  
  
2.  <span data-ttu-id="5c934-3658">Der zurückgegebene Wert, der in Schritt 1 erhaltenen ist in den Auswertungsstapel des Aufrufers mithilfe von Push übertragen.</span><span class="sxs-lookup"><span data-stu-id="5c934-3658">The return value obtained in step 1 is pushed onto the caller evaluation stack.</span></span>  
  
 <span data-ttu-id="5c934-3659">Wenn der Rückgabewert nicht auf dem Auswertungsstapel des aufgerufenen vorhanden ist, wird kein Wert (keine Zustandswechsel für den aufgerufenen oder Aufrufer-Methode) zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-3659">If the return value is not present on the callee evaluation stack, no value is returned (no stack transition behaviors for either the callee or caller method).</span></span>  
  
 <span data-ttu-id="5c934-3660">Der Typ des Rückgabewerts, bestimmt, ob ggf. die aktuelle Methode den Typ des Werts abgerufen werden, aus der oben im Stapel und kopiert wird auf den Stapel der Methode, die die aktuelle Methode aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="5c934-3660">The type of the return value, if any, of the current method determines the type of value to be fetched from the top of the stack and copied onto the stack of the method that called the current method.</span></span> <span data-ttu-id="5c934-3661">Dem Auswertungsstapel ab, für die aktuelle Methode muss bis auf den zurückzugebenden Wert leer sein.</span><span class="sxs-lookup"><span data-stu-id="5c934-3661">The evaluation stack for the current method must be empty except for the value to be returned.</span></span>  
  
 <span data-ttu-id="5c934-3662">Die `ret` Anweisung kann nicht verwendet werden, um das Steuerelement von übertragen einer`try`, `filter`, `catch`, oder `finally` Block.</span><span class="sxs-lookup"><span data-stu-id="5c934-3662">The `ret` instruction cannot be used to transfer control out of a`try`, `filter`, `catch`, or `finally` block.</span></span> <span data-ttu-id="5c934-3663">Innerhalb einer `try` oder `catch`, verwenden die <xref:System.Reflection.Emit.OpCodes.Leave> Anweisung mit dem Ziel eine `ret` Anweisung, die außerhalb aller einschließenden Ausnahmeblöcke befindet.</span><span class="sxs-lookup"><span data-stu-id="5c934-3663">From within a `try` or `catch`, use the <xref:System.Reflection.Emit.OpCodes.Leave> instruction with a destination of a `ret` instruction that is outside all enclosing exception blocks.</span></span> <span data-ttu-id="5c934-3664">Da die `filter` und `finally` Blöcke sind logisch Teil der Behandlung von Ausnahmen und nicht die Methode, die in der ihr Code eingebettet wird, ordnungsgemäß generierten Microsoft Intermediate Language (MSIL)-Anweisungen führen keine Rückgabe aus innerhalb eine Methode ein `filter` oder `finally`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3664">Because the `filter` and `finally` blocks are logically part of exception handling and not the method in which their code is embedded, correctly generated Microsoft Intermediate Language (MSIL) instructions do not perform a method return from within a `filter` or `finally`.</span></span>  
  
 <span data-ttu-id="5c934-3665">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `ret` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3665">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ret` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3666">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-3666">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rethrow">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rethrow;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rethrow" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rethrow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rethrow As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rethrow;" />
      <MemberSignature Language="F#" Value=" staticval mutable Rethrow : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Rethrow" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3667">Löst erneut die aktuelle Ausnahme aus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3667">Rethrows the current exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3668">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3668">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3669">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3669">Format</span></span>|<span data-ttu-id="5c934-3670">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3670">Assembly Format</span></span>|<span data-ttu-id="5c934-3671">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3671">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3672">FRONT-END-1A</span><span class="sxs-lookup"><span data-stu-id="5c934-3672">FE 1A</span></span>|<span data-ttu-id="5c934-3673">Lösen Sie erneut aus</span><span class="sxs-lookup"><span data-stu-id="5c934-3673">rethrow</span></span>|<span data-ttu-id="5c934-3674">Löst erneut die aktuelle Ausnahme aus.</span><span class="sxs-lookup"><span data-stu-id="5c934-3674">Rethrows the current exception</span></span>|  
  
 <span data-ttu-id="5c934-3675">Für diese Anweisung ist keine Zustandswechsel definiert.</span><span class="sxs-lookup"><span data-stu-id="5c934-3675">No stack transition behavior is defined for this instruction.</span></span>  
  
 <span data-ttu-id="5c934-3676">Die `rethrow` Anweisung ist nur zulässig, innerhalb des Texts einer `catch` Handler.</span><span class="sxs-lookup"><span data-stu-id="5c934-3676">The `rethrow` instruction is only permitted within the body of a `catch` handler.</span></span> <span data-ttu-id="5c934-3677">Löst die gleiche Ausnahme, die von diesem Handler abgefangen wurde.</span><span class="sxs-lookup"><span data-stu-id="5c934-3677">It throws the same exception that was caught by this handler.</span></span>  
  
 <span data-ttu-id="5c934-3678">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `rethrow` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3678">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `rethrow` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3679">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-3679">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shl">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shl;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shl" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shl" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shl As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shl;" />
      <MemberSignature Language="F#" Value=" staticval mutable Shl : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Shl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3680">Verschiebt einen ganzzahligen Wert um eine angegebene Anzahl von Bits nach links, wobei die frei werdenden Stellen mit 0-Bits aufgefüllt werden, und legt das Ergebnis auf den Auswertungsstapel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3680">Shifts an integer value to the left (in zeroes) by a specified number of bits, pushing the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3681">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3681">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3682">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3682">Format</span></span>|<span data-ttu-id="5c934-3683">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3683">Assembly Format</span></span>|<span data-ttu-id="5c934-3684">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3684">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3685">62</span><span class="sxs-lookup"><span data-stu-id="5c934-3685">62</span></span>|<span data-ttu-id="5c934-3686">shl</span><span class="sxs-lookup"><span data-stu-id="5c934-3686">shl</span></span>|<span data-ttu-id="5c934-3687">Verschiebt eine ganze Zahl auf der linken Seite (listeninfrastruktur Nullen).</span><span class="sxs-lookup"><span data-stu-id="5c934-3687">Shifts an integer to the left (shifting in zeros).</span></span>|  
  
 <span data-ttu-id="5c934-3688">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3688">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3689">Ein Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3689">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-3690">Die Menge der zu verschiebenden Bits wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3690">The amount of bits to be shifted is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-3691">Die Anzahl der zu verschiebenden Bits und der Wert werden vom Stapel geholt. der Wert wird durch die angegebene Anzahl von Bits nach links verschoben werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-3691">The number of bits to be shifted and the value are popped from the stack; the value is shifted left by the specified number of bits.</span></span>  
  
4.  <span data-ttu-id="5c934-3692">Das Ergebnis wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3692">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3693">Die `shl` Anweisung verschiebt den Wert (Typ `int32`, `int64` oder `native int`) um die angegebene Anzahl von Bits nach links.</span><span class="sxs-lookup"><span data-stu-id="5c934-3693">The `shl` instruction shifts the value (type `int32`, `int64` or `native int`) left by the specified number of bits.</span></span> <span data-ttu-id="5c934-3694">Die Anzahl der Bits ist ein Wert vom Typ `int32` oder `native int`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3694">The number of bits is a value of type `int32` or `native int`.</span></span> <span data-ttu-id="5c934-3695">Der Rückgabewert ist nicht angegeben, wenn die Anzahl der zu verschiebenden Bits größer als oder gleich der Breite (in Bit) des angegebenen Wert ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-3695">The return value is unspecified if the number of bits to be shifted is greater than or equal to the width (in bits) of the supplied value.</span></span>  
  
 <span data-ttu-id="5c934-3696">`Shl` Fügt ein Bit 0 (null) in die niedrigste Position auf jede Schicht ein.</span><span class="sxs-lookup"><span data-stu-id="5c934-3696">`Shl` inserts a zero bit in the lowest position on each shift.</span></span>  
  
 <span data-ttu-id="5c934-3697">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `shl` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3697">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `shl` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3698">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-3698">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shr;" />
      <MemberSignature Language="F#" Value=" staticval mutable Shr : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Shr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3699">Verschiebt einen ganzzahligen Wert um eine angegebene Anzahl von Bits nach rechts, wobei das Vorzeichen mitgeführt wird, und legt das Ergebnis auf den Auswertungsstapel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3699">Shifts an integer value (in sign) to the right by a specified number of bits, pushing the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3700">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3700">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3701">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3701">Format</span></span>|<span data-ttu-id="5c934-3702">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3702">Assembly Format</span></span>|<span data-ttu-id="5c934-3703">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3703">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3704">63</span><span class="sxs-lookup"><span data-stu-id="5c934-3704">63</span></span>|<span data-ttu-id="5c934-3705">shr</span><span class="sxs-lookup"><span data-stu-id="5c934-3705">shr</span></span>|<span data-ttu-id="5c934-3706">Verschiebt eine ganze Zahl auf der rechten Seite (listeninfrastruktur anmelden).</span><span class="sxs-lookup"><span data-stu-id="5c934-3706">Shifts an integer to the right (shifting in sign).</span></span>|  
  
 <span data-ttu-id="5c934-3707">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3707">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3708">Ein Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3708">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-3709">Die Menge der zu verschiebenden Bits wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3709">The amount of bits to be shifted is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-3710">Die Anzahl der zu verschiebenden Bits und der Wert werden vom Stapel geholt. der Wert wird direkt durch die angegebene Anzahl von Bits verschoben.</span><span class="sxs-lookup"><span data-stu-id="5c934-3710">The number of bits to be shifted and the value are popped from the stack; the value is shifted right by the specified number of bits.</span></span>  
  
4.  <span data-ttu-id="5c934-3711">Das Ergebnis wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3711">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3712">Die `shr.un` Anweisung verschiebt den Wert (Typ `int32`, `int64` oder `native int`) um die angegebene Anzahl von Bits nach rechts.</span><span class="sxs-lookup"><span data-stu-id="5c934-3712">The `shr.un` instruction shifts the value (type `int32`, `int64` or `native int`) right by the specified number of bits.</span></span> <span data-ttu-id="5c934-3713">Die Anzahl der Bits ist ein Wert vom Typ `int32` oder `native int`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3713">The number of bits is a value of type `int32` or `native int`.</span></span> <span data-ttu-id="5c934-3714">Der Rückgabewert ist nicht angegeben, wenn die Anzahl der zu verschiebenden Bits größer als oder gleich der Breite (in Bit) des angegebenen Wert ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-3714">The return value is unspecified if the number of bits to be shifted is greater than or equal to the width (in bits) of the supplied value.</span></span>  
  
 <span data-ttu-id="5c934-3715">`Shr` repliziert die höherer Ordnung bit für jede Schicht, die das Vorzeichen des der ursprüngliche Wert in der `result`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3715">`Shr` replicates the high order bit on each shift, preserving the sign of the original value in the `result`.</span></span>  
  
 <span data-ttu-id="5c934-3716">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `shr` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3716">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `shr` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3717">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-3717">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shr_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shr_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shr_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shr_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shr_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shr_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Shr_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Shr_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3718">Verschiebt einen ganzzahligen Wert ohne Vorzeichen um eine angegebene Anzahl von Bits nach rechts, wobei die frei werdenden Stellen mit 0-Bits aufgefüllt werden, und legt das Ergebnis auf den Auswertungsstapel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3718">Shifts an unsigned integer value (in zeroes) to the right by a specified number of bits, pushing the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3719">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3719">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3720">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3720">Format</span></span>|<span data-ttu-id="5c934-3721">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3721">Assembly Format</span></span>|<span data-ttu-id="5c934-3722">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3722">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3723">64</span><span class="sxs-lookup"><span data-stu-id="5c934-3723">64</span></span>|<span data-ttu-id="5c934-3724">shr.un</span><span class="sxs-lookup"><span data-stu-id="5c934-3724">shr.un</span></span>|<span data-ttu-id="5c934-3725">Verschiebt eine ganze Zahl auf der rechten Seite (listeninfrastruktur Nullen).</span><span class="sxs-lookup"><span data-stu-id="5c934-3725">Shifts an integer to the right (shifting in zeroes).</span></span>|  
  
 <span data-ttu-id="5c934-3726">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3726">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3727">Ein Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3727">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-3728">Die Menge der zu verschiebenden Bits wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3728">The amount of bits to be shifted is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-3729">Die Anzahl der zu verschiebenden Bits und der Wert werden vom Stapel geholt. der Wert wird direkt durch die angegebene Anzahl von Bits verschoben.</span><span class="sxs-lookup"><span data-stu-id="5c934-3729">The number of bits to be shifted and the value are popped from the stack; the value is shifted right by the specified number of bits.</span></span>  
  
4.  <span data-ttu-id="5c934-3730">Das Ergebnis wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3730">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3731">Die `shr.un` Anweisung verschiebt den Wert (Typ `int32`, `int64` oder `native int`) um die angegebene Anzahl von Bits nach rechts.</span><span class="sxs-lookup"><span data-stu-id="5c934-3731">The `shr.un` instruction shifts the value (type `int32`, `int64` or `native int`) right by the specified number of bits.</span></span> <span data-ttu-id="5c934-3732">Die Anzahl der Bits ist ein Wert vom Typ `int32`, `int64` oder `native int`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3732">The number of bits is a value of type `int32`, `int64` or `native int`.</span></span> <span data-ttu-id="5c934-3733">Der Rückgabewert ist nicht angegeben, wenn die Anzahl der zu verschiebenden Bits größer als oder gleich der Breite (in Bit) des angegebenen Wert ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-3733">The return value is unspecified if the number of bits to be shifted is greater than or equal to the width (in bits) of the supplied value.</span></span>  
  
 <span data-ttu-id="5c934-3734">`Shr.un` Fügt eine Bit 0 (null) in die höchste Position in jeder Schicht an.</span><span class="sxs-lookup"><span data-stu-id="5c934-3734">`Shr.un` inserts a zero bit in the highest position on each shift.</span></span>  
  
 <span data-ttu-id="5c934-3735">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `shr.un` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3735">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `shr.un` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3736">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-3736">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sizeof">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sizeof;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sizeof" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sizeof" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sizeof As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sizeof;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sizeof : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sizeof" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3737">Legt die Größe eines bereitgestellten Werttyps in Bytes auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3737">Pushes the size, in bytes, of a supplied value type onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3738">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3738">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3739">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3739">Format</span></span>|<span data-ttu-id="5c934-3740">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3740">Assembly Format</span></span>|<span data-ttu-id="5c934-3741">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3741">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3742">FE 1C < `T` ></span><span class="sxs-lookup"><span data-stu-id="5c934-3742">FE 1C < `T` ></span></span>|<span data-ttu-id="5c934-3743">"sizeof" `valType`</span><span class="sxs-lookup"><span data-stu-id="5c934-3743">sizeof `valType`</span></span>|<span data-ttu-id="5c934-3744">Legt die Größe in Bytes, der einen Werttyp als ein `unsigned int32`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3744">Push the size, in bytes, of a value type as an `unsigned int32`.</span></span>|  
  
 <span data-ttu-id="5c934-3745">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3745">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3746">Die Größe (in Bytes) des angegebenen Datentyps (`valType`) auf dem Stapel abgelegt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-3746">The size (in bytes) of the supplied value type (`valType`) is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3747">`valType` muss ein Metadatentoken (eine `typeref` oder `typedef`), der einen Werttyp, einem Referenztyp oder einem generischen Typparameter angibt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3747">`valType` must be a metadata token (a `typeref` or `typedef`) that specifies a value type, reference type, or generic type parameter.</span></span>  
  
 <span data-ttu-id="5c934-3748">Für einen Verweistyp handelt ist die zurückgegebene Größe an, die Größe des einen Verweiswert des entsprechenden (4 Bytes auf 32-Bit-Systemen), geben Sie nicht die Größe der die Daten in Objekten, die von der Verweiswert bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="5c934-3748">For a reference type, the size returned is the size of a reference value of the corresponding type (4 bytes on 32-bit systems), not the size of the data stored in objects referred to by the reference value.</span></span> <span data-ttu-id="5c934-3749">Ein generischer Typparameter kann nur im Text des Typs oder der definierenden Methode verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-3749">A generic type parameter can be used only in the body of the type or method that defines it.</span></span> <span data-ttu-id="5c934-3750">Wenn dieser Typ oder eine Methode instanziiert wird, wird der generische Typparameter von einem Werttyp oder Verweistyp ersetzt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3750">When that type or method is instantiated, the generic type parameter is replaced by a value type or reference type.</span></span>  
  
 <span data-ttu-id="5c934-3751">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `sizeof` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3751">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sizeof` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3752">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="5c934-3752">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Starg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Starg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Starg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Starg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Starg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Starg;" />
      <MemberSignature Language="F#" Value=" staticval mutable Starg : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Starg" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3753">Speichert den an der obersten Position des Auswertungsstapels befindlichen Wert im Argumentslot an einem angegebenen Index.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3753">Stores the value on top of the evaluation stack in the argument slot at a specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3754">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3754">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3755">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3755">Format</span></span>|<span data-ttu-id="5c934-3756">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3756">Assembly Format</span></span>|<span data-ttu-id="5c934-3757">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3757">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3758">FE 0B < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="5c934-3758">FE 0B < `unsigned int16` ></span></span>|<span data-ttu-id="5c934-3759">starg `num`</span><span class="sxs-lookup"><span data-stu-id="5c934-3759">starg `num`</span></span>|<span data-ttu-id="5c934-3760">Holt den obersten Wert aus dem Stapel und speichert es im Argumentslot `num`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3760">Pops the top value from the stack and stores it in argument slot `num`.</span></span>|  
  
 <span data-ttu-id="5c934-3761">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3761">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3762">Der Wert derzeit an oberster Position im Stapel geholt und in Argumentslot platziert `num`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3762">The value currently on top of the stack is popped and placed in argument slot `num`.</span></span>  
  
 <span data-ttu-id="5c934-3763">Die `starg` Anweisung, holt einen Wert aus dem Stapel, und platziert sie im Argumentslot `num`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3763">The `starg` instruction pops a value from the stack and places it in argument slot `num`.</span></span> <span data-ttu-id="5c934-3764">Der Typ des Werts muss den Typ des Arguments, gemäß der aktuellen Methodensignatur übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="5c934-3764">The type of the value must match the type of the argument, as specified in the current method's signature.</span></span>  
  
 <span data-ttu-id="5c934-3765">Für Prozeduren, die eine Variable Argumentliste, kann die `starg` Anweisung kann nur auf die festen Argumente, nicht auf die in der Variable Teil der Signatur verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-3765">For procedures that take a variable argument list, the `starg` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="5c934-3766">Der Wert beim Speichern in-Argumente, die einen ganzzahligen Wert, der kürzer als 4 Byte lange verkürzt werden, wie sie mit dem Argument aus dem Stapel verschoben.</span><span class="sxs-lookup"><span data-stu-id="5c934-3766">Performing a store into arguments that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the argument.</span></span> <span data-ttu-id="5c934-3767">Gleitkommawerte sind von ihrer systemeigenen Größe gerundet (Typ `F`) auf die Größe, die mit dem Argument verknüpft ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-3767">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="5c934-3768">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `starg` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3768">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `starg` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3769">ILGenerator.Emit (OpCode, short)</span><span class="sxs-lookup"><span data-stu-id="5c934-3769">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Starg_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Starg_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Starg_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Starg_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Starg_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Starg_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Starg_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Starg_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3770">Speichert den an der obersten Position des Auswertungsstapels befindlichen Wert im Argumentslot an einem angegebenen Index, Kurzform.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3770">Stores the value on top of the evaluation stack in the argument slot at a specified index, short form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3771">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3771">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3772">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3772">Format</span></span>|<span data-ttu-id="5c934-3773">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3773">Assembly Format</span></span>|<span data-ttu-id="5c934-3774">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3774">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3775">10 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="5c934-3775">10 < `unsigned int8` ></span></span>|<span data-ttu-id="5c934-3776">starg.s `num`</span><span class="sxs-lookup"><span data-stu-id="5c934-3776">starg.s `num`</span></span>|<span data-ttu-id="5c934-3777">Holt den obersten Wert aus dem Stapel und speichert es im Argumentslot `num`, Kurzform.</span><span class="sxs-lookup"><span data-stu-id="5c934-3777">Pops the top value from the stack and stores it in argument slot `num`, short form.</span></span>|  
  
 <span data-ttu-id="5c934-3778">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3778">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3779">Der Wert derzeit an oberster Position im Stapel geholt und in Argumentslot platziert `num`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3779">The value currently on top of the stack is popped and placed in argument slot `num`.</span></span>  
  
 <span data-ttu-id="5c934-3780">Die `starg.s` Anweisung, holt einen Wert aus dem Stapel, und platziert sie im Argumentslot `num`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3780">The `starg.s` instruction pops a value from the stack and places it in argument slot `num`.</span></span> <span data-ttu-id="5c934-3781">Der Typ des Werts muss den Typ des Arguments, gemäß der aktuellen Methodensignatur übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="5c934-3781">The type of the value must match the type of the argument, as specified in the current method's signature.</span></span>  
  
 <span data-ttu-id="5c934-3782">Die `starg.s` Anweisung bietet eine effiziente Codierung für die Verwendung mit den ersten 256 Argumenten.</span><span class="sxs-lookup"><span data-stu-id="5c934-3782">The `starg.s` instruction provides an efficient encoding for use with the first 256 arguments.</span></span>  
  
 <span data-ttu-id="5c934-3783">Für Prozeduren, die eine Variable Argumentliste, kann die `starg.s` Anweisung kann nur auf die festen Argumente, nicht auf die in der Variable Teil der Signatur verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-3783">For procedures that take a variable argument list, the `starg.s` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="5c934-3784">Der Wert beim Speichern in-Argumente, die einen ganzzahligen Wert, der kürzer als 4 Byte lange verkürzt werden, wie sie mit dem Argument aus dem Stapel verschoben.</span><span class="sxs-lookup"><span data-stu-id="5c934-3784">Performing a store into arguments that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the argument.</span></span> <span data-ttu-id="5c934-3785">Gleitkommawerte sind von ihrer systemeigenen Größe gerundet (Typ `F`) auf die Größe, die mit dem Argument verknüpft ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-3785">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="5c934-3786">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `starg.s` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3786">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `starg.s` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3787">ILGenerator.Emit(OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="5c934-3787">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3788">Ersetzt das Arrayelement am angegebenen Index durch den Wert im Auswertungsstapel, dessen Typ in der Anweisung angegeben ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3788">Replaces the array element at a given index with the value on the evaluation stack, whose type is specified in the instruction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3789">Die folgende Tabelle enthält die hexadezimale und Microsoft intermediate Language (MSIL) Assembly-Format, sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3789">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3790">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3790">Format</span></span>|<span data-ttu-id="5c934-3791">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3791">Assembly Format</span></span>|<span data-ttu-id="5c934-3792">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3792">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3793">A4 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5c934-3793">A4 < `T` ></span></span>|<span data-ttu-id="5c934-3794">stelem `typeTok`</span><span class="sxs-lookup"><span data-stu-id="5c934-3794">stelem `typeTok`</span></span>|<span data-ttu-id="5c934-3795">Ersetzt das Arrayelement am angegebenen Index durch ein Wert vom Typ `typeTok` auf dem Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3795">Replaces the array element at the supplied index with a value of type `typeTok` on the stack.</span></span>|  
  
 <span data-ttu-id="5c934-3796">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3796">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3797">Ein Objektverweis auf ein Array, `array`, auf dem Stapel abgelegt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-3797">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-3798">Der Indexwert `index`, auf ein Element in `array` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3798">An index value, `index`, to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-3799">Der Typ, der in der Anweisung angegebene Wert ist auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3799">A value of the type specified in the instruction is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="5c934-3800">Der Wert, der Index und der Arrayverweis als werden vom Stapel geholt. der Wert wird in das Arrayelement am angegebenen Index eingefügt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3800">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="5c934-3801">Die `stelem` -Anweisung ersetzt den Wert des Elements am angegebenen nullbasierten Index in das eindimensionale Array `array` mit dem Wert.</span><span class="sxs-lookup"><span data-stu-id="5c934-3801">The `stelem` instruction replaces the value of the element at the supplied zero-based index in the one-dimensional array `array` with the value.</span></span> <span data-ttu-id="5c934-3802">Der Wert weist den Typ, der das Token gemäß `typeTok` in der Anweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-3802">The value has the type specified by the token `typeTok` in the instruction.</span></span>  
  
 <span data-ttu-id="5c934-3803">Arrays sind Objekte, und daher ein Wert vom Typ dargestellt `O`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3803">Arrays are objects, and hence represented by a value of type `O`.</span></span> <span data-ttu-id="5c934-3804">Der Index ist Typ `native int`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3804">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="5c934-3805"><xref:System.NullReferenceException> wird ausgelöst, wenn `array` ist ein null-Verweis.</span><span class="sxs-lookup"><span data-stu-id="5c934-3805"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5c934-3806"><xref:System.IndexOutOfRangeException> wird ausgelöst, wenn `index` ist negativ oder größer als die Grenze der `array`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3806"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5c934-3807"><xref:System.ArrayTypeMismatchException> wird ausgelöst, wenn `array` errichtet keine Elemente des erforderlichen Typs.</span><span class="sxs-lookup"><span data-stu-id="5c934-3807"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5c934-3808">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `stelem` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3808">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3809">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="5c934-3809">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3810">Ersetzt das Arrayelement am angegebenen Index durch den <see langword="native int" /> Wert auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3810">Replaces the array element at a given index with the <see langword="native int" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3811">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3811">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3812">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3812">Format</span></span>|<span data-ttu-id="5c934-3813">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3813">Assembly Format</span></span>|<span data-ttu-id="5c934-3814">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3814">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3815">9</span><span class="sxs-lookup"><span data-stu-id="5c934-3815">9B</span></span>|<span data-ttu-id="5c934-3816">stelem.i</span><span class="sxs-lookup"><span data-stu-id="5c934-3816">stelem.i</span></span>|<span data-ttu-id="5c934-3817">Ersetzt das Arrayelement am angegebenen Index durch den `native int` Werts im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3817">Replaces an array element at the supplied index with the `native int` value on the stack.</span></span>|  
  
 <span data-ttu-id="5c934-3818">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3818">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3819">Ein Objektverweis auf ein Array, `array`, auf dem Stapel abgelegt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-3819">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-3820">Ein gültiger Index für ein Element in `array` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3820">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-3821">Ein Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3821">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="5c934-3822">Der Wert, der Index und der Arrayverweis als werden vom Stapel geholt. der Wert wird in das Arrayelement am angegebenen Index eingefügt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3822">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="5c934-3823">Die `stelem.i` -Anweisung ersetzt den Wert des Elements `index` im eindimensionalen Array `array` mit der `native int` Wert, der auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3823">The `stelem.i` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `native int` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3824">Arrays sind Objekte, und daher ein Wert vom Typ dargestellt `O`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3824">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="5c934-3825">Der Index ist Typ `native int`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3825">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="5c934-3826"><xref:System.NullReferenceException> wird ausgelöst, wenn `array` ist ein null-Verweis.</span><span class="sxs-lookup"><span data-stu-id="5c934-3826"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5c934-3827"><xref:System.IndexOutOfRangeException> wird ausgelöst, wenn `index` ist negativ oder größer als die Grenze der `array`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3827"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5c934-3828"><xref:System.ArrayTypeMismatchException> wird ausgelöst, wenn `array` errichtet keine Elemente des erforderlichen Typs.</span><span class="sxs-lookup"><span data-stu-id="5c934-3828"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5c934-3829">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `stelem.i` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3829">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3830">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-3830">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3831">Ersetzt das Arrayelement am angegebenen Index durch den <see langword="int8" /> Wert auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3831">Replaces the array element at a given index with the <see langword="int8" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3832">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3832">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3833">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3833">Format</span></span>|<span data-ttu-id="5c934-3834">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3834">Assembly Format</span></span>|<span data-ttu-id="5c934-3835">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3835">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3836">9C</span><span class="sxs-lookup"><span data-stu-id="5c934-3836">9C</span></span>|<span data-ttu-id="5c934-3837">stelem. i1</span><span class="sxs-lookup"><span data-stu-id="5c934-3837">stelem.i1</span></span>|<span data-ttu-id="5c934-3838">Ersetzt das Arrayelement am angegebenen Index durch den `int8` Werts im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3838">Replaces an array element at the supplied index with the `int8` value on the stack.</span></span>|  
  
 <span data-ttu-id="5c934-3839">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3839">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3840">Ein Objektverweis auf ein Array, `array`, auf dem Stapel abgelegt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-3840">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-3841">Ein gültiger Index für ein Element in `array` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3841">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-3842">Ein Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3842">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="5c934-3843">Der Wert, der Index und der Arrayverweis als werden vom Stapel geholt. der Wert wird in das Arrayelement am angegebenen Index eingefügt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3843">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="5c934-3844">Die `stelem.i1` -Anweisung ersetzt den Wert des Elements `index` im eindimensionalen Array `array` mit der `int8` Wert, der auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3844">The `stelem.i1` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int8` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3845">Arrays sind Objekte, und daher ein Wert vom Typ dargestellt `O`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3845">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="5c934-3846">Der Index ist Typ `native int`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3846">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="5c934-3847"><xref:System.NullReferenceException> wird ausgelöst, wenn `array` ist ein null-Verweis.</span><span class="sxs-lookup"><span data-stu-id="5c934-3847"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5c934-3848"><xref:System.IndexOutOfRangeException> wird ausgelöst, wenn `index` ist negativ oder größer als die Grenze der `array`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3848"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5c934-3849"><xref:System.ArrayTypeMismatchException> wird ausgelöst, wenn `array` errichtet keine Elemente des erforderlichen Typs.</span><span class="sxs-lookup"><span data-stu-id="5c934-3849"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5c934-3850">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `stelem.i1` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3850">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i1` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3851">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-3851">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3852">Ersetzt das Arrayelement am angegebenen Index durch den <see langword="int16" /> Wert auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3852">Replaces the array element at a given index with the <see langword="int16" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3853">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3853">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3854">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3854">Format</span></span>|<span data-ttu-id="5c934-3855">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3855">Assembly Format</span></span>|<span data-ttu-id="5c934-3856">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3856">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3857">9D</span><span class="sxs-lookup"><span data-stu-id="5c934-3857">9D</span></span>|<span data-ttu-id="5c934-3858">stelem. i2</span><span class="sxs-lookup"><span data-stu-id="5c934-3858">stelem.i2</span></span>|<span data-ttu-id="5c934-3859">Ersetzt das Arrayelement am angegebenen Index durch den `int16` Werts im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3859">Replaces an array element at the supplied index with the `int16` value on the stack.</span></span>|  
  
 <span data-ttu-id="5c934-3860">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3860">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3861">Ein Objektverweis auf ein Array, `array`, auf dem Stapel abgelegt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-3861">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-3862">Ein gültiger Index für ein Element in `array` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3862">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-3863">Ein Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3863">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="5c934-3864">Der Wert, der Index und der Arrayverweis als werden vom Stapel geholt. der Wert wird in das Arrayelement am angegebenen Index eingefügt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3864">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="5c934-3865">Die `stelem.i2` -Anweisung ersetzt den Wert des Elements `index` im eindimensionalen Array `array` mit der `int16` Wert, der auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3865">The `stelem.i2` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int16` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3866">Arrays sind Objekte, und daher ein Wert vom Typ dargestellt `O`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3866">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="5c934-3867">Der Index ist Typ `native int`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3867">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="5c934-3868"><xref:System.NullReferenceException> wird ausgelöst, wenn `array` ist ein null-Verweis.</span><span class="sxs-lookup"><span data-stu-id="5c934-3868"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5c934-3869"><xref:System.IndexOutOfRangeException> wird ausgelöst, wenn `index` ist negativ oder größer als die Grenze der `array`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3869"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5c934-3870"><xref:System.ArrayTypeMismatchException> wird ausgelöst, wenn `array` errichtet keine Elemente des erforderlichen Typs.</span><span class="sxs-lookup"><span data-stu-id="5c934-3870"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5c934-3871">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `stelem.i2` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3871">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i2` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3872">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-3872">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3873">Ersetzt das Arrayelement am angegebenen Index durch den <see langword="int32" /> Wert auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3873">Replaces the array element at a given index with the <see langword="int32" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3874">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3874">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3875">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3875">Format</span></span>|<span data-ttu-id="5c934-3876">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3876">Assembly Format</span></span>|<span data-ttu-id="5c934-3877">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3877">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3878">9E</span><span class="sxs-lookup"><span data-stu-id="5c934-3878">9E</span></span>|<span data-ttu-id="5c934-3879">stelem. i4</span><span class="sxs-lookup"><span data-stu-id="5c934-3879">stelem.i4</span></span>|<span data-ttu-id="5c934-3880">Ersetzt das Arrayelement am angegebenen Index durch den `int32` Werts im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3880">Replaces an array element at the supplied index with the `int32` value on the stack.</span></span>|  
  
 <span data-ttu-id="5c934-3881">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3881">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3882">Ein Objektverweis auf ein Array, `array`, auf dem Stapel abgelegt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-3882">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-3883">Ein gültiger Index für ein Element in `array` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3883">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-3884">Ein Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3884">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="5c934-3885">Der Wert, der Index und der Arrayverweis als werden vom Stapel geholt. der Wert wird in das Arrayelement am angegebenen Index eingefügt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3885">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="5c934-3886">Die `stelem.i4` -Anweisung ersetzt den Wert des Elements `index` im eindimensionalen Array `array` mit der `int32` Wert, der auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3886">The `stelem.i4` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int32` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3887">Arrays sind Objekte, und daher ein Wert vom Typ dargestellt `O`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3887">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="5c934-3888">Der Index ist Typ `native int`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3888">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="5c934-3889"><xref:System.NullReferenceException> wird ausgelöst, wenn `array` ist ein null-Verweis.</span><span class="sxs-lookup"><span data-stu-id="5c934-3889"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5c934-3890"><xref:System.IndexOutOfRangeException> wird ausgelöst, wenn `index` ist negativ oder größer als die Grenze der `array`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3890"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5c934-3891"><xref:System.ArrayTypeMismatchException> wird ausgelöst, wenn `array` errichtet keine Elemente des erforderlichen Typs.</span><span class="sxs-lookup"><span data-stu-id="5c934-3891"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5c934-3892">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `stelem.i4` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3892">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i4` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3893">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-3893">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3894">Ersetzt das Arrayelement am angegebenen Index durch den <see langword="int64" /> Wert auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3894">Replaces the array element at a given index with the <see langword="int64" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3895">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3895">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3896">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3896">Format</span></span>|<span data-ttu-id="5c934-3897">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3897">Assembly Format</span></span>|<span data-ttu-id="5c934-3898">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3898">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3899">9F</span><span class="sxs-lookup"><span data-stu-id="5c934-3899">9F</span></span>|<span data-ttu-id="5c934-3900">i8</span><span class="sxs-lookup"><span data-stu-id="5c934-3900">stelem.i8</span></span>|<span data-ttu-id="5c934-3901">Ersetzt das Arrayelement am angegebenen Index durch den `int64` Werts im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3901">Replaces an array element at the supplied index with the `int64` value on the stack.</span></span>|  
  
 <span data-ttu-id="5c934-3902">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3902">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3903">Ein Objektverweis auf ein Array, `array`, auf dem Stapel abgelegt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-3903">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-3904">Ein gültiger Index für ein Element in `array` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3904">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-3905">Ein Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3905">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="5c934-3906">Der Wert, der Index und der Arrayverweis als werden vom Stapel geholt. der Wert wird in das Arrayelement am angegebenen Index eingefügt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3906">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="5c934-3907">Die `stelem.i8` -Anweisung ersetzt den Wert des Elements `index` im eindimensionalen Array `array` mit der `int64` Wert, der auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3907">The `stelem.i8` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int64` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3908">Arrays sind Objekte, und daher ein Wert vom Typ dargestellt `O`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3908">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="5c934-3909">Der Index ist Typ `native int`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3909">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="5c934-3910"><xref:System.NullReferenceException> wird ausgelöst, wenn `array` ist ein null-Verweis.</span><span class="sxs-lookup"><span data-stu-id="5c934-3910"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5c934-3911"><xref:System.IndexOutOfRangeException> wird ausgelöst, wenn `index` ist negativ oder größer als die Grenze der `array`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3911"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5c934-3912"><xref:System.ArrayTypeMismatchException> wird ausgelöst, wenn `array` errichtet keine Elemente des erforderlichen Typs.</span><span class="sxs-lookup"><span data-stu-id="5c934-3912"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5c934-3913">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `stelem.i8` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3913">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i8` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3914">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-3914">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3915">Ersetzt das Arrayelement am angegebenen Index durch den <see langword="float32" /> Wert auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3915">Replaces the array element at a given index with the <see langword="float32" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3916">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3916">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3917">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3917">Format</span></span>|<span data-ttu-id="5c934-3918">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3918">Assembly Format</span></span>|<span data-ttu-id="5c934-3919">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3919">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3920">A0</span><span class="sxs-lookup"><span data-stu-id="5c934-3920">A0</span></span>|<span data-ttu-id="5c934-3921">stelem. r4</span><span class="sxs-lookup"><span data-stu-id="5c934-3921">stelem.r4</span></span>|<span data-ttu-id="5c934-3922">Ersetzt das Arrayelement am angegebenen Index durch den `float32` Werts im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3922">Replaces an array element at the supplied index with the `float32` value on the stack.</span></span>|  
  
 <span data-ttu-id="5c934-3923">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3923">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3924">Ein Objektverweis auf ein Array, `array`, auf dem Stapel abgelegt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-3924">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-3925">Ein gültiger Index für ein Element in `array` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3925">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-3926">Ein Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3926">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="5c934-3927">Der Wert, der Index und der Arrayverweis als werden vom Stapel geholt. der Wert wird in das Arrayelement am angegebenen Index eingefügt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3927">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="5c934-3928">Die `stelem.r4` -Anweisung ersetzt den Wert des Elements `index` im eindimensionalen Array `array` mit der `float32` Wert, der auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3928">The `stelem.r4` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `float32` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3929">Arrays sind Objekte, und daher ein Wert vom Typ dargestellt `O`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3929">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="5c934-3930">Der Index ist Typ `native int`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3930">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="5c934-3931"><xref:System.NullReferenceException> wird ausgelöst, wenn `array` ist ein null-Verweis.</span><span class="sxs-lookup"><span data-stu-id="5c934-3931"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5c934-3932"><xref:System.IndexOutOfRangeException> wird ausgelöst, wenn `index` ist negativ oder größer als die Grenze der `array`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3932"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5c934-3933"><xref:System.ArrayTypeMismatchException> wird ausgelöst, wenn `array` errichtet keine Elemente des erforderlichen Typs.</span><span class="sxs-lookup"><span data-stu-id="5c934-3933"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5c934-3934">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `stelem.r4` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3934">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.r4` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3935">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-3935">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3936">Ersetzt das Arrayelement am angegebenen Index durch den <see langword="float64" /> Wert auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3936">Replaces the array element at a given index with the <see langword="float64" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3937">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3937">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3938">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3938">Format</span></span>|<span data-ttu-id="5c934-3939">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3939">Assembly Format</span></span>|<span data-ttu-id="5c934-3940">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3940">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3941">A1</span><span class="sxs-lookup"><span data-stu-id="5c934-3941">A1</span></span>|<span data-ttu-id="5c934-3942">stelem. r8</span><span class="sxs-lookup"><span data-stu-id="5c934-3942">stelem.r8</span></span>|<span data-ttu-id="5c934-3943">Ersetzt das Arrayelement am angegebenen Index durch den `float64` Werts im Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3943">Replaces an array element at the supplied index with the `float64` value on the stack.</span></span>|  
  
 <span data-ttu-id="5c934-3944">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3944">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3945">Ein Objektverweis auf ein Array, `array`, auf dem Stapel abgelegt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-3945">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-3946">Ein gültiger Index für ein Element in `array` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3946">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-3947">Ein Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3947">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="5c934-3948">Der Wert, der Index und der Arrayverweis als werden vom Stapel geholt. der Wert wird in das Arrayelement am angegebenen Index eingefügt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3948">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="5c934-3949">Die `stelem.r8` -Anweisung ersetzt den Wert des Elements `index` im eindimensionalen Array `array` mit der `float64` Wert, der auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3949">The `stelem.r8` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `float64` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3950">Arrays sind Objekte, und daher ein Wert vom Typ dargestellt `O`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3950">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="5c934-3951">Der Index ist Typ `native int`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3951">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="5c934-3952"><xref:System.NullReferenceException> wird ausgelöst, wenn `array` ist ein null-Verweis.</span><span class="sxs-lookup"><span data-stu-id="5c934-3952"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5c934-3953"><xref:System.IndexOutOfRangeException> wird ausgelöst, wenn `index` ist negativ oder größer als die Grenze der `array`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3953"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5c934-3954"><xref:System.ArrayTypeMismatchException> wird ausgelöst, wenn `array` errichtet keine Elemente des erforderlichen Typs.</span><span class="sxs-lookup"><span data-stu-id="5c934-3954"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5c934-3955">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `stelem.r8` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3955">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.r8` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3956">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-3956">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3957">Ersetzt das Arrayelement am angegebenen Index durch den Wert des Objektverweises (Typ <see langword="O" />) auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3957">Replaces the array element at a given index with the object ref value (type <see langword="O" />) on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3958">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3958">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3959">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3959">Format</span></span>|<span data-ttu-id="5c934-3960">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3960">Assembly Format</span></span>|<span data-ttu-id="5c934-3961">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3961">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3962">A2</span><span class="sxs-lookup"><span data-stu-id="5c934-3962">A2</span></span>|<span data-ttu-id="5c934-3963">stelem.ref</span><span class="sxs-lookup"><span data-stu-id="5c934-3963">stelem.ref</span></span>|<span data-ttu-id="5c934-3964">Ersetzt das Arrayelement am angegebenen Index durch den `ref` Wert (Typ `O`) auf dem Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-3964">Replaces an array element at the supplied index with the `ref` value (type `O`) on the stack.</span></span>|  
  
 <span data-ttu-id="5c934-3965">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3965">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3966">Ein Objektverweis auf ein Array, `array`, auf dem Stapel abgelegt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-3966">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-3967">Ein gültiger Index für ein Element in `array` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3967">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-3968">Ein Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3968">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="5c934-3969">Der Wert, der Index und der Arrayverweis als werden vom Stapel geholt. der Wert wird in das Arrayelement am angegebenen Index eingefügt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3969">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="5c934-3970">Die `stelem.ref` -Anweisung ersetzt den Wert des Elements am angegebenen Index in das eindimensionale Array `array` mit der `ref` (Typ `O`) Wert, der auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3970">The `stelem.ref` instruction replaces the value of the element at the supplied index in the one-dimensional array `array` with the `ref` (type `O`) value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-3971">Arrays sind Objekte, und daher ein Wert vom Typ dargestellt `O`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3971">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="5c934-3972">Der Index ist Typ `native int`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3972">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="5c934-3973">Beachten Sie, dass `stelem.ref` wandelt implizit in der angegebenen Wert, der den Elementtyp des `array` bevor Sie den Wert des Array-Elements zuweisen.</span><span class="sxs-lookup"><span data-stu-id="5c934-3973">Note that `stelem.ref` implicitly casts the supplied value to the element type of `array` before assigning the value to the array element.</span></span> <span data-ttu-id="5c934-3974">Diese Umwandlung kann fehlschlagen, sogar für überprüfte Code.</span><span class="sxs-lookup"><span data-stu-id="5c934-3974">This cast can fail, even for verified code.</span></span> <span data-ttu-id="5c934-3975">Daher die `stelem.ref` Anweisung auslösen kann <xref:System.InvalidCastException>.</span><span class="sxs-lookup"><span data-stu-id="5c934-3975">Thus the `stelem.ref` instruction can throw <xref:System.InvalidCastException>.</span></span> <span data-ttu-id="5c934-3976">Für eindimensionale Arrays, die nicht nullbasiert sind, und für mehrdimensionale Arrays, die <xref:System.Array> -Klasse stellt eine <xref:System.Array.SetValue%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="5c934-3976">For one-dimensional arrays that aren't zero-based and for multidimensional arrays, the <xref:System.Array> class provides a <xref:System.Array.SetValue%2A> method.</span></span>  
  
 <span data-ttu-id="5c934-3977"><xref:System.NullReferenceException> wird ausgelöst, wenn `array` ist ein null-Verweis.</span><span class="sxs-lookup"><span data-stu-id="5c934-3977"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5c934-3978"><xref:System.IndexOutOfRangeException> wird ausgelöst, wenn `index` ist negativ oder größer als die Grenze der `array`.</span><span class="sxs-lookup"><span data-stu-id="5c934-3978"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5c934-3979"><xref:System.ArrayTypeMismatchException> wird ausgelöst, wenn `array` errichtet keine Elemente des erforderlichen Typs.</span><span class="sxs-lookup"><span data-stu-id="5c934-3979"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5c934-3980">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `stelem.ref` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-3980">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.ref` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-3981">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-3981">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-3982">Ersetzt den im Feld eines Objektsverweises oder Zeigers gespeicherten Wert durch einen neuen Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-3982">Replaces the value stored in the field of an object reference or pointer with a new value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-3983">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-3983">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-3984">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-3984">Format</span></span>|<span data-ttu-id="5c934-3985">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-3985">Assembly Format</span></span>|<span data-ttu-id="5c934-3986">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-3986">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-3987">7D < `T` ></span><span class="sxs-lookup"><span data-stu-id="5c934-3987">7D < `T` ></span></span>|<span data-ttu-id="5c934-3988">stfld `field`</span><span class="sxs-lookup"><span data-stu-id="5c934-3988">stfld `field`</span></span>|<span data-ttu-id="5c934-3989">Ersetzt den Wert des `field` des Objekts durch einen neuen Wert.</span><span class="sxs-lookup"><span data-stu-id="5c934-3989">Replaces the value of `field` of the object with a new value.</span></span>|  
  
 <span data-ttu-id="5c934-3990">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-3990">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-3991">Ein Objektsverweises oder Zeigers ist auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3991">An object reference or pointer is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-3992">Ein Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-3992">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-3993">Der Wert und Verweis/Objektzeiger werden vom Stapel geholt. der Wert des `field` im Objekt mit dem angegebenen Wert ersetzt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-3993">The value and the object reference/pointer are popped from the stack; the value of `field` in the object is replaced with the supplied value.</span></span>  
  
 <span data-ttu-id="5c934-3994">Die `stfld` -Anweisung ersetzt den Wert eines Felds eines Objekts (Typ `O`) oder über einen Zeiger (Typ `native int`, `&`, oder `*`) mit einem angegebenen Wert.</span><span class="sxs-lookup"><span data-stu-id="5c934-3994">The `stfld` instruction replaces the value of a field of an object (type `O`) or via a pointer (type `native int`, `&`, or `*`) with a given value.</span></span> <span data-ttu-id="5c934-3995">`Field` ist ein Metadatentoken, das auf den Verweis auf ein Element verweist.</span><span class="sxs-lookup"><span data-stu-id="5c934-3995">`Field` is a metadata token that refers to a field member reference.</span></span> <span data-ttu-id="5c934-3996">Die `stfld` -Anweisung kann eine oder beide der Präfix aufweisen <xref:System.Reflection.Emit.OpCodes.Unaligned> und <xref:System.Reflection.Emit.OpCodes.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="5c934-3996">The `stfld` instruction can have a prefix of either or both of <xref:System.Reflection.Emit.OpCodes.Unaligned> and <xref:System.Reflection.Emit.OpCodes.Volatile>.</span></span>  
  
 <span data-ttu-id="5c934-3997"><xref:System.NullReferenceException> wird ausgelöst, wenn die Objektsverweises oder Zeigers ein null-Verweis ist, und das Feld nicht statisch.</span><span class="sxs-lookup"><span data-stu-id="5c934-3997"><xref:System.NullReferenceException> is thrown if the object reference or pointer is a null reference and the field isn't static.</span></span>  
  
 <span data-ttu-id="5c934-3998"><xref:System.MissingFieldException> wird ausgelöst, wenn `field` wurde nicht in den Metadaten gefunden.</span><span class="sxs-lookup"><span data-stu-id="5c934-3998"><xref:System.MissingFieldException> is thrown if `field` is not found in the metadata.</span></span> <span data-ttu-id="5c934-3999">Dies ist in der Regel aktiviert, wenn die Microsoft Intermediate Language (MSIL)-Anweisung in systemeigenen Code, nicht zur Laufzeit konvertiert wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-3999">This is typically checked when the Microsoft Intermediate Language (MSIL) instruction is converted to native code, not at runtime.</span></span>  
  
 <span data-ttu-id="5c934-4000">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `stfld` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-4000">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stfld` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-4001">ILGenerator.Emit(OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="5c934-4001">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-4002">Speichert einen Wert vom Typ <see langword="native int" /> an einer angegebenen Adresse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-4002">Stores a value of type <see langword="native int" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-4003">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-4003">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-4004">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-4004">Format</span></span>|<span data-ttu-id="5c934-4005">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-4005">Assembly Format</span></span>|<span data-ttu-id="5c934-4006">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-4006">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-4007">DF</span><span class="sxs-lookup"><span data-stu-id="5c934-4007">DF</span></span>|<span data-ttu-id="5c934-4008">stind.i</span><span class="sxs-lookup"><span data-stu-id="5c934-4008">stind.i</span></span>|<span data-ttu-id="5c934-4009">Speichert eine `native int` Wert einer angegebenen Adresse.</span><span class="sxs-lookup"><span data-stu-id="5c934-4009">Stores a `native int` value at a given address.</span></span>|  
  
 <span data-ttu-id="5c934-4010">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-4010">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-4011">Eine Adresse wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4011">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-4012">Ein Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4012">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-4013">Der Wert und die Adresse, werden vom Stapel geholt. der Wert wird an der Adresse gespeichert.</span><span class="sxs-lookup"><span data-stu-id="5c934-4013">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="5c934-4014">Die `stind.i` -Anweisung speichert eine `native int` Wert an der angegebenen Adresse (Typ `native int`, `*`, oder `&`).</span><span class="sxs-lookup"><span data-stu-id="5c934-4014">The `stind.i` instruction stores a `native int` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="5c934-4015">Typsichere Operation erfordert, dass die `stind.i` Anweisung verwendet werden, in Übereinstimmung mit dem Typ des Zeigers.</span><span class="sxs-lookup"><span data-stu-id="5c934-4015">Type safe operation requires that the `stind.i` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="5c934-4016">Den Betrieb der `stind.i` Anweisung kann geändert werden, einen unmittelbar vorangehenden <xref:System.Reflection.Emit.OpCodes.Volatile> oder <xref:System.Reflection.Emit.OpCodes.Unaligned> unmittelbar vorangestellt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-4016">The operation of the `stind.i` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="5c934-4017"><xref:System.NullReferenceException> wird ausgelöst, wenn `addr` ist nicht für den Argumenttyp durch das Anweisungssuffix natürlich ausgerichtet.</span><span class="sxs-lookup"><span data-stu-id="5c934-4017"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="5c934-4018">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `stind.i` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-4018">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-4019">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-4019">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-4020">Speichert einen Wert vom Typ <see langword="int8" /> an einer angegebenen Adresse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-4020">Stores a value of type <see langword="int8" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-4021">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-4021">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-4022">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-4022">Format</span></span>|<span data-ttu-id="5c934-4023">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-4023">Assembly Format</span></span>|<span data-ttu-id="5c934-4024">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-4024">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-4025">52</span><span class="sxs-lookup"><span data-stu-id="5c934-4025">52</span></span>|<span data-ttu-id="5c934-4026">i1</span><span class="sxs-lookup"><span data-stu-id="5c934-4026">stind.i1</span></span>|<span data-ttu-id="5c934-4027">Speichert ein `int8` Wert einer angegebenen Adresse.</span><span class="sxs-lookup"><span data-stu-id="5c934-4027">Stores an `int8` value at a given address.</span></span>|  
  
 <span data-ttu-id="5c934-4028">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-4028">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-4029">Eine Adresse wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4029">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-4030">Ein Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4030">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-4031">Der Wert und die Adresse, werden vom Stapel geholt. der Wert wird an der Adresse gespeichert.</span><span class="sxs-lookup"><span data-stu-id="5c934-4031">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="5c934-4032">Die `stind.i1` -Anweisung speichert eine `int8` Wert an der angegebenen Adresse (Typ `native int`, `*`, oder `&`).</span><span class="sxs-lookup"><span data-stu-id="5c934-4032">The `stind.i1` instruction stores an `int8` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="5c934-4033">Typsichere Operation erfordert, dass die `stind.i1` Anweisung verwendet werden, in Übereinstimmung mit dem Typ des Zeigers.</span><span class="sxs-lookup"><span data-stu-id="5c934-4033">Type safe operation requires that the `stind.i1` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="5c934-4034">Den Betrieb der `stind.i1` Anweisung kann geändert werden, einen unmittelbar vorangehenden <xref:System.Reflection.Emit.OpCodes.Volatile> oder <xref:System.Reflection.Emit.OpCodes.Unaligned> unmittelbar vorangestellt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-4034">The operation of the `stind.i1` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="5c934-4035"><xref:System.NullReferenceException> wird ausgelöst, wenn `addr` ist nicht für den Argumenttyp durch das Anweisungssuffix natürlich ausgerichtet.</span><span class="sxs-lookup"><span data-stu-id="5c934-4035"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="5c934-4036">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `stind.i1` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-4036">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i1` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-4037">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-4037">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-4038">Speichert einen Wert vom Typ <see langword="int16" /> an einer angegebenen Adresse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-4038">Stores a value of type <see langword="int16" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-4039">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-4039">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-4040">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-4040">Format</span></span>|<span data-ttu-id="5c934-4041">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-4041">Assembly Format</span></span>|<span data-ttu-id="5c934-4042">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-4042">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-4043">53</span><span class="sxs-lookup"><span data-stu-id="5c934-4043">53</span></span>|<span data-ttu-id="5c934-4044">i2</span><span class="sxs-lookup"><span data-stu-id="5c934-4044">stind.i2</span></span>|<span data-ttu-id="5c934-4045">Speichert ein `int16` Wert einer angegebenen Adresse.</span><span class="sxs-lookup"><span data-stu-id="5c934-4045">Stores an `int16` value at a given address.</span></span>|  
  
 <span data-ttu-id="5c934-4046">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-4046">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-4047">Eine Adresse wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4047">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-4048">Ein Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4048">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-4049">Der Wert und die Adresse, werden vom Stapel geholt. der Wert wird an der Adresse gespeichert.</span><span class="sxs-lookup"><span data-stu-id="5c934-4049">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="5c934-4050">Die `stind.i2` -Anweisung speichert eine `int16` Wert an der angegebenen Adresse (Typ `native int`, `*`, oder `&`).</span><span class="sxs-lookup"><span data-stu-id="5c934-4050">The `stind.i2` instruction stores an `int16` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="5c934-4051">Typsichere Operation erfordert, dass die `stind.2i` Anweisung verwendet werden, in Übereinstimmung mit dem Typ des Zeigers.</span><span class="sxs-lookup"><span data-stu-id="5c934-4051">Type safe operation requires that the `stind.2i` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="5c934-4052">Den Betrieb der `stind.i2` Anweisung kann geändert werden, einen unmittelbar vorangehenden <xref:System.Reflection.Emit.OpCodes.Volatile> oder <xref:System.Reflection.Emit.OpCodes.Unaligned> unmittelbar vorangestellt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-4052">The operation of the `stind.i2` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="5c934-4053"><xref:System.NullReferenceException> wird ausgelöst, wenn `addr` ist nicht für den Argumenttyp durch das Anweisungssuffix natürlich ausgerichtet.</span><span class="sxs-lookup"><span data-stu-id="5c934-4053"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="5c934-4054">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `stind.i2` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-4054">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i2` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-4055">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-4055">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-4056">Speichert einen Wert vom Typ <see langword="int32" /> an einer angegebenen Adresse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-4056">Stores a value of type <see langword="int32" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-4057">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-4057">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-4058">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-4058">Format</span></span>|<span data-ttu-id="5c934-4059">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-4059">Assembly Format</span></span>|<span data-ttu-id="5c934-4060">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-4060">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-4061">54</span><span class="sxs-lookup"><span data-stu-id="5c934-4061">54</span></span>|<span data-ttu-id="5c934-4062">i4</span><span class="sxs-lookup"><span data-stu-id="5c934-4062">stind.i4</span></span>|<span data-ttu-id="5c934-4063">Speichert ein `int32` Wert einer angegebenen Adresse.</span><span class="sxs-lookup"><span data-stu-id="5c934-4063">Stores an `int32` value at a given address.</span></span>|  
  
 <span data-ttu-id="5c934-4064">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-4064">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-4065">Eine Adresse wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4065">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-4066">Ein Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4066">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-4067">Der Wert und die Adresse, werden vom Stapel geholt. der Wert wird an der Adresse gespeichert.</span><span class="sxs-lookup"><span data-stu-id="5c934-4067">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="5c934-4068">Die `stind.i4` -Anweisung speichert eine `int32` Wert an der angegebenen Adresse (Typ `native int`, `*`, oder `&`).</span><span class="sxs-lookup"><span data-stu-id="5c934-4068">The `stind.i4` instruction stores an `int32` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="5c934-4069">Typsichere Operation erfordert, dass die `stind.i4` Anweisung verwendet werden, in Übereinstimmung mit dem Typ des Zeigers.</span><span class="sxs-lookup"><span data-stu-id="5c934-4069">Type safe operation requires that the `stind.i4` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="5c934-4070">Den Betrieb der `stind.i4` Anweisung kann geändert werden, einen unmittelbar vorangehenden <xref:System.Reflection.Emit.OpCodes.Volatile> oder <xref:System.Reflection.Emit.OpCodes.Unaligned> unmittelbar vorangestellt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-4070">The operation of the `stind.i4` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="5c934-4071"><xref:System.NullReferenceException> wird ausgelöst, wenn `addr` ist nicht für den Argumenttyp durch das Anweisungssuffix natürlich ausgerichtet.</span><span class="sxs-lookup"><span data-stu-id="5c934-4071"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="5c934-4072">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `stind.i4` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-4072">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i4` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-4073">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-4073">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-4074">Speichert einen Wert vom Typ <see langword="int64" /> an einer angegebenen Adresse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-4074">Stores a value of type <see langword="int64" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-4075">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-4075">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-4076">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-4076">Format</span></span>|<span data-ttu-id="5c934-4077">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-4077">Assembly Format</span></span>|<span data-ttu-id="5c934-4078">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-4078">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-4079">55</span><span class="sxs-lookup"><span data-stu-id="5c934-4079">55</span></span>|<span data-ttu-id="5c934-4080">i8</span><span class="sxs-lookup"><span data-stu-id="5c934-4080">stind.i8</span></span>|<span data-ttu-id="5c934-4081">Speichert ein `int64` Wert einer angegebenen Adresse.</span><span class="sxs-lookup"><span data-stu-id="5c934-4081">Stores an `int64` value at a given address.</span></span>|  
  
 <span data-ttu-id="5c934-4082">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-4082">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-4083">Eine Adresse wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4083">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-4084">Ein Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4084">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-4085">Der Wert und die Adresse, werden vom Stapel geholt. der Wert wird an der Adresse gespeichert.</span><span class="sxs-lookup"><span data-stu-id="5c934-4085">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="5c934-4086">Die `stind.i8` -Anweisung speichert eine `int64` Wert an der angegebenen Adresse (Typ `native int`, `*`, oder `&`).</span><span class="sxs-lookup"><span data-stu-id="5c934-4086">The `stind.i8` instruction stores an `int64` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="5c934-4087">Typsichere Operation erfordert, dass die `stind.i8` Anweisung verwendet werden, in Übereinstimmung mit dem Typ des Zeigers.</span><span class="sxs-lookup"><span data-stu-id="5c934-4087">Type safe operation requires that the `stind.i8` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="5c934-4088">Den Betrieb der `stind.i` Anweisung kann geändert werden, einen unmittelbar vorangehenden <xref:System.Reflection.Emit.OpCodes.Volatile> oder <xref:System.Reflection.Emit.OpCodes.Unaligned> unmittelbar vorangestellt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-4088">The operation of the `stind.i` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="5c934-4089"><xref:System.NullReferenceException> wird ausgelöst, wenn `addr` ist nicht für den Argumenttyp durch das Anweisungssuffix natürlich ausgerichtet.</span><span class="sxs-lookup"><span data-stu-id="5c934-4089"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="5c934-4090">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `stind.i8` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-4090">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i8` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-4091">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-4091">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-4092">Speichert einen Wert vom Typ <see langword="float32" /> an einer angegebenen Adresse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-4092">Stores a value of type <see langword="float32" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-4093">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-4093">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-4094">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-4094">Format</span></span>|<span data-ttu-id="5c934-4095">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-4095">Assembly Format</span></span>|<span data-ttu-id="5c934-4096">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-4096">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-4097">56</span><span class="sxs-lookup"><span data-stu-id="5c934-4097">56</span></span>|<span data-ttu-id="5c934-4098">R4</span><span class="sxs-lookup"><span data-stu-id="5c934-4098">stind.r4</span></span>|<span data-ttu-id="5c934-4099">Speichert eine `float32` Wert einer angegebenen Adresse.</span><span class="sxs-lookup"><span data-stu-id="5c934-4099">Stores a `float32` value at a given address.</span></span>|  
  
 <span data-ttu-id="5c934-4100">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-4100">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-4101">Eine Adresse wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4101">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-4102">Ein Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4102">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-4103">Der Wert und die Adresse, werden vom Stapel geholt. der Wert wird an der Adresse gespeichert.</span><span class="sxs-lookup"><span data-stu-id="5c934-4103">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="5c934-4104">Die `stind.r4` -Anweisung speichert eine `float32` Wert an der angegebenen Adresse (Typ `native int`, `*`, oder `&`).</span><span class="sxs-lookup"><span data-stu-id="5c934-4104">The `stind.r4` instruction stores a `float32` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="5c934-4105">Typsichere Operation erfordert, dass die `stind.r4` Anweisung verwendet werden, in Übereinstimmung mit dem Typ des Zeigers.</span><span class="sxs-lookup"><span data-stu-id="5c934-4105">Type safe operation requires that the `stind.r4` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="5c934-4106">Den Betrieb der `stind.r4` Anweisung kann geändert werden, einen unmittelbar vorangehenden <xref:System.Reflection.Emit.OpCodes.Volatile> oder <xref:System.Reflection.Emit.OpCodes.Unaligned> unmittelbar vorangestellt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-4106">The operation of the `stind.r4` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="5c934-4107"><xref:System.NullReferenceException> wird ausgelöst, wenn `addr` ist nicht für den Argumenttyp durch das Anweisungssuffix natürlich ausgerichtet.</span><span class="sxs-lookup"><span data-stu-id="5c934-4107"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="5c934-4108">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `stind.r4` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-4108">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.r4` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-4109">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-4109">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-4110">Speichert einen Wert vom Typ <see langword="float64" /> an einer angegebenen Adresse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-4110">Stores a value of type <see langword="float64" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-4111">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-4111">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-4112">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-4112">Format</span></span>|<span data-ttu-id="5c934-4113">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-4113">Assembly Format</span></span>|<span data-ttu-id="5c934-4114">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-4114">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-4115">57</span><span class="sxs-lookup"><span data-stu-id="5c934-4115">57</span></span>|<span data-ttu-id="5c934-4116">r8</span><span class="sxs-lookup"><span data-stu-id="5c934-4116">stind.r8</span></span>|<span data-ttu-id="5c934-4117">Speichert eine `float64` Wert einer angegebenen Adresse.</span><span class="sxs-lookup"><span data-stu-id="5c934-4117">Stores a `float64` value at a given address.</span></span>|  
  
 <span data-ttu-id="5c934-4118">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-4118">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-4119">Eine Adresse wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4119">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-4120">Ein Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4120">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-4121">Der Wert und die Adresse, werden vom Stapel geholt. der Wert wird an der Adresse gespeichert.</span><span class="sxs-lookup"><span data-stu-id="5c934-4121">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="5c934-4122">Die `stind.r8` -Anweisung speichert eine `float64` Wert an der angegebenen Adresse (Typ `native int`, `*`, oder `&`).</span><span class="sxs-lookup"><span data-stu-id="5c934-4122">The `stind.r8` instruction stores a `float64` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="5c934-4123">Typsichere Operation erfordert, dass die `stind.r8` Anweisung verwendet werden, in Übereinstimmung mit dem Typ des Zeigers.</span><span class="sxs-lookup"><span data-stu-id="5c934-4123">Type safe operation requires that the `stind.r8` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="5c934-4124">Den Betrieb der `stind.r8` Anweisung kann geändert werden, einen unmittelbar vorangehenden <xref:System.Reflection.Emit.OpCodes.Volatile> oder <xref:System.Reflection.Emit.OpCodes.Unaligned> unmittelbar vorangestellt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-4124">The operation of the `stind.r8` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="5c934-4125"><xref:System.NullReferenceException> wird ausgelöst, wenn `addr` ist nicht für den Argumenttyp durch das Anweisungssuffix natürlich ausgerichtet.</span><span class="sxs-lookup"><span data-stu-id="5c934-4125"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="5c934-4126">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `stind.r8` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-4126">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.r8` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-4127">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-4127">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-4128">Speichert einen Objektverweiswert an einer angegebenen Adresse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-4128">Stores a object reference value at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-4129">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-4129">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-4130">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-4130">Format</span></span>|<span data-ttu-id="5c934-4131">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-4131">Assembly Format</span></span>|<span data-ttu-id="5c934-4132">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-4132">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-4133">51</span><span class="sxs-lookup"><span data-stu-id="5c934-4133">51</span></span>|<span data-ttu-id="5c934-4134">stind.ref</span><span class="sxs-lookup"><span data-stu-id="5c934-4134">stind.ref</span></span>|<span data-ttu-id="5c934-4135">Speichert einen Objektverweis (Typ `O`) Wert einer angegebenen Adresse.</span><span class="sxs-lookup"><span data-stu-id="5c934-4135">Stores an object reference (type `O`) value at a given address.</span></span>|  
  
 <span data-ttu-id="5c934-4136">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-4136">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-4137">Eine Adresse wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4137">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-4138">Ein Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4138">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-4139">Der Wert und die Adresse, werden vom Stapel geholt. der Wert wird an der Adresse gespeichert.</span><span class="sxs-lookup"><span data-stu-id="5c934-4139">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="5c934-4140">Die `stind.ref` -Anweisung speichert einen Objektverweiswert an der angegebenen Adresse (Typ `native int`, `*`, oder `&`).</span><span class="sxs-lookup"><span data-stu-id="5c934-4140">The `stind.ref` instruction stores an object reference value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="5c934-4141">Typsichere Operation erfordert, dass die `stind.ref` Anweisung verwendet werden, in Übereinstimmung mit dem Typ des Zeigers.</span><span class="sxs-lookup"><span data-stu-id="5c934-4141">Type safe operation requires that the `stind.ref` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="5c934-4142">Den Betrieb der `stind.ref` Anweisung kann geändert werden, einen unmittelbar vorangehenden <xref:System.Reflection.Emit.OpCodes.Volatile> oder <xref:System.Reflection.Emit.OpCodes.Unaligned> unmittelbar vorangestellt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-4142">The operation of the `stind.ref` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="5c934-4143"><xref:System.NullReferenceException> wird ausgelöst, wenn `addr` ist nicht für den Argumenttyp durch das Anweisungssuffix natürlich ausgerichtet.</span><span class="sxs-lookup"><span data-stu-id="5c934-4143"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="5c934-4144">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `stind.ref` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-4144">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.ref` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-4145">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-4145">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-4146">Holt den aktuellen Wert von der obersten Position des Auswertungsstapels und speichert ihn in der Liste der lokalen Variablen am angegebenen Index.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-4146">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at a specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-4147">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-4147">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-4148">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-4148">Format</span></span>|<span data-ttu-id="5c934-4149">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-4149">Assembly Format</span></span>|<span data-ttu-id="5c934-4150">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-4150">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-4151">FE 0E < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="5c934-4151">FE 0E < `unsigned int16` ></span></span>|<span data-ttu-id="5c934-4152">stloc `index`</span><span class="sxs-lookup"><span data-stu-id="5c934-4152">stloc `index`</span></span>|<span data-ttu-id="5c934-4153">Holt einen Wert aus dem Stapel, und speichert sie in der lokalen Variable `index`.</span><span class="sxs-lookup"><span data-stu-id="5c934-4153">Pops a value from the stack and stores it in local variable `index`.</span></span>|  
  
 <span data-ttu-id="5c934-4154">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-4154">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-4155">Ein Wert vom Stapel geholt und in lokalen Variablen platziert `index`.</span><span class="sxs-lookup"><span data-stu-id="5c934-4155">A value is popped off of the stack and placed in local variable `index`.</span></span>  
  
 <span data-ttu-id="5c934-4156">Die `stloc` Anweisung holt den obersten Wert vom Auswertungsstapel und verschiebt ihn in die lokale Variable Anzahl `index`, wobei der lokale Variablen oder höher 0 nummeriert sind.</span><span class="sxs-lookup"><span data-stu-id="5c934-4156">The `stloc` instruction pops the top value off the evaluation stack and moves it into local variable number `index`, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="5c934-4157">Der Typ des Werts muss den Typ der lokalen Variablen gemäß der aktuellen Methode lokale Signatur übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="5c934-4157">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="5c934-4158">Speichern in "lokal", die einen ganzzahliger Wert kleiner als 4 Bytes enthalten schneidet den Wert ab, wie vom Stapel auf die lokale Variable verschoben wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-4158">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="5c934-4159">Gleitkommawerte sind von ihrer systemeigenen Größe gerundet (Typ `F`) auf die Größe, die mit dem Argument verknüpft ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-4159">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="5c934-4160">Richtige Microsoft Intermediate Language (MSIL)-Anweisungen wird vorausgesetzt, die `index` ein gültiger lokaler Index sein.</span><span class="sxs-lookup"><span data-stu-id="5c934-4160">Correct Microsoft Intermediate Language (MSIL) instructions require that `index` be a valid local index.</span></span> <span data-ttu-id="5c934-4161">Für die `stloc` -Anweisung, `index` müssen liegen im Bereich von 0 bis 65534 inklusive (65535 ist kein gültiger Wert).</span><span class="sxs-lookup"><span data-stu-id="5c934-4161">For the `stloc` instruction, `index` must lie in the range 0 to 65534 inclusive (specifically, 65535 is not valid).</span></span> <span data-ttu-id="5c934-4162">Der Grund für das Ausschließen von 65535 ist pragmatische: wahrscheinliche Implementierungen werden eine 2-Byte-Ganzzahl verwenden, um sowohl eine lokale des Index als auch die Gesamtanzahl der lokal für eine angegebene Methode zu verfolgen.</span><span class="sxs-lookup"><span data-stu-id="5c934-4162">The reason for excluding 65535 is pragmatic: likely implementations will use a 2-byte integer to track both a local's index, as well as the total number of locals for a given method.</span></span> <span data-ttu-id="5c934-4163">Wenn ein Index der 65535 gültig vorgenommen wurden hatte, müssten eine größere ganze Zahl, um die Anzahl der lokalen Variablen in einer solchen Methode nachzuverfolgen.</span><span class="sxs-lookup"><span data-stu-id="5c934-4163">If an index of 65535 had been made valid, it would require a wider integer to track the number of locals in such a method.</span></span>  
  
 <span data-ttu-id="5c934-4164">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> methodenüberladungen können die `stloc` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-4164">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `stloc` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-4165">ILGenerator.Emit (OpCode, LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="5c934-4165">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="5c934-4166">ILGenerator.Emit (OpCode, short)</span><span class="sxs-lookup"><span data-stu-id="5c934-4166">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-4167">Holt den aktuellen Wert von der obersten Position des Auswertungsstapels und speichert ihn in der Liste der lokalen Variablen am Index 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-4167">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 0.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-4168">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-4168">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-4169">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-4169">Format</span></span>|<span data-ttu-id="5c934-4170">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-4170">Assembly Format</span></span>|<span data-ttu-id="5c934-4171">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-4171">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-4172">0A</span><span class="sxs-lookup"><span data-stu-id="5c934-4172">0A</span></span>|<span data-ttu-id="5c934-4173">stloc.0</span><span class="sxs-lookup"><span data-stu-id="5c934-4173">stloc.0</span></span>|<span data-ttu-id="5c934-4174">Holt einen Wert aus dem Stapel in der lokalen Variablen 0.</span><span class="sxs-lookup"><span data-stu-id="5c934-4174">Pops a value from the stack into local variable 0.</span></span>|  
  
 <span data-ttu-id="5c934-4175">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-4175">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-4176">Ein Wert vom Stapel geholt und in der lokalen Variablen mit dem Index 0 platziert.</span><span class="sxs-lookup"><span data-stu-id="5c934-4176">A value is popped off of the stack and placed in the local variable indexed by 0.</span></span>  
  
 <span data-ttu-id="5c934-4177">Die `stloc.0` Anweisung holt den obersten Wert vom Auswertungsstapel und verschiebt ihn in die lokale Variable mit dem Index 0.</span><span class="sxs-lookup"><span data-stu-id="5c934-4177">The `stloc.0` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 0.</span></span> <span data-ttu-id="5c934-4178">Der Typ des Werts muss den Typ der lokalen Variablen gemäß der aktuellen Methode lokale Signatur übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="5c934-4178">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="5c934-4179">`stloc.0` ist eine besonders effiziente Codierung zum Speichern von Werten in der lokalen Variablen 0.</span><span class="sxs-lookup"><span data-stu-id="5c934-4179">`stloc.0` is an especially efficient encoding for storing values in local variable 0.</span></span>  
  
 <span data-ttu-id="5c934-4180">Speichern in "lokal", die einen ganzzahliger Wert kleiner als 4 Bytes enthalten schneidet den Wert ab, wie vom Stapel auf die lokale Variable verschoben wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-4180">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="5c934-4181">Gleitkommawerte sind von ihrer systemeigenen Größe gerundet (Typ `F`) auf die Größe, die mit dem Argument verknüpft ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-4181">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="5c934-4182">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `stloc.0` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-4182">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.0` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-4183">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-4183">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-4184">Holt den aktuellen Wert von der obersten Position des Auswertungsstapels und speichert ihn in der Liste der lokalen Variablen am Index 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-4184">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 1.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-4185">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-4185">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-4186">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-4186">Format</span></span>|<span data-ttu-id="5c934-4187">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-4187">Assembly Format</span></span>|<span data-ttu-id="5c934-4188">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-4188">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-4189">0 B</span><span class="sxs-lookup"><span data-stu-id="5c934-4189">0B</span></span>|<span data-ttu-id="5c934-4190">stloc. 1</span><span class="sxs-lookup"><span data-stu-id="5c934-4190">stloc.1</span></span>|<span data-ttu-id="5c934-4191">Holt einen Wert aus dem Stapel in der lokalen Variablen 1 an.</span><span class="sxs-lookup"><span data-stu-id="5c934-4191">Pops a value from the stack into local variable 1.</span></span>|  
  
 <span data-ttu-id="5c934-4192">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-4192">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-4193">Ein Wert vom Stapel geholt und in der lokalen Variablen mit dem Index 1 platziert.</span><span class="sxs-lookup"><span data-stu-id="5c934-4193">A value is popped off of the stack and placed in the local variable indexed by 1.</span></span>  
  
 <span data-ttu-id="5c934-4194">Die `stloc.1` Anweisung holt den obersten Wert vom Auswertungsstapel und verschiebt ihn in die lokale Variable mit dem Index 1.</span><span class="sxs-lookup"><span data-stu-id="5c934-4194">The `stloc.1` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 1.</span></span> <span data-ttu-id="5c934-4195">Der Typ des Werts muss den Typ der lokalen Variablen gemäß der aktuellen Methode lokale Signatur übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="5c934-4195">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="5c934-4196">`stloc.1` ist eine besonders effiziente Codierung zum Speichern von Werten in der lokalen Variable 1.</span><span class="sxs-lookup"><span data-stu-id="5c934-4196">`stloc.1` is an especially efficient encoding for storing values in local variable 1.</span></span>  
  
 <span data-ttu-id="5c934-4197">Speichern in "lokal", die einen ganzzahliger Wert kleiner als 4 Bytes enthalten schneidet den Wert ab, wie vom Stapel auf die lokale Variable verschoben wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-4197">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="5c934-4198">Gleitkommawerte sind von ihrer systemeigenen Größe gerundet (Typ `F`) auf die Größe, die mit dem Argument verknüpft ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-4198">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="5c934-4199">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `stloc.1` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-4199">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.1` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-4200">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-4200">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-4201">Holt den aktuellen Wert von der obersten Position des Auswertungsstapels und speichert ihn in der Liste der lokalen Variablen am Index 2.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-4201">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 2.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-4202">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-4202">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-4203">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-4203">Format</span></span>|<span data-ttu-id="5c934-4204">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-4204">Assembly Format</span></span>|<span data-ttu-id="5c934-4205">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-4205">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-4206">0C</span><span class="sxs-lookup"><span data-stu-id="5c934-4206">0C</span></span>|<span data-ttu-id="5c934-4207">stloc. 2</span><span class="sxs-lookup"><span data-stu-id="5c934-4207">stloc.2</span></span>|<span data-ttu-id="5c934-4208">Holt einen Wert aus dem Stapel in der lokalen Variablen 2</span><span class="sxs-lookup"><span data-stu-id="5c934-4208">Pops a value from the stack into local variable 2</span></span>|  
  
 <span data-ttu-id="5c934-4209">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-4209">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-4210">Ein Wert vom Stapel geholt und in der lokalen Variablen mit dem Index 2 platziert.</span><span class="sxs-lookup"><span data-stu-id="5c934-4210">A value is popped off of the stack and placed in the local variable indexed by 2.</span></span>  
  
 <span data-ttu-id="5c934-4211">Die `stloc.2` Anweisung holt den obersten Wert vom Auswertungsstapel und verschiebt ihn in die lokale Variable mit dem Index 2.</span><span class="sxs-lookup"><span data-stu-id="5c934-4211">The `stloc.2` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 2.</span></span> <span data-ttu-id="5c934-4212">Der Typ des Werts muss den Typ der lokalen Variablen gemäß der aktuellen Methode lokale Signatur übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="5c934-4212">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="5c934-4213">`stloc.2` ist eine besonders effiziente Codierung zum Speichern von Werten in der lokalen Variable 2.</span><span class="sxs-lookup"><span data-stu-id="5c934-4213">`stloc.2` is an especially efficient encoding for storing values in local variable 2.</span></span>  
  
 <span data-ttu-id="5c934-4214">Speichern in "lokal", die einen ganzzahliger Wert kleiner als 4 Bytes enthalten schneidet den Wert ab, wie vom Stapel auf die lokale Variable verschoben wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-4214">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="5c934-4215">Gleitkommawerte sind von ihrer systemeigenen Größe gerundet (Typ `F`) auf die Größe, die mit dem Argument verknüpft ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-4215">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="5c934-4216">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `stloc.2` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-4216">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.2` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-4217">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-4217">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-4218">Holt den aktuellen Wert von der obersten Position des Auswertungsstapels und speichert ihn in der Liste der lokalen Variablen am Index 3.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-4218">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 3.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-4219">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-4219">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-4220">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-4220">Format</span></span>|<span data-ttu-id="5c934-4221">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-4221">Assembly Format</span></span>|<span data-ttu-id="5c934-4222">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-4222">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-4223">0D</span><span class="sxs-lookup"><span data-stu-id="5c934-4223">0D</span></span>|<span data-ttu-id="5c934-4224">stloc. 3</span><span class="sxs-lookup"><span data-stu-id="5c934-4224">stloc.3</span></span>|<span data-ttu-id="5c934-4225">Holt einen Wert aus dem Stapel in der lokalen Variablen 3</span><span class="sxs-lookup"><span data-stu-id="5c934-4225">Pops a value from the stack into local variable 3</span></span>|  
  
 <span data-ttu-id="5c934-4226">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-4226">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-4227">Ein Wert vom Stapel geholt und in der lokalen Variablen mit dem Index 3 platziert.</span><span class="sxs-lookup"><span data-stu-id="5c934-4227">A value is popped off of the stack and placed in the local variable indexed by 3.</span></span>  
  
 <span data-ttu-id="5c934-4228">Die `stloc.3` Anweisung holt den obersten Wert vom Auswertungsstapel und verschiebt ihn in die lokale Variable mit dem Index 3.</span><span class="sxs-lookup"><span data-stu-id="5c934-4228">The `stloc.3` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 3.</span></span> <span data-ttu-id="5c934-4229">Der Typ des Werts muss den Typ der lokalen Variablen gemäß der aktuellen Methode lokale Signatur übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="5c934-4229">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="5c934-4230">`stloc.3` ist eine besonders effiziente Codierung zum Speichern von Werten in der lokalen Variable 3.</span><span class="sxs-lookup"><span data-stu-id="5c934-4230">`stloc.3` is an especially efficient encoding for storing values in local variable 3.</span></span>  
  
 <span data-ttu-id="5c934-4231">Speichern in "lokal", die einen ganzzahliger Wert kleiner als 4 Bytes enthalten schneidet den Wert ab, wie vom Stapel auf die lokale Variable verschoben wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-4231">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="5c934-4232">Gleitkommawerte sind von ihrer systemeigenen Größe gerundet (Typ `F`) auf die Größe, die mit dem Argument verknüpft ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-4232">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="5c934-4233">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `stloc.3` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-4233">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.3` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-4234">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-4234">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-4235">Holt den aktuellen Wert von der obersten Position des Auswertungsstapels und speichert ihn in einer der Liste der lokalen Variablen am <paramref name="index" /> (Kurzform).</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-4235">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at <paramref name="index" /> (short form).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-4236">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-4236">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-4237">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-4237">Format</span></span>|<span data-ttu-id="5c934-4238">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-4238">Assembly Format</span></span>|<span data-ttu-id="5c934-4239">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-4239">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-4240">13 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="5c934-4240">13 < `unsigned int8` ></span></span>|<span data-ttu-id="5c934-4241">stloc.s `index`</span><span class="sxs-lookup"><span data-stu-id="5c934-4241">stloc.s `index`</span></span>|<span data-ttu-id="5c934-4242">Holt einen Wert aus dem Stapel, und speichert sie in der lokalen Variable `index`, Kurzform.</span><span class="sxs-lookup"><span data-stu-id="5c934-4242">Pops a value from the stack and stores it in local variable `index`, short form.</span></span>|  
  
 <span data-ttu-id="5c934-4243">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-4243">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-4244">Ein Wert vom Stapel geholt und in lokalen Variablen platziert `index`.</span><span class="sxs-lookup"><span data-stu-id="5c934-4244">A value is popped off of the stack and placed in local variable `index`.</span></span>  
  
 <span data-ttu-id="5c934-4245">Die `stloc.s` Anweisung holt den obersten Wert vom Auswertungsstapel und verschiebt ihn in die lokale Variable Anzahl `index`, wobei der lokale Variablen oder höher 0 nummeriert sind.</span><span class="sxs-lookup"><span data-stu-id="5c934-4245">The `stloc.s` instruction pops the top value off the evaluation stack and moves it into local variable number `index`, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="5c934-4246">Der Typ des Werts muss den Typ der lokalen Variablen gemäß der aktuellen Methode lokale Signatur übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="5c934-4246">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="5c934-4247">Die `stloc.s` Anweisung bietet eine effiziente Codierung für die lokalen Variablen von 0 bis 255.</span><span class="sxs-lookup"><span data-stu-id="5c934-4247">The `stloc.s` instruction provides an efficient encoding for local variables 0 through 255.</span></span>  
  
 <span data-ttu-id="5c934-4248">Speichern in "lokal", die einen ganzzahliger Wert kleiner als 4 Bytes enthalten schneidet den Wert ab, wie vom Stapel auf die lokale Variable verschoben wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-4248">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="5c934-4249">Gleitkommawerte sind von ihrer systemeigenen Größe gerundet (Typ `F`) auf die Größe, die mit dem Argument verknüpft ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-4249">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="5c934-4250">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> methodenüberladungen können die `stloc.s` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-4250">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `stloc.s` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-4251">ILGenerator.Emit (OpCode, LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="5c934-4251">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="5c934-4252">ILGenerator.Emit(OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="5c934-4252">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-4253">Kopiert einen Wert mit dem angegebenen Typ vom Auswertungsstapel in die angegebene Speicheradresse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-4253">Copies a value of a specified type from the evaluation stack into a supplied memory address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-4254">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-4254">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-4255">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-4255">Format</span></span>|<span data-ttu-id="5c934-4256">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-4256">Assembly Format</span></span>|<span data-ttu-id="5c934-4257">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-4257">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-4258">81 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5c934-4258">81 < `T` ></span></span>|<span data-ttu-id="5c934-4259">stobj `class`</span><span class="sxs-lookup"><span data-stu-id="5c934-4259">stobj `class`</span></span>|<span data-ttu-id="5c934-4260">Speichert einen Wert vom Typ `class` aus dem Stapel in den Arbeitsspeicher.</span><span class="sxs-lookup"><span data-stu-id="5c934-4260">Stores a value of type `class` from the stack into memory.</span></span>|  
  
 <span data-ttu-id="5c934-4261">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-4261">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-4262">Eine Adresse wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4262">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-4263">Ein Wert Typ-Objekt des Typs `class` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4263">A value type object of type `class` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-4264">Das Objekt und die Adresse, werden vom Stapel geholt. Das Typobjekt für den Wert wird an der Adresse gespeichert.</span><span class="sxs-lookup"><span data-stu-id="5c934-4264">The object and the address are popped from the stack; the value type object is stored at the address.</span></span>  
  
 <span data-ttu-id="5c934-4265">Die `stobj` -Anweisung kopiert das Werttypobjekt in die von der Adresse angegebene Adresse (einen Zeiger vom Typ `native int`, `*`, oder `&`).</span><span class="sxs-lookup"><span data-stu-id="5c934-4265">The `stobj` instruction copies the value type object into the address specified by the address (a pointer of type `native int`, `*`, or `&`).</span></span> <span data-ttu-id="5c934-4266">Die Anzahl der kopierten Bytes hängt von der Größe der durch dargestellten Klasse `class`, ein Metadatentoken, das einen Werttyp darstellt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4266">The number of bytes copied depends on the size of the class represented by `class`, a metadata token representing a value type.</span></span>  
  
 <span data-ttu-id="5c934-4267">Den Betrieb der `stobj` Anweisung kann geändert werden, einen unmittelbar vorangehenden <xref:System.Reflection.Emit.OpCodes.Volatile> oder <xref:System.Reflection.Emit.OpCodes.Unaligned> unmittelbar vorangestellt wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-4267">The operation of the `stobj` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="5c934-4268"><xref:System.TypeLoadException> wird ausgelöst, wenn die Klasse nicht gefunden werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-4268"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="5c934-4269">Dies wird in der Regel erkannt, wenn Microsoft Intermediate Language (MSIL)-Anweisungen in systemeigenen Code nicht zur Laufzeit konvertiert werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-4269">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at run time.</span></span>  
  
 <span data-ttu-id="5c934-4270">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `stobj` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-4270">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stobj` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-4271">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="5c934-4271">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stsfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stsfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stsfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stsfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stsfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stsfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stsfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stsfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-4272">Ersetzt den Wert eines statischen Felds durch einen Wert vom Auswertungsstapel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-4272">Replaces the value of a static field with a value from the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-4273">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-4273">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-4274">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-4274">Format</span></span>|<span data-ttu-id="5c934-4275">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-4275">Assembly Format</span></span>|<span data-ttu-id="5c934-4276">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-4276">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-4277">80 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5c934-4277">80 < `T` ></span></span>|<span data-ttu-id="5c934-4278">stsfld `field`</span><span class="sxs-lookup"><span data-stu-id="5c934-4278">stsfld `field`</span></span>|<span data-ttu-id="5c934-4279">Ersetzt den Wert in `field` mit einem angegebenen Wert.</span><span class="sxs-lookup"><span data-stu-id="5c934-4279">Replaces the value in `field` with a supplied value.</span></span>|  
  
 <span data-ttu-id="5c934-4280">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-4280">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-4281">Ein Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4281">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-4282">Ein Wert vom Stapel geholt und in gespeicherten `field`.</span><span class="sxs-lookup"><span data-stu-id="5c934-4282">A value is popped from the stack and stored in `field`.</span></span>  
  
 <span data-ttu-id="5c934-4283">Die `stsfld` Anweisung ersetzt den Wert eines statischen Felds durch einen Wert aus dem Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-4283">The `stsfld` instruction replaces the value of a static field with a value from the stack.</span></span> <span data-ttu-id="5c934-4284">`field` ist ein Metadatentoken, das auf einen Member von statischen Feld verweisen muss.</span><span class="sxs-lookup"><span data-stu-id="5c934-4284">`field` is a metadata token that must refer to a static field member.</span></span>  
  
 <span data-ttu-id="5c934-4285">Die `stsfld` Anweisung kann das Präfix <xref:System.Reflection.Emit.OpCodes.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="5c934-4285">The `stsfld` instruction may be prefixed by <xref:System.Reflection.Emit.OpCodes.Volatile>.</span></span>  
  
 <span data-ttu-id="5c934-4286"><xref:System.MissingFieldException> wird ausgelöst, wenn Feld in den Metadaten nicht gefunden wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-4286"><xref:System.MissingFieldException> is thrown if field is not found in the metadata.</span></span> <span data-ttu-id="5c934-4287">Dies ist in der Regel aktiviert, wenn Microsoft Intermediate Language (MSIL)-Anweisungen nicht zur Laufzeit in nativen Code konvertiert werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-4287">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at run time.</span></span>  
  
 <span data-ttu-id="5c934-4288">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `stsfld` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-4288">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stsfld` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-4289">ILGenerator.Emit(OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="5c934-4289">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sub : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sub" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-4290">Subtrahiert einen Wert von einem anderen Wert und legt das Ergebnis auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-4290">Subtracts one value from another and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-4291">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-4291">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-4292">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-4292">Format</span></span>|<span data-ttu-id="5c934-4293">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-4293">Assembly Format</span></span>|<span data-ttu-id="5c934-4294">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-4294">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-4295">59</span><span class="sxs-lookup"><span data-stu-id="5c934-4295">59</span></span>|<span data-ttu-id="5c934-4296">sub</span><span class="sxs-lookup"><span data-stu-id="5c934-4296">sub</span></span>|<span data-ttu-id="5c934-4297">Subtrahiert einen Wert aus einer anderen einen neuen numerischen Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-4297">Subtracts one value from another, returning a new numeric value.</span></span>|  
  
 <span data-ttu-id="5c934-4298">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-4298">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-4299">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4299">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-4300">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4300">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-4301">`value2` und `value1` werden aus den Stapel geholt `value2` subtrahiert wird `value1`.</span><span class="sxs-lookup"><span data-stu-id="5c934-4301">`value2` and `value1` are popped from the stack; `value2` is subtracted from `value1`.</span></span>  
  
4.  <span data-ttu-id="5c934-4302">Das Ergebnis wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4302">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-4303">Überlauf ist nicht für Ganzzahloperationen (richtige Überlaufdaten, finden Sie unter <xref:System.Reflection.Emit.OpCodes.Sub_Ovf>).</span><span class="sxs-lookup"><span data-stu-id="5c934-4303">Overflow is not detected for integer operations (for proper overflow handling, see <xref:System.Reflection.Emit.OpCodes.Sub_Ovf>).</span></span>  
  
 <span data-ttu-id="5c934-4304">Subtraktion der ganze Zahl, und nicht das Sättigungsverfahren.</span><span class="sxs-lookup"><span data-stu-id="5c934-4304">Integer subtraction wraps, rather than saturates.</span></span> <span data-ttu-id="5c934-4305">Z. B.: 8-Bit-Ganzzahlen, vorausgesetzt, in denen `value1` auf 0 festgelegt ist und `value2` festgelegt ist, 1, wird das Ergebnis "umschlossene" 255.</span><span class="sxs-lookup"><span data-stu-id="5c934-4305">For example: assuming 8-bit integers, where `value1` is set to 0 and `value2` is set to 1, the "wrapped" result will be 255.</span></span>  
  
 <span data-ttu-id="5c934-4306">Gleitkommaüberlauf gibt `+inf` (`PositiveInfinity`) oder `-inf` (`NegativeInfinity`).</span><span class="sxs-lookup"><span data-stu-id="5c934-4306">Floating-point overflow returns `+inf` (`PositiveInfinity`) or `-inf` (`NegativeInfinity`).</span></span>  
  
 <span data-ttu-id="5c934-4307">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `sub` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-4307">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sub` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-4308">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-4308">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub_Ovf;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sub_Ovf : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sub_Ovf" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-4309">Subtrahiert einen Ganzzahlwert von einem anderen Ganzzahlwert, führt eine Überlaufprüfung durch und legt das Ergebnis auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-4309">Subtracts one integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-4310">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-4310">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-4311">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-4311">Format</span></span>|<span data-ttu-id="5c934-4312">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-4312">Assembly Format</span></span>|<span data-ttu-id="5c934-4313">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-4313">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-4314">DA</span><span class="sxs-lookup"><span data-stu-id="5c934-4314">DA</span></span>|<span data-ttu-id="5c934-4315">Sub.ovf</span><span class="sxs-lookup"><span data-stu-id="5c934-4315">sub.ovf</span></span>|<span data-ttu-id="5c934-4316">Subtrahiert einen Ganzzahlwert von einem anderen mit eine überlaufprüfung an.</span><span class="sxs-lookup"><span data-stu-id="5c934-4316">Subtracts one integer value from another with an overflow check.</span></span>|  
  
 <span data-ttu-id="5c934-4317">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-4317">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-4318">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4318">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-4319">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4319">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-4320">`value2` und `value1` werden aus den Stapel geholt `value2` subtrahiert wird `value1` durch eine Suche nach einem Überlauf.</span><span class="sxs-lookup"><span data-stu-id="5c934-4320">`value2` and `value1` are popped from the stack; `value2` is subtracted from `value1` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="5c934-4321">Das Ergebnis wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4321">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-4322"><xref:System.OverflowException> wird ausgelöst, wenn das Ergebnis nicht im Ergebnistyp dargestellt werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-4322"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5c934-4323">Dieser Vorgang erfolgt an Ganzzahlen mit Vorzeichen; Verwenden Sie für Gleitkommawerte, <xref:System.Reflection.Emit.OpCodes.Sub>.</span><span class="sxs-lookup"><span data-stu-id="5c934-4323">This operation is performed on signed integers; for floating-point values, use <xref:System.Reflection.Emit.OpCodes.Sub>.</span></span>  
  
 <span data-ttu-id="5c934-4324">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `sub.ovf` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-4324">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sub.ovf` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-4325">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-4325">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub_Ovf_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sub_Ovf_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sub_Ovf_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-4326">Subtrahiert einen Ganzzahlwert ohne Vorzeichen von einem anderen Ganzzahlwert, führt eine Überlaufprüfung durch und legt das Ergebnis auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-4326">Subtracts one unsigned integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-4327">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-4327">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-4328">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-4328">Format</span></span>|<span data-ttu-id="5c934-4329">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-4329">Assembly Format</span></span>|<span data-ttu-id="5c934-4330">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-4330">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-4331">DB</span><span class="sxs-lookup"><span data-stu-id="5c934-4331">DB</span></span>|<span data-ttu-id="5c934-4332">Sub.ovf.un</span><span class="sxs-lookup"><span data-stu-id="5c934-4332">sub.ovf.un</span></span>|<span data-ttu-id="5c934-4333">Subtrahiert einen Ganzzahlwert ohne Vorzeichen in einen anderen eine überlaufprüfung an.</span><span class="sxs-lookup"><span data-stu-id="5c934-4333">Subtracts one unsigned integer value from another with an overflow check.</span></span>|  
  
 <span data-ttu-id="5c934-4334">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-4334">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-4335">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4335">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-4336">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4336">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-4337">`value2` und `value1` werden aus den Stapel geholt `value2` subtrahiert wird `value1` durch eine Suche nach einem Überlauf.</span><span class="sxs-lookup"><span data-stu-id="5c934-4337">`value2` and `value1` are popped from the stack; `value2` is subtracted from `value1` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="5c934-4338">Das Ergebnis wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4338">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-4339"><xref:System.OverflowException> wird ausgelöst, wenn das Ergebnis nicht im Ergebnistyp dargestellt werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-4339"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5c934-4340">Dieser Vorgang erfolgt an Ganzzahlen mit Vorzeichen; Verwenden Sie für Gleitkommawerte, <xref:System.Reflection.Emit.OpCodes.Sub>.</span><span class="sxs-lookup"><span data-stu-id="5c934-4340">This operation is performed on signed integers; for floating-point values, use <xref:System.Reflection.Emit.OpCodes.Sub>.</span></span>  
  
 <span data-ttu-id="5c934-4341">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `sub.ovf.un` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-4341">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sub.ovf.un` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-4342">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-4342">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Switch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Switch" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Switch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Switch As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Switch;" />
      <MemberSignature Language="F#" Value=" staticval mutable Switch : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Switch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-4343">Implementiert eine Sprungtabelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-4343">Implements a jump table.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-4344">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-4344">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-4345">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-4345">Format</span></span>|<span data-ttu-id="5c934-4346">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-4346">Assembly Format</span></span>|<span data-ttu-id="5c934-4347">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-4347">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-4348">45 < `unsigned int32` >< `int32` >... < `int32` ></span><span class="sxs-lookup"><span data-stu-id="5c934-4348">45 < `unsigned int32` > < `int32` >... < `int32` ></span></span>|<span data-ttu-id="5c934-4349">Wechseln Sie (`N`, `t1`, `t2`... `tN`)</span><span class="sxs-lookup"><span data-stu-id="5c934-4349">switch (`N`, `t1`, `t2`... `tN`)</span></span>|<span data-ttu-id="5c934-4350">Wechselt zu einem der `N` Werte.</span><span class="sxs-lookup"><span data-stu-id="5c934-4350">Jumps to one of `N` values.</span></span>|  
  
 <span data-ttu-id="5c934-4351">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-4351">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-4352">Ein Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4352">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-4353">Der Wert wird vom Stapel geholt und für die Anweisung mit dem Offset ab, das durch den Wert Ausführung übertragen wird, ist, in denen der Wert kleiner als `N`.</span><span class="sxs-lookup"><span data-stu-id="5c934-4353">The value is popped off the stack and execution is transferred to the instruction at the offset indexed by the value, where the value is less than `N`.</span></span>  
  
 <span data-ttu-id="5c934-4354">Die `switch` Anweisung implementiert eine Sprungtabelle.</span><span class="sxs-lookup"><span data-stu-id="5c934-4354">The `switch` instruction implements a jump table.</span></span> <span data-ttu-id="5c934-4355">Das Format der Anweisung ist ein `unsigned int32` , der die Anzahl von Zielen `N`, gefolgt von `N` Sprungziele für int32-Werten angeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-4355">The format of the instruction is an `unsigned int32` representing the number of targets `N`, followed by `N` int32 values specifying jump targets.</span></span> <span data-ttu-id="5c934-4356">Diese Ziele werden als (positive oder negative) Offsets vom Anfang der folgenden Anweisung dies dargestellt `switch` Anweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-4356">These targets are represented as offsets (positive or negative) from the beginning of the instruction following this `switch` instruction.</span></span>  
  
 <span data-ttu-id="5c934-4357">Die `switch` Anweisung, holt einen Wert aus dem Stapel, und vergleicht Sie ihn als ganze Zahl ohne Vorzeichen zu `N`.</span><span class="sxs-lookup"><span data-stu-id="5c934-4357">The `switch` instruction pops a value off the stack and compares it, as an unsigned integer, to `N`.</span></span> <span data-ttu-id="5c934-4358">Wenn der Wert ist kleiner als `N`, Ausführung an das Ziel, die indiziert anhand des Werts übertragen wird, in denen Ziele von 0 nummeriert (z. B. der Wert 0 wird das erste Ziel, der Wert 1 wird das zweite Ziel und So weiter).</span><span class="sxs-lookup"><span data-stu-id="5c934-4358">If value is less than `N`, execution is transferred to the target indexed by value, where targets are numbered from 0 (for example, a value of 0 takes the first target, a value of 1 takes the second target, and so on).</span></span> <span data-ttu-id="5c934-4359">Wenn der Wert größer als oder gleich `N`, die Ausführung wird fortgeführt, bei der nächsten Anweisung (fortfahren).</span><span class="sxs-lookup"><span data-stu-id="5c934-4359">If the value is greater than or equal to `N`, execution continues at the next instruction (fall through).</span></span>  
  
 <span data-ttu-id="5c934-4360">Wenn bei der zielinstruktion Codes für eine oder mehrere Präfix verfügt, Steuerelement kann nur übertragen werden mit dem ersten dieser Präfixe.</span><span class="sxs-lookup"><span data-stu-id="5c934-4360">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="5c934-4361">Steuern von Übertragungen in und aus `try`, `catch`, `filter`, und `finally` Blöcke können durch diese Anweisung nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-4361">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span> <span data-ttu-id="5c934-4362">(Solche Übertragungen sind stark eingeschränkt und müssen stattdessen die Anweisung Leave).</span><span class="sxs-lookup"><span data-stu-id="5c934-4362">(Such transfers are severely restricted and must use the leave instruction instead).</span></span>  
  
 <span data-ttu-id="5c934-4363">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `switch` Opcode.</span><span class="sxs-lookup"><span data-stu-id="5c934-4363">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `switch` opcode.</span></span> <span data-ttu-id="5c934-4364">Die `Label[]` Argument ist ein Array von Bezeichnungen, die 32-Bit-Offsets darstellen.</span><span class="sxs-lookup"><span data-stu-id="5c934-4364">The `Label[]` argument is an array of Labels representing 32-bit offsets.</span></span>  
  
-   <span data-ttu-id="5c934-4365">ILGenerator.Emit (OpCode, Label[])</span><span class="sxs-lookup"><span data-stu-id="5c934-4365">ILGenerator.Emit(OpCode, Label[])</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c934-4366">Das folgende Codebeispiel veranschaulicht die Verwendung von der `Switch` Opcode zum Generieren einer Sprungtabelle ein Array von <xref:System.Reflection.Emit.Label>.</span><span class="sxs-lookup"><span data-stu-id="5c934-4366">The following code sample illustrates the use of the `Switch` opcode to generate a jump table using an array of <xref:System.Reflection.Emit.Label>.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tailcall">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Tailcall;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Tailcall" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Tailcall" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Tailcall As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Tailcall;" />
      <MemberSignature Language="F#" Value=" staticval mutable Tailcall : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Tailcall" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-4367">Führt eine Postfix-Methodenaufrufanweisung in der Weise aus, dass der Stapelrahmen der aktuellen Methode vor der Ausführung der eigentlichen Aufrufanweisung entfernt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-4367">Performs a postfixed method call instruction such that the current method's stack frame is removed before the actual call instruction is executed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-4368">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-4368">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-4369">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-4369">Format</span></span>|<span data-ttu-id="5c934-4370">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-4370">Assembly Format</span></span>|<span data-ttu-id="5c934-4371">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-4371">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-4372">FE 14</span><span class="sxs-lookup"><span data-stu-id="5c934-4372">FE 14</span></span>|<span data-ttu-id="5c934-4373">"Tail".</span><span class="sxs-lookup"><span data-stu-id="5c934-4373">tail.</span></span>|<span data-ttu-id="5c934-4374">Der nachfolgende Aufruf beendet den aktuelle Methoden</span><span class="sxs-lookup"><span data-stu-id="5c934-4374">Subsequent call terminates current methods</span></span>|  
  
 <span data-ttu-id="5c934-4375">Es gibt keine Zustandswechsel, die für diese Anweisung definiert.</span><span class="sxs-lookup"><span data-stu-id="5c934-4375">There is no stack transition behavior defined for this instruction.</span></span>  
  
 <span data-ttu-id="5c934-4376">Die `tail` präfixanweisung muss unmittelbar voranstehen eine <xref:System.Reflection.Emit.OpCodes.Call>, <xref:System.Reflection.Emit.OpCodes.Calli>, oder <xref:System.Reflection.Emit.OpCodes.Callvirt> Anweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-4376">The `tail` prefix instruction must immediately precede a <xref:System.Reflection.Emit.OpCodes.Call>, <xref:System.Reflection.Emit.OpCodes.Calli>, or <xref:System.Reflection.Emit.OpCodes.Callvirt> instruction.</span></span> <span data-ttu-id="5c934-4377">Er gibt an, dass der Stapelrahmen der aktuellen Methode vor der Ausführung der aufrufanweisung entfernt werden soll.</span><span class="sxs-lookup"><span data-stu-id="5c934-4377">It indicates that the current method's stack frame should be removed before the call instruction is executed.</span></span> <span data-ttu-id="5c934-4378">Es bedeutet auch, dass der von den folgenden Aufruf zurückgegebene Wert auch der Wert, der von der aktuellen Methode zurückgegeben ist, und der Aufruf aus diesem Grund in einen Sprung Cross-Methode konvertiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-4378">It also implies that the value returned from the following call is also the value returned by the current method, and the call can therefore be converted into a cross-method jump.</span></span>  
  
 <span data-ttu-id="5c934-4379">Der Stapel muss mit Ausnahme der Argumente, die durch den folgenden Aufruf übertragenen leer sein.</span><span class="sxs-lookup"><span data-stu-id="5c934-4379">The stack must be empty except for the arguments being transferred by the following call.</span></span> <span data-ttu-id="5c934-4380">Die aufrufanweisung folgenden muss es sich um einen Ret sein. Daher die Reihenfolge der einzige gültige Codes ist `tail. call` (oder `calli` oder `callvirt`).</span><span class="sxs-lookup"><span data-stu-id="5c934-4380">The instruction following the call instruction must be a ret. Thus the only valid code sequence is `tail. call` (or `calli` or `callvirt`).</span></span> <span data-ttu-id="5c934-4381">Richtige Microsoft Intermediate Language (MSIL)-Anweisungen nicht zur Verzweigen müssen die `call` Verzweigung zur die nachfolgenden Anweisungen, aber sie <xref:System.Reflection.Emit.OpCodes.Ret>.</span><span class="sxs-lookup"><span data-stu-id="5c934-4381">Correct Microsoft Intermediate Language (MSIL) instructions must not branch to the `call` instruction, but they may branch to the subsequent <xref:System.Reflection.Emit.OpCodes.Ret>.</span></span>  
  
 <span data-ttu-id="5c934-4382">Der aktuelle Frame kann nicht verworfen werden, wenn die Steuerung ist aus nicht vertrauenswürdigem Code an vertrauenswürdigem Code, da dies Code Identität und Sicherheit gefährden würde.</span><span class="sxs-lookup"><span data-stu-id="5c934-4382">The current frame cannot be discarded when control is transferred from untrusted code to trusted code, since this would jeopardize code identity security.</span></span> <span data-ttu-id="5c934-4383">Die .NET Framework-Sicherheit überprüft aus diesem Grund kann die `tail` ignoriert werden soll, eine verlassen <xref:System.Reflection.Emit.OpCodes.Call> Anweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-4383">The .NET Framework security checks can therefore cause the `tail` to be ignored, leaving a standard <xref:System.Reflection.Emit.OpCodes.Call> instruction.</span></span> <span data-ttu-id="5c934-4384">Auf ähnliche Weise, in Reihenfolge zum Beenden einer auftritt, nachdem der Aufruf gibt einen synchronisierten Codebereich zulassen, wird die `tail` Präfix wird ignoriert, wenn verwendet, um eine Methode beendet wird, der als synchronisiert gekennzeichnet ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-4384">Similarly, in order to allow the exit of a synchronized region to occur after the call returns, the `tail` prefix is ignored when used to exit a method that is marked synchronized.</span></span>  
  
 <span data-ttu-id="5c934-4385">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `tail` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-4385">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `tail` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-4386">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-4386">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TakesSingleByteArgument">
      <MemberSignature Language="C#" Value="public static bool TakesSingleByteArgument (System.Reflection.Emit.OpCode inst);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TakesSingleByteArgument(valuetype System.Reflection.Emit.OpCode inst) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.OpCodes.TakesSingleByteArgument(System.Reflection.Emit.OpCode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TakesSingleByteArgument (inst As OpCode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TakesSingleByteArgument(System::Reflection::Emit::OpCode inst);" />
      <MemberSignature Language="F#" Value="static member TakesSingleByteArgument : System.Reflection.Emit.OpCode -&gt; bool" Usage="System.Reflection.Emit.OpCodes.TakesSingleByteArgument inst" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inst" Type="System.Reflection.Emit.OpCode" />
      </Parameters>
      <Docs>
        <param name="inst">
          <span data-ttu-id="5c934-4387">Eine Instanz eines eines Opcodeobjekts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-4387">An instance of an Opcode object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5c934-4388">Gibt TRUE oder FALSE zurück, wenn der bereitgestellte Opcode ein Einzelbyte-Argument akzeptiert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-4388">Returns true or false if the supplied opcode takes a single byte argument.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c934-4389">
            <see langword="True" /> oder <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-4389">
              <see langword="True" /> or <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-4390">Diese Methode kann verwendet werden, um zu ermitteln, welche MSIL-Opcodes "Kurzform", für die Verwendung in optimiertem Code.</span><span class="sxs-lookup"><span data-stu-id="5c934-4390">This method can be used to find which MSIL opcodes are "short form", for use in optimized code.</span></span>  
  
 <span data-ttu-id="5c934-4391">`TakesSingleByteArgument` Gibt `true` Wenn die <xref:System.Reflection.Emit.OpCode> Instanz akzeptiert ein einzelnes Byte-Argument in den folgenden Fällen:</span><span class="sxs-lookup"><span data-stu-id="5c934-4391">`TakesSingleByteArgument` returns `true` if the <xref:System.Reflection.Emit.OpCode> instance takes a single byte argument in the following cases:</span></span>  
  
-   <span data-ttu-id="5c934-4392">Der Opcode führt eine branchanweisung an eine Adresse Byte-Format (z. B. <xref:System.Reflection.Emit.OpCodes.Br_S> und <xref:System.Reflection.Emit.OpCodes.Bgt_S>).</span><span class="sxs-lookup"><span data-stu-id="5c934-4392">The opcode performs a branch instruction to a byte-sized address (for example, <xref:System.Reflection.Emit.OpCodes.Br_S> and <xref:System.Reflection.Emit.OpCodes.Bgt_S>).</span></span>  
  
-   <span data-ttu-id="5c934-4393">Der Opcode legt einen Byte-Wert im Stapel (z. B. <xref:System.Reflection.Emit.OpCodes.Ldc_I4_S>).</span><span class="sxs-lookup"><span data-stu-id="5c934-4393">The opcode pushes a byte value onto the stack (for example, <xref:System.Reflection.Emit.OpCodes.Ldc_I4_S>).</span></span>  
  
-   <span data-ttu-id="5c934-4394">Der Opcode verweist auf eine Variable oder ein Argument über die "Kurzform" (z. B. <xref:System.Reflection.Emit.OpCodes.Ldloc_S> und <xref:System.Reflection.Emit.OpCodes.Stloc_S>).</span><span class="sxs-lookup"><span data-stu-id="5c934-4394">The opcode references a variable or argument via the byte-sized "short form" (for example, <xref:System.Reflection.Emit.OpCodes.Ldloc_S> and <xref:System.Reflection.Emit.OpCodes.Stloc_S>).</span></span>  
  
 <span data-ttu-id="5c934-4395">Andernfalls wird `false` zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-4395">Otherwise, it returns `false`.</span></span>  
  
 <span data-ttu-id="5c934-4396">Das folgende Beispiel zeigt die Verwendung von `TakesSingleByteArgument` durch das spiegeln sich beim der `OpCodes` -Klasse, und testen, ob jede `OpCode` Feld akzeptiert ein Einzelbyte-Argument.</span><span class="sxs-lookup"><span data-stu-id="5c934-4396">The example below demonstrates the use of `TakesSingleByteArgument` by reflecting on to the `OpCodes` class and testing to see whether each `OpCode` field takes a single-byte argument.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Throw">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Throw;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Throw" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Throw" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Throw As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Throw;" />
      <MemberSignature Language="F#" Value=" staticval mutable Throw : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Throw" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-4397">Löst das Ausnahmeobjekt aus, das sich momentan auf dem Auswertungsstapel befindet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-4397">Throws the exception object currently on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-4398">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-4398">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-4399">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-4399">Format</span></span>|<span data-ttu-id="5c934-4400">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-4400">Assembly Format</span></span>|<span data-ttu-id="5c934-4401">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-4401">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-4402">7A</span><span class="sxs-lookup"><span data-stu-id="5c934-4402">7A</span></span>|<span data-ttu-id="5c934-4403">throw</span><span class="sxs-lookup"><span data-stu-id="5c934-4403">throw</span></span>|<span data-ttu-id="5c934-4404">Löst eine Ausnahme aus.</span><span class="sxs-lookup"><span data-stu-id="5c934-4404">Throws an exception.</span></span>|  
  
 <span data-ttu-id="5c934-4405">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-4405">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-4406">Ein Objektverweis (auf einer Ausnahme) wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4406">An object reference (to an exception) is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-4407">Der Objektverweis aus dem Stapel und die ausgelöste Ausnahme per pop ausgelesen wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-4407">The object reference is popped from the stack and the exception thrown.</span></span>  
  
 <span data-ttu-id="5c934-4408">Die `throw` Anweisung wird ein Ausnahmeobjekt (Typ `O`) derzeit auf dem Stapel.</span><span class="sxs-lookup"><span data-stu-id="5c934-4408">The `throw` instruction throws the exception object (type `O`) currently on the stack.</span></span>  
  
 <span data-ttu-id="5c934-4409"><xref:System.NullReferenceException> wird ausgelöst, wenn der Objektverweis null-Verweis ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-4409"><xref:System.NullReferenceException> is thrown if the object reference is a null reference.</span></span>  
  
 <span data-ttu-id="5c934-4410">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `throw` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-4410">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `throw` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-4411">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-4411">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unaligned">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unaligned;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unaligned" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unaligned" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unaligned As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unaligned;" />
      <MemberSignature Language="F#" Value=" staticval mutable Unaligned : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Unaligned" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-4412">Gibt an, dass eine Adresse derzeit auf dem Auswertungsstapel ab nicht kann, können Sie an die Größe ausgerichtet werden der unmittelbar darauf folgenden <see langword="ldind" />, <see langword="stind" />, <see langword="ldfld" />, <see langword="stfld" />, <see langword="ldobj" />, <see langword="stobj" />, <see langword="initblk" />, oder <see langword="cpblk" /> Anweisung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-4412">Indicates that an address currently atop the evaluation stack might not be aligned to the natural size of the immediately following <see langword="ldind" />, <see langword="stind" />, <see langword="ldfld" />, <see langword="stfld" />, <see langword="ldobj" />, <see langword="stobj" />, <see langword="initblk" />, or <see langword="cpblk" /> instruction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-4413">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-4413">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-4414">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-4414">Format</span></span>|<span data-ttu-id="5c934-4415">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-4415">Assembly Format</span></span>|<span data-ttu-id="5c934-4416">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-4416">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-4417">FE 12 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="5c934-4417">FE 12 < `unsigned int8` ></span></span>|<span data-ttu-id="5c934-4418">nicht ausgerichtete.</span><span class="sxs-lookup"><span data-stu-id="5c934-4418">unaligned.</span></span> `alignment`|<span data-ttu-id="5c934-4419">Gibt an, dass die nachfolgende-Anweisung nicht ausgerichtete werden kann.</span><span class="sxs-lookup"><span data-stu-id="5c934-4419">Indicates that the subsequent pointer instruction may be unaligned.</span></span>|  
  
 <span data-ttu-id="5c934-4420">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-4420">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-4421">Eine Adresse wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4421">An address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-4422">`Unaligned` Gibt an, dass die Adresse (einen nicht verwalteten Zeiger, `native int`) auf dem Stapel möglicherweise nicht ausgerichtet an der eigentlichen Größe der unmittelbar darauf folgenden `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, oder `cpblk` Anweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-4422">`Unaligned` specifies that the address (an unmanaged pointer, `native int`) on the stack might not be aligned to the natural size of the immediately following `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, or `cpblk` instruction.</span></span> <span data-ttu-id="5c934-4423">D. h. für eine <xref:System.Reflection.Emit.OpCodes.Ldind_I4> Anweisung, die die Ausrichtung der Adresse möglicherweise nicht mit einer 4-Byte-Grenze.</span><span class="sxs-lookup"><span data-stu-id="5c934-4423">That is, for a <xref:System.Reflection.Emit.OpCodes.Ldind_I4> instruction the alignment of the address may not be to a 4-byte boundary.</span></span> <span data-ttu-id="5c934-4424">Für `initblk` und `cpblk` die standardausrichtung ist abhängige-Architektur (4-Byte für 32-Bit-CPUs, 8 Bytes auf 64-Bit-CPUs).</span><span class="sxs-lookup"><span data-stu-id="5c934-4424">For `initblk` and `cpblk` the default alignment is architecture dependent (4-byte on 32-bit CPUs, 8-byte on 64-bit CPUs).</span></span> <span data-ttu-id="5c934-4425">Code-Generatoren, die nicht die Ausgabe auf einer 32-Bit-Wort-Größe beschränken müssen verwenden `unaligned` , wenn die Ausrichtung zum Zeitpunkt der Kompilierung nicht bekannt ist, um 8 Bytes beträgt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4425">Code generators that do not restrict their output to a 32-bit word size must use `unaligned` if the alignment is not known at compile time to be 8-byte.</span></span>  
  
 <span data-ttu-id="5c934-4426">Der Wert der Ausrichtung muss 1, 2 oder 4 und bedeutet, die der generierte Code, dass die Adresse Byte, Doppelbyte-Quad-Byte-ausgerichtet, bzw. davon ausgehen soll.</span><span class="sxs-lookup"><span data-stu-id="5c934-4426">The value of alignment must be 1, 2, or 4 and means that the generated code should assume that the address is byte, double-byte, or quad-byte aligned, respectively.</span></span> <span data-ttu-id="5c934-4427">Beachten Sie, dass flüchtige Zeiger (Typ `*`) werden immer ausgerichtet.</span><span class="sxs-lookup"><span data-stu-id="5c934-4427">Note that transient pointers (type `*`) are always aligned.</span></span>  
  
 <span data-ttu-id="5c934-4428">Während die Ausrichtung für ein `cpblk` Anweisung müssten logisch zwei Zahlen (eine für die Quelle) und eine für das Ziel, ist es keine wahrnehmbaren Auswirkungen auf die Leistung, wenn nur die niedrigere Zahl angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-4428">While the alignment for a `cpblk` instruction would logically require two numbers (one for the source and one for the destination), there is no noticeable impact on performance if only the lower number is specified.</span></span>  
  
 <span data-ttu-id="5c934-4429">Die `unaligned` und `volatile` Präfixe können in beliebiger Reihenfolge kombiniert werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-4429">The `unaligned` and `volatile` prefixes can be combined in either order.</span></span> <span data-ttu-id="5c934-4430">Sie müssen unmittelbar voranstehen eine `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, oder `cpblk` Anweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-4430">They must immediately precede a `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, or `cpblk` instruction.</span></span> <span data-ttu-id="5c934-4431">Nur die <xref:System.Reflection.Emit.OpCodes.Volatile> Präfix ist zulässig, für die <xref:System.Reflection.Emit.OpCodes.Ldsfld> und <xref:System.Reflection.Emit.OpCodes.Stsfld> Anweisungen.</span><span class="sxs-lookup"><span data-stu-id="5c934-4431">Only the <xref:System.Reflection.Emit.OpCodes.Volatile> prefix is allowed for the <xref:System.Reflection.Emit.OpCodes.Ldsfld> and <xref:System.Reflection.Emit.OpCodes.Stsfld> instructions.</span></span>  
  
 <span data-ttu-id="5c934-4432">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> methodenüberladungen können die `unaligned` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-4432">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `unaligned` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-4433">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="5c934-4433">ILGenerator.Emit(OpCode, Label)</span></span>  
  
-   <span data-ttu-id="5c934-4434">ILGenerator.Emit(Opcode, Byte)</span><span class="sxs-lookup"><span data-stu-id="5c934-4434">ILGenerator.Emit(Opcode, Byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unbox">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unbox;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unbox" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unbox" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unbox As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unbox;" />
      <MemberSignature Language="F#" Value=" staticval mutable Unbox : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Unbox" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-4435">Konvertiert die Darstellung eines mittels Boxing gepackten Werttyps in seine mittels Unboxing entpackte Entsprechung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-4435">Converts the boxed representation of a value type to its unboxed form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-4436">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-4436">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-4437">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-4437">Format</span></span>|<span data-ttu-id="5c934-4438">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-4438">Assembly Format</span></span>|<span data-ttu-id="5c934-4439">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-4439">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-4440">79 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5c934-4440">79 < `T` ></span></span>|<span data-ttu-id="5c934-4441">mittels Unboxing zu konvertieren `valType`</span><span class="sxs-lookup"><span data-stu-id="5c934-4441">unbox `valType`</span></span>|<span data-ttu-id="5c934-4442">Extrahiert die Daten für die Wert von `obj`, die geschachtelte Darstellung.</span><span class="sxs-lookup"><span data-stu-id="5c934-4442">Extracts the value type data from `obj`, its boxed representation.</span></span>|  
  
 <span data-ttu-id="5c934-4443">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-4443">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-4444">Es ist ein Objektverweis auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4444">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-4445">Der Objektverweis ist vom Stapel geholt und mittels Unboxing zurückkonvertiert, um einen Werttypzeiger.</span><span class="sxs-lookup"><span data-stu-id="5c934-4445">The object reference is popped from the stack and unboxed to a value type pointer.</span></span>  
  
3.  <span data-ttu-id="5c934-4446">Der Zeigertyp Wert wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4446">The value type pointer is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-4447">Ein Werttyp verfügt über zwei separate Darstellungen in der Common Language Infrastructure (CLI):</span><span class="sxs-lookup"><span data-stu-id="5c934-4447">A value type has two separate representations within the Common Language Infrastructure (CLI):</span></span>  
  
-   <span data-ttu-id="5c934-4448">Eine "raw" Form verwendet, wenn ein Werttyp in ein anderes Objekt eingebettet ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-4448">A 'raw' form used when a value type is embedded within another object.</span></span>  
  
-   <span data-ttu-id="5c934-4449">Ein "geschachtelte" Formular, in denen die Daten in den Werttyp in ein Objekt umschlossen (geschachtelt) ist, sodass es als unabhängige Einheit vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-4449">A 'boxed' form, where the data in the value type is wrapped (boxed) into an object so it can exist as an independent entity.</span></span>  
  
 <span data-ttu-id="5c934-4450">Die `unbox` -Anweisung konvertiert den Objektverweis (Typ `O`), wird die geschachtelte Darstellung eines Werttyps, um einen Werttypzeiger (einen verwalteten Zeiger, Typ `&`), die nicht geschachtelte Form.</span><span class="sxs-lookup"><span data-stu-id="5c934-4450">The `unbox` instruction converts the object reference (type `O`), the boxed representation of a value type, to a value type pointer (a managed pointer, type `&`), its unboxed form.</span></span> <span data-ttu-id="5c934-4451">Der angegebene Werttyp (`valType`) ist ein Metadatentoken, das den Typ eines Werttyps innerhalb des geschachtelten Objekts angibt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4451">The supplied value type (`valType`) is a metadata token indicating the type of value type contained within the boxed object.</span></span>  
  
 <span data-ttu-id="5c934-4452">Im Gegensatz zu <xref:System.Reflection.Emit.OpCodes.Box>, die erforderlich ist, um eine Kopie eines Werttyps, für die Verwendung im-Objekt erstellen `unbox` ist nicht erforderlich, um den Werttyp aus dem Objekt zu kopieren.</span><span class="sxs-lookup"><span data-stu-id="5c934-4452">Unlike <xref:System.Reflection.Emit.OpCodes.Box>, which is required to make a copy of a value type for use in the object, `unbox` is not required to copy the value type from the object.</span></span> <span data-ttu-id="5c934-4453">In der Regel berechnet einfach die Adresse des Werttyps, der bereits in das geschachtelte Objekt vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-4453">Typically it simply computes the address of the value type that is already present inside of the boxed object.</span></span>  
  
 <span data-ttu-id="5c934-4454"><xref:System.InvalidCastException> wird ausgelöst, wenn das Objekt nicht als geschachtelt ist `valType`.</span><span class="sxs-lookup"><span data-stu-id="5c934-4454"><xref:System.InvalidCastException> is thrown if the object is not boxed as `valType`.</span></span>  
  
 <span data-ttu-id="5c934-4455"><xref:System.NullReferenceException> wird ausgelöst, wenn der Objektverweis null-Verweis ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-4455"><xref:System.NullReferenceException> is thrown if the object reference is a null reference.</span></span>  
  
 <span data-ttu-id="5c934-4456"><xref:System.TypeLoadException> wird ausgelöst, wenn der Werttyp `valType` wurde nicht gefunden.</span><span class="sxs-lookup"><span data-stu-id="5c934-4456"><xref:System.TypeLoadException> is thrown if the value type `valType` cannot be found.</span></span> <span data-ttu-id="5c934-4457">Dies wird in der Regel erkannt, wenn Microsoft Intermediate Language (MSIL)-Anweisungen in systemeigenen Code anstelle einer zur Laufzeit konvertiert werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-4457">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="5c934-4458">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `unbox` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-4458">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `unbox` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-4459">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="5c934-4459">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unbox_Any">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unbox_Any;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unbox_Any" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unbox_Any" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unbox_Any As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unbox_Any;" />
      <MemberSignature Language="F#" Value=" staticval mutable Unbox_Any : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Unbox_Any" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-4460">Konvertiert die geschachtelte Darstellung eines Typs in der Anweisung, um seine nicht geschachtelte Form angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-4460">Converts the boxed representation of a type specified in the instruction to its unboxed form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-4461">Die folgende Tabelle enthält die hexadezimale und Microsoft intermediate Language (MSIL) Assembly-Format, sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-4461">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-4462">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-4462">Format</span></span>|<span data-ttu-id="5c934-4463">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-4463">Assembly Format</span></span>|<span data-ttu-id="5c934-4464">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-4464">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-4465">A5 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5c934-4465">A5 < `T` ></span></span>|<span data-ttu-id="5c934-4466">unbox.Any `typeTok`</span><span class="sxs-lookup"><span data-stu-id="5c934-4466">unbox.any `typeTok`</span></span>|<span data-ttu-id="5c934-4467">Extrahieren Sie die Daten aus `obj`, die geschachtelte Darstellung.</span><span class="sxs-lookup"><span data-stu-id="5c934-4467">Extract the data from `obj`, its boxed representation.</span></span>|  
  
 <span data-ttu-id="5c934-4468">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-4468">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-4469">Ein Verweis auf eine `obj` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4469">An object reference `obj` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-4470">Der Objektverweis ist vom Stapel geholt und mittels Unboxing zurückkonvertiert, in den Typ in der Anweisung angegeben.</span><span class="sxs-lookup"><span data-stu-id="5c934-4470">The object reference is popped from the stack and unboxed to the type specified in the instruction.</span></span>  
  
3.  <span data-ttu-id="5c934-4471">Der resultierende Typ von Objekt Verweis- oder Werttyp wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4471">The resulting object reference or value type is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-4472">Bei Anwendung auf die geschachtelte Form von ein Werttyp, der `unbox.any` Anweisung extrahiert den Wert, der in enthaltenen `obj` (des Typs `O`), und ist daher gleichbedeutend mit `unbox` gefolgt von `ldobj`.</span><span class="sxs-lookup"><span data-stu-id="5c934-4472">When applied to the boxed form of a value type, the `unbox.any` instruction extracts the value contained within `obj` (of type `O`), and is therefore equivalent to `unbox` followed by `ldobj`.</span></span>  
  
 <span data-ttu-id="5c934-4473">Bei Anwendung auf einen Verweistyp handelt, die `unbox.any` Anweisung hat dieselbe Wirkung wie das `castclass` `typeTok`.</span><span class="sxs-lookup"><span data-stu-id="5c934-4473">When applied to a reference type, the `unbox.any` instruction has the same effect as `castclass` `typeTok`.</span></span>  
  
 <span data-ttu-id="5c934-4474">Wenn der Operand `typeTok` ein generischen Typparameter angegeben wird, ist, und klicken Sie dann das Laufzeitverhalten durch den Typ bestimmt wird, die für den generischen Typparameter angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="5c934-4474">If the operand `typeTok` is a generic type parameter, then the runtime behavior is determined by the type that is specified for that generic type parameter.</span></span>  
  
 <span data-ttu-id="5c934-4475"><xref:System.InvalidCastException> wird ausgelöst, wenn `obj` ist kein geschachtelter Typ.</span><span class="sxs-lookup"><span data-stu-id="5c934-4475"><xref:System.InvalidCastException> is thrown if `obj` is not a boxed type.</span></span>  
  
 <span data-ttu-id="5c934-4476"><xref:System.NullReferenceException> wird ausgelöst, wenn `obj` ist ein null-Verweis.</span><span class="sxs-lookup"><span data-stu-id="5c934-4476"><xref:System.NullReferenceException> is thrown if `obj` is a null reference.</span></span>  
  
 <span data-ttu-id="5c934-4477">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `unbox.any` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-4477">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `unbox.any` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-4478">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="5c934-4478">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Volatile">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Volatile;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Volatile" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Volatile" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Volatile As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Volatile;" />
      <MemberSignature Language="F#" Value=" staticval mutable Volatile : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Volatile" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-4479">Gibt an, dass es sich bei einer Adresse, die sich momentan oben auf dem Auswertungsstapel befindet, möglicherweise um eine flüchtige Adresse handelt und daher die aus diesem Speicherort gelesenen Ergebnisse nicht zwischengespeichert werden können oder mehrere für diesen Speicherort ausgeführte Speichervorgänge nicht unterdrückt werden können.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-4479">Specifies that an address currently atop the evaluation stack might be volatile, and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-4480">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-4480">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-4481">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-4481">Format</span></span>|<span data-ttu-id="5c934-4482">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-4482">Assembly Format</span></span>|<span data-ttu-id="5c934-4483">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-4483">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-4484">FE 13</span><span class="sxs-lookup"><span data-stu-id="5c934-4484">FE 13</span></span>|<span data-ttu-id="5c934-4485">flüchtige.</span><span class="sxs-lookup"><span data-stu-id="5c934-4485">volatile.</span></span>|<span data-ttu-id="5c934-4486">Gibt an, dass die nachfolgenden Zeigerverweis "volatile" ist.</span><span class="sxs-lookup"><span data-stu-id="5c934-4486">Indicates that the subsequent pointer reference is volatile.</span></span>|  
  
 <span data-ttu-id="5c934-4487">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-4487">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-4488">Eine Adresse wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4488">An address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-4489">`volatile`.</span><span class="sxs-lookup"><span data-stu-id="5c934-4489">`volatile`.</span></span> <span data-ttu-id="5c934-4490">Gibt an, dass die Adresse eine flüchtige Adresse handelt (d. h. es kann von außen für den aktuellen Thread der Ausführung verwiesen werden) und die Ergebnisse zu lesen, dass nicht zwischengespeichert werden können oder mehrere Speicher für diesen Speicherort nicht unterdrückt werden können.</span><span class="sxs-lookup"><span data-stu-id="5c934-4490">specifies that the address is a volatile address (that is, it can be referenced externally to the current thread of execution) and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed.</span></span> <span data-ttu-id="5c934-4491">Markieren eines Zugriffs als `volatile` wirkt sich auf, die Zugriff aus; andere Zugriffe auf den gleichen Speicherort müssen separat markiert werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-4491">Marking an access as `volatile` affects only that single access; other accesses to the same location must be marked separately.</span></span> <span data-ttu-id="5c934-4492">Zugriff auf flüchtige Speicherorte muss nicht atomar ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-4492">Access to volatile locations need not be performed atomically.</span></span>  
  
 <span data-ttu-id="5c934-4493">Die <xref:System.Reflection.Emit.OpCodes.Unaligned> und `volatile` Präfixe können in beliebiger Reihenfolge kombiniert werden.</span><span class="sxs-lookup"><span data-stu-id="5c934-4493">The <xref:System.Reflection.Emit.OpCodes.Unaligned> and `volatile` prefixes can be combined in either order.</span></span> <span data-ttu-id="5c934-4494">Sie müssen unmittelbar voranstehen eine `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, oder `cpblk` Anweisung.</span><span class="sxs-lookup"><span data-stu-id="5c934-4494">They must immediately precede a `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, or `cpblk` instruction.</span></span> <span data-ttu-id="5c934-4495">Nur die `volatile` Präfix ist zulässig, für die <xref:System.Reflection.Emit.OpCodes.Ldsfld> und <xref:System.Reflection.Emit.OpCodes.Stsfld> Anweisungen.</span><span class="sxs-lookup"><span data-stu-id="5c934-4495">Only the `volatile` prefix is allowed for the <xref:System.Reflection.Emit.OpCodes.Ldsfld> and <xref:System.Reflection.Emit.OpCodes.Stsfld> instructions.</span></span>  
  
 <span data-ttu-id="5c934-4496">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `volatile` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-4496">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `volatile` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-4497">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-4497">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xor">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Xor;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Xor" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Xor" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Xor As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Xor;" />
      <MemberSignature Language="F#" Value=" staticval mutable Xor : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Xor" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c934-4498">Berechnet das bitweise XOR der beidem auf dem Stapel an oberster Position befindlichen Werte und legt das Ergebnis auf dem Auswertungsstapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c934-4498">Computes the bitwise XOR of the top two values on the evaluation stack, pushing the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c934-4499">Die folgende Tabelle enthält die hexadezimale und das Assemblyformat von Microsoft Intermediate Language (MSIL) sowie eine kurze Referenz-Zusammenfassung:</span><span class="sxs-lookup"><span data-stu-id="5c934-4499">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5c934-4500">Format</span><span class="sxs-lookup"><span data-stu-id="5c934-4500">Format</span></span>|<span data-ttu-id="5c934-4501">Assemblyformat</span><span class="sxs-lookup"><span data-stu-id="5c934-4501">Assembly Format</span></span>|<span data-ttu-id="5c934-4502">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="5c934-4502">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5c934-4503">61</span><span class="sxs-lookup"><span data-stu-id="5c934-4503">61</span></span>|<span data-ttu-id="5c934-4504">xor</span><span class="sxs-lookup"><span data-stu-id="5c934-4504">xor</span></span>|<span data-ttu-id="5c934-4505">Berechnet das bitweise XOR mit zwei ganzzahligen Werten und gibt eine ganze Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="5c934-4505">Computes the bitwise XOR of two integer values and returns an integer.</span></span>|  
  
 <span data-ttu-id="5c934-4506">Im Stapel-laufen, wird in der angegebenen Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="5c934-4506">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5c934-4507">`value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4507">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5c934-4508">`value2` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4508">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5c934-4509">`value2` und `value1` werden per pop ausgelesen, aus dem Stapel und die bitweise XOR berechnet.</span><span class="sxs-lookup"><span data-stu-id="5c934-4509">`value2` and `value1` are popped from the stack and their bitwise XOR computed.</span></span>  
  
4.  <span data-ttu-id="5c934-4510">Das bitweise XOR der `value2` und `value1` wird auf dem Stapel abgelegt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4510">The bitwise XOR of `value2` and `value1` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5c934-4511">Die `xor` -Anweisung berechnet das bitweise XOR für die beiden obersten Werte im Stapel und das Ergebnis auf dem Stapel verbleibt.</span><span class="sxs-lookup"><span data-stu-id="5c934-4511">The `xor` instruction computes the bitwise XOR of the top two values on the stack and leaves the result on the stack.</span></span>  
  
 <span data-ttu-id="5c934-4512">`Xor` ist ein Vorgang für die ganze Zahlen.</span><span class="sxs-lookup"><span data-stu-id="5c934-4512">`Xor` is an integer-specific operation.</span></span>  
  
 <span data-ttu-id="5c934-4513">Die folgenden <xref:System.Reflection.Emit.ILGenerator.Emit%2A> Überladung der Methode verwendet die `xor` Opcode:</span><span class="sxs-lookup"><span data-stu-id="5c934-4513">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `xor` opcode:</span></span>  
  
-   <span data-ttu-id="5c934-4514">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="5c934-4514">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="DynamicILInfo.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5027718ba7331018405b1f33c2a7cd8dbe961edfe.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">027718ba7331018405b1f33c2a7cd8dbe961edfe</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>Provides support for alternative ways to generate the Microsoft intermediate language (MSIL) and metadata for a dynamic method, including methods for creating tokens and for inserting the code, exception handling, and local variable signature blobs.</source>
          <target state="translated">Stellt Unterstützung für eine alternative Vorgehensweise zum Generieren von MSIL (Microsoft Intermediate Language) und von Metadaten für eine dynamische Methode bereit. Dabei sind Methoden zum Erstellen von Token und zum Einfügen des Codes, Ausnahmenbehandlung sowie Signatur-BLOBs für lokale Variablen inbegriffen.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> class allows developers to write their own MSIL generators instead of using <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph>.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> Klasse können Entwickler ihre eigenen MSIL-Generatoren anstatt schreiben <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>To create instances of other types, call methods, and so on, the MSIL you generate must include tokens for those entities.</source>
          <target state="translated">Zum Erstellen von Instanzen anderer Typen Aufrufen von Methoden und So weiter, muss der MSIL-Code Sie generieren Token für die Entitäten enthalten.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> class provides several overloads of the <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A&gt;</ph> method, which return tokens valid in the scope of the current <ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph>.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> Klasse enthält mehrere Überladungen der der <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A&gt;</ph> -Methode, die Token gültig zurückgeben, im Gültigkeitsbereich des aktuellen <ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>For example, if you need to call an overload of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> method, you can obtain a <ph id="ph2">&lt;xref:System.RuntimeMethodHandle&gt;</ph> for that overload and pass it to the <ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A&gt;</ph> method to obtain a token to embed in your MSIL.</source>
          <target state="translated">Z. B., wenn Sie eine Überladung aufrufen der <ph id="ph1">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> -Methode, die Sie erhalten eine <ph id="ph2">&lt;xref:System.RuntimeMethodHandle&gt;</ph> für, die überladen, und übergeben Sie sie an der <ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A&gt;</ph> Methode zum Abrufen eines Token zum Einbetten in die MSIL.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>Once you have created <ph id="ph1">&lt;xref:System.Byte&gt;</ph> arrays for your local variable signature, exceptions, and code body, you can use the <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A&gt;</ph> methods to insert them into the <ph id="ph5">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> associated with your <ph id="ph6">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.</source>
          <target state="translated">Nach dem Erstellen <ph id="ph1">&lt;xref:System.Byte&gt;</ph> Arrays für die lokale Variablensignatur, Ausnahmen und Codetext, können Sie die <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A&gt;</ph>, und <ph id="ph4">&lt;xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A&gt;</ph> Methoden zum Einfügen in die <ph id="ph5">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> zugeordneten Ihrer <ph id="ph6">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> -Objekt.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</source>
          <target state="translated">Generieren von Metadaten und MSIL erfordert Vertrautheit mit der Common Language Infrastructure (CLI)-Dokumentation, insbesondere in "Partition II: Metadata Definition and Semantics" und "Partition III: CIL Instruction Set".</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">Die Dokumentation ist online verfügbar. Sie finden sie unter <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards (Standards von ECMA C# und Common Language Infrastructure)<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> auf MSDN und <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI) (Standard ECMA-335 – Common Language Infrastructure (CLI))<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> auf der Ecma International-Website.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>Do not use <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> to generate code that creates a delegate to another dynamic method by calling the delegate constructor directly.</source>
          <target state="translated">Verwenden Sie keine <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> zum Generieren von Code, der einen Delegaten an eine andere dynamische Methode erstellt, indem Delegatkonstruktors direkt aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>Instead, use the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> method to create the delegate.</source>
          <target state="translated">Verwenden Sie stattdessen die <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> Methode, um den Delegaten zu erstellen.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>A delegate that is created with the delegate constructor does not have a reference to the target dynamic method.</source>
          <target state="translated">Einen Verweis auf die dynamische Zielmethode kein Delegat, der mit dem Delegatkonstruktor erstellt wird.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>The dynamic method might be reclaimed by garbage collection while the delegate is still in use.</source>
          <target state="translated">Die dynamische Methode möglicherweise durch die Garbagecollection freigegeben werden, während der Delegat weiterhin verwendet wird.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicILInfo.DynamicMethod">
          <source>Gets the dynamic method whose body is generated by the current instance.</source>
          <target state="translated">Ruft die dynamische Methode ab, deren Text von der aktuellen Instanz generiert wird.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicILInfo.DynamicMethod">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph> object representing the dynamic method for which the current <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> object is generating code.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>-Objekt, das die dynamische Methode darstellt, für die das aktuelle <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>-Objekt Code generiert.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicILInfo.DynamicMethod">
          <source>A <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object is always associated with a dynamic method.</source>
          <target state="translated">Ein <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> Objekt immer eine dynamische Methode zugeordnet ist.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicILInfo.DynamicMethod">
          <source>The purpose of the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> class is to provide another way of inserting the MSIL stream, exception handling, and local variable signature into a dynamic method, for developers who want to generate MSIL without using the <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> class.</source>
          <target state="translated">Der Zweck der <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> Klasse ist eine weitere Möglichkeit zum Einfügen von der MSIL-Streams, die Behandlung von Ausnahmen und die lokale Variablensignatur in eine dynamische Methode bereitstellen, für Entwickler möchten ohne Verwendung von MSIL generieren die <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> Klasse.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>Gets a token, valid in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>, representing a string, field, method, type, or signature in the MSIL stream for the associated dynamic method.</source>
          <target state="translated">Ruft ein im Bereich der aktuellen <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> gültiges Token ab, das eine Zeichenfolge, ein Feld, eine Methode, einen Typ oder eine Signatur im MSIL-Stream für die zugeordnete dynamische Methode darstellt.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])">
          <source>An array that contains the signature.</source>
          <target state="translated">Ein Array, das die Signatur enthält.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])">
          <source>Gets a token, valid in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>, representing the signature for the associated dynamic method.</source>
          <target state="translated">Ruft ein im Bereich der aktuellen <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> gültiges Token ab, das die Signatur für die zugeordnete dynamische Methode darstellt.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])">
          <source>A token that can be embedded in the metadata and the MSIL stream for the associated dynamic method.</source>
          <target state="translated">Ein Token, das in die Metadaten und in den MSIL-Stream für die zugeordnete dynamische Methode eingebettet werden kann.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])">
          <source>For information on signature blobs, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</source>
          <target state="translated">Informationen zu Signatur-Blobs finden Sie in der Common Language Infrastructure (CLI)-Dokumentation, insbesondere in "Partition II: Metadata Definition and Semantics".</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">Die Dokumentation ist online verfügbar. Sie finden sie unter <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards (Standards von ECMA C# und Common Language Infrastructure)<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> auf MSDN und <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI) (Standard ECMA-335 – Common Language Infrastructure (CLI))<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> auf der Ecma International-Website.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)">
          <source>The dynamic method to call.</source>
          <target state="translated">Die aufzurufende dynamische Methode.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)">
          <source>Gets a token, valid in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>, representing a dynamic method to be called from the associated method.</source>
          <target state="translated">Ruft ein im Bereich der aktuellen <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> gültiges Token ab, das eine aus der zugeordneten Methode aufzurufende dynamische Methode darstellt.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)">
          <source>A token that can be embedded in the MSIL stream for the associated dynamic method, as the target of an MSIL instruction.</source>
          <target state="translated">Ein Token, das in den MSIL-Stream für die zugeordnete dynamische Methode als Ziel einer MSIL-Anweisung eingebettet werden kann.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)">
          <source>The token returned by this method overload allows you to call a dynamic method from the dynamic method associated with the current <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.</source>
          <target state="translated">Das zurückgegebene Token über Überladung dieser Methode können Sie eine dynamische Methode aus der dynamischen Methode verknüpft sind, mit dem aktuellen Aufrufen <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> Objekt.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)">
          <source>To call the associated dynamic method recursively, pass the value of the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A&gt;</ph> property.</source>
          <target state="translated">Um die rekursiv zugeordnete dynamische Methode aufzurufen, übergeben Sie den Wert von der <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A&gt;</ph> Eigenschaft.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)">
          <source>The field to be accessed.</source>
          <target state="translated">Das Feld, auf das zugegriffen werden soll.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)">
          <source>Gets a token, valid in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>, representing a field to be accessed from the associated dynamic method.</source>
          <target state="translated">Ruft ein im Bereich der aktuellen <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> gültiges Token ab, das ein Feld darstellt, auf das aus der zugeordneten dynamischen Methode zugegriffen werden soll.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)">
          <source>A token that can be used as the operand of an MSIL instruction that accesses fields, in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> object.</source>
          <target state="translated">Ein Token im Bereich des aktuellen <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>-Objekts, das als Operand einer MSIL-Anweisung verwendet werden kann, mit der auf Felder zugegriffen wird.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)">
          <source>You must obtain a token for any field that will be accessed by the dynamic method associated with the current <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.</source>
          <target state="translated">Sie benötigen ein Token für jedes Feld, das von der dynamischen Methode verknüpft sind, mit dem aktuellen erfolgt <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> Objekt.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)">
          <source>Use the <ph id="ph1">&lt;xref:System.Type.GetField%2A?displayProperty=nameWithType&gt;</ph> method to get a <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> for the field you want to access, then use the <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.FieldHandle%2A&gt;</ph> property to get the <ph id="ph4">&lt;xref:System.RuntimeFieldHandle&gt;</ph>.</source>
          <target state="translated">Verwenden der <ph id="ph1">&lt;xref:System.Type.GetField%2A?displayProperty=nameWithType&gt;</ph> Methode zum Abrufen einer <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> für das Feld, das Sie zugreifen möchten, verwenden Sie dann die <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.FieldHandle%2A&gt;</ph> Eigenschaft, um die <ph id="ph4">&lt;xref:System.RuntimeFieldHandle&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)">
          <source>The method to be accessed.</source>
          <target state="translated">Die Methode, auf die zugegriffen werden soll.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)">
          <source>Gets a token, valid in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>, representing a method to be accessed from the associated dynamic method.</source>
          <target state="translated">Ruft ein im Bereich der aktuellen <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> gültiges Token ab, das eine Methode darstellt, auf die aus der zugeordneten dynamischen Methode zugegriffen werden soll.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)">
          <source>A token that can be used as the operand of an MSIL instruction that accesses methods, such as <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Call" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /&gt;</ph>, in the scope of the current <ph id="ph3">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> object.</source>
          <target state="translated">Ein Token im Bereich des aktuellen <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Call" /&gt;</ph>-Objekts, das als Operand einer MSIL-Anweisung verwendet werden kann, mit der auf Methoden zugegriffen wird, z. B. <ph id="ph2">&lt;see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /&gt;</ph> oder <ph id="ph3">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)">
          <source>You must obtain a token for any method that will be accessed by the dynamic method associated with the current <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.</source>
          <target state="translated">Sie benötigen ein Token für jede Methode, die von der dynamischen Methode verknüpft sind, mit dem aktuellen erfolgt <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> Objekt.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)">
          <source>Use the <ph id="ph1">&lt;xref:System.Type.GetMethod%2A?displayProperty=nameWithType&gt;</ph> method to get a <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> for the method you want to access, and then use the <ph id="ph3">&lt;xref:System.Reflection.MethodBase.MethodHandle%2A&gt;</ph> property to get the <ph id="ph4">&lt;xref:System.RuntimeMethodHandle&gt;</ph>.</source>
          <target state="translated">Verwenden der <ph id="ph1">&lt;xref:System.Type.GetMethod%2A?displayProperty=nameWithType&gt;</ph> Methode zum Abrufen einer <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> für die Methode, die Sie zugreifen möchten, und verwenden Sie dann die <ph id="ph3">&lt;xref:System.Reflection.MethodBase.MethodHandle%2A&gt;</ph> Eigenschaft, um die <ph id="ph4">&lt;xref:System.RuntimeMethodHandle&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)">
          <source>For a method that belongs to a generic type, use the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29&gt;</ph> method overload and specify a <ph id="ph2">&lt;xref:System.RuntimeTypeHandle&gt;</ph> for the generic type.</source>
          <target state="translated">Verwenden Sie für eine Methode, die für einen generischen Typ gehört, die <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29&gt;</ph> -methodenüberladung, und geben Sie einen <ph id="ph2">&lt;xref:System.RuntimeTypeHandle&gt;</ph> für den generischen Typ.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)">
          <source>The type to be used.</source>
          <target state="translated">Der zu verwendende Typ.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)">
          <source>Gets a token, valid in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>, representing a type to be used in the associated dynamic method.</source>
          <target state="translated">Ruft ein im Bereich der aktuellen <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> gültiges Token ab, das einen Typ darstellt, der in der zugeordneten dynamischen Methode verwendet werden soll.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)">
          <source>A token that can be used as the operand of an MSIL instruction that requires a type, in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> object.</source>
          <target state="translated">Ein Token im Bereich des aktuellen <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>-Objekts, das als Operand einer MSIL-Anweisung verwendet werden kann, die einen Typ erfordert.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)">
          <source>The token returned by this method overload allows you to define a local variable type, and emit MSIL to create an instance of a type in the dynamic method associated with the current <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.</source>
          <target state="translated">Das zurückgegebene Token über Überladung dieser Methode können Sie lokalen Variablen vom Typ definieren und Ausgeben von MSIL zum Erstellen von einer Instanz eines Typs in der dynamischen Methode verknüpft sind, mit dem aktuellen <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> Objekt.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)">
          <source>To get a <ph id="ph1">&lt;xref:System.RuntimeTypeHandle&gt;</ph> representing a type, use the <ph id="ph2">&lt;xref:System.Type.TypeHandle%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Zum Abrufen einer <ph id="ph1">&lt;xref:System.RuntimeTypeHandle&gt;</ph> einen Typ darstellt, verwenden Sie die <ph id="ph2">&lt;xref:System.Type.TypeHandle%2A?displayProperty=nameWithType&gt;</ph> Eigenschaft.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)">
          <source>The string to be used.</source>
          <target state="translated">Die zu verwendende Zeichenfolge.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)">
          <source>Gets a token, valid in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>, representing a string literal to be used in the associated dynamic method.</source>
          <target state="translated">Ruft ein im Bereich der aktuellen <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> gültiges Token ab, das ein Zeichenfolgenliteral darstellt, das in der zugeordneten dynamischen Methode verwendet werden soll.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)">
          <source>A token that can be used as the operand of an MSIL instruction that requires a string, in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> object.</source>
          <target state="translated">Ein Token im Bereich des aktuellen <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>-Objekts, das als Operand einer MSIL-Anweisung verwendet werden kann, die eine Zeichenfolge erfordert.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>The field to be accessed.</source>
          <target state="translated">Das Feld, auf das zugegriffen werden soll.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>The generic type the field belongs to.</source>
          <target state="translated">Der generische Typ, zu dem das Feld gehört.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>Gets a token, valid in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>, representing a field to be accessed from the associated dynamic method; the field is on the specified generic type.</source>
          <target state="translated">Ruft ein im Bereich der aktuellen <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> gültiges Token ab, das ein Feld darstellt, auf das aus der zugeordneten dynamischen Methode zugegriffen werden soll. Das Feld ist vom angegebenen generischen Typ.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>A token that can be used as the operand of an MSIL instruction that accesses fields in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> object.</source>
          <target state="translated">Ein Token im Bereich des aktuellen <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>-Objekts, das als Operand einer MSIL-Anweisung verwendet werden kann, mit der auf Felder zugegriffen wird.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>You must obtain a token for any field that will be accessed by the dynamic method associated with the current <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.</source>
          <target state="translated">Sie benötigen ein Token für jedes Feld, das von der dynamischen Methode verknüpft sind, mit dem aktuellen erfolgt <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> Objekt.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>Use the <ph id="ph1">&lt;xref:System.Type.GetField%2A?displayProperty=nameWithType&gt;</ph> method to get a <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> for the field you want to access, and then use the <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.FieldHandle%2A&gt;</ph> property to get the <ph id="ph4">&lt;xref:System.RuntimeFieldHandle&gt;</ph>.</source>
          <target state="translated">Verwenden der <ph id="ph1">&lt;xref:System.Type.GetField%2A?displayProperty=nameWithType&gt;</ph> Methode zum Abrufen einer <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> für das Feld, das Sie zugreifen möchten, und verwenden Sie dann die <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.FieldHandle%2A&gt;</ph> Eigenschaft, um die <ph id="ph4">&lt;xref:System.RuntimeFieldHandle&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
          <source>The method.</source>
          <target state="translated">Die Methode.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
          <source>The generic type the method belongs to.</source>
          <target state="translated">Der generische Typ, zu dem die Methode gehört.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
          <source>Gets a token, valid in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>, representing a method on a generic type.</source>
          <target state="translated">Ruft ein im Bereich der aktuellen <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> gültiges Token ab, das eine Methode für einen generischen Typ darstellt.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
          <source>A token that can be used as the operand of an MSIL instruction that accesses methods, such as <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Call" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /&gt;</ph>, in the scope of the current <ph id="ph3">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> object.</source>
          <target state="translated">Ein Token im Bereich des aktuellen <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Call" /&gt;</ph>-Objekts, das als Operand einer MSIL-Anweisung verwendet werden kann, mit der auf Methoden zugegriffen wird, z. B. <ph id="ph2">&lt;see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /&gt;</ph> oder <ph id="ph3">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
          <source>You must obtain a token for any method that will be called by the dynamic method associated with the current <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.</source>
          <target state="translated">Sie benötigen ein Token für jede Methode, die aufgerufen wird, von der dynamischen Methode verknüpft sind, mit dem aktuellen <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> Objekt.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
          <source>Use the <ph id="ph1">&lt;xref:System.Type.GetMethod%2A?displayProperty=nameWithType&gt;</ph> method to get a <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> for the method you want to call, and then use the <ph id="ph3">&lt;xref:System.Reflection.MethodBase.MethodHandle%2A&gt;</ph> property to get the <ph id="ph4">&lt;xref:System.RuntimeMethodHandle&gt;</ph>.</source>
          <target state="translated">Verwenden der <ph id="ph1">&lt;xref:System.Type.GetMethod%2A?displayProperty=nameWithType&gt;</ph> Methode zum Abrufen einer <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> für die Methode, die Sie verwenden möchten, einen Aufruf, und klicken Sie dann die <ph id="ph3">&lt;xref:System.Reflection.MethodBase.MethodHandle%2A&gt;</ph> Eigenschaft, um die <ph id="ph4">&lt;xref:System.RuntimeMethodHandle&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>Sets the code body of the associated dynamic method.</source>
          <target state="translated">Legt den Codetext der zugeordneten dynamischen Methode fest.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
          <source>An array that contains the MSIL stream.</source>
          <target state="translated">Ein Array, das den MSIL-Stream enthält.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
          <source>The maximum number of items on the operand stack when the method is executing.</source>
          <target state="translated">Die maximale Anzahl von Elementen auf dem Operandenstapel beim Ausführen der Methode.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
          <source>Sets the code body of the associated dynamic method.</source>
          <target state="translated">Legt den Codetext der zugeordneten dynamischen Methode fest.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
          <source>No validity checks are performed on the MSIL stream.</source>
          <target state="translated">Keine Gültigkeit überprüft werden für die MSIL-Streams ausgeführt.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
          <source>Calling this method a second time replaces the first MSIL stream with the second.</source>
          <target state="translated">Beim Aufrufen dieser Methode eines zweiten Mal ersetzt die erste MSIL-Streams mit dem zweiten.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
          <source>Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</source>
          <target state="translated">Generieren von Metadaten und MSIL erfordert Vertrautheit mit der Common Language Infrastructure (CLI)-Dokumentation, insbesondere in "Partition II: Metadata Definition and Semantics" und "Partition III: CIL Instruction Set".</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">Die Dokumentation ist online verfügbar. Sie finden sie unter <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards (Standards von ECMA C# und Common Language Infrastructure)<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> auf MSDN und <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI) (Standard ECMA-335 – Common Language Infrastructure (CLI))<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> auf der Ecma International-Website.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source>A pointer to a byte array containing the MSIL stream.</source>
          <target state="translated">Ein Zeiger auf ein Bytearray, das den MSIL-Stream enthält.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source>The number of bytes in the MSIL stream.</source>
          <target state="translated">Die Anzahl der Bytes im MSIL-Stream.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source>The maximum number of items on the operand stack when the method is executing.</source>
          <target state="translated">Die maximale Anzahl von Elementen auf dem Operandenstapel beim Ausführen der Methode.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source>Sets the code body of the associated dynamic method.</source>
          <target state="translated">Legt den Codetext der zugeordneten dynamischen Methode fest.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source>No validity checks are performed on the MSIL stream.</source>
          <target state="translated">Keine Gültigkeit überprüft werden für die MSIL-Streams ausgeführt.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source>Calling this method a second time replaces the first MSIL stream with the second.</source>
          <target state="translated">Beim Aufrufen dieser Methode eines zweiten Mal ersetzt die erste MSIL-Streams mit dem zweiten.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source>Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set."</source>
          <target state="translated">Generieren von Metadaten und MSIL erfordert Vertrautheit mit der Common Language Infrastructure (CLI)-Dokumentation, insbesondere in "Partition II: Metadata Definition and Semantics" und "Partition III: CIL Instruction Set."</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">Die Dokumentation ist online verfügbar. Sie finden sie unter <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards (Standards von ECMA C# und Common Language Infrastructure)<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> auf MSDN und <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI) (Standard ECMA-335 – Common Language Infrastructure (CLI))<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> auf der Ecma International-Website.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="code" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="codeSize" /&gt;</ph> is greater than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="code" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>, und <ph id="ph3">&lt;paramref name="codeSize" /&gt;</ph> ist größer als 0 (null).</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="codeSize" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="codeSize" /&gt;</ph> ist kleiner als 0.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>Sets the exception metadata for the associated dynamic method.</source>
          <target state="translated">Legt die Ausnahmemetadaten für die zugeordnete dynamische Methode fest.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])">
          <source>An array that contains the exception metadata.</source>
          <target state="translated">Ein Array, das die Ausnahmemetadaten enthält.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])">
          <source>Sets the exception metadata for the associated dynamic method.</source>
          <target state="translated">Legt die Ausnahmemetadaten für die zugeordnete dynamische Methode fest.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])">
          <source>The exception metadata for a method defines the location and size of all <ph id="ph1">`try`</ph>, <ph id="ph2">`catch`</ph>, <ph id="ph3">`finally`</ph>, filter, and fault blocks.</source>
          <target state="translated">Die Ausnahmemetadaten für eine Methode definiert, die Position und Größe aller <ph id="ph1">`try`</ph>, <ph id="ph2">`catch`</ph>, <ph id="ph3">`finally`</ph>, Filter und Fault-Blöcke.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])">
          <source>For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</source>
          <target state="translated">Informationen zum Layout aus diesen Metadaten finden Sie unter der Common Language Infrastructure (CLI)-Dokumentation, insbesondere in "Partition II: Metadata Definition and Semantics".</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">Die Dokumentation ist online verfügbar. Sie finden sie unter <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards (Standards von ECMA C# und Common Language Infrastructure)<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> auf MSDN und <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI) (Standard ECMA-335 – Common Language Infrastructure (CLI))<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> auf der Ecma International-Website.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
          <source>A pointer to a byte array containing the exception metadata.</source>
          <target state="translated">Ein Zeiger auf ein Bytearray, das die Ausnahmemetadaten enthält.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
          <source>The number of bytes of exception metadata.</source>
          <target state="translated">Die Bytezahl der Ausnahmemetadaten.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
          <source>Sets the exception metadata for the associated dynamic method.</source>
          <target state="translated">Legt die Ausnahmemetadaten für die zugeordnete dynamische Methode fest.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
          <source>The exception metadata for a method defines the location and size of all <ph id="ph1">`try`</ph>, <ph id="ph2">`catch`</ph>, <ph id="ph3">`finally`</ph>, filter, and fault blocks.</source>
          <target state="translated">Die Ausnahmemetadaten für eine Methode definiert, die Position und Größe aller <ph id="ph1">`try`</ph>, <ph id="ph2">`catch`</ph>, <ph id="ph3">`finally`</ph>, Filter und Fault-Blöcke.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
          <source>For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</source>
          <target state="translated">Informationen zum Layout aus diesen Metadaten finden Sie unter der Common Language Infrastructure (CLI)-Dokumentation, insbesondere in "Partition II: Metadata Definition and Semantics" und "Partition III: CIL Instruction Set".</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">Die Dokumentation ist online verfügbar. Sie finden sie unter <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards (Standards von ECMA C# und Common Language Infrastructure)<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> auf MSDN und <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI) (Standard ECMA-335 – Common Language Infrastructure (CLI))<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> auf der Ecma International-Website.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="exceptions" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="exceptionSize" /&gt;</ph> is greater than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="exceptions" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>, und <ph id="ph3">&lt;paramref name="exceptionSize" /&gt;</ph> ist größer als 0 (null).</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="exceptionSize" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="exceptionSize" /&gt;</ph> ist kleiner als 0.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</source>
          <target state="translated">Legt die lokale Variablensignatur fest, in der das Layout von lokalen Variablen für die zugeordnete dynamische Methode beschrieben wird.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])">
          <source>An array that contains the layout of local variables for the associated <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>.</source>
          <target state="translated">Ein Array, das das Layout von lokalen Variablen für die zugeordnete <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph> enthält.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])">
          <source>Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</source>
          <target state="translated">Legt die lokale Variablensignatur fest, in der das Layout von lokalen Variablen für die zugeordnete dynamische Methode beschrieben wird.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])">
          <source>The local variable signature describes the layout of a method's local variables.</source>
          <target state="translated">Die lokale Variablensignatur beschreibt das Layout der lokalen Variablen für eine Methode.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])">
          <source>To simplify construction of the local variable signature, use the <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic) <ph id="ph3">&lt;xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType&gt;</ph> method to get a <ph id="ph4">&lt;xref:System.Reflection.Emit.SignatureHelper&gt;</ph> for the local signature.</source>
          <target state="translated">Verwenden Sie zur Vereinfachung der Erstellung der Signatur der lokalen Variablen der <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic) <ph id="ph3">&lt;xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType&gt;</ph> Methode zum Abrufen einer <ph id="ph4">&lt;xref:System.Reflection.Emit.SignatureHelper&gt;</ph> für die lokale Signatur.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])">
          <source>For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</source>
          <target state="translated">Informationen zu Signaturen für lokale Variablen finden Sie in der Dokumentation der Common Language Infrastructure (CLI), insbesondere in "Partition II: Metadata Definition and Semantics".</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">Die Dokumentation ist online verfügbar. Sie finden sie unter <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards (Standards von ECMA C# und Common Language Infrastructure)<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> auf MSDN und <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI) (Standard ECMA-335 – Common Language Infrastructure (CLI))<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> auf der Ecma International-Website.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
          <source>An array that contains the layout of local variables for the associated <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>.</source>
          <target state="translated">Ein Array, das das Layout von lokalen Variablen für die zugeordnete <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph> enthält.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
          <source>The number of bytes in the signature.</source>
          <target state="translated">Die Anzahl der Bytes in der Signatur.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
          <source>Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</source>
          <target state="translated">Legt die lokale Variablensignatur fest, in der das Layout von lokalen Variablen für die zugeordnete dynamische Methode beschrieben wird.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
          <source>The local variable signature describes the layout of a method's local variables.</source>
          <target state="translated">Die lokale Variablensignatur beschreibt das Layout der lokalen Variablen für eine Methode.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
          <source>To simplify construction of the local variable signature, use the <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic) <ph id="ph3">&lt;xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType&gt;</ph> method to get a <ph id="ph4">&lt;xref:System.Reflection.Emit.SignatureHelper&gt;</ph> for the local signature.</source>
          <target state="translated">Verwenden Sie zur Vereinfachung der Erstellung der Signatur der lokalen Variablen der <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic) <ph id="ph3">&lt;xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType&gt;</ph> Methode zum Abrufen einer <ph id="ph4">&lt;xref:System.Reflection.Emit.SignatureHelper&gt;</ph> für die lokale Signatur.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
          <source>For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</source>
          <target state="translated">Informationen zu Signaturen für lokale Variablen finden Sie in der Dokumentation der Common Language Infrastructure (CLI), insbesondere in "Partition II: Metadata Definition and Semantics".</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">Die Dokumentation ist online verfügbar. Sie finden sie unter <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards (Standards von ECMA C# und Common Language Infrastructure)<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> auf MSDN und <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI) (Standard ECMA-335 – Common Language Infrastructure (CLI))<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> auf der Ecma International-Website.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="localSignature" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="signatureSize" /&gt;</ph> is greater than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="localSignature" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>, und <ph id="ph3">&lt;paramref name="signatureSize" /&gt;</ph> ist größer als 0 (null).</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="signatureSize" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="signatureSize" /&gt;</ph> ist kleiner als 0.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
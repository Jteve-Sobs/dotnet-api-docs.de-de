<Type Name="XamlTypeInvoker" FullName="System.Xaml.Schema.XamlTypeInvoker">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="504f5574033cb4de7a3c6a42e6208306d4dd86e5" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30720674" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XamlTypeInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlTypeInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.Schema.XamlTypeInvoker" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlTypeInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlTypeInvoker" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt einen Erweiterungspunkt bereit, mit dem Instanzen eines XAML-Typs durch andere Methoden als Reflektion und Konstruktoren erstellt werden können.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Zweck der <xref:System.Xaml.Schema.XamlTypeInvoker> ist ein erweiterbares XAML-Typsystem, Schema und eine Laufzeit, die nicht als vollständig zu CLR-Funktionen wie Reflektionsinformationen über CLR-Attributen basiert funktionierende ermöglichen <xref:System.Type> und <xref:System.Reflection.MemberInfo>und so weiter. Unterklassen des <xref:System.Xaml.Schema.XamlTypeInvoker> dienen als Eingabeparameter für die alternativen Konstruktoren von XAML-Schema-Klassen wie z. B. <xref:System.Xaml.XamlType>. Sie eine Unterklasse von <xref:System.Xaml.XamlType> und übergeben Sie die <xref:System.Xaml.Schema.XamlTypeInvoker> über des Basiskonstruktors. Zusammen mit definieren eine <xref:System.Xaml.Schema.XamlTypeInvoker> des Konstruktors, müssen Sie auch angeben Außerkraftsetzungen für mindestens einige der `Lookup` Methoden der <xref:System.Xaml.XamlType>.  
  
 <xref:System.Xaml.Schema.XamlTypeInvoker> ist eine Standardimplementierung. Die standardmäßige Implementierung folgt auf ein ähnliches Modell, um die standardmäßige Implementierung des XAML-Schematypen <xref:System.Xaml.XamlType> und <xref:System.Xaml.XamlMember>: das CLR-Typsystem wird verwendet, für die Instanziierung, Werte und Suchvorgänge, einschließlich der Verwendung von CLR-Attributen <xref:System.Type> und <xref:System.Reflection.MemberInfo>und so weiter.  
  
 <xref:System.Xaml.Schema.XamlTypeInvoker> Stellt Methoden für grundlegende Instanziierung (<xref:System.Xaml.Schema.XamlTypeInvoker.CreateInstance%2A>) und Methoden, die relevant für Typen sind, in denen die <xref:System.Xaml.XamlType> stellt eine Auflistung, Wörterbuch oder ein Array (<xref:System.Xaml.Schema.XamlTypeInvoker.AddToCollection%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetItems%2A>).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlTypeInvoker ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlTypeInvoker();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Standardimplementierung ist leer.  
  
 Dieser Konstruktor wird intern aufgerufen, um einen Wert für <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A>. Für eine <xref:System.Xaml.Schema.XamlTypeInvoker> -Unterklasse, die es wird erwartet, dass Sie entweder die <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> Signatur für die Konstruktion, oder geben Sie eine Außerkraftsetzung, die aufruft <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> als Basis. Bereitstellen der <xref:System.Xaml.XamlType> ein Standardmuster implementiert Where <xref:System.Xaml.Schema.XamlTypeInvoker> ist unveränderlich.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlTypeInvoker (System.Xaml.XamlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (type As XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlTypeInvoker(System::Xaml::XamlType ^ type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="type">Der <see cref="T:System.Xaml.XamlType" />-Wert für den bestimmten XAML-Typ, der für das <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />-Objekt relevant ist.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />-Klasse auf der Grundlage eines angegebenen <see cref="T:System.Xaml.XamlType" />-Objekts.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Intern auf Grundlage dieser Konstruktor wird aufgerufen, die <xref:System.Xaml.XamlType> , in dem die <xref:System.Xaml.Schema.XamlTypeInvoker> zur Erstellung verwendet wird. Die `type` bereitgestellte hier relevant für ist alle anderen Methodenaufrufe für <xref:System.Xaml.Schema.XamlTypeInvoker>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddToCollection">
      <MemberSignature Language="C#" Value="public virtual void AddToCollection (object instance, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToCollection(object instance, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToCollection (instance As Object, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddToCollection(System::Object ^ instance, System::Object ^ item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">Eine Instanz des Typs, der von dem für die Erstellung dieses <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> verwendeten <see cref="T:System.Xaml.XamlType" /> angegeben wird.</param>
        <param name="item">Das Element, das hinzugefügt werden soll.</param>
        <summary>Fügt das bereitgestellte Element einer Instanz des Typs hinzu, der für diesen <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> relevant ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie diese Methode nur auf eine <xref:System.Xaml.XamlType> , die eine Auflistung darstellt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Diese Methode wurde für einen <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> aufgerufen, der auf einem unbekannten <see cref="T:System.Xaml.XamlType" /> basiert.  
  
 **-oder-**  
  
 Diese Methode wurde für einen <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> aufgerufen, wobei der entsprechende Typ keine Sammlung ist.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="instance" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.Xaml.XamlSchemaException">
          <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> für diesen <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> gibt <see langword="null" /> zurück.</exception>
        <block subset="none" type="overrides">
          <para>Die grundlegende Implementierung enthält einen Aufruf an die interne Hilfsmethode <c>ThrowIfUnknown</c>. Dieses Hilfsprogramm löst immer für Fälle, in denen ein <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> basiert auf einem unbekannten <see cref="T:System.Xaml.XamlType" />, inklusive der Fälle, in denen die <see cref="P:System.Xaml.XamlType.UnderlyingType" /> von der <see cref="T:System.Xaml.XamlType" /> ist <see langword="null" />.  
  
 Intern ruft die basisimplementierung <see cref="P:System.Xaml.XamlType.IsCollection" />, und löst aus, wenn das Ergebnis ist <see langword="false" />.  
  
 Die grundlegende Implementierung nicht notwendigerweise verwendet eine eigene <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> Implementierung. Zuerst wird eine Umwandlung von <paramref name="instance" /> auf <see cref="T:System.Collections.IList" /> versucht wird. Wenn dies erfolgreich ist, einen Aufruf von <see cref="M:System.Collections.IList.Add(System.Object)" /> erfolgt und gibt die Methode zurück. Andernfalls verwendet die grundlegende Implementierung CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> zum Aufrufen des zugrunde liegenden <see langword="Add" /> -Methode, wie von einem Aufruf abgerufen <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> dafür <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.  
  
 In der basisimplementierung wird auf dieser Ebene vorhanden, wenn keine Ausnahme ausgelöst <paramref name="item" /> ist <see langword="null" />. Es ist weiterhin möglich, die die zugrunde liegende <see langword="Add" /> Methode löst eine Ausnahme beim Aufrufen. Andere zur Laufzeitausnahmen sind möglich, wenn <see cref="P:System.Xaml.XamlType.ItemType" /> kein gültiges Ergebnis zurückgibt.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="AddToDictionary">
      <MemberSignature Language="C#" Value="public virtual void AddToDictionary (object instance, object key, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToDictionary(object instance, object key, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToDictionary (instance As Object, key As Object, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddToDictionary(System::Object ^ instance, System::Object ^ key, System::Object ^ item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">Eine Instanz des Typs, der von dem für die Erstellung dieses <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> verwendeten <see cref="T:System.Xaml.XamlType" /> angegeben wird.</param>
        <param name="key">Wörterbuchschlüssel für das hinzuzufügende Element.</param>
        <param name="item">Der hinzuzufügende Elementwert.</param>
        <summary>Fügt den bereitgestellten Schlüssel und den Elementwert einer Instanz des Typs hinzu, der für diesen <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> relevant ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie diese Methode nur auf eine <xref:System.Xaml.XamlType> , die ein Wörterbuch darstellt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Diese Methode wurde für einen <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> aufgerufen, der auf einem unbekannten <see cref="T:System.Xaml.XamlType" /> basiert.  
  
 **-oder-**  
  
 Diese Methode wurde für einen <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> aufgerufen, wobei der entsprechende Typ kein Wörterbuch ist.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="instance" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.Xaml.XamlSchemaException">
          <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> für diesen <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> gibt <see langword="null" /> zurück.</exception>
        <block subset="none" type="overrides">
          <para>Die grundlegende Implementierung enthält einen Aufruf an die interne Hilfsmethode <c>ThrowIfUnknown</c>. Dieses Hilfsprogramm löst immer für Fälle, in denen ein <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> basiert auf einem unbekannten <see cref="T:System.Xaml.XamlType" />, inklusive der Fälle, in denen die <see cref="P:System.Xaml.XamlType.UnderlyingType" /> von der <see cref="T:System.Xaml.XamlType" /> ist <see langword="null" />.  
  
 Intern ruft die basisimplementierung <see cref="P:System.Xaml.XamlType.IsDictionary" />, und löst aus, wenn das Ergebnis ist <see langword="false" />.  
  
 Die grundlegende Implementierung nicht notwendigerweise verwendet eine eigene <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> Implementierung. Zuerst wird eine Umwandlung von <paramref name="instance" /> auf <see cref="T:System.Collections.IDictionary" /> versucht wird. Wenn dies erfolgreich ist, einen Aufruf von <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" /> erfolgt und gibt die Methode zurück. Andernfalls verwendet die grundlegende Implementierung CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> zum Aufrufen des zugrunde liegenden <see langword="Add" /> -Methode, wie von einem Aufruf abgerufen <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> dafür <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.  
  
 In der basisimplementierung wird auf dieser Ebene vorhanden, wenn keine Ausnahme ausgelöst <paramref name="item" /> oder <paramref name="key" /> sind <see langword="null" />. Es ist weiterhin möglich, die die zugrunde liegende <see langword="Add" /> Methode löst eine Ausnahme beim Aufrufen. Andere zur Laufzeitausnahmen sind möglich, wenn <see cref="P:System.Xaml.XamlType.ItemType" /> kein gültiges Ergebnis zurückgibt.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual object CreateInstance (object[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateInstance(object[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateInstance (arguments As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ CreateInstance(cli::array &lt;System::Object ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="arguments">Ein Objektarray, durch das die <see langword="x:ConstructorArgs" /> für die Instanz angegeben werden. Ist möglicherweise <see langword="null" /> für Typen, die nicht <see langword="x:ConstructorArgs" /> erfordern oder verwenden.</param>
        <summary>Erstellt eine Objektinstanz auf Grundlage des durch Konstruktion initiierten <see cref="T:System.Xaml.XamlType" />-Objekts für dieses <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />-Objekt.</summary>
        <returns>Die erstellte Instanz auf Grundlage des durch Konstruktion initiierten <see cref="T:System.Xaml.XamlType" />-Objekts für dieses <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />-Objekt.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MissingMethodException">Ein Konstruktor konnte nicht aufgelöst werden.</exception>
        <block subset="none" type="overrides">
          <para>Die grundlegende Implementierung enthält einen Aufruf an die interne Hilfsmethode <c>ThrowIfUnknown</c>. Dieses Hilfsprogramm löst immer für Fälle, in denen ein <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> basiert auf einem unbekannten <see cref="T:System.Xaml.XamlType" />, inklusive der Fälle, in denen die <see cref="P:System.Xaml.XamlType.UnderlyingType" /> von der <see cref="T:System.Xaml.XamlType" /> ist <see langword="null" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetAddMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetAddMethod (System.Xaml.XamlType contentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetAddMethod(class System.Xaml.XamlType contentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAddMethod (contentType As XamlType) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetAddMethod(System::Xaml::XamlType ^ contentType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contentType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="contentType">
          <see cref="T:System.Xaml.XamlType" /> für den Elementtyp, der von der <see langword="Add" />-Methode verwendet wird.</param>
        <summary>Gibt die relevante <see langword="Add" />-Methode für ein <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />-Objekt zurück, das relevant für eine Auflistung oder ein Wörterbuch ist.</summary>
        <returns>CLR-bezogene <see cref="T:System.Reflection.MethodInfo" />-Informationen für die <see langword="Add" />-Methode oder NULL.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode sollte zurückgeben `null` für Fälle, in denen die <xref:System.Xaml.XamlType> für diesen <xref:System.Xaml.Schema.XamlTypeInvoker> ist nicht überschreibbare Auflistung oder ein Wörterbuch. Insbesondere sollten zurückgeben `null` für Fälle, in denen <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType> gibt `None`.  
  
> [!IMPORTANT]
>  Wenn Sie nicht auf ein voll vertrauenswürdiges XAML-Typsystem zugreifen, wird diese Methode hat die Möglichkeit, den Bericht "false" <xref:System.Reflection.MethodInfo> Informationen zu Aufrufern.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="contentType" /> ist <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Gibt die grundlegende Implementierung <see langword="null" /> für Fälle, in denen ein <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> basiert auf einem unbekannten <see cref="T:System.Xaml.XamlType" />, inklusive der Fälle, in denen die <see cref="P:System.Xaml.XamlType.UnderlyingType" /> von der <see cref="T:System.Xaml.XamlType" /> ist <see langword="null" />. Sie gibt überdies <see langword="null" /> Wenn <see cref="P:System.Xaml.XamlType.ItemType" /> ist <see langword="null" />.  
  
 XAML-Auflistungen haben möglicherweise mehrere <see langword="Add" /> -Methode, da eine XAML-Auflistung möglicherweise mehr als ein Inhaltstyp unterstützen (finden Sie unter <see cref="P:System.Xaml.XamlType.AllowedContentTypes" />, oder finden Sie unter <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> Informationen über eine Implementierung dieses Konzept in WPF). Die Standardimplementierung verwendet internen Logik, um die beste Übereinstimmung basierend auf den Signaturen und der Typ des angegebenen zurückzugeben <paramref name="contentType" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetEnumeratorMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetEnumeratorMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetEnumeratorMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumeratorMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetEnumeratorMethod();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt ein Objekt zurück, das eine Methode darstellt, die Enumerationen über Elemente ermöglicht.</summary>
        <returns>
          <see cref="T:System.Reflection.MethodInfo" /> für eine Enumeratormethode oder <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sollte zurückgeben `null` für Fälle, in denen <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType> gibt `None`.  
  
> [!IMPORTANT]
>  Wenn Sie nicht auf ein voll vertrauenswürdiges XAML-Typsystem zugreifen, wird diese Methode hat die Möglichkeit, den Bericht "false" <xref:System.Reflection.MethodInfo> Informationen zu Aufrufern.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Die grundlegende Implementierung ruft eine interne Hilfsmethode. Dieses Hilfsprogramm gibt <see langword="null" /> für Fälle, in denen ein <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> basiert auf einem unbekannten <see cref="T:System.Xaml.XamlType" />, inklusive der Fälle, in denen die <see cref="P:System.Xaml.XamlType.UnderlyingType" /> von der <see cref="T:System.Xaml.XamlType" /> ist <see langword="null" />. Sie gibt überdies <see langword="null" /> für Fälle, in denen <see cref="M:System.Xaml.XamlType.LookupCollectionKind" /> gibt <see langword="None" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetItems">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetItems (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetItems(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItems (instance As Object) As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetItems(System::Object ^ instance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">Eine Instanz des Typs, der von dem für die Erstellung dieses <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> verwendeten <see cref="T:System.Xaml.XamlType" /> angegeben wird.</param>
        <summary>Gibt ein <see cref="T:System.Collections.IEnumerator" />-Objekt zurück, das den Satz der Elemente darstellt.</summary>
        <returns>Ein <see cref="T:System.Collections.IEnumerator" />-Objekt oder <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">Diese Methode wurde für einen <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> aufgerufen, der auf einem unbekannten <see cref="T:System.Xaml.XamlType" /> basiert.  
  
 **-oder-**  
  
 Rief diese Methode für ein <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> auf, wobei der relevante Typ keine Auflistung bzw. kein Wörterbuch darstellt.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="instance" /> ist <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Die grundlegende Implementierung enthält einen Aufruf an die interne Hilfsmethode <c>ThrowIfUnknown</c>. Dieses Hilfsprogramm löst immer für Fälle, in denen ein <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> basiert auf einem unbekannten <see cref="T:System.Xaml.XamlType" />, inklusive der Fälle, in denen die <see cref="P:System.Xaml.XamlType.UnderlyingType" /> von der <see cref="T:System.Xaml.XamlType" /> ist <see langword="null" />.  
  
 Die grundlegende Implementierung nicht notwendigerweise verwendet eine eigene <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> Implementierung. Zuerst wird eine Umwandlung von <paramref name="instance" /> auf <see cref="T:System.Collections.IEnumerable" /> versucht wird. Wenn dies erfolgreich ist, einen Aufruf von <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> erfolgt und die Methode gibt zurück, der Wert zurückgeben. Andernfalls verwendet die grundlegende Implementierung CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> zum Aufrufen des zugrunde liegenden <see langword="GetEnumerator" /> -Methode, wie von einem Aufruf abgerufen <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> dafür <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SetMarkupExtensionHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetMarkupExtensionHandler As EventHandler(Of XamlSetMarkupExtensionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ SetMarkupExtensionHandler { EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den zu verwendenden Handler ab, wenn ein <see cref="T:System.Xaml.XamlObjectWriter" /> eine implementierte <see cref="T:System.Windows.Markup.MarkupExtension" /> aufruft.</summary>
        <value>Eine Handlerimplementierung, in der dieser Fall behandelt wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Ereignishandler basiert auf <xref:System.EventHandler%601> Zeilenumbruchalgorithmus <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> Ereignisdaten.  
  
 Der zurückgegebene Wert Ruft die <xref:System.Xaml.XamlType.LookupSetMarkupExtensionHandler%2A> Verhalten der <xref:System.Xaml.XamlType> , die die <xref:System.Xaml.Schema.XamlTypeInvoker> basiert auf.  
  
 Der Rückgabewert ist `null` für eine <xref:System.Xaml.Schema.XamlTypeInvoker> , basiert auf einem unbekannten <xref:System.Xaml.XamlType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTypeConverterHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetTypeConverterHandler As EventHandler(Of XamlSetTypeConverterEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ SetTypeConverterHandler { EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den zu verwendenden Handler ab, wenn ein <see cref="T:System.Xaml.XamlObjectWriter" />-Objekt einen Aufruf an ein CLR-implementiertes <see cref="T:System.ComponentModel.TypeConverter" />-Objekt richtet.</summary>
        <value>Eine Handlerimplementierung, in der dieser Fall behandelt wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Ereignishandler basiert auf <xref:System.EventHandler%601> Zeilenumbruchalgorithmus <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> Ereignisdaten.  
  
 Der zurückgegebene Wert Ruft die <xref:System.Xaml.XamlType.LookupSetTypeConverterHandler%2A> Verhalten der <xref:System.Xaml.XamlType> , die die <xref:System.Xaml.Schema.XamlTypeInvoker> basiert auf.  
  
 Der Rückgabewert ist `null` für eine <xref:System.Xaml.Schema.XamlTypeInvoker> , basiert auf einem unbekannten <xref:System.Xaml.XamlType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnknownInvoker">
      <MemberSignature Language="C#" Value="public static System.Xaml.Schema.XamlTypeInvoker UnknownInvoker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xaml.Schema.XamlTypeInvoker UnknownInvoker" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UnknownInvoker As XamlTypeInvoker" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xaml::Schema::XamlTypeInvoker ^ UnknownInvoker { System::Xaml::Schema::XamlTypeInvoker ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlTypeInvoker</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt einen statischen Wert bereit, der ein unbekanntes, nicht vollständig implementiertes <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />-Objekt darstellt.</summary>
        <value>Ein statischer Wert, der ein unbekanntes, nicht vollständig implementiertes <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />-Objekt darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Angabe dieses Werts für einen <xref:System.Xaml.Schema.XamlTypeInvoker> Parameter von "System.xaml" definierte API führt normalerweise dazu, dass den aufgerufenen Code zum Auslösen von Ausnahmen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
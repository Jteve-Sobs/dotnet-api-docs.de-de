<Type Name="InstancePersistenceContext" FullName="System.Runtime.DurableInstancing.InstancePersistenceContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="579ba64460ca67118646f05eb9bc78abf979aa34" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36635990" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class InstancePersistenceContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit InstancePersistenceContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.DurableInstancing.InstancePersistenceContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class InstancePersistenceContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class InstancePersistenceContext sealed" />
  <TypeSignature Language="F#" Value="type InstancePersistenceContext = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="80e93-101">Stellt Ausführungszustandsinformationen dar, während ein Dauerhaftigkeitsbefehl ausgeführt wird.</span>
      <span class="sxs-lookup">
        <span data-stu-id="80e93-101">Represents execution state information while a persistence command is being executed.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80e93-102">Eine Instanz dieser Klasse wird an die TryCommand-Methode der Persistenzanbieterimplementierungen übergeben.</span><span class="sxs-lookup"><span data-stu-id="80e93-102">An instance of this class is passed to the TryCommand method of persistence provider implementations.</span></span> <span data-ttu-id="80e93-103">Persistenzanbieter überprüfen mit dieser Klasse die speicherinterne Sicht der Instanz und geben die Ergebnisse der Vorgänge im externen Speicher an, die sich auf die Sicht oder anderen speicherinternen Kontext auswirken können.</span><span class="sxs-lookup"><span data-stu-id="80e93-103">Persistence providers use this class to inspect the in-memory view of the instance as well as indicate the results of operations on the external store which may affect the view or other in-memory context.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AssociatedInstanceKey">
      <MemberSignature Language="C#" Value="public void AssociatedInstanceKey (Guid key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssociatedInstanceKey(valuetype System.Guid key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.AssociatedInstanceKey(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssociatedInstanceKey (key As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssociatedInstanceKey(Guid key);" />
      <MemberSignature Language="F#" Value="member this.AssociatedInstanceKey : Guid -&gt; unit" Usage="instancePersistenceContext.AssociatedInstanceKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="80e93-104">Der Instanzschlüsselbezeichner für den zugeordneten Schlüssel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-104">The instance key identifier  for the key that has been associated.</span>
          </span>
          <span data-ttu-id="80e93-105">Darf nicht "Guid.Empty" sein.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-105">Must not be Guid.Empty.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80e93-106">Gibt an, dass der Persistenzanbieter der aktuellen Instanz im Instanzspeicher erfolgreich einen Schlüssel zugeordnet hat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-106">Indicates that the persistence provider has successfully associated a key to the current instance in the instance store.</span>
          </span>
          <span data-ttu-id="80e93-107">Der Bezeichner des Schlüssels wird als Parameter angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-107">The identifier of the key is specified as a parameter.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80e93-108">Die Zuordnung des Instanzschlüssels muss aufgehoben werden.</span><span class="sxs-lookup"><span data-stu-id="80e93-108">The instance key must be unassociated.</span></span> <span data-ttu-id="80e93-109">Das aktuelle Instanzhandle muss an eine Instanz sowie an eine Sperre für diese Instanz gebunden werden.</span><span class="sxs-lookup"><span data-stu-id="80e93-109">The current instance handle must be bound to an instance as well as a lock on that instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginBindReclaimedLock">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginBindReclaimedLock (long instanceVersion, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginBindReclaimedLock(int64 instanceVersion, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.BeginBindReclaimedLock(System.Int64,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginBindReclaimedLock (instanceVersion As Long, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginBindReclaimedLock(long instanceVersion, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginBindReclaimedLock : int64 * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="instancePersistenceContext.BeginBindReclaimedLock (instanceVersion, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceVersion" Type="System.Int64" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceVersion">
          <span data-ttu-id="80e93-110">Die Version der Sperre, die für die Instanz gehalten wird, oder 0 (null), wenn der Persistenzanbieter keine Sperrversionen implementiert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-110">The version of the lock held on the instance, or zero if the persistence provider does not implement lock versions.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="80e93-111">Das Zeitlimit für den asynchronen Vorgang.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-111">The timeout period for the asynchronous operation.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="80e93-112">Die Methode, die aufgerufen werden soll, wenn der Vorgang abgeschlossen ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-112">The method to be called when the operation is completed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="80e93-113">Die dem asynchronen Vorgang zugeordneten Statusinformationen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-113">The state information associated with the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80e93-114">Beginnen einen asynchronen Vorgang, um eine vorhandene Sperre auf einer Instanz an das aktuelle Instanzhandle zu binden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-114">Begin an asynchronous operation to bind an existing lock on an instance to the current instance handle.</span>
          </span>
          <span data-ttu-id="80e93-115">Die Version der vorhandenen Sperre wird als Parameter übergeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-115">The version of the existing lock is passed as a parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="80e93-116">Der Status eines asynchronen Vorgangs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-116">The status of an asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80e93-117">Beim Versuch, eine Sperre festzulegen, kann der Persistenzanbieter entscheiden, dass die aktuelle Instanz bereits im aktuellen Speicher gesperrt ist.</span><span class="sxs-lookup"><span data-stu-id="80e93-117">When attempting to acquire a lock, the persistence provider may decide that the current instance is already locked in the current store.</span></span> <span data-ttu-id="80e93-118">Wenn das Sperrtoken mit dem Sperrtoken des aktuellen Handles übereinstimmt, kann der Persistenzanbieter versuchen, die Sperre freizugeben, indem er die Version überprüft und an BeginBindReclaimedLock übergibt.</span><span class="sxs-lookup"><span data-stu-id="80e93-118">If the lock token matches the current handle’s lock token, then the persistence provider can attempt to reclaim the lock by inspecting its version and passing it to BeginBindReclaimedLock.</span></span> <span data-ttu-id="80e93-119">Der Persistenzanbieter darf erst Änderungen an der Instanz vornehmen, wenn die Sperre erfolgreich freigegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="80e93-119">The persistence provider must not make changes to the instance until the lock is successfully reclaimed.</span></span> <span data-ttu-id="80e93-120">Wenn kein anderes Handle an die Sperre gebunden ist, ist der BeginBindReclaimedLock-Vorgang erfolgreich, und das aktuelle Handle wird an die Sperre gebunden.</span><span class="sxs-lookup"><span data-stu-id="80e93-120">If no other handle is bound to the lock, then the BeginBindReclaimedLock operation succeeds and the current handle becomes bound to the lock.</span></span> <span data-ttu-id="80e93-121">Andernfalls löst BeginBindReclaimedLock oder EndBindReclaimedLock die Ausnahme InstanceHandleConflictException aus.</span><span class="sxs-lookup"><span data-stu-id="80e93-121">Otherwise, BeginBindReclaimedLock or EndBindReclaimedLock throws InstanceHandleConflictException.</span></span> <span data-ttu-id="80e93-122">Wenn Befehle für andere Handles in Bearbeitung sind, wird der Vorgang möglicherweise nicht abgeschlossen, um auf das Ergebnis dieser Befehle zu warten, bevor über die Freigabe der Sperre entschieden wird.</span><span class="sxs-lookup"><span data-stu-id="80e93-122">If commands are in progress on other handles, the operation may not complete while waiting for the outcome of those commands to decide whether the lock can be reclaimed.</span></span>  
  
 <span data-ttu-id="80e93-123">Das aktuelle Instanzhandle muss an einen Instanz- und einen Sperrbesitzer gebunden sein.</span><span class="sxs-lookup"><span data-stu-id="80e93-123">The current instance handle must be bound to an instance and a lock owner.</span></span> <span data-ttu-id="80e93-124">Die Instanz darf nicht abgeschlossen sein.</span><span class="sxs-lookup"><span data-stu-id="80e93-124">The instance must not be completed.</span></span> <span data-ttu-id="80e93-125">Das dem Sperrbesitzer zugeordnete Sperrtoken wird verwendet, um den Besitzer der Sperre zu identifizieren.</span><span class="sxs-lookup"><span data-stu-id="80e93-125">The lock token associated with the lock owner is used to identify the owner of the lock.</span></span>  
  
 <span data-ttu-id="80e93-126">Sobald eine Sperre an ein Handle gebunden wird, bleibt diese für die Lebensdauer des Handles gebunden.</span><span class="sxs-lookup"><span data-stu-id="80e93-126">Once a lock is bound to a handle, it remains bound for the lifetime of the handle.</span></span> <span data-ttu-id="80e93-127">Weder das Sperrtoken noch die Instanzversion kann geändert werden.</span><span class="sxs-lookup"><span data-stu-id="80e93-127">Neither the lock token nor the instance version can be changed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginExecute">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecute (System.Runtime.DurableInstancing.InstancePersistenceCommand command, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecute(class System.Runtime.DurableInstancing.InstancePersistenceCommand command, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.BeginExecute(System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginExecute (command As InstancePersistenceCommand, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginExecute(System::Runtime::DurableInstancing::InstancePersistenceCommand ^ command, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginExecute : System.Runtime.DurableInstancing.InstancePersistenceCommand * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="instancePersistenceContext.BeginExecute (command, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Runtime.DurableInstancing.InstancePersistenceCommand" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="command">
          <span data-ttu-id="80e93-128">Der Dauerhaftigkeitsbefehl, der ausgeführt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-128">The persistence command to be executed.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="80e93-129">Der Timeoutwert für den Vorgang.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-129">The time-out value for the operation.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="80e93-130">Der Delegat, der die Benachrichtigung vom asynchronen Empfangsvorgang darüber empfängt, dass ein Anforderungsvorgang abgeschlossen wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-130">The delegate that receives the notification of the asynchronous receive that a request operation completes.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="80e93-131">Die Statusinformationen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-131">The state information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80e93-132">Beginnt mit der asychronen Ausführung eines Dauerhaftigkeitsbefehls.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-132">Begins executing a persistence command asynchronously.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="80e93-133">Der Status eines asynchronen Vorgangs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-133">The status of an asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80e93-134">Ein Persistenzanbieter kann mithilfe dieser Methode untergeordnete Befehle als Teil eines Befehls ausführen.</span><span class="sxs-lookup"><span data-stu-id="80e93-134">A persistence provider can use this method to execute sub-commands as part of a command.</span></span> <span data-ttu-id="80e93-135">Der Unterbefehl wird mit BeginTryCommand ausgeführt, ähnlich wie bei Befehlen, die an InstanceStore.BeginExecute übergeben werden.</span><span class="sxs-lookup"><span data-stu-id="80e93-135">The sub-command will be executed using BeginTryCommand, similar to commands passed to InstanceStore.BeginExecute.</span></span> <span data-ttu-id="80e93-136">Befehle können geschachtelt werden, ein Befehl darf jedoch nicht mehrere Unterbefehle gleichzeitig ausführen.</span><span class="sxs-lookup"><span data-stu-id="80e93-136">Commands can be nested, but a command must not execute more than one sub-command at a time.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindAcquiredLock">
      <MemberSignature Language="C#" Value="public void BindAcquiredLock (long instanceVersion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BindAcquiredLock(int64 instanceVersion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.BindAcquiredLock(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BindAcquiredLock (instanceVersion As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BindAcquiredLock(long instanceVersion);" />
      <MemberSignature Language="F#" Value="member this.BindAcquiredLock : int64 -&gt; unit" Usage="instancePersistenceContext.BindAcquiredLock instanceVersion" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceVersion" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="instanceVersion">
          <span data-ttu-id="80e93-137">Version der Sperre, die für die Instanz festgelegt wurde, oder 0 (null), wenn der Persistenzanbieter keine Sperrversionen implementiert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-137">Version of the lock acquired on the instance, or zero if the persistence provider does not implement lock versions.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80e93-138">Bindet eine neu festgelegte Sperre für eine Instanz an das aktuelle Instanzhandle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-138">Binds a newly acquired lock on an instance to the current instance handle.</span>
          </span>
          <span data-ttu-id="80e93-139">Die Version der festgelegten Sperre wird als Parameter übergeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-139">The version of the acquired lock is passed as a parameter.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80e93-140">Wenn ein Persistenzanbieter die Sperrversionsverwaltung implementiert, muss die Version jedes Mal von einer Version im externen Speicher inkrementiert werden, wenn eine Sperre für die Instanz festgelegt wird.</span><span class="sxs-lookup"><span data-stu-id="80e93-140">If a persistence provider implements lock versioning, then each time a lock is acquired on the instance, the version must be incremented by one in the external store.</span></span> <span data-ttu-id="80e93-141">Das erste Mal, wenn die Instanz gesperrt wird, sollte die Version 1 sein.</span><span class="sxs-lookup"><span data-stu-id="80e93-141">The first time the instance is locked, the version should be 1.</span></span> <span data-ttu-id="80e93-142">Jede Sperrdefinition macht die vorherige Sperre ungültig.</span><span class="sxs-lookup"><span data-stu-id="80e93-142">Each lock acquisition invalidates the previous lock.</span></span> <span data-ttu-id="80e93-143">Das aktuelle Instanzhandle muss an einen Instanz- und einen Sperrbesitzer gebunden sein.</span><span class="sxs-lookup"><span data-stu-id="80e93-143">The current instance handle must be bound to an instance and a lock owner.</span></span> <span data-ttu-id="80e93-144">Die Instanz darf nicht abgeschlossen sein.</span><span class="sxs-lookup"><span data-stu-id="80e93-144">The instance must not be completed.</span></span> <span data-ttu-id="80e93-145">Das dem Sperrbesitzer zugeordnete Sperrtoken wird verwendet, um den Besitzer der Sperre zu identifizieren.</span><span class="sxs-lookup"><span data-stu-id="80e93-145">The lock token associated with the lock owner is used to identify the owner of the lock</span></span>  
  
 <span data-ttu-id="80e93-146">Sobald eine Sperre an ein Handle gebunden wird, bleibt diese für die Lebensdauer des Handles gebunden.</span><span class="sxs-lookup"><span data-stu-id="80e93-146">Once a lock is bound to a handle, it remains bound for the lifetime of the handle.</span></span> <span data-ttu-id="80e93-147">Weder das Sperrtoken noch die Instanzversion kann geändert werden.</span><span class="sxs-lookup"><span data-stu-id="80e93-147">Neither the lock token nor the instance version can be changed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindEvent">
      <MemberSignature Language="C#" Value="public void BindEvent (System.Runtime.DurableInstancing.InstancePersistenceEvent persistenceEvent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BindEvent(class System.Runtime.DurableInstancing.InstancePersistenceEvent persistenceEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.BindEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BindEvent (persistenceEvent As InstancePersistenceEvent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BindEvent(System::Runtime::DurableInstancing::InstancePersistenceEvent ^ persistenceEvent);" />
      <MemberSignature Language="F#" Value="member this.BindEvent : System.Runtime.DurableInstancing.InstancePersistenceEvent -&gt; unit" Usage="instancePersistenceContext.BindEvent persistenceEvent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="persistenceEvent" Type="System.Runtime.DurableInstancing.InstancePersistenceEvent" />
      </Parameters>
      <Docs>
        <param name="persistenceEvent">
          <span data-ttu-id="80e93-148">Ein <see cref="T:System.Runtime.DurableInstancing.InstancePersistenceEvent" />-Objekt, das Informationen zum Ereignis enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-148">An <see cref="T:System.Runtime.DurableInstancing.InstancePersistenceEvent" /> object containing information about the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80e93-149">Bindet ein <see cref="T:System.Runtime.DurableInstancing.InstancePersistenceEvent" /> an einen Instanzhandle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-149">Binds an <see cref="T:System.Runtime.DurableInstancing.InstancePersistenceEvent" /> to an instance handle.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindInstance">
      <MemberSignature Language="C#" Value="public void BindInstance (Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BindInstance(valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.BindInstance(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BindInstance (instanceId As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BindInstance(Guid instanceId);" />
      <MemberSignature Language="F#" Value="member this.BindInstance : Guid -&gt; unit" Usage="instancePersistenceContext.BindInstance instanceId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="instanceId">
          <span data-ttu-id="80e93-150">Ein Instanzbezeichner.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-150">An instance identifier.</span>
          </span>
          <span data-ttu-id="80e93-151">Darf nicht "Guid.Empty" sein.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-151">Must not be Guid.Empty.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80e93-152">Bindet eine Instanz, deren Bezeichner als Parameter für das aktuelle Instanzhandle festgelegt ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-152">Binds an instance whose identifier is specified as a parameter to the current instance handle.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80e93-153">Sobald eine Instanz an ein Handle gebunden wird, bleibt diese für die Lebensdauer des Handles gebunden.</span><span class="sxs-lookup"><span data-stu-id="80e93-153">Once an instance is bound to a handle, it remains bound for the lifetime of the handle.</span></span> <span data-ttu-id="80e93-154">An das Handle kann keine andere Instanz mehr gebunden werden.</span><span class="sxs-lookup"><span data-stu-id="80e93-154">No other instance can ever be bound to the handle.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindInstanceOwner">
      <MemberSignature Language="C#" Value="public void BindInstanceOwner (Guid instanceOwnerId, Guid lockToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BindInstanceOwner(valuetype System.Guid instanceOwnerId, valuetype System.Guid lockToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.BindInstanceOwner(System.Guid,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BindInstanceOwner (instanceOwnerId As Guid, lockToken As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BindInstanceOwner(Guid instanceOwnerId, Guid lockToken);" />
      <MemberSignature Language="F#" Value="member this.BindInstanceOwner : Guid * Guid -&gt; unit" Usage="instancePersistenceContext.BindInstanceOwner (instanceOwnerId, lockToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceOwnerId" Type="System.Guid" />
        <Parameter Name="lockToken" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="instanceOwnerId">
          <span data-ttu-id="80e93-155">Der Bezeichner für den Instanzbesitzer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-155">The identifier for the instance owner.</span>
          </span>
        </param>
        <param name="lockToken">
          <span data-ttu-id="80e93-156">Das Sperrtoken des Instanzbesitzers.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-156">The lock token of the instance owner.</span>
          </span>
          <span data-ttu-id="80e93-157">Ein Persistenzanbieter kann den gleichen Wert für den Bezeichner des Instanzbesitzers und das Sperrtoken des Besitzers auswählen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-157">A persistence provider may choose to use the same value for the instance owner identifier and the owner’s lock token.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80e93-158">Bindet einen Instanzbesitzer an das aktuelle Instanzhandle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-158">Binds an instance owner to the current instance handle.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80e93-159">Sobald ein Instanzbesitzer an ein Handle gebunden wird, bleibt dieser für die Lebensdauer des Handles gebunden.</span><span class="sxs-lookup"><span data-stu-id="80e93-159">Once an instance owner is bound to a handle, it remains bound for the lifetime of the handle.</span></span> <span data-ttu-id="80e93-160">An das Handle kann kein anderer Instanzbesitzer mehr gebunden werden.</span><span class="sxs-lookup"><span data-stu-id="80e93-160">No other instance owner can ever be bound to the handle.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindReclaimedLock">
      <MemberSignature Language="C#" Value="public void BindReclaimedLock (long instanceVersion, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BindReclaimedLock(int64 instanceVersion, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.BindReclaimedLock(System.Int64,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BindReclaimedLock (instanceVersion As Long, timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BindReclaimedLock(long instanceVersion, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.BindReclaimedLock : int64 * TimeSpan -&gt; unit" Usage="instancePersistenceContext.BindReclaimedLock (instanceVersion, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceVersion" Type="System.Int64" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="instanceVersion">
          <span data-ttu-id="80e93-161">Version der Sperre, die für die Instanz gehalten wird, oder 0 (null), wenn der Persistenzanbieter keine Sperrversionen implementiert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-161">Version of the lock held on the instance, or zero if the persistence provider does not implement lock versions.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="80e93-162">Der Timeoutwert für den Vorgang.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-162">The time-out value for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80e93-163">Bindet eine vorhandene Sperre auf einer Instanz an das aktuelle Instanzhandle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-163">Binds an existing lock on an instance to the current instance handle.</span>
          </span>
          <span data-ttu-id="80e93-164">Die Version der vorhandenen Sperre wird als Parameter übergeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-164">The version of the existing lock is passed as a parameter.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80e93-165">Beim Versuch, eine Sperre festzulegen, kann der Persistenzanbieter entscheiden, dass die aktuelle Instanz bereits im aktuellen Speicher gesperrt ist.</span><span class="sxs-lookup"><span data-stu-id="80e93-165">When attempting to acquire a lock, the persistence provider may decide that the current instance is already locked in the current store.</span></span> <span data-ttu-id="80e93-166">Wenn das Sperrtoken mit dem Sperrtoken des aktuellen Handles übereinstimmt, kann der Persistenzanbieter versuchen, die Sperre erneut freizugeben, indem er die Version überprüft und an BindReclaimedLock übergibt.</span><span class="sxs-lookup"><span data-stu-id="80e93-166">If the lock token matches the current handle’s lock token, then the persistence provider can attempt to reclaim the lock by inspecting its version and passing it to BindReclaimedLock.</span></span> <span data-ttu-id="80e93-167">Der Persistenzanbieter darf erst Änderungen an der Instanz vornehmen, wenn die Sperre erfolgreich freigegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="80e93-167">The persistence provider must not make changes to the instance until the lock is successfully reclaimed.</span></span> <span data-ttu-id="80e93-168">Wenn kein anderes Handle an die Sperre gebunden ist, kann BindReclaimedLock erfolgreich ausgeführt werden, und das aktuelle Handle wird an die Sperre gebunden.</span><span class="sxs-lookup"><span data-stu-id="80e93-168">If no other handle is bound to the lock, then BindReclaimedLock succeeds and the current handle becomes bound to the lock.</span></span> <span data-ttu-id="80e93-169">Andernfalls löst BindReclaimedLock die Ausnahme InstanceHandleConflictException aus.</span><span class="sxs-lookup"><span data-stu-id="80e93-169">Otherwise, BindReclaimedLock throws InstanceHandleConflictException.</span></span> <span data-ttu-id="80e93-170">Wenn Befehle auf anderen Handles ausgeführt werden, blockiert BindReclaimedLock möglicherweise, um auf das Ergebnis dieser Befehle zu warten, bevor über die Freigabe der Sperre entschieden wird.</span><span class="sxs-lookup"><span data-stu-id="80e93-170">If commands are in progress on other handles, BindReclaimedLock may block waiting for the outcome of those commands before deciding whether the lock can be reclaimed.</span></span>  
  
 <span data-ttu-id="80e93-171">Das aktuelle Instanzhandle muss an einen Instanz- und einen Sperrbesitzer gebunden sein.</span><span class="sxs-lookup"><span data-stu-id="80e93-171">The current instance handle must be bound to an instance and a lock owner.</span></span> <span data-ttu-id="80e93-172">Die Instanz darf nicht abgeschlossen sein.</span><span class="sxs-lookup"><span data-stu-id="80e93-172">The instance must not be completed.</span></span> <span data-ttu-id="80e93-173">Das dem Sperrbesitzer zugeordnete Sperrtoken wird verwendet, um den Besitzer der Sperre zu identifizieren.</span><span class="sxs-lookup"><span data-stu-id="80e93-173">The lock token associated with the lock owner is used to identify the owner of the lock.</span></span>  
  
 <span data-ttu-id="80e93-174">Sobald eine Sperre an ein Handle gebunden wird, bleibt diese für die Lebensdauer des Handles gebunden.</span><span class="sxs-lookup"><span data-stu-id="80e93-174">Once a lock is bound to a handle, it remains bound for the lifetime of the handle.</span></span> <span data-ttu-id="80e93-175">Weder das Sperrtoken noch die Instanzversion kann geändert werden.</span><span class="sxs-lookup"><span data-stu-id="80e93-175">Neither the lock token nor the instance version can be changed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompletedInstance">
      <MemberSignature Language="C#" Value="public void CompletedInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CompletedInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.CompletedInstance" />
      <MemberSignature Language="VB.NET" Value="Public Sub CompletedInstance ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CompletedInstance();" />
      <MemberSignature Language="F#" Value="member this.CompletedInstance : unit -&gt; unit" Usage="instancePersistenceContext.CompletedInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="80e93-176">Gibt an, dass der Persistenzanbieter die aktuelle Instanz im Instanzspeicher erfolgreich als vollständig gekennzeichnet hat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-176">Indicates that the persistence provider has successfully marked the current instance as complete in the instance store.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80e93-177">Das aktuelle Instanzhandle muss an eine Instanz sowie an eine Sperre für diese Instanz gebunden werden.</span><span class="sxs-lookup"><span data-stu-id="80e93-177">The current instance handle must be bound to an instance as well as a lock on that instance.</span></span> <span data-ttu-id="80e93-178">Die Instanz muss initialisiert werden und darf nicht bereits abgeschlossen sein.</span><span class="sxs-lookup"><span data-stu-id="80e93-178">The instance must be initialized and not be already completed.</span></span> <span data-ttu-id="80e93-179">(Eine Instanz wird initialisiert, wenn jemals ein Satz von Instanzdaten für sie beibehalten wurde.) Alle der Instanz zugeordneten Schlüssel müssen abgeschlossen sein.</span><span class="sxs-lookup"><span data-stu-id="80e93-179">(An instance is initialized if a set of instance data has ever been persisted to it.) All of the keys associated to the instance must be completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompletedInstanceKey">
      <MemberSignature Language="C#" Value="public void CompletedInstanceKey (Guid key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CompletedInstanceKey(valuetype System.Guid key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.CompletedInstanceKey(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CompletedInstanceKey (key As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CompletedInstanceKey(Guid key);" />
      <MemberSignature Language="F#" Value="member this.CompletedInstanceKey : Guid -&gt; unit" Usage="instancePersistenceContext.CompletedInstanceKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="80e93-180">Der Instanzschlüsselbezeichner für den Schlüssel, der abgeschlossen wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-180">The instance key identifier for the key that has been completed.</span>
          </span>
          <span data-ttu-id="80e93-181">Darf nicht "Guid.Empty" sein.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-181">Must not be Guid.Empty.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80e93-182">Gibt an, dass der Persistenzanbieter einen Schlüssel im externen Speicher erfolgreich als vollständig gekennzeichnet hat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-182">Indicates that the persistence provider has successfully marked a key as complete in the external store.</span>
          </span>
          <span data-ttu-id="80e93-183">Der Bezeichner des Schlüssels wird als Parameter angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-183">The identifier of the key is specified as a parameter.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80e93-184">Das aktuelle Instanzhandle muss an eine Instanz sowie an eine Sperre für diese Instanz gebunden werden.</span><span class="sxs-lookup"><span data-stu-id="80e93-184">The current instance handle must be bound to an instance as well as a lock on that instance.</span></span> <span data-ttu-id="80e93-185">Der Instanzschlüssel muss der aktuellen Instanz zugeordnet werden und darf nicht bereits abgeschlossen sein.</span><span class="sxs-lookup"><span data-stu-id="80e93-185">The instance key must be associated to the current instance and not be already completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateBindReclaimedLockException">
      <MemberSignature Language="C#" Value="public Exception CreateBindReclaimedLockException (long instanceVersion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Exception CreateBindReclaimedLockException(int64 instanceVersion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.CreateBindReclaimedLockException(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateBindReclaimedLockException (instanceVersion As Long) As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception ^ CreateBindReclaimedLockException(long instanceVersion);" />
      <MemberSignature Language="F#" Value="member this.CreateBindReclaimedLockException : int64 -&gt; Exception" Usage="instancePersistenceContext.CreateBindReclaimedLockException instanceVersion" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceVersion" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="instanceVersion">
          <span data-ttu-id="80e93-186">Die Version der Sperre, die für die Instanz gehalten wird, oder 0 (null), wenn der Persistenzanbieter keine Sperrversionen implementiert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-186">The version of the lock held on the instance, or zero if the persistence provider does not implement lock versions.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80e93-187">Erstellt eine Instanz einer Ausnahme, die von TryCommand ausgelöst werden kann, um das BindReclaimedLock-Verhalten auszulösen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-187">Creates an instance of an exception which can be thrown from TryCommand to trigger BindReclaimedLock behavior.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="80e93-188">Eine Ausnahme.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-188">An exception.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80e93-189">Beispielcode:</span><span class="sxs-lookup"><span data-stu-id="80e93-189">Sample code:</span></span>  
  
```  
  
protected override bool TryCommand(InstancePersistenceContext context, InstancePersistenceCommand command, TimeSpan timeout)  
{  
    throw context.CreateBindReclaimedLockException(5);  
}  
is equivalent to  
protected override bool TryCommand(InstancePersistenceContext context, InstancePersistenceCommand command, TimeSpan timeout)  
{  
    context.BindReclaimedLock(5, timeout);  
    throw new OperationCanceledException();  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndBindReclaimedLock">
      <MemberSignature Language="C#" Value="public void EndBindReclaimedLock (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndBindReclaimedLock(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.EndBindReclaimedLock(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndBindReclaimedLock (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndBindReclaimedLock(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndBindReclaimedLock : IAsyncResult -&gt; unit" Usage="instancePersistenceContext.EndBindReclaimedLock result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">
          <span data-ttu-id="80e93-190">Das Ergebnis des asynchronen Vorgangs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-190">The result of the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80e93-191">Beendet den von der <see cref="M:System.Runtime.DurableInstancing.InstancePersistenceContext.BeginBindReclaimedLock(System.Int64,System.TimeSpan,System.AsyncCallback,System.Object)" />-Methode gestarteten asynchronen Vorgang.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-191">Ends the asynchronous operation started by the <see cref="M:System.Runtime.DurableInstancing.InstancePersistenceContext.BeginBindReclaimedLock(System.Int64,System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndExecute">
      <MemberSignature Language="C#" Value="public void EndExecute (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndExecute(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.EndExecute(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndExecute (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndExecute(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndExecute : IAsyncResult -&gt; unit" Usage="instancePersistenceContext.EndExecute result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">
          <span data-ttu-id="80e93-192">Der Status eines asynchronen Vorgangs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-192">The status of an asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80e93-193">Beendet den asynchronen Vorgang.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-193">Ends the asynchronous operation.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (System.Runtime.DurableInstancing.InstancePersistenceCommand command, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(class System.Runtime.DurableInstancing.InstancePersistenceCommand command, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.Execute(System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (command As InstancePersistenceCommand, timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::Runtime::DurableInstancing::InstancePersistenceCommand ^ command, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Execute : System.Runtime.DurableInstancing.InstancePersistenceCommand * TimeSpan -&gt; unit" Usage="instancePersistenceContext.Execute (command, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Runtime.DurableInstancing.InstancePersistenceCommand" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="command">
          <span data-ttu-id="80e93-194">Der Dauerhaftigkeitsbefehl, der ausgeführt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-194">The persistence command to be executed.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="80e93-195">Der Timeoutwert für den Vorgang.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-195">The time-out value for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80e93-196">Führt einen Dauerhaftigkeitsbefehl aus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-196">Executes a persistence command.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80e93-197">Ein Persistenzanbieter kann mithilfe dieser Methode untergeordnete Befehle als Teil eines Befehls ausführen.</span><span class="sxs-lookup"><span data-stu-id="80e93-197">A persistence provider can use this method to execute sub-commands as part of a command.</span></span> <span data-ttu-id="80e93-198">Der Unterbefehl wird mit TryCommand ausgeführt, ähnlich wie bei Befehlen, die an InstanceStore.Execute übergeben werden.</span><span class="sxs-lookup"><span data-stu-id="80e93-198">The sub-command will be executed using TryCommand, similar to commands passed to InstanceStore.Execute.</span></span> <span data-ttu-id="80e93-199">Befehle können geschachtelt werden, ein Befehl darf jedoch nicht mehrere Unterbefehle gleichzeitig ausführen.</span><span class="sxs-lookup"><span data-stu-id="80e93-199">Commands can be nested, but a command must not execute more than one sub-command at a time.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InstanceHandle">
      <MemberSignature Language="C#" Value="public System.Runtime.DurableInstancing.InstanceHandle InstanceHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.DurableInstancing.InstanceHandle InstanceHandle" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InstanceHandle As InstanceHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::DurableInstancing::InstanceHandle ^ InstanceHandle { System::Runtime::DurableInstancing::InstanceHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InstanceHandle : System.Runtime.DurableInstancing.InstanceHandle" Usage="System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.DurableInstancing.InstanceHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="80e93-200">Ruft das aktuelle Instanzhandle ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-200">Gets the current instance handle.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="80e93-201">Das aktuelle Instanzhandle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-201">The current instance handle.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InstanceVersion">
      <MemberSignature Language="C#" Value="public long InstanceVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 InstanceVersion" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceVersion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InstanceVersion As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long InstanceVersion { long get(); };" />
      <MemberSignature Language="F#" Value="member this.InstanceVersion : int64" Usage="System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="80e93-202">Ruft die Version der Sperre ab, die auf der aktuellen Instanz durch das aktuelle Instanzhandle gehalten wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-202">Gets the version of the lock held on the current instance by the current instance handle.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="80e93-203">Die Version der Instanzsperre, die an das aktuelle Instanzhandle gebunden ist, oder -1, wenn das Handle nicht an eine Sperre gebunden ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-203">The version of the instance lock bound to the current instance handle, or -1 if the handle isn’t bound to a lock.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80e93-204">Der Persistenzanbieter sollte diesen Wert mit der Version der Sperre vergleichen, die für eine Instanz im Instanzspeicher gilt, wenn ein Vorgang, der eine Sperre erfordert (z. B. das Beibehalten von Instanzdaten) mithilfe eines an die Sperre gebundenen Handles ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="80e93-204">The persistence provider should check this value against the lock version of the lock held on an instance in the instance store when performing an operation that requires a lock (such as persisting instance data) using a handle bound to the lock.</span></span> <span data-ttu-id="80e93-205">Wenn die Sperrversionen nicht übereinstimmen, sollte der Befehl mit InstanceLockLostException fehlschlagen.</span><span class="sxs-lookup"><span data-stu-id="80e93-205">If the lock version doesn’t match, the command should fail with InstanceLockLostException.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InstanceView">
      <MemberSignature Language="C#" Value="public System.Runtime.DurableInstancing.InstanceView InstanceView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.DurableInstancing.InstanceView InstanceView" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceView" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InstanceView As InstanceView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::DurableInstancing::InstanceView ^ InstanceView { System::Runtime::DurableInstancing::InstanceView ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InstanceView : System.Runtime.DurableInstancing.InstanceView" Usage="System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.DurableInstancing.InstanceView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="80e93-206">Ruft das Instanzansichtsobjekt ab, das den speicherinternen Zustand der aktuellen Instanz darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-206">Gets the instance view object that represents the in-memory state of the current instance.</span>
          </span>
          <span data-ttu-id="80e93-207">Diese Sicht zeigt die Updates an, die durch den jeweilig ausgeführten Befehl durchgeführt werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-207">This view reflects updates as they are made by the command in progress.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="80e93-208">Das Instanzansichtsobjekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-208">The instance view object.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadedInstance">
      <MemberSignature Language="C#" Value="public void LoadedInstance (System.Runtime.DurableInstancing.InstanceState state, System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt; instanceData, System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt; instanceMetadata, System.Collections.Generic.IDictionary&lt;Guid,System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt;&gt; associatedInstanceKeyMetadata, System.Collections.Generic.IDictionary&lt;Guid,System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt;&gt; completedInstanceKeyMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadedInstance(valuetype System.Runtime.DurableInstancing.InstanceState state, class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, class System.Runtime.DurableInstancing.InstanceValue&gt; instanceData, class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, class System.Runtime.DurableInstancing.InstanceValue&gt; instanceMetadata, class System.Collections.Generic.IDictionary`2&lt;valuetype System.Guid, class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, class System.Runtime.DurableInstancing.InstanceValue&gt;&gt; associatedInstanceKeyMetadata, class System.Collections.Generic.IDictionary`2&lt;valuetype System.Guid, class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, class System.Runtime.DurableInstancing.InstanceValue&gt;&gt; completedInstanceKeyMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.LoadedInstance(System.Runtime.DurableInstancing.InstanceState,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Collections.Generic.IDictionary{System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue}},System.Collections.Generic.IDictionary{System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadedInstance (state As InstanceState, instanceData As IDictionary(Of XName, InstanceValue), instanceMetadata As IDictionary(Of XName, InstanceValue), associatedInstanceKeyMetadata As IDictionary(Of Guid, IDictionary(Of XName, InstanceValue)), completedInstanceKeyMetadata As IDictionary(Of Guid, IDictionary(Of XName, InstanceValue)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadedInstance(System::Runtime::DurableInstancing::InstanceState state, System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Runtime::DurableInstancing::InstanceValue ^&gt; ^ instanceData, System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Runtime::DurableInstancing::InstanceValue ^&gt; ^ instanceMetadata, System::Collections::Generic::IDictionary&lt;Guid, System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Runtime::DurableInstancing::InstanceValue ^&gt; ^&gt; ^ associatedInstanceKeyMetadata, System::Collections::Generic::IDictionary&lt;Guid, System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Runtime::DurableInstancing::InstanceValue ^&gt; ^&gt; ^ completedInstanceKeyMetadata);" />
      <MemberSignature Language="F#" Value="member this.LoadedInstance : System.Runtime.DurableInstancing.InstanceState * System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, System.Runtime.DurableInstancing.InstanceValue&gt; * System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, System.Runtime.DurableInstancing.InstanceValue&gt; * System.Collections.Generic.IDictionary&lt;Guid, System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, System.Runtime.DurableInstancing.InstanceValue&gt;&gt; * System.Collections.Generic.IDictionary&lt;Guid, System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, System.Runtime.DurableInstancing.InstanceValue&gt;&gt; -&gt; unit" Usage="instancePersistenceContext.LoadedInstance (state, instanceData, instanceMetadata, associatedInstanceKeyMetadata, completedInstanceKeyMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Runtime.DurableInstancing.InstanceState" />
        <Parameter Name="instanceData" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt;" />
        <Parameter Name="instanceMetadata" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt;" />
        <Parameter Name="associatedInstanceKeyMetadata" Type="System.Collections.Generic.IDictionary&lt;System.Guid,System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt;&gt;" />
        <Parameter Name="completedInstanceKeyMetadata" Type="System.Collections.Generic.IDictionary&lt;System.Guid,System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="state">
          <span data-ttu-id="80e93-209">Die Instanzstatusinformationen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-209">The instance state information.</span>
          </span>
        </param>
        <param name="instanceData">
          <span data-ttu-id="80e93-210">Die Instanzdaten als Wörterbuch mit <see cref="T:System.Xml.Linq.XName" />- und <see cref="T:System.Runtime.DurableInstancing.InstanceValue" />-Objekten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-210">The instance data as a dictionary of <see cref="T:System.Xml.Linq.XName" /> and <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> objects.</span>
          </span>
        </param>
        <param name="instanceMetadata">
          <span data-ttu-id="80e93-211">Instanzmetadaten als Auflistung von <see cref="T:System.Xml.Linq.XName" />- und <see cref="T:System.Runtime.DurableInstancing.InstanceValue" />-Objekten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-211">Instance metadata as a collection of <see cref="T:System.Xml.Linq.XName" /> and <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> objects.</span>
          </span>
        </param>
        <param name="associatedInstanceKeyMetadata">
          <span data-ttu-id="80e93-212">Zugeordnete Instanzschlüsselmetadaten als Wörterbuch mit Instanzbezeichner- und Instanzschlüsselmetadaten, also ein Wörterbuch mit <see cref="T:System.Xml.Linq.XName" />- und <see cref="T:System.Runtime.DurableInstancing.InstanceValue" />-Objekten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-212">Associated instance key metadata as a dictionary of instance identifier and instance key metadata, which is a dictionary of <see cref="T:System.Xml.Linq.XName" /> and <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> objects.</span>
          </span>
        </param>
        <param name="completedInstanceKeyMetadata">
          <span data-ttu-id="80e93-213">Abgeschlossene Instanzmetadaten als Wörterbuch mit Instanzbezeichner- und Instanzschlüsselmetadaten, also ein Wörterbuch mit <see cref="T:System.Xml.Linq.XName" />- und <see cref="T:System.Runtime.DurableInstancing.InstanceValue" />-Objekten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-213">Completed instance metadata as a dictionary of instance identifier and instance key metadata, which is a dictionary of <see cref="T:System.Xml.Linq.XName" /> and <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> objects.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80e93-214">Gibt an, dass der Persistenzanbieter erfolgreich die aktuelle Instanz aus dem Instanzspeicher abgerufen hat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-214">Indicates that the persistence provider has successfully retrieved the current instance from the instance store.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80e93-215">Das aktuelle Instanzhandle muss an eine Instanz gebunden sein.</span><span class="sxs-lookup"><span data-stu-id="80e93-215">The current instance handle must be bound to an instance.</span></span> <span data-ttu-id="80e93-216">Wenn das Instanzhandle an eine Sperre gebunden oder die geladene Instanz als vollständig markiert ist, werden die geladenen Daten als konsistent angesehen. Andernfalls wird dies angezweifelt.</span><span class="sxs-lookup"><span data-stu-id="80e93-216">If the instance handle is bound to a lock or the loaded instance is marked as complete, the loaded data is considered to be consistent; otherwise, it is considered to be in doubt.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LockToken">
      <MemberSignature Language="C#" Value="public Guid LockToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid LockToken" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.DurableInstancing.InstancePersistenceContext.LockToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LockToken As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid LockToken { Guid get(); };" />
      <MemberSignature Language="F#" Value="member this.LockToken : Guid" Usage="System.Runtime.DurableInstancing.InstancePersistenceContext.LockToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="80e93-217">Ruft das Sperrtoken des Instanzbesitzers ab, das an das aktuelle Instanzhandle gebunden ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-217">Gets the lock token of the instance owner bound to the current instance handle.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="80e93-218">Das Sperrtoken, das an das aktuelle Instanzhandle gebunden ist, oder Guid.Empty, wenn das Handle nicht an einen Instanzbesitzer gebunden ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-218">The lock token bound to the current instance handle, or Guid.Empty if the handle isn’t bound to an instance owner.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80e93-219">Der Persistenzanbieter sollte diesen Wert mit dem Sperrtoken der Sperre vergleichen, das für eine Instanz im Instanzspeicher gilt, wenn ein Vorgang, der eine Sperre erfordert (z. B. das Beibehalten von Instanzdaten) mithilfe eines an die Sperre gebundenen Handles ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="80e93-219">The persistence provider should check this value against the lock token of the lock held on an instance in the instance store when performing an operation that requires a lock (such as persisting instance data) using a handle bound to the lock.</span></span> <span data-ttu-id="80e93-220">Wenn das Sperrtoken nicht übereinstimmt, sollte der Befehl mit InstanceLockLostException fehlschlagen.</span><span class="sxs-lookup"><span data-stu-id="80e93-220">If the lock token doesn’t match, the command should fail with InstanceLockLostException.</span></span>  
  
 <span data-ttu-id="80e93-221">Der Persistenzanbieter sollte diesen Wert beim Festlegen einer neuen Sperre für eine Instanz als Sperrtoken verwenden (z. B. beim Beibehalten von Instanzdaten mithilfe eines Handles, das noch nicht an eine Sperre gebunden ist).</span><span class="sxs-lookup"><span data-stu-id="80e93-221">The persistence provider should use this value as the lock token when acquiring a new lock on an instance (such as persisting instance data using a handle not already bound to a lock).</span></span> <span data-ttu-id="80e93-222">Wenn die Instanz bereits im Instanzspeicher gesperrt ist, und das Sperrtoken mit diesem Sperrtoken übereinstimmt, kann der Persistenzanbieter versuchen, die Instanz mit BindReclaimedLock erneut freizugeben.</span><span class="sxs-lookup"><span data-stu-id="80e93-222">If the instance is already locked in the instance store and the lock token matches this lock token, the persistence provider can attempt to reclaim the instance using BindReclaimedLock.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PersistedInstance">
      <MemberSignature Language="C#" Value="public void PersistedInstance (System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt; data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PersistedInstance(class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, class System.Runtime.DurableInstancing.InstanceValue&gt; data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.PersistedInstance(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue})" />
      <MemberSignature Language="VB.NET" Value="Public Sub PersistedInstance (data As IDictionary(Of XName, InstanceValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PersistedInstance(System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Runtime::DurableInstancing::InstanceValue ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.PersistedInstance : System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, System.Runtime.DurableInstancing.InstanceValue&gt; -&gt; unit" Usage="instancePersistenceContext.PersistedInstance data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt;" />
      </Parameters>
      <Docs>
        <param name="data">
          <span data-ttu-id="80e93-223">Instanzdaten als Wörterbuch mit <see cref="T:System.Xml.Linq.XName" />- und <see cref="T:System.Runtime.DurableInstancing.InstanceValue" />-Objekten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-223">Instance data as a dictionary of <see cref="T:System.Xml.Linq.XName" /> and <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> objects.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80e93-224">Gibt an, dass der Persistenzanbieter erfolgreich ein Satz von Instanzdaten dauerhaft im Instanzspeicher gespeichert hat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-224">Indicates that the persistence provider has successfully persisted a set of instance data to the instance store.</span>
          </span>
          <span data-ttu-id="80e93-225">Dadurch wird die Instanz initialisiert, sofern dies noch nicht geschehen ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-225">This has the effect of initializing the instance if it wasn’t already.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80e93-226">Das aktuelle Instanzhandle muss an eine Instanz sowie an eine Sperre für diese Instanz gebunden werden.</span><span class="sxs-lookup"><span data-stu-id="80e93-226">The current instance handle must be bound to an instance as well as a lock on that instance.</span></span> <span data-ttu-id="80e93-227">Jeder Satz von Instanzdaten ersetzt den vorhergehenden Satz vollständig.</span><span class="sxs-lookup"><span data-stu-id="80e93-227">Each set of instance data completely replaces the previous set.</span></span> <span data-ttu-id="80e93-228">Der Satz von Instanzdaten ist möglicherweise NULL, es bedeutet das Gleiche wie leer.</span><span class="sxs-lookup"><span data-stu-id="80e93-228">The set of instance data may be null – this is the same as empty.</span></span> <span data-ttu-id="80e93-229">Das Speichern eines NULL-Satzes von Instanzdaten löscht den vorhandenen Satz von Instanzdaten.</span><span class="sxs-lookup"><span data-stu-id="80e93-229">Persisting a null set of instance data deletes the existing set of instance data.</span></span> <span data-ttu-id="80e93-230">(Das Speichern eines Satzes von Instanzdaten hat keine Auswirkungen auf die Instanzmetadaten.)</span><span class="sxs-lookup"><span data-stu-id="80e93-230">(Persisting a set of instance data has no effect on instance metadata.)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueriedInstanceStore">
      <MemberSignature Language="C#" Value="public void QueriedInstanceStore (System.Runtime.DurableInstancing.InstanceStoreQueryResult queryResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueriedInstanceStore(class System.Runtime.DurableInstancing.InstanceStoreQueryResult queryResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.QueriedInstanceStore(System.Runtime.DurableInstancing.InstanceStoreQueryResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub QueriedInstanceStore (queryResult As InstanceStoreQueryResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void QueriedInstanceStore(System::Runtime::DurableInstancing::InstanceStoreQueryResult ^ queryResult);" />
      <MemberSignature Language="F#" Value="member this.QueriedInstanceStore : System.Runtime.DurableInstancing.InstanceStoreQueryResult -&gt; unit" Usage="instancePersistenceContext.QueriedInstanceStore queryResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryResult" Type="System.Runtime.DurableInstancing.InstanceStoreQueryResult" />
      </Parameters>
      <Docs>
        <param name="queryResult">
          <span data-ttu-id="80e93-231">Die Ergebnisse einer Abfrage bei einem Instanzspeicher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-231">The results of a query against an instance store.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80e93-232">Fügt das als Parameter übergebene <see cref="T:System.Runtime.DurableInstancing.InstanceStoreQueryResult" /> einer Liste mit <see cref="T:System.Runtime.DurableInstancing.InstanceStoreQueryResult" />-Objekten in einer <see cref="T:System.Runtime.DurableInstancing.InstanceView" /> hinzu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-232">Adds the <see cref="T:System.Runtime.DurableInstancing.InstanceStoreQueryResult" /> passed as a parameter to a list of <see cref="T:System.Runtime.DurableInstancing.InstanceStoreQueryResult" /> objects in an <see cref="T:System.Runtime.DurableInstancing.InstanceView" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadInstanceKeyMetadata">
      <MemberSignature Language="C#" Value="public void ReadInstanceKeyMetadata (Guid key, System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt; metadata, bool complete);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadInstanceKeyMetadata(valuetype System.Guid key, class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, class System.Runtime.DurableInstancing.InstanceValue&gt; metadata, bool complete) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.ReadInstanceKeyMetadata(System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadInstanceKeyMetadata (key As Guid, metadata As IDictionary(Of XName, InstanceValue), complete As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadInstanceKeyMetadata(Guid key, System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Runtime::DurableInstancing::InstanceValue ^&gt; ^ metadata, bool complete);" />
      <MemberSignature Language="F#" Value="member this.ReadInstanceKeyMetadata : Guid * System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, System.Runtime.DurableInstancing.InstanceValue&gt; * bool -&gt; unit" Usage="instancePersistenceContext.ReadInstanceKeyMetadata (key, metadata, complete)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Guid" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt;" />
        <Parameter Name="complete" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="80e93-233">Der Instanzschlüsselbezeichner für den Schlüssel, dessen Metadaten gelesen wurden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-233">The instance key identifier for the key whose metadata was read.</span>
          </span>
          <span data-ttu-id="80e93-234">Darf nicht "Guid.Empty" sein.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-234">Must not be Guid.Empty.</span>
          </span>
        </param>
        <param name="metadata">
          <span data-ttu-id="80e93-235">Die Metadaten als Wörterbuch von <see cref="T:System.Xml.Linq.XName" />- und <see cref="T:System.Runtime.DurableInstancing.InstanceValue" />-Objekten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-235">The metadata as a dictionary of <see cref="T:System.Xml.Linq.XName" /> and <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> objects.</span>
          </span>
        </param>
        <param name="complete">
          <span data-ttu-id="80e93-236">
            <see langword="True" />, wenn die Metadaten alle Metadaten darstellen, die dem Instanzschlüssel zugeordnet sind, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-236">
              <see langword="True" /> if the metadata represents all of the metadata associated to the instance key, otherwise <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80e93-237">Gibt an, dass der Persistenzanbieter erfolgreich verschiedene Instanzschlüsselmetadaten für einen Schlüssel gelesen hat, der der aktuellen Instanz des Instanzspeichers zugeordnet ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-237">Indicates that the persistence provider has successfully read some instance key metadata for a key associated to the current instance from the instance store.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80e93-238">Das aktuelle Instanzhandle muss an eine Instanz gebunden sein.</span><span class="sxs-lookup"><span data-stu-id="80e93-238">The current instance handle must be bound to an instance.</span></span> <span data-ttu-id="80e93-239">Wenn das Instanzhandle an eine Sperre gebunden, oder die aktuelle Instanz als vollständig markiert ist, werden die Metadaten als konsistent angesehen. Andernfalls wird dies angezweifelt.</span><span class="sxs-lookup"><span data-stu-id="80e93-239">If the instance handle is bound to a lock or the current instance is marked as complete, the metadata is considered to be consistent; otherwise, it is considered to be in doubt.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadInstanceMetadata">
      <MemberSignature Language="C#" Value="public void ReadInstanceMetadata (System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt; metadata, bool complete);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadInstanceMetadata(class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, class System.Runtime.DurableInstancing.InstanceValue&gt; metadata, bool complete) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.ReadInstanceMetadata(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadInstanceMetadata (metadata As IDictionary(Of XName, InstanceValue), complete As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadInstanceMetadata(System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Runtime::DurableInstancing::InstanceValue ^&gt; ^ metadata, bool complete);" />
      <MemberSignature Language="F#" Value="member this.ReadInstanceMetadata : System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, System.Runtime.DurableInstancing.InstanceValue&gt; * bool -&gt; unit" Usage="instancePersistenceContext.ReadInstanceMetadata (metadata, complete)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt;" />
        <Parameter Name="complete" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="metadata">
          <span data-ttu-id="80e93-240">Die Metadaten als Wörterbuch von <see cref="T:System.Xml.Linq.XName" />- und <see cref="T:System.Runtime.DurableInstancing.InstanceValue" />-Objekten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-240">The metadata as a dictionary of <see cref="T:System.Xml.Linq.XName" /> and <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> objects.</span>
          </span>
        </param>
        <param name="complete">
          <span data-ttu-id="80e93-241">
            <see langword="True" />, wenn die Metadaten alle Metadaten darstellen, die der Instanz zugeordnet sind, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-241">
              <see langword="True" /> if the metadata represents all of the metadata associated to the instance, otherwise <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80e93-242">Gibt an, dass der Persistenzanbieter erfolgreich verschiedene Instanzmetadaten für die aktuelle Instanz des Instanzspeichers gelesen hat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-242">Indicates that the persistence provider has successfully read some instance metadata for the current instance from the instance store.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadInstanceOwnerMetadata">
      <MemberSignature Language="C#" Value="public void ReadInstanceOwnerMetadata (System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt; metadata, bool complete);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadInstanceOwnerMetadata(class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, class System.Runtime.DurableInstancing.InstanceValue&gt; metadata, bool complete) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.ReadInstanceOwnerMetadata(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadInstanceOwnerMetadata (metadata As IDictionary(Of XName, InstanceValue), complete As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadInstanceOwnerMetadata(System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Runtime::DurableInstancing::InstanceValue ^&gt; ^ metadata, bool complete);" />
      <MemberSignature Language="F#" Value="member this.ReadInstanceOwnerMetadata : System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, System.Runtime.DurableInstancing.InstanceValue&gt; * bool -&gt; unit" Usage="instancePersistenceContext.ReadInstanceOwnerMetadata (metadata, complete)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt;" />
        <Parameter Name="complete" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="metadata">
          <span data-ttu-id="80e93-243">Das Wörterbuch mit <see cref="T:System.Xml.Linq.XName" />- und <see cref="T:System.Runtime.DurableInstancing.InstanceValue" />-Objekten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-243">The dictionary of <see cref="T:System.Xml.Linq.XName" /> and <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> objects.</span>
          </span>
        </param>
        <param name="complete">
          <span data-ttu-id="80e93-244">Der Wert, mit dem angegeben wird, ob die Konsistenz auf <see cref="F:System.Runtime.DurableInstancing.InstanceValueConsistency.InDoubt" /> oder <see cref="F:System.Runtime.DurableInstancing.InstanceValueConsistency.Partial" /> festgelegt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-244">The value to specify whether the consistency to be set to <see cref="F:System.Runtime.DurableInstancing.InstanceValueConsistency.InDoubt" /> or <see cref="F:System.Runtime.DurableInstancing.InstanceValueConsistency.Partial" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80e93-245">Legt die Instanzbesitzermetadaten unter Verwendung der im Parameter übergebenen Daten fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-245">Sets the instance owner metadata using the data passed in the parameter.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80e93-246">Das aktuelle Instanzhandle muss an eine Instanz gebunden sein.</span><span class="sxs-lookup"><span data-stu-id="80e93-246">The current instance handle must be bound to an instance.</span></span> <span data-ttu-id="80e93-247">Wenn das Instanzhandle an eine Sperre gebunden, oder die aktuelle Instanz als vollständig markiert ist, werden die Metadaten als konsistent angesehen. Andernfalls wird dies angezweifelt.</span><span class="sxs-lookup"><span data-stu-id="80e93-247">If the instance handle is bound to a lock or the current instance is marked as complete, the metadata is considered to be consistent; otherwise, it is considered to be in doubt.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCancellationHandler">
      <MemberSignature Language="C#" Value="public void SetCancellationHandler (Action&lt;System.Runtime.DurableInstancing.InstancePersistenceContext&gt; cancellationHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCancellationHandler(class System.Action`1&lt;class System.Runtime.DurableInstancing.InstancePersistenceContext&gt; cancellationHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.SetCancellationHandler(System.Action{System.Runtime.DurableInstancing.InstancePersistenceContext})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCancellationHandler (cancellationHandler As Action(Of InstancePersistenceContext))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCancellationHandler(Action&lt;System::Runtime::DurableInstancing::InstancePersistenceContext ^&gt; ^ cancellationHandler);" />
      <MemberSignature Language="F#" Value="member this.SetCancellationHandler : Action&lt;System.Runtime.DurableInstancing.InstancePersistenceContext&gt; -&gt; unit" Usage="instancePersistenceContext.SetCancellationHandler cancellationHandler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationHandler" Type="System.Action&lt;System.Runtime.DurableInstancing.InstancePersistenceContext&gt;" />
      </Parameters>
      <Docs>
        <param name="cancellationHandler">
          <span data-ttu-id="80e93-248">Der Verweis auf eine Funktion, die aufgerufen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-248">The reference to a function to be called.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80e93-249">Legt den Abbruchhandler fest, der aufgerufen werden soll, wenn der Abbruch eines Vorgangs angefordert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-249">Sets the cancellation handler to be called when the cancel of an operation is requested.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80e93-250">Wenn der Abbruchhandler aufgerufen wird, sollte der Persistenzanbieter alle ausstehenden Vorgänge abbrechen und OperationCanceledException aus TryCommand auslösen, um anzugeben, dass der Persistenzbefehl unterbrochen wurde, bevor er abgeschlossen werden konnte.</span><span class="sxs-lookup"><span data-stu-id="80e93-250">If the cancellation handler is called, the persistence provider should cancel all pending operations and throw OperationCanceledException from TryCommand to indicate that the persistence command was interrupted before it could be completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnassociatedInstanceKey">
      <MemberSignature Language="C#" Value="public void UnassociatedInstanceKey (Guid key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnassociatedInstanceKey(valuetype System.Guid key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.UnassociatedInstanceKey(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnassociatedInstanceKey (key As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnassociatedInstanceKey(Guid key);" />
      <MemberSignature Language="F#" Value="member this.UnassociatedInstanceKey : Guid -&gt; unit" Usage="instancePersistenceContext.UnassociatedInstanceKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="80e93-251">Der Instanzschlüsselbezeichner für den Schlüssel, dessen Zuordnung aufgehoben wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-251">The instance key identifier for the key that has been unassociated.</span>
          </span>
          <span data-ttu-id="80e93-252">Darf nicht "Guid.Empty" sein.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-252">Must not be Guid.Empty.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80e93-253">Gibt an, dass der Persistenzanbieter erfolgreich die Zuordnung eines Schlüssels zur aktuellen Instanz im Instanzspeicher aufgehoben hat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-253">Indicates that the persistence provider has successfully disassociated a key from the current instance in the instance store.</span>
          </span>
          <span data-ttu-id="80e93-254">Der Bezeichner des Schlüssels wird als Parameter angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-254">The identifier of the key is specified as a parameter.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80e93-255">Das aktuelle Instanzhandle muss an eine Instanz sowie an eine Sperre für diese Instanz gebunden werden.</span><span class="sxs-lookup"><span data-stu-id="80e93-255">The current instance handle must be bound to an instance as well as a lock on that instance.</span></span> <span data-ttu-id="80e93-256">Der Instanzschlüssel muss der aktuellen Instanz zugeordnet werden und als vollständig gekennzeichnet sein.</span><span class="sxs-lookup"><span data-stu-id="80e93-256">The instance key must be associated to the current instance and must be marked complete.</span></span> <span data-ttu-id="80e93-257">Die aktuelle Instanz darf nicht als vollständig gekennzeichnet sein.</span><span class="sxs-lookup"><span data-stu-id="80e93-257">The current instance must not be marked complete.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserContext">
      <MemberSignature Language="C#" Value="public object UserContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserContext" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.DurableInstancing.InstancePersistenceContext.UserContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserContext As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UserContext { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserContext : obj" Usage="System.Runtime.DurableInstancing.InstancePersistenceContext.UserContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="80e93-258">Ruft die an das aktuelle Instanzhandle angefügten Benutzerkontextinformationen ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-258">Gets the user context information attached to the current instance handle.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="80e93-259">Die Benutzerkontextinformationen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-259">The user context information.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80e93-260">Das Objekt ist dasjenige, das von InstanceStore.OnNewInstanceHandle für das aktuelle Instanzhandle zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="80e93-260">The object is the one that is returned from InstanceStore.OnNewInstanceHandle for the current instance handle.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WroteInstanceKeyMetadataValue">
      <MemberSignature Language="C#" Value="public void WroteInstanceKeyMetadataValue (Guid key, System.Xml.Linq.XName name, System.Runtime.DurableInstancing.InstanceValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WroteInstanceKeyMetadataValue(valuetype System.Guid key, class System.Xml.Linq.XName name, class System.Runtime.DurableInstancing.InstanceValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.WroteInstanceKeyMetadataValue(System.Guid,System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WroteInstanceKeyMetadataValue (key As Guid, name As XName, value As InstanceValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WroteInstanceKeyMetadataValue(Guid key, System::Xml::Linq::XName ^ name, System::Runtime::DurableInstancing::InstanceValue ^ value);" />
      <MemberSignature Language="F#" Value="member this.WroteInstanceKeyMetadataValue : Guid * System.Xml.Linq.XName * System.Runtime.DurableInstancing.InstanceValue -&gt; unit" Usage="instancePersistenceContext.WroteInstanceKeyMetadataValue (key, name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Guid" />
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="value" Type="System.Runtime.DurableInstancing.InstanceValue" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="80e93-261">Der Instanzschlüsselbezeichner für den Schlüssel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-261">The instance key identifier for the key.</span>
          </span>
          <span data-ttu-id="80e93-262">Darf nicht "Guid.Empty" sein.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-262">Must not be Guid.Empty.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="80e93-263">Der Name der Metadateneigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-263">The name of the metadata property.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="80e93-264">Der Wert der Metadateneigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-264">The value of the metadata property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80e93-265">Gibt an, dass der Persistenzanbieter erfolgreich einen Metadatenwert für einen Instanzschlüssel geschrieben hat, der zusammen mit der aktuellen Instanz dem Instanzspeicher zugeordnet ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-265">Indicates that the persistence provider has successfully written a metadata value for an instance key that is associated with the current instance to the instance store</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80e93-266">Das aktuelle Instanzhandle muss an eine Instanz sowie an eine Sperre für diese Instanz gebunden werden.</span><span class="sxs-lookup"><span data-stu-id="80e93-266">The current instance handle must be bound to an instance as well as a lock on that instance.</span></span> <span data-ttu-id="80e93-267">Der Instanzschlüssel muss der aktuellen Instanz zugeordnet werden und darf nicht abgeschlossen sein.</span><span class="sxs-lookup"><span data-stu-id="80e93-267">The instance key must be associated with the current instance and must not be completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WroteInstanceMetadataValue">
      <MemberSignature Language="C#" Value="public void WroteInstanceMetadataValue (System.Xml.Linq.XName name, System.Runtime.DurableInstancing.InstanceValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WroteInstanceMetadataValue(class System.Xml.Linq.XName name, class System.Runtime.DurableInstancing.InstanceValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.WroteInstanceMetadataValue(System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WroteInstanceMetadataValue (name As XName, value As InstanceValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WroteInstanceMetadataValue(System::Xml::Linq::XName ^ name, System::Runtime::DurableInstancing::InstanceValue ^ value);" />
      <MemberSignature Language="F#" Value="member this.WroteInstanceMetadataValue : System.Xml.Linq.XName * System.Runtime.DurableInstancing.InstanceValue -&gt; unit" Usage="instancePersistenceContext.WroteInstanceMetadataValue (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="value" Type="System.Runtime.DurableInstancing.InstanceValue" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="80e93-268">Der Name der Metadateneigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-268">The name of the metadata property.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="80e93-269">Der Wert der Metadateneigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-269">The value of the metadata property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80e93-270">Gibt an, dass der Persistenzanbieter erfolgreich einen Metadatenwert für die aktuelle Instanz in den externen Instanzspeicher geschrieben hat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-270">Indicates that the persistence provider has successfully written a metadata value for the current instance to the external instance store.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80e93-271">Das aktuelle Instanzhandle muss an eine Instanz sowie an eine Sperre für diese Instanz gebunden werden.</span><span class="sxs-lookup"><span data-stu-id="80e93-271">The current instance handle must be bound to an instance as well as has a lock on that instance.</span></span> <span data-ttu-id="80e93-272">Die Instanz darf nicht abgeschlossen sein.</span><span class="sxs-lookup"><span data-stu-id="80e93-272">The instance must not be completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WroteInstanceOwnerMetadataValue">
      <MemberSignature Language="C#" Value="public void WroteInstanceOwnerMetadataValue (System.Xml.Linq.XName name, System.Runtime.DurableInstancing.InstanceValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WroteInstanceOwnerMetadataValue(class System.Xml.Linq.XName name, class System.Runtime.DurableInstancing.InstanceValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.WroteInstanceOwnerMetadataValue(System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WroteInstanceOwnerMetadataValue (name As XName, value As InstanceValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WroteInstanceOwnerMetadataValue(System::Xml::Linq::XName ^ name, System::Runtime::DurableInstancing::InstanceValue ^ value);" />
      <MemberSignature Language="F#" Value="member this.WroteInstanceOwnerMetadataValue : System.Xml.Linq.XName * System.Runtime.DurableInstancing.InstanceValue -&gt; unit" Usage="instancePersistenceContext.WroteInstanceOwnerMetadataValue (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="value" Type="System.Runtime.DurableInstancing.InstanceValue" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="80e93-273">Der Name der Metadateneigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-273">The name of the metadata property.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="80e93-274">Der Wert der Metadateneigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-274">The value of the metadata property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80e93-275">Gibt an, dass der Persistenzanbieter erfolgreich einen Metadatenwert für den aktuellen Instanzbesitzer in den Instanzspeicher geschrieben hat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80e93-275">Indicates that the persistence provider has successfully written a metadata value for the current instance owner to the instance store.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80e93-276">Das aktuelle Instanzhandle muss an einen Instanzbesitzer gebunden sein.</span><span class="sxs-lookup"><span data-stu-id="80e93-276">The current instance handle must be bound to an instance owner.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
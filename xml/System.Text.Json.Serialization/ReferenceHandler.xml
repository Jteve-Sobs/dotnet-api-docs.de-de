<Type Name="ReferenceHandler" FullName="System.Text.Json.Serialization.ReferenceHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bd7e6d59c801cb659a49bd17b94c26ac9914f84e" /><Meta Name="ms.sourcegitcommit" Value="11306e8bb61e44463a969897211724e18107ac96" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/12/2020" /><Meta Name="ms.locfileid" Value="88138011" /></Metadata><TypeSignature Language="C#" Value="public abstract class ReferenceHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ReferenceHandler extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Serialization.ReferenceHandler" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ReferenceHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class ReferenceHandler abstract" />
  <TypeSignature Language="F#" Value="type ReferenceHandler = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="c5507-101">Diese Klasse definiert, wie der <see cref="T:System.Text.Json.JsonSerializer" /> mit Verweisen auf Serialisierung und Deserialisierung umgeht.</span><span class="sxs-lookup"><span data-stu-id="c5507-101">This class defines how the <see cref="T:System.Text.Json.JsonSerializer" /> deals with references on serialization and deserialization.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ReferenceHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.ReferenceHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ReferenceHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateResolver">
      <MemberSignature Language="C#" Value="public abstract System.Text.Json.Serialization.ReferenceResolver CreateResolver ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Json.Serialization.ReferenceResolver CreateResolver() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.ReferenceHandler.CreateResolver" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateResolver () As ReferenceResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Text::Json::Serialization::ReferenceResolver ^ CreateResolver();" />
      <MemberSignature Language="F#" Value="abstract member CreateResolver : unit -&gt; System.Text.Json.Serialization.ReferenceResolver" Usage="referenceHandler.CreateResolver " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.Serialization.ReferenceResolver</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c5507-102">Gibt den für jeden Serialisierungsaufruf verwendeten <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> zurück.</span><span class="sxs-lookup"><span data-stu-id="c5507-102">Returns the <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> used for each serialization call.</span></span></summary>
        <returns><span data-ttu-id="c5507-103">Der Resolver, der für Serialisierung und Deserialisierung verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="c5507-103">The resolver to use for serialization and deserialization.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Preserve">
      <MemberSignature Language="C#" Value="public static System.Text.Json.Serialization.ReferenceHandler Preserve { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Json.Serialization.ReferenceHandler Preserve" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Serialization.ReferenceHandler.Preserve" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Preserve As ReferenceHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Json::Serialization::ReferenceHandler ^ Preserve { System::Text::Json::Serialization::ReferenceHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Preserve : System.Text.Json.Serialization.ReferenceHandler" Usage="System.Text.Json.Serialization.ReferenceHandler.Preserve" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.Serialization.ReferenceHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c5507-104">Metadateneigenschaften werden bei der Deserialisierung von JSON-Objekten und -Arrays in Verweistypen berücksichtigt und bei der Serialisierung von Verweistypen geschrieben.</span><span class="sxs-lookup"><span data-stu-id="c5507-104">Metadata properties will be honored when deserializing JSON objects and arrays into reference types and written when serializing reference types.</span></span> <span data-ttu-id="c5507-105">Dies ist notwendig, um aus Objekten mit Zyklen oder duplizierten Verweisen Roundtrip-fähigen JSON-Code zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="c5507-105">This is necessary to create round-trippable JSON from objects that contain cycles or duplicate references.</span></span></summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

* <span data-ttu-id="c5507-106">Beim Serialisieren:</span><span class="sxs-lookup"><span data-stu-id="c5507-106">On Serialize:</span></span>

  * <span data-ttu-id="c5507-107">Beim Schreiben komplexer Verweis Typen schreibt das Serialisierungsprogramm auch Metadateneigenschaften ( `$id` , `$values` und `$ref` ) darin.</span><span class="sxs-lookup"><span data-stu-id="c5507-107">When writing complex reference types, the serializer also writes metadata properties (`$id`, `$values`, and `$ref`) within them.</span></span>
  * <span data-ttu-id="c5507-108">Die JSON-Ausgabe enthält eine zusätzliche `$id` Eigenschaft für jedes Objekt, und für jeden Aufzähl Bare-Typ wird das ausgegebene JSON-Array in einem JSON-Objekt geschachtelt, das eine `$id` -Eigenschaft und eine- `$values` Eigenschaft enthält.</span><span class="sxs-lookup"><span data-stu-id="c5507-108">The output JSON will contain an extra `$id` property for every object, and for every enumerable type the JSON array emitted will be nested within a JSON object containing an `$id` and `$values` property.</span></span>
  * <span data-ttu-id="c5507-109"><xref:System.Object.ReferenceEquals(System.Object,System.Object)> wird verwendet, um zu bestimmen, ob-Objekte identisch sind.</span><span class="sxs-lookup"><span data-stu-id="c5507-109"><xref:System.Object.ReferenceEquals(System.Object,System.Object)> is used to determine whether objects are identical.</span></span>
  * <span data-ttu-id="c5507-110">Wenn ein Objekt mit einem zuvor serialisierten Objekt identisch ist, wird stattdessen ein Zeiger ( `$ref` ) auf den Bezeichner ( `$id` ) dieses Objekts geschrieben.</span><span class="sxs-lookup"><span data-stu-id="c5507-110">When an object is identical to a previously serialized one, a pointer (`$ref`) to the identifier (`$id`) of such object is written instead.</span></span>
  * <span data-ttu-id="c5507-111">Für Werttypen werden keine Metadateneigenschaften geschrieben.</span><span class="sxs-lookup"><span data-stu-id="c5507-111">No metadata properties are written for value types.</span></span>

* <span data-ttu-id="c5507-112">Beim Deserialisieren:</span><span class="sxs-lookup"><span data-stu-id="c5507-112">On Deserialize:</span></span>

  * <span data-ttu-id="c5507-113">Die Metadateneigenschaften in der JSON-Datei, die verwendet werden, um duplizierte Verweise und Zyklen beizubehalten, werden so lange berücksichtigt, wie Sie wohl geformt sind.\*</span><span class="sxs-lookup"><span data-stu-id="c5507-113">The metadata properties within the JSON that are used to preserve duplicated references and cycles will be honored as long as they are well-formed.\*</span></span>
  * <span data-ttu-id="c5507-114">Für JSON-Objekte, die keine Metadateneigenschaften enthalten, ist das Deserialisierungsverhalten identisch mit der Verwendung von `Preserve` .</span><span class="sxs-lookup"><span data-stu-id="c5507-114">For JSON objects that don't contain any metadata properties, the deserialization behavior is identical to not using `Preserve`.</span></span>
  * <span data-ttu-id="c5507-115">Für Werttypen `$id` wird die Metadata-Eigenschaft ignoriert.</span><span class="sxs-lookup"><span data-stu-id="c5507-115">For value types, the `$id` metadata property is ignored.</span></span> <span data-ttu-id="c5507-116">Eine <xref:System.Text.Json.JsonException> wird ausgelöst, wenn eine `$ref` Metadateneigenschaft im JSON-Objekt gefunden wird.</span><span class="sxs-lookup"><span data-stu-id="c5507-116">A <xref:System.Text.Json.JsonException> is thrown if a `$ref` metadata property is found within the JSON object.</span></span>
  * <span data-ttu-id="c5507-117">Für Aufzähl Bare-Werttypen `$values` wird die Metadata-Eigenschaft ignoriert.</span><span class="sxs-lookup"><span data-stu-id="c5507-117">For enumerable value types, the `$values` metadata property is ignored.</span></span>
 
<span data-ttu-id="c5507-118">\* Damit die Metadateneigenschaften in der JSON als wohl geformt angesehen werden, müssen Sie den folgenden Regeln entsprechen:</span><span class="sxs-lookup"><span data-stu-id="c5507-118">\* For the metadata properties within the JSON to be considered well-formed, they must follow these rules:</span></span>

* <span data-ttu-id="c5507-119">Die `$id` Metadata-Eigenschaft muss die erste Eigenschaft im JSON-Objekt sein.</span><span class="sxs-lookup"><span data-stu-id="c5507-119">The `$id` metadata property must be the first property in the JSON object.</span></span>
* <span data-ttu-id="c5507-120">Ein JSON-Objekt, das eine `$ref` Metadateneigenschaft enthält, darf keine anderen Eigenschaften enthalten.</span><span class="sxs-lookup"><span data-stu-id="c5507-120">A JSON object that contains a `$ref` metadata property must not contain any other properties.</span></span>
* <span data-ttu-id="c5507-121">Der Wert der `$ref` Metadata-Eigenschaft muss auf eine verweisen `$id` , die zuvor in der JSON-Datei aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="c5507-121">The value of the `$ref` metadata property must refer to an `$id` that has appeared earlier in the JSON.</span></span>
* <span data-ttu-id="c5507-122">Der Wert der `$id` `$ref` Metadateneigenschaften und muss eine JSON-Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="c5507-122">The value of the `$id` and `$ref` metadata properties must be a JSON string.</span></span>
* <span data-ttu-id="c5507-123">Für Aufzähl Bare-Typen, z <xref:System.Collections.Generic.List%601> . b., muss das JSON-Array innerhalb eines JSON-Objekts geschachtelt sein, das eine `$id` -und- `$values` Metadateneigenschaft in dieser Reihenfolge enthält.</span><span class="sxs-lookup"><span data-stu-id="c5507-123">For enumerable types, such as <xref:System.Collections.Generic.List%601>, the JSON array must be nested within a JSON object containing an `$id` and `$values` metadata property, in that order.</span></span>
* <span data-ttu-id="c5507-124">Für Aufzähl Bare-Typen `$values` muss die Metadata-Eigenschaft ein JSON-Array sein.</span><span class="sxs-lookup"><span data-stu-id="c5507-124">For enumerable types, the `$values` metadata property must be a JSON array.</span></span>
* <span data-ttu-id="c5507-125">Die `$values` Metadata-Eigenschaft ist nur gültig, wenn auf Aufzähl Bare-Typen verwiesen wird.</span><span class="sxs-lookup"><span data-stu-id="c5507-125">The `$values` metadata property is only valid when referring to enumerable types.</span></span>

<span data-ttu-id="c5507-126">Wenn das JSON-Format nicht wohl geformt ist, <xref:System.Text.Json.JsonException> wird eine ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="c5507-126">If the JSON is not well-formed, a <xref:System.Text.Json.JsonException> is thrown.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

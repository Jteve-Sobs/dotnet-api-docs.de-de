<Type Name="ReferenceHandler" FullName="System.Text.Json.Serialization.ReferenceHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bd7e6d59c801cb659a49bd17b94c26ac9914f84e" /><Meta Name="ms.sourcegitcommit" Value="11306e8bb61e44463a969897211724e18107ac96" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/12/2020" /><Meta Name="ms.locfileid" Value="88138011" /></Metadata><TypeSignature Language="C#" Value="public abstract class ReferenceHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ReferenceHandler extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Serialization.ReferenceHandler" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ReferenceHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class ReferenceHandler abstract" />
  <TypeSignature Language="F#" Value="type ReferenceHandler = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Diese Klasse definiert, wie der <see cref="T:System.Text.Json.JsonSerializer" /> mit Verweisen auf Serialisierung und Deserialisierung umgeht.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ReferenceHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.ReferenceHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ReferenceHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateResolver">
      <MemberSignature Language="C#" Value="public abstract System.Text.Json.Serialization.ReferenceResolver CreateResolver ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Json.Serialization.ReferenceResolver CreateResolver() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.ReferenceHandler.CreateResolver" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateResolver () As ReferenceResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Text::Json::Serialization::ReferenceResolver ^ CreateResolver();" />
      <MemberSignature Language="F#" Value="abstract member CreateResolver : unit -&gt; System.Text.Json.Serialization.ReferenceResolver" Usage="referenceHandler.CreateResolver " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.Serialization.ReferenceResolver</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt den für jeden Serialisierungsaufruf verwendeten <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> zurück.</summary>
        <returns>Der Resolver, der für Serialisierung und Deserialisierung verwendet werden soll.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Preserve">
      <MemberSignature Language="C#" Value="public static System.Text.Json.Serialization.ReferenceHandler Preserve { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Json.Serialization.ReferenceHandler Preserve" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Serialization.ReferenceHandler.Preserve" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Preserve As ReferenceHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Json::Serialization::ReferenceHandler ^ Preserve { System::Text::Json::Serialization::ReferenceHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Preserve : System.Text.Json.Serialization.ReferenceHandler" Usage="System.Text.Json.Serialization.ReferenceHandler.Preserve" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.Serialization.ReferenceHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Metadateneigenschaften werden bei der Deserialisierung von JSON-Objekten und -Arrays in Verweistypen berücksichtigt und bei der Serialisierung von Verweistypen geschrieben. Dies ist notwendig, um aus Objekten mit Zyklen oder duplizierten Verweisen Roundtrip-fähigen JSON-Code zu erstellen.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

* Beim Serialisieren:

  * Beim Schreiben komplexer Verweis Typen schreibt das Serialisierungsprogramm auch Metadateneigenschaften ( `$id` , `$values` und `$ref` ) darin.
  * Die JSON-Ausgabe enthält eine zusätzliche `$id` Eigenschaft für jedes Objekt, und für jeden Aufzähl Bare-Typ wird das ausgegebene JSON-Array in einem JSON-Objekt geschachtelt, das eine `$id` -Eigenschaft und eine- `$values` Eigenschaft enthält.
  * <xref:System.Object.ReferenceEquals(System.Object,System.Object)> wird verwendet, um zu bestimmen, ob-Objekte identisch sind.
  * Wenn ein Objekt mit einem zuvor serialisierten Objekt identisch ist, wird stattdessen ein Zeiger ( `$ref` ) auf den Bezeichner ( `$id` ) dieses Objekts geschrieben.
  * Für Werttypen werden keine Metadateneigenschaften geschrieben.

* Beim Deserialisieren:

  * Die Metadateneigenschaften in der JSON-Datei, die verwendet werden, um duplizierte Verweise und Zyklen beizubehalten, werden so lange berücksichtigt, wie Sie wohl geformt sind.\*
  * Für JSON-Objekte, die keine Metadateneigenschaften enthalten, ist das Deserialisierungsverhalten identisch mit der Verwendung von `Preserve` .
  * Für Werttypen `$id` wird die Metadata-Eigenschaft ignoriert. Eine <xref:System.Text.Json.JsonException> wird ausgelöst, wenn eine `$ref` Metadateneigenschaft im JSON-Objekt gefunden wird.
  * Für Aufzähl Bare-Werttypen `$values` wird die Metadata-Eigenschaft ignoriert.
 
\* Damit die Metadateneigenschaften in der JSON als wohl geformt angesehen werden, müssen Sie den folgenden Regeln entsprechen:

* Die `$id` Metadata-Eigenschaft muss die erste Eigenschaft im JSON-Objekt sein.
* Ein JSON-Objekt, das eine `$ref` Metadateneigenschaft enthält, darf keine anderen Eigenschaften enthalten.
* Der Wert der `$ref` Metadata-Eigenschaft muss auf eine verweisen `$id` , die zuvor in der JSON-Datei aufgetreten ist.
* Der Wert der `$id` `$ref` Metadateneigenschaften und muss eine JSON-Zeichenfolge sein.
* Für Aufzähl Bare-Typen, z <xref:System.Collections.Generic.List%601> . b., muss das JSON-Array innerhalb eines JSON-Objekts geschachtelt sein, das eine `$id` -und- `$values` Metadateneigenschaft in dieser Reihenfolge enthält.
* Für Aufzähl Bare-Typen `$values` muss die Metadata-Eigenschaft ein JSON-Array sein.
* Die `$values` Metadata-Eigenschaft ist nur gültig, wenn auf Aufzähl Bare-Typen verwiesen wird.

Wenn das JSON-Format nicht wohl geformt ist, <xref:System.Text.Json.JsonException> wird eine ausgelöst.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

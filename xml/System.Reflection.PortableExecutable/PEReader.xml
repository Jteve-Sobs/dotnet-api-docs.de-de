<Type Name="PEReader" FullName="System.Reflection.PortableExecutable.PEReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2de61d851dbddc8292f1c51902d490ae21e1a5b6" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82499646" /></Metadata><TypeSignature Language="C#" Value="public sealed class PEReader : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PEReader extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.PortableExecutable.PEReader" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PEReader&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class PEReader sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type PEReader = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Metadata</AssemblyName>
    <AssemblyVersion>1.0.22.0</AssemblyVersion>
    <AssemblyVersion>1.3.0.0</AssemblyVersion>
    <AssemblyVersion>1.4.1.0</AssemblyVersion>
    <AssemblyVersion>1.4.2.0</AssemblyVersion>
    <AssemblyVersion>1.4.3.0</AssemblyVersion>
    <AssemblyVersion>1.4.4.0</AssemblyVersion>
    <AssemblyVersion>1.4.5.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="8584e-101">Stellt einen Reader für portierbare ausführbare Dateien (PE) bereit.</span><span class="sxs-lookup"><span data-stu-id="8584e-101">Provides a reader for Portable Executable format (PE) files.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8584e-102">Die-Implementierung ist Thread sicher.</span><span class="sxs-lookup"><span data-stu-id="8584e-102">The implementation is thread-safe.</span></span> <span data-ttu-id="8584e-103">Das heißt, dass mehrere Threads Daten aus dem Reader parallel lesen können.</span><span class="sxs-lookup"><span data-stu-id="8584e-103">That is, multiple threads can read data from the reader in parallel.</span></span> <span data-ttu-id="8584e-104">Die Freigabe des Readers ist nicht Thread sicher (siehe <xref:System.Reflection.PortableExecutable.PEReader.Dispose>).</span><span class="sxs-lookup"><span data-stu-id="8584e-104">Disposal of the reader is not thread-safe (see <xref:System.Reflection.PortableExecutable.PEReader.Dispose>).</span></span>

          ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (System.Collections.Immutable.ImmutableArray&lt;byte&gt; peImage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Collections.Immutable.ImmutableArray`1&lt;unsigned int8&gt; peImage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.Collections.Immutable.ImmutableArray{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peImage As ImmutableArray(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::Collections::Immutable::ImmutableArray&lt;System::Byte&gt; peImage);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : System.Collections.Immutable.ImmutableArray&lt;byte&gt; -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader peImage" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peImage" Type="System.Collections.Immutable.ImmutableArray&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="peImage"><span data-ttu-id="8584e-105">Ein unveränderliches Bytearray, das das PE-Image darstellt.</span><span class="sxs-lookup"><span data-stu-id="8584e-105">An immutable array of bytes representing the PE image.</span></span></param>
        <summary><span data-ttu-id="8584e-106">Erstellt einen PE-Reader über ein PE-Image, das in einem Bytearray gespeichert ist.</span><span class="sxs-lookup"><span data-stu-id="8584e-106">Creates a Portable Executable reader over a PE image stored in a byte array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8584e-107">Der Inhalt des Bilds wird während der Erstellung des <xref:System.Reflection.PortableExecutable.PEReader> nicht gelesen</span><span class="sxs-lookup"><span data-stu-id="8584e-107">The content of the image is not read during the construction of the <xref:System.Reflection.PortableExecutable.PEReader></span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8584e-108"><paramref name="peImage" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8584e-108"><paramref name="peImage" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (System.IO.Stream peStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream peStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::IO::Stream ^ peStream);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : System.IO.Stream -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader peStream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="peStream"><span data-ttu-id="8584e-109">PE-Imagedatenstrom.</span><span class="sxs-lookup"><span data-stu-id="8584e-109">PE image stream.</span></span></param>
        <summary><span data-ttu-id="8584e-110">Erstellt einen PE-Reader über ein PE-Image, das in einem Datenstrom gespeichert ist.</span><span class="sxs-lookup"><span data-stu-id="8584e-110">Creates a Portable Executable reader over a PE image stored in a stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8584e-111">Der Besitz des Streams wird bei erfolgreicher Validierung der Konstruktorargumente an den <xref:System.Reflection.PortableExecutable.PEReader> übertragen.</span><span class="sxs-lookup"><span data-stu-id="8584e-111">Ownership of the stream is transferred to the <xref:System.Reflection.PortableExecutable.PEReader> upon successful validation of constructor arguments.</span></span> <span data-ttu-id="8584e-112">Sie wird vom <xref:System.Reflection.PortableExecutable.PEReader> verworfen, und der Aufrufer darf Sie nicht bearbeiten.</span><span class="sxs-lookup"><span data-stu-id="8584e-112">It will be disposed by the <xref:System.Reflection.PortableExecutable.PEReader> and the caller must not manipulate it.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8584e-113"><paramref name="peStream" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8584e-113"><paramref name="peStream" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (byte* peImage, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8* peImage, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::Byte* peImage, int size);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : nativeptr&lt;byte&gt; * int -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader (peImage, size)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peImage" Type="System.Byte*" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="peImage"><span data-ttu-id="8584e-114">Ein Zeiger auf den Anfang des PE-Image.</span><span class="sxs-lookup"><span data-stu-id="8584e-114">A pointer to the start of the PE image.</span></span></param>
        <param name="size"><span data-ttu-id="8584e-115">Die Größe des PE-Images.</span><span class="sxs-lookup"><span data-stu-id="8584e-115">The size of the PE image.</span></span></param>
        <summary><span data-ttu-id="8584e-116">Erstellt einen PE-Reader über ein PE-Image, das im Arbeitsspeicher gespeichert ist.</span><span class="sxs-lookup"><span data-stu-id="8584e-116">Creates a Portable Executable reader over a PE image stored in memory.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8584e-117">Der Arbeitsspeicher befindet sich im Besitz des Aufrufers und wird bei der <xref:System.Reflection.PortableExecutable.PEReader>nicht freigegeben.</span><span class="sxs-lookup"><span data-stu-id="8584e-117">The memory is owned by the caller and not released on disposal of the <xref:System.Reflection.PortableExecutable.PEReader>.</span></span> <span data-ttu-id="8584e-118">Der Aufrufer ist dafür verantwortlich, den Arbeitsspeicher während der gesamten Lebensdauer des <xref:System.Reflection.PortableExecutable.PEReader>in Betrieb zu nehmen.</span><span class="sxs-lookup"><span data-stu-id="8584e-118">The caller is responsible for keeping the memory alive and unmodified throughout the lifetime of the <xref:System.Reflection.PortableExecutable.PEReader>.</span></span>


<span data-ttu-id="8584e-119">Der Inhalt des Bilds wird während der Erstellung des <xref:System.Reflection.PortableExecutable.PEReader> nicht gelesen</span><span class="sxs-lookup"><span data-stu-id="8584e-119">The content of the image is not read during the construction of the <xref:System.Reflection.PortableExecutable.PEReader></span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8584e-120"><paramref name="peImage" /> ist <see cref="F:System.IntPtr.Zero" />.</span><span class="sxs-lookup"><span data-stu-id="8584e-120"><paramref name="peImage" /> is <see cref="F:System.IntPtr.Zero" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8584e-121"><paramref name="size" /> ist ein negativer Wert.</span><span class="sxs-lookup"><span data-stu-id="8584e-121"><paramref name="size" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (System.IO.Stream peStream, System.Reflection.PortableExecutable.PEStreamOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream peStream, valuetype System.Reflection.PortableExecutable.PEStreamOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peStream As Stream, options As PEStreamOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::IO::Stream ^ peStream, System::Reflection::PortableExecutable::PEStreamOptions options);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : System.IO.Stream * System.Reflection.PortableExecutable.PEStreamOptions -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader (peStream, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peStream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Reflection.PortableExecutable.PEStreamOptions" />
      </Parameters>
      <Docs>
        <param name="peStream"><span data-ttu-id="8584e-122">Ein PE-Imagedatenstrom.</span><span class="sxs-lookup"><span data-stu-id="8584e-122">A PE image stream.</span></span></param>
        <param name="options"><span data-ttu-id="8584e-123">Optionen, die angeben, wie Abschnitte des PE-Image aus dem Datenstrom gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="8584e-123">Options specifying how sections of the PE image are read from the stream.</span></span></param>
        <summary><span data-ttu-id="8584e-124">Erstellt einen PE-Reader über ein PE-Image, das in einem Datenstrom gespeichert ist. Der Anfang liegt dabei bei der aktuellen Position, das Ende am Ende des Datenstroms.</span><span class="sxs-lookup"><span data-stu-id="8584e-124">Creates a Portable Executable reader over a PE image stored in a stream beginning at its current position and ending at the end of the stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 
<span data-ttu-id="8584e-125">Sofern <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> nicht angegeben ist, wird der Besitz des Streams bei erfolgreicher Argument Überprüfung an die <xref:System.Reflection.PortableExecutable.PEReader> übertragen.</span><span class="sxs-lookup"><span data-stu-id="8584e-125">Unless <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> is specified, ownership of the stream is transferred to the <xref:System.Reflection.PortableExecutable.PEReader> upon successful argument validation.</span></span> <span data-ttu-id="8584e-126">Sie wird vom <xref:System.Reflection.PortableExecutable.PEReader> verworfen, und der Aufrufer darf Sie nicht bearbeiten.</span><span class="sxs-lookup"><span data-stu-id="8584e-126">It will be disposed by the <xref:System.Reflection.PortableExecutable.PEReader> and the caller must not manipulate it.</span></span>
 
<span data-ttu-id="8584e-127">Wenn <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> oder <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType> nicht angegeben wird, werden während der Erstellung des <xref:System.Reflection.PortableExecutable.PEReader>keine Daten aus dem Stream gelesen.</span><span class="sxs-lookup"><span data-stu-id="8584e-127">Unless <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> or <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType> is specified, no data is read from the stream during the construction of the <xref:System.Reflection.PortableExecutable.PEReader>.</span></span> <span data-ttu-id="8584e-128">Darüber hinaus darf der Stream nicht vom Aufrufer manipuliert werden, während der <xref:System.Reflection.PortableExecutable.PEReader> aktiv ist und nicht verworfen wird.</span><span class="sxs-lookup"><span data-stu-id="8584e-128">Furthermore, the stream must not be manipulated by caller while the <xref:System.Reflection.PortableExecutable.PEReader> is alive and undisposed.</span></span>
 
<span data-ttu-id="8584e-129">Wenn `options` <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> oder <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType>umfasst, hat der <xref:System.Reflection.PortableExecutable.PEReader> alle während der Erstellung angeforderten Daten gelesen.</span><span class="sxs-lookup"><span data-stu-id="8584e-129">If `options` includes <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> or <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType>, the <xref:System.Reflection.PortableExecutable.PEReader> will have read all of the data requested during construction.</span></span> <span data-ttu-id="8584e-130">Wenn <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> ebenfalls angegeben wird, behält der Aufrufer den vollständigen Besitz des Streams bei und ist sicher, dass er nach der Erstellung nicht von der <xref:System.Reflection.PortableExecutable.PEReader> manipuliert wird.</span><span class="sxs-lookup"><span data-stu-id="8584e-130">As such, if <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> is also specified, the caller retains full ownership of the stream and is assured that it will not be manipulated by the <xref:System.Reflection.PortableExecutable.PEReader> after construction.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8584e-131"><paramref name="peStream" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8584e-131"><paramref name="peStream" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8584e-132"><paramref name="options" /> besitzt einen ungültigen Wert.</span><span class="sxs-lookup"><span data-stu-id="8584e-132"><paramref name="options" /> has an invalid value.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8584e-133">Fehler beim Lesen aus dem Datenstrom (nur beim Vorabrufen von Daten).</span><span class="sxs-lookup"><span data-stu-id="8584e-133">Error reading from the stream (only when prefetching data).</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="8584e-134"><see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata" /> wird angegeben, und die PE-Header des Image sind ungültig.</span><span class="sxs-lookup"><span data-stu-id="8584e-134"><see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata" /> is specified, and the PE headers of the image are invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (byte* peImage, int size, bool isLoadedImage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8* peImage, int32 size, bool isLoadedImage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.Byte*,System.Int32,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::Byte* peImage, int size, bool isLoadedImage);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : nativeptr&lt;byte&gt; * int * bool -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader (peImage, size, isLoadedImage)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peImage" Type="System.Byte*" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="size" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="isLoadedImage" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="peImage"><span data-ttu-id="8584e-135">Ein Zeiger auf den Anfang des PE-Image.</span><span class="sxs-lookup"><span data-stu-id="8584e-135">A pointer to the start of the PE image.</span></span></param>
        <param name="size"><span data-ttu-id="8584e-136">Die Größe des PE-Images.</span><span class="sxs-lookup"><span data-stu-id="8584e-136">The size of the PE image.</span></span></param>
        <param name="isLoadedImage"><span data-ttu-id="8584e-137"><see langword="true" />, wenn das PE-Image durch das Betriebssystem-Ladeprogramm in den Arbeitsspeicher geladen wurde. Andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8584e-137"><see langword="true" /> if the PE image has been loaded into memory by the OS loader; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="8584e-138">Erstellt einen PE-Reader über ein PE-Image, das im Arbeitsspeicher gespeichert ist.</span><span class="sxs-lookup"><span data-stu-id="8584e-138">Creates a Portable Executable reader over a PE image stored in memory.</span></span> <span data-ttu-id="8584e-139">Ein Kennzeichen gibt an, ob das Image bereits in den Arbeitsspeicher geladen wurde.</span><span class="sxs-lookup"><span data-stu-id="8584e-139">A flag indicates whether the image has already been loaded into memory.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8584e-140">Der Arbeitsspeicher befindet sich im Besitz des Aufrufers und wird nicht freigegeben, wenn die <xref:System.Reflection.PortableExecutable.PEReader> verworfen wird.</span><span class="sxs-lookup"><span data-stu-id="8584e-140">The memory is owned by the caller and is not released when the <xref:System.Reflection.PortableExecutable.PEReader> is disposed.</span></span> <span data-ttu-id="8584e-141">Der Aufrufer ist dafür verantwortlich, den Arbeitsspeicher während der gesamten Lebensdauer des <xref:System.Reflection.PortableExecutable.PEReader>in Betrieb zu nehmen.</span><span class="sxs-lookup"><span data-stu-id="8584e-141">The caller is responsible for keeping the memory alive and unmodified throughout the lifetime of the <xref:System.Reflection.PortableExecutable.PEReader>.</span></span>


<span data-ttu-id="8584e-142">Der Inhalt des Bilds wird während der Erstellung des <xref:System.Reflection.PortableExecutable.PEReader> nicht gelesen</span><span class="sxs-lookup"><span data-stu-id="8584e-142">The content of the image is not read during the construction of the <xref:System.Reflection.PortableExecutable.PEReader></span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8584e-143"><paramref name="peImage" /> ist <see cref="F:System.IntPtr.Zero" />.</span><span class="sxs-lookup"><span data-stu-id="8584e-143"><paramref name="peImage" /> is <see cref="F:System.IntPtr.Zero" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8584e-144"><paramref name="size" /> ist ein negativer Wert.</span><span class="sxs-lookup"><span data-stu-id="8584e-144"><paramref name="size" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (System.IO.Stream peStream, System.Reflection.PortableExecutable.PEStreamOptions options, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream peStream, valuetype System.Reflection.PortableExecutable.PEStreamOptions options, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peStream As Stream, options As PEStreamOptions, size As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::IO::Stream ^ peStream, System::Reflection::PortableExecutable::PEStreamOptions options, int size);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : System.IO.Stream * System.Reflection.PortableExecutable.PEStreamOptions * int -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader (peStream, options, size)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peStream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Reflection.PortableExecutable.PEStreamOptions" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="peStream"><span data-ttu-id="8584e-145">Ein PE-Imagedatenstrom.</span><span class="sxs-lookup"><span data-stu-id="8584e-145">A PE image stream.</span></span></param>
        <param name="options"><span data-ttu-id="8584e-146">Optionen, die angeben, wie Abschnitte des PE-Image aus dem Datenstrom gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="8584e-146">Options specifying how sections of the PE image are read from the stream.</span></span></param>
        <param name="size"><span data-ttu-id="8584e-147">Die Größe des PE-Image.</span><span class="sxs-lookup"><span data-stu-id="8584e-147">The PE image size.</span></span></param>
        <summary><span data-ttu-id="8584e-148">Erstellt einen PE-Reader über ein PE-Image der angegebenen Größe. Der Anfang liegt dabei bei der aktuellen Position des Datenstroms.</span><span class="sxs-lookup"><span data-stu-id="8584e-148">Creates a Portable Executable reader over a PE image of the given size beginning at the stream's current position.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8584e-149">Sofern <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> nicht angegeben ist, wird der Besitz des Streams bei erfolgreicher Argument Überprüfung an die <xref:System.Reflection.PortableExecutable.PEReader> übertragen.</span><span class="sxs-lookup"><span data-stu-id="8584e-149">Unless <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> is specified, ownership of the stream is transferred to the <xref:System.Reflection.PortableExecutable.PEReader> upon successful argument validation.</span></span> <span data-ttu-id="8584e-150">Sie wird vom <xref:System.Reflection.PortableExecutable.PEReader>verworfen, und der Aufrufer darf Sie nicht bearbeiten.</span><span class="sxs-lookup"><span data-stu-id="8584e-150">It will be disposed by the <xref:System.Reflection.PortableExecutable.PEReader>, and the caller must not manipulate it.</span></span>
 
<span data-ttu-id="8584e-151">Wenn <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> oder <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType> nicht angegeben wird, werden während der Erstellung des <xref:System.Reflection.PortableExecutable.PEReader>keine Daten aus dem Stream gelesen.</span><span class="sxs-lookup"><span data-stu-id="8584e-151">Unless <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> or <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType> is specified, no data is read from the stream during the construction of the <xref:System.Reflection.PortableExecutable.PEReader>.</span></span> <span data-ttu-id="8584e-152">Darüber hinaus darf der Stream nicht vom Aufrufer bearbeitet werden, während die <xref:System.Reflection.PortableExecutable.PEReader> aktiv und verworfen wird.</span><span class="sxs-lookup"><span data-stu-id="8584e-152">Furthermore, the stream must not be manipulated by the caller while the <xref:System.Reflection.PortableExecutable.PEReader> is alive and undisposed.</span></span>
 
<span data-ttu-id="8584e-153">Wenn `options` die <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType>-oder <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType>-Werte enthält, hat der <xref:System.Reflection.PortableExecutable.PEReader> alle während der Erstellung angeforderten Daten gelesen.</span><span class="sxs-lookup"><span data-stu-id="8584e-153">If `options` includes the <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> or <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType> values, the <xref:System.Reflection.PortableExecutable.PEReader> will have read all of the data requested during construction.</span></span> <span data-ttu-id="8584e-154">Wenn <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> ebenfalls angegeben wird, behält der Aufrufer den vollständigen Besitz des Streams bei und ist sicher, dass er nach der Erstellung nicht von der <xref:System.Reflection.PortableExecutable.PEReader> manipuliert wird.</span><span class="sxs-lookup"><span data-stu-id="8584e-154">As such, if <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> is also specified, the caller retains full ownership of the stream and is assured that it will not be manipulated by the <xref:System.Reflection.PortableExecutable.PEReader> after construction.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8584e-155"><paramref name="size" /> ist negativ oder erstreckt sich über das Ende des Datenstroms hinaus.</span><span class="sxs-lookup"><span data-stu-id="8584e-155"><paramref name="size" /> is negative or extends past the end of the stream.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8584e-156">Fehler beim Lesen aus dem Datenstrom (nur beim Vorabrufen von Daten).</span><span class="sxs-lookup"><span data-stu-id="8584e-156">Error reading from the stream (only when prefetching data).</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="8584e-157"><see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata" /> wird angegeben, und die PE-Header des Image sind ungültig.</span><span class="sxs-lookup"><span data-stu-id="8584e-157"><see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata" /> is specified, and the PE headers of the image are invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="pEReader.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8584e-158">Verwirft den gesamten vom Leser zugewiesenen Speicher.</span><span class="sxs-lookup"><span data-stu-id="8584e-158">Disposes all memory allocated by the reader.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!IMPORTANT]
> <span data-ttu-id="8584e-159"><xref:System.Reflection.PortableExecutable.PEReader.Dispose> kann mehrmals aufgerufen werden, aber nicht parallel.</span><span class="sxs-lookup"><span data-stu-id="8584e-159"><xref:System.Reflection.PortableExecutable.PEReader.Dispose>  can be called multiple times, but not in parallel.</span></span>
> <span data-ttu-id="8584e-160">Es ist nicht sicher, <xref:System.Reflection.PortableExecutable.PEReader.Dispose> parallel mit einem anderen Vorgang auf dem <xref:System.Reflection.PortableExecutable.PEReader> oder beim Lesen aus <xref:System.Reflection.PortableExecutable.PEMemoryBlock>s aufzurufen, die vom Reader abgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="8584e-160">It is not safe to call <xref:System.Reflection.PortableExecutable.PEReader.Dispose> in parallel with any other operation on the <xref:System.Reflection.PortableExecutable.PEReader> or when reading from <xref:System.Reflection.PortableExecutable.PEMemoryBlock>s retrieved from the reader.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEntireImage">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEMemoryBlock GetEntireImage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PEMemoryBlock GetEntireImage() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.GetEntireImage" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEntireImage () As PEMemoryBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PEMemoryBlock GetEntireImage();" />
      <MemberSignature Language="F#" Value="member this.GetEntireImage : unit -&gt; System.Reflection.PortableExecutable.PEMemoryBlock" Usage="pEReader.GetEntireImage " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEMemoryBlock</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8584e-161">Ruft ein <see cref="T:System.Reflection.PortableExecutable.PEMemoryBlock" />-Objekt ab, das das gesamte PE-Image enthält.</span><span class="sxs-lookup"><span data-stu-id="8584e-161">Gets a <see cref="T:System.Reflection.PortableExecutable.PEMemoryBlock" /> object containing the entire PE image.</span></span></summary>
        <returns><span data-ttu-id="8584e-162">Ein Arbeitsspeicherblock, der das gesamte PE-Image enthält.</span><span class="sxs-lookup"><span data-stu-id="8584e-162">A memory block that contains the entire PE image.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="8584e-163">Sie können den Wert der <xref:System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable>-Eigenschaft abrufen, um zu bestimmen, ob die <xref:System.Reflection.PortableExecutable.PEReader> das gesamte Bild verfügbar macht.</span><span class="sxs-lookup"><span data-stu-id="8584e-163">You can retrieve the value of the <xref:System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable> property to determine whether the <xref:System.Reflection.PortableExecutable.PEReader> makes the entire image available.</span></span>

         ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8584e-164">Das gesamte PE-Image ist nicht verfügbar.</span><span class="sxs-lookup"><span data-stu-id="8584e-164">The entire PE image is not available.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEMemoryBlock GetMetadata ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PEMemoryBlock GetMetadata() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.GetMetadata" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadata () As PEMemoryBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PEMemoryBlock GetMetadata();" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : unit -&gt; System.Reflection.PortableExecutable.PEMemoryBlock" Usage="pEReader.GetMetadata " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEMemoryBlock</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8584e-165">Lädt einen PE-Abschnitt, der CLI-Metadaten enthält.</span><span class="sxs-lookup"><span data-stu-id="8584e-165">Loads a PE section that contains CLI metadata.</span></span></summary>
        <returns><span data-ttu-id="8584e-166">Ein Arbeitsspeicherblock, der die CLI-Metadaten enthält.</span><span class="sxs-lookup"><span data-stu-id="8584e-166">A memory block that contains the CLI metadata.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8584e-167">Das PE-Image enthält keine Metadaten (<see cref="P:System.Reflection.PortableExecutable.PEReader.HasMetadata" /> gibt <see langword="false" /> zurück).</span><span class="sxs-lookup"><span data-stu-id="8584e-167">The PE image doesn't contain metadata (<see cref="P:System.Reflection.PortableExecutable.PEReader.HasMetadata" /> returns <see langword="false" />).</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="8584e-168">Die PE-Header enthalten ungültige Daten.</span><span class="sxs-lookup"><span data-stu-id="8584e-168">The PE headers contain invalid data.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8584e-169">E/A-Fehler beim Lesen aus dem zugrunde liegenden Stream.</span><span class="sxs-lookup"><span data-stu-id="8584e-169">IO error while reading from the underlying stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetSectionData">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEMemoryBlock GetSectionData (int relativeVirtualAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PEMemoryBlock GetSectionData(int32 relativeVirtualAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.GetSectionData(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSectionData (relativeVirtualAddress As Integer) As PEMemoryBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PEMemoryBlock GetSectionData(int relativeVirtualAddress);" />
      <MemberSignature Language="F#" Value="member this.GetSectionData : int -&gt; System.Reflection.PortableExecutable.PEMemoryBlock" Usage="pEReader.GetSectionData relativeVirtualAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEMemoryBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relativeVirtualAddress" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="relativeVirtualAddress"><span data-ttu-id="8584e-170">Die relative virtuelle Adresse der zu lesenden Daten.</span><span class="sxs-lookup"><span data-stu-id="8584e-170">The Relative Virtual Address of the data to read.</span></span></param>
        <summary><span data-ttu-id="8584e-171">Lädt den PE-Abschnitt, der die angegebene relative virtuelle Adresse enthält, in den Arbeitsspeicher und gibt einen Arbeitsspeicherblock zurück, der an dieser Adresse beginnt und am Ende des enthaltenden Abschnitts endet.</span><span class="sxs-lookup"><span data-stu-id="8584e-171">Loads the PE section that contains the specified relative virtual address into memory and returns a memory block that starts at that address and ends at the end of the containing section.</span></span></summary>
        <returns><span data-ttu-id="8584e-172">Ein Arbeitsspeicherblock, der an <paramref name="relativeVirtualAddress" /> beginnt und am Ende des enthaltenden Abschnitts endet, oder ein leerer Block, wenn <paramref name="relativeVirtualAddress" /> keinen Speicherort in einem der PE-Abschnitte dieses PE-Image darstellt.</span><span class="sxs-lookup"><span data-stu-id="8584e-172">A memory block that starats at <paramref name="relativeVirtualAddress" /> and ends at the end of the containing section, or an empty block if <paramref name="relativeVirtualAddress" /> doesn't represent a location in any of the PE sections of this PE image.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="8584e-173">Die PE-Header enthalten ungültige Daten.</span><span class="sxs-lookup"><span data-stu-id="8584e-173">The PE headers contain invalid data.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8584e-174">Beim Lesen aus dem zugrunde liegenden Datenstrom ist ein E/A-Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="8584e-174">An IO error occurred while reading from the underlying stream.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8584e-175">Das PE-Image ist nicht verfügbar.</span><span class="sxs-lookup"><span data-stu-id="8584e-175">The PE image is not available.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8584e-176"><paramref name="relativeVirtualAddress" /> ist ein negativer Wert.</span><span class="sxs-lookup"><span data-stu-id="8584e-176"><paramref name="relativeVirtualAddress" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetSectionData">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEMemoryBlock GetSectionData (string sectionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PEMemoryBlock GetSectionData(string sectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.GetSectionData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSectionData (sectionName As String) As PEMemoryBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PEMemoryBlock GetSectionData(System::String ^ sectionName);" />
      <MemberSignature Language="F#" Value="member this.GetSectionData : string -&gt; System.Reflection.PortableExecutable.PEMemoryBlock" Usage="pEReader.GetSectionData sectionName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEMemoryBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sectionName" Type="System.String" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="sectionName"><span data-ttu-id="8584e-177">Der Name des Abschnitts.</span><span class="sxs-lookup"><span data-stu-id="8584e-177">The name of the section.</span></span></param>
        <summary><span data-ttu-id="8584e-178">Lädt den PE-Abschnitt mit dem angegebenen Namen in den Arbeitsspeicher und gibt einen Arbeitsspeicherblock zurück, der den Abschnitt umfasst.</span><span class="sxs-lookup"><span data-stu-id="8584e-178">Loads the PE section with the specified name into memory and returns a memory block that spans the section.</span></span></summary>
        <returns><span data-ttu-id="8584e-179">Ein Arbeitsspeicherblock, der den Abschnitt umfasst, oder ein leerer Block, wenn kein Abschnitt des angegebenen <paramref name="sectionName" /> in diesem PE-Image vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="8584e-179">A memory block that spans the section, or an empty block if no section of the given <paramref name="sectionName" /> exists in this PE image.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8584e-180"><paramref name="sectionName" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8584e-180"><paramref name="sectionName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8584e-181">Das PE-Image ist nicht verfügbar.</span><span class="sxs-lookup"><span data-stu-id="8584e-181">The PE image is not available.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="HasMetadata">
      <MemberSignature Language="C#" Value="public bool HasMetadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasMetadata" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEReader.HasMetadata" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasMetadata As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasMetadata { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasMetadata : bool" Usage="System.Reflection.PortableExecutable.PEReader.HasMetadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8584e-182">Ruft einen Wert ab, der angibt, ob das PE-Image CLI-Metadaten enthält.</span><span class="sxs-lookup"><span data-stu-id="8584e-182">Gets a value that indicates if the PE image contains CLI metadata.</span></span></summary>
        <value><span data-ttu-id="8584e-183"><see langword="true" />, wenn das PE-Image CLI-Metadaten enthält. Andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8584e-183"><see langword="true" /> if the PE image contains CLI metadata; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="8584e-184">Die PE-Header enthalten ungültige Daten.</span><span class="sxs-lookup"><span data-stu-id="8584e-184">The PE headers contain invalid data.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8584e-185">Fehler beim Lesen aus dem zugrunde liegenden Datenstrom.</span><span class="sxs-lookup"><span data-stu-id="8584e-185">Error reading from the underlying stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsEntireImageAvailable">
      <MemberSignature Language="C#" Value="public bool IsEntireImageAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEntireImageAvailable" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEntireImageAvailable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEntireImageAvailable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEntireImageAvailable : bool" Usage="System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8584e-186">Ruft einen Wert ab, der angibt, ob der Reader Zugriff auf das gesamte PE-Image hat.</span><span class="sxs-lookup"><span data-stu-id="8584e-186">Gets a value that indicates if the reader can access the entire PE image.</span></span></summary>
        <value><span data-ttu-id="8584e-187"><see langword="true" />, wenn der Reader auf das gesamte PE-Image zugreifen kann. Andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8584e-187"><see langword="true" /> if the reader can access the entire PE image; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8584e-188">Die-Eigenschaft gibt `false` zurück, wenn die <xref:System.Reflection.PortableExecutable.PEReader> aus einem Stream erstellt wird und nur ein Teil davon vorab in den Speicher abgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="8584e-188">The property returns `false` if the <xref:System.Reflection.PortableExecutable.PEReader> is constructed from a stream and only part of it is prefetched into memory.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLoadedImage">
      <MemberSignature Language="C#" Value="public bool IsLoadedImage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoadedImage" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEReader.IsLoadedImage" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLoadedImage As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLoadedImage { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLoadedImage : bool" Usage="System.Reflection.PortableExecutable.PEReader.IsLoadedImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8584e-189">Ruft einen Wert ab, der angibt, ob das PE-Image durch das Betriebssystem-Ladeprogramm in den Arbeitsspeicher geladen wurde.</span><span class="sxs-lookup"><span data-stu-id="8584e-189">Gets a value that indicates if the PE image has been loaded into memory by the OS loader.</span></span></summary>
        <value><span data-ttu-id="8584e-190"><see langword="true" />, wenn das PE-Image durch das Betriebssystem-Ladeprogramm in den Arbeitsspeicher geladen wurde. Andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8584e-190"><see langword="true" /> if the PE image has been loaded into memory by the OS loader; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PEHeaders">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEHeaders PEHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.PortableExecutable.PEHeaders PEHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEReader.PEHeaders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PEHeaders As PEHeaders" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::PortableExecutable::PEHeaders ^ PEHeaders { System::Reflection::PortableExecutable::PEHeaders ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PEHeaders : System.Reflection.PortableExecutable.PEHeaders" Usage="System.Reflection.PortableExecutable.PEReader.PEHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEHeaders</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8584e-191">Ruft die PE-Header ab.</span><span class="sxs-lookup"><span data-stu-id="8584e-191">Gets the PE headers.</span></span></summary>
        <value><span data-ttu-id="8584e-192">Die PE-Header für dieses PE-Image.</span><span class="sxs-lookup"><span data-stu-id="8584e-192">The PE headers for this PE image.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="8584e-193">Die Header enthalten ungültige Daten.</span><span class="sxs-lookup"><span data-stu-id="8584e-193">The headers contain invalid data.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8584e-194">Fehler beim Lesen aus dem Datenstrom.</span><span class="sxs-lookup"><span data-stu-id="8584e-194">Error reading from the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadCodeViewDebugDirectoryData">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.CodeViewDebugDirectoryData ReadCodeViewDebugDirectoryData (System.Reflection.PortableExecutable.DebugDirectoryEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.CodeViewDebugDirectoryData ReadCodeViewDebugDirectoryData(valuetype System.Reflection.PortableExecutable.DebugDirectoryEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.ReadCodeViewDebugDirectoryData(System.Reflection.PortableExecutable.DebugDirectoryEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadCodeViewDebugDirectoryData (entry As DebugDirectoryEntry) As CodeViewDebugDirectoryData" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::CodeViewDebugDirectoryData ReadCodeViewDebugDirectoryData(System::Reflection::PortableExecutable::DebugDirectoryEntry entry);" />
      <MemberSignature Language="F#" Value="member this.ReadCodeViewDebugDirectoryData : System.Reflection.PortableExecutable.DebugDirectoryEntry -&gt; System.Reflection.PortableExecutable.CodeViewDebugDirectoryData" Usage="pEReader.ReadCodeViewDebugDirectoryData entry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.CodeViewDebugDirectoryData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Reflection.PortableExecutable.DebugDirectoryEntry" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="entry"><span data-ttu-id="8584e-195">Eine Debugverzeichniseintragsinstanz.</span><span class="sxs-lookup"><span data-stu-id="8584e-195">A Debug Directory entry instance.</span></span></param>
        <summary><span data-ttu-id="8584e-196">Liest die Daten, auf die der angegebene Debugverzeichniseintrag zeigt, und interpretiert diese als CodeView.</span><span class="sxs-lookup"><span data-stu-id="8584e-196">Reads the data pointed to by the specified Debug Directory entry and interprets it as CodeView.</span></span></summary>
        <returns><span data-ttu-id="8584e-197">Eine CodeView-Debugverzeichnisdateninstanz.</span><span class="sxs-lookup"><span data-stu-id="8584e-197">A code view debug directory data instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8584e-198"><paramref name="entry" /> ist kein CodeView-Eintrag.</span><span class="sxs-lookup"><span data-stu-id="8584e-198"><paramref name="entry" /> is not a CodeView entry.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="8584e-199">Das Format der Daten ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="8584e-199">Bad format of the data.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8584e-200">E/A-Fehler beim Lesen aus dem zugrunde liegenden Stream.</span><span class="sxs-lookup"><span data-stu-id="8584e-200">IO error while reading from the underlying stream.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8584e-201">Das PE-Image ist nicht verfügbar.</span><span class="sxs-lookup"><span data-stu-id="8584e-201">The PE image is not available.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadDebugDirectory">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;System.Reflection.PortableExecutable.DebugDirectoryEntry&gt; ReadDebugDirectory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;valuetype System.Reflection.PortableExecutable.DebugDirectoryEntry&gt; ReadDebugDirectory() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.ReadDebugDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadDebugDirectory () As ImmutableArray(Of DebugDirectoryEntry)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;System::Reflection::PortableExecutable::DebugDirectoryEntry&gt; ReadDebugDirectory();" />
      <MemberSignature Language="F#" Value="member this.ReadDebugDirectory : unit -&gt; System.Collections.Immutable.ImmutableArray&lt;System.Reflection.PortableExecutable.DebugDirectoryEntry&gt;" Usage="pEReader.ReadDebugDirectory " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;System.Reflection.PortableExecutable.DebugDirectoryEntry&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8584e-202">Liest alle Debugverzeichnistabelleneinträge.</span><span class="sxs-lookup"><span data-stu-id="8584e-202">Reads all Debug Directory table entries.</span></span></summary>
        <returns><span data-ttu-id="8584e-203">Ein Array aus Debugverzeichnistabelleneinträgen.</span><span class="sxs-lookup"><span data-stu-id="8584e-203">An array of Debug Directory table entries.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="8584e-204">Das Format des Eintrags ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="8584e-204">Bad format of the entry.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8584e-205">E/A-Fehler beim Lesen aus dem zugrunde liegenden Stream.</span><span class="sxs-lookup"><span data-stu-id="8584e-205">IO error while reading from the underlying stream.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8584e-206">Das PE-Image ist nicht verfügbar.</span><span class="sxs-lookup"><span data-stu-id="8584e-206">The PE image is not available.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadEmbeddedPortablePdbDebugDirectoryData">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.MetadataReaderProvider ReadEmbeddedPortablePdbDebugDirectoryData (System.Reflection.PortableExecutable.DebugDirectoryEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Metadata.MetadataReaderProvider ReadEmbeddedPortablePdbDebugDirectoryData(valuetype System.Reflection.PortableExecutable.DebugDirectoryEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.ReadEmbeddedPortablePdbDebugDirectoryData(System.Reflection.PortableExecutable.DebugDirectoryEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadEmbeddedPortablePdbDebugDirectoryData (entry As DebugDirectoryEntry) As MetadataReaderProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Metadata::MetadataReaderProvider ^ ReadEmbeddedPortablePdbDebugDirectoryData(System::Reflection::PortableExecutable::DebugDirectoryEntry entry);" />
      <MemberSignature Language="F#" Value="member this.ReadEmbeddedPortablePdbDebugDirectoryData : System.Reflection.PortableExecutable.DebugDirectoryEntry -&gt; System.Reflection.Metadata.MetadataReaderProvider" Usage="pEReader.ReadEmbeddedPortablePdbDebugDirectoryData entry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReaderProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Reflection.PortableExecutable.DebugDirectoryEntry" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="entry"><span data-ttu-id="8584e-207">Der Debugverzeichniseintrag, dessen Daten gelesen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="8584e-207">The Debug Directory entry whose data is to be read.</span></span></param>
        <summary><span data-ttu-id="8584e-208">Liest die Daten, auf die der angegebene Debugverzeichniseintrag zeigt, und interpretiert diese als eingebetteten portierbaren PDB-Blob.</span><span class="sxs-lookup"><span data-stu-id="8584e-208">Reads the data pointed to by the specified Debug Directory entry and interprets it as an Embedded Portable PDB blob.</span></span></summary>
        <returns><span data-ttu-id="8584e-209">Der Anbieter eines Metadatenreaders zum Lesen eines portierbaren PDB-Image.</span><span class="sxs-lookup"><span data-stu-id="8584e-209">The provider of a metadata reader for reading a Portable PDB image.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8584e-210"><paramref name="entry" /> ist kein <see cref="F:System.Reflection.PortableExecutable.DebugDirectoryEntryType.EmbeddedPortablePdb" />-Eintrag.</span><span class="sxs-lookup"><span data-stu-id="8584e-210"><paramref name="entry" /> is not a <see cref="F:System.Reflection.PortableExecutable.DebugDirectoryEntryType.EmbeddedPortablePdb" /> entry.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="8584e-211">Das Format der Daten ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="8584e-211">Bad format of the data.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8584e-212">PE-Image nicht verfügbar.</span><span class="sxs-lookup"><span data-stu-id="8584e-212">PE image not available.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadPdbChecksumDebugDirectoryData">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData ReadPdbChecksumDebugDirectoryData (System.Reflection.PortableExecutable.DebugDirectoryEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData ReadPdbChecksumDebugDirectoryData(valuetype System.Reflection.PortableExecutable.DebugDirectoryEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.ReadPdbChecksumDebugDirectoryData(System.Reflection.PortableExecutable.DebugDirectoryEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadPdbChecksumDebugDirectoryData (entry As DebugDirectoryEntry) As PdbChecksumDebugDirectoryData" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PdbChecksumDebugDirectoryData ReadPdbChecksumDebugDirectoryData(System::Reflection::PortableExecutable::DebugDirectoryEntry entry);" />
      <MemberSignature Language="F#" Value="member this.ReadPdbChecksumDebugDirectoryData : System.Reflection.PortableExecutable.DebugDirectoryEntry -&gt; System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData" Usage="pEReader.ReadPdbChecksumDebugDirectoryData entry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Reflection.PortableExecutable.DebugDirectoryEntry" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="entry"><span data-ttu-id="8584e-213">Der Debugverzeichniseintrag, dessen Daten gelesen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="8584e-213">The Debug Directory entry whose data is to be read.</span></span></param>
        <summary><span data-ttu-id="8584e-214">Liest die Daten, auf die der angegebene Debugverzeichniseintrag zeigt, und interpretiert diese als PDB-Prüfsummeneintrag.</span><span class="sxs-lookup"><span data-stu-id="8584e-214">Reads the data pointed to by the specified Debug Directory entry and interprets it as a PDB Checksum entry.</span></span></summary>
        <returns><span data-ttu-id="8584e-215">Der PDB-Prüfsummeneintrag.</span><span class="sxs-lookup"><span data-stu-id="8584e-215">The PDB Checksum entry.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8584e-216"><paramref name="entry" /> ist kein PDB-Prüfsummeneintrag.</span><span class="sxs-lookup"><span data-stu-id="8584e-216"><paramref name="entry" /> is not a PDB Checksum entry.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="8584e-217">Das Format der Daten ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="8584e-217">Bad format of the data.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8584e-218">E/A-Fehler beim Lesen aus dem zugrunde liegenden Stream.</span><span class="sxs-lookup"><span data-stu-id="8584e-218">IO error while reading from the underlying stream.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8584e-219">Das PE-Image ist nicht verfügbar.</span><span class="sxs-lookup"><span data-stu-id="8584e-219">The PE image is not available.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryOpenAssociatedPortablePdb">
      <MemberSignature Language="C#" Value="public bool TryOpenAssociatedPortablePdb (string peImagePath, Func&lt;string,System.IO.Stream&gt; pdbFileStreamProvider, out System.Reflection.Metadata.MetadataReaderProvider pdbReaderProvider, out string pdbPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryOpenAssociatedPortablePdb(string peImagePath, class System.Func`2&lt;string, class System.IO.Stream&gt; pdbFileStreamProvider, [out] class System.Reflection.Metadata.MetadataReaderProvider&amp; pdbReaderProvider, [out] string&amp; pdbPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.TryOpenAssociatedPortablePdb(System.String,System.Func{System.String,System.IO.Stream},System.Reflection.Metadata.MetadataReaderProvider@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryOpenAssociatedPortablePdb (peImagePath As String, pdbFileStreamProvider As Func(Of String, Stream), ByRef pdbReaderProvider As MetadataReaderProvider, ByRef pdbPath As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryOpenAssociatedPortablePdb(System::String ^ peImagePath, Func&lt;System::String ^, System::IO::Stream ^&gt; ^ pdbFileStreamProvider, [Runtime::InteropServices::Out] System::Reflection::Metadata::MetadataReaderProvider ^ % pdbReaderProvider, [Runtime::InteropServices::Out] System::String ^ % pdbPath);" />
      <MemberSignature Language="F#" Value="member this.TryOpenAssociatedPortablePdb : string * Func&lt;string, System.IO.Stream&gt; * MetadataReaderProvider * string -&gt; bool" Usage="pEReader.TryOpenAssociatedPortablePdb (peImagePath, pdbFileStreamProvider, pdbReaderProvider, pdbPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="peImagePath" Type="System.String" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="pdbFileStreamProvider" Type="System.Func&lt;System.String,System.IO.Stream&gt;" Index="1" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="pdbReaderProvider" Type="System.Reflection.Metadata.MetadataReaderProvider" RefType="out" Index="2" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="pdbPath" Type="System.String" RefType="out" Index="3" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="peImagePath"><span data-ttu-id="8584e-220">Der Pfad zum PE-Image.</span><span class="sxs-lookup"><span data-stu-id="8584e-220">The path to the PE image.</span></span> <span data-ttu-id="8584e-221">Der Pfad wird verwendet, um die PDB-Datei in dem Verzeichnis zu suchen, das die PE-Datei enthält.</span><span class="sxs-lookup"><span data-stu-id="8584e-221">The path is used to locate the PDB file located in the directory containing the PE file.</span></span></param>
        <param name="pdbFileStreamProvider"><span data-ttu-id="8584e-222">Wird falls angegeben aufgerufen, um eine <see cref="T:System.IO.Stream" />-Klasse für einen bestimmten Dateipfad zu öffnen.</span><span class="sxs-lookup"><span data-stu-id="8584e-222">If specified, called to open a <see cref="T:System.IO.Stream" /> for a given file path.</span></span> <span data-ttu-id="8584e-223">Es wird erwartet, dass der Anbieter entweder eine lesbare und durchsuchbare <see cref="T:System.IO.Stream" />-Klasse oder <see langword="null" /> zurückgibt, wenn die Zieldatei nicht vorhanden ist oder aus irgendeinem Grund ignoriert werden soll.</span><span class="sxs-lookup"><span data-stu-id="8584e-223">The provider is expected to either return a readable and seekable <see cref="T:System.IO.Stream" />, or <see langword="null" /> if the target file doesn't exist or should be ignored for some reason.</span></span> <span data-ttu-id="8584e-224">Der Anbieter sollte <see cref="T:System.IO.IOException" /> auslösen, wenn die Datei aufgrund eines unerwarteten E/A-Fehlers nicht geöffnet werden kann.</span><span class="sxs-lookup"><span data-stu-id="8584e-224">The provider should throw <see cref="T:System.IO.IOException" /> if it fails to open the file due to an unexpected IO error.</span></span></param>
        <param name="pdbReaderProvider"><span data-ttu-id="8584e-225">Im Erfolgsfall eine neue Instanz von <see cref="T:System.Reflection.Metadata.MetadataReaderProvider" />, die zum Lesen der portierbaren PDB-Datei verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="8584e-225">If successful, a new instance of <see cref="T:System.Reflection.Metadata.MetadataReaderProvider" /> to be used to read the Portable PDB,.</span></span></param>
        <param name="pdbPath"><span data-ttu-id="8584e-226">Bei Erfolg und falls die PDB-Datei in einer Datei gefunden wird, der Pfad zur Datei, oder <see langword="null" />, falls die PDB-Datei in das PE-Image selbst eingebettet ist.</span><span class="sxs-lookup"><span data-stu-id="8584e-226">If successful and the PDB is found in a file, the path to the file, or <see langword="null" /> if the PDB is embedded in the PE image itself.</span></span></param>
        <summary><span data-ttu-id="8584e-227">Öffnet eine portierbare PDB-Datei, die diesem PE-Image zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="8584e-227">Opens a Portable PDB associated with this PE image.</span></span></summary>
        <returns><span data-ttu-id="8584e-228"><see langword="true" />, wenn dem PE-Image eine PDB-Datei zugeordnet ist und die PDB-Datei erfolgreich geöffnet wurde. Andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8584e-228"><see langword="true" /> if the PE image has a PDB associated with it and the PDB has been successfully opened; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8584e-229">Diese Methode implementiert eine einfache PDB-Dateisuche basierend auf dem Inhalt des PE-Image-debugverzeichnisses.</span><span class="sxs-lookup"><span data-stu-id="8584e-229">This method implements a simple PDB file lookup based on the content of the PE image Debug Directory.</span></span> <span data-ttu-id="8584e-230">Ein anspruchsvolleres Tool muss möglicherweise zusätzliche Suchvorgänge für Suchpfade oder einen Symbol Server nachverfolgen.</span><span class="sxs-lookup"><span data-stu-id="8584e-230">A more sophisticated tool might need to follow up with additional lookup on search paths or a symbol server.</span></span>
 
<span data-ttu-id="8584e-231">Die-Methode sucht die PDB in der folgenden Reihenfolge:</span><span class="sxs-lookup"><span data-stu-id="8584e-231">The method looks the PDB up in the following order:</span></span>

1) <span data-ttu-id="8584e-232">Überprüft, ob eine entsprechende PDB-Datei mit dem Namen im Code View-Eintrag im Verzeichnis mit der PE-Datei (dem Verzeichnis `peImagePath`) gefunden wird.</span><span class="sxs-lookup"><span data-stu-id="8584e-232">Checks for a matching PDB file of the name found in the CodeView entry in the directory containing the PE file (the directory of `peImagePath`).</span></span>
2) <span data-ttu-id="8584e-233">Prüft, ob eine PDB-Datei in das PE-Image selbst eingebettet ist.</span><span class="sxs-lookup"><span data-stu-id="8584e-233">Checks for a PDB embedded in the PE image itself.</span></span>
 
<span data-ttu-id="8584e-234">Die erste PDB, die mit den im Debug-Verzeichnis angegebenen Informationen übereinstimmt, wird zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="8584e-234">The first PDB that matches the information specified in the Debug Directory is returned.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8584e-235"><paramref name="peImagePath" /> oder <paramref name="pdbFileStreamProvider" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8584e-235"><paramref name="peImagePath" /> or <paramref name="pdbFileStreamProvider" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8584e-236">Der von <paramref name="pdbFileStreamProvider" /> zurückgegebene Datenstrom unterstützt keine Lese- und Suchvorgänge.</span><span class="sxs-lookup"><span data-stu-id="8584e-236">The stream returned from <paramref name="pdbFileStreamProvider" /> doesn't support read and seek operations.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="8584e-237">Aufgrund eines Fehlers wurde keine übereinstimmende PDB-Datei gefunden: Das PE-Image oder die PDB-Datei ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="8584e-237">No matching PDB file was found due to an error: The PE image or the PDB is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8584e-238">Aufgrund eines Fehlers wurde keine übereinstimmende PDB-Datei gefunden: E/A-Fehler beim Lesen des PE-Image oder der PDB-Datei.</span><span class="sxs-lookup"><span data-stu-id="8584e-238">No matching PDB file was found due to an error: An IO error occurred while reading the PE image or the PDB.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>

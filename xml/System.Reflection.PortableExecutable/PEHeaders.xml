<Type Name="PEHeaders" FullName="System.Reflection.PortableExecutable.PEHeaders">
  <Metadata><Meta Name="ms.openlocfilehash" Value="139854bdd53499e435e0d8957cf641eab5b78e18" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73390519" /></Metadata><TypeSignature Language="C#" Value="public sealed class PEHeaders" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PEHeaders extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.PortableExecutable.PEHeaders" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PEHeaders" />
  <TypeSignature Language="C++ CLI" Value="public ref class PEHeaders sealed" />
  <TypeSignature Language="F#" Value="type PEHeaders = class" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Metadata</AssemblyName>
    <AssemblyVersion>1.0.22.0</AssemblyVersion>
    <AssemblyVersion>1.3.0.0</AssemblyVersion>
    <AssemblyVersion>1.4.1.0</AssemblyVersion>
    <AssemblyVersion>1.4.2.0</AssemblyVersion>
    <AssemblyVersion>1.4.3.0</AssemblyVersion>
    <AssemblyVersion>1.4.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="0279f-101">Definiert einen Typ, der PE-Header (Portable Executable) und COFF-Header (Common Object File Format) aus einem Stream liest.</span><span class="sxs-lookup"><span data-stu-id="0279f-101">Defines a type that reads PE (Portable Executable) and COFF (Common Object File Format) headers from a stream.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEHeaders (System.IO.Stream peStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream peStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEHeaders.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEHeaders(System::IO::Stream ^ peStream);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEHeaders : System.IO.Stream -&gt; System.Reflection.PortableExecutable.PEHeaders" Usage="new System.Reflection.PortableExecutable.PEHeaders peStream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="peStream"><span data-ttu-id="0279f-102">Ein Stream, der das PE-Image enthält, das bei der aktuellen Position des Streams beginnt und am Ende des Streams endet.</span><span class="sxs-lookup"><span data-stu-id="0279f-102">A stream containing the PE image starting at the stream's current position and ending at the end of the stream.</span></span></param>
        <summary><span data-ttu-id="0279f-103">Instanziiert eine neue Instanz der <see cref="T:System.Reflection.PortableExecutable.PEHeaders" />-Klasse, die den PE-Header aus der aktuellen Position im angegebenen Stream liest.</span><span class="sxs-lookup"><span data-stu-id="0279f-103">Instantiates a new instance of the <see cref="T:System.Reflection.PortableExecutable.PEHeaders" /> class that reads the PE headers from the current location in the specified stream.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="0279f-104">Die Daten, die aus dem Stream gelesen wurden, haben ein ungültiges Format.</span><span class="sxs-lookup"><span data-stu-id="0279f-104">The data read from the stream has an invalid format.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0279f-105">Fehler beim Lesen aus dem Datenstrom.</span><span class="sxs-lookup"><span data-stu-id="0279f-105">Error reading from the stream.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0279f-106">Der Stream unterstützt keine Suchvorgänge.</span><span class="sxs-lookup"><span data-stu-id="0279f-106">The stream does not support seek operations.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0279f-107"><paramref name="peStream" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0279f-107"><paramref name="peStream" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEHeaders (System.IO.Stream peStream, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream peStream, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEHeaders.#ctor(System.IO.Stream,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peStream As Stream, size As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEHeaders(System::IO::Stream ^ peStream, int size);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEHeaders : System.IO.Stream * int -&gt; System.Reflection.PortableExecutable.PEHeaders" Usage="new System.Reflection.PortableExecutable.PEHeaders (peStream, size)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peStream" Type="System.IO.Stream" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="peStream"><span data-ttu-id="0279f-108">Ein Stream, der ein PE-Image der angegebenen Größe enthält, und bei seiner aktuellen Position beginnt.</span><span class="sxs-lookup"><span data-stu-id="0279f-108">A stream containing PE image of the given size starting at its current position.</span></span></param>
        <param name="size"><span data-ttu-id="0279f-109">Die Größe des PE-Images.</span><span class="sxs-lookup"><span data-stu-id="0279f-109">The size of the PE image.</span></span></param>
        <summary><span data-ttu-id="0279f-110">Instanziiert eine neue Instanz der <see cref="T:System.Reflection.PortableExecutable.PEHeaders" />-Klasse, die die PE-Header aus dem Stream liest, der ein PE-Image einer angegebenen Größe darstellt.</span><span class="sxs-lookup"><span data-stu-id="0279f-110">Instantiates a new instance of the <see cref="T:System.Reflection.PortableExecutable.PEHeaders" /> class that reads the PE headers from a stream that represents a PE image of a specified size.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="0279f-111">Die Daten, die aus dem Stream gelesen wurden, haben ein ungültiges Format.</span><span class="sxs-lookup"><span data-stu-id="0279f-111">The data read from the stream has an invalid format.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0279f-112">Fehler beim Lesen aus dem Datenstrom.</span><span class="sxs-lookup"><span data-stu-id="0279f-112">Error reading from the stream.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0279f-113">Der Stream unterstützt keine Suchvorgänge.</span><span class="sxs-lookup"><span data-stu-id="0279f-113">The stream does not support seek operations.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0279f-114"><paramref name="peStream" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0279f-114"><paramref name="peStream" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0279f-115"><paramref name="size" /> ist negativ oder erstreckt sich über das Ende des Datenstroms hinaus.</span><span class="sxs-lookup"><span data-stu-id="0279f-115"><paramref name="size" /> is negative or extends past the end of the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEHeaders (System.IO.Stream peStream, int size, bool isLoadedImage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream peStream, int32 size, bool isLoadedImage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEHeaders.#ctor(System.IO.Stream,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peStream As Stream, size As Integer, isLoadedImage As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEHeaders(System::IO::Stream ^ peStream, int size, bool isLoadedImage);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEHeaders : System.IO.Stream * int * bool -&gt; System.Reflection.PortableExecutable.PEHeaders" Usage="new System.Reflection.PortableExecutable.PEHeaders (peStream, size, isLoadedImage)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peStream" Type="System.IO.Stream" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="size" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="isLoadedImage" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="peStream"><span data-ttu-id="0279f-116">Der Stream, der ein PE-Image der angegebenen Größe enthält, und bei seiner aktuellen Position beginnt.</span><span class="sxs-lookup"><span data-stu-id="0279f-116">The stream containing PE image of the given size starting at its current position.</span></span></param>
        <param name="size"><span data-ttu-id="0279f-117">Die Größe des PE-Images.</span><span class="sxs-lookup"><span data-stu-id="0279f-117">The size of the PE image.</span></span></param>
        <param name="isLoadedImage"><span data-ttu-id="0279f-118"><see langword="true" />, wenn das PE-Image durch das Betriebssystem-Ladeprogramm in den Arbeitsspeicher geladen wurde. Andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0279f-118"><see langword="true" /> if the PE image has been loaded into memory by the OS loader; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="0279f-119">Instanziiert eine neue Instanz der <see cref="T:System.Reflection.PortableExecutable.PEHeaders" />-Klasse, die die PE-Header aus dem Stream liest, der ein PE-Image einer angegebenen Größe darstellt, und anzeigt, ob das PE-Image in den Arbeitsspeicher geladen wurde.</span><span class="sxs-lookup"><span data-stu-id="0279f-119">Instantiates a new instance of the <see cref="T:System.Reflection.PortableExecutable.PEHeaders" /> class that reads the PE headers from a stream that represents a PE image of a specified size and indicates whether the PE image has been loaded into memory.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="0279f-120">Die Daten, die aus dem Stream gelesen wurden, haben ein ungültiges Format.</span><span class="sxs-lookup"><span data-stu-id="0279f-120">The data read from the stream has invalid format.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0279f-121">Fehler beim Lesen aus dem Datenstrom.</span><span class="sxs-lookup"><span data-stu-id="0279f-121">Error reading from the stream.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0279f-122">Der Stream unterstützt keine Suchvorgänge.</span><span class="sxs-lookup"><span data-stu-id="0279f-122">The stream does not support seek operations.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0279f-123"><paramref name="peStream" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0279f-123"><paramref name="peStream" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0279f-124"><paramref name="size" /> ist negativ oder erstreckt sich über das Ende des Datenstroms hinaus.</span><span class="sxs-lookup"><span data-stu-id="0279f-124"><paramref name="size" /> is negative or extends past the end of the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CoffHeader">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.CoffHeader CoffHeader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.PortableExecutable.CoffHeader CoffHeader" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEHeaders.CoffHeader" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CoffHeader As CoffHeader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::PortableExecutable::CoffHeader ^ CoffHeader { System::Reflection::PortableExecutable::CoffHeader ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CoffHeader : System.Reflection.PortableExecutable.CoffHeader" Usage="System.Reflection.PortableExecutable.PEHeaders.CoffHeader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.CoffHeader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0279f-125">Ruft den COFF-Header des Images ab.</span><span class="sxs-lookup"><span data-stu-id="0279f-125">Gets the COFF header of the image.</span></span></summary>
        <value><span data-ttu-id="0279f-126">Der COFF-Header des Bilds.</span><span class="sxs-lookup"><span data-stu-id="0279f-126">The COFF header of the image.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoffHeaderStartOffset">
      <MemberSignature Language="C#" Value="public int CoffHeaderStartOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CoffHeaderStartOffset" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEHeaders.CoffHeaderStartOffset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CoffHeaderStartOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CoffHeaderStartOffset { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CoffHeaderStartOffset : int" Usage="System.Reflection.PortableExecutable.PEHeaders.CoffHeaderStartOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0279f-127">Ruft den Byteoffset vom Anfang des PE-Images bis zum Anfang des COFF-Headers ab.</span><span class="sxs-lookup"><span data-stu-id="0279f-127">Gets the byte offset from the start of the PE image to the start of the COFF header.</span></span></summary>
        <value><span data-ttu-id="0279f-128">Der Byte Offset vom Beginn des PE-Bilds bis zum Anfang des COFF-Headers.</span><span class="sxs-lookup"><span data-stu-id="0279f-128">The byte offset from the start of the PE image to the start of the COFF header.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CorHeader">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.CorHeader CorHeader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.PortableExecutable.CorHeader CorHeader" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEHeaders.CorHeader" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CorHeader As CorHeader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::PortableExecutable::CorHeader ^ CorHeader { System::Reflection::PortableExecutable::CorHeader ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CorHeader : System.Reflection.PortableExecutable.CorHeader" Usage="System.Reflection.PortableExecutable.PEHeaders.CorHeader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.CorHeader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0279f-129">Ruft den COR-Header ab.</span><span class="sxs-lookup"><span data-stu-id="0279f-129">Gets the COR header.</span></span></summary>
        <value><span data-ttu-id="0279f-130">Der COR-Header oder <see langword="null" />, wenn das Bild nicht über ein solches verfügt.</span><span class="sxs-lookup"><span data-stu-id="0279f-130">The COR header, or <see langword="null" /> if the image does not have one.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CorHeaderStartOffset">
      <MemberSignature Language="C#" Value="public int CorHeaderStartOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CorHeaderStartOffset" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEHeaders.CorHeaderStartOffset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CorHeaderStartOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CorHeaderStartOffset { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CorHeaderStartOffset : int" Usage="System.Reflection.PortableExecutable.PEHeaders.CorHeaderStartOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0279f-131">Ruft den Byteoffset vom Anfang des Images bis zum COR-Header ab.</span><span class="sxs-lookup"><span data-stu-id="0279f-131">Gets the byte offset from the start of the image to the COR header.</span></span></summary>
        <value><span data-ttu-id="0279f-132">Der Byte Offset vom Beginn des Bilds bis zum COR-Header oder-1, wenn das Bild keinen COR-Header besitzt.</span><span class="sxs-lookup"><span data-stu-id="0279f-132">The byte offset from the start of the image to the COR header, or -1 if the image does not have a COR header.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainingSectionIndex">
      <MemberSignature Language="C#" Value="public int GetContainingSectionIndex (int relativeVirtualAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetContainingSectionIndex(int32 relativeVirtualAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEHeaders.GetContainingSectionIndex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContainingSectionIndex (relativeVirtualAddress As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetContainingSectionIndex(int relativeVirtualAddress);" />
      <MemberSignature Language="F#" Value="member this.GetContainingSectionIndex : int -&gt; int" Usage="pEHeaders.GetContainingSectionIndex relativeVirtualAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relativeVirtualAddress" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="relativeVirtualAddress"><span data-ttu-id="0279f-133">Die zu suchende relative virtuelle Adresse (RVA).</span><span class="sxs-lookup"><span data-stu-id="0279f-133">The relative virtual address to search for.</span></span></param>
        <summary><span data-ttu-id="0279f-134">Sucht nach Bereichen des PE-Images für den Bereich, der die angegebene RVA enthält.</span><span class="sxs-lookup"><span data-stu-id="0279f-134">Searches sections of the PE image for the section that contains the specified Relative Virtual Address.</span></span></summary>
        <returns><span data-ttu-id="0279f-135">Der Index des Abschnitts, der <paramref name="relativeVirtualAddress" />, oder –1 enthält, wenn die Suche erfolglos war.</span><span class="sxs-lookup"><span data-stu-id="0279f-135">The index of the section that contains <paramref name="relativeVirtualAddress" />, or -1 if there the search is unsuccessful.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCoffOnly">
      <MemberSignature Language="C#" Value="public bool IsCoffOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCoffOnly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEHeaders.IsCoffOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCoffOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCoffOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCoffOnly : bool" Usage="System.Reflection.PortableExecutable.PEHeaders.IsCoffOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0279f-136">Ruft einen Wert ab, der angibt, ob das Image ausschließlich im COFF-Format vorliegt.</span><span class="sxs-lookup"><span data-stu-id="0279f-136">Gets a value that indicates whether the image is Coff only.</span></span></summary>
        <value><span data-ttu-id="0279f-137"><see langword="true" />, wenn das Bild nur COFF ist. Andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0279f-137"><see langword="true" /> if the image is Coff only; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConsoleApplication">
      <MemberSignature Language="C#" Value="public bool IsConsoleApplication { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConsoleApplication" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEHeaders.IsConsoleApplication" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsConsoleApplication As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsConsoleApplication { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsConsoleApplication : bool" Usage="System.Reflection.PortableExecutable.PEHeaders.IsConsoleApplication" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0279f-138">Ruft einen Wert ab, der angibt, ob das Image eine Windows-Konsolenanwendung darstellt.</span><span class="sxs-lookup"><span data-stu-id="0279f-138">Gets a value that indicates whether the image represents a Windows console application.</span></span></summary>
        <value><span data-ttu-id="0279f-139"><see langword="true" />, wenn das Image eine Windows-Konsolenanwendung ist. Andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0279f-139"><see langword="true" /> if the image is a Windows console applications; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDll">
      <MemberSignature Language="C#" Value="public bool IsDll { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDll" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEHeaders.IsDll" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDll As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDll { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDll : bool" Usage="System.Reflection.PortableExecutable.PEHeaders.IsDll" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0279f-140">Ruft einen Wert ab, der angibt, ob das Image eine Dynamic link Library darstellt.</span><span class="sxs-lookup"><span data-stu-id="0279f-140">Gets a value that indicates whether the image represents a dynamic link library.</span></span></summary>
        <value><span data-ttu-id="0279f-141"><see langword="true" />, wenn es sich bei dem Bild um eine DLL handelt. Andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0279f-141"><see langword="true" /> if the image is a DLL; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExe">
      <MemberSignature Language="C#" Value="public bool IsExe { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExe" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEHeaders.IsExe" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExe As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExe { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExe : bool" Usage="System.Reflection.PortableExecutable.PEHeaders.IsExe" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0279f-142">Ruft einen Wert ab, der angibt, ob das Image eine ausführbare Datei darstellt.</span><span class="sxs-lookup"><span data-stu-id="0279f-142">Gets a value that indicates whether the image represents an executable.</span></span></summary>
        <value><span data-ttu-id="0279f-143"><see langword="true" />, wenn das Bild eine ausführbare Datei ist. Andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0279f-143"><see langword="true" /> if the image is an executable; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MetadataSize">
      <MemberSignature Language="C#" Value="public int MetadataSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MetadataSize" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEHeaders.MetadataSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MetadataSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MetadataSize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MetadataSize : int" Usage="System.Reflection.PortableExecutable.PEHeaders.MetadataSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0279f-144">Ruft die Größe der CLI-Metadaten ab.</span><span class="sxs-lookup"><span data-stu-id="0279f-144">Gets the size of the CLI metadata.</span></span></summary>
        <value><span data-ttu-id="0279f-145">die Größe der CLI-Metadaten oder 0, wenn das Image keine Metadaten enthält.</span><span class="sxs-lookup"><span data-stu-id="0279f-145">the size of the CLI metadata, or 0 if the image does not contain metadata.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MetadataStartOffset">
      <MemberSignature Language="C#" Value="public int MetadataStartOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MetadataStartOffset" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEHeaders.MetadataStartOffset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MetadataStartOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MetadataStartOffset { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MetadataStartOffset : int" Usage="System.Reflection.PortableExecutable.PEHeaders.MetadataStartOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0279f-146">Ruft den Offset (in Bytes) vom Anfang des PE-Images bis zum Anfang der CLI-Metadaten ab.</span><span class="sxs-lookup"><span data-stu-id="0279f-146">Gets the offset (in bytes) from the start of the PE image to the start of the CLI metadata.</span></span></summary>
        <value><span data-ttu-id="0279f-147">Der Offset (in Bytes) vom Anfang des PE-Bilds bis zum Anfang der CLI-Metadaten oder-1, wenn das Image keine Metadaten enthält.</span><span class="sxs-lookup"><span data-stu-id="0279f-147">The offset (in bytes) from the start of the PE image to the start of the CLI metadata, or -1 if the image does not contain metadata.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PEHeader">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEHeader PEHeader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.PortableExecutable.PEHeader PEHeader" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEHeaders.PEHeader" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PEHeader As PEHeader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::PortableExecutable::PEHeader ^ PEHeader { System::Reflection::PortableExecutable::PEHeader ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PEHeader : System.Reflection.PortableExecutable.PEHeader" Usage="System.Reflection.PortableExecutable.PEHeaders.PEHeader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEHeader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0279f-148">Ruft den PE-Header des Images ab.</span><span class="sxs-lookup"><span data-stu-id="0279f-148">Gets the image's PE header.</span></span></summary>
        <value><span data-ttu-id="0279f-149">Der PE-Header des Bilds oder <see langword="null" />, wenn das Bild nur COFF ist.</span><span class="sxs-lookup"><span data-stu-id="0279f-149">The image's PE header, or <see langword="null" /> if the image is COFF only.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PEHeaderStartOffset">
      <MemberSignature Language="C#" Value="public int PEHeaderStartOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PEHeaderStartOffset" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEHeaders.PEHeaderStartOffset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PEHeaderStartOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PEHeaderStartOffset { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PEHeaderStartOffset : int" Usage="System.Reflection.PortableExecutable.PEHeaders.PEHeaderStartOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0279f-150">Ruft den Byteoffset des Headers vom Anfang des Images ab.</span><span class="sxs-lookup"><span data-stu-id="0279f-150">Gets the byte offset of the header from the start of the image.</span></span></summary>
        <value><span data-ttu-id="0279f-151">Der Byte Offset des Headers vom Beginn des Bilds.</span><span class="sxs-lookup"><span data-stu-id="0279f-151">The byte offset of the header from the start of the image.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SectionHeaders">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;System.Reflection.PortableExecutable.SectionHeader&gt; SectionHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;valuetype System.Reflection.PortableExecutable.SectionHeader&gt; SectionHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEHeaders.SectionHeaders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SectionHeaders As ImmutableArray(Of SectionHeader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Immutable::ImmutableArray&lt;System::Reflection::PortableExecutable::SectionHeader&gt; SectionHeaders { System::Collections::Immutable::ImmutableArray&lt;System::Reflection::PortableExecutable::SectionHeader&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.SectionHeaders : System.Collections.Immutable.ImmutableArray&lt;System.Reflection.PortableExecutable.SectionHeader&gt;" Usage="System.Reflection.PortableExecutable.PEHeaders.SectionHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;System.Reflection.PortableExecutable.SectionHeader&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0279f-152">Ruft die PE-Header des Abschnitts ab.</span><span class="sxs-lookup"><span data-stu-id="0279f-152">Gets the PE section headers.</span></span></summary>
        <value><span data-ttu-id="0279f-153">Ein Array, das die PE-Abschnitts Kopfzeilen enthält.</span><span class="sxs-lookup"><span data-stu-id="0279f-153">An array containing the PE section headers.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetDirectoryOffset">
      <MemberSignature Language="C#" Value="public bool TryGetDirectoryOffset (System.Reflection.PortableExecutable.DirectoryEntry directory, out int offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDirectoryOffset(valuetype System.Reflection.PortableExecutable.DirectoryEntry directory, [out] int32&amp; offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEHeaders.TryGetDirectoryOffset(System.Reflection.PortableExecutable.DirectoryEntry,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDirectoryOffset (directory As DirectoryEntry, ByRef offset As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDirectoryOffset(System::Reflection::PortableExecutable::DirectoryEntry directory, [Runtime::InteropServices::Out] int % offset);" />
      <MemberSignature Language="F#" Value="member this.TryGetDirectoryOffset : System.Reflection.PortableExecutable.DirectoryEntry * int -&gt; bool" Usage="pEHeaders.TryGetDirectoryOffset (directory, offset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.Reflection.PortableExecutable.DirectoryEntry" />
        <Parameter Name="offset" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="directory"><span data-ttu-id="0279f-154">Der PE-Eintrag eines Verzeichnisses.</span><span class="sxs-lookup"><span data-stu-id="0279f-154">The PE directory entry.</span></span></param>
        <param name="offset"><span data-ttu-id="0279f-155">Wenn die Methode zurückgegeben wird, enthält diese den Offset vom Anfang des Images bis zu den angegebenen Daten des Verzeichnisses.</span><span class="sxs-lookup"><span data-stu-id="0279f-155">When the method returns, contains the offset from the start of the image to the given directory data.</span></span></param>
        <summary><span data-ttu-id="0279f-156">Ruft den Offset (in Bytes) vom Anfang des Images bis zu den angegebenen Daten des Verzeichnisses ab.</span><span class="sxs-lookup"><span data-stu-id="0279f-156">Gets the offset (in bytes) from the start of the image to the given directory data.</span></span></summary>
        <returns><span data-ttu-id="0279f-157"><see langword="true" />, wenn die Daten des Verzeichnisses gefunden werden; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0279f-157"><see langword="true" /> if the directory data is found; <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

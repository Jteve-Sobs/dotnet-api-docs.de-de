<Type Name="PackageStore" FullName="System.IO.Packaging.PackageStore">
  <Metadata><Meta Name="ms.openlocfilehash" Value="245b0dbe550b6d8c9da469b38d25afbd8040fa21" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="64996806" /></Metadata><TypeSignature Language="C#" Value="public static class PackageStore" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed PackageStore extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Packaging.PackageStore" />
  <TypeSignature Language="VB.NET" Value="Public Class PackageStore" />
  <TypeSignature Language="C++ CLI" Value="public ref class PackageStore abstract sealed" />
  <TypeSignature Language="F#" Value="type PackageStore = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt eine Auflistung von anwendungsspezifischen <see cref="T:System.IO.Packaging.Package" /> Instanzen, die in Kombination mit verwendet <see cref="T:System.IO.Packaging.PackWebRequest" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.IO.Packaging.PackageStore> definiert einen Verweis Sammlungen des Pakets, geöffnet und aktiv in der Anwendung zugeordnet sind.  Pakete hinzugefügt, um die <xref:System.IO.Packaging.PackageStore> erfolgt ist, indem Sie ihren Schlüssel-URI-Wert.  Die <xref:System.IO.Packaging.PackageStore> unterstützt drei häufige Verwendungen:  
  
1.  Zugreifen auf <xref:System.IO.Packaging.PackagePart> Daten über <xref:System.IO.Packaging.PackWebRequest>.  
  
2.  Abrufen einer Instanz der Anwendung eine <xref:System.IO.Packaging.Package> der Paket URI angegeben.  
  
3.  Zugriff auf Pakete, die erstellt und gespeichert, die einem <xref:System.IO.MemoryStream>.  
  
 Zur leistungsoptimierung und minimiert den Aufwand für wiederholte Datei offen/geschlossen-Vorgänge, die <xref:System.IO.Packaging.PackageStore> dient zum Verwalten von Instanzen von Paketen, die Zugriff auf durch <xref:System.IO.Packaging.PackWebRequest> und direkt von der Anwendung.  Beim Zugriff auf Daten in einem Paket, das <xref:System.IO.Packaging.Package> Adresse eines angeforderten <xref:System.IO.Packaging.PackagePart> <xref:System.IO.Packaging.PackagePart.Uri%2A> wird zunächst überprüft, um festzustellen, ob das Paket bereits definiert und in geöffnet ist die <xref:System.IO.Packaging.PackageStore>.  Wenn das Paket in als offen definiert ist die <xref:System.IO.Packaging.PackageStore>, angeforderten Teile können ohne wiederholte öffnen und schließen das Paket für jede Anforderung direkt zugegriffen werden.  
  
 Wenn die Anwendung ein Paket mit öffnet <xref:System.IO.Packaging.Package.Open%2A?displayProperty=nameWithType>, <xref:System.IO.Packaging.PackageStore.AddPackage%2A> aufgerufen werden, um das Paket zum Hinzufügen der <xref:System.IO.Packaging.PackageStore>.  <xref:System.IO.Packaging.PackageStore.RemovePackage%2A> später aufgerufen werden, um das Paket entfernt die <xref:System.IO.Packaging.PackageStore> vor dem Aufruf <xref:System.IO.Packaging.Package.Close%2A?displayProperty=nameWithType>.  
  
 XPS-Pakete zu öffnen, mit einer <xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A> Konstruktor werden automatisch hinzugefügt und entfernt Sie aus der <xref:System.IO.Packaging.PackageStore> Wenn das Dokument erstellt und verworfen wird.  (Sie müssen nicht aufrufen <xref:System.IO.Packaging.PackageStore.AddPackage%2A> oder <xref:System.IO.Packaging.PackageStore.RemovePackage%2A> separat für XPS-Pakete mit geöffnet <xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A> Konstruktoren.)  
  
 Die e/a-Berechtigungen eines Pakets, der Zugriff erfolgt über die <xref:System.IO.Packaging.PackageStore> bleiben dieselben wie die e/a-Berechtigungen für das Paket festgelegt wird, wenn dieses geöffnet wird.  Die <xref:System.IO.Packaging.PackageStore> bietet nur Verweise auf die Pakete, die den Speicher hinzugefügt wurden.  Es ist Aufgabe der Anwendung ordnungsgemäß zu öffnen, aktualisieren und schließen Sie jedes Paket.  
  
 Pakete hinzugefügt, um die <xref:System.IO.Packaging.PackageStore> kann in Umgebungen mit mehreren Threads zugegriffen werden, wenn sie in Kombination mit verwendet werden eine [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Parser wie z. B. <xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=nameWithType>.  Beim Betrieb in einer Multithread-Umgebung muss die Anwendung das Paket vor dem Zugriff löschen.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Packaging.PackWebRequest" />
    <altmember cref="T:System.IO.Packaging.PackWebResponse" />
  </Docs>
  <Members>
    <Member MemberName="AddPackage">
      <MemberSignature Language="C#" Value="public static void AddPackage (Uri uri, System.IO.Packaging.Package package);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPackage(class System.Uri uri, class System.IO.Packaging.Package package) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPackage(Uri ^ uri, System::IO::Packaging::Package ^ package);" />
      <MemberSignature Language="F#" Value="static member AddPackage : Uri * System.IO.Packaging.Package -&gt; unit" Usage="System.IO.Packaging.PackageStore.AddPackage (uri, package)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="package" Type="System.IO.Packaging.Package" />
      </Parameters>
      <Docs>
        <param name="uri">Der Schlüssel [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] von der <paramref name="package" /> im zu vergleichenden eine <see cref="T:System.IO.Packaging.PackWebRequest" />.</param>
        <param name="package">Das Paket, das dem Speicher hinzugefügt werden soll.</param>
        <summary>Fügt eine <see cref="T:System.IO.Packaging.Package" /> in den Speicher.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` definiert die Paket Schlüssel-URI, der verglichen wird, wenn Sie aufrufen <xref:System.IO.Packaging.PackWebRequest>.  
  
 Wenn die `packageUri` entspricht der <xref:System.IO.Packaging.PackagePart.Uri%2A> für eine <xref:System.IO.Packaging.PackagePart> in eine <xref:System.IO.Packaging.PackWebRequest> aufrufen, das Paket definiert, der <xref:System.IO.Packaging.PackageStore> wird verwendet, um das angeforderte Part zuzugreifen.  
  
 Wenn die `packageUri` entspricht nicht der <xref:System.IO.Packaging.PackagePart.Uri%2A> für eine <xref:System.IO.Packaging.PackagePart> in eine <xref:System.IO.Packaging.PackWebRequest> Aufruf wird das Paket mit dem angegebenen URI für den Zugriff auf das angeforderte Part geöffnet wird.  
  
 **Sicherheitshinweis** diese Methode erfordert <xref:System.Security.Permissions.EnvironmentPermission> für alle benutzerdefinierten <xref:System.IO.Packaging.Package> (nicht -<xref:System.IO.Packaging.ZipPackage>) Typen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.IO.Packaging.PackageStore.AddPackage%2A>-Methode gezeigt.  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewDecrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewdecrypt)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewDecrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewdecrypt)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="package" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="packageUri" /> ist ein ungültiger Paket- [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)].</exception>
        <exception cref="T:System.InvalidOperationException">Ein Paket mit dem angegebenen <paramref name="packageUri" /> befindet sich bereits im Speicher.</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="GetPackage">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package GetPackage (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package GetPackage(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ GetPackage(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="static member GetPackage : Uri -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.PackageStore.GetPackage uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">Die [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] des zurückzugebenden Pakets.</param>
        <summary>Gibt die <see cref="T:System.IO.Packaging.Package" /> mit einem angegebenen [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] aus dem Store.</summary>
        <returns>Das Paket mit einem angegebenen <paramref name="packageUri" />; oder <see langword="null" />, wenn ein Paket mit dem angegebenen <paramref name="packageUri" /> befindet sich nicht im Speicher.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` die URIs zugeordnet ist im angegebenen die <xref:System.IO.Packaging.PackageStore.AddPackage%2A> Methodenaufruf.  
  
 **Sicherheitshinweis** diese Methode erfordert <xref:System.Security.Permissions.EnvironmentPermission> für alle benutzerdefinierten <xref:System.IO.Packaging.Package> (nicht -<xref:System.IO.Packaging.ZipPackage>) Typen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.IO.Packaging.PackageStore.GetPackage%2A>-Methode gezeigt.  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewOpenDoc](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewopendoc)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewOpenDoc](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewopendoc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="packageUri" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="packageUri" /> ist ein ungültiger Paket- [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)].</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="RemovePackage">
      <MemberSignature Language="C#" Value="public static void RemovePackage (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePackage(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePackage(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="static member RemovePackage : Uri -&gt; unit" Usage="System.IO.Packaging.PackageStore.RemovePackage uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">Die [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] des zu entfernenden Pakets.</param>
        <summary>Entfernt die <see cref="T:System.IO.Packaging.Package" /> mit einem angegebenen [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] aus dem Store.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` die URIs zugeordnet ist im angegebenen die <xref:System.IO.Packaging.PackageStore.AddPackage%2A> Methodenaufruf.  
  
 **Sicherheitshinweis** diese Methode erfordert <xref:System.Security.Permissions.EnvironmentPermission> für alle benutzerdefinierten <xref:System.IO.Packaging.Package> (nicht -<xref:System.IO.Packaging.ZipPackage>) Typen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.IO.Packaging.PackageStore.RemovePackage%2A>-Methode gezeigt.  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewCloseDoc](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewclosedoc)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewCloseDoc](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewclosedoc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="packageUri" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="packageUri" /> ist ein ungültiger Paket- [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)].</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
      </Docs>
    </Member>
  </Members>
</Type>
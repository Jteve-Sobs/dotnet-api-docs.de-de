<Type Name="PackageStore" FullName="System.IO.Packaging.PackageStore">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="09c25cbc0310ad976dc23dd14cc3caa0b864965f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30417854" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class PackageStore" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed PackageStore extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Packaging.PackageStore" />
  <TypeSignature Language="VB.NET" Value="Public Class PackageStore" />
  <TypeSignature Language="C++ CLI" Value="public ref class PackageStore abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt eine Auflistung von anwendungsspezifischen <see cref="T:System.IO.Packaging.Package" />-Instanzen dar, die gemeinsam mit <see cref="T:System.IO.Packaging.PackWebRequest" /> verwendet werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.IO.Packaging.PackageStore> definiert einen Verweis Auflistungen des Pakets, die offen und aktiv sein, in der Anwendung sind.  Pakete hinzugefügt, die <xref:System.IO.Packaging.PackageStore> erfolgt ist, indem Sie ihren Schlüssel-URI-Wert.  Die <xref:System.IO.Packaging.PackageStore> unterstützt drei allgemeine Verwendungen:  
  
1.  Zugreifen auf <xref:System.IO.Packaging.PackagePart> Daten über <xref:System.IO.Packaging.PackWebRequest>.  
  
2.  Abrufen einer Instanz der Anwendung eine <xref:System.IO.Packaging.Package> der Paket-URI angegeben.  
  
3.  Zugriff auf Pakete, die erstellt und gespeichert, die einem <xref:System.IO.MemoryStream>.  
  
 Zur Verbesserung der Leistung und minimiert den Aufwand für das wiederholte öffnen/schließen Dateivorgänge, die <xref:System.IO.Packaging.PackageStore> dient zum Verwalten von Instanzen der Pakete zugreift <xref:System.IO.Packaging.PackWebRequest> und direkt von der Anwendung.  Beim Zugriff auf Daten in einem Paket das <xref:System.IO.Packaging.Package> Adresse eines angeforderten <xref:System.IO.Packaging.PackagePart> <xref:System.IO.Packaging.PackagePart.Uri%2A> wird zuerst überprüft werden, um festzustellen, ob das Paket bereits definierte und in geöffnet der <xref:System.IO.Packaging.PackageStore>.  Wenn das Paket auch sehr offen in definiert ist die <xref:System.IO.Packaging.PackageStore>, angeforderte Teile können ohne wiederholte öffnen und schließen das Paket für jede Anforderung direkt zugegriffen werden.  
  
 Wenn Ihre Anwendung ein Paket mit öffnet <xref:System.IO.Packaging.Package.Open%2A?displayProperty=nameWithType>, <xref:System.IO.Packaging.PackageStore.AddPackage%2A> aufgerufen werden, um das Paket zum Hinzufügen der <xref:System.IO.Packaging.PackageStore>.  <xref:System.IO.Packaging.PackageStore.RemovePackage%2A> später aufgerufen werden, um das Paket entfernt die <xref:System.IO.Packaging.PackageStore> vor dem Aufruf <xref:System.IO.Packaging.Package.Close%2A?displayProperty=nameWithType>.  
  
 Geöffnete XPS-Pakete mit einer <xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A> Konstruktor automatisch hinzugefügt oder daraus entfernt die <xref:System.IO.Packaging.PackageStore> Wenn das Dokument erstellt und freigegeben wird.  (Sie müssen nicht aufrufen <xref:System.IO.Packaging.PackageStore.AddPackage%2A> oder <xref:System.IO.Packaging.PackageStore.RemovePackage%2A> separat für geöffnete XPS-Pakete mit <xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A> Konstruktoren.)  
  
 Die-e/a-Dateiberechtigungen eines Pakets erfolgt über die <xref:System.IO.Packaging.PackageStore> bleibt die gleiche wie die e/a-Berechtigungen für das Paket festgelegt werden, wenn sie geöffnet ist.  Die <xref:System.IO.Packaging.PackageStore> nur enthält Verweise auf die Pakete, die den Speicher hinzugefügt wurden.  Es ist Aufgabe der Anwendung ordnungsgemäß öffnen, aktualisieren und Schließen jedes Paket.  
  
 Pakete hinzugefügt, die <xref:System.IO.Packaging.PackageStore> in multithreaded Umgebungen zugegriffen werden, wenn sie in Kombination mit verwendet werden eine [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Parser wie z. B. <xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=nameWithType>.  Während des Betriebs in einer Multithreadumgebung, muss die Anwendung das Paket vor dem Zugriff gesperrt.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Packaging.PackWebRequest" />
    <altmember cref="T:System.IO.Packaging.PackWebResponse" />
  </Docs>
  <Members>
    <Member MemberName="AddPackage">
      <MemberSignature Language="C#" Value="public static void AddPackage (Uri uri, System.IO.Packaging.Package package);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPackage(class System.Uri uri, class System.IO.Packaging.Package package) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPackage(Uri ^ uri, System::IO::Packaging::Package ^ package);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="package" Type="System.IO.Packaging.Package" />
      </Parameters>
      <Docs>
        <param name="uri">Der Schlüssel-[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] des <c>Pakets</c>, der in einem <see cref="T:System.IO.Packaging.PackWebRequest" /> verglichen werden soll.</param>
        <param name="package">Das Paket, das dem Speicher hinzugefügt werden soll.</param>
        <summary>Fügt dem Speicher ein <see cref="T:System.IO.Packaging.Package" /> hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` definiert das Paket Schlüssel-URI, der verglichen wird, wenn Sie aufrufen <xref:System.IO.Packaging.PackWebRequest>.  
  
 Wenn die `packageUri` entspricht der <xref:System.IO.Packaging.PackagePart.Uri%2A> für eine <xref:System.IO.Packaging.PackagePart> in einer <xref:System.IO.Packaging.PackWebRequest> aufrufen, das Paket definiert werden, der <xref:System.IO.Packaging.PackageStore> wird verwendet, um Zugriff auf die angeforderte Teile.  
  
 Wenn die `packageUri` entspricht nicht der <xref:System.IO.Packaging.PackagePart.Uri%2A> für eine <xref:System.IO.Packaging.PackagePart> in einer <xref:System.IO.Packaging.PackWebRequest> Aufruf, der das Paket mit dem angegebenen URI für den Zugriff auf das angeforderte Part geöffnet wird.  
  
 **Sicherheitshinweis** diese Methode erfordert <xref:System.Security.Permissions.EnvironmentPermission> für alle benutzerdefinierten <xref:System.IO.Packaging.Package> (nicht -<xref:System.IO.Packaging.ZipPackage>) Typen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.IO.Packaging.PackageStore.AddPackage%2A>-Methode gezeigt.  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewDecrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewdecrypt)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewDecrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewdecrypt)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="package" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="packageUri" /> ist ein ungültiger Paket-[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)].</exception>
        <exception cref="T:System.InvalidOperationException">Ein Paket mit dem angegebenen <paramref name="packageUri" /> ist bereits im Speicher vorhanden.</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="GetPackage">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package GetPackage (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package GetPackage(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ GetPackage(Uri ^ uri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">Der [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] des zurückzugebenden Pakets.</param>
        <summary>Gibt das <see cref="T:System.IO.Packaging.Package" /> mit einem angegebenen [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] aus dem Speicher zurück.</summary>
        <returns>Das Paket mit einem angegebenen <paramref name="packageUri" /> oder <see langword="null" />, wenn kein Paket mit dem angegebenen <paramref name="packageUri" /> im Speicher vorhanden ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` wird verglichen, um die URIs angegebenen, in der <xref:System.IO.Packaging.PackageStore.AddPackage%2A> -Methodenaufruf.  
  
 **Sicherheitshinweis** diese Methode erfordert <xref:System.Security.Permissions.EnvironmentPermission> für alle benutzerdefinierten <xref:System.IO.Packaging.Package> (nicht -<xref:System.IO.Packaging.ZipPackage>) Typen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.IO.Packaging.PackageStore.GetPackage%2A>-Methode gezeigt.  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewOpenDoc](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewopendoc)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewOpenDoc](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewopendoc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="packageUri" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="packageUri" /> ist ein ungültiger Paket-[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)].</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="RemovePackage">
      <MemberSignature Language="C#" Value="public static void RemovePackage (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePackage(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePackage(Uri ^ uri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">Der [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] des zu entfernenden Pakets.</param>
        <summary>Entfernt das <see cref="T:System.IO.Packaging.Package" /> mit einem angegebenen [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] aus dem Speicher.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` wird verglichen, um die URIs angegebenen, in der <xref:System.IO.Packaging.PackageStore.AddPackage%2A> -Methodenaufruf.  
  
 **Sicherheitshinweis** diese Methode erfordert <xref:System.Security.Permissions.EnvironmentPermission> für alle benutzerdefinierten <xref:System.IO.Packaging.Package> (nicht -<xref:System.IO.Packaging.ZipPackage>) Typen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.IO.Packaging.PackageStore.RemovePackage%2A>-Methode gezeigt.  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewCloseDoc](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewclosedoc)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewCloseDoc](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewclosedoc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="packageUri" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="packageUri" /> ist ein ungültiger Paket-[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)].</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
      </Docs>
    </Member>
  </Members>
</Type>
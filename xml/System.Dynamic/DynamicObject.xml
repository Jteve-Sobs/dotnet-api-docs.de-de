<Type Name="DynamicObject" FullName="System.Dynamic.DynamicObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e164608bc4553054d830a1c2455d801b6c78e531" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78825249" /></Metadata><TypeSignature Language="C#" Value="public class DynamicObject : System.Dynamic.IDynamicMetaObjectProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicObject extends System.Object implements class System.Dynamic.IDynamicMetaObjectProvider" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Dynamic.DynamicObject" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicObject&#xA;Implements IDynamicMetaObjectProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicObject : System::Dynamic::IDynamicMetaObjectProvider" />
  <TypeSignature Language="F#" Value="type DynamicObject = class&#xA;    interface IDynamicMetaObjectProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit DynamicObject extends System.Object implements class System.Dynamic.IDynamicMetaObjectProvider" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Dynamic.Runtime</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.Core" FromVersion="4.0.0.0" To="System.Dynamic.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="System.Dynamic.Runtime" FromVersion="4.1.0.0" To="System.Linq.Expressions" ToVersion="4.2.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.Dynamic.Runtime" FromVersion="4.1.1.0" To="System.Linq.Expressions" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.Dynamic.Runtime" FromVersion="4.1.2.0" To="System.Linq.Expressions" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Dynamic.IDynamicMetaObjectProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="97149-101">Stellt eine Basisklasse zum Angeben von dynamischen Verhalten zur Laufzeit bereit.</span><span class="sxs-lookup"><span data-stu-id="97149-101">Provides a base class for specifying dynamic behavior at run time.</span></span> <span data-ttu-id="97149-102">Diese Klasse muss vererbt werden und kann nicht direkt instanziiert werden.</span><span class="sxs-lookup"><span data-stu-id="97149-102">This class must be inherited from; you cannot instantiate it directly.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97149-103">Mit der `DynamicObject`-Klasse können Sie definieren, welche Vorgänge für dynamische Objekte ausgeführt werden können und wie diese Vorgänge ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="97149-103">The `DynamicObject` class enables you to define which operations can be performed on dynamic objects and how to perform those operations.</span></span> <span data-ttu-id="97149-104">Beispielsweise können Sie definieren, was geschieht, wenn Sie versuchen, eine Objekt Eigenschaft abzurufen oder festzulegen, eine Methode aufzurufen oder mathematische Standardoperationen auszuführen, z. b. Addition und Multiplikation.</span><span class="sxs-lookup"><span data-stu-id="97149-104">For example, you can define what happens when you try to get or set an object property, call a method, or perform standard mathematical operations such as addition and multiplication.</span></span>  
  
 <span data-ttu-id="97149-105">Diese Klasse kann nützlich sein, wenn Sie ein bequemeres Protokoll für eine Bibliothek erstellen möchten.</span><span class="sxs-lookup"><span data-stu-id="97149-105">This class can be useful if you want to create a more convenient protocol for a library.</span></span> <span data-ttu-id="97149-106">Wenn z. b. Benutzer Ihrer Bibliothek Syntax wie `Scriptobj.SetProperty("Count", 1)`verwenden müssen, können Sie die Möglichkeit bieten, eine viel einfachere Syntax zu verwenden, wie z. b. `scriptobj.Count = 1`.</span><span class="sxs-lookup"><span data-stu-id="97149-106">For example, if users of your library have to use syntax like `Scriptobj.SetProperty("Count", 1)`, you can provide the ability to use much simpler syntax, like `scriptobj.Count = 1`.</span></span>  
  
 <span data-ttu-id="97149-107">Sie können eine Instanz der `DynamicObject`-Klasse nicht direkt erstellen.</span><span class="sxs-lookup"><span data-stu-id="97149-107">You cannot directly create an instance of the `DynamicObject` class.</span></span> <span data-ttu-id="97149-108">Um das dynamische Verhalten zu implementieren, können Sie von der `DynamicObject`-Klasse erben und die erforderlichen Methoden überschreiben.</span><span class="sxs-lookup"><span data-stu-id="97149-108">To implement the dynamic behavior, you may want to inherit from the `DynamicObject` class and override necessary methods.</span></span> <span data-ttu-id="97149-109">Wenn Sie z. b. nur Vorgänge zum Festlegen und erhalten von Eigenschaften benötigen, können Sie nur die Methoden <xref:System.Dynamic.DynamicObject.TrySetMember%2A> und <xref:System.Dynamic.DynamicObject.TryGetMember%2A> überschreiben.</span><span class="sxs-lookup"><span data-stu-id="97149-109">For example, if you need only operations for setting and getting properties, you can override just the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods.</span></span>  
  
 <span data-ttu-id="97149-110">Wenn C#Sie in das dynamische Verhalten für Instanzen von Klassen aktivieren möchten, die von der `DynamicObject`-Klasse abgeleitet sind, müssen Sie das `dynamic`-Schlüsselwort verwenden.</span><span class="sxs-lookup"><span data-stu-id="97149-110">In C#, to enable dynamic behavior for instances of classes derived from the `DynamicObject` class, you must use the `dynamic` keyword.</span></span> <span data-ttu-id="97149-111">Weitere Informationen finden Sie unter [Verwenden von dynamischen Typen](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span><span class="sxs-lookup"><span data-stu-id="97149-111">For more information, see [Using Type dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span></span>  
  
 <span data-ttu-id="97149-112">In Visual Basic werden dynamische Vorgänge von späterer Bindung unterstützt.</span><span class="sxs-lookup"><span data-stu-id="97149-112">In Visual Basic, dynamic operations are supported by late binding.</span></span> <span data-ttu-id="97149-113">Weitere Informationen finden Sie unter [frühe und späte Bindung (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/early-late-binding/index.md).</span><span class="sxs-lookup"><span data-stu-id="97149-113">For more information, see [Early and Late Binding (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/early-late-binding/index.md).</span></span>  
  
 <span data-ttu-id="97149-114">Im folgenden Codebeispiel wird veranschaulicht, wie eine Instanz einer Klasse erstellt wird, die von der `DynamicObject`-Klasse abgeleitet wird.</span><span class="sxs-lookup"><span data-stu-id="97149-114">The following code example demonstrates how to create an instance of a class that is derived from the `DynamicObject` class.</span></span>  
  
```csharp  
public class SampleDynamicObject : DynamicObject {}  
//...  
dynamic sampleObject = new SampleDynamicObject ();  
```  
  
```vb  
Public Class SampleDynamicObject   
    Inherits DynamicObject  
'...  
Dim sampleObject As Object = New SampleDynamicObject()  
```  
  
 <span data-ttu-id="97149-115">Sie können auch eigene Member zu Klassen hinzufügen, die von der `DynamicObject`-Klasse abgeleitet werden.</span><span class="sxs-lookup"><span data-stu-id="97149-115">You can also add your own members to classes derived from the `DynamicObject` class.</span></span> <span data-ttu-id="97149-116">Wenn Ihre Klasse Eigenschaften definiert und auch die <xref:System.Dynamic.DynamicObject.TrySetMember%2A>-Methode überschreibt, verwendet die DLR (Dynamic Language Runtime) zuerst den sprach Binder, um nach einer statischen Definition einer Eigenschaft in der Klasse zu suchen.</span><span class="sxs-lookup"><span data-stu-id="97149-116">If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</span></span> <span data-ttu-id="97149-117">Wenn keine solche Eigenschaft vorhanden ist, ruft die DLR die <xref:System.Dynamic.DynamicObject.TrySetMember%2A>-Methode auf.</span><span class="sxs-lookup"><span data-stu-id="97149-117">If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.</span></span>  
  
 <span data-ttu-id="97149-118">Die `DynamicObject`-Klasse implementiert die DLR-Schnittstelle <xref:System.Dynamic.IDynamicMetaObjectProvider>, mit der Sie Instanzen der `DynamicObject`-Klasse zwischen Sprachen freigeben können, die das DLR-Interoperabilitäts Modell unterstützen.</span><span class="sxs-lookup"><span data-stu-id="97149-118">The `DynamicObject` class implements the DLR interface <xref:System.Dynamic.IDynamicMetaObjectProvider>, which enables you to share instances of the `DynamicObject` class between languages that support the DLR interoperability model.</span></span> <span data-ttu-id="97149-119">Beispielsweise können Sie eine Instanz der `DynamicObject`-Klasse in C# erstellen und diese dann an eine IronPython-Funktion übergeben.</span><span class="sxs-lookup"><span data-stu-id="97149-119">For example, you can create an instance of the `DynamicObject` class in C# and then pass it to an IronPython function.</span></span> <span data-ttu-id="97149-120">Weitere Informationen finden Sie unter [Übersicht über die Dynamic Language Runtime](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md).</span><span class="sxs-lookup"><span data-stu-id="97149-120">For more information, see [Dynamic Language Runtime Overview](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97149-121">Wenn Sie ein einfaches Szenario benötigen, das nur Elemente zur Laufzeit hinzufügen und entfernen kann, jedoch keine bestimmten Vorgänge definieren muss und keine statischen Member enthält, verwenden Sie die <xref:System.Dynamic.ExpandoObject>-Klasse.</span><span class="sxs-lookup"><span data-stu-id="97149-121">If you have a simple scenario in which you need an object that can only add and remove members at run time but that does not need to define specific operations and does not have static members, use the <xref:System.Dynamic.ExpandoObject> class.</span></span>  
>   
>  <span data-ttu-id="97149-122">Wenn Sie ein erweitertes Szenario haben, in dem Sie definieren müssen, wie dynamische Objekte am Interoperabilitäts Protokoll beteiligt sind, oder Sie das schnelle dynamische dispatchcaching von DLR verwalten müssen, erstellen Sie eine eigene Implementierung der <xref:System.Dynamic.IDynamicMetaObjectProvider>-Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="97149-122">If you have a more advanced scenario in which you need to define how dynamic objects participate in the interoperability protocol, or you need to manage DLR fast dynamic dispatch caching, create your own implementation of the <xref:System.Dynamic.IDynamicMetaObjectProvider> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97149-123">Angenommen, Sie möchten eine alternative Syntax für den Zugriff auf Werte in einem Wörterbuch bereitstellen, sodass Sie `sampleDictionary.Text = "Sample text"`schreiben können, statt `sampleDictionary["Text"] = "Sample text"` zu schreiben (`sampleDictionary("Text") = "Sample text"` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="97149-123">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="97149-124">Außerdem sollte bei dieser Syntax die Groß-/Kleinschreibung nicht beachtet werden, sodass `sampleDictionary.Text` `sampleDictionary.text`entspricht.</span><span class="sxs-lookup"><span data-stu-id="97149-124">Also, you want this syntax to be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.</span></span>  
  
 <span data-ttu-id="97149-125">Im folgenden Codebeispiel wird die `DynamicDictionary`-Klasse veranschaulicht, die von der `DynamicObject`-Klasse abgeleitet wird.</span><span class="sxs-lookup"><span data-stu-id="97149-125">The following code example demonstrates the `DynamicDictionary` class, which is derived from the `DynamicObject` class.</span></span> <span data-ttu-id="97149-126">Die `DynamicDictionary`-Klasse enthält ein Objekt des `Dictionary<string, object>`-Typs (`Dictionary(Of String, Object)` in Visual Basic) zum Speichern der Schlüssel-Wert-Paare und überschreibt die <xref:System.Dynamic.DynamicObject.TrySetMember%2A>-Methode und die <xref:System.Dynamic.DynamicObject.TryGetMember%2A>-Methode, um die neue Syntax zu unterstützen.</span><span class="sxs-lookup"><span data-stu-id="97149-126">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="97149-127">Außerdem wird eine `Count`-Eigenschaft bereitstellt, die anzeigt, wie viele dynamische Eigenschaften das Wörterbuch enthält.</span><span class="sxs-lookup"><span data-stu-id="97149-127">It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 <span data-ttu-id="97149-128">Weitere Beispiele finden Sie unter [Erstellen von Wrappern mit DynamicObject](https://devblogs.microsoft.com/csharpfaq/dynamic-in-c-4-0-creating-wrappers-with-dynamicobject/) im Blog mit C# häufig gestellten Fragen.</span><span class="sxs-lookup"><span data-stu-id="97149-128">For more examples, see [Creating Wrappers with DynamicObject](https://devblogs.microsoft.com/csharpfaq/dynamic-in-c-4-0-creating-wrappers-with-dynamicobject/) on the C# Frequently Asked Questions blog.</span></span>  
 
 
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DynamicObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DynamicObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97149-129">Ermöglicht es abgeleiteten Typen, eine neue Instanz des <see cref="T:System.Dynamic.DynamicObject" />-Typs zu initialisieren.</span><span class="sxs-lookup"><span data-stu-id="97149-129">Enables derived types to initialize a new instance of the <see cref="T:System.Dynamic.DynamicObject" /> type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97149-130">Sie können eine Instanz der <xref:System.Dynamic.DynamicObject>-Klasse nicht direkt erstellen.</span><span class="sxs-lookup"><span data-stu-id="97149-130">You cannot directly create an instance of the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="97149-131">Um dynamisches Verhalten zu implementieren, müssen Sie von der <xref:System.Dynamic.DynamicObject>-Klasse erben und die erforderlichen Methoden überschreiben.</span><span class="sxs-lookup"><span data-stu-id="97149-131">To implement dynamic behavior, you have to inherit from the <xref:System.Dynamic.DynamicObject> class and override necessary methods.</span></span>  
  
 <span data-ttu-id="97149-132">In C#müssen Sie das `dynamic`-Schlüsselwort verwenden, um das dynamische Verhalten für Instanzen der von der <xref:System.Dynamic.DynamicObject>-Klasse abgeleiteten Klassen zu aktivieren.</span><span class="sxs-lookup"><span data-stu-id="97149-132">In C#, to enable dynamic behavior for instances of the classes derived from the <xref:System.Dynamic.DynamicObject> class, you must use the `dynamic` keyword.</span></span> <span data-ttu-id="97149-133">Weitere Informationen finden Sie unter [Verwenden von dynamischen Typen](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span><span class="sxs-lookup"><span data-stu-id="97149-133">For more information, see [Using Type dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span></span>  
  
 <span data-ttu-id="97149-134">In Visual Basic werden dynamische Vorgänge von späterer Bindung unterstützt.</span><span class="sxs-lookup"><span data-stu-id="97149-134">In Visual Basic, dynamic operations are supported by late binding.</span></span> <span data-ttu-id="97149-135">Weitere Informationen finden Sie unter [frühe und späte Bindung (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/early-late-binding/index.md).</span><span class="sxs-lookup"><span data-stu-id="97149-135">For more information, see [Early and Late Binding (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/early-late-binding/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97149-136">Im folgenden Codebeispiel wird veranschaulicht, wie eine Instanz von-Klassen erstellt wird, die von der <xref:System.Dynamic.DynamicObject>-Klasse abgeleitet werden.</span><span class="sxs-lookup"><span data-stu-id="97149-136">The following code example demonstrates how to create an instance of classes that are derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
```csharp  
public class SampleDynamicObject : DynamicObject {}  
//...  
dynamic sampleObject = new SampleDynamicObject ();  
```  
  
```vb  
Public Class SampleDynamicObject   
    Inherits DynamicObject  
'...  
Dim sampleObject As Object = New SampleDynamicObject()  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDynamicMemberNames">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;string&gt; GetDynamicMemberNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;string&gt; GetDynamicMemberNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.GetDynamicMemberNames" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDynamicMemberNames () As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ GetDynamicMemberNames();" />
      <MemberSignature Language="F#" Value="abstract member GetDynamicMemberNames : unit -&gt; seq&lt;string&gt;&#xA;override this.GetDynamicMemberNames : unit -&gt; seq&lt;string&gt;" Usage="dynamicObject.GetDynamicMemberNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97149-137">Gibt die Enumeration aller dynamischen Membernamen zurück.</span><span class="sxs-lookup"><span data-stu-id="97149-137">Returns the enumeration of all dynamic member names.</span></span></summary>
        <returns><span data-ttu-id="97149-138">Eine Sequenz, die dynamische Membernamen enthält.</span><span class="sxs-lookup"><span data-stu-id="97149-138">A sequence that contains dynamic member names.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97149-139">Diese Methode ist nur zu Debuggingzwecken vorhanden.</span><span class="sxs-lookup"><span data-stu-id="97149-139">This method exists for debugging purposes only.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetaObject">
      <MemberSignature Language="C#" Value="public virtual System.Dynamic.DynamicMetaObject GetMetaObject (System.Linq.Expressions.Expression parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Dynamic.DynamicMetaObject GetMetaObject(class System.Linq.Expressions.Expression parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetaObject (parameter As Expression) As DynamicMetaObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Dynamic::DynamicMetaObject ^ GetMetaObject(System::Linq::Expressions::Expression ^ parameter);" />
      <MemberSignature Language="F#" Value="abstract member GetMetaObject : System.Linq.Expressions.Expression -&gt; System.Dynamic.DynamicMetaObject&#xA;override this.GetMetaObject : System.Linq.Expressions.Expression -&gt; System.Dynamic.DynamicMetaObject" Usage="dynamicObject.GetMetaObject parameter" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Dynamic.DynamicMetaObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="97149-140">Der Ausdruck, der das an die dynamischen virtuellen Methoden zu sendende <see cref="T:System.Dynamic.DynamicMetaObject" /> darstellt.</span><span class="sxs-lookup"><span data-stu-id="97149-140">The expression that represents <see cref="T:System.Dynamic.DynamicMetaObject" /> to dispatch to the dynamic virtual methods.</span></span></param>
        <summary><span data-ttu-id="97149-141">Stellt ein <see cref="T:System.Dynamic.DynamicMetaObject" /> bereit, das an die dynamischen virtuellen Methoden sendet.</span><span class="sxs-lookup"><span data-stu-id="97149-141">Provides a <see cref="T:System.Dynamic.DynamicMetaObject" /> that dispatches to the dynamic virtual methods.</span></span> <span data-ttu-id="97149-142">Das Objekt kann in einem anderen <see cref="T:System.Dynamic.DynamicMetaObject" /> gekapselt werden, um benutzerdefiniertes Verhalten für einzelne Aktionen bereitzustellen.</span><span class="sxs-lookup"><span data-stu-id="97149-142">The object can be encapsulated inside another <see cref="T:System.Dynamic.DynamicMetaObject" /> to provide custom behavior for individual actions.</span></span> <span data-ttu-id="97149-143">Diese Methode unterstützt die Dynamic Language Runtime-Infrastruktur für Sprachimplementierungen und ist nicht für die direkte Verwendung im Code vorgesehen.</span><span class="sxs-lookup"><span data-stu-id="97149-143">This method supports the Dynamic Language Runtime infrastructure for language implementers and it is not intended to be used directly from your code.</span></span></summary>
        <returns><span data-ttu-id="97149-144">Ein Objekt des <see cref="T:System.Dynamic.DynamicMetaObject" />-Typs.</span><span class="sxs-lookup"><span data-stu-id="97149-144">An object of the <see cref="T:System.Dynamic.DynamicMetaObject" /> type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryBinaryOperation">
      <MemberSignature Language="C#" Value="public virtual bool TryBinaryOperation (System.Dynamic.BinaryOperationBinder binder, object arg, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryBinaryOperation(class System.Dynamic.BinaryOperationBinder binder, object arg, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryBinaryOperation (binder As BinaryOperationBinder, arg As Object, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryBinaryOperation(System::Dynamic::BinaryOperationBinder ^ binder, System::Object ^ arg, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryBinaryOperation : System.Dynamic.BinaryOperationBinder * obj * obj -&gt; bool&#xA;override this.TryBinaryOperation : System.Dynamic.BinaryOperationBinder * obj * obj -&gt; bool" Usage="dynamicObject.TryBinaryOperation (binder, arg, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.BinaryOperationBinder" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="97149-145">Stellt Informationen zur binären Operation bereit.</span><span class="sxs-lookup"><span data-stu-id="97149-145">Provides information about the binary operation.</span></span> <span data-ttu-id="97149-146">Die <c>binder.Operation</c>-Eigenschaft gibt ein <see cref="T:System.Linq.Expressions.ExpressionType" />-Objekt zurück.</span><span class="sxs-lookup"><span data-stu-id="97149-146">The <c>binder.Operation</c> property returns an <see cref="T:System.Linq.Expressions.ExpressionType" /> object.</span></span> <span data-ttu-id="97149-147">Für die Anweisung <c>sum = first + second</c>, bei der <c>first</c> und <c>second</c> von der <see langword="DynamicObject" />-Klasse abgeleitet wurden, gibt <c>binder.Operation</c> beispielsweise <c>ExpressionType.Add</c> zurück.</span><span class="sxs-lookup"><span data-stu-id="97149-147">For example, for the <c>sum = first + second</c> statement, where <c>first</c> and <c>second</c> are derived from the <see langword="DynamicObject" /> class, <c>binder.Operation</c> returns <c>ExpressionType.Add</c>.</span></span></param>
        <param name="arg"><span data-ttu-id="97149-148">Der rechte Operand für die binäre Operation.</span><span class="sxs-lookup"><span data-stu-id="97149-148">The right operand for the binary operation.</span></span> <span data-ttu-id="97149-149">Für die Anweisung <c>sum = first + second</c>, bei der <c>first</c> und <c>second</c> von der <see langword="DynamicObject" />-Klasse abgeleitet wurden, ist <paramref name="arg" /> beispielsweise gleich <c>second</c>.</span><span class="sxs-lookup"><span data-stu-id="97149-149">For example, for the <c>sum = first + second</c> statement, where <c>first</c> and <c>second</c> are derived from the <see langword="DynamicObject" /> class, <paramref name="arg" /> is equal to <c>second</c>.</span></span></param>
        <param name="result"><span data-ttu-id="97149-150">Das Ergebnis der binären Operation.</span><span class="sxs-lookup"><span data-stu-id="97149-150">The result of the binary operation.</span></span></param>
        <summary><span data-ttu-id="97149-151">Stellt die Implementierung für binäre Operationen bereit.</span><span class="sxs-lookup"><span data-stu-id="97149-151">Provides implementation for binary operations.</span></span> <span data-ttu-id="97149-152">Von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitete Klassen können diese Methode überschreiben, um dynamisches Verhalten für Operationen wie Addition oder Multiplikation anzugeben.</span><span class="sxs-lookup"><span data-stu-id="97149-152">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as addition and multiplication.</span></span></summary>
        <returns><span data-ttu-id="97149-153"><see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="97149-153"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="97149-154">Wenn die Methode <see langword="false" /> zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt.</span><span class="sxs-lookup"><span data-stu-id="97149-154">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="97149-155">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="97149-155">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97149-156">Von der <xref:System.Dynamic.DynamicObject>-Klasse abgeleitete Klassen können diese Methode überschreiben, um anzugeben, wie binäre Vorgänge für ein dynamisches Objekt ausgeführt werden sollen.</span><span class="sxs-lookup"><span data-stu-id="97149-156">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how binary operations should be performed for a dynamic object.</span></span> <span data-ttu-id="97149-157">Wenn die Methode nicht überschrieben wird, bestimmt der Lauf Zeit Binder der Sprache das Verhalten.</span><span class="sxs-lookup"><span data-stu-id="97149-157">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="97149-158">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="97149-158">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="97149-159">Diese Methode wird aufgerufen, wenn Sie über binäre Vorgänge wie Addition oder Multiplikation verfügen.</span><span class="sxs-lookup"><span data-stu-id="97149-159">This method is called when you have binary operations such as addition or multiplication.</span></span> <span data-ttu-id="97149-160">Wenn die <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A>-Methode z. b. überschrieben wird, wird Sie automatisch für-Anweisungen wie `sum = first + second` oder `multiply = first*second`aufgerufen, wobei `first` von der `DynamicObject`-Klasse abgeleitet wird.</span><span class="sxs-lookup"><span data-stu-id="97149-160">For example, if the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method is overridden, it is automatically invoked for statements like `sum = first + second` or `multiply = first*second`, where `first` is derived from the `DynamicObject` class.</span></span>  
  
 <span data-ttu-id="97149-161">Sie können Informationen über den Typ des binären Vorgangs abrufen, indem Sie die `Operation`-Eigenschaft des `binder`-Parameters verwenden.</span><span class="sxs-lookup"><span data-stu-id="97149-161">You can get information about the type of the binary operation by using the `Operation` property of the `binder` parameter.</span></span>  
  
 <span data-ttu-id="97149-162">Wenn das dynamische Objekt nur in C# -und-Visual Basic verwendet wird, kann die `binder.Operation`-Eigenschaft einen der folgenden Werte aus der <xref:System.Linq.Expressions.ExpressionType>-Enumeration aufweisen.</span><span class="sxs-lookup"><span data-stu-id="97149-162">If your dynamic object is used only in C# and Visual Basic, the `binder.Operation` property can have one of the following values from the <xref:System.Linq.Expressions.ExpressionType> enumeration.</span></span> <span data-ttu-id="97149-163">In anderen Sprachen wie IronPython oder IronRuby können Sie jedoch auch andere Werte haben.</span><span class="sxs-lookup"><span data-stu-id="97149-163">However, in other languages such as IronPython or IronRuby, you can have other values.</span></span>
  
|<span data-ttu-id="97149-164">Wert</span><span class="sxs-lookup"><span data-stu-id="97149-164">Value</span></span>|<span data-ttu-id="97149-165">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="97149-165">Description</span></span>|<span data-ttu-id="97149-166">C#</span><span class="sxs-lookup"><span data-stu-id="97149-166">C#</span></span>|<span data-ttu-id="97149-167">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="97149-167">Visual Basic</span></span>|  
|-----------|-----------------|---------|------------------|  
|`Add`|<span data-ttu-id="97149-168">Eine Additions Operation ohne Überlauf Überprüfung für numerische Operanden.</span><span class="sxs-lookup"><span data-stu-id="97149-168">An addition operation without overflow checking, for numeric operands.</span></span>|`a + b`|`a + b`|  
|`AddAssign`|<span data-ttu-id="97149-169">Ein Additions Verbund Zuweisungs Vorgang ohne Überlauf Überprüfung für numerische Operanden.</span><span class="sxs-lookup"><span data-stu-id="97149-169">An addition compound assignment operation without overflow checking, for numeric operands.</span></span>|`a += b`|<span data-ttu-id="97149-170">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="97149-170">Not supported.</span></span>|  
|`And`|<span data-ttu-id="97149-171">Ein bitweiser `AND` Vorgang.</span><span class="sxs-lookup"><span data-stu-id="97149-171">A bitwise `AND` operation.</span></span>|`a & b`|`a And b`|  
|`AndAssign`|<span data-ttu-id="97149-172">Ein bitweiser `AND` Verbund Zuweisungs Vorgang.</span><span class="sxs-lookup"><span data-stu-id="97149-172">A bitwise `AND` compound assignment operation.</span></span>|`a &= b`|<span data-ttu-id="97149-173">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="97149-173">Not supported.</span></span>|  
|`Divide`|<span data-ttu-id="97149-174">Ein arithmetischer Divisions Vorgang.</span><span class="sxs-lookup"><span data-stu-id="97149-174">An arithmetic division operation.</span></span>|`a / b`|`a / b`|  
|`DivideAssign`|<span data-ttu-id="97149-175">Eine zusammengesetzte Zuweisungs Operation für eine arithmetische Division.</span><span class="sxs-lookup"><span data-stu-id="97149-175">An arithmetic division compound assignment operation.</span></span>|`a /= b`|<span data-ttu-id="97149-176">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="97149-176">Not supported.</span></span>|  
|`ExclusiveOr`|<span data-ttu-id="97149-177">Ein bitweiser `XOR` Vorgang.</span><span class="sxs-lookup"><span data-stu-id="97149-177">A bitwise `XOR` operation.</span></span>|`a ^ b`|`a Xor b`|  
|`ExclusiveOrAssign`|<span data-ttu-id="97149-178">Ein bitweiser `XOR` Verbund Zuweisungs Vorgang.</span><span class="sxs-lookup"><span data-stu-id="97149-178">A bitwise `XOR` compound assignment operation.</span></span>|`a ^= b`|<span data-ttu-id="97149-179">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="97149-179">Not supported.</span></span>|  
|`GreaterThan`|<span data-ttu-id="97149-180">Ein "größer als"-Vergleich.</span><span class="sxs-lookup"><span data-stu-id="97149-180">A "greater than" comparison.</span></span>|`a > b`|`a > b`|  
|`GreaterThanOrEqual`|<span data-ttu-id="97149-181">Ein "größer oder gleich"-Vergleich.</span><span class="sxs-lookup"><span data-stu-id="97149-181">A "greater than or equal to" comparison.</span></span>|`a >= b`|<span data-ttu-id="97149-182">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="97149-182">Not supported.</span></span>|  
|`LeftShift`|<span data-ttu-id="97149-183">Ein bitweiser Left Shift-Vorgang.</span><span class="sxs-lookup"><span data-stu-id="97149-183">A bitwise left-shift operation.</span></span>|`a << b`|`a << b`|  
|`LeftShiftAssign`|<span data-ttu-id="97149-184">Eine bitweise zusammengesetzte Links Schiebe-Zuweisungs Operation.</span><span class="sxs-lookup"><span data-stu-id="97149-184">A bitwise left-shift compound assignment operation.</span></span>|`a <<= b`|<span data-ttu-id="97149-185">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="97149-185">Not supported.</span></span>|  
|`LessThan`|<span data-ttu-id="97149-186">Ein "kleiner als"-Vergleich.</span><span class="sxs-lookup"><span data-stu-id="97149-186">A "less than" comparison.</span></span>|`a < b`|`a < b`|  
|`LessThanOrEqual`|<span data-ttu-id="97149-187">Ein "kleiner oder gleich"-Vergleich.</span><span class="sxs-lookup"><span data-stu-id="97149-187">A "less than or equal to" comparison.</span></span>|`a <= b`|<span data-ttu-id="97149-188">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="97149-188">Not supported.</span></span>|  
|`Modulo`|<span data-ttu-id="97149-189">Ein arithmetischer Rest Vorgang.</span><span class="sxs-lookup"><span data-stu-id="97149-189">An arithmetic remainder operation.</span></span>|`a % b`|`a Mod b`|  
|`ModuloAssign`|<span data-ttu-id="97149-190">Ein arithmetischer Rest-Verbund Zuweisungs Vorgang.</span><span class="sxs-lookup"><span data-stu-id="97149-190">An arithmetic remainder compound assignment operation.</span></span>|`a %= b`|<span data-ttu-id="97149-191">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="97149-191">Not supported.</span></span>|  
|`Multiply`|<span data-ttu-id="97149-192">Ein Multiplikations Vorgang ohne Überlauf Überprüfung für numerische Operanden.</span><span class="sxs-lookup"><span data-stu-id="97149-192">A multiplication operation without overflow checking, for numeric operands.</span></span>|`a * b`|`a * b`|  
|`MultiplyAssign`|<span data-ttu-id="97149-193">Eine Multiplikations Verbund Zuweisung ohne Überlauf Überprüfung für numerische Operanden.</span><span class="sxs-lookup"><span data-stu-id="97149-193">A multiplication compound assignment operation without overflow checking, for numeric operands.</span></span>|`a *= b`|<span data-ttu-id="97149-194">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="97149-194">Not supported.</span></span>|  
|`NotEqual`|<span data-ttu-id="97149-195">Ein Ungleichheits Vergleich.</span><span class="sxs-lookup"><span data-stu-id="97149-195">An inequality comparison.</span></span>|`a != b`|`a <> b`|  
|`Or`|<span data-ttu-id="97149-196">Ein bitweiser oder logischer `OR` Vorgang.</span><span class="sxs-lookup"><span data-stu-id="97149-196">A bitwise or logical `OR` operation.</span></span>|`a &#124; b`|`a Or b`|  
|`OrAssign`|<span data-ttu-id="97149-197">Eine bitweise oder logische `OR` Verbund Zuweisung.</span><span class="sxs-lookup"><span data-stu-id="97149-197">A bitwise or logical `OR` compound assignment.</span></span>|`a &#124;= b`|<span data-ttu-id="97149-198">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="97149-198">Not supported.</span></span>|  
|`Power`|<span data-ttu-id="97149-199">Ein mathematischer Vorgang, bei dem eine Zahl in eine Stromversorgung erhöht wird.</span><span class="sxs-lookup"><span data-stu-id="97149-199">A mathematical operation of raising a number to a power.</span></span>|<span data-ttu-id="97149-200">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="97149-200">Not supported.</span></span>|`a ^ b`|  
|`RightShift`|<span data-ttu-id="97149-201">Ein bitweiser rechts Schiebe Vorgang.</span><span class="sxs-lookup"><span data-stu-id="97149-201">A bitwise right-shift operation.</span></span>|`a >> b`|`a >> b`|  
|`RightShiftAssign`|<span data-ttu-id="97149-202">Eine bitweise zusammengesetzte rechts Schiebe-Zuweisungs Operation.</span><span class="sxs-lookup"><span data-stu-id="97149-202">A bitwise right-shift compound assignment operation.</span></span>|`a >>= b`|<span data-ttu-id="97149-203">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="97149-203">Not supported.</span></span>|  
|`Subtract`|<span data-ttu-id="97149-204">Eine Subtraktions Operation ohne Überlauf Überprüfung für numerische Operanden.</span><span class="sxs-lookup"><span data-stu-id="97149-204">A subtraction operation without overflow checking, for numeric operands.</span></span>|`a - b`|`a - b`|  
|`SubtractAssign`|<span data-ttu-id="97149-205">Eine Subtraktions Verbund-Zuweisungs Operation ohne Überlauf Überprüfung für numerische Operanden.</span><span class="sxs-lookup"><span data-stu-id="97149-205">A subtraction compound assignment operation without overflow checking, for numeric operands.</span></span>|`a -= b`|<span data-ttu-id="97149-206">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="97149-206">Not supported.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="97149-207">Um `OrElse`-(`a || b`) und `AndAlso`-Vorgänge (`a && b`) für dynamische Objekte C#in zu implementieren, können Sie sowohl die <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A>-Methode als auch die <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A>-Methode implementieren.</span><span class="sxs-lookup"><span data-stu-id="97149-207">To implement `OrElse` (`a || b`) and `AndAlso` (`a && b`) operations for dynamic objects in C#, you may want to implement both the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method and the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method.</span></span>  
>   
>  <span data-ttu-id="97149-208">Der `OrElse` Vorgang besteht aus dem unären `IsTrue` Vorgang und dem binären `Or` Vorgang.</span><span class="sxs-lookup"><span data-stu-id="97149-208">The `OrElse` operation consists of the unary `IsTrue` operation and the binary `Or` operation.</span></span> <span data-ttu-id="97149-209">Der `Or` Vorgang wird nur ausgeführt, wenn das Ergebnis des `IsTrue` Vorgangs `false`ist.</span><span class="sxs-lookup"><span data-stu-id="97149-209">The `Or` operation is performed only if the result of the `IsTrue` operation is `false`.</span></span>  
>   
>  <span data-ttu-id="97149-210">Der `AndAlso` Vorgang besteht aus dem unären `IsFalse` Vorgang und dem binären `And` Vorgang.</span><span class="sxs-lookup"><span data-stu-id="97149-210">The `AndAlso` operation consists of the unary `IsFalse` operation and the binary `And` operation.</span></span> <span data-ttu-id="97149-211">Der `And` Vorgang wird nur ausgeführt, wenn das Ergebnis des `IsFalse` Vorgangs `false`ist.</span><span class="sxs-lookup"><span data-stu-id="97149-211">The `And` operation is performed only if the result of the `IsFalse` operation is `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97149-212">Angenommen, Sie benötigen eine Datenstruktur zum Speichern von Text-und numerischen Darstellungen von Zahlen, und Sie möchten grundlegende mathematische Operationen wie Addition und Subtraktion für solche Daten definieren.</span><span class="sxs-lookup"><span data-stu-id="97149-212">Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define basic mathematical operations such as addition and subtraction for such data.</span></span>  
  
 <span data-ttu-id="97149-213">Im folgenden Codebeispiel wird die `DynamicNumber`-Klasse veranschaulicht, die von der <xref:System.Dynamic.DynamicObject>-Klasse abgeleitet wird.</span><span class="sxs-lookup"><span data-stu-id="97149-213">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="97149-214">`DynamicNumber` überschreibt die <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A>-Methode, um mathematische Vorgänge zu aktivieren.</span><span class="sxs-lookup"><span data-stu-id="97149-214">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method to enable mathematical operations.</span></span> <span data-ttu-id="97149-215">Außerdem werden die Methoden <xref:System.Dynamic.DynamicObject.TrySetMember%2A> und <xref:System.Dynamic.DynamicObject.TryGetMember%2A> überschrieben, um den Zugriff auf die Elemente zu ermöglichen.</span><span class="sxs-lookup"><span data-stu-id="97149-215">It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the elements.</span></span>  
  
 <span data-ttu-id="97149-216">In diesem Beispiel werden nur Additions-und Subtraktions Vorgänge unterstützt.</span><span class="sxs-lookup"><span data-stu-id="97149-216">In this example, only addition and subtraction operations are supported.</span></span> <span data-ttu-id="97149-217">Wenn Sie versuchen, eine Anweisung wie `resultNumber = firstNumber*secondNumber`zu schreiben, wird eine Lauf Zeit Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="97149-217">If you try to write a statement like `resultNumber = firstNumber*secondNumber`, a run-time exception is thrown.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#2)]
 [!code-vb[System.Dynamic.DynamicObject#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryConvert">
      <MemberSignature Language="C#" Value="public virtual bool TryConvert (System.Dynamic.ConvertBinder binder, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryConvert(class System.Dynamic.ConvertBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryConvert (binder As ConvertBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryConvert(System::Dynamic::ConvertBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryConvert : System.Dynamic.ConvertBinder * obj -&gt; bool&#xA;override this.TryConvert : System.Dynamic.ConvertBinder * obj -&gt; bool" Usage="dynamicObject.TryConvert (binder, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.ConvertBinder" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="97149-218">Stellt Informationen zur Konvertierungsoperation bereit.</span><span class="sxs-lookup"><span data-stu-id="97149-218">Provides information about the conversion operation.</span></span> <span data-ttu-id="97149-219">Die <c>binder.Type</c>-Eigenschaft stellt den Typ bereit, in den das Objekt konvertiert werden muss.</span><span class="sxs-lookup"><span data-stu-id="97149-219">The <c>binder.Type</c> property provides the type to which the object must be converted.</span></span> <span data-ttu-id="97149-220">Für die Anweisung <c>(String)sampleObject</c> in C# (<c>CType(sampleObject, Type)</c> in Visual Basic), bei der <c>sampleObject</c> eine Instanz der Klasse ist, die von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet wurde, gibt <c>binder.Type</c> beispielsweise den <see cref="T:System.String" />-Typ zurück.</span><span class="sxs-lookup"><span data-stu-id="97149-220">For example, for the statement <c>(String)sampleObject</c> in C# (<c>CType(sampleObject, Type)</c> in Visual Basic), where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Type</c> returns the <see cref="T:System.String" /> type.</span></span> <span data-ttu-id="97149-221">Die <c>binder.Explicit</c>-Eigenschaft stellt Informationen zur Art der ausgeführten Konvertierung bereit.</span><span class="sxs-lookup"><span data-stu-id="97149-221">The <c>binder.Explicit</c> property provides information about the kind of conversion that occurs.</span></span> <span data-ttu-id="97149-222">Für die explizite Konvertierung wird <see langword="true" /> und für die implizite Konvertierung wird <see langword="false" /> zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="97149-222">It returns <see langword="true" /> for explicit conversion and <see langword="false" /> for implicit conversion.</span></span></param>
        <param name="result"><span data-ttu-id="97149-223">Das Ergebnis des Typkonvertierungsvorgangs.</span><span class="sxs-lookup"><span data-stu-id="97149-223">The result of the type conversion operation.</span></span></param>
        <summary><span data-ttu-id="97149-224">Stellt die Implementierung für Typkonvertierungsvorgänge bereit.</span><span class="sxs-lookup"><span data-stu-id="97149-224">Provides implementation for type conversion operations.</span></span> <span data-ttu-id="97149-225">Von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitete Klassen können diese Methode überschreiben, um dynamisches Verhalten für Operationen anzugeben, die ein Objekt von einem Typ in einen anderen konvertieren.</span><span class="sxs-lookup"><span data-stu-id="97149-225">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.</span></span></summary>
        <returns><span data-ttu-id="97149-226"><see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="97149-226"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="97149-227">Wenn die Methode <see langword="false" /> zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt.</span><span class="sxs-lookup"><span data-stu-id="97149-227">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="97149-228">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="97149-228">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97149-229">Von der <xref:System.Dynamic.DynamicObject>-Klasse abgeleitete Klassen können diese Methode überschreiben, um anzugeben, wie eine Typkonvertierung für ein dynamisches Objekt durchgeführt werden soll.</span><span class="sxs-lookup"><span data-stu-id="97149-229">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a type conversion should be performed for a dynamic object.</span></span> <span data-ttu-id="97149-230">Wenn die Methode nicht überschrieben wird, bestimmt der Lauf Zeit Binder der Sprache das Verhalten.</span><span class="sxs-lookup"><span data-stu-id="97149-230">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="97149-231">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="97149-231">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="97149-232">Wenn C#diese Methode in überschrieben wird, wird Sie automatisch aufgerufen, wenn Sie über eine explizite oder implizite Konvertierung verfügen, wie im folgenden Codebeispiel gezeigt.</span><span class="sxs-lookup"><span data-stu-id="97149-232">In C#, if this method is overridden, it is automatically invoked when you have an explicit or implicit conversion, as shown in the code example below.</span></span>  
  
 <span data-ttu-id="97149-233">In Visual Basic wird nur die explizite Konvertierung unterstützt.</span><span class="sxs-lookup"><span data-stu-id="97149-233">In Visual Basic, only explicit conversion is supported.</span></span> <span data-ttu-id="97149-234">Wenn Sie diese Methode überschreiben, wird Sie mithilfe der Funktionen <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> oder <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="97149-234">If you override this method, you call it by using the <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> or <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> functions.</span></span>  
  
```csharp  
// Explicit conversion.  
String sampleExplicit = (String)sampleObject;  
// Implicit conversion.  
String sampleImplicit = sampleObject;  
```  
  
```vb  
// Explicit conversion - first variant.  
Dim testExplicit1 = CTypeDynamic(Of String)(sampleObject)  
// Explicit conversion - second variant.  
Dim testExplicit2 = CTypeDynamic(sampleObject, GetType(String))  
```  
  
   
  
## Examples  
 <span data-ttu-id="97149-235">Angenommen, Sie benötigen eine Datenstruktur zum Speichern von Text-und numerischen Darstellungen von Zahlen, und Sie möchten Konvertierungen dieser Datenstruktur in Zeichen folgen und ganze Zahlen definieren.</span><span class="sxs-lookup"><span data-stu-id="97149-235">Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define conversions of this data structure to strings and integers.</span></span>  
  
 <span data-ttu-id="97149-236">Im folgenden Codebeispiel wird die `DynamicNumber`-Klasse veranschaulicht, die von der <xref:System.Dynamic.DynamicObject>-Klasse abgeleitet wird.</span><span class="sxs-lookup"><span data-stu-id="97149-236">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="97149-237">`DynamicNumber` überschreibt die <xref:System.Dynamic.DynamicObject.TryConvert%2A>-Methode, um die Typkonvertierung zu aktivieren.</span><span class="sxs-lookup"><span data-stu-id="97149-237">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryConvert%2A> method to enable type conversion.</span></span> <span data-ttu-id="97149-238">Außerdem werden die Methoden <xref:System.Dynamic.DynamicObject.TrySetMember%2A> und <xref:System.Dynamic.DynamicObject.TryGetMember%2A> überschrieben, um den Zugriff auf die Datenelemente zu ermöglichen.</span><span class="sxs-lookup"><span data-stu-id="97149-238">It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the data elements.</span></span>  
  
 <span data-ttu-id="97149-239">In diesem Beispiel wird nur die Konvertierung in Zeichen folgen und ganze Zahlen unterstützt.</span><span class="sxs-lookup"><span data-stu-id="97149-239">In this example, only conversion to strings and integers is supported.</span></span> <span data-ttu-id="97149-240">Wenn Sie versuchen, ein Objekt in einen anderen Typ zu konvertieren, wird eine Lauf Zeit Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="97149-240">If you try to convert an object to any other type, a run-time exception is thrown.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#3)]
 [!code-vb[System.Dynamic.DynamicObject#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateInstance">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateInstance (System.Dynamic.CreateInstanceBinder binder, object[] args, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateInstance(class System.Dynamic.CreateInstanceBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateInstance (binder As CreateInstanceBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryCreateInstance(System::Dynamic::CreateInstanceBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryCreateInstance : System.Dynamic.CreateInstanceBinder * obj[] * obj -&gt; bool&#xA;override this.TryCreateInstance : System.Dynamic.CreateInstanceBinder * obj[] * obj -&gt; bool" Usage="dynamicObject.TryCreateInstance (binder, args, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.CreateInstanceBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="97149-241">Stellt Informationen zum Initialisierungsvorgang bereit.</span><span class="sxs-lookup"><span data-stu-id="97149-241">Provides information about the initialization operation.</span></span></param>
        <param name="args"><span data-ttu-id="97149-242">Die Argumente, die während der Initialisierung an das Objekt übergeben werden.</span><span class="sxs-lookup"><span data-stu-id="97149-242">The arguments that are passed to the object during initialization.</span></span> <span data-ttu-id="97149-243">Für den Vorgang <c>new SampleType(100)</c>, bei dem <c>SampleType</c> der Typ ist, der von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet wurde, ist <c>args[0]</c> beispielsweise gleich 100.</span><span class="sxs-lookup"><span data-stu-id="97149-243">For example, for the <c>new SampleType(100)</c> operation, where <c>SampleType</c> is the type derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</span></span></param>
        <param name="result"><span data-ttu-id="97149-244">Das Ergebnis der Initialisierung.</span><span class="sxs-lookup"><span data-stu-id="97149-244">The result of the initialization.</span></span></param>
        <summary><span data-ttu-id="97149-245">Stellt die Implementierung für Vorgänge bereit, die eine neue Instanz eines dynamischen Objekts initialisieren.</span><span class="sxs-lookup"><span data-stu-id="97149-245">Provides the implementation for operations that initialize a new instance of a dynamic object.</span></span> <span data-ttu-id="97149-246">Diese Methode ist nicht zur Verwendung in C# oder Visual Basic vorgesehen.</span><span class="sxs-lookup"><span data-stu-id="97149-246">This method is not intended for use in C# or Visual Basic.</span></span></summary>
        <returns><span data-ttu-id="97149-247"><see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="97149-247"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="97149-248">Wenn die Methode <see langword="false" /> zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt.</span><span class="sxs-lookup"><span data-stu-id="97149-248">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="97149-249">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="97149-249">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97149-250">Von der <xref:System.Dynamic.DynamicObject>-Klasse abgeleitete Klassen können diese Methode überschreiben, um anzugeben, wie eine neue Instanz des dynamischen Objekts initialisiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="97149-250">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a new instance of the dynamic object should be initialized.</span></span> <span data-ttu-id="97149-251">Wenn die Methode nicht überschrieben wird, bestimmt der Lauf Zeit Binder der Sprache das Verhalten.</span><span class="sxs-lookup"><span data-stu-id="97149-251">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="97149-252">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="97149-252">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="97149-253">C#und Visual Basic Compiler geben nie Code aus, um diese Methode zu verwenden, da Sie erstklassige Typen unterstützen.</span><span class="sxs-lookup"><span data-stu-id="97149-253">C# and Visual Basic compilers never emit code to use this method because they do not support first-class types.</span></span> <span data-ttu-id="97149-254">Diese Methode ist für Sprachen vorgesehen, die die Initialisierung dynamischer Objekte mithilfe von Syntax wie `dynamic new`unterstützen.</span><span class="sxs-lookup"><span data-stu-id="97149-254">This method is intended for languages that support the initialization of dynamic objects by using syntax like `dynamic new`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDeleteIndex">
      <MemberSignature Language="C#" Value="public virtual bool TryDeleteIndex (System.Dynamic.DeleteIndexBinder binder, object[] indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryDeleteIndex(class System.Dynamic.DeleteIndexBinder binder, object[] indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryDeleteIndex (binder As DeleteIndexBinder, indexes As Object()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryDeleteIndex(System::Dynamic::DeleteIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes);" />
      <MemberSignature Language="F#" Value="abstract member TryDeleteIndex : System.Dynamic.DeleteIndexBinder * obj[] -&gt; bool&#xA;override this.TryDeleteIndex : System.Dynamic.DeleteIndexBinder * obj[] -&gt; bool" Usage="dynamicObject.TryDeleteIndex (binder, indexes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.DeleteIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="97149-255">Stellt Informationen zum Löschen bereit.</span><span class="sxs-lookup"><span data-stu-id="97149-255">Provides information about the deletion.</span></span></param>
        <param name="indexes"><span data-ttu-id="97149-256">Die zu löschenden Indizes.</span><span class="sxs-lookup"><span data-stu-id="97149-256">The indexes to be deleted.</span></span></param>
        <summary><span data-ttu-id="97149-257">Stellt die Implementierung für Vorgänge bereit, die ein Objekt nach Index löschen.</span><span class="sxs-lookup"><span data-stu-id="97149-257">Provides the implementation for operations that delete an object by index.</span></span> <span data-ttu-id="97149-258">Diese Methode ist nicht zur Verwendung in C# oder Visual Basic vorgesehen.</span><span class="sxs-lookup"><span data-stu-id="97149-258">This method is not intended for use in C# or Visual Basic.</span></span></summary>
        <returns><span data-ttu-id="97149-259"><see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="97149-259"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="97149-260">Wenn die Methode <see langword="false" /> zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt.</span><span class="sxs-lookup"><span data-stu-id="97149-260">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="97149-261">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="97149-261">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97149-262">Von der <xref:System.Dynamic.DynamicObject>-Klasse abgeleitete Klassen können diese Methode überschreiben, um anzugeben, wie ein Wert mit einem angegebenen Index gelöscht werden soll.</span><span class="sxs-lookup"><span data-stu-id="97149-262">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a value that has a specified index should be deleted.</span></span> <span data-ttu-id="97149-263">Wenn die Methode nicht überschrieben wird, bestimmt der Lauf Zeit Binder der Sprache das Verhalten.</span><span class="sxs-lookup"><span data-stu-id="97149-263">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="97149-264">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="97149-264">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="97149-265">C#und Visual Basic Compiler geben niemals Code aus, um diese Methode zu verwenden, da Sie diese Art von Vorgang nicht unterstützen.</span><span class="sxs-lookup"><span data-stu-id="97149-265">C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation.</span></span> <span data-ttu-id="97149-266">Diese Methode ist für Sprachen gedacht, die die Syntax zum Löschen von Objekten nach Index unterstützen, z. b. `del sampleObject[1,2]` in Python.</span><span class="sxs-lookup"><span data-stu-id="97149-266">This method is intended for languages that support syntax for deleting objects by index, such as `del sampleObject[1,2]` in Python.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDeleteMember">
      <MemberSignature Language="C#" Value="public virtual bool TryDeleteMember (System.Dynamic.DeleteMemberBinder binder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryDeleteMember(class System.Dynamic.DeleteMemberBinder binder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryDeleteMember (binder As DeleteMemberBinder) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryDeleteMember(System::Dynamic::DeleteMemberBinder ^ binder);" />
      <MemberSignature Language="F#" Value="abstract member TryDeleteMember : System.Dynamic.DeleteMemberBinder -&gt; bool&#xA;override this.TryDeleteMember : System.Dynamic.DeleteMemberBinder -&gt; bool" Usage="dynamicObject.TryDeleteMember binder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.DeleteMemberBinder" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="97149-267">Stellt Informationen zum Löschen bereit.</span><span class="sxs-lookup"><span data-stu-id="97149-267">Provides information about the deletion.</span></span></param>
        <summary><span data-ttu-id="97149-268">Stellt die Implementierung für Vorgänge bereit, die einen Objektmember löschen.</span><span class="sxs-lookup"><span data-stu-id="97149-268">Provides the implementation for operations that delete an object member.</span></span> <span data-ttu-id="97149-269">Diese Methode ist nicht zur Verwendung in C# oder Visual Basic vorgesehen.</span><span class="sxs-lookup"><span data-stu-id="97149-269">This method is not intended for use in C# or Visual Basic.</span></span></summary>
        <returns><span data-ttu-id="97149-270"><see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="97149-270"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="97149-271">Wenn die Methode <see langword="false" /> zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt.</span><span class="sxs-lookup"><span data-stu-id="97149-271">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="97149-272">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="97149-272">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97149-273">Von der <xref:System.Dynamic.DynamicObject>-Klasse abgeleitete Klassen können diese Methode überschreiben, um anzugeben, wie ein Objektmember gelöscht werden soll.</span><span class="sxs-lookup"><span data-stu-id="97149-273">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how an object member should be deleted.</span></span> <span data-ttu-id="97149-274">Wenn diese Methode nicht überschrieben wird, bestimmt der Lauf Zeit Binder der Sprache das Verhalten.</span><span class="sxs-lookup"><span data-stu-id="97149-274">When this method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="97149-275">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="97149-275">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="97149-276">C#und Visual Basic Compiler geben niemals Code aus, um diese Methode zu verwenden, da Sie diese Art von Vorgang nicht unterstützen.</span><span class="sxs-lookup"><span data-stu-id="97149-276">C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation.</span></span> <span data-ttu-id="97149-277">Diese Methode ist für Sprachen gedacht, die Syntax zum Löschen von Membern unterstützen, z. b. `del sampleObject.SampleMember` in Python.</span><span class="sxs-lookup"><span data-stu-id="97149-277">This method is intended for languages that support syntax for deleting members, such as `del sampleObject.SampleMember` in Python.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetIndex">
      <MemberSignature Language="C#" Value="public virtual bool TryGetIndex (System.Dynamic.GetIndexBinder binder, object[] indexes, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetIndex(class System.Dynamic.GetIndexBinder binder, object[] indexes, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetIndex (binder As GetIndexBinder, indexes As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetIndex(System::Dynamic::GetIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryGetIndex : System.Dynamic.GetIndexBinder * obj[] * obj -&gt; bool&#xA;override this.TryGetIndex : System.Dynamic.GetIndexBinder * obj[] * obj -&gt; bool" Usage="dynamicObject.TryGetIndex (binder, indexes, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.GetIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="97149-278">Stellt Informationen zum Vorgang bereit.</span><span class="sxs-lookup"><span data-stu-id="97149-278">Provides information about the operation.</span></span></param>
        <param name="indexes"><span data-ttu-id="97149-279">Die Indizes, die bei dem Vorgang verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="97149-279">The indexes that are used in the operation.</span></span> <span data-ttu-id="97149-280">Für den Vorgang <c>sampleObject[3]</c> in C# (<c>sampleObject(3)</c> in Visual Basic), bei dem <c>sampleObject</c> von der <see langword="DynamicObject" />-Klasse abgeleitet wurde, ist <c>indexes[0]</c> beispielsweise gleich 3.</span><span class="sxs-lookup"><span data-stu-id="97149-280">For example, for the <c>sampleObject[3]</c> operation in C# (<c>sampleObject(3)</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see langword="DynamicObject" /> class, <c>indexes[0]</c> is equal to 3.</span></span></param>
        <param name="result"><span data-ttu-id="97149-281">Das Ergebnis des Indexvorgangs.</span><span class="sxs-lookup"><span data-stu-id="97149-281">The result of the index operation.</span></span></param>
        <summary><span data-ttu-id="97149-282">Stellt die Implementierung für Vorgänge bereit, die einen Wert nach Index abrufen.</span><span class="sxs-lookup"><span data-stu-id="97149-282">Provides the implementation for operations that get a value by index.</span></span> <span data-ttu-id="97149-283">Von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitete Klassen können diese Methode überschreiben, um dynamisches Verhalten für Indexvorgänge anzugeben.</span><span class="sxs-lookup"><span data-stu-id="97149-283">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for indexing operations.</span></span></summary>
        <returns><span data-ttu-id="97149-284"><see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="97149-284"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="97149-285">Wenn die Methode <see langword="false" /> zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt.</span><span class="sxs-lookup"><span data-stu-id="97149-285">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="97149-286">(In den meisten Fällen wird eine Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="97149-286">(In most cases, a run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97149-287">Von der <xref:System.Dynamic.DynamicObject>-Klasse abgeleitete Klassen können diese Methode überschreiben, um anzugeben, wie ein Wert durch einen Index für ein dynamisches Objekt durchgeführt werden soll.</span><span class="sxs-lookup"><span data-stu-id="97149-287">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how getting a value by index should be performed for a dynamic object.</span></span> <span data-ttu-id="97149-288">Wenn die Methode nicht überschrieben wird, bestimmt der Lauf Zeit Binder der Sprache das Verhalten.</span><span class="sxs-lookup"><span data-stu-id="97149-288">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="97149-289">(In den meisten Fällen wird eine Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="97149-289">(In most cases, a run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="97149-290">Wenn diese Methode überschrieben wird, wird Sie automatisch aufgerufen, wenn Sie über einen Vorgang wie `sampleObject[3]` C# in oder `sampleObject(3)` in Visual Basic verfügen, bei dem `sampleObject` von der <xref:System.Dynamic.DynamicObject> Klasse abgeleitet ist.</span><span class="sxs-lookup"><span data-stu-id="97149-290">If this method is overridden, it is automatically invoked when you have an operation like `sampleObject[3]` in C# or `sampleObject(3)` in Visual Basic, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97149-291">Angenommen, Sie möchten ein Objekt erstellen, in dem auf Eigenschaften entweder durch Namen wie `Property0`, `Property1`usw. oder durch einen Index zugegriffen werden kann, sodass z. b. `sampleObject.Property0` `sampleObject[0]` in C# oder `sampleObject(0)` in Visual Basic entspricht.</span><span class="sxs-lookup"><span data-stu-id="97149-291">Assume that you want to create an object in which properties can be accessed either by names such as `Property0`, `Property1`, and so on, or by index, so that, for example, `sampleObject.Property0` is equivalent to `sampleObject[0]` in C# or `sampleObject(0)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="97149-292">Im folgenden Codebeispiel wird die `SampleDynamicObject`-Klasse veranschaulicht, die von der <xref:System.Dynamic.DynamicObject>-Klasse abgeleitet wird.</span><span class="sxs-lookup"><span data-stu-id="97149-292">The following code example demonstrates the `SampleDynamicObject` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="97149-293">Die `SampleDynamicObject`-Klasse enthält ein Objekt des `Dictionary<string, object>` Typs (`Dictionary(Of String, Object)` in Visual Basic), um die Schlüssel-Wert-Paare zu speichern.</span><span class="sxs-lookup"><span data-stu-id="97149-293">The `SampleDynamicObject` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs.</span></span> <span data-ttu-id="97149-294">`SampleDynamicObject` überschreibt die Methoden <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> und <xref:System.Dynamic.DynamicObject.TryGetIndex%2A>, um den Zugriff nach Index zu aktivieren.</span><span class="sxs-lookup"><span data-stu-id="97149-294">`SampleDynamicObject` overrides the <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> and <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> methods to enable access by index.</span></span> <span data-ttu-id="97149-295">Er überschreibt die Methoden <xref:System.Dynamic.DynamicObject.TrySetMember%2A> und <xref:System.Dynamic.DynamicObject.TryGetMember%2A>, um den Zugriff über den Eigenschaftsnamen zu aktivieren.</span><span class="sxs-lookup"><span data-stu-id="97149-295">It overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access by property name.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#4)]
 [!code-vb[System.Dynamic.DynamicObject#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMember">
      <MemberSignature Language="C#" Value="public virtual bool TryGetMember (System.Dynamic.GetMemberBinder binder, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetMember(class System.Dynamic.GetMemberBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetMember (binder As GetMemberBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetMember(System::Dynamic::GetMemberBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryGetMember : System.Dynamic.GetMemberBinder * obj -&gt; bool&#xA;override this.TryGetMember : System.Dynamic.GetMemberBinder * obj -&gt; bool" Usage="dynamicObject.TryGetMember (binder, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.GetMemberBinder" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="97149-296">Stellt Informationen zum Objekt bereit, das den dynamischen Vorgang aufgerufen hat.</span><span class="sxs-lookup"><span data-stu-id="97149-296">Provides information about the object that called the dynamic operation.</span></span> <span data-ttu-id="97149-297">Die <c>binder.Name</c>-Eigenschaft gibt den Namen des Members an, für den der dynamische Vorgang ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="97149-297">The <c>binder.Name</c> property provides the name of the member on which the dynamic operation is performed.</span></span> <span data-ttu-id="97149-298">Für die Anweisung <c>Console.WriteLine(sampleObject.SampleProperty)</c>, bei der <c>sampleObject</c> eine Instanz der Klasse ist, die von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet wurde, gibt <c>binder.Name</c> beispielsweise „SampleProperty“ zurück.</span><span class="sxs-lookup"><span data-stu-id="97149-298">For example, for the <c>Console.WriteLine(sampleObject.SampleProperty)</c> statement, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleProperty".</span></span> <span data-ttu-id="97149-299">Die <c>binder.IgnoreCase</c>-Eigenschaft gibt an, ob der Membername die Groß-/Kleinschreibung berücksichtigt.</span><span class="sxs-lookup"><span data-stu-id="97149-299">The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</span></span></param>
        <param name="result"><span data-ttu-id="97149-300">Das Ergebnis des get-Vorgangs.</span><span class="sxs-lookup"><span data-stu-id="97149-300">The result of the get operation.</span></span> <span data-ttu-id="97149-301">Wenn die Methode z. B. für eine Eigenschaft aufgerufen wird, können Sie <paramref name="result" /> den Eigenschaftswert zuweisen.</span><span class="sxs-lookup"><span data-stu-id="97149-301">For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</span></span></param>
        <summary><span data-ttu-id="97149-302">Stellt die Implementierung für Vorgänge bereit, die Memberwerte abrufen.</span><span class="sxs-lookup"><span data-stu-id="97149-302">Provides the implementation for operations that get member values.</span></span> <span data-ttu-id="97149-303">Von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitete Klassen können diese Methode überschreiben, um dynamisches Verhalten für Vorgänge wie das Abrufen eines Werts für eine Eigenschaft anzugeben.</span><span class="sxs-lookup"><span data-stu-id="97149-303">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.</span></span></summary>
        <returns><span data-ttu-id="97149-304"><see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="97149-304"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="97149-305">Wenn die Methode <see langword="false" /> zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt.</span><span class="sxs-lookup"><span data-stu-id="97149-305">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="97149-306">(In den meisten Fällen wird eine Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="97149-306">(In most cases, a run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97149-307">Von der <xref:System.Dynamic.DynamicObject>-Klasse abgeleitete Klassen können diese Methode überschreiben, um anzugeben, wie Vorgänge zum Ausführen von Element Werten für ein dynamisches Objekt ausgeführt werden sollen.</span><span class="sxs-lookup"><span data-stu-id="97149-307">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that get member values should be performed for a dynamic object.</span></span> <span data-ttu-id="97149-308">Wenn die Methode nicht überschrieben wird, bestimmt der Lauf Zeit Binder der Sprache das Verhalten.</span><span class="sxs-lookup"><span data-stu-id="97149-308">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="97149-309">(In den meisten Fällen wird eine Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="97149-309">(In most cases, a run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="97149-310">Diese Methode wird aufgerufen, wenn Sie Anweisungen wie `Console.WriteLine(sampleObject.SampleProperty)`haben, wobei `sampleObject` eine Instanz der Klasse ist, die von der <xref:System.Dynamic.DynamicObject>-Klasse abgeleitet ist.</span><span class="sxs-lookup"><span data-stu-id="97149-310">This method is called when you have statements like `Console.WriteLine(sampleObject.SampleProperty)`, where `sampleObject` is an instance of the class derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="97149-311">Sie können auch eigene Member zu Klassen hinzufügen, die von der `DynamicObject`-Klasse abgeleitet werden.</span><span class="sxs-lookup"><span data-stu-id="97149-311">You can also add your own members to classes derived from the `DynamicObject` class.</span></span> <span data-ttu-id="97149-312">Wenn Ihre Klasse Eigenschaften definiert und auch die <xref:System.Dynamic.DynamicObject.TrySetMember%2A>-Methode überschreibt, verwendet die DLR (Dynamic Language Runtime) zuerst den sprach Binder, um nach einer statischen Definition einer Eigenschaft in der Klasse zu suchen.</span><span class="sxs-lookup"><span data-stu-id="97149-312">If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</span></span> <span data-ttu-id="97149-313">Wenn keine solche Eigenschaft vorhanden ist, ruft die DLR die <xref:System.Dynamic.DynamicObject.TrySetMember%2A>-Methode auf.</span><span class="sxs-lookup"><span data-stu-id="97149-313">If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97149-314">Angenommen, Sie möchten eine alternative Syntax für den Zugriff auf Werte in einem Wörterbuch bereitstellen, sodass Sie `sampleDictionary.Text = "Sample text"`schreiben können, statt `sampleDictionary["Text"] = "Sample text"` zu schreiben (`sampleDictionary("Text") = "Sample text"` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="97149-314">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="97149-315">Außerdem muss bei dieser Syntax die Groß-/Kleinschreibung nicht beachtet werden, sodass `sampleDictionary.Text` `sampleDictionary.text`entspricht.</span><span class="sxs-lookup"><span data-stu-id="97149-315">Also, this syntax must be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.</span></span>  
  
 <span data-ttu-id="97149-316">Im folgenden Codebeispiel wird die `DynamicDictionary`-Klasse veranschaulicht, die von der <xref:System.Dynamic.DynamicObject>-Klasse abgeleitet wird.</span><span class="sxs-lookup"><span data-stu-id="97149-316">The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="97149-317">Die `DynamicDictionary`-Klasse enthält ein Objekt des `Dictionary<string, object>`-Typs (`Dictionary(Of String, Object)` in Visual Basic) zum Speichern der Schlüssel-Wert-Paare und überschreibt die <xref:System.Dynamic.DynamicObject.TrySetMember%2A>-Methode und die <xref:System.Dynamic.DynamicObject.TryGetMember%2A>-Methode, um die neue Syntax zu unterstützen.</span><span class="sxs-lookup"><span data-stu-id="97149-317">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="97149-318">Außerdem wird eine `Count`-Eigenschaft bereitstellt, die anzeigt, wie viele dynamische Eigenschaften das Wörterbuch enthält.</span><span class="sxs-lookup"><span data-stu-id="97149-318">It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryInvoke">
      <MemberSignature Language="C#" Value="public virtual bool TryInvoke (System.Dynamic.InvokeBinder binder, object[] args, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryInvoke(class System.Dynamic.InvokeBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryInvoke (binder As InvokeBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryInvoke(System::Dynamic::InvokeBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryInvoke : System.Dynamic.InvokeBinder * obj[] * obj -&gt; bool&#xA;override this.TryInvoke : System.Dynamic.InvokeBinder * obj[] * obj -&gt; bool" Usage="dynamicObject.TryInvoke (binder, args, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.InvokeBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="97149-319">Stellt Informationen zum Aufrufvorgang bereit.</span><span class="sxs-lookup"><span data-stu-id="97149-319">Provides information about the invoke operation.</span></span></param>
        <param name="args"><span data-ttu-id="97149-320">Die Argumente, die während des Aufrufvorgangs an das Objekt übergeben werden.</span><span class="sxs-lookup"><span data-stu-id="97149-320">The arguments that are passed to the object during the invoke operation.</span></span> <span data-ttu-id="97149-321">Für den Vorgang <c>sampleObject(100)</c>, bei dem <c>sampleObject</c> von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet wurde, ist <c>args[0]</c> beispielsweise gleich 100.</span><span class="sxs-lookup"><span data-stu-id="97149-321">For example, for the <c>sampleObject(100)</c> operation, where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</span></span></param>
        <param name="result"><span data-ttu-id="97149-322">Das Ergebnis des Objektaufrufs.</span><span class="sxs-lookup"><span data-stu-id="97149-322">The result of the object invocation.</span></span></param>
        <summary><span data-ttu-id="97149-323">Stellt die Implementierung für Vorgänge bereit, die ein Objekt aufrufen.</span><span class="sxs-lookup"><span data-stu-id="97149-323">Provides the implementation for operations that invoke an object.</span></span> <span data-ttu-id="97149-324">Von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitete Klassen können diese Methode überschreiben, um dynamisches Verhalten für Vorgänge wie das Aufrufen eines Objekts oder Delegaten anzugeben.</span><span class="sxs-lookup"><span data-stu-id="97149-324">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.</span></span></summary>
        <returns><span data-ttu-id="97149-325"><see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="97149-325"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="97149-326">Wenn die Methode <see langword="false" /> zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt.</span><span class="sxs-lookup"><span data-stu-id="97149-326">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="97149-327">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="97149-327">(In most cases, a language-specific run-time exception is thrown.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97149-328">Von der <xref:System.Dynamic.DynamicObject>-Klasse abgeleitete Klassen können diese Methode überschreiben, um anzugeben, wie Vorgänge, die ein Objekt aufrufen, für ein dynamisches Objekt ausgeführt werden sollen.</span><span class="sxs-lookup"><span data-stu-id="97149-328">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that invoke an object should be performed for a dynamic object.</span></span> <span data-ttu-id="97149-329">Wenn die Methode nicht überschrieben wird, bestimmt der Lauf Zeit Binder der Sprache das Verhalten.</span><span class="sxs-lookup"><span data-stu-id="97149-329">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="97149-330">(In den meisten Fällen wird eine Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="97149-330">(In most cases, a run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="97149-331">Wenn diese Methode überschrieben wird, wird Sie automatisch aufgerufen, wenn Sie über einen Vorgang wie `sampleObject(100)`verfügen, bei dem `sampleObject` von der <xref:System.Dynamic.DynamicObject> Klasse abgeleitet ist.</span><span class="sxs-lookup"><span data-stu-id="97149-331">If this method is overridden, it is automatically invoked when you have an operation like `sampleObject(100)`, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="97149-332">Der Vorgang zum Aufrufen eines Objekts wird in C# , aber nicht in Visual Basic unterstützt.</span><span class="sxs-lookup"><span data-stu-id="97149-332">The operation for invoking an object is supported in C# but not in Visual Basic.</span></span> <span data-ttu-id="97149-333">Der Visual Basic-Compiler gibt niemals Code für die Verwendung dieser Methode aus, und die Visual Basic Sprache unterstützt keine Syntax wie `sampleObject(100)`.</span><span class="sxs-lookup"><span data-stu-id="97149-333">The Visual Basic compiler never emits code to use this method, and the Visual Basic language does not support syntax like `sampleObject(100)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97149-334">Angenommen, Sie benötigen eine Datenstruktur, um Text-und numerische Darstellungen von Zahlen zu speichern.</span><span class="sxs-lookup"><span data-stu-id="97149-334">Assume that you need a data structure to store textual and numeric representations of numbers.</span></span> <span data-ttu-id="97149-335">Sie möchten in der Lage sein, den Wert für jede Eigenschaft einzeln anzugeben und auch alle Eigenschaften in einer einzelnen Anweisung zu initialisieren.</span><span class="sxs-lookup"><span data-stu-id="97149-335">You want to be able to specify the value for each property individually and also to be able to initialize all properties in a single statement.</span></span>  
  
 <span data-ttu-id="97149-336">Im folgenden Codebeispiel wird die `DynamicNumber`-Klasse veranschaulicht, die von der <xref:System.Dynamic.DynamicObject>-Klasse abgeleitet wird.</span><span class="sxs-lookup"><span data-stu-id="97149-336">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="97149-337">`DynamicNumber` überschreibt die <xref:System.Dynamic.DynamicObject.TryInvoke%2A>-Methode, um die Initialisierung aller Eigenschaften gleichzeitig zu aktivieren.</span><span class="sxs-lookup"><span data-stu-id="97149-337">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryInvoke%2A> method to enable initialization of all properties at one time.</span></span> <span data-ttu-id="97149-338">Außerdem werden die Methoden <xref:System.Dynamic.DynamicObject.TrySetMember%2A> und <xref:System.Dynamic.DynamicObject.TryGetMember%2A> überschrieben, um den Zugriff auf einzelne Objekteigenschaften zu ermöglichen.</span><span class="sxs-lookup"><span data-stu-id="97149-338">It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to individual object properties.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryInvokeMember">
      <MemberSignature Language="C#" Value="public virtual bool TryInvokeMember (System.Dynamic.InvokeMemberBinder binder, object[] args, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryInvokeMember(class System.Dynamic.InvokeMemberBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryInvokeMember (binder As InvokeMemberBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryInvokeMember(System::Dynamic::InvokeMemberBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryInvokeMember : System.Dynamic.InvokeMemberBinder * obj[] * obj -&gt; bool&#xA;override this.TryInvokeMember : System.Dynamic.InvokeMemberBinder * obj[] * obj -&gt; bool" Usage="dynamicObject.TryInvokeMember (binder, args, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.InvokeMemberBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="97149-339">Stellt Informationen zum dynamischen Vorgang bereit.</span><span class="sxs-lookup"><span data-stu-id="97149-339">Provides information about the dynamic operation.</span></span> <span data-ttu-id="97149-340">Die <c>binder.Name</c>-Eigenschaft gibt den Namen des Members an, für den der dynamische Vorgang ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="97149-340">The <c>binder.Name</c> property provides the name of the member on which the dynamic operation is performed.</span></span> <span data-ttu-id="97149-341">Für die Anweisung <c>sampleObject.SampleMethod(100)</c>, bei der <c>sampleObject</c> eine Instanz der Klasse ist, die von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet wurde, gibt <c>binder.Name</c> beispielsweise „SampleMethod“ zurück.</span><span class="sxs-lookup"><span data-stu-id="97149-341">For example, for the statement <c>sampleObject.SampleMethod(100)</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleMethod".</span></span> <span data-ttu-id="97149-342">Die <c>binder.IgnoreCase</c>-Eigenschaft gibt an, ob der Membername die Groß-/Kleinschreibung berücksichtigt.</span><span class="sxs-lookup"><span data-stu-id="97149-342">The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</span></span></param>
        <param name="args"><span data-ttu-id="97149-343">Die Argumente, die während des Aufrufvorgangs an den Objektmember übergeben werden.</span><span class="sxs-lookup"><span data-stu-id="97149-343">The arguments that are passed to the object member during the invoke operation.</span></span> <span data-ttu-id="97149-344">Für die Anweisung <c>sampleObject.SampleMethod(100)</c>, bei der <c>sampleObject</c> von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet wurde, ist <c>args[0]</c> beispielsweise gleich 100.</span><span class="sxs-lookup"><span data-stu-id="97149-344">For example, for the statement <c>sampleObject.SampleMethod(100)</c>, where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</span></span></param>
        <param name="result"><span data-ttu-id="97149-345">Das Ergebnis des Memberaufrufs.</span><span class="sxs-lookup"><span data-stu-id="97149-345">The result of the member invocation.</span></span></param>
        <summary><span data-ttu-id="97149-346">Stellt die Implementierung für Vorgänge bereit, die einen Member aufrufen.</span><span class="sxs-lookup"><span data-stu-id="97149-346">Provides the implementation for operations that invoke a member.</span></span> <span data-ttu-id="97149-347">Von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitete Klassen können diese Methode überschreiben, um dynamisches Verhalten für Vorgänge wie das Aufrufen einer Methode anzugeben.</span><span class="sxs-lookup"><span data-stu-id="97149-347">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as calling a method.</span></span></summary>
        <returns><span data-ttu-id="97149-348"><see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="97149-348"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="97149-349">Wenn die Methode <see langword="false" /> zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt.</span><span class="sxs-lookup"><span data-stu-id="97149-349">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="97149-350">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="97149-350">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97149-351">Von der <xref:System.Dynamic.DynamicObject>-Klasse abgeleitete Klassen können diese Methode überschreiben, um anzugeben, wie Vorgänge, die einen Objektmember aufrufen, für ein dynamisches Objekt ausgeführt werden sollen.</span><span class="sxs-lookup"><span data-stu-id="97149-351">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that invoke an object member should be performed for a dynamic object.</span></span> <span data-ttu-id="97149-352">Wenn die Methode nicht überschrieben wird, bestimmt der Lauf Zeit Binder der Sprache das Verhalten.</span><span class="sxs-lookup"><span data-stu-id="97149-352">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="97149-353">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="97149-353">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="97149-354">Wenn diese Methode überschrieben wird, wird Sie automatisch aufgerufen, wenn Sie einen Vorgang wie `sampleObject.SampleMethod(100)`ausführen, wobei `sampleObject` von der `DynamicObject`-Klasse abgeleitet wird.</span><span class="sxs-lookup"><span data-stu-id="97149-354">If this method is overridden, it is automatically invoked when you perform an operation like `sampleObject.SampleMethod(100)`, where `sampleObject` is derived from the `DynamicObject` class.</span></span>  
  
 <span data-ttu-id="97149-355">Sie können auch eigene Methoden zu Klassen hinzufügen, die von der <xref:System.Dynamic.DynamicObject>-Klasse abgeleitet werden.</span><span class="sxs-lookup"><span data-stu-id="97149-355">You can also add your own methods to classes that are derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="97149-356">Wenn Sie z. b. die <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A>-Methode überschreiben, versucht das dynamische dispatchsystem zuerst zu ermitteln, ob die angegebene Methode in der Klasse vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="97149-356">For example, if you override the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> method, the dynamic dispatch system first attempts to determine whether the specified method exists in the class.</span></span> <span data-ttu-id="97149-357">Wenn die Methode nicht gefunden wird, wird die <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A>-Implementierung verwendet.</span><span class="sxs-lookup"><span data-stu-id="97149-357">If it does not find the method, it uses the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> implementation.</span></span>  
  
 <span data-ttu-id="97149-358">Diese Methode unterstützt keine `ref`-und `out` Parameter.</span><span class="sxs-lookup"><span data-stu-id="97149-358">This method does not support `ref` and `out` parameters.</span></span> <span data-ttu-id="97149-359">Alle Parameter im `args` Array werden als Wert übermittelt.</span><span class="sxs-lookup"><span data-stu-id="97149-359">All parameters in the `args` array are passed by value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97149-360">Angenommen, Sie möchten eine alternative Syntax für den Zugriff auf Werte in einem Wörterbuch bereitstellen, sodass Sie `sampleDictionary.Text = "Sample text"`schreiben können, statt `sampleDictionary["Text"] = "Sample text"` zu schreiben (`sampleDictionary("Text") = "Sample text"` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="97149-360">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="97149-361">Außerdem möchten Sie in der Lage sein, alle Standard Wörterbuch Methoden für dieses Wörterbuch aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="97149-361">Also, you want to be able to call all the standard dictionary methods on this dictionary.</span></span>  
  
 <span data-ttu-id="97149-362">Im folgenden Codebeispiel wird die `DynamicDictionary`-Klasse veranschaulicht, die von der <xref:System.Dynamic.DynamicObject>-Klasse abgeleitet wird.</span><span class="sxs-lookup"><span data-stu-id="97149-362">The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="97149-363">Die `DynamicDictionary`-Klasse enthält ein Objekt des `Dictionary<string, object>` Typs (`Dictionary(Of String, Object)` in Visual Basic), um die Schlüssel-Wert-Paare zu speichern.</span><span class="sxs-lookup"><span data-stu-id="97149-363">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs.</span></span> <span data-ttu-id="97149-364">Er überschreibt die <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A>-Methode, um Methoden der <xref:System.Collections.Generic.Dictionary%602>-Klasse zu unterstützen, und überschreibt die <xref:System.Dynamic.DynamicObject.TrySetMember%2A> und <xref:System.Dynamic.DynamicObject.TryGetMember%2A> Methoden, um die neue Syntax zu unterstützen.</span><span class="sxs-lookup"><span data-stu-id="97149-364">It overrides the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> method to support methods of the <xref:System.Collections.Generic.Dictionary%602> class and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="97149-365">Außerdem wird eine `Print`-Methode bereitstellt, die alle Wörterbuch Schlüssel und-Werte ausgibt.</span><span class="sxs-lookup"><span data-stu-id="97149-365">It also provides a `Print` method, which prints out all dictionary keys and values.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#6)]
 [!code-vb[System.Dynamic.DynamicObject#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySetIndex">
      <MemberSignature Language="C#" Value="public virtual bool TrySetIndex (System.Dynamic.SetIndexBinder binder, object[] indexes, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TrySetIndex(class System.Dynamic.SetIndexBinder binder, object[] indexes, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TrySetIndex (binder As SetIndexBinder, indexes As Object(), value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TrySetIndex(System::Dynamic::SetIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member TrySetIndex : System.Dynamic.SetIndexBinder * obj[] * obj -&gt; bool&#xA;override this.TrySetIndex : System.Dynamic.SetIndexBinder * obj[] * obj -&gt; bool" Usage="dynamicObject.TrySetIndex (binder, indexes, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.SetIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="97149-366">Stellt Informationen zum Vorgang bereit.</span><span class="sxs-lookup"><span data-stu-id="97149-366">Provides information about the operation.</span></span></param>
        <param name="indexes"><span data-ttu-id="97149-367">Die Indizes, die bei dem Vorgang verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="97149-367">The indexes that are used in the operation.</span></span> <span data-ttu-id="97149-368">Für den Vorgang <c>sampleObject[3] = 10</c> in C# (<c>sampleObject(3) = 10</c> in Visual Basic), bei dem <c>sampleObject</c> von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet wurde, ist <c>indexes[0]</c> beispielsweise gleich 3.</span><span class="sxs-lookup"><span data-stu-id="97149-368">For example, for the <c>sampleObject[3] = 10</c> operation in C# (<c>sampleObject(3) = 10</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>indexes[0]</c> is equal to 3.</span></span></param>
        <param name="value"><span data-ttu-id="97149-369">Der Wert, der auf das Objekt mit dem angegebenen Index festgelegt werden soll.</span><span class="sxs-lookup"><span data-stu-id="97149-369">The value to set to the object that has the specified index.</span></span> <span data-ttu-id="97149-370">Für den Vorgang <c>sampleObject[3] = 10</c> in C# (<c>sampleObject(3) = 10</c> in Visual Basic), bei dem <c>sampleObject</c> von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet wurde, ist <paramref name="value" /> beispielsweise gleich 10.</span><span class="sxs-lookup"><span data-stu-id="97149-370">For example, for the <c>sampleObject[3] = 10</c> operation in C# (<c>sampleObject(3) = 10</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="value" /> is equal to 10.</span></span></param>
        <summary><span data-ttu-id="97149-371">Stellt die Implementierung für Vorgänge bereit, die einen Wert nach Index festlegen.</span><span class="sxs-lookup"><span data-stu-id="97149-371">Provides the implementation for operations that set a value by index.</span></span> <span data-ttu-id="97149-372">Von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitete Klassen können diese Methode überschreiben, um dynamisches Verhalten für Vorgänge anzugeben, die auf Objekte mit einem angegebenen Index zugreifen.</span><span class="sxs-lookup"><span data-stu-id="97149-372">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that access objects by a specified index.</span></span></summary>
        <returns><span data-ttu-id="97149-373"><see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="97149-373"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="97149-374">Wenn die Methode <see langword="false" /> zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt.</span><span class="sxs-lookup"><span data-stu-id="97149-374">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="97149-375">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="97149-375">(In most cases, a language-specific run-time exception is thrown.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97149-376">Von der <xref:System.Dynamic.DynamicObject>-Klasse abgeleitete Klassen können diese Methode überschreiben, um anzugeben, wie Vorgänge, die auf ein Objekt über einen Index zugreifen, für ein dynamisches Objekt ausgeführt werden sollen.</span><span class="sxs-lookup"><span data-stu-id="97149-376">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that access an object by index should be performed for a dynamic object.</span></span> <span data-ttu-id="97149-377">Wenn die Methode nicht überschrieben wird, bestimmt der Lauf Zeit Binder der Sprache das Verhalten.</span><span class="sxs-lookup"><span data-stu-id="97149-377">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="97149-378">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="97149-378">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="97149-379">Wenn diese Methode überschrieben wird, wird Sie automatisch aufgerufen, wenn Sie über einen Vorgang wie `sampleObject[3] = 10` C# in oder `sampleObject(3) = 10` in Visual Basic verfügen, bei dem `sampleObject` von der <xref:System.Dynamic.DynamicObject> Klasse abgeleitet ist.</span><span class="sxs-lookup"><span data-stu-id="97149-379">If this method is overridden, it is automatically invoked when you have an operation like `sampleObject[3] = 10` in C# or `sampleObject(3) = 10` in Visual Basic, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97149-380">Angenommen, Sie möchten ein Objekt erstellen, in dem auf Eigenschaften entweder durch Namen wie `Property0`, `Property1`usw. oder durch einen Index zugegriffen werden kann, sodass z. b. `sampleObject.Property0` `sampleObject[0]` in C# oder `sampleObject(0)` in Visual Basic entspricht.</span><span class="sxs-lookup"><span data-stu-id="97149-380">Assume that you want to create an object in which properties can be accessed either by names such as `Property0`, `Property1`, and so on, or by index, so that, for example, `sampleObject.Property0` is equivalent to `sampleObject[0]` in C# or `sampleObject(0)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="97149-381">Im folgenden Codebeispiel wird die `SampleDynamicObject`-Klasse veranschaulicht, die von der <xref:System.Dynamic.DynamicObject>-Klasse abgeleitet wird.</span><span class="sxs-lookup"><span data-stu-id="97149-381">The following code example demonstrates the `SampleDynamicObject` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="97149-382">Die `SampleDynamicObject`-Klasse enthält ein Objekt des `Dictionary<string, object>` Typs (`Dictionary(Of String, Object)` in Visual Basic), um die Schlüssel-Wert-Paare zu speichern.</span><span class="sxs-lookup"><span data-stu-id="97149-382">The `SampleDynamicObject` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs.</span></span> <span data-ttu-id="97149-383">`SampleDynamicObject` überschreibt die Methoden <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> und <xref:System.Dynamic.DynamicObject.TryGetIndex%2A>, um den Zugriff nach Index zu aktivieren.</span><span class="sxs-lookup"><span data-stu-id="97149-383">`SampleDynamicObject` overrides the <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> and <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> methods to enable access by index.</span></span> <span data-ttu-id="97149-384">Er überschreibt die Methoden <xref:System.Dynamic.DynamicObject.TrySetMember%2A> und <xref:System.Dynamic.DynamicObject.TryGetMember%2A>, um den Zugriff über den Eigenschaftsnamen zu aktivieren.</span><span class="sxs-lookup"><span data-stu-id="97149-384">It overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access by property name.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#4)]
 [!code-vb[System.Dynamic.DynamicObject#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySetMember">
      <MemberSignature Language="C#" Value="public virtual bool TrySetMember (System.Dynamic.SetMemberBinder binder, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TrySetMember(class System.Dynamic.SetMemberBinder binder, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TrySetMember (binder As SetMemberBinder, value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TrySetMember(System::Dynamic::SetMemberBinder ^ binder, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member TrySetMember : System.Dynamic.SetMemberBinder * obj -&gt; bool&#xA;override this.TrySetMember : System.Dynamic.SetMemberBinder * obj -&gt; bool" Usage="dynamicObject.TrySetMember (binder, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.SetMemberBinder" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="97149-385">Stellt Informationen zum Objekt bereit, das den dynamischen Vorgang aufgerufen hat.</span><span class="sxs-lookup"><span data-stu-id="97149-385">Provides information about the object that called the dynamic operation.</span></span> <span data-ttu-id="97149-386">Die <c>binder.Name</c>-Eigenschaft gibt den Namen des Members an, dem der Wert zugewiesen wird.</span><span class="sxs-lookup"><span data-stu-id="97149-386">The <c>binder.Name</c> property provides the name of the member to which the value is being assigned.</span></span> <span data-ttu-id="97149-387">Für die Anweisung <c>sampleObject.SampleProperty = "Test"</c>, bei der <c>sampleObject</c> eine Instanz der Klasse ist, die von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet wurde, gibt <c>binder.Name</c> beispielsweise „SampleProperty“ zurück.</span><span class="sxs-lookup"><span data-stu-id="97149-387">For example, for the statement <c>sampleObject.SampleProperty = "Test"</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleProperty".</span></span> <span data-ttu-id="97149-388">Die <c>binder.IgnoreCase</c>-Eigenschaft gibt an, ob der Membername die Groß-/Kleinschreibung berücksichtigt.</span><span class="sxs-lookup"><span data-stu-id="97149-388">The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</span></span></param>
        <param name="value"><span data-ttu-id="97149-389">Der Wert, der auf den Member festgelegt werden soll.</span><span class="sxs-lookup"><span data-stu-id="97149-389">The value to set to the member.</span></span> <span data-ttu-id="97149-390">Für die Anweisung <c>sampleObject.SampleProperty = "Test"</c>, bei der <c>sampleObject</c> eine Instanz der Klasse ist, die von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet wurde, ist <paramref name="value" />beispielsweise „Test“.</span><span class="sxs-lookup"><span data-stu-id="97149-390">For example, for <c>sampleObject.SampleProperty = "Test"</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, the <paramref name="value" /> is "Test".</span></span></param>
        <summary><span data-ttu-id="97149-391">Stellt die Implementierung für Vorgänge bereit, die Memberwerte festlegen.</span><span class="sxs-lookup"><span data-stu-id="97149-391">Provides the implementation for operations that set member values.</span></span> <span data-ttu-id="97149-392">Von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitete Klassen können diese Methode überschreiben, um dynamisches Verhalten für Vorgänge wie das Festlegen eines Werts für eine Eigenschaft anzugeben.</span><span class="sxs-lookup"><span data-stu-id="97149-392">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as setting a value for a property.</span></span></summary>
        <returns><span data-ttu-id="97149-393"><see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="97149-393"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="97149-394">Wenn die Methode <see langword="false" /> zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt.</span><span class="sxs-lookup"><span data-stu-id="97149-394">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="97149-395">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="97149-395">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97149-396">Von der <xref:System.Dynamic.DynamicObject>-Klasse abgeleitete Klassen können diese Methode überschreiben, um anzugeben, wie Vorgänge, die einen Wert auf einen Member festlegen, für ein dynamisches Objekt ausgeführt werden sollen.</span><span class="sxs-lookup"><span data-stu-id="97149-396">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that set a value to a member should be performed for a dynamic object.</span></span> <span data-ttu-id="97149-397">Wenn die Methode nicht überschrieben wird, bestimmt der Lauf Zeit Binder der Sprache das Verhalten.</span><span class="sxs-lookup"><span data-stu-id="97149-397">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="97149-398">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="97149-398">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="97149-399">Diese Methode wird aufgerufen, wenn Sie Anweisungen wie `sampleObject.SampleProperty = "Test"`haben, wobei `sampleObject` eine Instanz der Klasse ist, die von der <xref:System.Dynamic.DynamicObject>-Klasse abgeleitet wird.</span><span class="sxs-lookup"><span data-stu-id="97149-399">This method is called when you have statements like `sampleObject.SampleProperty = "Test"`, where `sampleObject` is an instance of the class that is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="97149-400">Sie können auch eigene Member zu Klassen hinzufügen, die von der `DynamicObject`-Klasse abgeleitet werden.</span><span class="sxs-lookup"><span data-stu-id="97149-400">You can also add your own members to classes derived from the `DynamicObject` class.</span></span> <span data-ttu-id="97149-401">Wenn Ihre Klasse Eigenschaften definiert und auch die <xref:System.Dynamic.DynamicObject.TrySetMember%2A>-Methode überschreibt, verwendet die DLR (Dynamic Language Runtime) zuerst den sprach Binder, um nach einer statischen Definition einer Eigenschaft in der Klasse zu suchen.</span><span class="sxs-lookup"><span data-stu-id="97149-401">If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</span></span> <span data-ttu-id="97149-402">Wenn keine solche Eigenschaft vorhanden ist, ruft die DLR die <xref:System.Dynamic.DynamicObject.TrySetMember%2A>-Methode auf.</span><span class="sxs-lookup"><span data-stu-id="97149-402">If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97149-403">Angenommen, Sie möchten eine alternative Syntax für den Zugriff auf Werte in einem Wörterbuch bereitstellen, sodass Sie `sampleDictionary.Text = "Sample text"`schreiben können, statt `sampleDictionary["Text"] = "Sample text"` zu schreiben (`sampleDictionary("Text") = "Sample text"` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="97149-403">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="97149-404">Außerdem muss bei dieser Syntax die Groß-/Kleinschreibung nicht beachtet werden, sodass `sampleDictionary.Text` `sampleDictionary.text`entspricht.</span><span class="sxs-lookup"><span data-stu-id="97149-404">Also, this syntax must be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.</span></span>  
  
 <span data-ttu-id="97149-405">Im folgenden Codebeispiel wird die `DynamicDictionary`-Klasse veranschaulicht, die von der <xref:System.Dynamic.DynamicObject>-Klasse abgeleitet wird.</span><span class="sxs-lookup"><span data-stu-id="97149-405">The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="97149-406">Die `DynamicDictionary`-Klasse enthält ein Objekt des `Dictionary<string, object>`-Typs (`Dictionary(Of String, Object)` in Visual Basic) zum Speichern der Schlüssel-Wert-Paare und überschreibt die <xref:System.Dynamic.DynamicObject.TrySetMember%2A>-Methode und die <xref:System.Dynamic.DynamicObject.TryGetMember%2A>-Methode, um die neue Syntax zu unterstützen.</span><span class="sxs-lookup"><span data-stu-id="97149-406">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="97149-407">Außerdem wird eine `Count`-Eigenschaft bereitstellt, die anzeigt, wie viele dynamische Eigenschaften das Wörterbuch enthält.</span><span class="sxs-lookup"><span data-stu-id="97149-407">It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryUnaryOperation">
      <MemberSignature Language="C#" Value="public virtual bool TryUnaryOperation (System.Dynamic.UnaryOperationBinder binder, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryUnaryOperation(class System.Dynamic.UnaryOperationBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryUnaryOperation (binder As UnaryOperationBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryUnaryOperation(System::Dynamic::UnaryOperationBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryUnaryOperation : System.Dynamic.UnaryOperationBinder * obj -&gt; bool&#xA;override this.TryUnaryOperation : System.Dynamic.UnaryOperationBinder * obj -&gt; bool" Usage="dynamicObject.TryUnaryOperation (binder, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.UnaryOperationBinder" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="97149-408">Stellt Informationen zur unären Operation bereit.</span><span class="sxs-lookup"><span data-stu-id="97149-408">Provides information about the unary operation.</span></span> <span data-ttu-id="97149-409">Die <c>binder.Operation</c>-Eigenschaft gibt ein <see cref="T:System.Linq.Expressions.ExpressionType" />-Objekt zurück.</span><span class="sxs-lookup"><span data-stu-id="97149-409">The <c>binder.Operation</c> property returns an <see cref="T:System.Linq.Expressions.ExpressionType" /> object.</span></span> <span data-ttu-id="97149-410">Für die Anweisung <c>negativeNumber = -number</c>, bei der <c>number</c> von der <see langword="DynamicObject" />-Klasse abgeleitet wurde, gibt <c>binder.Operation</c> „Negate“ zurück.</span><span class="sxs-lookup"><span data-stu-id="97149-410">For example, for the <c>negativeNumber = -number</c> statement, where <c>number</c> is derived from the <see langword="DynamicObject" /> class, <c>binder.Operation</c> returns "Negate".</span></span></param>
        <param name="result"><span data-ttu-id="97149-411">Das Ergebnis der unären Operation.</span><span class="sxs-lookup"><span data-stu-id="97149-411">The result of the unary operation.</span></span></param>
        <summary><span data-ttu-id="97149-412">Stellt die Implementierung für unäre Operationen bereit.</span><span class="sxs-lookup"><span data-stu-id="97149-412">Provides implementation for unary operations.</span></span> <span data-ttu-id="97149-413">Von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitete Klassen können diese Methode überschreiben, um dynamisches Verhalten für Vorgänge wie Negation, Inkrement oder Dekrement anzugeben.</span><span class="sxs-lookup"><span data-stu-id="97149-413">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as negation, increment, or decrement.</span></span></summary>
        <returns><span data-ttu-id="97149-414"><see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="97149-414"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="97149-415">Wenn die Methode <see langword="false" /> zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt.</span><span class="sxs-lookup"><span data-stu-id="97149-415">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="97149-416">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="97149-416">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97149-417">Von der <xref:System.Dynamic.DynamicObject>-Klasse abgeleitete Klassen können diese Methode überschreiben, um anzugeben, wie unäre Vorgänge für ein dynamisches Objekt ausgeführt werden sollen.</span><span class="sxs-lookup"><span data-stu-id="97149-417">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how unary operations should be performed for a dynamic object.</span></span> <span data-ttu-id="97149-418">Wenn die Methode nicht überschrieben wird, bestimmt der Lauf Zeit Binder der Sprache das Verhalten.</span><span class="sxs-lookup"><span data-stu-id="97149-418">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="97149-419">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="97149-419">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="97149-420">Diese Methode wird aufgerufen, wenn Sie über unäre Vorgänge wie Negation, Inkrement oder Dekrement verfügen.</span><span class="sxs-lookup"><span data-stu-id="97149-420">This method is called when you have unary operations such as negation, increment, or decrement.</span></span> <span data-ttu-id="97149-421">Wenn die <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A>-Methode z. b. überschrieben wird, wird diese Methode automatisch für-Anweisungen wie `negativeNumber = -number`aufgerufen, wobei `number` von der <xref:System.Dynamic.DynamicObject>-Klasse abgeleitet wird.</span><span class="sxs-lookup"><span data-stu-id="97149-421">For example, if the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method is overridden, this method is automatically invoked for statements like `negativeNumber = -number`, where `number` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="97149-422">Sie können Informationen über den Typ der unären Operation abrufen, indem Sie die `Operation`-Eigenschaft des `binder`-Parameters verwenden.</span><span class="sxs-lookup"><span data-stu-id="97149-422">You can get information about the type of the unary operation by using the `Operation` property of the `binder` parameter.</span></span>  
  
 <span data-ttu-id="97149-423">Wenn das dynamische Objekt nur in C# -und-Visual Basic verwendet wird, kann die `binder.Operation`-Eigenschaft einen der folgenden Werte aus der <xref:System.Linq.Expressions.ExpressionType>-Enumeration aufweisen.</span><span class="sxs-lookup"><span data-stu-id="97149-423">If your dynamic object is used only in C# and Visual Basic, the `binder.Operation` property can have one of the following values from the <xref:System.Linq.Expressions.ExpressionType> enumeration.</span></span> <span data-ttu-id="97149-424">In anderen Sprachen wie IronPython oder IronRuby können Sie jedoch auch andere Werte haben.</span><span class="sxs-lookup"><span data-stu-id="97149-424">However, in other languages such as IronPython or IronRuby, you can have other values.</span></span>
  
|<span data-ttu-id="97149-425">Wert</span><span class="sxs-lookup"><span data-stu-id="97149-425">Value</span></span>|<span data-ttu-id="97149-426">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="97149-426">Description</span></span>|<span data-ttu-id="97149-427">C#</span><span class="sxs-lookup"><span data-stu-id="97149-427">C#</span></span>|<span data-ttu-id="97149-428">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="97149-428">Visual Basic</span></span>|  
|-----------|-----------------|---------|------------------|  
|`Decrement`|<span data-ttu-id="97149-429">Ein unärer Dekrement-Vorgang.</span><span class="sxs-lookup"><span data-stu-id="97149-429">A unary decrement operation.</span></span>|`a--`|<span data-ttu-id="97149-430">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="97149-430">Not supported.</span></span>|  
|`Increment`|<span data-ttu-id="97149-431">Ein unärer Inkrement-Vorgang.</span><span class="sxs-lookup"><span data-stu-id="97149-431">A unary increment operation.</span></span>|`a++`|<span data-ttu-id="97149-432">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="97149-432">Not supported.</span></span>|  
|`Negate`|<span data-ttu-id="97149-433">Eine arithmetische Negation.</span><span class="sxs-lookup"><span data-stu-id="97149-433">An arithmetic negation.</span></span>|`-a`|`-a`|  
|`Not`|<span data-ttu-id="97149-434">Eine logische Negation.</span><span class="sxs-lookup"><span data-stu-id="97149-434">A logical negation.</span></span>|`!a`|`Not a`|  
|`OnesComplement`|<span data-ttu-id="97149-435">Eine Ergänzung.</span><span class="sxs-lookup"><span data-stu-id="97149-435">A ones complement.</span></span>|`~a`|<span data-ttu-id="97149-436">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="97149-436">Not supported.</span></span>|  
|`IsFalse`|<span data-ttu-id="97149-437">Ein false-Bedingungs Wert.</span><span class="sxs-lookup"><span data-stu-id="97149-437">A false condition value.</span></span>|`a && b`|<span data-ttu-id="97149-438">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="97149-438">Not supported.</span></span>|  
|`IsTrue`|<span data-ttu-id="97149-439">Ein Wert für die tatsächliche Bedingung.</span><span class="sxs-lookup"><span data-stu-id="97149-439">A true condition value.</span></span>|`a &#124;&#124; b`|<span data-ttu-id="97149-440">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="97149-440">Not supported.</span></span>|  
|`UnaryPlus`|<span data-ttu-id="97149-441">Ein unäres Plus.</span><span class="sxs-lookup"><span data-stu-id="97149-441">A unary plus.</span></span>|`+a`|`+a`|  
  
> [!NOTE]
>  <span data-ttu-id="97149-442">Um `OrElse`-(`a || b`) und `AndAlso`-Vorgänge (`a && b`) für dynamische Objekte C#in zu implementieren, können Sie sowohl die <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A>-Methode als auch die <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A>-Methode implementieren.</span><span class="sxs-lookup"><span data-stu-id="97149-442">To implement `OrElse` (`a || b`) and `AndAlso` (`a && b`) operations for dynamic objects in C#, you may want to implement both the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method and the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method.</span></span>  
>   
>  <span data-ttu-id="97149-443">Der `OrElse` Vorgang besteht aus dem unären `IsTrue` Vorgang und dem binären `Or` Vorgang.</span><span class="sxs-lookup"><span data-stu-id="97149-443">The `OrElse` operation consists of the unary `IsTrue` operation and the binary `Or` operation.</span></span> <span data-ttu-id="97149-444">Der `Or` Vorgang wird nur ausgeführt, wenn das Ergebnis des `IsTrue` Vorgangs `false`ist.</span><span class="sxs-lookup"><span data-stu-id="97149-444">The `Or` operation is performed only if the result of the `IsTrue` operation is `false`.</span></span>  
>   
>  <span data-ttu-id="97149-445">Der `AndAlso` Vorgang besteht aus dem unären `IsFalse` Vorgang und dem binären `And` Vorgang.</span><span class="sxs-lookup"><span data-stu-id="97149-445">The `AndAlso` operation consists of the unary `IsFalse` operation and the binary `And` operation.</span></span> <span data-ttu-id="97149-446">Der `And` Vorgang wird nur ausgeführt, wenn das Ergebnis des `IsFalse` Vorgangs `false`ist.</span><span class="sxs-lookup"><span data-stu-id="97149-446">The `And` operation is performed only if the result of the `IsFalse` operation is `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97149-447">Angenommen, Sie benötigen eine Datenstruktur zum Speichern von Text-und numerischen Darstellungen von Zahlen, und Sie möchten einen mathematischen Negations Vorgang für solche Daten definieren.</span><span class="sxs-lookup"><span data-stu-id="97149-447">Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define a mathematical negation operation for such data.</span></span>  
  
 <span data-ttu-id="97149-448">Im folgenden Codebeispiel wird die `DynamicNumber`-Klasse veranschaulicht, die von der <xref:System.Dynamic.DynamicObject>-Klasse abgeleitet wird.</span><span class="sxs-lookup"><span data-stu-id="97149-448">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="97149-449">`DynamicNumber` überschreibt die <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A>-Methode, um die mathematische Negations Operation zu aktivieren.</span><span class="sxs-lookup"><span data-stu-id="97149-449">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method to enable the mathematical negation operation.</span></span> <span data-ttu-id="97149-450">Überschreibt auch die Methoden <xref:System.Dynamic.DynamicObject.TrySetMember%2A> und <xref:System.Dynamic.DynamicObject.TryGetMember%2A>, um den Zugriff auf die Elemente zu ermöglichen.</span><span class="sxs-lookup"><span data-stu-id="97149-450">Is also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the elements.</span></span>  
  
 <span data-ttu-id="97149-451">In diesem Beispiel wird nur der mathematische Negations Vorgang unterstützt.</span><span class="sxs-lookup"><span data-stu-id="97149-451">In this example, only the mathematical negation operation is supported.</span></span> <span data-ttu-id="97149-452">Wenn Sie versuchen, eine Anweisung wie `negativeNumber = +number`zu schreiben, tritt eine Lauf Zeit Ausnahme auf.</span><span class="sxs-lookup"><span data-stu-id="97149-452">If you try to write a statement like `negativeNumber = +number`, a run-time exception occurs.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#7)]
 [!code-vb[System.Dynamic.DynamicObject#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

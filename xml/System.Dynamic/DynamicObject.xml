<Type Name="DynamicObject" FullName="System.Dynamic.DynamicObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="441ffdca4dc64bd1fee3aff7e839255c64f79d34" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65003615" /></Metadata><TypeSignature Language="C#" Value="public class DynamicObject : System.Dynamic.IDynamicMetaObjectProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit DynamicObject extends System.Object implements class System.Dynamic.IDynamicMetaObjectProvider" />
  <TypeSignature Language="DocId" Value="T:System.Dynamic.DynamicObject" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicObject&#xA;Implements IDynamicMetaObjectProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicObject : System::Dynamic::IDynamicMetaObjectProvider" />
  <TypeSignature Language="F#" Value="type DynamicObject = class&#xA;    interface IDynamicMetaObjectProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Dynamic.Runtime</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Dynamic.IDynamicMetaObjectProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="1acd4-101">Stellt eine Basisklasse zum Angeben von dynamischem Verhalten zur Laufzeit bereit.</span><span class="sxs-lookup"><span data-stu-id="1acd4-101">Provides a base class for specifying dynamic behavior at run time.</span></span> <span data-ttu-id="1acd4-102">Diese Klasse muss vererbt werden und kann nicht direkt instanziiert werden.</span><span class="sxs-lookup"><span data-stu-id="1acd4-102">This class must be inherited from; you cannot instantiate it directly.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1acd4-103">Die `DynamicObject` -Klasse können Sie definieren, welche Vorgänge für dynamische Objekte ausgeführt werden können und wie diese Vorgänge ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-103">The `DynamicObject` class enables you to define which operations can be performed on dynamic objects and how to perform those operations.</span></span> <span data-ttu-id="1acd4-104">Beispielsweise können Sie definieren, was geschieht, wenn Sie versuchen, Abrufen oder eine Objekteigenschaft festlegen, eine Methode aufrufen oder standard mathematische Operationen wie Addition und Multiplikation durchführen.</span><span class="sxs-lookup"><span data-stu-id="1acd4-104">For example, you can define what happens when you try to get or set an object property, call a method, or perform standard mathematical operations such as addition and multiplication.</span></span>  
  
 <span data-ttu-id="1acd4-105">Diese Klasse ist nützlich, wenn Sie ein praktischer Protokoll für eine Bibliothek erstellen möchten.</span><span class="sxs-lookup"><span data-stu-id="1acd4-105">This class can be useful if you want to create a more convenient protocol for a library.</span></span> <span data-ttu-id="1acd4-106">Wenn Benutzer der Bibliothek verwenden eine Syntax wie beispielsweise `Scriptobj.SetProperty("Count", 1)`, Sie bieten die Möglichkeit, viel einfachere Syntax, zu verwenden, etwa `scriptobj.Count = 1`.</span><span class="sxs-lookup"><span data-stu-id="1acd4-106">For example, if users of your library have to use syntax like `Scriptobj.SetProperty("Count", 1)`, you can provide the ability to use much simpler syntax, like `scriptobj.Count = 1`.</span></span>  
  
 <span data-ttu-id="1acd4-107">Sie können eine Instanz der nicht direkt erstellen die `DynamicObject` Klasse.</span><span class="sxs-lookup"><span data-stu-id="1acd4-107">You cannot directly create an instance of the `DynamicObject` class.</span></span> <span data-ttu-id="1acd4-108">Um das dynamische Verhalten zu implementieren, sollten Sie das erben die `DynamicObject` Klasse, und überschreiben Sie die erforderlichen Methoden.</span><span class="sxs-lookup"><span data-stu-id="1acd4-108">To implement the dynamic behavior, you may want to inherit from the `DynamicObject` class and override necessary methods.</span></span> <span data-ttu-id="1acd4-109">Z. B. Wenn Sie nur Vorgänge zum Festlegen und Abrufen von Eigenschaften benötigen, können Sie überschreiben lediglich die <xref:System.Dynamic.DynamicObject.TrySetMember%2A> und <xref:System.Dynamic.DynamicObject.TryGetMember%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="1acd4-109">For example, if you need only operations for setting and getting properties, you can override just the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods.</span></span>  
  
 <span data-ttu-id="1acd4-110">In C# geschrieben, um dynamisches Verhalten zu aktivieren, für die Instanzen von Klassen abgeleitet der `DynamicObject` -Klasse, müssen Sie verwenden die `dynamic` Schlüsselwort.</span><span class="sxs-lookup"><span data-stu-id="1acd4-110">In C#, to enable dynamic behavior for instances of classes derived from the `DynamicObject` class, you must use the `dynamic` keyword.</span></span> <span data-ttu-id="1acd4-111">Weitere Informationen finden Sie unter [Verwenden von dynamischen Typen](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span><span class="sxs-lookup"><span data-stu-id="1acd4-111">For more information, see [Using Type dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span></span>  
  
 <span data-ttu-id="1acd4-112">In Visual Basic werden die dynamischen Vorgänge durch späte Bindung unterstützt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-112">In Visual Basic, dynamic operations are supported by late binding.</span></span> <span data-ttu-id="1acd4-113">Weitere Informationen finden Sie unter [frühes und spätes Binden](https://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).</span><span class="sxs-lookup"><span data-stu-id="1acd4-113">For more information, see [Early and Late Binding](https://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).</span></span>  
  
 <span data-ttu-id="1acd4-114">Im folgenden Codebeispiel wird veranschaulicht, wie Sie eine Instanz einer Klasse zu erstellen, das von abgeleitet ist die `DynamicObject` Klasse.</span><span class="sxs-lookup"><span data-stu-id="1acd4-114">The following code example demonstrates how to create an instance of a class that is derived from the `DynamicObject` class.</span></span>  
  
```csharp  
public class SampleDynamicObject : DynamicObject {}  
//...  
dynamic sampleObject = new SampleDynamicObject ();  
```  
  
```vb  
Public Class SampleDynamicObject   
    Inherits DynamicObject  
'...  
Dim sampleObject As Object = New SampleDynamicObject()  
```  
  
 <span data-ttu-id="1acd4-115">Sie können auch eigene Member hinzufügen, um Klassen, die von der `DynamicObject` Klasse.</span><span class="sxs-lookup"><span data-stu-id="1acd4-115">You can also add your own members to classes derived from the `DynamicObject` class.</span></span> <span data-ttu-id="1acd4-116">Wenn Ihre Klasse Eigenschaften definiert und auch überschreibt die <xref:System.Dynamic.DynamicObject.TrySetMember%2A> -Methode, die dynamic Language Runtime (DLR) verwendet zuerst die Sprache Binder nach einer Eigenschaft in der Klasse eine statische Definition gesucht werden soll.</span><span class="sxs-lookup"><span data-stu-id="1acd4-116">If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</span></span> <span data-ttu-id="1acd4-117">Wenn keine solche Eigenschaft vorhanden ist, ruft die DLR die <xref:System.Dynamic.DynamicObject.TrySetMember%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="1acd4-117">If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.</span></span>  
  
 <span data-ttu-id="1acd4-118">Die `DynamicObject` Klasse implementiert die Schnittstelle für die DLR <xref:System.Dynamic.IDynamicMetaObjectProvider>, können Sie Instanzen von Teilen der `DynamicObject` Klassenschema in Sprachen, die das Modell der DLR-Interoperabilität unterstützen.</span><span class="sxs-lookup"><span data-stu-id="1acd4-118">The `DynamicObject` class implements the DLR interface <xref:System.Dynamic.IDynamicMetaObjectProvider>, which enables you to share instances of the `DynamicObject` class between languages that support the DLR interoperability model.</span></span> <span data-ttu-id="1acd4-119">Sie können z. B. erstellen eine Instanz von der `DynamicObject` in C#-Klasse, und klicken Sie dann an eine IronPython-Funktion übergeben.</span><span class="sxs-lookup"><span data-stu-id="1acd4-119">For example, you can create an instance of the `DynamicObject` class in C# and then pass it to an IronPython function.</span></span> <span data-ttu-id="1acd4-120">Weitere Informationen finden Sie unter [Übersicht über die Dynamic Language Runtime](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md).</span><span class="sxs-lookup"><span data-stu-id="1acd4-120">For more information, see [Dynamic Language Runtime Overview](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1acd4-121">Wenn Sie ein einfaches Szenario haben, in denen, die Sie ein Objekt benötigen, das nur hinzufügen und Entfernen von Mitgliedern zur Laufzeit jedoch, die nicht auf bestimmte Vorgänge definieren und nicht statische Member aufweisen, verwenden Sie, die <xref:System.Dynamic.ExpandoObject> Klasse.</span><span class="sxs-lookup"><span data-stu-id="1acd4-121">If you have a simple scenario in which you need an object that can only add and remove members at run time but that does not need to define specific operations and does not have static members, use the <xref:System.Dynamic.ExpandoObject> class.</span></span>  
>   
>  <span data-ttu-id="1acd4-122">Wenn Sie ein erweitertes Szenario haben, in denen Sie definieren, wie dynamische Objekte, die Interoperabilitätsprotokoll teilnehmen aus, oder Sie müssen zum Zwischenspeichern von DLR schnellen dynamischen Versand verwalten müssen, erstellen Sie eine eigene Implementierung der <xref:System.Dynamic.IDynamicMetaObjectProvider> Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="1acd4-122">If you have a more advanced scenario in which you need to define how dynamic objects participate in the interoperability protocol, or you need to manage DLR fast dynamic dispatch caching, create your own implementation of the <xref:System.Dynamic.IDynamicMetaObjectProvider> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1acd4-123">Angenommen, Sie alternative Syntax bereitstellen, für den Zugriff auf Werte in einem Wörterbuch, also, dass anstelle des Schreibens möchten `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), können Sie schreiben `sampleDictionary.Text = "Sample text"`.</span><span class="sxs-lookup"><span data-stu-id="1acd4-123">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="1acd4-124">Darüber hinaus soll diese Syntax als Groß-/Kleinschreibung, sodass `sampleDictionary.Text` entspricht `sampleDictionary.text`.</span><span class="sxs-lookup"><span data-stu-id="1acd4-124">Also, you want this syntax to be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.</span></span>  
  
 <span data-ttu-id="1acd4-125">Im folgenden Codebeispiel wird veranschaulicht, die `DynamicDictionary` -Klasse, die von abgeleitet ist die `DynamicObject` Klasse.</span><span class="sxs-lookup"><span data-stu-id="1acd4-125">The following code example demonstrates the `DynamicDictionary` class, which is derived from the `DynamicObject` class.</span></span> <span data-ttu-id="1acd4-126">Die `DynamicDictionary` Klasse enthält ein Objekt des der `Dictionary<string, object>` Typ (`Dictionary(Of String, Object)` in Visual Basic) zum Speichern der Schlüssel-Wert-Paare und überschreibt die <xref:System.Dynamic.DynamicObject.TrySetMember%2A> und <xref:System.Dynamic.DynamicObject.TryGetMember%2A> Methoden zum unterstützen der neuen Syntax.</span><span class="sxs-lookup"><span data-stu-id="1acd4-126">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="1acd4-127">Es bietet auch eine `Count` Eigenschaft, die zeigt, wie viele dynamischen Eigenschaften des Wörterbuchs enthält.</span><span class="sxs-lookup"><span data-stu-id="1acd4-127">It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 <span data-ttu-id="1acd4-128">Weitere Beispiele finden Sie unter [Erstellen von Wrappern mit DynamicObject](https://devblogs.microsoft.com/csharpfaq/dynamic-in-c-4-0-creating-wrappers-with-dynamicobject/) Blog des C#-häufig gestellte Fragen.</span><span class="sxs-lookup"><span data-stu-id="1acd4-128">For more examples, see [Creating Wrappers with DynamicObject](https://devblogs.microsoft.com/csharpfaq/dynamic-in-c-4-0-creating-wrappers-with-dynamicobject/) on the C# Frequently Asked Questions blog.</span></span>  
 
 
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DynamicObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DynamicObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1acd4-129">Ermöglicht es abgeleiteten Typen, um eine neue Instanz der Initialisieren der <see cref="T:System.Dynamic.DynamicObject" /> Typ.</span><span class="sxs-lookup"><span data-stu-id="1acd4-129">Enables derived types to initialize a new instance of the <see cref="T:System.Dynamic.DynamicObject" /> type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1acd4-130">Sie können eine Instanz der nicht direkt erstellen die <xref:System.Dynamic.DynamicObject> Klasse.</span><span class="sxs-lookup"><span data-stu-id="1acd4-130">You cannot directly create an instance of the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="1acd4-131">Um dynamisches Verhalten zu implementieren, müssen Sie erben die <xref:System.Dynamic.DynamicObject> Klasse, und überschreiben Sie die erforderlichen Methoden.</span><span class="sxs-lookup"><span data-stu-id="1acd4-131">To implement dynamic behavior, you have to inherit from the <xref:System.Dynamic.DynamicObject> class and override necessary methods.</span></span>  
  
 <span data-ttu-id="1acd4-132">In C# geschrieben, um dynamisches Verhalten zu aktivieren, für die Instanzen der Klassen abgeleitet der <xref:System.Dynamic.DynamicObject> -Klasse, müssen Sie verwenden die `dynamic` Schlüsselwort.</span><span class="sxs-lookup"><span data-stu-id="1acd4-132">In C#, to enable dynamic behavior for instances of the classes derived from the <xref:System.Dynamic.DynamicObject> class, you must use the `dynamic` keyword.</span></span> <span data-ttu-id="1acd4-133">Weitere Informationen finden Sie unter [Verwenden von dynamischen Typen](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span><span class="sxs-lookup"><span data-stu-id="1acd4-133">For more information, see [Using Type dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span></span>  
  
 <span data-ttu-id="1acd4-134">In Visual Basic werden die dynamischen Vorgänge durch späte Bindung unterstützt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-134">In Visual Basic, dynamic operations are supported by late binding.</span></span> <span data-ttu-id="1acd4-135">Weitere Informationen finden Sie unter [frühes und spätes Binden](https://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).</span><span class="sxs-lookup"><span data-stu-id="1acd4-135">For more information, see [Early and Late Binding](https://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1acd4-136">Im folgenden Codebeispiel wird veranschaulicht, wie eine Instanz der Klassen zu erstellen, das von abgeleitet werden die <xref:System.Dynamic.DynamicObject> Klasse.</span><span class="sxs-lookup"><span data-stu-id="1acd4-136">The following code example demonstrates how to create an instance of classes that are derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
```csharp  
public class SampleDynamicObject : DynamicObject {}  
//...  
dynamic sampleObject = new SampleDynamicObject ();  
```  
  
```vb  
Public Class SampleDynamicObject   
    Inherits DynamicObject  
'...  
Dim sampleObject As Object = New SampleDynamicObject()  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDynamicMemberNames">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;string&gt; GetDynamicMemberNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;string&gt; GetDynamicMemberNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.GetDynamicMemberNames" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDynamicMemberNames () As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ GetDynamicMemberNames();" />
      <MemberSignature Language="F#" Value="abstract member GetDynamicMemberNames : unit -&gt; seq&lt;string&gt;&#xA;override this.GetDynamicMemberNames : unit -&gt; seq&lt;string&gt;" Usage="dynamicObject.GetDynamicMemberNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1acd4-137">Gibt die Enumeration aller dynamischen Membernamen zurück.</span><span class="sxs-lookup"><span data-stu-id="1acd4-137">Returns the enumeration of all dynamic member names.</span></span></summary>
        <returns><span data-ttu-id="1acd4-138">Eine Sequenz, die dynamische Membernamen enthält.</span><span class="sxs-lookup"><span data-stu-id="1acd4-138">A sequence that contains dynamic member names.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1acd4-139">Diese Methode gibt es nur für Debugzwecke bestimmt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-139">This method exists for debugging purposes only.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetaObject">
      <MemberSignature Language="C#" Value="public virtual System.Dynamic.DynamicMetaObject GetMetaObject (System.Linq.Expressions.Expression parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Dynamic.DynamicMetaObject GetMetaObject(class System.Linq.Expressions.Expression parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetaObject (parameter As Expression) As DynamicMetaObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Dynamic::DynamicMetaObject ^ GetMetaObject(System::Linq::Expressions::Expression ^ parameter);" />
      <MemberSignature Language="F#" Value="abstract member GetMetaObject : System.Linq.Expressions.Expression -&gt; System.Dynamic.DynamicMetaObject&#xA;override this.GetMetaObject : System.Linq.Expressions.Expression -&gt; System.Dynamic.DynamicMetaObject" Usage="dynamicObject.GetMetaObject parameter" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Dynamic.DynamicMetaObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="1acd4-140">Der Ausdruck, der stellt <see cref="T:System.Dynamic.DynamicMetaObject" /> an die dynamischen virtuellen Methoden verteilt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-140">The expression that represents <see cref="T:System.Dynamic.DynamicMetaObject" /> to dispatch to the dynamic virtual methods.</span></span></param>
        <summary><span data-ttu-id="1acd4-141">Stellt eine <see cref="T:System.Dynamic.DynamicMetaObject" /> , die an die dynamischen virtuellen Methoden sendet.</span><span class="sxs-lookup"><span data-stu-id="1acd4-141">Provides a <see cref="T:System.Dynamic.DynamicMetaObject" /> that dispatches to the dynamic virtual methods.</span></span> <span data-ttu-id="1acd4-142">Das Objekt kann in einem anderen gekapselt werden <see cref="T:System.Dynamic.DynamicMetaObject" /> um benutzerdefiniertes Verhalten für einzelne Aktionen bereitzustellen.</span><span class="sxs-lookup"><span data-stu-id="1acd4-142">The object can be encapsulated inside another <see cref="T:System.Dynamic.DynamicMetaObject" /> to provide custom behavior for individual actions.</span></span> <span data-ttu-id="1acd4-143">Diese Methode unterstützt die Dynamic Language Runtime-Infrastruktur für sprachimplementierungen, und es sollte nicht direkt aus Ihrem Code verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="1acd4-143">This method supports the Dynamic Language Runtime infrastructure for language implementers and it is not intended to be used directly from your code.</span></span></summary>
        <returns><span data-ttu-id="1acd4-144">Ein Objekt der <see cref="T:System.Dynamic.DynamicMetaObject" /> Typ.</span><span class="sxs-lookup"><span data-stu-id="1acd4-144">An object of the <see cref="T:System.Dynamic.DynamicMetaObject" /> type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryBinaryOperation">
      <MemberSignature Language="C#" Value="public virtual bool TryBinaryOperation (System.Dynamic.BinaryOperationBinder binder, object arg, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryBinaryOperation(class System.Dynamic.BinaryOperationBinder binder, object arg, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryBinaryOperation (binder As BinaryOperationBinder, arg As Object, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryBinaryOperation(System::Dynamic::BinaryOperationBinder ^ binder, System::Object ^ arg, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryBinaryOperation : System.Dynamic.BinaryOperationBinder * obj *  -&gt; bool&#xA;override this.TryBinaryOperation : System.Dynamic.BinaryOperationBinder * obj *  -&gt; bool" Usage="dynamicObject.TryBinaryOperation (binder, arg, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.BinaryOperationBinder" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="1acd4-145">Enthält Informationen zur binären Operation.</span><span class="sxs-lookup"><span data-stu-id="1acd4-145">Provides information about the binary operation.</span></span> <span data-ttu-id="1acd4-146">Die <c>binder.Operation</c>-Eigenschaft gibt ein <see cref="T:System.Linq.Expressions.ExpressionType" />-Objekt zurück.</span><span class="sxs-lookup"><span data-stu-id="1acd4-146">The <c>binder.Operation</c> property returns an <see cref="T:System.Linq.Expressions.ExpressionType" /> object.</span></span> <span data-ttu-id="1acd4-147">Für die Anweisung <c>sum = first + second</c>, bei der <c>first</c> und <c>second</c> von der <see langword="DynamicObject" />-Klasse abgeleitet wurden, gibt <c>binder.Operation</c> beispielsweise <c>ExpressionType.Add</c> zurück.</span><span class="sxs-lookup"><span data-stu-id="1acd4-147">For example, for the <c>sum = first + second</c> statement, where <c>first</c> and <c>second</c> are derived from the <see langword="DynamicObject" /> class, <c>binder.Operation</c> returns <c>ExpressionType.Add</c>.</span></span></param>
        <param name="arg"><span data-ttu-id="1acd4-148">Der Rechte Operand für die binäre Operation.</span><span class="sxs-lookup"><span data-stu-id="1acd4-148">The right operand for the binary operation.</span></span> <span data-ttu-id="1acd4-149">Für die Anweisung <c>sum = first + second</c>, bei der <c>first</c> und <c>second</c> von der <see langword="DynamicObject" />-Klasse abgeleitet wurden, ist <paramref name="arg" /> beispielsweise gleich <c>second</c>.</span><span class="sxs-lookup"><span data-stu-id="1acd4-149">For example, for the <c>sum = first + second</c> statement, where <c>first</c> and <c>second</c> are derived from the <see langword="DynamicObject" /> class, <paramref name="arg" /> is equal to <c>second</c>.</span></span></param>
        <param name="result"><span data-ttu-id="1acd4-150">Das Ergebnis der binären Operation.</span><span class="sxs-lookup"><span data-stu-id="1acd4-150">The result of the binary operation.</span></span></param>
        <summary><span data-ttu-id="1acd4-151">Stellt die Implementierung für binäre Operationen bereit.</span><span class="sxs-lookup"><span data-stu-id="1acd4-151">Provides implementation for binary operations.</span></span> <span data-ttu-id="1acd4-152">Von abgeleiteten Klassen der <see cref="T:System.Dynamic.DynamicObject" /> Klasse kann überschreiben diese Methode, um dynamisches Verhalten für Operationen wie Addition oder Multiplikation anzugeben.</span><span class="sxs-lookup"><span data-stu-id="1acd4-152">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as addition and multiplication.</span></span></summary>
        <returns><span data-ttu-id="1acd4-153"><see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1acd4-153"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="1acd4-154">Wenn diese Methode zurückgibt <see langword="false" />, der Laufzeitbinder der Sprache bestimmt das Verhalten.</span><span class="sxs-lookup"><span data-stu-id="1acd4-154">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1acd4-155">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="1acd4-155">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1acd4-156">Von abgeleiteten Klassen der <xref:System.Dynamic.DynamicObject> Klasse kann überschreiben diese Methode, um anzugeben, wie die binäre Operationen für ein dynamisches Objekt ausgeführt werden soll.</span><span class="sxs-lookup"><span data-stu-id="1acd4-156">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how binary operations should be performed for a dynamic object.</span></span> <span data-ttu-id="1acd4-157">Wenn die Methode nicht überschrieben wird, wird das Verhalten von der Laufzeitbinder der Sprache bestimmt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-157">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1acd4-158">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="1acd4-158">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="1acd4-159">Diese Methode wird aufgerufen, wenn Sie die binäre Operationen wie Addition und Multiplikation verfügen.</span><span class="sxs-lookup"><span data-stu-id="1acd4-159">This method is called when you have binary operations such as addition or multiplication.</span></span> <span data-ttu-id="1acd4-160">Z. B. wenn die <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> -Methode überschrieben wird, wird automatisch aufgerufen, für Anweisungen wie `sum = first + second` oder `multiply = first*second`, wobei `first` ergibt sich aus der `DynamicObject` Klasse.</span><span class="sxs-lookup"><span data-stu-id="1acd4-160">For example, if the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method is overridden, it is automatically invoked for statements like `sum = first + second` or `multiply = first*second`, where `first` is derived from the `DynamicObject` class.</span></span>  
  
 <span data-ttu-id="1acd4-161">Sie erhalten Informationen über den Typ der binären Operation mit den `Operation` Eigenschaft der `binder` Parameter.</span><span class="sxs-lookup"><span data-stu-id="1acd4-161">You can get information about the type of the binary operation by using the `Operation` property of the `binder` parameter.</span></span>  
  
 <span data-ttu-id="1acd4-162">Wenn das dynamische Objekt, nur in c# und Visual Basic verwendet wird die `binder.Operation` Eigenschaft sind die folgenden Werte aus der <xref:System.Linq.Expressions.ExpressionType> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="1acd4-162">If your dynamic object is used only in C# and Visual Basic, the `binder.Operation` property can have one of the following values from the <xref:System.Linq.Expressions.ExpressionType> enumeration.</span></span> <span data-ttu-id="1acd4-163">In anderen Sprachen wie IronPython oder IronRuby erstellen, können Sie jedoch andere Werte haben.</span><span class="sxs-lookup"><span data-stu-id="1acd4-163">However, in other languages such as IronPython or IronRuby, you can have other values.</span></span>
  
|<span data-ttu-id="1acd4-164">Wert</span><span class="sxs-lookup"><span data-stu-id="1acd4-164">Value</span></span>|<span data-ttu-id="1acd4-165">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="1acd4-165">Description</span></span>|<span data-ttu-id="1acd4-166">C#</span><span class="sxs-lookup"><span data-stu-id="1acd4-166">C#</span></span>|<span data-ttu-id="1acd4-167">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="1acd4-167">Visual Basic</span></span>|  
|-----------|-----------------|---------|------------------|  
|`Add`|<span data-ttu-id="1acd4-168">Eine Addition ohne überlaufüberprüfung für numerische Operanden.</span><span class="sxs-lookup"><span data-stu-id="1acd4-168">An addition operation without overflow checking, for numeric operands.</span></span>|`a + b`|`a + b`|  
|`AddAssign`|<span data-ttu-id="1acd4-169">Eine zusammengesetzte additionszuweisungsoperation ohne überlaufüberprüfung für numerische Operanden.</span><span class="sxs-lookup"><span data-stu-id="1acd4-169">An addition compound assignment operation without overflow checking, for numeric operands.</span></span>|`a += b`|<span data-ttu-id="1acd4-170">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-170">Not supported.</span></span>|  
|`And`|<span data-ttu-id="1acd4-171">Eine bitweise `AND` Vorgang.</span><span class="sxs-lookup"><span data-stu-id="1acd4-171">A bitwise `AND` operation.</span></span>|`a & b`|`a And b`|  
|`AndAssign`|<span data-ttu-id="1acd4-172">Eine bitweise `AND` -Zuweisungsvorgang.</span><span class="sxs-lookup"><span data-stu-id="1acd4-172">A bitwise `AND` compound assignment operation.</span></span>|`a &= b`|<span data-ttu-id="1acd4-173">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-173">Not supported.</span></span>|  
|`Divide`|<span data-ttu-id="1acd4-174">Eine arithmetische Division.</span><span class="sxs-lookup"><span data-stu-id="1acd4-174">An arithmetic division operation.</span></span>|`a / b`|`a / b`|  
|`DivideAssign`|<span data-ttu-id="1acd4-175">Eine arithmetische zusammengesetzte Zuweisungsoperation.</span><span class="sxs-lookup"><span data-stu-id="1acd4-175">An arithmetic division compound assignment operation.</span></span>|`a /= b`|<span data-ttu-id="1acd4-176">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-176">Not supported.</span></span>|  
|`ExclusiveOr`|<span data-ttu-id="1acd4-177">Eine bitweise `XOR` Vorgang.</span><span class="sxs-lookup"><span data-stu-id="1acd4-177">A bitwise `XOR` operation.</span></span>|`a ^ b`|`a Xor b`|  
|`ExclusiveOrAssign`|<span data-ttu-id="1acd4-178">Eine bitweise `XOR` -Zuweisungsvorgang.</span><span class="sxs-lookup"><span data-stu-id="1acd4-178">A bitwise `XOR` compound assignment operation.</span></span>|`a ^= b`|<span data-ttu-id="1acd4-179">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-179">Not supported.</span></span>|  
|`GreaterThan`|<span data-ttu-id="1acd4-180">Ein "größer als"-Vergleich an.</span><span class="sxs-lookup"><span data-stu-id="1acd4-180">A "greater than" comparison.</span></span>|`a > b`|`a > b`|  
|`GreaterThanOrEqual`|<span data-ttu-id="1acd4-181">Eine Prüfung auf "größer als oder gleich".</span><span class="sxs-lookup"><span data-stu-id="1acd4-181">A "greater than or equal to" comparison.</span></span>|`a >= b`|<span data-ttu-id="1acd4-182">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-182">Not supported.</span></span>|  
|`LeftShift`|<span data-ttu-id="1acd4-183">Eine bitweise Linksschiebe-Operation.</span><span class="sxs-lookup"><span data-stu-id="1acd4-183">A bitwise left-shift operation.</span></span>|`a << b`|`a << b`|  
|`LeftShiftAssign`|<span data-ttu-id="1acd4-184">Eine bitweise zusammengesetzte Linksschiebezuweisung-Vorgang.</span><span class="sxs-lookup"><span data-stu-id="1acd4-184">A bitwise left-shift compound assignment operation.</span></span>|`a <<= b`|<span data-ttu-id="1acd4-185">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-185">Not supported.</span></span>|  
|`LessThan`|<span data-ttu-id="1acd4-186">Ein Vergleich "kleiner als".</span><span class="sxs-lookup"><span data-stu-id="1acd4-186">A "less than" comparison.</span></span>|`a < b`|`a < b`|  
|`LessThanOrEqual`|<span data-ttu-id="1acd4-187">Ein "kleiner als oder gleich"-Vergleich.</span><span class="sxs-lookup"><span data-stu-id="1acd4-187">A "less than or equal to" comparison.</span></span>|`a <= b`|<span data-ttu-id="1acd4-188">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-188">Not supported.</span></span>|  
|`Modulo`|<span data-ttu-id="1acd4-189">Eine arithmetische Restoperation.</span><span class="sxs-lookup"><span data-stu-id="1acd4-189">An arithmetic remainder operation.</span></span>|`a % b`|`a Mod b`|  
|`ModuloAssign`|<span data-ttu-id="1acd4-190">Eine arithmetische zusammengesetzte Restzuweisungsoperation.</span><span class="sxs-lookup"><span data-stu-id="1acd4-190">An arithmetic remainder compound assignment operation.</span></span>|`a %= b`|<span data-ttu-id="1acd4-191">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-191">Not supported.</span></span>|  
|`Multiply`|<span data-ttu-id="1acd4-192">Ein Multiplikationsvorgang ohne überlaufüberprüfung für numerische Operanden.</span><span class="sxs-lookup"><span data-stu-id="1acd4-192">A multiplication operation without overflow checking, for numeric operands.</span></span>|`a * b`|`a * b`|  
|`MultiplyAssign`|<span data-ttu-id="1acd4-193">Eine zusammengesetzte multiplikationszuweisungsoperation ohne überlaufüberprüfung für numerische Operanden.</span><span class="sxs-lookup"><span data-stu-id="1acd4-193">A multiplication compound assignment operation without overflow checking, for numeric operands.</span></span>|`a *= b`|<span data-ttu-id="1acd4-194">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-194">Not supported.</span></span>|  
|`NotEqual`|<span data-ttu-id="1acd4-195">Ein Ungleichheitsvergleich.</span><span class="sxs-lookup"><span data-stu-id="1acd4-195">An inequality comparison.</span></span>|`a != b`|`a <> b`|  
|`Or`|<span data-ttu-id="1acd4-196">Eine bitweise oder logische `OR` Vorgang.</span><span class="sxs-lookup"><span data-stu-id="1acd4-196">A bitwise or logical `OR` operation.</span></span>|`a &#124; b`|`a Or b`|  
|`OrAssign`|<span data-ttu-id="1acd4-197">Eine bitweise oder logische `OR` verbundzuweisung.</span><span class="sxs-lookup"><span data-stu-id="1acd4-197">A bitwise or logical `OR` compound assignment.</span></span>|`a &#124;= b`|<span data-ttu-id="1acd4-198">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-198">Not supported.</span></span>|  
|`Power`|<span data-ttu-id="1acd4-199">Eine mathematische Operation des Potenzieren einer Zahl in eine Potenz.</span><span class="sxs-lookup"><span data-stu-id="1acd4-199">A mathematical operation of raising a number to a power.</span></span>|<span data-ttu-id="1acd4-200">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-200">Not supported.</span></span>|`a ^ b`|  
|`RightShift`|<span data-ttu-id="1acd4-201">Eine bitweise Rechtsschiebe-Operation.</span><span class="sxs-lookup"><span data-stu-id="1acd4-201">A bitwise right-shift operation.</span></span>|`a >> b`|`a >> b`|  
|`RightShiftAssign`|<span data-ttu-id="1acd4-202">Eine bitweise Rechtsschiebe-Zuweisungsoperation zusammengesetzten.</span><span class="sxs-lookup"><span data-stu-id="1acd4-202">A bitwise right-shift compound assignment operation.</span></span>|`a >>= b`|<span data-ttu-id="1acd4-203">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-203">Not supported.</span></span>|  
|`Subtract`|<span data-ttu-id="1acd4-204">Eine Subtraktion ohne überlaufüberprüfung für numerische Operanden.</span><span class="sxs-lookup"><span data-stu-id="1acd4-204">A subtraction operation without overflow checking, for numeric operands.</span></span>|`a - b`|`a - b`|  
|`SubtractAssign`|<span data-ttu-id="1acd4-205">Eine zusammengesetzte subtraktionszuweisungsoperation ohne überlaufüberprüfung für numerische Operanden.</span><span class="sxs-lookup"><span data-stu-id="1acd4-205">A subtraction compound assignment operation without overflow checking, for numeric operands.</span></span>|`a -= b`|<span data-ttu-id="1acd4-206">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-206">Not supported.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="1acd4-207">Zum Implementieren `OrElse` (`a || b`) und `AndAlso` (`a && b`) Vorgänge für dynamische Objekte in c#, Sie möchten beide implementieren die <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> Methode und die <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="1acd4-207">To implement `OrElse` (`a || b`) and `AndAlso` (`a && b`) operations for dynamic objects in C#, you may want to implement both the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method and the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method.</span></span>  
>   
>  <span data-ttu-id="1acd4-208">Die `OrElse` Vorgang besteht aus den unären `IsTrue` Vorgang und den binären `Or` Vorgang.</span><span class="sxs-lookup"><span data-stu-id="1acd4-208">The `OrElse` operation consists of the unary `IsTrue` operation and the binary `Or` operation.</span></span> <span data-ttu-id="1acd4-209">Die `Or` Vorgang erfolgt nur, wenn das Ergebnis der `IsTrue` Vorgang `false`.</span><span class="sxs-lookup"><span data-stu-id="1acd4-209">The `Or` operation is performed only if the result of the `IsTrue` operation is `false`.</span></span>  
>   
>  <span data-ttu-id="1acd4-210">Die `AndAlso` Vorgang besteht aus den unären `IsFalse` Vorgang und den binären `And` Vorgang.</span><span class="sxs-lookup"><span data-stu-id="1acd4-210">The `AndAlso` operation consists of the unary `IsFalse` operation and the binary `And` operation.</span></span> <span data-ttu-id="1acd4-211">Die `And` Vorgang erfolgt nur, wenn das Ergebnis der `IsFalse` Vorgang `false`.</span><span class="sxs-lookup"><span data-stu-id="1acd4-211">The `And` operation is performed only if the result of the `IsFalse` operation is `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1acd4-212">Angenommen Sie, Sie eine Datenstruktur zum Speichern von Text und die numerische Darstellung von Zahlen benötigen, und Sie einfache mathematische Operationen wie Addition und Subtraktion für solche Daten definieren möchten.</span><span class="sxs-lookup"><span data-stu-id="1acd4-212">Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define basic mathematical operations such as addition and subtraction for such data.</span></span>  
  
 <span data-ttu-id="1acd4-213">Im folgenden Codebeispiel wird veranschaulicht, die `DynamicNumber` -Klasse, die von abgeleitet ist die <xref:System.Dynamic.DynamicObject> Klasse.</span><span class="sxs-lookup"><span data-stu-id="1acd4-213">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="1acd4-214">`DynamicNumber` überschreibt die <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> Methode, um die mathematische Operationen zu aktivieren.</span><span class="sxs-lookup"><span data-stu-id="1acd4-214">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method to enable mathematical operations.</span></span> <span data-ttu-id="1acd4-215">Außerdem überschreibt er die <xref:System.Dynamic.DynamicObject.TrySetMember%2A> und <xref:System.Dynamic.DynamicObject.TryGetMember%2A> Methoden, um den Zugriff auf die Elemente zu ermöglichen.</span><span class="sxs-lookup"><span data-stu-id="1acd4-215">It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the elements.</span></span>  
  
 <span data-ttu-id="1acd4-216">In diesem Beispiel werden nur die Operationen Addition und Subtraktion unterstützt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-216">In this example, only addition and subtraction operations are supported.</span></span> <span data-ttu-id="1acd4-217">Wenn Sie versuchen, eine Anweisung wie schreiben `resultNumber = firstNumber*secondNumber`, wird eine Laufzeitausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="1acd4-217">If you try to write a statement like `resultNumber = firstNumber*secondNumber`, a run-time exception is thrown.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#2)]
 [!code-vb[System.Dynamic.DynamicObject#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryConvert">
      <MemberSignature Language="C#" Value="public virtual bool TryConvert (System.Dynamic.ConvertBinder binder, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryConvert(class System.Dynamic.ConvertBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryConvert (binder As ConvertBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryConvert(System::Dynamic::ConvertBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryConvert : System.Dynamic.ConvertBinder *  -&gt; bool&#xA;override this.TryConvert : System.Dynamic.ConvertBinder *  -&gt; bool" Usage="dynamicObject.TryConvert (binder, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.ConvertBinder" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="1acd4-218">Enthält Informationen zu den Konvertierungsvorgang.</span><span class="sxs-lookup"><span data-stu-id="1acd4-218">Provides information about the conversion operation.</span></span> <span data-ttu-id="1acd4-219">Die <c>binder.Type</c>-Eigenschaft stellt den Typ bereit, in den das Objekt konvertiert werden muss.</span><span class="sxs-lookup"><span data-stu-id="1acd4-219">The <c>binder.Type</c> property provides the type to which the object must be converted.</span></span> <span data-ttu-id="1acd4-220">Für die Anweisung <c>(String)sampleObject</c> in C# (<c>CType(sampleObject, Type)</c> in Visual Basic), bei der <c>sampleObject</c> eine Instanz der Klasse ist, die von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet wurde, gibt <c>binder.Type</c> beispielsweise den <see cref="T:System.String" />-Typ zurück.</span><span class="sxs-lookup"><span data-stu-id="1acd4-220">For example, for the statement <c>(String)sampleObject</c> in C# (<c>CType(sampleObject, Type)</c> in Visual Basic), where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Type</c> returns the <see cref="T:System.String" /> type.</span></span> <span data-ttu-id="1acd4-221">Die <c>binder.Explicit</c>-Eigenschaft stellt Informationen zur Art der ausgeführten Konvertierung bereit.</span><span class="sxs-lookup"><span data-stu-id="1acd4-221">The <c>binder.Explicit</c> property provides information about the kind of conversion that occurs.</span></span> <span data-ttu-id="1acd4-222">Es gibt <see langword="true" /> für die explizite Konvertierung und <see langword="false" /> für eine implizite Konvertierung.</span><span class="sxs-lookup"><span data-stu-id="1acd4-222">It returns <see langword="true" /> for explicit conversion and <see langword="false" /> for implicit conversion.</span></span></param>
        <param name="result"><span data-ttu-id="1acd4-223">Das Ergebnis des Typkonvertierungsvorgangs.</span><span class="sxs-lookup"><span data-stu-id="1acd4-223">The result of the type conversion operation.</span></span></param>
        <summary><span data-ttu-id="1acd4-224">Stellt die Implementierung für den Typ Konvertierungsvorgänge bereit.</span><span class="sxs-lookup"><span data-stu-id="1acd4-224">Provides implementation for type conversion operations.</span></span> <span data-ttu-id="1acd4-225">Von abgeleiteten Klassen der <see cref="T:System.Dynamic.DynamicObject" /> Klasse kann überschreiben diese Methode, um dynamisches Verhalten für Vorgänge angeben, die ein Objekt von einem Typ in einen anderen konvertieren.</span><span class="sxs-lookup"><span data-stu-id="1acd4-225">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.</span></span></summary>
        <returns><span data-ttu-id="1acd4-226"><see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1acd4-226"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="1acd4-227">Wenn diese Methode zurückgibt <see langword="false" />, der Laufzeitbinder der Sprache bestimmt das Verhalten.</span><span class="sxs-lookup"><span data-stu-id="1acd4-227">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1acd4-228">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="1acd4-228">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1acd4-229">Von abgeleiteten Klassen der <xref:System.Dynamic.DynamicObject> Klasse kann überschreiben diese Methode, um anzugeben, wie eine typkonvertierung für ein dynamisches Objekt ausgeführt werden soll.</span><span class="sxs-lookup"><span data-stu-id="1acd4-229">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a type conversion should be performed for a dynamic object.</span></span> <span data-ttu-id="1acd4-230">Wenn die Methode nicht überschrieben wird, wird das Verhalten von der Laufzeitbinder der Sprache bestimmt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-230">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1acd4-231">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="1acd4-231">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="1acd4-232">In C# geschrieben Wenn diese Methode überschrieben wird, wird sie automatisch aufgerufen, wenn Sie eine explizite oder implizite Konvertierung haben wie im folgenden Codebeispiel wird gezeigt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-232">In C#, if this method is overridden, it is automatically invoked when you have an explicit or implicit conversion, as shown in the code example below.</span></span>  
  
 <span data-ttu-id="1acd4-233">In Visual Basic wird nur die explizite Konvertierung unterstützt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-233">In Visual Basic, only explicit conversion is supported.</span></span> <span data-ttu-id="1acd4-234">Wenn Sie diese Methode überschreiben, rufen Sie sie mithilfe der <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> oder <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> Funktionen.</span><span class="sxs-lookup"><span data-stu-id="1acd4-234">If you override this method, you call it by using the <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> or <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> functions.</span></span>  
  
```csharp  
// Explicit conversion.  
String sampleExplicit = (String)sampleObject;  
// Implicit conversion.  
String sampleImplicit = sampleObject;  
```  
  
```vb  
// Explicit conversion - first variant.  
Dim testExplicit1 = CTypeDynamic(Of String)(sampleObject)  
// Explicit conversion - second variant.  
Dim testExplicit2 = CTypeDynamic(sampleObject, GetType(String))  
```  
  
   
  
## Examples  
 <span data-ttu-id="1acd4-235">Angenommen Sie, Sie eine Datenstruktur zum Speichern von Text und die numerische Darstellung von Zahlen benötigen und zum Definieren von Konvertierungen von dieser Datenstruktur für Zeichenfolgen und Zahlen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="1acd4-235">Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define conversions of this data structure to strings and integers.</span></span>  
  
 <span data-ttu-id="1acd4-236">Im folgenden Codebeispiel wird veranschaulicht, die `DynamicNumber` -Klasse, die von abgeleitet ist die <xref:System.Dynamic.DynamicObject> Klasse.</span><span class="sxs-lookup"><span data-stu-id="1acd4-236">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="1acd4-237">`DynamicNumber` überschreibt die <xref:System.Dynamic.DynamicObject.TryConvert%2A> Methode zum Aktivieren von typkonvertierung.</span><span class="sxs-lookup"><span data-stu-id="1acd4-237">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryConvert%2A> method to enable type conversion.</span></span> <span data-ttu-id="1acd4-238">Außerdem überschreibt er die <xref:System.Dynamic.DynamicObject.TrySetMember%2A> und <xref:System.Dynamic.DynamicObject.TryGetMember%2A> Methoden zum Aktivieren des Zugriffs auf die Datenelemente.</span><span class="sxs-lookup"><span data-stu-id="1acd4-238">It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the data elements.</span></span>  
  
 <span data-ttu-id="1acd4-239">In diesem Beispiel wird nur die Konvertierung in Zeichenfolgen und Zahlen unterstützt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-239">In this example, only conversion to strings and integers is supported.</span></span> <span data-ttu-id="1acd4-240">Wenn Sie versuchen, ein Objekt in einen anderen Typ zu konvertieren, wird eine Laufzeitausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="1acd4-240">If you try to convert an object to any other type, a run-time exception is thrown.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#3)]
 [!code-vb[System.Dynamic.DynamicObject#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateInstance">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateInstance (System.Dynamic.CreateInstanceBinder binder, object[] args, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateInstance(class System.Dynamic.CreateInstanceBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateInstance (binder As CreateInstanceBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryCreateInstance(System::Dynamic::CreateInstanceBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryCreateInstance : System.Dynamic.CreateInstanceBinder * obj[] *  -&gt; bool&#xA;override this.TryCreateInstance : System.Dynamic.CreateInstanceBinder * obj[] *  -&gt; bool" Usage="dynamicObject.TryCreateInstance (binder, args, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.CreateInstanceBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="1acd4-241">Stellt Informationen zum Initialisierungsvorgang bereit.</span><span class="sxs-lookup"><span data-stu-id="1acd4-241">Provides information about the initialization operation.</span></span></param>
        <param name="args"><span data-ttu-id="1acd4-242">Die Argumente, die während der Initialisierung auf das Objekt übergeben werden.</span><span class="sxs-lookup"><span data-stu-id="1acd4-242">The arguments that are passed to the object during initialization.</span></span> <span data-ttu-id="1acd4-243">Für den Vorgang <c>new SampleType(100)</c>, bei dem <c>SampleType</c> der Typ ist, der von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet wurde, ist <c>args[0]</c> beispielsweise gleich 100.</span><span class="sxs-lookup"><span data-stu-id="1acd4-243">For example, for the <c>new SampleType(100)</c> operation, where <c>SampleType</c> is the type derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</span></span></param>
        <param name="result"><span data-ttu-id="1acd4-244">Das Ergebnis der Initialisierung.</span><span class="sxs-lookup"><span data-stu-id="1acd4-244">The result of the initialization.</span></span></param>
        <summary><span data-ttu-id="1acd4-245">Stellt die Implementierung für Vorgänge, die eine neue Instanz eines dynamischen Objekts initialisieren.</span><span class="sxs-lookup"><span data-stu-id="1acd4-245">Provides the implementation for operations that initialize a new instance of a dynamic object.</span></span> <span data-ttu-id="1acd4-246">Diese Methode ist nicht für die Verwendung in c# oder Visual Basic vorgesehen.</span><span class="sxs-lookup"><span data-stu-id="1acd4-246">This method is not intended for use in C# or Visual Basic.</span></span></summary>
        <returns><span data-ttu-id="1acd4-247"><see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1acd4-247"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="1acd4-248">Wenn diese Methode zurückgibt <see langword="false" />, der Laufzeitbinder der Sprache bestimmt das Verhalten.</span><span class="sxs-lookup"><span data-stu-id="1acd4-248">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1acd4-249">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="1acd4-249">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1acd4-250">Von abgeleiteten Klassen der <xref:System.Dynamic.DynamicObject> Klasse kann überschreiben diese Methode, um anzugeben, wie eine neue Instanz des dynamischen Objekts initialisiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1acd4-250">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a new instance of the dynamic object should be initialized.</span></span> <span data-ttu-id="1acd4-251">Wenn die Methode nicht überschrieben wird, wird das Verhalten von der Laufzeitbinder der Sprache bestimmt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-251">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1acd4-252">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="1acd4-252">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="1acd4-253">C# und Visual Basic-Compiler geben nie Code aus, um diese Methode verwenden, da sie nicht über die erstklassige Typen unterstützen.</span><span class="sxs-lookup"><span data-stu-id="1acd4-253">C# and Visual Basic compilers never emit code to use this method because they do not support first-class types.</span></span> <span data-ttu-id="1acd4-254">Diese Methode ist für Sprachen, die die Initialisierung von dynamischen Objekten zu unterstützen, indem Sie mit einer Syntax wie vorgesehen `dynamic new`.</span><span class="sxs-lookup"><span data-stu-id="1acd4-254">This method is intended for languages that support the initialization of dynamic objects by using syntax like `dynamic new`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDeleteIndex">
      <MemberSignature Language="C#" Value="public virtual bool TryDeleteIndex (System.Dynamic.DeleteIndexBinder binder, object[] indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryDeleteIndex(class System.Dynamic.DeleteIndexBinder binder, object[] indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryDeleteIndex (binder As DeleteIndexBinder, indexes As Object()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryDeleteIndex(System::Dynamic::DeleteIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes);" />
      <MemberSignature Language="F#" Value="abstract member TryDeleteIndex : System.Dynamic.DeleteIndexBinder * obj[] -&gt; bool&#xA;override this.TryDeleteIndex : System.Dynamic.DeleteIndexBinder * obj[] -&gt; bool" Usage="dynamicObject.TryDeleteIndex (binder, indexes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.DeleteIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="1acd4-255">Enthält Informationen zu den Löschvorgang.</span><span class="sxs-lookup"><span data-stu-id="1acd4-255">Provides information about the deletion.</span></span></param>
        <param name="indexes"><span data-ttu-id="1acd4-256">Die Indizes gelöscht werden soll.</span><span class="sxs-lookup"><span data-stu-id="1acd4-256">The indexes to be deleted.</span></span></param>
        <summary><span data-ttu-id="1acd4-257">Stellt die Implementierung für Vorgänge, die ein Objekt nach Index löschen.</span><span class="sxs-lookup"><span data-stu-id="1acd4-257">Provides the implementation for operations that delete an object by index.</span></span> <span data-ttu-id="1acd4-258">Diese Methode ist nicht für die Verwendung in c# oder Visual Basic vorgesehen.</span><span class="sxs-lookup"><span data-stu-id="1acd4-258">This method is not intended for use in C# or Visual Basic.</span></span></summary>
        <returns><span data-ttu-id="1acd4-259"><see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1acd4-259"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="1acd4-260">Wenn diese Methode zurückgibt <see langword="false" />, der Laufzeitbinder der Sprache bestimmt das Verhalten.</span><span class="sxs-lookup"><span data-stu-id="1acd4-260">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1acd4-261">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="1acd4-261">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1acd4-262">Von abgeleiteten Klassen der <xref:System.Dynamic.DynamicObject> Klasse kann überschreiben diese Methode, um anzugeben, wie ein Wert, der einem angegebenen Index gelöscht werden soll.</span><span class="sxs-lookup"><span data-stu-id="1acd4-262">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a value that has a specified index should be deleted.</span></span> <span data-ttu-id="1acd4-263">Wenn die Methode nicht überschrieben wird, wird das Verhalten von der Laufzeitbinder der Sprache bestimmt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-263">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1acd4-264">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="1acd4-264">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="1acd4-265">C# und Visual Basic-Compiler geben nie Code aus, um diese Methode verwenden, da sie nicht über diese Art von Vorgang unterstützen.</span><span class="sxs-lookup"><span data-stu-id="1acd4-265">C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation.</span></span> <span data-ttu-id="1acd4-266">Diese Methode ist für Sprachen, die Syntax zum Löschen von Objekten wie z. B. nach Index unterstützen vorgesehen `del sampleObject[1,2]` in Python.</span><span class="sxs-lookup"><span data-stu-id="1acd4-266">This method is intended for languages that support syntax for deleting objects by index, such as `del sampleObject[1,2]` in Python.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDeleteMember">
      <MemberSignature Language="C#" Value="public virtual bool TryDeleteMember (System.Dynamic.DeleteMemberBinder binder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryDeleteMember(class System.Dynamic.DeleteMemberBinder binder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryDeleteMember (binder As DeleteMemberBinder) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryDeleteMember(System::Dynamic::DeleteMemberBinder ^ binder);" />
      <MemberSignature Language="F#" Value="abstract member TryDeleteMember : System.Dynamic.DeleteMemberBinder -&gt; bool&#xA;override this.TryDeleteMember : System.Dynamic.DeleteMemberBinder -&gt; bool" Usage="dynamicObject.TryDeleteMember binder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.DeleteMemberBinder" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="1acd4-267">Enthält Informationen zu den Löschvorgang.</span><span class="sxs-lookup"><span data-stu-id="1acd4-267">Provides information about the deletion.</span></span></param>
        <summary><span data-ttu-id="1acd4-268">Stellt die Implementierung für Vorgänge, die einen Objektmember löschen.</span><span class="sxs-lookup"><span data-stu-id="1acd4-268">Provides the implementation for operations that delete an object member.</span></span> <span data-ttu-id="1acd4-269">Diese Methode ist nicht für die Verwendung in c# oder Visual Basic vorgesehen.</span><span class="sxs-lookup"><span data-stu-id="1acd4-269">This method is not intended for use in C# or Visual Basic.</span></span></summary>
        <returns><span data-ttu-id="1acd4-270"><see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1acd4-270"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="1acd4-271">Wenn diese Methode zurückgibt <see langword="false" />, der Laufzeitbinder der Sprache bestimmt das Verhalten.</span><span class="sxs-lookup"><span data-stu-id="1acd4-271">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1acd4-272">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="1acd4-272">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1acd4-273">Von abgeleiteten Klassen der <xref:System.Dynamic.DynamicObject> Klasse kann überschreiben diese Methode, um anzugeben, wie ein Objektmember gelöscht werden soll.</span><span class="sxs-lookup"><span data-stu-id="1acd4-273">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how an object member should be deleted.</span></span> <span data-ttu-id="1acd4-274">Wenn diese Methode nicht überschrieben wird, wird das Verhalten von der Laufzeitbinder der Sprache bestimmt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-274">When this method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1acd4-275">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="1acd4-275">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="1acd4-276">C# und Visual Basic-Compiler geben nie Code aus, um diese Methode verwenden, da sie nicht über diese Art von Vorgang unterstützen.</span><span class="sxs-lookup"><span data-stu-id="1acd4-276">C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation.</span></span> <span data-ttu-id="1acd4-277">Diese Methode ist für Sprachen, die Syntax zum Löschen von Elementen, z. B. unterstützen vorgesehen `del sampleObject.SampleMember` in Python.</span><span class="sxs-lookup"><span data-stu-id="1acd4-277">This method is intended for languages that support syntax for deleting members, such as `del sampleObject.SampleMember` in Python.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetIndex">
      <MemberSignature Language="C#" Value="public virtual bool TryGetIndex (System.Dynamic.GetIndexBinder binder, object[] indexes, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetIndex(class System.Dynamic.GetIndexBinder binder, object[] indexes, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetIndex (binder As GetIndexBinder, indexes As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetIndex(System::Dynamic::GetIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryGetIndex : System.Dynamic.GetIndexBinder * obj[] *  -&gt; bool&#xA;override this.TryGetIndex : System.Dynamic.GetIndexBinder * obj[] *  -&gt; bool" Usage="dynamicObject.TryGetIndex (binder, indexes, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.GetIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="1acd4-278">Enthält Informationen über den Vorgang.</span><span class="sxs-lookup"><span data-stu-id="1acd4-278">Provides information about the operation.</span></span></param>
        <param name="indexes"><span data-ttu-id="1acd4-279">Die Indizes, die im Vorgang verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="1acd4-279">The indexes that are used in the operation.</span></span> <span data-ttu-id="1acd4-280">Für den Vorgang <c>sampleObject[3]</c> in C# (<c>sampleObject(3)</c> in Visual Basic), bei dem <c>sampleObject</c> von der <see langword="DynamicObject" />-Klasse abgeleitet wurde, ist <c>indexes[0]</c> beispielsweise gleich 3.</span><span class="sxs-lookup"><span data-stu-id="1acd4-280">For example, for the <c>sampleObject[3]</c> operation in C# (<c>sampleObject(3)</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see langword="DynamicObject" /> class, <c>indexes[0]</c> is equal to 3.</span></span></param>
        <param name="result"><span data-ttu-id="1acd4-281">Das Ergebnis des Indexvorgangs.</span><span class="sxs-lookup"><span data-stu-id="1acd4-281">The result of the index operation.</span></span></param>
        <summary><span data-ttu-id="1acd4-282">Stellt die Implementierung für Vorgänge, die einen Wert nach Index abzurufen.</span><span class="sxs-lookup"><span data-stu-id="1acd4-282">Provides the implementation for operations that get a value by index.</span></span> <span data-ttu-id="1acd4-283">Von abgeleiteten Klassen der <see cref="T:System.Dynamic.DynamicObject" /> Klasse kann überschreiben diese Methode, um dynamisches Verhalten für Indexvorgänge anzugeben.</span><span class="sxs-lookup"><span data-stu-id="1acd4-283">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for indexing operations.</span></span></summary>
        <returns><span data-ttu-id="1acd4-284"><see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1acd4-284"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="1acd4-285">Wenn diese Methode zurückgibt <see langword="false" />, der Laufzeitbinder der Sprache bestimmt das Verhalten.</span><span class="sxs-lookup"><span data-stu-id="1acd4-285">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1acd4-286">(In den meisten Fällen wird eine Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="1acd4-286">(In most cases, a run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1acd4-287">Von abgeleiteten Klassen der <xref:System.Dynamic.DynamicObject> Klasse kann überschreiben diese Methode, um anzugeben, wie das Abrufen eines Werts über einen Index für ein dynamisches Objekt ausgeführt werden sollte.</span><span class="sxs-lookup"><span data-stu-id="1acd4-287">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how getting a value by index should be performed for a dynamic object.</span></span> <span data-ttu-id="1acd4-288">Wenn die Methode nicht überschrieben wird, wird das Verhalten von der Laufzeitbinder der Sprache bestimmt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-288">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1acd4-289">(In den meisten Fällen wird eine Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="1acd4-289">(In most cases, a run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="1acd4-290">Wenn diese Methode überschrieben wird, wird Sie automatisch aufgerufen, wenn ein Vorgang wie vorliegt `sampleObject[3]` in c# oder `sampleObject(3)` in Visual Basic, wobei `sampleObject` ergibt sich aus der <xref:System.Dynamic.DynamicObject> Klasse.</span><span class="sxs-lookup"><span data-stu-id="1acd4-290">If this method is overridden, it is automatically invoked when you have an operation like `sampleObject[3]` in C# or `sampleObject(3)` in Visual Basic, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1acd4-291">Wird davon ausgegangen, dass Sie ein Objekt zu erstellen, in denen Eigenschaften können sein, möchten Zugriff auf durch die Namen z. B. `Property0`, `Property1`, und so weiter, oder anhand des Indexes, damit, z. B. `sampleObject.Property0` entspricht `sampleObject[0]` in C# geschrieben oder `sampleObject(0)` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="1acd4-291">Assume that you want to create an object in which properties can be accessed either by names such as `Property0`, `Property1`, and so on, or by index, so that, for example, `sampleObject.Property0` is equivalent to `sampleObject[0]` in C# or `sampleObject(0)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="1acd4-292">Im folgenden Codebeispiel wird veranschaulicht, die `SampleDynamicObject` -Klasse, die von abgeleitet ist die <xref:System.Dynamic.DynamicObject> Klasse.</span><span class="sxs-lookup"><span data-stu-id="1acd4-292">The following code example demonstrates the `SampleDynamicObject` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="1acd4-293">Die `SampleDynamicObject` -Klasse enthält ein Objekt von der `Dictionary<string, object>` Typ (`Dictionary(Of String, Object)` in Visual Basic) zum Speichern von Schlüssel-Wert-Paare.</span><span class="sxs-lookup"><span data-stu-id="1acd4-293">The `SampleDynamicObject` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs.</span></span> <span data-ttu-id="1acd4-294">`SampleDynamicObject` überschreibt die <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> und <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> Methoden zum Aktivieren des Zugriffs nach Index.</span><span class="sxs-lookup"><span data-stu-id="1acd4-294">`SampleDynamicObject` overrides the <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> and <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> methods to enable access by index.</span></span> <span data-ttu-id="1acd4-295">Es überschreibt die <xref:System.Dynamic.DynamicObject.TrySetMember%2A> und <xref:System.Dynamic.DynamicObject.TryGetMember%2A> Methoden zum Aktivieren des Zugriffs nach Eigenschaftenname an.</span><span class="sxs-lookup"><span data-stu-id="1acd4-295">It overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access by property name.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#4)]
 [!code-vb[System.Dynamic.DynamicObject#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMember">
      <MemberSignature Language="C#" Value="public virtual bool TryGetMember (System.Dynamic.GetMemberBinder binder, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetMember(class System.Dynamic.GetMemberBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetMember (binder As GetMemberBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetMember(System::Dynamic::GetMemberBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryGetMember : System.Dynamic.GetMemberBinder *  -&gt; bool&#xA;override this.TryGetMember : System.Dynamic.GetMemberBinder *  -&gt; bool" Usage="dynamicObject.TryGetMember (binder, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.GetMemberBinder" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="1acd4-296">Enthält Informationen über das Objekt, das den dynamischen Vorgang aufgerufen hat.</span><span class="sxs-lookup"><span data-stu-id="1acd4-296">Provides information about the object that called the dynamic operation.</span></span> <span data-ttu-id="1acd4-297">Die <c>binder.Name</c>-Eigenschaft gibt den Namen des Members an, für den der dynamische Vorgang ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="1acd4-297">The <c>binder.Name</c> property provides the name of the member on which the dynamic operation is performed.</span></span> <span data-ttu-id="1acd4-298">Für die Anweisung <c>Console.WriteLine(sampleObject.SampleProperty)</c>, bei der <c>sampleObject</c> eine Instanz der Klasse ist, die von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet wurde, gibt <c>binder.Name</c> beispielsweise „SampleProperty“ zurück.</span><span class="sxs-lookup"><span data-stu-id="1acd4-298">For example, for the <c>Console.WriteLine(sampleObject.SampleProperty)</c> statement, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleProperty".</span></span> <span data-ttu-id="1acd4-299">Die <c>binder.IgnoreCase</c>-Eigenschaft gibt an, ob der Membername die Groß-/Kleinschreibung berücksichtigt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-299">The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</span></span></param>
        <param name="result"><span data-ttu-id="1acd4-300">Das Ergebnis des Vorgangs zum Abrufen.</span><span class="sxs-lookup"><span data-stu-id="1acd4-300">The result of the get operation.</span></span> <span data-ttu-id="1acd4-301">Z. B. wenn die Methode für eine Eigenschaft aufgerufen wird, Sie können den Eigenschaftswert zuweisen <paramref name="result" />.</span><span class="sxs-lookup"><span data-stu-id="1acd4-301">For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</span></span></param>
        <summary><span data-ttu-id="1acd4-302">Stellt die Implementierung für Vorgänge, die Elementwerte abrufen.</span><span class="sxs-lookup"><span data-stu-id="1acd4-302">Provides the implementation for operations that get member values.</span></span> <span data-ttu-id="1acd4-303">Von abgeleiteten Klassen der <see cref="T:System.Dynamic.DynamicObject" /> Klasse kann überschreiben diese Methode, um dynamisches Verhalten für Vorgänge wie das Abrufen eines Werts für eine Eigenschaft anzugeben.</span><span class="sxs-lookup"><span data-stu-id="1acd4-303">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.</span></span></summary>
        <returns><span data-ttu-id="1acd4-304"><see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1acd4-304"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="1acd4-305">Wenn diese Methode zurückgibt <see langword="false" />, der Laufzeitbinder der Sprache bestimmt das Verhalten.</span><span class="sxs-lookup"><span data-stu-id="1acd4-305">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1acd4-306">(In den meisten Fällen wird eine Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="1acd4-306">(In most cases, a run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1acd4-307">Von abgeleiteten Klassen der <xref:System.Dynamic.DynamicObject> Klasse kann überschreiben diese Methode, um anzugeben, wie die Vorgänge, die Elementwerte abrufen für ein dynamisches Objekt ausgeführt werden soll.</span><span class="sxs-lookup"><span data-stu-id="1acd4-307">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that get member values should be performed for a dynamic object.</span></span> <span data-ttu-id="1acd4-308">Wenn die Methode nicht überschrieben wird, wird das Verhalten von der Laufzeitbinder der Sprache bestimmt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-308">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1acd4-309">(In den meisten Fällen wird eine Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="1acd4-309">(In most cases, a run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="1acd4-310">Diese Methode wird aufgerufen, wenn Sie die Anweisungen wie verfügen `Console.WriteLine(sampleObject.SampleProperty)`, wobei `sampleObject` ist eine Instanz der abgeleiteten Klasse von der <xref:System.Dynamic.DynamicObject> Klasse.</span><span class="sxs-lookup"><span data-stu-id="1acd4-310">This method is called when you have statements like `Console.WriteLine(sampleObject.SampleProperty)`, where `sampleObject` is an instance of the class derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="1acd4-311">Sie können auch eigene Member hinzufügen, um Klassen, die von der `DynamicObject` Klasse.</span><span class="sxs-lookup"><span data-stu-id="1acd4-311">You can also add your own members to classes derived from the `DynamicObject` class.</span></span> <span data-ttu-id="1acd4-312">Wenn Ihre Klasse Eigenschaften definiert und auch überschreibt die <xref:System.Dynamic.DynamicObject.TrySetMember%2A> -Methode, die dynamic Language Runtime (DLR) verwendet zuerst die Sprache Binder nach einer Eigenschaft in der Klasse eine statische Definition gesucht werden soll.</span><span class="sxs-lookup"><span data-stu-id="1acd4-312">If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</span></span> <span data-ttu-id="1acd4-313">Wenn keine solche Eigenschaft vorhanden ist, ruft die DLR die <xref:System.Dynamic.DynamicObject.TrySetMember%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="1acd4-313">If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1acd4-314">Angenommen, Sie alternative Syntax bereitstellen, für den Zugriff auf Werte in einem Wörterbuch, also, dass anstelle des Schreibens möchten `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), können Sie schreiben `sampleDictionary.Text = "Sample text"`.</span><span class="sxs-lookup"><span data-stu-id="1acd4-314">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="1acd4-315">Darüber hinaus muss diese Syntax Groß-/Kleinschreibung, sodass `sampleDictionary.Text` entspricht `sampleDictionary.text`.</span><span class="sxs-lookup"><span data-stu-id="1acd4-315">Also, this syntax must be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.</span></span>  
  
 <span data-ttu-id="1acd4-316">Im folgenden Codebeispiel wird veranschaulicht, die `DynamicDictionary` -Klasse, die von abgeleitet ist die <xref:System.Dynamic.DynamicObject> Klasse.</span><span class="sxs-lookup"><span data-stu-id="1acd4-316">The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="1acd4-317">Die `DynamicDictionary` Klasse enthält ein Objekt des der `Dictionary<string, object>` Typ (`Dictionary(Of String, Object)` in Visual Basic) zum Speichern der Schlüssel-Wert-Paare und überschreibt die <xref:System.Dynamic.DynamicObject.TrySetMember%2A> und <xref:System.Dynamic.DynamicObject.TryGetMember%2A> Methoden zum unterstützen der neuen Syntax.</span><span class="sxs-lookup"><span data-stu-id="1acd4-317">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="1acd4-318">Es bietet auch eine `Count` Eigenschaft, die zeigt, wie viele dynamischen Eigenschaften des Wörterbuchs enthält.</span><span class="sxs-lookup"><span data-stu-id="1acd4-318">It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryInvoke">
      <MemberSignature Language="C#" Value="public virtual bool TryInvoke (System.Dynamic.InvokeBinder binder, object[] args, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryInvoke(class System.Dynamic.InvokeBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryInvoke (binder As InvokeBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryInvoke(System::Dynamic::InvokeBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryInvoke : System.Dynamic.InvokeBinder * obj[] *  -&gt; bool&#xA;override this.TryInvoke : System.Dynamic.InvokeBinder * obj[] *  -&gt; bool" Usage="dynamicObject.TryInvoke (binder, args, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.InvokeBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="1acd4-319">Enthält Informationen zu den Startvorgang.</span><span class="sxs-lookup"><span data-stu-id="1acd4-319">Provides information about the invoke operation.</span></span></param>
        <param name="args"><span data-ttu-id="1acd4-320">Die Argumente, die während des Aufrufvorgangs an das Objekt übergeben werden.</span><span class="sxs-lookup"><span data-stu-id="1acd4-320">The arguments that are passed to the object during the invoke operation.</span></span> <span data-ttu-id="1acd4-321">Für den Vorgang <c>sampleObject(100)</c>, bei dem <c>sampleObject</c> von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet wurde, ist <c>args[0]</c> beispielsweise gleich 100.</span><span class="sxs-lookup"><span data-stu-id="1acd4-321">For example, for the <c>sampleObject(100)</c> operation, where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</span></span></param>
        <param name="result"><span data-ttu-id="1acd4-322">Das Ergebnis des Objektaufrufs.</span><span class="sxs-lookup"><span data-stu-id="1acd4-322">The result of the object invocation.</span></span></param>
        <summary><span data-ttu-id="1acd4-323">Stellt die Implementierung für Vorgänge, die ein Objekt aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="1acd4-323">Provides the implementation for operations that invoke an object.</span></span> <span data-ttu-id="1acd4-324">Von abgeleiteten Klassen der <see cref="T:System.Dynamic.DynamicObject" /> Klasse kann überschreiben diese Methode, um dynamisches Verhalten für Vorgänge wie das Aufrufen eines Objekts oder Delegaten anzugeben.</span><span class="sxs-lookup"><span data-stu-id="1acd4-324">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.</span></span></summary>
        <returns><span data-ttu-id="1acd4-325"><see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1acd4-325"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="1acd4-326">Wenn diese Methode zurückgibt <see langword="false" />, der Laufzeitbinder der Sprache bestimmt das Verhalten.</span><span class="sxs-lookup"><span data-stu-id="1acd4-326">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1acd4-327">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="1acd4-327">(In most cases, a language-specific run-time exception is thrown.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1acd4-328">Von abgeleiteten Klassen der <xref:System.Dynamic.DynamicObject> Klasse kann überschreiben diese Methode, um anzugeben, wie die Vorgänge, die ein Objekt aufgerufen werden für ein dynamisches Objekt ausgeführt werden soll.</span><span class="sxs-lookup"><span data-stu-id="1acd4-328">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that invoke an object should be performed for a dynamic object.</span></span> <span data-ttu-id="1acd4-329">Wenn die Methode nicht überschrieben wird, wird das Verhalten von der Laufzeitbinder der Sprache bestimmt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-329">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1acd4-330">(In den meisten Fällen wird eine Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="1acd4-330">(In most cases, a run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="1acd4-331">Wenn diese Methode überschrieben wird, wird Sie automatisch aufgerufen, wenn ein Vorgang wie vorliegt `sampleObject(100)`, wobei `sampleObject` ergibt sich aus der <xref:System.Dynamic.DynamicObject> Klasse.</span><span class="sxs-lookup"><span data-stu-id="1acd4-331">If this method is overridden, it is automatically invoked when you have an operation like `sampleObject(100)`, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="1acd4-332">Der Vorgang zum Aufrufen eines Objekts wird in c#, aber nicht in Visual Basic unterstützt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-332">The operation for invoking an object is supported in C# but not in Visual Basic.</span></span> <span data-ttu-id="1acd4-333">Visual Basic-Compiler gibt nie Code zur Verwendung dieser Methode aus, und Visual Basic-Sprache unterstützt nicht die Syntax wie `sampleObject(100)`.</span><span class="sxs-lookup"><span data-stu-id="1acd4-333">The Visual Basic compiler never emits code to use this method, and the Visual Basic language does not support syntax like `sampleObject(100)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1acd4-334">Angenommen Sie, Sie eine Datenstruktur zum Speichern von Text und die numerische Darstellung von Zahlen benötigen.</span><span class="sxs-lookup"><span data-stu-id="1acd4-334">Assume that you need a data structure to store textual and numeric representations of numbers.</span></span> <span data-ttu-id="1acd4-335">Sie möchten den Wert für jede Eigenschaft einzeln angeben und auch, um alle Eigenschaften in einer einzelnen Anweisung initialisieren zu können.</span><span class="sxs-lookup"><span data-stu-id="1acd4-335">You want to be able to specify the value for each property individually and also to be able to initialize all properties in a single statement.</span></span>  
  
 <span data-ttu-id="1acd4-336">Im folgenden Codebeispiel wird veranschaulicht, die `DynamicNumber` -Klasse, die von abgeleitet ist die <xref:System.Dynamic.DynamicObject> Klasse.</span><span class="sxs-lookup"><span data-stu-id="1acd4-336">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="1acd4-337">`DynamicNumber` überschreibt die <xref:System.Dynamic.DynamicObject.TryInvoke%2A> Methode, um die Initialisierung aller Eigenschaften gleichzeitig zu aktivieren.</span><span class="sxs-lookup"><span data-stu-id="1acd4-337">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryInvoke%2A> method to enable initialization of all properties at one time.</span></span> <span data-ttu-id="1acd4-338">Außerdem überschreibt er die <xref:System.Dynamic.DynamicObject.TrySetMember%2A> und <xref:System.Dynamic.DynamicObject.TryGetMember%2A> Methoden, um den Zugriff auf einzelne Objekt – Eigenschaften ermöglichen.</span><span class="sxs-lookup"><span data-stu-id="1acd4-338">It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to individual object properties.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryInvokeMember">
      <MemberSignature Language="C#" Value="public virtual bool TryInvokeMember (System.Dynamic.InvokeMemberBinder binder, object[] args, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryInvokeMember(class System.Dynamic.InvokeMemberBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryInvokeMember (binder As InvokeMemberBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryInvokeMember(System::Dynamic::InvokeMemberBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryInvokeMember : System.Dynamic.InvokeMemberBinder * obj[] *  -&gt; bool&#xA;override this.TryInvokeMember : System.Dynamic.InvokeMemberBinder * obj[] *  -&gt; bool" Usage="dynamicObject.TryInvokeMember (binder, args, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.InvokeMemberBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="1acd4-339">Enthält Informationen zu den dynamischen Vorgang.</span><span class="sxs-lookup"><span data-stu-id="1acd4-339">Provides information about the dynamic operation.</span></span> <span data-ttu-id="1acd4-340">Die <c>binder.Name</c>-Eigenschaft gibt den Namen des Members an, für den der dynamische Vorgang ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="1acd4-340">The <c>binder.Name</c> property provides the name of the member on which the dynamic operation is performed.</span></span> <span data-ttu-id="1acd4-341">Für die Anweisung <c>sampleObject.SampleMethod(100)</c>, bei der <c>sampleObject</c> eine Instanz der Klasse ist, die von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet wurde, gibt <c>binder.Name</c> beispielsweise „SampleMethod“ zurück.</span><span class="sxs-lookup"><span data-stu-id="1acd4-341">For example, for the statement <c>sampleObject.SampleMethod(100)</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleMethod".</span></span> <span data-ttu-id="1acd4-342">Die <c>binder.IgnoreCase</c>-Eigenschaft gibt an, ob der Membername die Groß-/Kleinschreibung berücksichtigt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-342">The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</span></span></param>
        <param name="args"><span data-ttu-id="1acd4-343">Die Argumente, die während des Aufrufvorgangs an das Objektelement übergeben werden.</span><span class="sxs-lookup"><span data-stu-id="1acd4-343">The arguments that are passed to the object member during the invoke operation.</span></span> <span data-ttu-id="1acd4-344">Für die Anweisung <c>sampleObject.SampleMethod(100)</c>, bei der <c>sampleObject</c> von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet wurde, ist <c>args[0]</c> beispielsweise gleich 100.</span><span class="sxs-lookup"><span data-stu-id="1acd4-344">For example, for the statement <c>sampleObject.SampleMethod(100)</c>, where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</span></span></param>
        <param name="result"><span data-ttu-id="1acd4-345">Das Ergebnis des elementaufrufs.</span><span class="sxs-lookup"><span data-stu-id="1acd4-345">The result of the member invocation.</span></span></param>
        <summary><span data-ttu-id="1acd4-346">Stellt die Implementierung für Vorgänge, die einen Member aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="1acd4-346">Provides the implementation for operations that invoke a member.</span></span> <span data-ttu-id="1acd4-347">Von abgeleiteten Klassen der <see cref="T:System.Dynamic.DynamicObject" /> Klasse kann überschreiben diese Methode, um dynamisches Verhalten für Vorgänge wie das Aufrufen einer Methode anzugeben.</span><span class="sxs-lookup"><span data-stu-id="1acd4-347">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as calling a method.</span></span></summary>
        <returns><span data-ttu-id="1acd4-348"><see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1acd4-348"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="1acd4-349">Wenn diese Methode zurückgibt <see langword="false" />, der Laufzeitbinder der Sprache bestimmt das Verhalten.</span><span class="sxs-lookup"><span data-stu-id="1acd4-349">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1acd4-350">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="1acd4-350">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1acd4-351">Von abgeleiteten Klassen der <xref:System.Dynamic.DynamicObject> Klasse kann überschreiben diese Methode, um anzugeben, wie Vorgänge, die einen Objektmember aufrufen für ein dynamisches Objekt ausgeführt werden soll.</span><span class="sxs-lookup"><span data-stu-id="1acd4-351">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that invoke an object member should be performed for a dynamic object.</span></span> <span data-ttu-id="1acd4-352">Wenn die Methode nicht überschrieben wird, wird das Verhalten von der Laufzeitbinder der Sprache bestimmt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-352">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1acd4-353">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="1acd4-353">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="1acd4-354">Wenn diese Methode außer Kraft gesetzt wird, wird Sie automatisch aufgerufen, bei der Durchführung von Operationen wie `sampleObject.SampleMethod(100)`, wobei `sampleObject` ergibt sich aus der `DynamicObject` Klasse.</span><span class="sxs-lookup"><span data-stu-id="1acd4-354">If this method is overridden, it is automatically invoked when you perform an operation like `sampleObject.SampleMethod(100)`, where `sampleObject` is derived from the `DynamicObject` class.</span></span>  
  
 <span data-ttu-id="1acd4-355">Sie können auch Ihren eigenen Methoden hinzufügen, um Klassen, die abgeleitet sind die <xref:System.Dynamic.DynamicObject> Klasse.</span><span class="sxs-lookup"><span data-stu-id="1acd4-355">You can also add your own methods to classes that are derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="1acd4-356">Angenommen, Sie überschreiben die <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> -Methode, dynamischen Verteiler versucht das System zuerst zu bestimmen, ob die angegebene Methode in der Klasse vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="1acd4-356">For example, if you override the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> method, the dynamic dispatch system first attempts to determine whether the specified method exists in the class.</span></span> <span data-ttu-id="1acd4-357">Wenn sie die Methode nicht gefunden wird, wird die <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> Implementierung.</span><span class="sxs-lookup"><span data-stu-id="1acd4-357">If it does not find the method, it uses the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> implementation.</span></span>  
  
 <span data-ttu-id="1acd4-358">Diese Methode unterstützt keine `ref` und `out` Parameter.</span><span class="sxs-lookup"><span data-stu-id="1acd4-358">This method does not support `ref` and `out` parameters.</span></span> <span data-ttu-id="1acd4-359">Alle Parameter in der `args` Array als Wert übergeben werden.</span><span class="sxs-lookup"><span data-stu-id="1acd4-359">All parameters in the `args` array are passed by value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1acd4-360">Angenommen, Sie alternative Syntax bereitstellen, für den Zugriff auf Werte in einem Wörterbuch, also, dass anstelle des Schreibens möchten `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), können Sie schreiben `sampleDictionary.Text = "Sample text"`.</span><span class="sxs-lookup"><span data-stu-id="1acd4-360">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="1acd4-361">Darüber hinaus möchten alle standard-Wörterbuch-Methoden auf dieses Wörterbuch aufrufen kann.</span><span class="sxs-lookup"><span data-stu-id="1acd4-361">Also, you want to be able to call all the standard dictionary methods on this dictionary.</span></span>  
  
 <span data-ttu-id="1acd4-362">Im folgenden Codebeispiel wird veranschaulicht, die `DynamicDictionary` -Klasse, die von abgeleitet ist die <xref:System.Dynamic.DynamicObject> Klasse.</span><span class="sxs-lookup"><span data-stu-id="1acd4-362">The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="1acd4-363">Die `DynamicDictionary` -Klasse enthält ein Objekt von der `Dictionary<string, object>` Typ (`Dictionary(Of String, Object)` in Visual Basic) zum Speichern von Schlüssel-Wert-Paare.</span><span class="sxs-lookup"><span data-stu-id="1acd4-363">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs.</span></span> <span data-ttu-id="1acd4-364">Überschreibt es die <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> Methode, um die Methoden zum unterstützen der <xref:System.Collections.Generic.Dictionary%602> -Klasse und überschreibt die <xref:System.Dynamic.DynamicObject.TrySetMember%2A> und <xref:System.Dynamic.DynamicObject.TryGetMember%2A> Methoden zum unterstützen der neuen Syntax.</span><span class="sxs-lookup"><span data-stu-id="1acd4-364">It overrides the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> method to support methods of the <xref:System.Collections.Generic.Dictionary%602> class and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="1acd4-365">Es bietet auch eine `Print` -Methode, die alle Wörterbuchschlüssel und Werte ausgibt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-365">It also provides a `Print` method, which prints out all dictionary keys and values.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#6)]
 [!code-vb[System.Dynamic.DynamicObject#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySetIndex">
      <MemberSignature Language="C#" Value="public virtual bool TrySetIndex (System.Dynamic.SetIndexBinder binder, object[] indexes, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TrySetIndex(class System.Dynamic.SetIndexBinder binder, object[] indexes, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TrySetIndex (binder As SetIndexBinder, indexes As Object(), value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TrySetIndex(System::Dynamic::SetIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member TrySetIndex : System.Dynamic.SetIndexBinder * obj[] * obj -&gt; bool&#xA;override this.TrySetIndex : System.Dynamic.SetIndexBinder * obj[] * obj -&gt; bool" Usage="dynamicObject.TrySetIndex (binder, indexes, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.SetIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="1acd4-366">Enthält Informationen über den Vorgang.</span><span class="sxs-lookup"><span data-stu-id="1acd4-366">Provides information about the operation.</span></span></param>
        <param name="indexes"><span data-ttu-id="1acd4-367">Die Indizes, die im Vorgang verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="1acd4-367">The indexes that are used in the operation.</span></span> <span data-ttu-id="1acd4-368">Für den Vorgang <c>sampleObject[3] = 10</c> in C# (<c>sampleObject(3) = 10</c> in Visual Basic), bei dem <c>sampleObject</c> von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet wurde, ist <c>indexes[0]</c> beispielsweise gleich 3.</span><span class="sxs-lookup"><span data-stu-id="1acd4-368">For example, for the <c>sampleObject[3] = 10</c> operation in C# (<c>sampleObject(3) = 10</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>indexes[0]</c> is equal to 3.</span></span></param>
        <param name="value"><span data-ttu-id="1acd4-369">Der Wert, der auf das Objekt festgelegt werden, die dem angegebenen Index ab.</span><span class="sxs-lookup"><span data-stu-id="1acd4-369">The value to set to the object that has the specified index.</span></span> <span data-ttu-id="1acd4-370">Für den Vorgang <c>sampleObject[3] = 10</c> in C# (<c>sampleObject(3) = 10</c> in Visual Basic), bei dem <c>sampleObject</c> von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet wurde, ist <paramref name="value" /> beispielsweise gleich 10.</span><span class="sxs-lookup"><span data-stu-id="1acd4-370">For example, for the <c>sampleObject[3] = 10</c> operation in C# (<c>sampleObject(3) = 10</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="value" /> is equal to 10.</span></span></param>
        <summary><span data-ttu-id="1acd4-371">Stellt die Implementierung für Vorgänge, die einen Wert nach Index festlegen.</span><span class="sxs-lookup"><span data-stu-id="1acd4-371">Provides the implementation for operations that set a value by index.</span></span> <span data-ttu-id="1acd4-372">Von abgeleiteten Klassen der <see cref="T:System.Dynamic.DynamicObject" /> Klasse kann überschreiben diese Methode, um dynamisches Verhalten für Vorgänge angeben, die Zugriff auf Objekte mit einem angegebenen Index.</span><span class="sxs-lookup"><span data-stu-id="1acd4-372">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that access objects by a specified index.</span></span></summary>
        <returns><span data-ttu-id="1acd4-373"><see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1acd4-373"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="1acd4-374">Wenn diese Methode zurückgibt <see langword="false" />, der Laufzeitbinder der Sprache bestimmt das Verhalten.</span><span class="sxs-lookup"><span data-stu-id="1acd4-374">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1acd4-375">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="1acd4-375">(In most cases, a language-specific run-time exception is thrown.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1acd4-376">Von abgeleiteten Klassen der <xref:System.Dynamic.DynamicObject> Klasse kann überschreiben diese Methode, um anzugeben, wie Vorgänge, bei denen ein Objekt nach Index für ein dynamisches Objekt ausgeführt werden soll.</span><span class="sxs-lookup"><span data-stu-id="1acd4-376">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that access an object by index should be performed for a dynamic object.</span></span> <span data-ttu-id="1acd4-377">Wenn die Methode nicht überschrieben wird, wird das Verhalten von der Laufzeitbinder der Sprache bestimmt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-377">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1acd4-378">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="1acd4-378">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="1acd4-379">Wenn diese Methode überschrieben wird, wird Sie automatisch aufgerufen, wenn ein Vorgang wie vorliegt `sampleObject[3] = 10` in c# oder `sampleObject(3) = 10` in Visual Basic, wobei `sampleObject` ergibt sich aus der <xref:System.Dynamic.DynamicObject> Klasse.</span><span class="sxs-lookup"><span data-stu-id="1acd4-379">If this method is overridden, it is automatically invoked when you have an operation like `sampleObject[3] = 10` in C# or `sampleObject(3) = 10` in Visual Basic, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1acd4-380">Wird davon ausgegangen, dass Sie ein Objekt zu erstellen, in denen Eigenschaften können sein, möchten Zugriff auf durch die Namen z. B. `Property0`, `Property1`, und so weiter, oder anhand des Indexes, damit, z. B. `sampleObject.Property0` entspricht `sampleObject[0]` in C# geschrieben oder `sampleObject(0)` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="1acd4-380">Assume that you want to create an object in which properties can be accessed either by names such as `Property0`, `Property1`, and so on, or by index, so that, for example, `sampleObject.Property0` is equivalent to `sampleObject[0]` in C# or `sampleObject(0)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="1acd4-381">Im folgenden Codebeispiel wird veranschaulicht, die `SampleDynamicObject` -Klasse, die von abgeleitet ist die <xref:System.Dynamic.DynamicObject> Klasse.</span><span class="sxs-lookup"><span data-stu-id="1acd4-381">The following code example demonstrates the `SampleDynamicObject` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="1acd4-382">Die `SampleDynamicObject` -Klasse enthält ein Objekt von der `Dictionary<string, object>` Typ (`Dictionary(Of String, Object)` in Visual Basic) zum Speichern von Schlüssel-Wert-Paare.</span><span class="sxs-lookup"><span data-stu-id="1acd4-382">The `SampleDynamicObject` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs.</span></span> <span data-ttu-id="1acd4-383">`SampleDynamicObject` überschreibt die <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> und <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> Methoden zum Aktivieren des Zugriffs nach Index.</span><span class="sxs-lookup"><span data-stu-id="1acd4-383">`SampleDynamicObject` overrides the <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> and <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> methods to enable access by index.</span></span> <span data-ttu-id="1acd4-384">Es überschreibt die <xref:System.Dynamic.DynamicObject.TrySetMember%2A> und <xref:System.Dynamic.DynamicObject.TryGetMember%2A> Methoden zum Aktivieren des Zugriffs nach Eigenschaftenname an.</span><span class="sxs-lookup"><span data-stu-id="1acd4-384">It overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access by property name.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#4)]
 [!code-vb[System.Dynamic.DynamicObject#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySetMember">
      <MemberSignature Language="C#" Value="public virtual bool TrySetMember (System.Dynamic.SetMemberBinder binder, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TrySetMember(class System.Dynamic.SetMemberBinder binder, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TrySetMember (binder As SetMemberBinder, value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TrySetMember(System::Dynamic::SetMemberBinder ^ binder, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member TrySetMember : System.Dynamic.SetMemberBinder * obj -&gt; bool&#xA;override this.TrySetMember : System.Dynamic.SetMemberBinder * obj -&gt; bool" Usage="dynamicObject.TrySetMember (binder, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.SetMemberBinder" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="1acd4-385">Enthält Informationen über das Objekt, das den dynamischen Vorgang aufgerufen hat.</span><span class="sxs-lookup"><span data-stu-id="1acd4-385">Provides information about the object that called the dynamic operation.</span></span> <span data-ttu-id="1acd4-386">Die <c>binder.Name</c>-Eigenschaft gibt den Namen des Members an, dem der Wert zugewiesen wird.</span><span class="sxs-lookup"><span data-stu-id="1acd4-386">The <c>binder.Name</c> property provides the name of the member to which the value is being assigned.</span></span> <span data-ttu-id="1acd4-387">Für die Anweisung <c>sampleObject.SampleProperty = "Test"</c>, bei der <c>sampleObject</c> eine Instanz der Klasse ist, die von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet wurde, gibt <c>binder.Name</c> beispielsweise „SampleProperty“ zurück.</span><span class="sxs-lookup"><span data-stu-id="1acd4-387">For example, for the statement <c>sampleObject.SampleProperty = "Test"</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleProperty".</span></span> <span data-ttu-id="1acd4-388">Die <c>binder.IgnoreCase</c>-Eigenschaft gibt an, ob der Membername die Groß-/Kleinschreibung berücksichtigt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-388">The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</span></span></param>
        <param name="value"><span data-ttu-id="1acd4-389">Der Wert, der auf den Member festgelegt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-389">The value to set to the member.</span></span> <span data-ttu-id="1acd4-390">Für die Anweisung <c>sampleObject.SampleProperty = "Test"</c>, bei der <c>sampleObject</c> eine Instanz der Klasse ist, die von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet wurde, ist <paramref name="value" />beispielsweise „Test“.</span><span class="sxs-lookup"><span data-stu-id="1acd4-390">For example, for <c>sampleObject.SampleProperty = "Test"</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, the <paramref name="value" /> is "Test".</span></span></param>
        <summary><span data-ttu-id="1acd4-391">Stellt die Implementierung für Vorgänge, die Elementwerte festlegen.</span><span class="sxs-lookup"><span data-stu-id="1acd4-391">Provides the implementation for operations that set member values.</span></span> <span data-ttu-id="1acd4-392">Von abgeleiteten Klassen der <see cref="T:System.Dynamic.DynamicObject" /> Klasse kann überschreiben diese Methode, um dynamisches Verhalten für Vorgänge wie das Festlegen eines Werts für eine Eigenschaft anzugeben.</span><span class="sxs-lookup"><span data-stu-id="1acd4-392">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as setting a value for a property.</span></span></summary>
        <returns><span data-ttu-id="1acd4-393"><see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1acd4-393"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="1acd4-394">Wenn diese Methode zurückgibt <see langword="false" />, der Laufzeitbinder der Sprache bestimmt das Verhalten.</span><span class="sxs-lookup"><span data-stu-id="1acd4-394">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1acd4-395">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="1acd4-395">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1acd4-396">Von abgeleiteten Klassen der <xref:System.Dynamic.DynamicObject> Klasse kann überschreiben diese Methode, um anzugeben, wie Vorgänge, die einen Wert, auf einen Member festzulegen für ein dynamisches Objekt ausgeführt werden soll.</span><span class="sxs-lookup"><span data-stu-id="1acd4-396">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that set a value to a member should be performed for a dynamic object.</span></span> <span data-ttu-id="1acd4-397">Wenn die Methode nicht überschrieben wird, wird das Verhalten von der Laufzeitbinder der Sprache bestimmt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-397">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1acd4-398">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="1acd4-398">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="1acd4-399">Diese Methode wird aufgerufen, wenn Sie die Anweisungen wie verfügen `sampleObject.SampleProperty = "Test"`, wobei `sampleObject` ist eine Instanz der Klasse abgeleitet ist, die die <xref:System.Dynamic.DynamicObject> Klasse.</span><span class="sxs-lookup"><span data-stu-id="1acd4-399">This method is called when you have statements like `sampleObject.SampleProperty = "Test"`, where `sampleObject` is an instance of the class that is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="1acd4-400">Sie können auch eigene Member hinzufügen, um Klassen, die von der `DynamicObject` Klasse.</span><span class="sxs-lookup"><span data-stu-id="1acd4-400">You can also add your own members to classes derived from the `DynamicObject` class.</span></span> <span data-ttu-id="1acd4-401">Wenn Ihre Klasse Eigenschaften definiert und auch überschreibt die <xref:System.Dynamic.DynamicObject.TrySetMember%2A> -Methode, die dynamic Language Runtime (DLR) verwendet zuerst die Sprache Binder nach einer Eigenschaft in der Klasse eine statische Definition gesucht werden soll.</span><span class="sxs-lookup"><span data-stu-id="1acd4-401">If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</span></span> <span data-ttu-id="1acd4-402">Wenn keine solche Eigenschaft vorhanden ist, ruft die DLR die <xref:System.Dynamic.DynamicObject.TrySetMember%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="1acd4-402">If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1acd4-403">Angenommen, Sie alternative Syntax bereitstellen, für den Zugriff auf Werte in einem Wörterbuch, also, dass anstelle des Schreibens möchten `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), können Sie schreiben `sampleDictionary.Text = "Sample text"`.</span><span class="sxs-lookup"><span data-stu-id="1acd4-403">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="1acd4-404">Darüber hinaus muss diese Syntax Groß-/Kleinschreibung, sodass `sampleDictionary.Text` entspricht `sampleDictionary.text`.</span><span class="sxs-lookup"><span data-stu-id="1acd4-404">Also, this syntax must be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.</span></span>  
  
 <span data-ttu-id="1acd4-405">Im folgenden Codebeispiel wird veranschaulicht, die `DynamicDictionary` -Klasse, die von abgeleitet ist die <xref:System.Dynamic.DynamicObject> Klasse.</span><span class="sxs-lookup"><span data-stu-id="1acd4-405">The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="1acd4-406">Die `DynamicDictionary` Klasse enthält ein Objekt des der `Dictionary<string, object>` Typ (`Dictionary(Of String, Object)` in Visual Basic) zum Speichern der Schlüssel-Wert-Paare und überschreibt die <xref:System.Dynamic.DynamicObject.TrySetMember%2A> und <xref:System.Dynamic.DynamicObject.TryGetMember%2A> Methoden zum unterstützen der neuen Syntax.</span><span class="sxs-lookup"><span data-stu-id="1acd4-406">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="1acd4-407">Es bietet auch eine `Count` Eigenschaft, die zeigt, wie viele dynamischen Eigenschaften des Wörterbuchs enthält.</span><span class="sxs-lookup"><span data-stu-id="1acd4-407">It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryUnaryOperation">
      <MemberSignature Language="C#" Value="public virtual bool TryUnaryOperation (System.Dynamic.UnaryOperationBinder binder, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryUnaryOperation(class System.Dynamic.UnaryOperationBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryUnaryOperation (binder As UnaryOperationBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryUnaryOperation(System::Dynamic::UnaryOperationBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryUnaryOperation : System.Dynamic.UnaryOperationBinder *  -&gt; bool&#xA;override this.TryUnaryOperation : System.Dynamic.UnaryOperationBinder *  -&gt; bool" Usage="dynamicObject.TryUnaryOperation (binder, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.UnaryOperationBinder" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="1acd4-408">Enthält Informationen zur unären Operation.</span><span class="sxs-lookup"><span data-stu-id="1acd4-408">Provides information about the unary operation.</span></span> <span data-ttu-id="1acd4-409">Die <c>binder.Operation</c>-Eigenschaft gibt ein <see cref="T:System.Linq.Expressions.ExpressionType" />-Objekt zurück.</span><span class="sxs-lookup"><span data-stu-id="1acd4-409">The <c>binder.Operation</c> property returns an <see cref="T:System.Linq.Expressions.ExpressionType" /> object.</span></span> <span data-ttu-id="1acd4-410">Für die Anweisung <c>negativeNumber = -number</c>, bei der <c>number</c> von der <see langword="DynamicObject" />-Klasse abgeleitet wurde, gibt <c>binder.Operation</c> „Negate“ zurück.</span><span class="sxs-lookup"><span data-stu-id="1acd4-410">For example, for the <c>negativeNumber = -number</c> statement, where <c>number</c> is derived from the <see langword="DynamicObject" /> class, <c>binder.Operation</c> returns "Negate".</span></span></param>
        <param name="result"><span data-ttu-id="1acd4-411">Das Ergebnis der unären Operation.</span><span class="sxs-lookup"><span data-stu-id="1acd4-411">The result of the unary operation.</span></span></param>
        <summary><span data-ttu-id="1acd4-412">Stellt die Implementierung für unäre Operationen bereit.</span><span class="sxs-lookup"><span data-stu-id="1acd4-412">Provides implementation for unary operations.</span></span> <span data-ttu-id="1acd4-413">Von abgeleiteten Klassen der <see cref="T:System.Dynamic.DynamicObject" /> Klasse kann überschreiben diese Methode, um dynamisches Verhalten für Vorgänge wie Negation, Inkrement oder Dekrement anzugeben.</span><span class="sxs-lookup"><span data-stu-id="1acd4-413">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as negation, increment, or decrement.</span></span></summary>
        <returns><span data-ttu-id="1acd4-414"><see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1acd4-414"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="1acd4-415">Wenn diese Methode zurückgibt <see langword="false" />, der Laufzeitbinder der Sprache bestimmt das Verhalten.</span><span class="sxs-lookup"><span data-stu-id="1acd4-415">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1acd4-416">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="1acd4-416">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1acd4-417">Von abgeleiteten Klassen der <xref:System.Dynamic.DynamicObject> Klasse kann überschreiben diese Methode, um anzugeben, wie der unäre Operationen für ein dynamisches Objekt ausgeführt werden soll.</span><span class="sxs-lookup"><span data-stu-id="1acd4-417">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how unary operations should be performed for a dynamic object.</span></span> <span data-ttu-id="1acd4-418">Wenn die Methode nicht überschrieben wird, wird das Verhalten von der Laufzeitbinder der Sprache bestimmt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-418">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="1acd4-419">(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</span><span class="sxs-lookup"><span data-stu-id="1acd4-419">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="1acd4-420">Diese Methode wird aufgerufen, wenn Sie unäre Operationen wie Negation, Inkrement oder Dekrement.</span><span class="sxs-lookup"><span data-stu-id="1acd4-420">This method is called when you have unary operations such as negation, increment, or decrement.</span></span> <span data-ttu-id="1acd4-421">Z. B. wenn die <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> -Methode überschrieben wird, diese Methode wird automatisch aufgerufen, für Anweisungen wie `negativeNumber = -number`, wobei `number` ergibt sich aus der <xref:System.Dynamic.DynamicObject> Klasse.</span><span class="sxs-lookup"><span data-stu-id="1acd4-421">For example, if the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method is overridden, this method is automatically invoked for statements like `negativeNumber = -number`, where `number` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="1acd4-422">Erhalten Sie Informationen über den Typ der unären Operation mit den `Operation` Eigenschaft der `binder` Parameter.</span><span class="sxs-lookup"><span data-stu-id="1acd4-422">You can get information about the type of the unary operation by using the `Operation` property of the `binder` parameter.</span></span>  
  
 <span data-ttu-id="1acd4-423">Wenn das dynamische Objekt, nur in c# und Visual Basic verwendet wird die `binder.Operation` Eigenschaft sind die folgenden Werte aus der <xref:System.Linq.Expressions.ExpressionType> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="1acd4-423">If your dynamic object is used only in C# and Visual Basic, the `binder.Operation` property can have one of the following values from the <xref:System.Linq.Expressions.ExpressionType> enumeration.</span></span> <span data-ttu-id="1acd4-424">In anderen Sprachen wie IronPython oder IronRuby erstellen, können Sie jedoch andere Werte haben.</span><span class="sxs-lookup"><span data-stu-id="1acd4-424">However, in other languages such as IronPython or IronRuby, you can have other values.</span></span>
  
|<span data-ttu-id="1acd4-425">Wert</span><span class="sxs-lookup"><span data-stu-id="1acd4-425">Value</span></span>|<span data-ttu-id="1acd4-426">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="1acd4-426">Description</span></span>|<span data-ttu-id="1acd4-427">C#</span><span class="sxs-lookup"><span data-stu-id="1acd4-427">C#</span></span>|<span data-ttu-id="1acd4-428">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="1acd4-428">Visual Basic</span></span>|  
|-----------|-----------------|---------|------------------|  
|`Decrement`|<span data-ttu-id="1acd4-429">Eine unäre Dekrementoperation.</span><span class="sxs-lookup"><span data-stu-id="1acd4-429">A unary decrement operation.</span></span>|`a--`|<span data-ttu-id="1acd4-430">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-430">Not supported.</span></span>|  
|`Increment`|<span data-ttu-id="1acd4-431">Eine unäre Inkrementoperation.</span><span class="sxs-lookup"><span data-stu-id="1acd4-431">A unary increment operation.</span></span>|`a++`|<span data-ttu-id="1acd4-432">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-432">Not supported.</span></span>|  
|`Negate`|<span data-ttu-id="1acd4-433">Eine arithmetische Negation.</span><span class="sxs-lookup"><span data-stu-id="1acd4-433">An arithmetic negation.</span></span>|`-a`|`-a`|  
|`Not`|<span data-ttu-id="1acd4-434">Eine logische Negation.</span><span class="sxs-lookup"><span data-stu-id="1acd4-434">A logical negation.</span></span>|`!a`|`Not a`|  
|`OnesComplement`|<span data-ttu-id="1acd4-435">Ein zu ergänzen.</span><span class="sxs-lookup"><span data-stu-id="1acd4-435">A ones complement.</span></span>|`~a`|<span data-ttu-id="1acd4-436">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-436">Not supported.</span></span>|  
|`IsFalse`|<span data-ttu-id="1acd4-437">Ein false Bedingungswert.</span><span class="sxs-lookup"><span data-stu-id="1acd4-437">A false condition value.</span></span>|`a && b`|<span data-ttu-id="1acd4-438">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-438">Not supported.</span></span>|  
|`IsTrue`|<span data-ttu-id="1acd4-439">Ein true Bedingungswert.</span><span class="sxs-lookup"><span data-stu-id="1acd4-439">A true condition value.</span></span>|`a &#124;&#124; b`|<span data-ttu-id="1acd4-440">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-440">Not supported.</span></span>|  
|`UnaryPlus`|<span data-ttu-id="1acd4-441">Ein unäres plus.</span><span class="sxs-lookup"><span data-stu-id="1acd4-441">A unary plus.</span></span>|`+a`|`+a`|  
  
> [!NOTE]
>  <span data-ttu-id="1acd4-442">Zum Implementieren `OrElse` (`a || b`) und `AndAlso` (`a && b`) Vorgänge für dynamische Objekte in c#, Sie möchten beide implementieren die <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> Methode und die <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="1acd4-442">To implement `OrElse` (`a || b`) and `AndAlso` (`a && b`) operations for dynamic objects in C#, you may want to implement both the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method and the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method.</span></span>  
>   
>  <span data-ttu-id="1acd4-443">Die `OrElse` Vorgang besteht aus den unären `IsTrue` Vorgang und den binären `Or` Vorgang.</span><span class="sxs-lookup"><span data-stu-id="1acd4-443">The `OrElse` operation consists of the unary `IsTrue` operation and the binary `Or` operation.</span></span> <span data-ttu-id="1acd4-444">Die `Or` Vorgang erfolgt nur, wenn das Ergebnis der `IsTrue` Vorgang `false`.</span><span class="sxs-lookup"><span data-stu-id="1acd4-444">The `Or` operation is performed only if the result of the `IsTrue` operation is `false`.</span></span>  
>   
>  <span data-ttu-id="1acd4-445">Die `AndAlso` Vorgang besteht aus den unären `IsFalse` Vorgang und den binären `And` Vorgang.</span><span class="sxs-lookup"><span data-stu-id="1acd4-445">The `AndAlso` operation consists of the unary `IsFalse` operation and the binary `And` operation.</span></span> <span data-ttu-id="1acd4-446">Die `And` Vorgang erfolgt nur, wenn das Ergebnis der `IsFalse` Vorgang `false`.</span><span class="sxs-lookup"><span data-stu-id="1acd4-446">The `And` operation is performed only if the result of the `IsFalse` operation is `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1acd4-447">Angenommen Sie, Sie eine Datenstruktur zum Speichern von Text und die numerische Darstellung von Zahlen benötigen, und Sie eine mathematische Negationsoperation für solche Daten zu definieren möchten.</span><span class="sxs-lookup"><span data-stu-id="1acd4-447">Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define a mathematical negation operation for such data.</span></span>  
  
 <span data-ttu-id="1acd4-448">Im folgenden Codebeispiel wird veranschaulicht, die `DynamicNumber` -Klasse, die von abgeleitet ist die <xref:System.Dynamic.DynamicObject> Klasse.</span><span class="sxs-lookup"><span data-stu-id="1acd4-448">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="1acd4-449">`DynamicNumber` überschreibt die <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> Methode, um die mathematische Negationsoperation zu aktivieren.</span><span class="sxs-lookup"><span data-stu-id="1acd4-449">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method to enable the mathematical negation operation.</span></span> <span data-ttu-id="1acd4-450">Ist auch Außerkraftsetzungen der <xref:System.Dynamic.DynamicObject.TrySetMember%2A> und <xref:System.Dynamic.DynamicObject.TryGetMember%2A> Methoden, um den Zugriff auf die Elemente zu ermöglichen.</span><span class="sxs-lookup"><span data-stu-id="1acd4-450">Is also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the elements.</span></span>  
  
 <span data-ttu-id="1acd4-451">In diesem Beispiel wird nur die mathematische Negationsoperation unterstützt.</span><span class="sxs-lookup"><span data-stu-id="1acd4-451">In this example, only the mathematical negation operation is supported.</span></span> <span data-ttu-id="1acd4-452">Wenn Sie versuchen, eine Anweisung wie schreiben `negativeNumber = +number`, tritt eine Laufzeitausnahme.</span><span class="sxs-lookup"><span data-stu-id="1acd4-452">If you try to write a statement like `negativeNumber = +number`, a run-time exception occurs.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#7)]
 [!code-vb[System.Dynamic.DynamicObject#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
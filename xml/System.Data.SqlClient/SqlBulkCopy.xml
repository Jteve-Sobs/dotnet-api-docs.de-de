<Type Name="SqlBulkCopy" FullName="System.Data.SqlClient.SqlBulkCopy">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c4fa89a8b435a90f6f3032bbe64ce19c510912c8" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78827342" /></Metadata><TypeSignature Language="C#" Value="public sealed class SqlBulkCopy : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlBulkCopy extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlBulkCopy" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlBulkCopy&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlBulkCopy sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SqlBulkCopy = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.4.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Ermöglicht den effizienten Massenladevorgang einer SQL Server-Tabelle mit Daten aus einer anderen Quelle.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Microsoft SQL Server enthält ein beliebtes Befehlszeilen-Hilfsprogramm mit dem Namen **bcp** zum Verschieben von Daten aus einer Tabelle in eine andere, ob auf einem einzelnen Server oder zwischen Servern. Mit der <xref:System.Data.SqlClient.SqlBulkCopy>-Klasse können Sie Lösungen für verwalteten Code schreiben, die ähnliche Funktionen bereitstellen. Es gibt noch weitere Möglichkeiten zum Laden von Daten in eine SQL Server Tabelle (z. b. INSERT-Anweisungen), <xref:System.Data.SqlClient.SqlBulkCopy> bietet jedoch einen erheblichen Leistungsvorteil.  
  
 Mit der <xref:System.Data.SqlClient.SqlBulkCopy>-Klasse können Daten nur in SQL Server-Tabellen geschrieben werden. Die Datenquelle ist jedoch nicht auf SQL Server beschränkt. eine beliebige Datenquelle kann verwendet werden, solange die Daten in eine <xref:System.Data.DataTable> Instanz geladen oder mit einer <xref:System.Data.IDataReader> Instanz gelesen werden können.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy> schlägt fehl, wenn ein Massen Laden einer <xref:System.Data.DataTable> Spalte vom Typ <xref:System.Data.SqlTypes.SqlDateTime> in eine SQL Server Spalte ausgeführt wird, deren Typ einem der in SQL Server 2008 hinzugefügten Datums-/Uhrzeittypen entspricht.  
  
   
  
## Examples  
 In der folgenden Konsolenanwendung wird veranschaulicht, wie Daten mithilfe der <xref:System.Data.SqlClient.SqlBulkCopy>-Klasse geladen werden. In diesem Beispiel werden in der SQL Server-Datenbank **AdventureWorks** unter Verwendung von <xref:System.Data.SqlClient.SqlDataReader> Daten aus der Tabelle **Production.Product** in eine ähnliche Tabelle derselben Datenbank kopiert.  
  
> [!IMPORTANT]
>  Dieses Beispiel wird nur dann ausgeführt, wenn Sie die Arbeits Tabellen erstellt haben, wie unter [Beispiel für Massen Kopier](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)Vorgänge beschrieben. Der angegebene Code dient nur zur Demonstration der Syntax für die Verwendung von **SqlBulkCopy**. Wenn sich die Quell-und Ziel Tabelle in derselben SQL Server Instanz befinden, ist es einfacher und schneller, eine Transact-SQL-`INSERT … SELECT` Anweisung zu verwenden, um die Daten zu kopieren.  
  
 [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/data/adonet/sql/bulk-copy-operations-in-sql-server.md">Massenkopiervorgänge in SQL Server</related>
    <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Klasse.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As SqlConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::Data::SqlClient::SqlConnection ^ connection);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : System.Data.SqlClient.SqlConnection -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy connection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
      </Parameters>
      <Docs>
        <param name="connection">Die bereits geöffnete <see cref="T:System.Data.SqlClient.SqlConnection" />-Instanz, mit der Massenkopiervorgänge ausgeführt werden. Wenn Ihre Verbindungszeichenfolge <see langword="Integrated Security = true" /> nicht verwendet, können Sie <see cref="T:System.Data.SqlClient.SqlCredential" /> verwenden, um die Benutzer-ID und das Kennwort sicherer zu übergeben als durch die Angabe von Benutzer-ID und Kennwort als Text in der Verbindungszeichenfolge.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Klasse unter Verwendung der angegebenen Instanz von <see cref="T:System.Data.SqlClient.SqlConnection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Da die Verbindung beim Initialisieren der <xref:System.Data.SqlClient.SqlBulkCopy> Instanz bereits geöffnet ist, bleibt die Verbindung geöffnet, nachdem die <xref:System.Data.SqlClient.SqlBulkCopy> Instanz geschlossen wurde.  
  
 Wenn das `connection`-Argument NULL ist, wird eine <xref:System.ArgumentNullException> ausgelöst.  
  
   
  
## Examples  
 In der folgenden Konsolenanwendung wird veranschaulicht, wie Daten mithilfe einer bereits geöffneten Verbindung Massen geladen werden. In diesem Beispiel werden in der SQL Server-Datenbank **AdventureWorks** unter Verwendung von <xref:System.Data.SqlClient.SqlDataReader> Daten aus der Tabelle **Production.Product** in eine ähnliche Tabelle derselben Datenbank kopiert. Das Beispiel dient nur der Veranschaulichung. Sie würden `SqlBulkCopy` nicht verwenden, um Daten aus einer Tabelle in eine andere in derselben Datenbank in einer Produktionsanwendung zu verschieben. Beachten Sie, dass sich die Quelldaten nicht auf SQL Server befinden müssen. Sie können jede beliebige Datenquelle verwenden, die in eine <xref:System.Data.IDataReader> gelesen oder in eine <xref:System.Data.DataTable>geladen werden kann.  
  
> [!IMPORTANT]
>  Dieses Beispiel wird nur dann ausgeführt, wenn Sie die Arbeits Tabellen erstellt haben, wie unter [Beispiel für Massen Kopier](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)Vorgänge beschrieben. Der angegebene Code dient nur zur Demonstration der Syntax für die Verwendung von **SqlBulkCopy**. Wenn sich die Quell-und Ziel Tabelle in derselben SQL Server Instanz befinden, ist es einfacher und schneller, eine Transact-SQL-`INSERT … SELECT` Anweisung zu verwenden, um die Daten zu kopieren.  
  
 [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/sql/bulk-copy-operations-in-sql-server.md">Massenkopiervorgänge in SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::String ^ connectionString);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : string -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy connectionString" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">Die Zeichenfolge zur Definition der Verbindung, die für die <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Instanz geöffnet wird. Wenn die Verbindungszeichenfolge nicht <see langword="Integrated Security = true" /> verwendet, können Sie <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> oder <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> und <see cref="T:System.Data.SqlClient.SqlCredential" /> verwenden, um die Benutzer-ID und das Kennwort sicherer zu übergeben, als wenn Sie die Benutzer-ID und das Kennwort als Text in der Verbindungszeichenfolge angeben.</param>
        <summary>Initialisiert und öffnet eine neue Instanz von <see cref="T:System.Data.SqlClient.SqlConnection" /> auf Grundlage der angegebenen <paramref name="connectionString" />. Im Konstruktor wird die <see cref="T:System.Data.SqlClient.SqlConnection" /> verwendet, um eine neue Instanz der <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Klasse zu initialisieren.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Verbindung wird am Ende des Massen Kopiervorgangs automatisch geschlossen.  
  
 Wenn `connectionString` NULL ist, wird eine <xref:System.ArgumentNullException> ausgelöst. Wenn `connectionString` eine leere Zeichenfolge ist, wird eine <xref:System.ArgumentException> ausgelöst.  
  
   
  
## Examples  
 In der folgenden Konsolenanwendung wird veranschaulicht, wie Daten mithilfe einer als Zeichenfolge angegebenen Verbindung Massen geladen werden. Die Verbindung wird automatisch geschlossen, wenn die <xref:System.Data.SqlClient.SqlBulkCopy> Instanz geschlossen wird.  
  
 In diesem Beispiel werden die Quelldaten zuerst aus einer SQL Server Tabelle in eine <xref:System.Data.SqlClient.SqlDataReader> Instanz gelesen. Die Quelldaten müssen sich nicht auf SQL Server befinden; Sie können jede beliebige Datenquelle verwenden, die in eine <xref:System.Data.IDataReader> gelesen oder in eine <xref:System.Data.DataTable>geladen werden kann.  
  
> [!IMPORTANT]
>  Dieses Beispiel wird nur dann ausgeführt, wenn Sie die Arbeits Tabellen erstellt haben, wie unter [Beispiel für Massen Kopier](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)Vorgänge beschrieben. Der angegebene Code dient nur zur Demonstration der Syntax für die Verwendung von **SqlBulkCopy**. Wenn sich die Quell-und Ziel Tabelle in derselben SQL Server Instanz befinden, ist es einfacher und schneller, eine Transact-SQL-`INSERT … SELECT` Anweisung zu verwenden, um die Daten zu kopieren.  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/sql/bulk-copy-operations-in-sql-server.md">Massenkopiervorgänge in SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString, System.Data.SqlClient.SqlBulkCopyOptions copyOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, copyOptions As SqlBulkCopyOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::String ^ connectionString, System::Data::SqlClient::SqlBulkCopyOptions copyOptions);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : string * System.Data.SqlClient.SqlBulkCopyOptions -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy (connectionString, copyOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
      </Parameters>
      <Docs>
        <param name="connectionString">Die Zeichenfolge zur Definition der Verbindung, die für die <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Instanz geöffnet wird. Wenn Ihre Verbindungszeichenfolge <see langword="Integrated Security = true" /> nicht verwendet, können Sie <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> oder <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> und <see cref="T:System.Data.SqlClient.SqlCredential" /> verwenden, um die Benutzer-ID und das Kennwort sicherer zu übergeben, als durch die Angabe von Benutzer-ID und Kennwort als Text in der Verbindungszeichenfolge.</param>
        <param name="copyOptions">Eine Kombination von Werten aus der <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" />-Enumeration, die festlegt, welche Zeilen der Datenquelle in die Zieltabelle kopiert werden.</param>
        <summary>Initialisiert und öffnet auf Grundlage des angegebenen <paramref name="connectionString" /> eine neue Instanz von <see cref="T:System.Data.SqlClient.SqlConnection" />. Der Konstruktor initialisiert mithilfe von <see cref="T:System.Data.SqlClient.SqlConnection" /> eine neue Instanz der <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Klasse. Die <see cref="T:System.Data.SqlClient.SqlConnection" />-Instanz verhält sich entsprechend den Optionen, die im <paramref name="copyOptions" />-Parameter bereitgestellt werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ausführliche Informationen zu allen Massen Kopier Optionen finden Sie im <xref:System.Data.SqlClient.SqlBulkCopyOptions> Thema.  
  
   
  
## Examples  
 In der folgenden Konsolenanwendung wird veranschaulicht, wie ein Massen laden mithilfe einer als Zeichenfolge angegebenen Verbindung durchgeführt wird. Eine Option ist so festgelegt, dass der Wert in der Identitäts Spalte der Quell Tabelle verwendet wird, wenn Sie die Ziel Tabelle laden. In diesem Beispiel werden die Quelldaten zuerst aus einer SQL Server Tabelle in eine <xref:System.Data.SqlClient.SqlDataReader> Instanz gelesen. Die Quell Tabelle und die Ziel Tabelle enthalten jeweils eine Identitäts Spalte. Standardmäßig wird für jede hinzugefügte Zeile ein neuer Wert für die **Identitäts** Spalte in der Ziel Tabelle generiert. In diesem Beispiel wird eine Option festgelegt, wenn die Verbindung geöffnet wird, die den Massen Ladevorgang zwingt, stattdessen die **Identitäts** Werte aus der Quell Tabelle zu verwenden. Um zu sehen, wie die Option die Funktionsweise des Massen Ladevorgangs ändert, führen Sie das Beispiel mit dem **dbo aus. Die bulkcopydebug** -Tabelle ist leer. Alle Zeilen werden aus der Quelle geladen. Führen Sie das Beispiel erneut aus, ohne die Tabelle zu leeren. Eine Ausnahme wird ausgelöst, und der Code schreibt eine Meldung in die Konsole, in der Sie darüber informiert werden, dass Zeilen aufgrund von Verletzungen der Primärschlüssel Einschränkung nicht hinzugefügt wurden.  
  
> [!IMPORTANT]
>  Dieses Beispiel wird nur dann ausgeführt, wenn Sie die Arbeits Tabellen erstellt haben, wie unter [Beispiel für Massen Kopier](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)Vorgänge beschrieben. Der angegebene Code dient nur zur Demonstration der Syntax für die Verwendung von **SqlBulkCopy**. Wenn sich die Quell-und Ziel Tabelle in derselben SQL Server Instanz befinden, ist es einfacher und schneller, eine Transact-SQL-`INSERT … SELECT` Anweisung zu verwenden, um die Daten zu kopieren.  
  
 [!code-csharp[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/sql/bulk-copy-operations-in-sql-server.md">Massenkopiervorgänge in SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlBulkCopyOptions copyOptions, System.Data.SqlClient.SqlTransaction externalTransaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions, class System.Data.SqlClient.SqlTransaction externalTransaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As SqlConnection, copyOptions As SqlBulkCopyOptions, externalTransaction As SqlTransaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::Data::SqlClient::SqlConnection ^ connection, System::Data::SqlClient::SqlBulkCopyOptions copyOptions, System::Data::SqlClient::SqlTransaction ^ externalTransaction);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : System.Data.SqlClient.SqlConnection * System.Data.SqlClient.SqlBulkCopyOptions * System.Data.SqlClient.SqlTransaction -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy (connection, copyOptions, externalTransaction)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
        <Parameter Name="externalTransaction" Type="System.Data.SqlClient.SqlTransaction" />
      </Parameters>
      <Docs>
        <param name="connection">Die bereits geöffnete <see cref="T:System.Data.SqlClient.SqlConnection" />-Instanz, mit der der Massenkopiervorgang ausgeführt wird. Wenn Ihre Verbindungszeichenfolge <see langword="Integrated Security = true" />nicht verwendet, können Sie <see cref="T:System.Data.SqlClient.SqlCredential" /> verwenden, um die Benutzer-ID und das Kennwort sicherer zu übergeben als durch die Angabe von Benutzer-ID und Kennwort als Text in der Verbindungszeichenfolge.</param>
        <param name="copyOptions">Eine Kombination von Werten aus der <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" />-Enumeration, die festlegt, welche Zeilen der Datenquelle in die Zieltabelle kopiert werden.</param>
        <param name="externalTransaction">Eine vorhandene <see cref="T:System.Data.SqlClient.SqlTransaction" />-Instanz, unter der der Massenkopiervorgang ausgeführt wird.</param>
        <summary>Initialisiert mit der angegebenen geöffneten Instanz von <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> eine neue Instanz der <see cref="T:System.Data.SqlClient.SqlConnection" />-Klasse. Die <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Instanz verhält sich entsprechend den Optionen, die im <paramref name="copyOptions" />-Parameter angegeben wurden. Wenn eine <see cref="T:System.Data.SqlClient.SqlTransaction" /> ungleich Null angegeben wird, erfolgen die Kopiervorgänge innerhalb dieser Transaktion.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Optionen `UseInternalTransaction` enthalten und das `externalTransaction`-Argument nicht NULL ist, wird eine **InvalidArgumentException** ausgelöst.  
  
 Beispiele für die Verwendung von `SqlBulkCopy` in einer Transaktion finden Sie unter [Transaktions-und Massen Kopiervorgänge](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md).  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/sql/bulk-copy-operations-in-sql-server.md">Massenkopiervorgänge in SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="BatchSize">
      <MemberSignature Language="C#" Value="public int BatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BatchSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Property BatchSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BatchSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BatchSize : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.BatchSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Anzahl der Zeilen in jedem Batch. Am Ende jedes Batches werden die Zeilen im Batch an den Server gesendet.</summary>
        <value>Der ganzzahlige Wert der <see cref="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" />-Eigenschaft oder 0 (null), wenn kein Wert festgelegt wurde.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Batch ist abgeschlossen, wenn <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> Zeilen verarbeitet wurden oder keine Zeilen mehr an die Ziel Datenquelle gesendet werden müssen.  
  
 NULL (der Standardwert) gibt an, dass jeder <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> Vorgang ein einzelner Batch ist.  
  
 Wenn die <xref:System.Data.SqlClient.SqlBulkCopy> Instanz deklariert wurde, ohne dass die <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction>-Option aktiviert ist, werden Zeilen <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> Zeilen gleichzeitig an den Server gesendet, es wird jedoch keine transaktionsbezogene Aktion ausgeführt. Wenn <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> wirksam ist, wird jeder Zeilen Batch als separate Transaktion eingefügt.  
  
 Die <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>-Eigenschaft kann jederzeit festgelegt werden. Wenn bereits ein Massen Kopiervorgang ausgeführt wird, wird der aktuelle Batch entsprechend der vorherigen Batch Größe skaliert. Für nachfolgende Batches wird die neue Größe verwendet. Wenn der <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> anfänglich 0 (null) ist und geändert wird, während bereits ein <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> Vorgang ausgeführt wird, werden die Daten mit diesem Vorgang als einzelner Batch geladen. Alle nachfolgenden <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> Vorgänge in derselben <xref:System.Data.SqlClient.SqlBulkCopy> Instanz verwenden die neue <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>.  
  
   
  
## Examples  
 In der folgenden Konsolenanwendung wird veranschaulicht, wie Daten in Batches mit 50 Zeilen Massen geladen werden. Ein Beispiel, das veranschaulicht, wie <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> mit einer Transaktion funktioniert, finden Sie unter [Transaktions-und Massen Kopiervorgänge](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md).  
  
 In diesem Beispiel werden die Quelldaten zuerst aus einer SQL Server Tabelle in eine <xref:System.Data.SqlClient.SqlDataReader> Instanz gelesen. Die Quelldaten müssen sich nicht auf SQL Server befinden; Sie können jede beliebige Datenquelle verwenden, die in eine <xref:System.Data.IDataReader> gelesen oder in eine <xref:System.Data.DataTable>geladen werden kann.  
  
> [!IMPORTANT]
>  Dieses Beispiel wird nur dann ausgeführt, wenn Sie die Arbeits Tabellen erstellt haben, wie unter [Beispiel für Massen Kopier](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)Vorgänge beschrieben. Der angegebene Code dient nur zur Demonstration der Syntax für die Verwendung von **SqlBulkCopy**. Wenn sich die Quell-und Ziel Tabelle in derselben SQL Server Instanz befinden, ist es einfacher und schneller, eine Transact-SQL-`INSERT … SELECT` Anweisung zu verwenden, um die Daten zu kopieren.  
  
 [!code-csharp[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/sql/bulk-copy-operations-in-sql-server.md">Massenkopiervorgänge in SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="BulkCopyTimeout">
      <MemberSignature Language="C#" Value="public int BulkCopyTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BulkCopyTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property BulkCopyTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BulkCopyTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BulkCopyTimeout : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Anzahl der Sekunden zum Abschließen des Vorgangs, bevor ein Timeout auftritt.</summary>
        <value>Der ganzzahlige Wert der <see cref="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />-Eigenschaft. Der Standardwert ist 30 Sekunden. Der Wert 0 steht für eine unbegrenzte Wartezeit für das Massenkopieren.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn für den Vorgang ein Timeout auftritt, wird für die Transaktion kein Commit ausgeführt, und alle kopierten Zeilen werden aus der Ziel Tabelle entfernt.  
  
   
  
## Examples  
 In der folgenden Konsolenanwendung wird veranschaulicht, wie das Timeout auf 60 Sekunden beim Massen Laden von Daten geändert wird.  
  
 In diesem Beispiel werden die Quelldaten zuerst aus einer SQL Server Tabelle in eine <xref:System.Data.SqlClient.SqlDataReader> Instanz gelesen. Die Quelldaten müssen sich nicht auf SQL Server befinden; Sie können jede beliebige Datenquelle verwenden, die in eine <xref:System.Data.IDataReader> gelesen oder in eine <xref:System.Data.DataTable>geladen werden kann.  
  
> [!IMPORTANT]
>  Dieses Beispiel wird nur dann ausgeführt, wenn Sie die Arbeits Tabellen erstellt haben, wie unter [Beispiel für Massen Kopier](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)Vorgänge beschrieben. Der angegebene Code dient nur zur Demonstration der Syntax für die Verwendung von **SqlBulkCopy**. Wenn sich die Quell-und Ziel Tabelle in derselben SQL Server Instanz befinden, ist es einfacher und schneller, eine [!INCLUDE[tsql](~/includes/tsql-md.md)]`INSERT … SELECT`-Anweisung zu verwenden, um die Daten zu kopieren.  
  
 [!code-csharp[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/sql/bulk-copy-operations-in-sql-server.md">Massenkopiervorgänge in SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="sqlBulkCopy.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schließt die <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Instanz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nachdem Sie einen <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> für das <xref:System.Data.SqlClient.SqlBulkCopy>-Objekt aufgerufen haben, wird kein anderer Vorgang erfolgreich ausgeführt. Bei Aufrufen der <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>-Methode wird ein <xref:System.InvalidOperationException>ausgelöst.  
  
 Wenn Sie die <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>-Methode aus dem <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied>-Ereignis aufrufen, wird eine <xref:System.InvalidOperationException> ausgelöst.  
  
 Beachten Sie, dass geöffnete <xref:System.Data.SqlClient.SqlBulkCopy> Instanzen implizit am Ende eines `using` Blocks geschlossen werden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die gleiche <xref:System.Data.SqlClient.SqlBulkCopy> Instanz verwendet, um Verkaufsaufträge und die zugehörigen Details zwei Ziel Tabellen hinzuzufügen. Da die **AdventureWorks** -Verkaufs Auftrags Tabellen groß sind, liest das Beispiel nur Aufträge, die von einer bestimmten Kontonummer abgelegt werden, und kopiert diese Bestellungen und Details per Massen Vorgang in die Ziel Tabellen. Die <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>-Methode wird erst nach Abschluss beider Massen Kopiervorgänge verwendet.  
  
> [!IMPORTANT]
>  Dieses Beispiel wird nur dann ausgeführt, wenn Sie die Arbeits Tabellen erstellt haben, wie unter [Beispiel für Massen Kopier](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)Vorgänge beschrieben. Der angegebene Code dient nur zur Demonstration der Syntax für die Verwendung von **SqlBulkCopy**. Wenn sich die Quell-und Ziel Tabelle in derselben SQL Server Instanz befinden, ist es einfacher und schneller, eine Transact-SQL-`INSERT … SELECT` Anweisung zu verwenden, um die Daten zu kopieren.  
  
 [!code-csharp[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/sql/bulk-copy-operations-in-sql-server.md">Massenkopiervorgänge in SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnMappings">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.ColumnMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ColumnMappings As SqlBulkCopyColumnMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlBulkCopyColumnMappingCollection ^ ColumnMappings { System::Data::SqlClient::SqlBulkCopyColumnMappingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ColumnMappings : System.Data.SqlClient.SqlBulkCopyColumnMappingCollection" Usage="System.Data.SqlClient.SqlBulkCopy.ColumnMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlBulkCopyColumnMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt eine Auflistung von <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />-Elementen zurück. Spaltenzuordnungen definieren die Beziehungen zwischen Spalten in der Datenquelle und den Spalten im Ziel.</summary>
        <value>Eine Auflistung von Spaltenzuordnungen. Standardmäßig ist es eine leere Auflistung.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die Datenquelle und die Ziel Tabelle dieselbe Anzahl von Spalten aufweisen und die Ordinalposition jeder Quell Spalte innerhalb der Datenquelle mit der Ordnungsposition der entsprechenden Ziel Spalte übereinstimmt, ist die <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> Auflistung unnötig. Wenn die Anzahl der Spalten jedoch unterschiedlich ist oder die Ordinalpositionen nicht konsistent sind, müssen Sie <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> verwenden, um sicherzustellen, dass die Daten in die richtigen Spalten kopiert werden.  
  
 Während der Ausführung eines Massen Kopiervorgangs kann auf diese Sammlung zugegriffen werden, Sie kann jedoch nicht geändert werden. Bei jedem versuchten Änderungs Versuch wird eine <xref:System.InvalidOperationException>ausgelöst.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
        <related type="Article" href="~/docs/framework/data/adonet/sql/bulk-copy-operations-in-sql-server.md">Massenkopiervorgänge in SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DestinationTableName">
      <MemberSignature Language="C#" Value="public string DestinationTableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DestinationTableName" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
      <MemberSignature Language="VB.NET" Value="Public Property DestinationTableName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DestinationTableName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DestinationTableName : string with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Der Name der Zieltabelle auf dem Server.</summary>
        <value>Der Zeichenfolgenwert der <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft oder NULL, wenn kein Wert angegeben wurde.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> nicht festgelegt wurde, wenn <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> aufgerufen wird, wird eine <xref:System.ArgumentNullException> ausgelöst.  
  
 Wenn <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> geändert wird, während ein <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>-Vorgang ausgeführt wird, wirkt sich die Änderung nicht auf den aktuellen Vorgang aus. Der neue <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> Wert wird verwendet, wenn eine <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>-Methode das nächste Mal aufgerufen wird.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> ist ein dreiteilige Name (`<database>.<owningschema>.<name>`). Sie können den Tabellennamen mit seiner Datenbank und dem besitzenden Schema qualifizieren, wenn Sie das wünschen. Wenn für den Tabellennamen jedoch ein Unterstrich ("_") oder andere Sonderzeichen verwendet werden, müssen Sie den Namen mithilfe von umgebenden Klammern als in (`[<database>.<owningschema>.<name_01>]`) mit Escapezeichen versehen. Weitere Informationen finden Sie unter [Datenbankbezeichner](/sql/relational-databases/databases/database-identifiers).  
  
 Sie können Daten per Massen Kopiervorgang in eine temporäre Tabelle kopieren, indem Sie einen Wert wie `tempdb..#table` oder `tempdb.<owner>.#table` für die <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A>-Eigenschaft verwenden.  
  
   
  
## Examples  
 In der folgenden Konsolenanwendung wird veranschaulicht, wie Daten mithilfe einer bereits geöffneten Verbindung Massen geladen werden. Die Ziel Tabelle ist eine Tabelle in der **AdventureWorks** -Datenbank.  
  
 In diesem Beispiel wird die Verbindung zuerst zum Lesen von Daten aus einer SQL Server Tabelle in eine <xref:System.Data.SqlClient.SqlDataReader> Instanz verwendet. Die Quelldaten müssen sich nicht auf SQL Server befinden; Sie können jede beliebige Datenquelle verwenden, die in eine <xref:System.Data.IDataReader> gelesen oder in eine <xref:System.Data.DataTable>geladen werden kann.  
  
> [!IMPORTANT]
>  Dieses Beispiel wird nur dann ausgeführt, wenn Sie die Arbeits Tabellen erstellt haben, wie unter [Beispiel für Massen Kopier](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)Vorgänge beschrieben. Der angegebene Code dient nur zur Demonstration der Syntax für die Verwendung von **SqlBulkCopy**. Wenn sich die Quell-und Ziel Tabelle in derselben SQL Server Instanz befinden, ist es einfacher und schneller, eine Transact-SQL-`INSERT … SELECT` Anweisung zu verwenden, um die Daten zu kopieren.  
  
 [!code-csharp[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/sql/bulk-copy-operations-in-sql-server.md">Massenkopiervorgänge in SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="EnableStreaming">
      <MemberSignature Language="C#" Value="public bool EnableStreaming { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableStreaming" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.EnableStreaming" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableStreaming As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableStreaming { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableStreaming : bool with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.EnableStreaming" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Aktiviert oder deaktiviert ein <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekt für das Streamen von Daten aus einem <see cref="T:System.Data.IDataReader" />-Objekt.</summary>
        <value><see langword="true" />, wenn ein <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekt Daten von einem <see cref="T:System.Data.IDataReader" />-Objekt streamen kann, andernfalls „false“. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn <xref:System.Data.SqlClient.SqlBulkCopy.EnableStreaming%2A> `true`ist, liest <xref:System.Data.SqlClient.SqlBulkCopy> mithilfe von <xref:System.Data.CommandBehavior.SequentialAccess>aus einem <xref:System.Data.IDataReader> Objekt und optimiert die Speicherauslastung mithilfe der <xref:System.Data.IDataReader> Streaming-Funktionen. Wenn der Wert auf false festgelegt ist, lädt die <xref:System.Data.SqlClient.SqlBulkCopy> Klasse alle Daten, die vom <xref:System.Data.IDataReader>-Objekt zurückgegeben werden, in den Arbeitsspeicher, bevor Sie an SQL Server oder SQL Azure gesendet werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyAfter">
      <MemberSignature Language="C#" Value="public int NotifyAfter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NotifyAfter" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyAfter As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NotifyAfter { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyAfter : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Definiert die Anzahl der Zeilen, die verarbeitet werden, bevor ein Benachrichtigungsereignis generiert wird.</summary>
        <value>Der ganzzahlige Wert der <see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />-Eigenschaft oder 0 (null), wenn die Eigenschaft nicht festgelegt wurde.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ist für Benutzeroberflächen Komponenten konzipiert, die den Fortschritt eines Massen Kopiervorgangs veranschaulichen. Gibt die Anzahl der Zeilen an, die verarbeitet werden sollen, bevor ein Benachrichtigungs Ereignis erzeugt wird. Die <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A>-Eigenschaft kann jederzeit festgelegt werden, auch wenn ein Massen Kopiervorgang ausgeführt wird. Änderungen, die während eines Massen Kopiervorgangs vorgenommen werden, werden nach der nächsten Benachrichtigung wirksam. Die neue Einstellung gilt für alle nachfolgenden Vorgänge in der gleichen Instanz.  
  
 Wenn <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> auf eine Zahl kleiner als 0 (null) festgelegt ist, wird eine <xref:System.ArgumentOutOfRangeException> ausgelöst.  
  
   
  
## Examples  
 In der folgenden Konsolenanwendung wird veranschaulicht, wie Daten mithilfe einer bereits geöffneten Verbindung Massen geladen werden. Die <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A>-Eigenschaft wird so festgelegt, dass der Ereignishandler aufgerufen wird, nachdem alle 50 Zeilen in die Tabelle kopiert wurden.  
  
 In diesem Beispiel wird die Verbindung zuerst zum Lesen von Daten aus einer SQL Server Tabelle in eine <xref:System.Data.SqlClient.SqlDataReader> Instanz verwendet. Anschließend wird eine zweite Verbindung zum Massen Kopieren der Daten geöffnet. Beachten Sie, dass sich die Quelldaten nicht auf SQL Server befinden müssen. Sie können jede beliebige Datenquelle verwenden, die in eine <xref:System.Data.IDataReader> gelesen oder in eine <xref:System.Data.DataTable>geladen werden kann.  
  
> [!IMPORTANT]
>  Dieses Beispiel wird nur dann ausgeführt, wenn Sie die Arbeits Tabellen erstellt haben, wie unter [Beispiel für Massen Kopier](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)Vorgänge beschrieben. Der angegebene Code dient nur zur Demonstration der Syntax für die Verwendung von **SqlBulkCopy**. Wenn sich die Quell-und Ziel Tabelle in derselben SQL Server Instanz befinden, ist es einfacher und schneller, eine Transact-SQL-`INSERT … SELECT` Anweisung zu verwenden, um die Daten zu kopieren.  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/sql/bulk-copy-operations-in-sql-server.md">Massenkopiervorgänge in SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="SqlRowsCopied">
      <MemberSignature Language="C#" Value="public event System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied" />
      <MemberSignature Language="DocId" Value="E:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SqlRowsCopied As SqlRowsCopiedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::SqlClient::SqlRowsCopiedEventHandler ^ SqlRowsCopied;" />
      <MemberSignature Language="F#" Value="member this.SqlRowsCopied : System.Data.SqlClient.SqlRowsCopiedEventHandler " Usage="member this.SqlRowsCopied : System.Data.SqlClient.SqlRowsCopiedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlRowsCopiedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt jedes Mal auf, wenn die durch die <see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />-Eigenschaft angegebene Anzahl von Zeilen verarbeitet wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beachten Sie, dass die Einstellungen von <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> und <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> unabhängig sind. Der Empfang eines <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> Ereignisses impliziert nicht, dass Zeilen an den Server gesendet oder ein Commit ausgeführt wurden.  
  
 SqlBulkCopy. Close (<xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>) oder SqlConnection. Close (<xref:System.Data.SqlClient.SqlConnection.Close%2A>) kann nicht aus diesem Ereignis aufgerufen werden. Dadurch wird eine <xref:System.InvalidOperationException> ausgelöst, und der Zustand des <xref:System.Data.SqlClient.SqlBulkCopy> Objekts ändert sich nicht. Wenn der Benutzer den Vorgang vom Ereignis abbrechen möchte, kann die <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A>-Eigenschaft des <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs> verwendet werden. (Informationen zu Beispielen, die die <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A>-Eigenschaft verwenden, finden Sie unter [Transaktionen und Massen Kopiervorgänge](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md) .)  
  
 Während der Ausführung des Massen Kopiervorgangs wird in der Verbindung keine Aktion (z. b. Transaktions Aktivität) unterstützt, und es wird empfohlen, nicht die gleiche Verbindung zu verwenden, die während des <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> Ereignisses verwendet wurde. Sie können jedoch eine andere Verbindung öffnen.  
  
   
  
## Examples  
 In der folgenden Konsolenanwendung wird veranschaulicht, wie Daten mithilfe einer bereits geöffneten Verbindung Massen geladen werden. Die <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A>-Eigenschaft wird so festgelegt, dass der Ereignishandler aufgerufen wird, nachdem alle 50 Zeilen in die Tabelle kopiert wurden.  
  
 In diesem Beispiel wird die Verbindung zuerst zum Lesen von Daten aus einer SQL Server Tabelle in eine <xref:System.Data.SqlClient.SqlDataReader> Instanz verwendet. Beachten Sie, dass sich die Quelldaten nicht auf SQL Server befinden müssen. Sie können jede beliebige Datenquelle verwenden, die in eine <xref:System.Data.IDataReader> gelesen oder in eine <xref:System.Data.DataTable>geladen werden kann.  
  
> [!IMPORTANT]
>  Dieses Beispiel wird nur dann ausgeführt, wenn Sie die Arbeits Tabellen erstellt haben, wie unter [Beispiel für Massen Kopier](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)Vorgänge beschrieben. Der angegebene Code dient nur zur Demonstration der Syntax für die Verwendung von **SqlBulkCopy**. Wenn sich die Quell-und Ziel Tabelle in derselben SQL Server Instanz befinden, ist es einfacher und schneller, eine Transact-SQL-`INSERT … SELECT` Anweisung zu verwenden, um die Daten zu kopieren.  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/sql/bulk-copy-operations-in-sql-server.md">Massenkopiervorgänge in SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberSignature Language="F#" Value="abstract member System.IDisposable.Dispose : unit -&gt; unit&#xA;override this.System.IDisposable.Dispose : unit -&gt; unit" Usage="sqlBulkCopy.System.IDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt alle von der aktuellen Instanz der <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Klasse verwendeten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie `Dispose` auf, wenn Sie <xref:System.Data.SqlClient.SqlBulkCopy> nicht mehr benötigen. Die `Dispose`-Methode bewirkt, dass <xref:System.Data.SqlClient.SqlBulkCopy> nicht mehr verwendet werden kann. Nachdem Sie `Dispose`aufgerufen haben, müssen Sie alle Verweise auf die <xref:System.Data.SqlClient.SqlBulkCopy> freigeben, damit der Garbage Collector den Speicher freigeben kann, den der <xref:System.Data.SqlClient.SqlBulkCopy> belegt hat.  
  
 Weitere Informationen finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md) und [Implementieren einer](~/docs/standard/garbage-collection/implementing-dispose.md)verwerfen-Methode.  
  
> [!NOTE]
>  Rufen Sie immer `Dispose` auf, bevor Sie den letzten Verweis auf das <xref:System.Data.SqlClient.SqlBulkCopy> freigeben. Andernfalls bleiben die verwendeten Ressourcen reserviert, bis die Garbage Collection die <xref:System.Data.SqlClient.SqlBulkCopy>-Methode des `Finalize`-Objekts aufruft.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServer">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Kopiert alle Zeilen aus der angegebenen Datenquelle in eine Zieltabelle, die durch die <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts angegeben ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Mars (Multiple Active Result Sets) deaktiviert ist, macht <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> die Verbindung ausgelastet. Wenn MARS aktiviert ist, können Sie Aufrufe an <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> mit anderen Befehlen in derselben Verbindung überlassen.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/sql/bulk-copy-operations-in-sql-server.md">Massenkopiervorgänge in SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (reader As DbDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.Common.DbDataReader -&gt; unit" Usage="sqlBulkCopy.WriteToServer reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-1.0;netcore-1.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">Ein <see cref="T:System.Data.Common.DbDataReader" />-Objekt, dessen Zeilen in die Zieltabelle kopiert werden.</param>
        <summary>Kopiert alle Zeilen aus dem angegebenen <see cref="T:System.Data.Common.DbDataReader" />-Array in eine Zieltabelle, die durch die <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts angegeben ist.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (rows As DataRow())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataRow[] -&gt; unit" Usage="sqlBulkCopy.WriteToServer rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="rows">Ein Array von <see cref="T:System.Data.DataRow" />-Objekten, die in die Zieltabelle kopiert werden.</param>
        <summary>Kopiert alle Zeilen aus dem angegebenen <see cref="T:System.Data.DataRow" />-Array in eine Zieltabelle, die durch die <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts angegeben ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Während der Massen Kopiervorgang ausgeführt wird, ist der zugehörige Ziel <xref:System.Data.SqlClient.SqlConnection> ausgelastet, und es können keine anderen Vorgänge für die Verbindung ausgeführt werden.  
  
 Die <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>-Auflistung wird aus den <xref:System.Data.DataRow> Spalten der Ziel Datenbanktabelle zugeordnet.  
  
   
  
## Examples  
 In der folgenden Konsolenanwendung wird veranschaulicht, wie Daten aus einem <xref:System.Data.DataRow> Array Massen geladen werden. Die Ziel Tabelle ist eine Tabelle in der **AdventureWorks** -Datenbank.  
  
 In diesem Beispiel wird ein <xref:System.Data.DataTable> zur Laufzeit erstellt. Aus der <xref:System.Data.DataTable>, die in die Ziel Tabelle kopiert werden soll, wird eine einzelne Zeile ausgewählt.  
  
> [!IMPORTANT]
>  Dieses Beispiel wird nur dann ausgeführt, wenn Sie die Arbeits Tabellen erstellt haben, wie unter [Beispiel für Massen Kopier](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)Vorgänge beschrieben. Der angegebene Code dient nur zur Demonstration der Syntax für die Verwendung von **SqlBulkCopy**. Wenn sich die Quell-und Ziel Tabelle in derselben SQL Server Instanz befinden, ist es einfacher und schneller, eine Transact-SQL-`INSERT … SELECT` Anweisung zu verwenden, um die Daten zu kopieren.  
  
 [!code-csharp[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/sql/bulk-copy-operations-in-sql-server.md">Massenkopiervorgänge in SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (table As DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataTable -&gt; unit" Usage="sqlBulkCopy.WriteToServer table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="table">Ein <see cref="T:System.Data.DataTable" />-Objekt, dessen Zeilen in die Zieltabelle kopiert werden.</param>
        <summary>Kopiert alle Zeilen in der angegebenen <see cref="T:System.Data.DataTable" /> in eine Zieltabelle, die durch die <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts festgelegt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alle Zeilen in der <xref:System.Data.DataTable> werden in die Ziel Tabelle kopiert, ausgenommen diejenigen, die gelöscht wurden.  
  
 Während der Massen Kopiervorgang ausgeführt wird, ist der zugehörige Ziel <xref:System.Data.SqlClient.SqlConnection> ausgelastet, und es können keine anderen Vorgänge für die Verbindung ausgeführt werden.  
  
 Die <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>-Auflistung wird aus den <xref:System.Data.DataTable> Spalten der Ziel Datenbanktabelle zugeordnet.  
  
   
  
## Examples  
 Die folgende Konsolenanwendung veranschaulicht das Massen Laden von Daten aus einem <xref:System.Data.DataTable>. Die Ziel Tabelle ist eine Tabelle in der **AdventureWorks** -Datenbank.  
  
 In diesem Beispiel wird ein <xref:System.Data.DataTable> zur Laufzeit erstellt und ist die Quelle des `SqlBulkCopy` Vorgangs.  
  
> [!IMPORTANT]
>  Dieses Beispiel wird nur dann ausgeführt, wenn Sie die Arbeits Tabellen erstellt haben, wie unter [Beispiel für Massen Kopier](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)Vorgänge beschrieben. Der angegebene Code dient nur zur Demonstration der Syntax für die Verwendung von **SqlBulkCopy**. Wenn sich die Quell-und Ziel Tabelle in derselben SQL Server Instanz befinden, ist es einfacher und schneller, eine Transact-SQL-`INSERT … SELECT` Anweisung zu verwenden, um die Daten zu kopieren.  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/sql/bulk-copy-operations-in-sql-server.md">Massenkopiervorgänge in SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (reader As IDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::IDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.IDataReader -&gt; unit" Usage="sqlBulkCopy.WriteToServer reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">Ein <see cref="T:System.Data.IDataReader" />-Objekt, dessen Zeilen in die Zieltabelle kopiert werden.</param>
        <summary>Kopiert alle Zeilen in der angegebenen <see cref="T:System.Data.IDataReader" /> in eine Zieltabelle, die durch die <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts festgelegt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Kopiervorgang wird in der nächsten verfügbaren Zeile des Readers gestartet. In den meisten Fällen wurde der Reader soeben von <xref:System.Data.IDbCommand.ExecuteReader%2A> oder einem ähnlichen Aufruf zurückgegeben, sodass die nächste verfügbare Zeile die erste Zeile ist. Wenn Sie mehrere Ergebnisse verarbeiten möchten, wenden Sie <xref:System.Data.IDataReader.NextResult%2A> für den Daten Reader an, und nennen Sie <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> erneut.  
  
 Beachten Sie, dass mit <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> der Zustand des Readers geändert wird. Die-Methode ruft <xref:System.Data.IDataReader.Read%2A> auf, bis Sie false zurückgibt, der Vorgang abgebrochen wird oder ein Fehler auftritt. Dies bedeutet, dass sich der Daten Reader in einem anderen Zustand befindet, wahrscheinlich am Ende des Resultsets, wenn der <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> Vorgang abgeschlossen ist.  
  
 Während der Massen Kopiervorgang ausgeführt wird, ist der zugehörige Ziel <xref:System.Data.SqlClient.SqlConnection> ausgelastet, und es können keine anderen Vorgänge für die Verbindung ausgeführt werden.  
  
 Die <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>-Auflistung wird von den Daten Leser Spalten der Ziel Datenbanktabelle zugeordnet.  
  
   
  
## Examples  
 Die folgende Konsolenanwendung veranschaulicht das Massen Laden von Daten aus einem <xref:System.Data.SqlClient.SqlDataReader>. Die Ziel Tabelle ist eine Tabelle in der **AdventureWorks** -Datenbank.  
  
> [!IMPORTANT]
>  Dieses Beispiel wird nur dann ausgeführt, wenn Sie die Arbeits Tabellen erstellt haben, wie unter [Beispiel für Massen Kopier](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)Vorgänge beschrieben. Der angegebene Code dient nur zur Demonstration der Syntax für die Verwendung von **SqlBulkCopy**. Wenn sich die Quell-und Ziel Tabelle in derselben SQL Server Instanz befinden, ist es einfacher und schneller, eine Transact-SQL-`INSERT … SELECT` Anweisung zu verwenden, um die Daten zu kopieren.  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/sql/bulk-copy-operations-in-sql-server.md">Massenkopiervorgänge in SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (table As DataTable, rowState As DataRowState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::DataTable ^ table, System::Data::DataRowState rowState);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataTable * System.Data.DataRowState -&gt; unit" Usage="sqlBulkCopy.WriteToServer (table, rowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="table">Ein <see cref="T:System.Data.DataTable" />-Objekt, dessen Zeilen in die Zieltabelle kopiert werden.</param>
        <param name="rowState">Ein Wert aus der <see cref="T:System.Data.DataRowState" />-Enumeration. Es werden nur die Zeilen mit dem entsprechenden Zeilenzustand ins Ziel kopiert.</param>
        <summary>Kopiert nur die Zeilen, die dem angegebenen Zeilenstatus in der bereitgestellten <see cref="T:System.Data.DataTable" /> entsprechen, in eine Zieltabelle, die durch die <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts angegeben ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nur Zeilen in den <xref:System.Data.DataTable>, die sich in den Zuständen befinden, die im `rowState`-Argument angegeben sind und nicht gelöscht wurden, werden in die Ziel Tabelle kopiert.  
  
> [!NOTE]
>  Wenn <xref:System.Data.DataRowState.Deleted> angegeben wird, werden auch alle <xref:System.Data.DataRowState.Unchanged>-, <xref:System.Data.DataRowState.Added>-und <xref:System.Data.DataRowState.Modified> Zeilen auf den Server kopiert. Es wird keine Ausnahme ausgelöst.  
  
 Während der Massen Kopiervorgang ausgeführt wird, ist der zugehörige Ziel <xref:System.Data.SqlClient.SqlConnection> ausgelastet, und es können keine anderen Vorgänge für die Verbindung ausgeführt werden.  
  
 Die <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>-Auflistung wird aus den <xref:System.Data.DataTable> Spalten der Ziel Datenbanktabelle zugeordnet.  
  
   
  
## Examples  
 In der folgenden Konsolenanwendung wird veranschaulicht, wie nur die Zeilen in einem <xref:System.Data.DataTable>, die einem angegebenen Zustand entsprechen, Massen geladen werden. In diesem Fall werden nur unveränderte Zeilen hinzugefügt. Die Ziel Tabelle ist eine Tabelle in der **AdventureWorks** -Datenbank.  
  
 In diesem Beispiel wird ein <xref:System.Data.DataTable> zur Laufzeit erstellt, und es werden drei Zeilen hinzugefügt. Bevor die <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>-Methode ausgeführt wird, wird eine der Zeilen bearbeitet. Die <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>-Methode wird mit einem `DataRowState.Unchanged` `rowState` Argument aufgerufen, sodass nur die beiden nicht geänderten Zeilen Massen kopiert werden.  
  
> [!IMPORTANT]
>  Dieses Beispiel wird nur dann ausgeführt, wenn Sie die Arbeits Tabellen erstellt haben, wie unter [Beispiel für Massen Kopier](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)Vorgänge beschrieben. Der angegebene Code dient nur zur Demonstration der Syntax für die Verwendung von **SqlBulkCopy**. Wenn sich die Quell-und Ziel Tabelle in derselben SQL Server Instanz befinden, ist es einfacher und schneller, eine Transact-SQL-`INSERT … SELECT` Anweisung zu verwenden, um die Daten zu kopieren.  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataRowState" />
        <related type="Article" href="~/docs/framework/data/adonet/sql/bulk-copy-operations-in-sql-server.md">Massenkopiervorgänge in SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServerAsync">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Die asynchrone Version von <see cref="Overload:System.Data.SqlClient.SqlBulkCopy.WriteToServer" />, mit der alle Zeilen aus einer Datenquelle in eine Zieltabelle kopiert werden, die von der <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts angegeben wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Mars (Multiple Active Result Sets) deaktiviert ist, macht <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> die Verbindung ausgelastet. Wenn MARS aktiviert ist, können Sie Aufrufe an <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> mit anderen Befehlen in derselben Verbindung überlassen.  
  
 Die Anzahl der Zeilen, für die bei einem Fehler ein Rollback ausgeführt wird, hängt von mehreren Faktoren ab:  
  
-   , Wenn <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> angegeben wird.  
  
-   Wenn Sie über Ihre eigene Transaktion verfügen.  
  
-   Der Wert von <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>.  
  
 Wenn beim Senden von Daten an den Server ein Fehler auftritt, wird für den aktuellen Batch (wie von <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>angegeben) ein Rollback ausgeführt. Wenn <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> nicht angegeben ist und Sie über eine eigene Transaktion verfügen, wird für die gesamte Transaktion ein Rollback ausgeführt (was auch alle vorherigen Batches einschließt).  
  
 Verwenden Sie <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied>, um zu ermitteln, wie viele Zeilen auf den Server kopiert wurden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As DbDataReader) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.Common.DbDataReader -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-1.0;netcore-1.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">Ein <see cref="T:System.Data.Common.DbDataReader" />-Objekt, dessen Zeilen in die Zieltabelle kopiert werden.</param>
        <summary>Eine asynchrone Version von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />, die alle Zeilen aus dem bereitgestellten <see cref="T:System.Data.Common.DbDataReader" />-Array in eine Zieltabelle kopiert, die von der <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts angegeben wird.</summary>
        <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (rows As DataRow()) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataRow[] -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="rows">Ein Array von <see cref="T:System.Data.DataRow" />-Objekten, die in die Zieltabelle kopiert werden.</param>
        <summary>Die asynchrone Version von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />, mit der alle Zeilen aus dem bereitgestellten <see cref="T:System.Data.DataRow" />-Array in eine Zieltabelle kopiert werden, die durch die <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts angegeben ist.</summary>
        <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur asynchronen Programmierung in der .NET Framework Datenanbieter für SQL Server finden Sie unter [asynchrone Programmierung](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> wird mehrfach für dieselbe Instanz aufgerufen, bevor die Aufgabe abgeschlossen ist.  
  
Aufruf von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> und <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> für die gleiche Instanz vor Aufgabenabschluss.  
  
Die Verbindung geht verloren oder wird während <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />-Ausführung beendet.  
  
Bei Rückgabe im Taskobjekt wurde das <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekt während der Methodenausführung geschlossen.  
  
Bei Rückgabe im Taskobjekt ein Verbindungspool-Timeout.  
  
Das im Aufgabenobjekt zurückgegebene <see cref="T:System.Data.SqlClient.SqlConnection" />-Objekt wurde vor der Methodenausführung geschlossen.  
  
 <see langword="Context Connection=true" /> ist in der Verbindungszeichenfolge angegeben.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Bei Rückgabe im Aufgabenobjekt jeder von SQL Server zurückgegebene Fehler, der beim Öffnen der Verbindung aufgetreten ist.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table">Ein <see cref="T:System.Data.DataTable" />-Objekt, dessen Zeilen in die Zieltabelle kopiert werden.</param>
        <summary>Die asynchrone Version von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />, mit der alle Zeilen im bereitgestellten <see cref="T:System.Data.DataTable" /> in eine Zieltabelle kopiert werden, die durch die <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts angegeben ist.</summary>
        <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur asynchronen Programmierung in der .NET Framework Datenanbieter für SQL Server finden Sie unter [asynchrone Programmierung](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> wird mehrfach für dieselbe Instanz aufgerufen, bevor die Aufgabe abgeschlossen ist.  
  
Aufruf von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> und <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> für die gleiche Instanz vor Aufgabenabschluss.  
  
Die Verbindung geht verloren oder wird während <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />-Ausführung beendet.  
  
Bei Rückgabe im Taskobjekt wurde das <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekt während der Methodenausführung geschlossen.  
  
Bei Rückgabe im Taskobjekt ein Verbindungspool-Timeout.  
  
Das im Aufgabenobjekt zurückgegebene <see cref="T:System.Data.SqlClient.SqlConnection" />-Objekt wurde vor der Methodenausführung geschlossen.  
  
 <see langword="Context Connection=true" /> ist in der Verbindungszeichenfolge angegeben.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Bei Rückgabe im Aufgabenobjekt jeder von SQL Server zurückgegebene Fehler, der beim Öffnen der Verbindung aufgetreten ist.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As IDataReader) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::IDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.IDataReader -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="reader">Ein <see cref="T:System.Data.IDataReader" />-Objekt, dessen Zeilen in die Zieltabelle kopiert werden.</param>
        <summary>Die asynchrone Version von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />, mit der alle Zeilen im bereitgestellten <see cref="T:System.Data.IDataReader" /> in eine Zieltabelle kopiert werden, die durch die <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts angegeben ist.</summary>
        <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur asynchronen Programmierung in der .NET Framework Datenanbieter für SQL Server finden Sie unter [asynchrone Programmierung](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> wird mehrfach für dieselbe Instanz aufgerufen, bevor die Aufgabe abgeschlossen ist.  
  
Aufruf von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> und <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> für die gleiche Instanz vor Aufgabenabschluss.  
  
Die Verbindung geht verloren oder wird während <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />-Ausführung beendet.  
  
Bei Rückgabe im Taskobjekt wurde das <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekt während der Methodenausführung geschlossen.  
  
Bei Rückgabe im Taskobjekt ein Verbindungspool-Timeout.  
  
Bei Rückgabe im Taskobjekt wird das <see cref="T:System.Data.SqlClient.SqlConnection" />-Objekt vor der Methodenausführung geschlossen.  
  
Der <see cref="T:System.Data.IDataReader" /> wurde geschlossen, bevor die abgeschlossene <see cref="T:System.Threading.Tasks.Task" /> zurückgegeben wurde.  
  
Die zugeordnete Verbindung für den <see cref="T:System.Data.IDataReader" /> wurde geschlossen, bevor die abgeschlossene <see cref="T:System.Threading.Tasks.Task" /> zurückgegeben wurde.  
  
 <see langword="Context Connection=true" /> ist in der Verbindungszeichenfolge angegeben.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Bei Rückgabe im Aufgabenobjekt jeder von SQL Server zurückgegebene Fehler, der beim Öffnen der Verbindung aufgetreten ist.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As DbDataReader, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::Common::DbDataReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.Common.DbDataReader * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (reader, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-1.0;netcore-1.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-1.0;netcore-1.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">Ein <see cref="T:System.Data.Common.DbDataReader" />-Objekt, dessen Zeilen in die Zieltabelle kopiert werden.</param>
        <param name="cancellationToken">Die Abbruchanweisung. Ein <see cref="P:System.Threading.CancellationToken.None" />-Wert in diesem Parameter bewirkt, dass diese Methode mit <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" /> identisch ist.</param>
        <summary>Die asynchrone Version von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />, mit der alle Zeilen aus dem bereitgestellten <see cref="T:System.Data.Common.DbDataReader" />-Array in eine Zieltabelle kopiert werden, die durch die <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts angegeben ist.</summary>
        <returns>Gibt <see cref="T:System.Threading.Tasks.Task" />zurück.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (rows As DataRow(), cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(cli::array &lt;System::Data::DataRow ^&gt; ^ rows, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataRow[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (rows, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="rows">Ein Array von <see cref="T:System.Data.DataRow" />-Objekten, die in die Zieltabelle kopiert werden.</param>
        <param name="cancellationToken">Die Abbruchanweisung. Ein <see cref="P:System.Threading.CancellationToken.None" />-Wert in diesem Parameter bewirkt, dass diese Methode mit <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> identisch ist.</param>
        <summary>Die asynchrone Version von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />, mit der alle Zeilen aus dem bereitgestellten <see cref="T:System.Data.DataRow" />-Array in eine Zieltabelle kopiert werden, die durch die <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts angegeben ist.  
  
Das Abbruchtoken kann verwendet werden, um anzufordern, dass der Vorgang abgebrochen wird, bevor das Timeout des Befehls abläuft.  Ausnahmen werden über das zurückgegebene Aufgabenobjekt gemeldet.</summary>
        <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur asynchronen Programmierung in der .NET Framework Datenanbieter für SQL Server finden Sie unter [asynchrone Programmierung](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> wird mehrfach für dieselbe Instanz aufgerufen, bevor die Aufgabe abgeschlossen ist.  
  
Aufruf von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> und <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> für die gleiche Instanz vor Aufgabenabschluss.  
  
Die Verbindung geht verloren oder wird während <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />-Ausführung beendet.  
  
Bei Rückgabe im Taskobjekt wurde das <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekt während der Methodenausführung geschlossen.  
  
Bei Rückgabe im Taskobjekt ein Verbindungspool-Timeout.  
  
Das im Aufgabenobjekt zurückgegebene <see cref="T:System.Data.SqlClient.SqlConnection" />-Objekt wurde vor der Methodenausführung geschlossen.  
  
 <see langword="Context Connection=true" /> ist in der Verbindungszeichenfolge angegeben.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Bei Rückgabe im Aufgabenobjekt jeder von SQL Server zurückgegebene Fehler, der beim Öffnen der Verbindung aufgetreten ist.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable, rowState As DataRowState) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Data::DataRowState rowState);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Data.DataRowState -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, rowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table">Ein <see cref="T:System.Data.DataTable" />, deren Zeilen in die Zieltabelle kopiert werden.</param>
        <param name="rowState">Ein Wert aus der <see cref="T:System.Data.DataRowState" />-Enumeration. Nur Zeilen, die dem Zeilenstatus entsprechen, werden in die Zieltabelle kopiert.</param>
        <summary>Die asynchrone Version von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />, die nur die Zeilen mit dem angegebenen Zeilenzustand aus der bereitgestellten <see cref="T:System.Data.DataTable" /> in eine Zieltabelle kopiert, die von der <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts angegeben wird.</summary>
        <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur asynchronen Programmierung in der .NET Framework Datenanbieter für SQL Server finden Sie unter [asynchrone Programmierung](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> wird mehrfach für dieselbe Instanz aufgerufen, bevor die Aufgabe abgeschlossen ist.  
  
Aufruf von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> und <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> für die gleiche Instanz vor Aufgabenabschluss.  
  
Die Verbindung geht verloren oder wird während <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />-Ausführung beendet.  
  
Bei Rückgabe im Taskobjekt wurde das <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekt während der Methodenausführung geschlossen.  
  
Bei Rückgabe im Taskobjekt ein Verbindungspool-Timeout.  
  
Das im Aufgabenobjekt zurückgegebene <see cref="T:System.Data.SqlClient.SqlConnection" />-Objekt wurde vor der Methodenausführung geschlossen.  
  
 <see langword="Context Connection=true" /> ist in der Verbindungszeichenfolge angegeben.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Bei Rückgabe im Aufgabenobjekt jeder von SQL Server zurückgegebene Fehler, der beim Öffnen der Verbindung aufgetreten ist.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table">Ein <see cref="T:System.Data.DataTable" />-Objekt, dessen Zeilen in die Zieltabelle kopiert werden.</param>
        <param name="cancellationToken">Die Abbruchanweisung. Ein <see cref="P:System.Threading.CancellationToken.None" />-Wert in diesem Parameter macht diese Methode äquivalent zu <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>Eine asynchrone Version von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />, die alle Zeilen in das bereitgestellte <see cref="T:System.Data.DataTable" />-Array in eine Zieltabelle kopiert, die von der <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts angegeben wird.  
  
Das Abbruchtoken kann verwendet werden, um anzufordern, dass der Vorgang abgebrochen wird, bevor das Timeout des Befehls abläuft.  Ausnahmen werden über das zurückgegebene Aufgabenobjekt gemeldet.</summary>
        <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur asynchronen Programmierung in der .NET Framework Datenanbieter für SQL Server finden Sie unter [asynchrone Programmierung](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> wird mehrfach für dieselbe Instanz aufgerufen, bevor die Aufgabe abgeschlossen ist.  
  
Aufruf von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> und <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> für die gleiche Instanz vor Aufgabenabschluss.  
  
Die Verbindung geht verloren oder wird während <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />-Ausführung beendet.  
  
Bei Rückgabe im Taskobjekt wurde das <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekt während der Methodenausführung geschlossen.  
  
Bei Rückgabe im Taskobjekt ein Verbindungspool-Timeout.  
  
Das im Aufgabenobjekt zurückgegebene <see cref="T:System.Data.SqlClient.SqlConnection" />-Objekt wurde vor der Methodenausführung geschlossen.  
  
 <see langword="Context Connection=true" /> ist in der Verbindungszeichenfolge angegeben.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Bei Rückgabe im Aufgabenobjekt jeder von SQL Server zurückgegebene Fehler, der beim Öffnen der Verbindung aufgetreten ist.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As IDataReader, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::IDataReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.IDataReader * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (reader, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="reader">Ein <see cref="T:System.Data.IDataReader" />-Objekt, dessen Zeilen in die Zieltabelle kopiert werden.</param>
        <param name="cancellationToken">Die Abbruchanweisung. Ein <see cref="P:System.Threading.CancellationToken.None" />-Wert in diesem Parameter macht diese Methode äquivalent zu <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>Eine asynchrone Version von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />, die alle Zeilen in das bereitgestellte <see cref="T:System.Data.IDataReader" />-Array in eine Zieltabelle kopiert, die von der <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts angegeben wird.  
  
Das Abbruchtoken kann verwendet werden, um anzufordern, dass der Vorgang abgebrochen wird, bevor das Timeout des Befehls abläuft.  Ausnahmen werden über das zurückgegebene Aufgabenobjekt gemeldet.</summary>
        <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur asynchronen Programmierung in der .NET Framework Datenanbieter für SQL Server finden Sie unter [asynchrone Programmierung](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> wird mehrfach für dieselbe Instanz aufgerufen, bevor die Aufgabe abgeschlossen ist.  
  
Aufruf von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> und <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> für die gleiche Instanz vor Aufgabenabschluss.  
  
Die Verbindung geht verloren oder wird während <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />-Ausführung beendet.  
  
Bei Rückgabe im Taskobjekt wurde das <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekt während der Methodenausführung geschlossen.  
  
Bei Rückgabe im Taskobjekt ein Verbindungspool-Timeout.  
  
Bei Rückgabe im Taskobjekt wird das <see cref="T:System.Data.SqlClient.SqlConnection" />-Objekt vor der Methodenausführung geschlossen.  
  
Der <see cref="T:System.Data.IDataReader" /> wurde geschlossen, bevor die abgeschlossene <see cref="T:System.Threading.Tasks.Task" /> zurückgegeben wurde.  
  
Die zugeordnete Verbindung für den <see cref="T:System.Data.IDataReader" /> wurde geschlossen, bevor die abgeschlossene <see cref="T:System.Threading.Tasks.Task" /> zurückgegeben wurde.  
  
 <see langword="Context Connection=true" /> ist in der Verbindungszeichenfolge angegeben.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Bei Rückgabe im Aufgabenobjekt jeder von SQL Server zurückgegebene Fehler, der beim Öffnen der Verbindung aufgetreten ist.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable, rowState As DataRowState, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Data::DataRowState rowState, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Data.DataRowState * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, rowState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table">Ein <see cref="T:System.Data.DataTable" />, deren Zeilen in die Zieltabelle kopiert werden.</param>
        <param name="rowState">Ein Wert aus der <see cref="T:System.Data.DataRowState" />-Enumeration. Es werden nur die Zeilen mit dem entsprechenden Zeilenzustand ins Ziel kopiert.</param>
        <param name="cancellationToken">Die Abbruchanweisung. Ein <see cref="P:System.Threading.CancellationToken.None" />-Wert in diesem Parameter bewirkt, dass diese Methode mit <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> identisch ist.</param>
        <summary>Die asynchrone Version von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />, die nur die Zeilen, die dem angegebenen Zeilenstatus in der bereitgestellten <see cref="T:System.Data.DataTable" /> entsprechen, in eine Zieltabelle kopiert, die durch die <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts angegeben ist.  
  
Das Abbruchtoken kann verwendet werden, um anzufordern, dass der Vorgang abgebrochen wird, bevor das Timeout des Befehls abläuft.  Ausnahmen werden über das zurückgegebene Aufgabenobjekt gemeldet.</summary>
        <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur asynchronen Programmierung in der .NET Framework Datenanbieter für SQL Server finden Sie unter [asynchrone Programmierung](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> wird mehrfach für dieselbe Instanz aufgerufen, bevor die Aufgabe abgeschlossen ist.  
  
Aufruf von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> und <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> für die gleiche Instanz vor Aufgabenabschluss.  
  
Die Verbindung geht verloren oder wird während <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />-Ausführung beendet.  
  
Bei Rückgabe im Taskobjekt wurde das <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekt während der Methodenausführung geschlossen.  
  
Bei Rückgabe im Taskobjekt ein Verbindungspool-Timeout.  
  
Das im Aufgabenobjekt zurückgegebene <see cref="T:System.Data.SqlClient.SqlConnection" />-Objekt wurde vor der Methodenausführung geschlossen.  
  
 <see langword="Context Connection=true" /> ist in der Verbindungszeichenfolge angegeben.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Bei Rückgabe im Aufgabenobjekt jeder von SQL Server zurückgegebene Fehler, der beim Öffnen der Verbindung aufgetreten ist.</exception>
      </Docs>
    </Member>
  </Members>
</Type>

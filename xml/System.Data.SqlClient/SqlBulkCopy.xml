<Type Name="SqlBulkCopy" FullName="System.Data.SqlClient.SqlBulkCopy">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c2245419dca31dcc8fa93f103a021ddcfb28d779" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56791042" /></Metadata><TypeSignature Language="C#" Value="public sealed class SqlBulkCopy : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlBulkCopy extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlBulkCopy" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlBulkCopy&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlBulkCopy sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SqlBulkCopy = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.4.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Ermöglicht es Ihnen, in einem Sammelladevorgang Daten aus einer anderen Quelle in eine SQL Server-Tabelle zu laden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Microsoft SQL Server enthält ein beliebtes Befehlszeilen-Hilfsprogramm, mit dem Namen **Bcp** zum Verschieben von Daten aus einer Tabelle in eine andere, ob auf einem einzelnen Server oder zwischen Servern. Die <xref:System.Data.SqlClient.SqlBulkCopy> Klasse können Sie die Lösungen mit verwaltetem Code zu schreiben, die ähnliche Funktionalität bereitstellen. Es gibt andere Möglichkeiten zum Laden von Daten in eine SQL Server-Tabelle (INSERT-Anweisungen, z. B.), aber <xref:System.Data.SqlClient.SqlBulkCopy> bietet einen erheblichen Leistungsvorteil.  
  
 Mit der <xref:System.Data.SqlClient.SqlBulkCopy>-Klasse können Daten nur in SQL Server-Tabellen geschrieben werden. Die Datenquelle ist jedoch nicht auf SQL Server beschränkt; Jede Datenquelle kann verwendet werden, solange die Daten können, um geladen werden eine <xref:System.Data.DataTable> -Instanz ein, oder Lesen mit einem <xref:System.Data.IDataReader> Instanz.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy> schlägt fehl, wenn beim Massenladen ein <xref:System.Data.DataTable> Spalte vom Typ <xref:System.Data.SqlTypes.SqlDateTime> in eine SQL Server, dessen Typ einer der Typen Datum/Uhrzeit ist-Spalte, die in SQL Server 2008 hinzugefügt.  
  
   
  
## Examples  
 In der folgenden Konsolenanwendung wird veranschaulicht, wie Daten mithilfe der <xref:System.Data.SqlClient.SqlBulkCopy>-Klasse geladen werden. In diesem Beispiel eine <xref:System.Data.SqlClient.SqlDataReader> wird verwendet, um das Kopieren von Daten aus der **Production.Product** Tabelle in SQL Server **AdventureWorks** Datenbank in eine ähnliche Tabelle in der gleichen Datenbank.  
  
> [!IMPORTANT]
>  In diesem Beispiel wird nicht ausgeführt werden, es sei denn, Sie die Arbeitstabellen erstellt haben, wie in beschrieben [Einrichtung der Massenkopierbeispiele](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Dieser Code wird bereitgestellt, um zu veranschaulichen die Syntax für die Verwendung von **"SqlBulkCopy"** nur. Wenn die Quelle und Ziel-Tabellen in der gleichen SQL Server-Instanz ist, ist es einfacher und schneller mit einer Transact-SQL `INSERT … SELECT` Anweisung, um die Daten zu kopieren.  
  
 [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Durchführen von Massenkopiervorgängen</related>
    <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Klasse.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As SqlConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::Data::SqlClient::SqlConnection ^ connection);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : System.Data.SqlClient.SqlConnection -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy connection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
      </Parameters>
      <Docs>
        <param name="connection">Die bereits geöffnete <see cref="T:System.Data.SqlClient.SqlConnection" />-Instanz, mit der Massenkopiervorgänge ausgeführt werden. Wenn die Verbindungszeichenfolge nicht <see langword="Integrated Security = true" /> verwendet, können Sie <see cref="T:System.Data.SqlClient.SqlCredential" /> verwenden, um die Benutzer-ID und das Kennwort sicherer zu übergeben, als wenn Sie die Benutzer-ID und das Kennwort als Text in der Verbindungszeichenfolge angeben.</param>
        <summary>Initialisiert mit der angegebenen geöffneten Instanz von <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> eine neue Instanz der <see cref="T:System.Data.SqlClient.SqlConnection" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Da die Verbindung bereits offen bei der <xref:System.Data.SqlClient.SqlBulkCopy> -Instanz initialisiert wird, bleibt die Verbindung geöffnet, nachdem die <xref:System.Data.SqlClient.SqlBulkCopy> -Instanz geschlossen ist.  
  
 Wenn die `connection` Argument null ist, eine <xref:System.ArgumentNullException> ausgelöst.  
  
   
  
## Examples  
 Die folgenden Konsolenanwendung wird veranschaulicht, wie Sie das Massenladen von Daten über eine Verbindung, die bereits geöffnet ist. In diesem Beispiel eine <xref:System.Data.SqlClient.SqlDataReader> wird verwendet, um das Kopieren von Daten aus der **Production.Product** Tabelle in SQL Server **AdventureWorks** Datenbank in eine ähnliche Tabelle in der gleichen Datenbank. Das Beispiel dient nur der Veranschaulichung. Verwenden Sie keine `SqlBulkCopy` zum Verschieben von Daten aus einer Tabelle in eine andere in der gleichen Datenbank in einer produktionsanwendung. Beachten Sie, dass die Daten nicht unbedingt auf SQL Server befinden. können Sie alle Datenquellen, die zu lesende ein <xref:System.Data.IDataReader> oder Laden in ein <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  In diesem Beispiel wird nicht ausgeführt werden, es sei denn, Sie die Arbeitstabellen erstellt haben, wie in beschrieben [Einrichtung der Massenkopierbeispiele](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Dieser Code wird bereitgestellt, um zu veranschaulichen die Syntax für die Verwendung von **"SqlBulkCopy"** nur. Wenn die Quelle und Ziel-Tabellen in der gleichen SQL Server-Instanz ist, ist es einfacher und schneller mit einer Transact-SQL `INSERT … SELECT` Anweisung, um die Daten zu kopieren.  
  
 [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Durchführen von Massenkopiervorgängen</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::String ^ connectionString);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : string -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy connectionString" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">Die Zeichenfolge zur Definition der Verbindung, die für die <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Instanz geöffnet wird. Wenn die Verbindungszeichenfolge nicht <see langword="Integrated Security = true" /> verwendet, können Sie <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> oder <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> und <see cref="T:System.Data.SqlClient.SqlCredential" /> verwenden, um die Benutzer-ID und das Kennwort sicherer zu übergeben, als wenn Sie die Benutzer-ID und das Kennwort als Text in der Verbindungszeichenfolge angeben.</param>
        <summary>Initialisiert und öffnet auf Grundlage des angegebenen <paramref name="connectionString" /> eine neue Instanz von <see cref="T:System.Data.SqlClient.SqlConnection" />. Der Konstruktor initialisiert mithilfe von <see cref="T:System.Data.SqlClient.SqlConnection" /> eine neue Instanz der <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Verbindung wird am Ende der Massenkopiervorgang automatisch geschlossen.  
  
 Wenn `connectionString` null ist, eine <xref:System.ArgumentNullException> ausgelöst. Wenn `connectionString` ist eine leere Zeichenfolge, ein <xref:System.ArgumentException> ausgelöst.  
  
   
  
## Examples  
 Die folgende Konsolenanwendung zeigt, wie zum Massenladen von Daten mithilfe einer Verbindungs als Zeichenfolge angegeben wird. Die Verbindung wird automatisch geschlossen, wenn die <xref:System.Data.SqlClient.SqlBulkCopy> -Instanz geschlossen ist.  
  
 In diesem Beispiel werden zunächst die Quelldaten aus einer SQL Server-Tabelle zu gelesen eine <xref:System.Data.SqlClient.SqlDataReader> Instanz. Die Quelldaten muss nicht auf SQL Server befinden; können Sie alle Datenquellen, die zu lesende ein <xref:System.Data.IDataReader> oder Laden in ein <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  In diesem Beispiel wird nicht ausgeführt werden, es sei denn, Sie die Arbeitstabellen erstellt haben, wie in beschrieben [Einrichtung der Massenkopierbeispiele](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Dieser Code wird bereitgestellt, um zu veranschaulichen die Syntax für die Verwendung von **"SqlBulkCopy"** nur. Wenn die Quelle und Ziel-Tabellen in der gleichen SQL Server-Instanz ist, ist es einfacher und schneller mit einer Transact-SQL `INSERT … SELECT` Anweisung, um die Daten zu kopieren.  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Massenkopiervorgänge in SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString, System.Data.SqlClient.SqlBulkCopyOptions copyOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, copyOptions As SqlBulkCopyOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::String ^ connectionString, System::Data::SqlClient::SqlBulkCopyOptions copyOptions);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : string * System.Data.SqlClient.SqlBulkCopyOptions -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy (connectionString, copyOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
      </Parameters>
      <Docs>
        <param name="connectionString">Die Zeichenfolge zur Definition der Verbindung, die für die <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Instanz geöffnet wird. Wenn die Verbindungszeichenfolge nicht <see langword="Integrated Security = true" /> verwendet, können Sie <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> oder <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> und <see cref="T:System.Data.SqlClient.SqlCredential" /> verwenden, um die Benutzer-ID und das Kennwort sicherer zu übergeben, als wenn Sie die Benutzer-ID und das Kennwort als Text in der Verbindungszeichenfolge angeben.</param>
        <param name="copyOptions">Eine Kombination von Werten aus der <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" />-Enumeration, die festlegt, welche Zeilen der Datenquelle in die Zieltabelle kopiert werden.</param>
        <summary>Initialisiert und öffnet auf Grundlage des angegebenen <paramref name="connectionString" /> eine neue Instanz von <see cref="T:System.Data.SqlClient.SqlConnection" />. Der Konstruktor initialisiert mithilfe von <see cref="T:System.Data.SqlClient.SqlConnection" /> eine neue Instanz der <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Klasse. Die <see cref="T:System.Data.SqlClient.SqlConnection" />-Instanz verhält sich entsprechend den Optionen, die im <paramref name="copyOptions" />-Parameter angegeben wurden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie erhalten ausführliche Informationen zu allen Bulk Copy-Optionen in der <xref:System.Data.SqlClient.SqlBulkCopyOptions> Thema.  
  
   
  
## Examples  
 Die folgenden Konsolenanwendung wird veranschaulicht, wie ein Massenladen durchgeführt wird, wird über eine Verbindung als Zeichenfolge angegeben wird. Eine Option festgelegt ist, verwenden Sie den Wert in die Identity-Spalte der Quelltabelle, wenn Sie die Zieltabelle laden. In diesem Beispiel werden zunächst die Quelldaten aus einer SQL Server-Tabelle zu gelesen eine <xref:System.Data.SqlClient.SqlDataReader> Instanz. Die Quell- und Zieltabelle jeweils enthalten eine Identity-Spalte. Standardmäßig wird ein neuer Wert für die **Identität** Spalte wird in der Zieltabelle für jede hinzugefügte Zeile generiert. In diesem Beispiel ist eine Option festgelegt ist, wenn die Verbindung, die den Massenladevorgang geöffnet wird verwendet die **Identität** stattdessen aus der Quelltabelle Werte. Um festzustellen, wie die Option die Funktionsweise des Bulk Load, führen Sie das Beispiel mit ändert die **Dbo. "BulkCopyDemoMatchingColumns"** Tabelle leer. Alle Zeilen aus der Quelle geladen werden. Führen Sie das Beispiel erneut aus, ohne die Tabelle zu leeren. Eine Ausnahme wird ausgelöst, und der Code schreibt eine Meldung an die Konsole, die Sie darüber informiert, dass Zeilen aufgrund von Verletzungen der primary Key-Einschränkung hinzugefügt wurden nicht.  
  
> [!IMPORTANT]
>  In diesem Beispiel wird nicht ausgeführt werden, es sei denn, Sie die Arbeitstabellen erstellt haben, wie in beschrieben [Einrichtung der Massenkopierbeispiele](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Dieser Code wird bereitgestellt, um zu veranschaulichen die Syntax für die Verwendung von **"SqlBulkCopy"** nur. Wenn die Quelle und Ziel-Tabellen in der gleichen SQL Server-Instanz ist, ist es einfacher und schneller mit einer Transact-SQL `INSERT … SELECT` Anweisung, um die Daten zu kopieren.  
  
 [!code-csharp[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Durchführen von Massenkopiervorgängen</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlBulkCopyOptions copyOptions, System.Data.SqlClient.SqlTransaction externalTransaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions, class System.Data.SqlClient.SqlTransaction externalTransaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As SqlConnection, copyOptions As SqlBulkCopyOptions, externalTransaction As SqlTransaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::Data::SqlClient::SqlConnection ^ connection, System::Data::SqlClient::SqlBulkCopyOptions copyOptions, System::Data::SqlClient::SqlTransaction ^ externalTransaction);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : System.Data.SqlClient.SqlConnection * System.Data.SqlClient.SqlBulkCopyOptions * System.Data.SqlClient.SqlTransaction -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy (connection, copyOptions, externalTransaction)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
        <Parameter Name="externalTransaction" Type="System.Data.SqlClient.SqlTransaction" />
      </Parameters>
      <Docs>
        <param name="connection">Die bereits geöffnete <see cref="T:System.Data.SqlClient.SqlConnection" />-Instanz, mit der der Massenkopiervorgang ausgeführt wird. Wenn die Verbindungszeichenfolge nicht <see langword="Integrated Security = true" /> verwendet, können Sie <see cref="T:System.Data.SqlClient.SqlCredential" /> verwenden, um die Benutzer-ID und das Kennwort sicherer zu übergeben, als wenn Sie die Benutzer-ID und das Kennwort als Text in der Verbindungszeichenfolge angeben.</param>
        <param name="copyOptions">Eine Kombination von Werten aus der <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" />-Enumeration, die festlegt, welche Zeilen der Datenquelle in die Zieltabelle kopiert werden.</param>
        <param name="externalTransaction">Eine vorhandene <see cref="T:System.Data.SqlClient.SqlTransaction" />-Instanz, unter der der Massenkopiervorgang ausgeführt wird.</param>
        <summary>Initialisiert mit der angegebenen geöffneten Instanz von <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> eine neue Instanz der <see cref="T:System.Data.SqlClient.SqlConnection" />-Klasse. Die <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Instanz verhält sich entsprechend den Optionen, die im <paramref name="copyOptions" />-Parameter angegeben wurden. Wenn <see cref="T:System.Data.SqlClient.SqlTransaction" /> auf einen anderen Wert als NULL festgelegt wird, werden die Kopiervorgänge innerhalb dieser Transaktion ausgeführt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Optionen umfassen `UseInternalTransaction` und `externalTransaction` Argument ist nicht null, ein **InvalidArgumentException** ausgelöst.  
  
 Beispiele, die veranschaulicht, wie `SqlBulkCopy` finden Sie in einer Transaktion unter [Transaktionen und Massenkopiervorgänge](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md).  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Durchführen von Massenkopiervorgängen</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="BatchSize">
      <MemberSignature Language="C#" Value="public int BatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BatchSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Property BatchSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BatchSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BatchSize : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.BatchSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Anzahl der Zeilen in jedem Batch. Am Ende jedes Batches werden die Zeilen im Batch an den Server gesendet.</summary>
        <value>Der ganzzahlige Wert der <see cref="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" />-Eigenschaft oder 0 (null), wenn kein Wert festgelegt wurde.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Batch ist abgeschlossen, wenn <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> Zeilen verarbeitet wurden, oder es sind keine weiteren Zeilen zum Senden an die Zieldatenquelle.  
  
 Null (Standard) gibt an, dass jedes <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> Vorgang ist einem einzelnen Batch.  
  
 Wenn die <xref:System.Data.SqlClient.SqlBulkCopy> Instanz deklariert wurde, ohne die <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> Option aktiviert ist, werden die Zeilen an den Server gesendet <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> Zeilen auf eine Zeit, jedoch keine transaktionsbezogene Aktion wird ausgeführt. Wenn <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> gültig ist, wird jeder Batch Zeilen als separate Transaktion eingefügt wird.  
  
 Die <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> Eigenschaft kann zu einem beliebigen Zeitpunkt festgelegt werden. Wenn bereits ein Massenkopiervorgang ausgeführt wird, wird der aktuelle Batch entsprechend der vorherigen Batchgröße angepasst. Nachfolgende Batches für die Verwendung der neuen Größe. Wenn die <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> ist anfangs 0 (null) und bei Änderungen eine <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> Vorgang wird bereits ausgeführt, Vorgang die Daten als ein einziger Batch geladen. Alle nachfolgenden <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> Vorgänge auf dem gleichen <xref:System.Data.SqlClient.SqlBulkCopy> Instanz verwenden Sie die neue <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>.  
  
   
  
## Examples  
 Die folgende Konsolenanwendung wird veranschaulicht, wie zum Massenladen von Daten in Gruppen von 50 Zeilen. Ein Beispiel zur Veranschaulichung wie <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> mit einer Transaktion finden Sie unter [Transaktionen und Massenkopiervorgänge](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md).  
  
 In diesem Beispiel werden zunächst die Quelldaten aus einer SQL Server-Tabelle zu gelesen eine <xref:System.Data.SqlClient.SqlDataReader> Instanz. Die Quelldaten muss nicht auf SQL Server befinden; können Sie alle Datenquellen, die zu lesende ein <xref:System.Data.IDataReader> oder Laden in ein <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  In diesem Beispiel wird nicht ausgeführt werden, es sei denn, Sie die Arbeitstabellen erstellt haben, wie in beschrieben [Einrichtung der Massenkopierbeispiele](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Dieser Code wird bereitgestellt, um zu veranschaulichen die Syntax für die Verwendung von **"SqlBulkCopy"** nur. Wenn die Quelle und Ziel-Tabellen in der gleichen SQL Server-Instanz ist, ist es einfacher und schneller mit einer Transact-SQL `INSERT … SELECT` Anweisung, um die Daten zu kopieren.  
  
 [!code-csharp[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Massenkopiervorgänge in SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="BulkCopyTimeout">
      <MemberSignature Language="C#" Value="public int BulkCopyTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BulkCopyTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property BulkCopyTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BulkCopyTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BulkCopyTimeout : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Anzahl der Sekunden zum Abschließen des Vorgangs, bevor ein Timeout auftritt.</summary>
        <value>Der ganzzahlige Wert der <see cref="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />-Eigenschaft. Der Standardwert ist 30 Sekunden. Der Wert 0 steht für eine unbegrenzte Wartezeit für das Massenkopieren.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der Vorgang einen Timeout beendet wird, wird die Transaktion wurde kein Commit ausgeführt, und alle kopierte Zeilen werden aus der Zieltabelle entfernt.  
  
   
  
## Examples  
 Die folgende Konsolenanwendung zeigt, wie so ändern Sie das Timeout auf 60 Sekunden beim Massenladen von Daten.  
  
 In diesem Beispiel werden zunächst die Quelldaten aus einer SQL Server-Tabelle zu gelesen eine <xref:System.Data.SqlClient.SqlDataReader> Instanz. Die Quelldaten muss nicht auf SQL Server befinden; können Sie alle Datenquellen, die zu lesende ein <xref:System.Data.IDataReader> oder Laden in ein <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  In diesem Beispiel wird nicht ausgeführt werden, es sei denn, Sie die Arbeitstabellen erstellt haben, wie in beschrieben [Einrichtung der Massenkopierbeispiele](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Dieser Code wird bereitgestellt, um zu veranschaulichen die Syntax für die Verwendung von **"SqlBulkCopy"** nur. Wenn die Quelle und Ziel-Tabellen in der gleichen SQL Server-Instanz ist, es ist einfacher und schneller eine [!INCLUDE[tsql](~/includes/tsql-md.md)] `INSERT … SELECT` Anweisung, um die Daten zu kopieren.  
  
 [!code-csharp[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Durchführen von Massenkopiervorgängen</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="sqlBulkCopy.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schließt die <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Instanz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nach dem Aufrufen einer <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> auf die <xref:System.Data.SqlClient.SqlBulkCopy> Objekt ist, wird kein weiterer Vorgang ist erfolgreich. Aufrufe von der <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> Methode löst eine <xref:System.InvalidOperationException>.  
  
 Aufrufen der <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> Methode aus der <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> Ereignis bewirkt, dass ein <xref:System.InvalidOperationException> ausgelöst wird.  
  
 Beachten Sie, dass geöffnete <xref:System.Data.SqlClient.SqlBulkCopy> Instanzen implizit geschlossen werden, am Ende einer `using` Block.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die gleiche <xref:System.Data.SqlClient.SqlBulkCopy> Instanz, die in zwei Zieltabellen Bestellungen und zugehörigen Informationen hinzugefügt. Da die **AdventureWorks** Verkaufsauftrag Tabellen groß sind, im Beispiel liest nur Bestellungen von einer bestimmten Kontonummer und per Massenvorgang kopiert die Bestellungen und Details in die Zieltabellen. Die <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> Methode wird erst nach Beendigung beide Vorgänge für das Massenkopieren verwendet.  
  
> [!IMPORTANT]
>  In diesem Beispiel wird nicht ausgeführt werden, es sei denn, Sie die Arbeitstabellen erstellt haben, wie in beschrieben [Einrichtung der Massenkopierbeispiele](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Dieser Code wird bereitgestellt, um zu veranschaulichen die Syntax für die Verwendung von **"SqlBulkCopy"** nur. Wenn die Quelle und Ziel-Tabellen in der gleichen SQL Server-Instanz ist, ist es einfacher und schneller mit einer Transact-SQL `INSERT … SELECT` Anweisung, um die Daten zu kopieren.  
  
 [!code-csharp[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Durchführen von Massenkopiervorgängen</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnMappings">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.ColumnMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ColumnMappings As SqlBulkCopyColumnMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlBulkCopyColumnMappingCollection ^ ColumnMappings { System::Data::SqlClient::SqlBulkCopyColumnMappingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ColumnMappings : System.Data.SqlClient.SqlBulkCopyColumnMappingCollection" Usage="System.Data.SqlClient.SqlBulkCopy.ColumnMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlBulkCopyColumnMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt eine Auflistung von <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />-Elementen zurück. Spaltenzuordnungen definieren die Beziehungen zwischen Spalten in der Datenquelle und den Spalten im Ziel.</summary>
        <value>Eine Auflistung von Spaltenzuordnungen. Standardmäßig ist es eine leere Auflistung.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die Datenquelle und die Zieltabelle die gleiche Anzahl von Spalten und die Ordnungsposition der einzelnen Quellspalten an, in der Datenquelle, der die Position des der entsprechenden Zielspalte übereinstimmt der <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> Auflistung ist nicht erforderlich. Aber wenn die Spalte abweicht oder die Ordnungspositionen nicht überein stimmen, müssen Sie verwenden <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> um sicherzustellen, dass die Daten in den richtigen Spalten kopiert werden.  
  
 Während der Ausführung eines Massenkopiervorgangs diese Auflistung kann zugegriffen werden, aber es kann nicht geändert werden. Jeder Versuch, ihn zu ändern löst eine <xref:System.InvalidOperationException>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Durchführen von Massenkopiervorgängen</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DestinationTableName">
      <MemberSignature Language="C#" Value="public string DestinationTableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DestinationTableName" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
      <MemberSignature Language="VB.NET" Value="Public Property DestinationTableName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DestinationTableName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DestinationTableName : string with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Der Name der Zieltabelle auf dem Server.</summary>
        <value>Der Zeichenfolgenwert der <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft bzw. NULL, wenn kein Wert angegeben wurde.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> nicht festgelegt wurde beim <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> aufgerufen wird, eine <xref:System.ArgumentNullException> ausgelöst.  
  
 Wenn <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> wird geändert, während eine <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> Vorgang ausgeführt wird, wird die Änderung wirkt sich nicht auf den aktuellen Vorgang. Die neue <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> Wert wird verwendet, das nächste Mal eine <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> Methode wird aufgerufen.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> ist ein dreiteiliger Name (`<database>.<owningschema>.<name>`). Falls gewünscht, können Sie den Tabellennamen mit seiner Datenbank und dem besitzenden Schema qualifizieren. Jedoch wenn Sie den Namen der Tabelle einen Unterstrich ("_") oder ein anderes Sonderzeichen verwendet, Sie müssen mit Escapezeichen versehen die Namen, die in Klammern wie in (`[<database>.<owningschema>.<name_01>]`). Weitere Informationen finden Sie unter [Datenbankbezeichner](/sql/relational-databases/databases/database-identifiers).  
  
 Können Sie das Massenkopieren von Daten in eine temporäre Tabelle mit einem Wert wie z. B. `tempdb..#table` oder `tempdb.<owner>.#table` für die <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> Eigenschaft.  
  
   
  
## Examples  
 Die folgenden Konsolenanwendung wird veranschaulicht, wie Sie das Massenladen von Daten über eine Verbindung, die bereits geöffnet ist. Die Zieltabelle ist eine Tabelle in der **AdventureWorks** Datenbank.  
  
 In diesem Beispiel wird zuerst die Verbindung zum Lesen von Daten aus einer SQL Server-Tabelle, verwendet eine <xref:System.Data.SqlClient.SqlDataReader> Instanz. Die Quelldaten muss nicht auf SQL Server befinden; können Sie alle Datenquellen, die zu lesende ein <xref:System.Data.IDataReader> oder Laden in ein <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  In diesem Beispiel wird nicht ausgeführt werden, es sei denn, Sie die Arbeitstabellen erstellt haben, wie in beschrieben [Einrichtung der Massenkopierbeispiele](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Dieser Code wird bereitgestellt, um zu veranschaulichen die Syntax für die Verwendung von **"SqlBulkCopy"** nur. Wenn die Quelle und Ziel-Tabellen in der gleichen SQL Server-Instanz ist, ist es einfacher und schneller mit einer Transact-SQL `INSERT … SELECT` Anweisung, um die Daten zu kopieren.  
  
 [!code-csharp[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Durchführen von Massenkopiervorgängen</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="EnableStreaming">
      <MemberSignature Language="C#" Value="public bool EnableStreaming { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableStreaming" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.EnableStreaming" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableStreaming As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableStreaming { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableStreaming : bool with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.EnableStreaming" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Aktiviert oder deaktiviert <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> ein Objekt in den Stream von Daten aus einem <see cref="T:System.Data.IDataReader" />-Objekt</summary>
        <value><see langword="true" />, wenn ein <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekt Daten aus einem <see cref="T:System.Data.IDataReader" />-Objekt streamen kann; andernfalls "False". Die Standardeinstellung ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei der <xref:System.Data.SqlClient.SqlBulkCopy.EnableStreaming%2A> ist `true`, <xref:System.Data.SqlClient.SqlBulkCopy> liest aus einer <xref:System.Data.IDataReader> -Objekt unter Verwendung <xref:System.Data.CommandBehavior.SequentialAccess>, Optimieren der arbeitsspeichernutzung mithilfe der <xref:System.Data.IDataReader> streaming-Funktionen. Wenn er auf "False" festgelegt ist die <xref:System.Data.SqlClient.SqlBulkCopy> Klasse lädt alle Daten zurückgegeben werden, indem die <xref:System.Data.IDataReader> Objekt in den Speicher vor dem Senden an SQL Server oder SQL Azure.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyAfter">
      <MemberSignature Language="C#" Value="public int NotifyAfter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NotifyAfter" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyAfter As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NotifyAfter { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyAfter : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Definiert die Anzahl der Zeilen, die verarbeitet werden müssen, bevor ein Benachrichtigungsereignis generiert wird.</summary>
        <value>Der Ganzzahlwert der <see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />-Eigenschaft oder 0 (null), wenn die Eigenschaft nicht festgelegt wurde.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ist für Komponenten der Benutzeroberfläche konzipiert, die den Fortschritt eines Massenkopiervorgangs zu veranschaulichen. Gibt die Anzahl der Zeilen, die verarbeitet werden, bevor ein Benachrichtigungsereignis generiert. Die <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> Eigenschaft kann jederzeit festgelegt werden, auch wenn ein Massenkopiervorgang ausgeführt wird. Während eines Massenkopiervorgangs vorgenommenen Änderungen werden wirksam, nach der nächsten Benachrichtigung. Die neue Einstellung gilt für alle nachfolgenden Vorgänge in der gleichen Instanz.  
  
 Wenn <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> ist, legen Sie auf eine Zahl kleiner als 0 (null), wird eine <xref:System.ArgumentOutOfRangeException> ausgelöst.  
  
   
  
## Examples  
 Die folgenden Konsolenanwendung wird veranschaulicht, wie Sie das Massenladen von Daten über eine Verbindung, die bereits geöffnet ist. Die <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> Eigenschaft festgelegt ist, damit der Ereignishandler aufgerufen wird, nachdem alle 50 Zeilen in die Tabelle kopiert.  
  
 In diesem Beispiel wird zuerst die Verbindung zum Lesen von Daten aus einer SQL Server-Tabelle, verwendet eine <xref:System.Data.SqlClient.SqlDataReader> Instanz. Anschließend wird eine zweite Verbindung geöffnet, um die Daten das Massenkopieren. Beachten Sie, dass die Daten nicht unbedingt auf SQL Server befinden. können Sie alle Datenquellen, die zu lesende ein <xref:System.Data.IDataReader> oder Laden in ein <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  In diesem Beispiel wird nicht ausgeführt werden, es sei denn, Sie die Arbeitstabellen erstellt haben, wie in beschrieben [Einrichtung der Massenkopierbeispiele](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Dieser Code wird bereitgestellt, um zu veranschaulichen die Syntax für die Verwendung von **"SqlBulkCopy"** nur. Wenn die Quelle und Ziel-Tabellen in der gleichen SQL Server-Instanz ist, ist es einfacher und schneller mit einer Transact-SQL `INSERT … SELECT` Anweisung, um die Daten zu kopieren.  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Durchführen von Massenkopiervorgängen</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="SqlRowsCopied">
      <MemberSignature Language="C#" Value="public event System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied" />
      <MemberSignature Language="DocId" Value="E:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SqlRowsCopied As SqlRowsCopiedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::SqlClient::SqlRowsCopiedEventHandler ^ SqlRowsCopied;" />
      <MemberSignature Language="F#" Value="member this.SqlRowsCopied : System.Data.SqlClient.SqlRowsCopiedEventHandler " Usage="member this.SqlRowsCopied : System.Data.SqlClient.SqlRowsCopiedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlRowsCopiedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt jedesmal auf, wenn die in der <see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />-Eigenschaft angegebene Zeilenanzahl verarbeitet wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beachten Sie, dass die Einstellungen des <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> und <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> sind voneinander unabhängig. Bestätigung für einen <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> Ereignisses bedeutet nicht, dass alle Zeilen an den Server gesendet oder ein Commit ausgeführt wurde.  
  
 Sie können keine SqlBulkCopy.Close aufrufen (<xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>) oder SqlConnection.Close (<xref:System.Data.SqlClient.SqlConnection.Close%2A>) von diesem Ereignis. Dadurch wird ein <xref:System.InvalidOperationException> ausgelöst wird, und die <xref:System.Data.SqlClient.SqlBulkCopy> Objektzustand ändert sich nicht. Wenn der Benutzer zum Abbrechen des Vorgangs aus dem Ereignis möchte, die <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> Eigenschaft der <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs> kann verwendet werden. (Finden Sie unter [Transaktionen und Massenkopiervorgänge](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md) für Beispiele, in denen die <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> Eigenschaft.)  
  
 Keine Aktion, z. B. Transaktionsaktivität, wird die Verbindung während der Ausführung der Massenkopiervorgang unterstützt, und es wird empfohlen, dass Sie nicht die gleiche Verbindung verwendet wird, während der verwenden die <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> Ereignis. Allerdings können Sie eine andere Verbindung öffnen.  
  
   
  
## Examples  
 Die folgenden Konsolenanwendung wird veranschaulicht, wie Sie das Massenladen von Daten über eine Verbindung, die bereits geöffnet ist. Die <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> Eigenschaft festgelegt ist, damit der Ereignishandler aufgerufen wird, nachdem alle 50 Zeilen in die Tabelle kopiert.  
  
 In diesem Beispiel wird zuerst die Verbindung zum Lesen von Daten aus einer SQL Server-Tabelle, verwendet eine <xref:System.Data.SqlClient.SqlDataReader> Instanz. Beachten Sie, dass die Daten nicht unbedingt auf SQL Server befinden. können Sie alle Datenquellen, die zu lesende ein <xref:System.Data.IDataReader> oder Laden in ein <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  In diesem Beispiel wird nicht ausgeführt werden, es sei denn, Sie die Arbeitstabellen erstellt haben, wie in beschrieben [Einrichtung der Massenkopierbeispiele](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Dieser Code wird bereitgestellt, um zu veranschaulichen die Syntax für die Verwendung von **"SqlBulkCopy"** nur. Wenn die Quelle und Ziel-Tabellen in der gleichen SQL Server-Instanz ist, ist es einfacher und schneller mit einer Transact-SQL `INSERT … SELECT` Anweisung, um die Daten zu kopieren.  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Durchführen von Massenkopiervorgängen</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt alle von der aktuellen Instanz der <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Klasse verwendeten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie `Dispose` auf, wenn Sie <xref:System.Data.SqlClient.SqlBulkCopy> nicht mehr benötigen. Die `Dispose`-Methode bewirkt, dass <xref:System.Data.SqlClient.SqlBulkCopy> nicht mehr verwendet werden kann. Nach dem Aufruf `Dispose`, Sie müssen alle Verweise auf Freigeben der <xref:System.Data.SqlClient.SqlBulkCopy> , damit der Garbage Collector den Arbeitsspeicher freigeben kann, die die <xref:System.Data.SqlClient.SqlBulkCopy> belegt wurde.  
  
 Weitere Informationen finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md) und [Implementieren einer Dispose-Methode](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Rufen Sie immer `Dispose` auf, bevor Sie den letzten Verweis auf das <xref:System.Data.SqlClient.SqlBulkCopy> freigeben. Andernfalls bleiben die verwendeten Ressourcen reserviert, bis die Garbage Collection die <xref:System.Data.SqlClient.SqlBulkCopy>-Methode des `Finalize`-Objekts aufruft.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServer">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Kopiert alle Zeilen aus einer Datenquelle in eine Zieltabelle, die von der <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts angegeben wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn bei mehreren aktiven Resultsets (MARS) deaktiviert ist, <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> stellt die Verbindung beschäftigt. Wenn MARS aktiviert ist, können Sie Aufrufe an interleave <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> mit anderen Befehlen in derselben Verbindung.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Durchführen von Massenkopiervorgängen</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (reader As DbDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.Common.DbDataReader -&gt; unit" Usage="sqlBulkCopy.WriteToServer reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">Ein <see cref="T:System.Data.Common.DbDataReader" />, deren Zeilen in die Zieltabelle kopiert werden.</param>
        <summary>Kopiert alle Zeilen aus dem bereitgestellten <see cref="T:System.Data.Common.DbDataReader" />-Array in eine Zieltabelle, die von der <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts angegeben wird.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (rows As DataRow())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataRow[] -&gt; unit" Usage="sqlBulkCopy.WriteToServer rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="rows">Ein Array von <see cref="T:System.Data.DataRow" />-Objekten, die in die Zieltabelle kopiert werden.</param>
        <summary>Kopiert alle Zeilen aus dem bereitgestellten <see cref="T:System.Data.DataRow" />-Array in eine Zieltabelle, die von der <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts angegeben wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Während des Massenkopiervorgangs ausgeführt wird, wird das zugeordnete Ziel ist <xref:System.Data.SqlClient.SqlConnection> ist ausgelastet zu verteilen und keine anderen Vorgänge für die Verbindung ausgeführt werden können.  
  
 Die <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> -Auflistung ordnet die <xref:System.Data.DataRow> Spalten in die Zieltabelle der Datenbank.  
  
   
  
## Examples  
 Die folgende Konsolenanwendung zeigt, wie zum Massenladen von Daten aus einer <xref:System.Data.DataRow> Array. Die Zieltabelle ist eine Tabelle in der **AdventureWorks** Datenbank.  
  
 In diesem Beispiel eine <xref:System.Data.DataTable> zur Laufzeit erstellt wird. Eine einzelne Zeile ausgewählt ist, aus der <xref:System.Data.DataTable> in die Zieltabelle kopiert.  
  
> [!IMPORTANT]
>  In diesem Beispiel wird nicht ausgeführt werden, es sei denn, Sie die Arbeitstabellen erstellt haben, wie in beschrieben [Einrichtung der Massenkopierbeispiele](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Dieser Code wird bereitgestellt, um zu veranschaulichen die Syntax für die Verwendung von **"SqlBulkCopy"** nur. Wenn die Quelle und Ziel-Tabellen in der gleichen SQL Server-Instanz ist, ist es einfacher und schneller mit einer Transact-SQL `INSERT … SELECT` Anweisung, um die Daten zu kopieren.  
  
 [!code-csharp[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Durchführen von Massenkopiervorgängen</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (table As DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataTable -&gt; unit" Usage="sqlBulkCopy.WriteToServer table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="table">Ein <see cref="T:System.Data.DataTable" />, deren Zeilen in die Zieltabelle kopiert werden.</param>
        <summary>Kopiert alle Zeilen aus der bereitgestellten <see cref="T:System.Data.DataTable" /> in eine Zieltabelle, die von der <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts angegeben wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alle Zeilen in der <xref:System.Data.DataTable> kopiert werden, in die Zieltabelle mit Ausnahme derjenigen, die gelöscht wurden.  
  
 Während des Massenkopiervorgangs ausgeführt wird, wird das zugeordnete Ziel ist <xref:System.Data.SqlClient.SqlConnection> ist ausgelastet zu verteilen und keine anderen Vorgänge für die Verbindung ausgeführt werden können.  
  
 Die <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> -Auflistung ordnet die <xref:System.Data.DataTable> Spalten in die Zieltabelle der Datenbank.  
  
   
  
## Examples  
 Die folgende Konsolenanwendung zeigt, wie zum Massenladen von Daten aus einer <xref:System.Data.DataTable>. Die Zieltabelle ist eine Tabelle in der **AdventureWorks** Datenbank.  
  
 In diesem Beispiel eine <xref:System.Data.DataTable> wird zur Laufzeit erstellt und ist die Quelle des der `SqlBulkCopy` Vorgang.  
  
> [!IMPORTANT]
>  In diesem Beispiel wird nicht ausgeführt werden, es sei denn, Sie die Arbeitstabellen erstellt haben, wie in beschrieben [Einrichtung der Massenkopierbeispiele](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Dieser Code wird bereitgestellt, um zu veranschaulichen die Syntax für die Verwendung von **"SqlBulkCopy"** nur. Wenn die Quelle und Ziel-Tabellen in der gleichen SQL Server-Instanz ist, ist es einfacher und schneller mit einer Transact-SQL `INSERT … SELECT` Anweisung, um die Daten zu kopieren.  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Durchführen von Massenkopiervorgängen</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (reader As IDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::IDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.IDataReader -&gt; unit" Usage="sqlBulkCopy.WriteToServer reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">Ein <see cref="T:System.Data.IDataReader" />, deren Zeilen in die Zieltabelle kopiert werden.</param>
        <summary>Kopiert alle Zeilen aus der bereitgestellten <see cref="T:System.Data.IDataReader" /> in eine Zieltabelle, die von der <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts angegeben wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Kopiervorgang beginnt bei der nächsten Zeile des Readers zur Verfügung. In den meisten Fällen, der Reader gerade von zurückgegeben wurde, <xref:System.Data.IDbCommand.ExecuteReader%2A> oder einem ähnlichen Aufruf, sodass die nächste verfügbare Zeile die erste Zeile ist. Rufen Sie zum Verarbeiten mehrerer Ergebnisse <xref:System.Data.IDataReader.NextResult%2A> auf der Datenleser und rufen <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> erneut aus.  
  
 Beachten Sie, dass die Verwendung <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> ändert den Zustand des Readers. Der Methodenaufruf <xref:System.Data.IDataReader.Read%2A> bis wird false zurückgegeben, der Vorgang abgebrochen wird oder ein Fehler auftritt. Dies bedeutet, dass der Datenleser in einem anderen Status, wahrscheinlich am Ende des Resultsets festgelegt, wenn die <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> Vorgang abgeschlossen ist.  
  
 Während des Massenkopiervorgangs ausgeführt wird, wird das zugeordnete Ziel ist <xref:System.Data.SqlClient.SqlConnection> ist ausgelastet zu verteilen und keine anderen Vorgänge für die Verbindung ausgeführt werden können.  
  
 Die <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> Auflistung ordnet die Reader-Spalten in die Zieltabelle der Datenbank.  
  
   
  
## Examples  
 Die folgende Konsolenanwendung zeigt, wie zum Massenladen von Daten aus einer <xref:System.Data.SqlClient.SqlDataReader>. Die Zieltabelle ist eine Tabelle in der **AdventureWorks** Datenbank.  
  
> [!IMPORTANT]
>  In diesem Beispiel wird nicht ausgeführt werden, es sei denn, Sie die Arbeitstabellen erstellt haben, wie in beschrieben [Einrichtung der Massenkopierbeispiele](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Dieser Code wird bereitgestellt, um zu veranschaulichen die Syntax für die Verwendung von **"SqlBulkCopy"** nur. Wenn die Quelle und Ziel-Tabellen in der gleichen SQL Server-Instanz ist, ist es einfacher und schneller mit einer Transact-SQL `INSERT … SELECT` Anweisung, um die Daten zu kopieren.  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Durchführen von Massenkopiervorgängen</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (table As DataTable, rowState As DataRowState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::DataTable ^ table, System::Data::DataRowState rowState);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataTable * System.Data.DataRowState -&gt; unit" Usage="sqlBulkCopy.WriteToServer (table, rowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="table">Ein <see cref="T:System.Data.DataTable" />, deren Zeilen in die Zieltabelle kopiert werden.</param>
        <param name="rowState">Ein Wert aus der <see cref="T:System.Data.DataRowState" />-Enumeration. Es werden nur die Zeilen mit dem entsprechenden Zeilenzustand ins Ziel kopiert.</param>
        <summary>Kopiert nur die Zeilen mit dem angegebenen Zeilenzustand aus der bereitgestellten <see cref="T:System.Data.DataTable" /> in eine Zieltabelle, die von der <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts angegeben wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nur Zeilen in der <xref:System.Data.DataTable> , die sich im Zustand angegeben, der `rowState` Argument wurden nicht gelöscht, die in die Zieltabelle kopiert werden.  
  
> [!NOTE]
>  Wenn <xref:System.Data.DataRowState.Deleted> angegeben ist, alle <xref:System.Data.DataRowState.Unchanged>, <xref:System.Data.DataRowState.Added>, und <xref:System.Data.DataRowState.Modified> Zeilen werden auch an den Server kopiert werden. Es wird keine Ausnahme ausgelöst werden.  
  
 Während des Massenkopiervorgangs ausgeführt wird, wird das zugeordnete Ziel ist <xref:System.Data.SqlClient.SqlConnection> ist ausgelastet zu verteilen und keine anderen Vorgänge für die Verbindung ausgeführt werden können.  
  
 Die <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> -Auflistung ordnet die <xref:System.Data.DataTable> Spalten in die Zieltabelle der Datenbank.  
  
   
  
## Examples  
 Der folgende Konsolenstrukturelementen-Anwendung veranschaulicht, wie von Laden nur die Zeilen in einer <xref:System.Data.DataTable> , die einen angegebenen Zustand entsprechen. In diesem Fall werden nur unveränderte Zeilen hinzugefügt. Die Zieltabelle ist eine Tabelle in der **AdventureWorks** Datenbank.  
  
 In diesem Beispiel eine <xref:System.Data.DataTable> erstellt zur Laufzeit und drei Zeilen hinzugefügt werden. Bevor Sie die <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> Methode ausgeführt wird, wird eine der Zeilen bearbeitet wird. Die <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> Methode wird aufgerufen, mit einem `DataRowState.Unchanged` `rowState` -Argument, sodass nur zwei nicht geänderten Zeilen werden in die Zieltabelle kopiert.  
  
> [!IMPORTANT]
>  In diesem Beispiel wird nicht ausgeführt werden, es sei denn, Sie die Arbeitstabellen erstellt haben, wie in beschrieben [Einrichtung der Massenkopierbeispiele](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Dieser Code wird bereitgestellt, um zu veranschaulichen die Syntax für die Verwendung von **"SqlBulkCopy"** nur. Wenn die Quelle und Ziel-Tabellen in der gleichen SQL Server-Instanz ist, ist es einfacher und schneller mit einer Transact-SQL `INSERT … SELECT` Anweisung, um die Daten zu kopieren.  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataRowState" />
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Durchführen von Massenkopiervorgängen</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServerAsync">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Eine asynchrone Version von <see cref="Overload:System.Data.SqlClient.SqlBulkCopy.WriteToServer" />, die Zeilen aus einer Datenquelle in eine Zieltabelle kopiert, die von der <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts angegeben wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn bei mehreren aktiven Resultsets (MARS) deaktiviert ist, <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> stellt die Verbindung beschäftigt. Wenn MARS aktiviert ist, können Sie Aufrufe an interleave <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> mit anderen Befehlen in derselben Verbindung.  
  
 Die Anzahl der Zeilen, die zurückgesetzt werden, wenn einer ein Fehler auftritt, hängt von mehrere Dinge:  
  
-   Wenn <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> angegeben ist.  
  
-   Wenn Sie eine eigene Transaktion sein.  
  
-   Der Wert von <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>.  
  
 Wenn beim Senden von Daten auf dem Server, den aktuellen Batch ein Fehler vorliegt (nach den Angaben von <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>) wird ein Rollback. Wenn <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> nicht angegeben ist und Sie haben Ihre eigenen Transaktion, die gesamte Transaktion wird ein Rollback (enthält auch alle vorherigen Batches).  
  
 Verwendung <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> wissen, wie viele Zeilen auf den Server kopiert wurden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As DbDataReader) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.Common.DbDataReader -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">Ein <see cref="T:System.Data.Common.DbDataReader" />, deren Zeilen in die Zieltabelle kopiert werden.</param>
        <summary>Eine asynchrone Version von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />, die alle Zeilen aus dem bereitgestellten <see cref="T:System.Data.Common.DbDataReader" />-Array in eine Zieltabelle kopiert, die von der <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts angegeben wird.</summary>
        <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (rows As DataRow()) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataRow[] -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="rows">Ein Array von <see cref="T:System.Data.DataRow" />-Objekten, die in die Zieltabelle kopiert werden.</param>
        <summary>Eine asynchrone Version von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />, die alle Zeilen aus dem bereitgestellten <see cref="T:System.Data.DataRow" />-Array in eine Zieltabelle kopiert, die von der <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts angegeben wird.</summary>
        <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur asynchronen Programmierung in .NET Framework-Datenanbieter für SQL Server finden Sie unter [der asynchronen Programmierung](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> für die gleiche Instanz vor Aufgabenabschluss mehrfach aufrufen.  
  
Aufruf von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> und <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> für die gleiche Instanz vor Aufgabenabschluss.  
  
Die Verbindung geht verloren oder wird während <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />-Ausführung beendet.  
  
Bei Rückgabe im Taskobjekt wurde das <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekt während der Methodenausführung geschlossen.  
  
Bei Rückgabe im Taskobjekt ein Verbindungspool-Timeout.  
  
Bei Rückgabe im Taskobjekt wird das <see cref="T:System.Data.SqlClient.SqlConnection" />-Objekt vor der Methodenausführung geschlossen.  
  
 <see langword="Context Connection=true" /> ist in der Verbindungszeichenfolge angegeben.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Bei Rückgabe im Aufgabenobjekt jeder von SQL Server zurückgegebene Fehler, der beim Öffnen der Verbindung aufgetreten ist.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table">Ein <see cref="T:System.Data.DataTable" />, deren Zeilen in die Zieltabelle kopiert werden.</param>
        <summary>Eine asynchrone Version von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />, die alle Zeilen in das bereitgestellte <see cref="T:System.Data.DataTable" />-Array in eine Zieltabelle kopiert, die von der <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts angegeben wird.</summary>
        <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur asynchronen Programmierung in .NET Framework-Datenanbieter für SQL Server finden Sie unter [der asynchronen Programmierung](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> für die gleiche Instanz vor Aufgabenabschluss mehrfach aufrufen.  
  
Aufruf von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> und <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> für die gleiche Instanz vor Aufgabenabschluss.  
  
Die Verbindung geht verloren oder wird während <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />-Ausführung beendet.  
  
Bei Rückgabe im Taskobjekt wurde das <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekt während der Methodenausführung geschlossen.  
  
Bei Rückgabe im Taskobjekt ein Verbindungspool-Timeout.  
  
Bei Rückgabe im Taskobjekt wird das <see cref="T:System.Data.SqlClient.SqlConnection" />-Objekt vor der Methodenausführung geschlossen.  
  
 <see langword="Context Connection=true" /> ist in der Verbindungszeichenfolge angegeben.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Bei Rückgabe im Aufgabenobjekt jeder von SQL Server zurückgegebene Fehler, der beim Öffnen der Verbindung aufgetreten ist.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As IDataReader) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::IDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.IDataReader -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="reader">Ein <see cref="T:System.Data.IDataReader" />, deren Zeilen in die Zieltabelle kopiert werden.</param>
        <summary>Eine asynchrone Version von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />, die alle Zeilen in das bereitgestellte <see cref="T:System.Data.IDataReader" />-Array in eine Zieltabelle kopiert, die von der <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts angegeben wird.</summary>
        <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur asynchronen Programmierung in .NET Framework-Datenanbieter für SQL Server finden Sie unter [der asynchronen Programmierung](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> für die gleiche Instanz vor Aufgabenabschluss mehrfach aufrufen.  
  
Aufruf von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> und <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> für die gleiche Instanz vor Aufgabenabschluss.  
  
Die Verbindung geht verloren oder wird während <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />-Ausführung beendet.  
  
Bei Rückgabe im Taskobjekt wurde das <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekt während der Methodenausführung geschlossen.  
  
Bei Rückgabe im Taskobjekt ein Verbindungspool-Timeout.  
  
Bei Rückgabe im Taskobjekt wird das <see cref="T:System.Data.SqlClient.SqlConnection" />-Objekt vor der Methodenausführung geschlossen.  
  
Der <see cref="T:System.Data.IDataReader" /> wurde geschlossen, bevor die abgeschlossene <see cref="T:System.Threading.Tasks.Task" /> zurückgegeben wurde.  
  
Die zugeordnete Verbindung für den <see cref="T:System.Data.IDataReader" /> wurde geschlossen, bevor die abgeschlossene <see cref="T:System.Threading.Tasks.Task" /> zurückgegeben wurde.  
  
 <see langword="Context Connection=true" /> ist in der Verbindungszeichenfolge angegeben.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Bei Rückgabe im Aufgabenobjekt jeder von SQL Server zurückgegebene Fehler, der beim Öffnen der Verbindung aufgetreten ist.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::Common::DbDataReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.Common.DbDataReader * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (reader, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">Ein <see cref="T:System.Data.Common.DbDataReader" />, deren Zeilen in die Zieltabelle kopiert werden.</param>
        <param name="cancellationToken">Die Abbruchanweisung. Ein <see cref="P:System.Threading.CancellationToken.None" />-Wert in diesem Parameter macht diese Methode äquivalent zu <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" />.</param>
        <summary>Eine asynchrone Version von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />, die alle Zeilen aus dem bereitgestellten <see cref="T:System.Data.Common.DbDataReader" />-Array in eine Zieltabelle kopiert, die von der <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts angegeben wird.</summary>
        <returns>Gibt <see cref="T:System.Threading.Tasks.Task" /> zurück.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(cli::array &lt;System::Data::DataRow ^&gt; ^ rows, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataRow[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (rows, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="rows">Ein Array von <see cref="T:System.Data.DataRow" />-Objekten, die in die Zieltabelle kopiert werden.</param>
        <param name="cancellationToken">Die Abbruchanweisung. Ein <see cref="P:System.Threading.CancellationToken.None" />-Wert in diesem Parameter macht diese Methode äquivalent zu <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>Eine asynchrone Version von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />, die alle Zeilen aus dem bereitgestellten <see cref="T:System.Data.DataRow" />-Array in eine Zieltabelle kopiert, die von der <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts angegeben wird.  
  
Das Abbruchtoken kann verwendet werden, um anzufordern, dass der Vorgang abgebrochen wird, bevor das Timeout des Befehls abläuft.  Ausnahmen werden über das zurückgegebene Aufgabenobjekt gemeldet.</summary>
        <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur asynchronen Programmierung in .NET Framework-Datenanbieter für SQL Server finden Sie unter [der asynchronen Programmierung](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> für die gleiche Instanz vor Aufgabenabschluss mehrfach aufrufen.  
  
Aufruf von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> und <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> für die gleiche Instanz vor Aufgabenabschluss.  
  
Die Verbindung geht verloren oder wird während <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />-Ausführung beendet.  
  
Bei Rückgabe im Taskobjekt wurde das <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekt während der Methodenausführung geschlossen.  
  
Bei Rückgabe im Taskobjekt ein Verbindungspool-Timeout.  
  
Bei Rückgabe im Taskobjekt wird das <see cref="T:System.Data.SqlClient.SqlConnection" />-Objekt vor der Methodenausführung geschlossen.  
  
 <see langword="Context Connection=true" /> ist in der Verbindungszeichenfolge angegeben.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Bei Rückgabe im Aufgabenobjekt jeder von SQL Server zurückgegebene Fehler, der beim Öffnen der Verbindung aufgetreten ist.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable, rowState As DataRowState) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Data::DataRowState rowState);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Data.DataRowState -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, rowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table">Ein <see cref="T:System.Data.DataTable" />, deren Zeilen in die Zieltabelle kopiert werden.</param>
        <param name="rowState">Ein Wert aus der <see cref="T:System.Data.DataRowState" />-Enumeration. Es werden nur die Zeilen mit dem entsprechenden Zeilenzustand ins Ziel kopiert.</param>
        <summary>Die asynchrone Version von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />, die nur die Zeilen mit dem angegebenen Zeilenzustand aus der bereitgestellten <see cref="T:System.Data.DataTable" /> in eine Zieltabelle kopiert, die von der <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts angegeben wird.</summary>
        <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur asynchronen Programmierung in .NET Framework-Datenanbieter für SQL Server finden Sie unter [der asynchronen Programmierung](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> für die gleiche Instanz vor Aufgabenabschluss mehrfach aufrufen.  
  
Aufruf von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> und <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> für die gleiche Instanz vor Aufgabenabschluss.  
  
Die Verbindung geht verloren oder wird während <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />-Ausführung beendet.  
  
Bei Rückgabe im Taskobjekt wurde das <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekt während der Methodenausführung geschlossen.  
  
Bei Rückgabe im Taskobjekt ein Verbindungspool-Timeout.  
  
Bei Rückgabe im Taskobjekt wird das <see cref="T:System.Data.SqlClient.SqlConnection" />-Objekt vor der Methodenausführung geschlossen.  
  
 <see langword="Context Connection=true" /> ist in der Verbindungszeichenfolge angegeben.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Bei Rückgabe im Aufgabenobjekt jeder von SQL Server zurückgegebene Fehler, der beim Öffnen der Verbindung aufgetreten ist.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table">Ein <see cref="T:System.Data.DataTable" />, deren Zeilen in die Zieltabelle kopiert werden.</param>
        <param name="cancellationToken">Die Abbruchanweisung. Ein <see cref="P:System.Threading.CancellationToken.None" />-Wert in diesem Parameter macht diese Methode äquivalent zu <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>Eine asynchrone Version von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />, die alle Zeilen in das bereitgestellte <see cref="T:System.Data.DataTable" />-Array in eine Zieltabelle kopiert, die von der <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts angegeben wird.  
  
Das Abbruchtoken kann verwendet werden, um anzufordern, dass der Vorgang abgebrochen wird, bevor das Timeout des Befehls abläuft.  Ausnahmen werden über das zurückgegebene Aufgabenobjekt gemeldet.</summary>
        <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur asynchronen Programmierung in .NET Framework-Datenanbieter für SQL Server finden Sie unter [der asynchronen Programmierung](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> für die gleiche Instanz vor Aufgabenabschluss mehrfach aufrufen.  
  
Aufruf von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> und <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> für die gleiche Instanz vor Aufgabenabschluss.  
  
Die Verbindung geht verloren oder wird während <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />-Ausführung beendet.  
  
Bei Rückgabe im Taskobjekt wurde das <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekt während der Methodenausführung geschlossen.  
  
Bei Rückgabe im Taskobjekt ein Verbindungspool-Timeout.  
  
Bei Rückgabe im Taskobjekt wird das <see cref="T:System.Data.SqlClient.SqlConnection" />-Objekt vor der Methodenausführung geschlossen.  
  
 <see langword="Context Connection=true" /> ist in der Verbindungszeichenfolge angegeben.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Bei Rückgabe im Aufgabenobjekt jeder von SQL Server zurückgegebene Fehler, der beim Öffnen der Verbindung aufgetreten ist.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::IDataReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.IDataReader * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (reader, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="reader">Ein <see cref="T:System.Data.IDataReader" />, deren Zeilen in die Zieltabelle kopiert werden.</param>
        <param name="cancellationToken">Die Abbruchanweisung. Ein <see cref="P:System.Threading.CancellationToken.None" />-Wert in diesem Parameter macht diese Methode äquivalent zu <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>Eine asynchrone Version von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />, die alle Zeilen in das bereitgestellte <see cref="T:System.Data.IDataReader" />-Array in eine Zieltabelle kopiert, die von der <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts angegeben wird.  
  
Das Abbruchtoken kann verwendet werden, um anzufordern, dass der Vorgang abgebrochen wird, bevor das Timeout des Befehls abläuft.  Ausnahmen werden über das zurückgegebene Aufgabenobjekt gemeldet.</summary>
        <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur asynchronen Programmierung in .NET Framework-Datenanbieter für SQL Server finden Sie unter [der asynchronen Programmierung](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> für die gleiche Instanz vor Aufgabenabschluss mehrfach aufrufen.  
  
Aufruf von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> und <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> für die gleiche Instanz vor Aufgabenabschluss.  
  
Die Verbindung geht verloren oder wird während <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />-Ausführung beendet.  
  
Bei Rückgabe im Taskobjekt wurde das <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekt während der Methodenausführung geschlossen.  
  
Bei Rückgabe im Taskobjekt ein Verbindungspool-Timeout.  
  
Bei Rückgabe im Taskobjekt wird das <see cref="T:System.Data.SqlClient.SqlConnection" />-Objekt vor der Methodenausführung geschlossen.  
  
Der <see cref="T:System.Data.IDataReader" /> wurde geschlossen, bevor die abgeschlossene <see cref="T:System.Threading.Tasks.Task" /> zurückgegeben wurde.  
  
Die zugeordnete Verbindung für den <see cref="T:System.Data.IDataReader" /> wurde geschlossen, bevor die abgeschlossene <see cref="T:System.Threading.Tasks.Task" /> zurückgegeben wurde.  
  
 <see langword="Context Connection=true" /> ist in der Verbindungszeichenfolge angegeben.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Bei Rückgabe im Aufgabenobjekt jeder von SQL Server zurückgegebene Fehler, der beim Öffnen der Verbindung aufgetreten ist.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Data::DataRowState rowState, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Data.DataRowState * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, rowState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table">Ein <see cref="T:System.Data.DataTable" />, deren Zeilen in die Zieltabelle kopiert werden.</param>
        <param name="rowState">Ein Wert aus der <see cref="T:System.Data.DataRowState" />-Enumeration. Es werden nur die Zeilen mit dem entsprechenden Zeilenzustand ins Ziel kopiert.</param>
        <param name="cancellationToken">Die Abbruchanweisung. Ein <see cref="P:System.Threading.CancellationToken.None" />-Wert in diesem Parameter macht diese Methode äquivalent zu <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>Die asynchrone Version von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />, die nur die Zeilen mit dem angegebenen Zeilenzustand aus der bereitgestellten <see cref="T:System.Data.DataTable" /> in eine Zieltabelle kopiert, die von der <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />-Eigenschaft des <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekts angegeben wird.  
  
Das Abbruchtoken kann verwendet werden, um anzufordern, dass der Vorgang abgebrochen wird, bevor das Timeout des Befehls abläuft.  Ausnahmen werden über das zurückgegebene Aufgabenobjekt gemeldet.</summary>
        <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur asynchronen Programmierung in .NET Framework-Datenanbieter für SQL Server finden Sie unter [der asynchronen Programmierung](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> für die gleiche Instanz vor Aufgabenabschluss mehrfach aufrufen.  
  
Aufruf von <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> und <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> für die gleiche Instanz vor Aufgabenabschluss.  
  
Die Verbindung geht verloren oder wird während <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />-Ausführung beendet.  
  
Bei Rückgabe im Taskobjekt wurde das <see cref="T:System.Data.SqlClient.SqlBulkCopy" />-Objekt während der Methodenausführung geschlossen.  
  
Bei Rückgabe im Taskobjekt ein Verbindungspool-Timeout.  
  
Bei Rückgabe im Taskobjekt wird das <see cref="T:System.Data.SqlClient.SqlConnection" />-Objekt vor der Methodenausführung geschlossen.  
  
 <see langword="Context Connection=true" /> ist in der Verbindungszeichenfolge angegeben.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Bei Rückgabe im Aufgabenobjekt jeder von SQL Server zurückgegebene Fehler, der beim Öffnen der Verbindung aufgetreten ist.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="ChannelReader&lt;T&gt;" FullName="System.Threading.Channels.ChannelReader&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="04a41b4c1f20cd857daa43038b07e620886472b8" /><Meta Name="ms.sourcegitcommit" Value="11306e8bb61e44463a969897211724e18107ac96" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/12/2020" /><Meta Name="ms.locfileid" Value="88137609" /></Metadata><TypeSignature Language="C#" Value="public abstract class ChannelReader&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ChannelReader`1&lt;T&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Channels.ChannelReader`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ChannelReader(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class ChannelReader abstract" />
  <TypeSignature Language="F#" Value="type ChannelReader&lt;'T&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Channels</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="T"><span data-ttu-id="4cd4d-101">Gibt den Datentyp an, der vom Kanal gelesen werden kann.</span><span class="sxs-lookup"><span data-stu-id="4cd4d-101">Specifies the type of data that may be read from the channel.</span></span></typeparam>
    <summary><span data-ttu-id="4cd4d-102">Stellt eine Basisklasse zum Lesen aus einen Kanal bereit.</span><span class="sxs-lookup"><span data-stu-id="4cd4d-102">Provides a base class for reading from a channel.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ChannelReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Channels.ChannelReader`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ChannelReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Channels</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4cd4d-103">Initialisiert eine Instanz der <see cref="T:System.Threading.Channels.ChannelReader`1" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="4cd4d-103">Initializes an instance of the <see cref="T:System.Threading.Channels.ChannelReader`1" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanCount">
      <MemberSignature Language="C#" Value="public virtual bool CanCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Channels.ChannelReader`1.CanCount" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanCount As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanCount { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanCount : bool" Usage="System.Threading.Channels.ChannelReader&lt;'T&gt;.CanCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Channels</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4cd4d-104">Ruft einen Wert ab, der angibt, ob <see cref="P:System.Threading.Channels.ChannelReader`1.Count" /> für die Verwendung in dieser <see cref="T:System.Threading.Channels.ChannelReader`1" />-Instanz verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="4cd4d-104">Gets a value that indicates whether <see cref="P:System.Threading.Channels.ChannelReader`1.Count" /> is available for use on this <see cref="T:System.Threading.Channels.ChannelReader`1" /> instance.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Completion">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task Completion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Tasks.Task Completion" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Channels.ChannelReader`1.Completion" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Completion As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Threading::Tasks::Task ^ Completion { System::Threading::Tasks::Task ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Completion : System.Threading.Tasks.Task" Usage="System.Threading.Channels.ChannelReader&lt;'T&gt;.Completion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Channels</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4cd4d-105">Ruft eine <see cref="T:System.Threading.Tasks.Task" /> ab, die abgeschlossen wird, wenn keine weiteren Daten mehr aus dem Kanal gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="4cd4d-105">Gets a <see cref="T:System.Threading.Tasks.Task" /> that completes when no more data will ever be available to be read from this channel.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Channels.ChannelReader`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Threading.Channels.ChannelReader&lt;'T&gt;.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Channels</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4cd4d-106">Ruft die aktuelle Anzahl von Elementen ab, die von diesem Kanalreader verfügbar sind.</span><span class="sxs-lookup"><span data-stu-id="4cd4d-106">Gets the current number of items available from this channel reader.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAllAsync">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IAsyncEnumerable&lt;T&gt; ReadAllAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerable`1&lt;!T&gt; ReadAllAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Channels.ChannelReader`1.ReadAllAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadAllAsync (Optional cancellationToken As CancellationToken = Nothing) As IAsyncEnumerable(Of T)" />
      <MemberSignature Language="F#" Value="abstract member ReadAllAsync : System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'T&gt;&#xA;override this.ReadAllAsync : System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'T&gt;" Usage="channelReader.ReadAllAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Channels</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="0" FrameworkAlternate="dotnet-plat-ext-3.0;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="4cd4d-107">Das Abbruchtoken zum Abbrechen der Enumeration.</span><span class="sxs-lookup"><span data-stu-id="4cd4d-107">The cancellation token to use to cancel the enumeration.</span></span></param>
        <summary><span data-ttu-id="4cd4d-108">Es erstellt eine <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />, die das Lesen aller Daten aus dem Kanal ermöglicht.</span><span class="sxs-lookup"><span data-stu-id="4cd4d-108">Creates an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that enables reading all of the data from the channel.</span></span></summary>
        <returns><span data-ttu-id="4cd4d-109">Die erstellte asynchrone Enumerable.</span><span class="sxs-lookup"><span data-stu-id="4cd4d-109">The created async enumerable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
          
<span data-ttu-id="4cd4d-110">Jeder <xref:System.Collections.Generic.IAsyncEnumerator%601.MoveNextAsync> Rückruf, der zurückgibt, `true` liest das nächste Element aus dem Kanal.</span><span class="sxs-lookup"><span data-stu-id="4cd4d-110">Each <xref:System.Collections.Generic.IAsyncEnumerator%601.MoveNextAsync> call that returns `true` will read the next item out of the channel.</span></span>

<span data-ttu-id="4cd4d-111"><xref:System.Collections.Generic.IAsyncEnumerator%601.MoveNextAsync> wird zurück `false` gegeben, wenn keine weiteren Daten mehr zum Lesen verfügbar sind.</span><span class="sxs-lookup"><span data-stu-id="4cd4d-111"><xref:System.Collections.Generic.IAsyncEnumerator%601.MoveNextAsync> returns `false` once no more data is or will ever be available to read.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask&lt;T&gt; ReadAsync (System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;!T&gt; ReadAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Channels.ChannelReader`1.ReadAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadAsync (Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of T)" />
      <MemberSignature Language="F#" Value="abstract member ReadAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'T&gt;&#xA;override this.ReadAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'T&gt;" Usage="channelReader.ReadAsync cancellationToken" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask&lt;T&gt;? ReadAsync (System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Channels</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="4cd4d-112">Ein zum Beenden des Lesevorgangs verwendetes <see cref="T:System.Threading.CancellationToken" />.</span><span class="sxs-lookup"><span data-stu-id="4cd4d-112">A <see cref="T:System.Threading.CancellationToken" /> used to cancel the read operation.</span></span></param>
        <summary><span data-ttu-id="4cd4d-113">Liest asynchron ein Element aus dem Kanal.</span><span class="sxs-lookup"><span data-stu-id="4cd4d-113">Asynchronously reads an item from the channel.</span></span></summary>
        <returns><span data-ttu-id="4cd4d-114">Eine <see cref="T:System.Threading.Tasks.ValueTask`1" />, die den asynchronen Lesevorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="4cd4d-114">A <see cref="T:System.Threading.Tasks.ValueTask`1" /> that represents the asynchronous read operation.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryRead">
      <MemberSignature Language="C#" Value="public abstract bool TryRead (out T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryRead([out] !T&amp; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Channels.ChannelReader`1.TryRead(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function TryRead (ByRef item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool TryRead([Runtime::InteropServices::Out] T % item);" />
      <MemberSignature Language="F#" Value="abstract member TryRead : 'T -&gt; bool" Usage="channelReader.TryRead item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Channels</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="4cd4d-115">Das read-Element oder ein Standardwert, wenn kein Element gelesen werden konnte.</span><span class="sxs-lookup"><span data-stu-id="4cd4d-115">The read item, or a default value if no item could be read.</span></span></param>
        <summary><span data-ttu-id="4cd4d-116">Versucht, ein Element aus dem Kanal zu lesen.</span><span class="sxs-lookup"><span data-stu-id="4cd4d-116">Attempts to read an item from the channel.</span></span></summary>
        <returns><span data-ttu-id="4cd4d-117"><see langword="true" />, wenn ein Element gelesen wurde, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4cd4d-117"><see langword="true" /> if an item was read; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitToReadAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.ValueTask&lt;bool&gt; WaitToReadAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;bool&gt; WaitToReadAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Channels.ChannelReader`1.WaitToReadAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function WaitToReadAsync (Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member WaitToReadAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;bool&gt;" Usage="channelReader.WaitToReadAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Channels</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="4cd4d-118">Ein zum Beenden des Wartevorgangs verwendetes <see cref="T:System.Threading.CancellationToken" />.</span><span class="sxs-lookup"><span data-stu-id="4cd4d-118">A <see cref="T:System.Threading.CancellationToken" /> used to cancel the wait operation.</span></span></param>
        <summary><span data-ttu-id="4cd4d-119">Gibt eine <see cref="T:System.Threading.Tasks.ValueTask`1" /> zurück, die abgeschlossen wird, wenn Daten zum Lesen verfügbar sind.</span><span class="sxs-lookup"><span data-stu-id="4cd4d-119">Returns a <see cref="T:System.Threading.Tasks.ValueTask`1" /> that will complete when data is available to read.</span></span></summary>
        <returns><para><span data-ttu-id="4cd4d-120">Ein <see cref="T:System.Threading.Tasks.ValueTask`1" />, der mit einem Ergebnis <see langword="true" /> abgeschlossen wird, wenn Daten zum Lesen verfügbar sind, oder mit einem Ergebnis <see langword="false" />, wenn keine weiteren Daten mehr aufgrund des erfolgreichen Abschluss des Kanals gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="4cd4d-120">A <see cref="T:System.Threading.Tasks.ValueTask`1" /> that will complete with a <see langword="true" /> result when data is available to read or with a <see langword="false" /> result when no further data will ever be available to be read due to the channel completing successfully.</span></span></para>
          <para><span data-ttu-id="4cd4d-121">Wenn der Kanal mit einer Ausnahme abgeschlossen wird, wird der Task ebenfalls mit einer Ausnahme abgeschlossen.</span><span class="sxs-lookup"><span data-stu-id="4cd4d-121">If the channel completes with an exception, the task will also complete with an exception.</span></span></para></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

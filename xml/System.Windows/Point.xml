<Type Name="Point" FullName="System.Windows.Point">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0cbac05cfe4503bb8b98094f2887b52259283957" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="86994564" /></Metadata><TypeSignature Language="C#" Value="public struct Point : IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Point extends System.ValueType implements class System.IFormattable" FrameworkAlternate="netcore-3.0;netcore-3.1" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Point" />
  <TypeSignature Language="VB.NET" Value="Public Structure Point&#xA;Implements IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class Point : IFormattable" />
  <TypeSignature Language="F#" Value="type Point = struct&#xA;    interface IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit Point extends System.ValueType implements class System.IFormattable" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.ComponentModel.TypeConverter(typeof(System.Windows.PointConverter))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter(typeof(System.Windows.PointConverter))&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Windows.Markup.ValueSerializer(typeof(System.Windows.Converters.PointValueSerializer))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Windows.Markup.ValueSerializer(typeof(System.Windows.Converters.PointValueSerializer))&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Repräsentiert ein X-/Y-Koordinatenpaar in einem zweidimensionalen Raum.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In XAML kann das Trennzeichen zwischen dem <xref:System.Windows.Point.X%2A> -Wert und dem- <xref:System.Windows.Point.Y%2A> Wert von <xref:System.Windows.Point> entweder ein Komma oder ein Leerzeichen sein.  
  
 In einigen Kulturen kann das Komma Zeichen anstelle des Punkt Zeichens als Dezimaltrennzeichen verwendet werden. Die XAML-Verarbeitung für die invariante Kultur wird standardmäßig in den meisten XAML-Prozessor Implementierungen als "en-US" verwendet und erwartet das Dezimaltrennzeichen. Sie sollten das Komma Zeichen nicht als Dezimaltrennzeichen verwenden, wenn Sie ein <xref:System.Windows.Point> in XAML angeben, da dies mit der Konvertierung des Zeichen folgen Typs eines <xref:System.Windows.Point> -Attribut Werts in die <xref:System.Windows.Point.X%2A> -Komponente und die-Komponente in Konflikt steht <xref:System.Windows.Point.Y%2A> .  
  
<a name="xamlAttributeUsage_Duration"></a>   
## <a name="xaml-attribute-usage"></a>Verwendung von XAML-Attributen  
  
```  
<object property="x,y"/>  
-or-  
<object property="x y"/>  
```  
  
<a name="xamlValues_MinWidth"></a>   
## <a name="xaml-values"></a>XAML-Werte  
 *x*  
 Die x-Koordinate für diesen <xref:System.Windows.Point>.  
  
 *Teenie*  
 Die y-Koordinate für diesen <xref:System.Windows.Point>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie Sie überprüfen können, ob zwei- <xref:System.Windows.Point> Strukturen ungleich sind.  Außerdem wird veranschaulicht, wie einer Struktur Werte zugewiesen <xref:System.Windows.Point> werden, wenn die Struktur deklariert wird und nachdem die Struktur deklariert wurde.  
  
 [!code-csharp[PointExamples_snip#PointInequalityExample](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#pointinequalityexample)]
 [!code-vb[PointExamples_snip#PointInequalityExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PointExamples_snip/visualbasic/pointexample.vb#pointinequalityexample)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Point (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 x, float64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.#ctor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (x As Double, y As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Point(double x, double y);" />
      <MemberSignature Language="F#" Value="new System.Windows.Point : double * double -&gt; System.Windows.Point" Usage="new System.Windows.Point (x, y)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x">Die x-Koordinate der neuen <see cref="T:System.Windows.Point" />-Struktur.</param>
        <param name="y">Die y-Koordinate der neuen <see cref="T:System.Windows.Point" />-Struktur.</param>
        <summary>Erstellt eine neue <see cref="T:System.Windows.Point" />-Struktur, die die angegebenen Koordinaten enthält.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Windows.Point Add (System.Windows.Point point, System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Point Add(valuetype System.Windows.Point point, valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.Add(System.Windows.Point,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (point As Point, vector As Vector) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Point Add(System::Windows::Point point, System::Windows::Vector vector);" />
      <MemberSignature Language="F#" Value="static member Add : System.Windows.Point * System.Windows.Vector -&gt; System.Windows.Point" Usage="System.Windows.Point.Add (point, vector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="point">Die zu addierende <see cref="T:System.Windows.Point" />-Struktur.</param>
        <param name="vector">Die zu addierende <see cref="T:System.Windows.Vector" />-Struktur.</param>
        <summary>Addiert eine <see cref="T:System.Windows.Vector" />-Struktur und eine <see cref="T:System.Windows.Point" />-Struktur und gibt das Ergebnis als <see cref="T:System.Windows.Point" />-Struktur zurück.</summary>
        <returns>Gibt die Summe von <paramref name="point" /> und <paramref name="vector" />zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Hinzufügen einer <xref:System.Windows.Point> Struktur zu einer <xref:System.Windows.Point> Struktur ist unzulässig.  
  
   
  
## Examples  
 In diesem Beispiel wird ein einem hinzugefügt <xref:System.Windows.Point> <xref:System.Windows.Vector> und das Ergebnis als-Struktur zurückgegeben <xref:System.Windows.Vector> .  
  
 [!code-csharp[PointExamples_snip#AddPointAndVectorExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#addpointandvectorexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Point.op_Addition(System.Windows.Point,System.Windows.Vector)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Vergleicht zwei <see cref="T:System.Windows.Point" />-Strukturen auf Gleichheit.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="point.Equals o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">Der zu vergleichende <see cref="T:System.Object" />.</param>
        <summary>Bestimmt, ob das angegebene <see cref="T:System.Object" /> ein <see cref="T:System.Windows.Point" /> ist und ob es dieselben Koordinaten enthält wie dieser <see cref="T:System.Windows.Point" />.</summary>
        <returns><see langword="true" />, wenn <paramref name="o" /> ein <see cref="T:System.Windows.Point" /> ist dieselben Werte für <see cref="P:System.Windows.Point.X" /> und <see cref="P:System.Windows.Point.Y" /> enthält wie dieser <see cref="T:System.Windows.Point" />, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Point> Koordinaten werden mithilfe von- <xref:System.Double> Werten beschrieben. Da der Wert von bei der Ausführung die <xref:System.Double> Genauigkeit verlieren kann, kann es vorkommen, dass ein Vergleich zwischen zwei <xref:System.Windows.Point> Werten, die logisch gleich sind, fehlschlägt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie Sie überprüfen, ob zwei- <xref:System.Windows.Point> Strukturen gleich sind, indem Sie die nicht statische- <xref:System.Windows.Point.Equals%2A> Methode verwenden.  
  
 [!code-csharp[PointExamples_snip#NonStaticEqualsExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#nonstaticequalsexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Point.op_Equality(System.Windows.Point,System.Windows.Point)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Windows.Point value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Windows.Point value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.Equals(System.Windows.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As Point) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Windows::Point value);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Windows.Point -&gt; bool" Usage="point.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="value">Der Punkt, der mit dieser Instanz verglichen werden soll.</param>
        <summary>Vergleicht zwei <see cref="T:System.Windows.Point" />-Strukturen auf Gleichheit.</summary>
        <returns><see langword="true" />, wenn beide <see cref="T:System.Windows.Point" />-Strukturen dieselben Werte für <see cref="P:System.Windows.Point.X" /> und <see cref="P:System.Windows.Point.Y" /> enthalten, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Point> Koordinaten werden mithilfe von- <xref:System.Double> Werten ausgedrückt. Da der Wert einer bei der Ausführung von die <xref:System.Double> Genauigkeit verlieren kann, kann es vorkommen, dass ein Vergleich zwischen zwei <xref:System.Windows.Point> Werten, die logisch gleich sind, fehlschlägt.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Point.op_Equality(System.Windows.Point,System.Windows.Point)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (System.Windows.Point point1, System.Windows.Point point2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.Windows.Point point1, valuetype System.Windows.Point point2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.Equals(System.Windows.Point,System.Windows.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (point1 As Point, point2 As Point) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(System::Windows::Point point1, System::Windows::Point point2);" />
      <MemberSignature Language="F#" Value="static member Equals : System.Windows.Point * System.Windows.Point -&gt; bool" Usage="System.Windows.Point.Equals (point1, point2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point1" Type="System.Windows.Point" />
        <Parameter Name="point2" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point1">Der erste zu vergleichende Punkt.</param>
        <param name="point2">Der zweite zu vergleichende Punkt.</param>
        <summary>Vergleicht zwei <see cref="T:System.Windows.Point" />-Strukturen auf Gleichheit.</summary>
        <returns><see langword="true" />, wenn <paramref name="point1" /> und <paramref name="point2" /> dieselben Werte für <see cref="P:System.Windows.Point.X" /> und <see cref="P:System.Windows.Point.Y" /> aufweisen, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Punkt Koordinaten werden mithilfe von- <xref:System.Double> Werten beschrieben. Da der Wert von bei der Ausführung die <xref:System.Double> Genauigkeit verlieren kann, kann es vorkommen, dass ein Vergleich zwischen zwei <xref:System.Windows.Point> Werten, die logisch gleich sind, fehlschlägt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie mithilfe der statischen-Methode überprüft wird, ob zwei- <xref:System.Windows.Point> Strukturen gleich sind <xref:System.Windows.Point.Equals%2A> .  
  
 [!code-csharp[PointExamples_snip#StaticEqualsExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#staticequalsexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Point.op_Equality(System.Windows.Point,System.Windows.Point)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="point.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt den Hashcode für diesen <see cref="T:System.Windows.Point" /> zurück.</summary>
        <returns>Der Hashcode für diese <see cref="T:System.Windows.Point" />-Struktur.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie Sie den Hashcode einer- <xref:System.Windows.Point> Struktur erhalten.  
  
 [!code-csharp[PointExamples_snip#GetHashCodeExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#gethashcodeexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Point Multiply (System.Windows.Point point, System.Windows.Media.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Point Multiply(valuetype System.Windows.Point point, valuetype System.Windows.Media.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.Multiply(System.Windows.Point,System.Windows.Media.Matrix)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (point As Point, matrix As Matrix) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Point Multiply(System::Windows::Point point, System::Windows::Media::Matrix matrix);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Windows.Point * System.Windows.Media.Matrix -&gt; System.Windows.Point" Usage="System.Windows.Point.Multiply (point, matrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="matrix" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="point">Der zu transformierende Punkt.</param>
        <param name="matrix">Die Transformationsmatrix.</param>
        <summary>Transformiert die angegebene <see cref="T:System.Windows.Point" />-Struktur mit der angegebenen <see cref="T:System.Windows.Media.Matrix" />-Struktur.</summary>
        <returns>Der transformierte Punkt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie eine- <xref:System.Windows.Point> Struktur mit der-Methode mit einer-Struktur multipliziert wird <xref:System.Windows.Media.Matrix> <xref:System.Windows.Point.Multiply%2A> .  
  
 [!code-csharp[PointExamples_snip#MultiplyPointByMatrixExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#multiplypointbymatrixexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Point.op_Multiply(System.Windows.Point,System.Windows.Media.Matrix)" />
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public void Offset (double offsetX, double offsetY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Offset(float64 offsetX, float64 offsetY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.Offset(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Offset (offsetX As Double, offsetY As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Offset(double offsetX, double offsetY);" />
      <MemberSignature Language="F#" Value="member this.Offset : double * double -&gt; unit" Usage="point.Offset (offsetX, offsetY)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offsetX" Type="System.Double" />
        <Parameter Name="offsetY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="offsetX">Der Betrag, um den die <see cref="P:System.Windows.Point.X" />-Koordinate des Punkts versetzt werden soll.</param>
        <param name="offsetY">Der Betrag, um den die <see cref="P:System.Windows.Point.Y" />-Koordinate des Punkts versetzt werden soll.</param>
        <summary>Verschiebt die <see cref="P:System.Windows.Point.X" />- und <see cref="P:System.Windows.Point.Y" />-Koordinaten eines Punkts um die angegebenen Werte.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang entspricht dem Hinzufügen eines <xref:System.Windows.Point> zu einem <xref:System.Windows.Vector> .  
  
 Beachten Sie, dass der Aufruf der <xref:System.Windows.Point.Offset%2A> -Methode nur dann wirksam wird, wenn Sie die-Eigenschaft und die-Eigenschaft direkt ändern können <xref:System.Windows.Point.X%2A> <xref:System.Windows.Point.Y%2A> . Da <xref:System.Windows.Point> ein Werttyp ist und Sie auf ein- <xref:System.Windows.Point> Objekt mithilfe einer Eigenschaft oder eines Indexers verweisen, erhalten Sie eine Kopie des Objekts und keinen Verweis auf das Objekt. Wenn Sie versuchen, <xref:System.Windows.Point.X%2A> <xref:System.Windows.Point.Y%2A> eine Eigenschaft oder einen Indexer-Verweis zu ändern, tritt ein Compilerfehler auf. Ebenso <xref:System.Windows.Point.Offset%2A> wird beim Aufrufen von für die Eigenschaft oder den Indexer das zugrunde liegende Objekt nicht geändert.  Wenn Sie den Wert eines-Objekts ändern möchten, auf <xref:System.Windows.Point> das als Eigenschaft oder Indexer verwiesen wird, erstellen Sie ein neues <xref:System.Windows.Point> , ändern Sie seine Felder, und weisen Sie dann der <xref:System.Windows.Point> Eigenschaft oder dem Indexer zurück zu.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie der <xref:System.Windows.Point.X%2A> -Wert und der- <xref:System.Windows.Point.Y%2A> Wert einer-Struktur versetzt werden <xref:System.Windows.Point> .  
  
 [!code-csharp[PointExamples_snip#OffsetExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#offsetexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Windows.Point operator + (System.Windows.Point point, System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Point op_Addition(valuetype System.Windows.Point point, valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.op_Addition(System.Windows.Point,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (point As Point, vector As Vector) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Point operator +(System::Windows::Point point, System::Windows::Vector vector);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Windows.Point * System.Windows.Vector -&gt; System.Windows.Point" Usage="point + vector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="point">Der zu verschiebende Punkt.</param>
        <param name="vector">Der Betrag, um den <paramref name="point" /> verschoben werden soll.</param>
        <summary>Verschiebt den angegebenen <see cref="T:System.Windows.Point" /> um den angegebenen <see cref="T:System.Windows.Vector" /> und gibt das Ergebnis zurück.</summary>
        <returns>Das Ergebnis aus der Verschiebung des angegebenen Punkts um den angegebenen Vektor.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein <xref:System.Windows.Point> zu einem <xref:System.Windows.Vector> mit dem überladenen Operator (+) hinzugefügt wird.  
  
 [!code-csharp[PointExamples_snip#OverloadedAdditionOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#overloadedadditionoperatorexample)]
 [!code-vb[PointExamples_snip#OverloadedAdditionOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PointExamples_snip/visualbasic/pointexample.vb#overloadedadditionoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Point.Add(System.Windows.Point,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Point point1, System.Windows.Point point2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.Point point1, valuetype System.Windows.Point point2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.op_Equality(System.Windows.Point,System.Windows.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (point1 As Point, point2 As Point) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Point point1, System::Windows::Point point2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.Point * System.Windows.Point -&gt; bool" Usage="point1 = point2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point1" Type="System.Windows.Point" />
        <Parameter Name="point2" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point1">Die erste zu vergleichende <see cref="T:System.Windows.Point" />-Struktur.</param>
        <param name="point2">Die zweite zu vergleichende <see cref="T:System.Windows.Point" />-Struktur.</param>
        <summary>Vergleicht zwei <see cref="T:System.Windows.Point" />-Strukturen auf Gleichheit.</summary>
        <returns><see langword="true" />, wenn sowohl die <see cref="P:System.Windows.Point.X" />-Koordinaten als auch die <see cref="P:System.Windows.Point.Y" />-Koordinaten von <paramref name="point1" /> und <paramref name="point2" /> gleich sind, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Koordinaten eines Punkts werden mithilfe von- <xref:System.Double> Werten beschrieben. Da der Wert von <xref:System.Double> bei der Ausführung arithmetischer Operationen die Genauigkeit verlieren kann, kann es vorkommen, dass ein Vergleich zwischen zwei <xref:System.Windows.Point> Werten, die logisch gleich sind, fehlschlägt.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie überprüfen, ob zwei- <xref:System.Windows.Point> Strukturen gleich sind, indem Sie den überladenen Operator (= =) verwenden  
  
 [!code-csharp[PointExamples_snip#OverloadedEqualityOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#overloadedequalityoperatorexample)]
 [!code-vb[PointExamples_snip#OverloadedEqualityOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PointExamples_snip/visualbasic/pointexample.vb#overloadedequalityoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Point.Equals" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Explicit">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konvertiert einen <see cref="T:System.Windows.Point" /> in eine <see cref="T:System.Windows.Size" /> oder einen <see cref="T:System.Windows.Vector" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Windows.Size (System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Size op_Explicit(valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.op_Explicit(System.Windows.Point)~System.Windows.Size" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (point As Point) As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Windows::Size(System::Windows::Point point);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Windows.Point -&gt; System.Windows.Size" Usage="System.Windows.Point.op_Explicit point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point">Der zu konvertierende Punkt.</param>
        <summary>Erstellt eine <see cref="T:System.Windows.Size" />-Struktur, deren <see cref="P:System.Windows.Size.Width" /> gleich dem <see cref="P:System.Windows.Point.X" />-Wert und deren <see cref="P:System.Windows.Size.Height" /> gleich dem <see cref="P:System.Windows.Point.Y" />-Wert dieses Punkts ist.</summary>
        <returns>Eine <see cref="T:System.Windows.Size" />-Struktur, deren <see cref="P:System.Windows.Size.Width" /> gleich dem <see cref="P:System.Windows.Point.X" />-Wert und deren <see cref="P:System.Windows.Size.Height" /> gleich dem <see cref="P:System.Windows.Point.Y" />-Wert dieses Punkts ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Da eine <xref:System.Windows.Size> Struktur nicht negativ sein kann, werden die absoluten Werte der- <xref:System.Windows.Point.X%2A> und-Eigenschaften des Punkts <xref:System.Windows.Point.Y%2A> verwendet.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein explizit <xref:System.Windows.Point> in eine konvertiert wird <xref:System.Windows.Size> .  
  
 [!code-csharp[PointExamples_snip#OverloadedExplicitOperatorSizeExample](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#overloadedexplicitoperatorsizeexample)]
 [!code-vb[PointExamples_snip#OverloadedExplicitOperatorSizeExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PointExamples_snip/visualbasic/pointexample.vb#overloadedexplicitoperatorsizeexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Windows.Vector (System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Explicit(valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.op_Explicit(System.Windows.Point)~System.Windows.Vector" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (point As Point) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Windows::Vector(System::Windows::Point point);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Windows.Point -&gt; System.Windows.Vector" Usage="System.Windows.Point.op_Explicit point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point">Der zu konvertierende Punkt.</param>
        <summary>Erstellt eine <see cref="T:System.Windows.Vector" />-Struktur, deren <see cref="P:System.Windows.Vector.X" />-Wert gleich dem <see cref="P:System.Windows.Point.X" />-Wert und deren <see cref="P:System.Windows.Vector.Y" />-Wert gleich dem <see cref="P:System.Windows.Point.Y" />-Wert dieses Punkts ist.</summary>
        <returns>Ein Vektor, dessen <see cref="P:System.Windows.Vector.X" />-Wert gleich dem <see cref="P:System.Windows.Point.X" />-Wert und deren <see cref="P:System.Windows.Vector.Y" />-Wert gleich dem <see cref="P:System.Windows.Point.Y" />-Wert dieses Punkts ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein explizit <xref:System.Windows.Point> in eine konvertiert wird <xref:System.Windows.Vector> .  
  
 [!code-csharp[PointExamples_snip#OverloadedExplicitOperatorVectorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#overloadedexplicitoperatorvectorexample)]
 [!code-vb[PointExamples_snip#OverloadedExplicitOperatorVectorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PointExamples_snip/visualbasic/pointexample.vb#overloadedexplicitoperatorvectorexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Point point1, System.Windows.Point point2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.Point point1, valuetype System.Windows.Point point2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.op_Inequality(System.Windows.Point,System.Windows.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (point1 As Point, point2 As Point) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Point point1, System::Windows::Point point2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.Point * System.Windows.Point -&gt; bool" Usage="System.Windows.Point.op_Inequality (point1, point2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point1" Type="System.Windows.Point" />
        <Parameter Name="point2" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point1">Der erste zu vergleichende Punkt.</param>
        <param name="point2">Der zweite zu vergleichende Punkt.</param>
        <summary>Vergleicht zwei <see cref="T:System.Windows.Point" />-Strukturen auf Ungleichheit.</summary>
        <returns><see langword="true" />, wenn <paramref name="point1" /> und <paramref name="point2" /> unterschiedliche <see cref="P:System.Windows.Point.X" />- oder <see cref="P:System.Windows.Point.Y" />-Koordinaten aufweisen. <see langword="false" />, wenn <paramref name="point1" /> und <paramref name="point2" /> dieselben <see cref="P:System.Windows.Point.X" />- und <see cref="P:System.Windows.Point.Y" />-Koordinaten haben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die-und-Koordinaten eines Punkts <xref:System.Windows.Point.X%2A> <xref:System.Windows.Point.Y%2A> werden mithilfe von- <xref:System.Double> Werten beschrieben. Da <xref:System.Double> bei der Ausführung von Werten Genauigkeit verloren gehen kann, kann es vorkommen, dass ein Vergleich zwischen zwei <xref:System.Windows.Point> Werten, die logisch gleich sind, fehlschlägt  
  
   
  
## Examples  
 Im folgenden Beispiel <xref:System.Windows.Point> wird gezeigt, wie mit dem überladenen Operator (! =) überprüft werden kann, ob zwei-Strukturen ungleich sind.  
  
 [!code-csharp[PointExamples_snip#OverloadedInequalityOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#overloadedinequalityoperatorexample)]
 [!code-vb[PointExamples_snip#OverloadedInequalityOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PointExamples_snip/visualbasic/pointexample.vb#overloadedinequalityoperatorexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Point operator * (System.Windows.Point point, System.Windows.Media.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Point op_Multiply(valuetype System.Windows.Point point, valuetype System.Windows.Media.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.op_Multiply(System.Windows.Point,System.Windows.Media.Matrix)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (point As Point, matrix As Matrix) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Point operator *(System::Windows::Point point, System::Windows::Media::Matrix matrix);" />
      <MemberSignature Language="F#" Value="static member ( * ) : System.Windows.Point * System.Windows.Media.Matrix -&gt; System.Windows.Point" Usage="point * matrix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="matrix" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="point">Der zu transformierende Punkt.</param>
        <param name="matrix">Die Transformationsmatrix.</param>
        <summary>Transformiert den angegebenen <see cref="T:System.Windows.Point" /> mit der angegebenen <see cref="T:System.Windows.Media.Matrix" />.</summary>
        <returns>Das Ergebnis aus der Transformation des angegebenen Punkts mit der angegebenen Matrix.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein mit <xref:System.Windows.Point> <xref:System.Windows.Media.Matrix> dem überladenen Operator (*) multipliziert wird.  
  
 [!code-csharp[PointExamples_snip#OverloadedMultiplyPointByMatrixOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#overloadedmultiplypointbymatrixoperatorexample)]
 [!code-vb[PointExamples_snip#OverloadedMultiplyPointByMatrixOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PointExamples_snip/visualbasic/pointexample.vb#overloadedmultiplypointbymatrixoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Point.Multiply(System.Windows.Point,System.Windows.Media.Matrix)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Subtrahiert den angegebenen <see cref="T:System.Windows.Vector" /> oder <see cref="T:System.Windows.Point" /> vom angegebenen <see cref="T:System.Windows.Point" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator - (System.Windows.Point point1, System.Windows.Point point2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Subtraction(valuetype System.Windows.Point point1, valuetype System.Windows.Point point2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (point1 As Point, point2 As Point) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator -(System::Windows::Point point1, System::Windows::Point point2);" />
      <MemberSignature Language="F#" Value="static member ( - ) : System.Windows.Point * System.Windows.Point -&gt; System.Windows.Vector" Usage="point1 - point2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point1" Type="System.Windows.Point" />
        <Parameter Name="point2" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point1">Der Punkt, von dem <paramref name="point2" /> subtrahiert wird.</param>
        <param name="point2">Der Punkt, der von <paramref name="point1" /> subtrahiert wird.</param>
        <summary>Subtrahiert den angegebenen <see cref="T:System.Windows.Point" /> von einem anderen angegebenen <see cref="T:System.Windows.Point" /> und gibt die Differenz als <see cref="T:System.Windows.Vector" /> zurück.</summary>
        <returns>Die Differenz zwischen <paramref name="point1" /> und <paramref name="point2" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein von einem anderen subtrahiert <xref:System.Windows.Point> <xref:System.Windows.Point> und <xref:System.Windows.Vector> mit dem überladenen (-)-Operator zurückgegeben wird.  
  
 [!code-csharp[PointExamples_snip#OverloadedSubtractionOperatorExample2](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#overloadedsubtractionoperatorexample2)]
 [!code-vb[PointExamples_snip#OverloadedSubtractionOperatorExample2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PointExamples_snip/visualbasic/pointexample.vb#overloadedsubtractionoperatorexample2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Point)" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static System.Windows.Point operator - (System.Windows.Point point, System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Point op_Subtraction(valuetype System.Windows.Point point, valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (point As Point, vector As Vector) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Point operator -(System::Windows::Point point, System::Windows::Vector vector);" />
      <MemberSignature Language="F#" Value="static member ( - ) : System.Windows.Point * System.Windows.Vector -&gt; System.Windows.Point" Usage="point - vector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="point">Der Punkt, von dem <paramref name="vector" /> subtrahiert wird.</param>
        <param name="vector">Der Vektor, der von <paramref name="point1" /> subtrahiert wird.</param>
        <summary>Subtrahiert den angegebenen <see cref="T:System.Windows.Vector" /> vom angegebenen <see cref="T:System.Windows.Point" /> und gibt den resultierenden <see cref="T:System.Windows.Point" /> zurück.</summary>
        <returns>Die Differenz zwischen <paramref name="point" /> und <paramref name="vector" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein <xref:System.Windows.Vector> von einem <xref:System.Windows.Point> mit dem überladenen (-)-Operator subtrahiert wird.  
  
 [!code-csharp[PointExamples_snip#OverloadedSubtractionOperatorExample1](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#overloadedsubtractionoperatorexample1)]
 [!code-vb[PointExamples_snip#OverloadedSubtractionOperatorExample1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PointExamples_snip/visualbasic/pointexample.vb#overloadedsubtractionoperatorexample1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Windows.Point Parse (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Point Parse(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (source As String) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Point Parse(System::String ^ source);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; System.Windows.Point" Usage="System.Windows.Point.Parse source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Eine Zeichenfolgendarstellung eines Punkts.</param>
        <summary>Erstellt eine <see cref="T:System.Windows.Point" /> aus der angegebenen <see cref="T:System.String" />.</summary>
        <returns>Die entsprechende <see cref="T:System.Windows.Point" />-Struktur.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie die-Methode verwendet wird <xref:System.Windows.Point.Parse%2A> , um eine <xref:System.String> Darstellung eines Punkts in eine-Struktur zu konvertieren <xref:System.Windows.Point> .  
  
 [!code-csharp[PointExamples_snip#ParseExample](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#parseexample)]
 [!code-vb[PointExamples_snip#ParseExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PointExamples_snip/visualbasic/pointexample.vb#parseexample)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><paramref name="source" /> besteht nicht aus zwei durch Komma oder Leerzeichen getrennten Double-Werten.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="source" /> enthält nicht zwei Zahlen.  
  
Oder 
 <paramref name="source" /> enthält zu viele Trennzeichen.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Subtrahiert den angegebenen <see cref="T:System.Windows.Point" /> oder <see cref="T:System.Windows.Vector" /> vom angegebenen <see cref="T:System.Windows.Point" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Subtract (System.Windows.Point point1, System.Windows.Point point2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Subtract(valuetype System.Windows.Point point1, valuetype System.Windows.Point point2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (point1 As Point, point2 As Point) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Subtract(System::Windows::Point point1, System::Windows::Point point2);" />
      <MemberSignature Language="F#" Value="static member Subtract : System.Windows.Point * System.Windows.Point -&gt; System.Windows.Vector" Usage="System.Windows.Point.Subtract (point1, point2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point1" Type="System.Windows.Point" />
        <Parameter Name="point2" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point1">Der Punkt, von dem <paramref name="point2" /> subtrahiert wird.</param>
        <param name="point2">Der Punkt, der von <paramref name="point1" /> subtrahiert wird.</param>
        <summary>Subtrahiert den angegebenen <see cref="T:System.Windows.Point" /> von einem anderen angegebenen <see cref="T:System.Windows.Point" /> und gibt die Differenz als <see cref="T:System.Windows.Vector" /> zurück.</summary>
        <returns>Die Differenz zwischen <paramref name="point1" /> und <paramref name="point2" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein <xref:System.Windows.Point> von einem anderen <xref:System.Windows.Point> mithilfe der statischen-Methode subtrahiert wird <xref:System.Windows.Point.Subtract%2A> .  
  
 [!code-csharp[PointExamples_snip#SubtractExample2](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#subtractexample2)]
 [!code-vb[PointExamples_snip#SubtractExample2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PointExamples_snip/visualbasic/pointexample.vb#subtractexample2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Point)" />
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Windows.Point Subtract (System.Windows.Point point, System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Point Subtract(valuetype System.Windows.Point point, valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (point As Point, vector As Vector) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Point Subtract(System::Windows::Point point, System::Windows::Vector vector);" />
      <MemberSignature Language="F#" Value="static member Subtract : System.Windows.Point * System.Windows.Vector -&gt; System.Windows.Point" Usage="System.Windows.Point.Subtract (point, vector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="point">Der Punkt, von dem <paramref name="vector" /> subtrahiert wird.</param>
        <param name="vector">Der <paramref name="vector" />, der von <paramref name="point" /> subtrahiert wird.</param>
        <summary>Subtrahiert den angegebenen <see cref="T:System.Windows.Vector" /> vom angegebenen <see cref="T:System.Windows.Point" /> und gibt den resultierenden <see cref="T:System.Windows.Point" /> zurück.</summary>
        <returns>Die Differenz zwischen <paramref name="point" /> und <paramref name="vector" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein <xref:System.Windows.Vector> <xref:System.Windows.Point> mithilfe der statischen-Methode von einem subtrahiert wird <xref:System.Windows.Point.Subtract%2A> .  
  
 [!code-csharp[PointExamples_snip#SubtractExample1](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#subtractexample1)]
 [!code-vb[PointExamples_snip#SubtractExample1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PointExamples_snip/visualbasic/pointexample.vb#subtractexample1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Point.Subtract" />
      </Docs>
    </Member>
    <Member MemberName="System.IFormattable.ToString">
      <MemberSignature Language="C#" Value="string IFormattable.ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IFormattable.ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.System#IFormattable#ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (format As String, provider As IFormatProvider) As String Implements IFormattable.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IFormattable.ToString(System::String ^ format, IFormatProvider ^ provider) = IFormattable::ToString;" />
      <MemberSignature Language="F#" Value="abstract member System.IFormattable.ToString : string * IFormatProvider -&gt; string&#xA;override this.System.IFormattable.ToString : string * IFormatProvider -&gt; string" Usage="point.System.IFormattable.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Die Zeichenfolge, die das zu verwendende Format angibt.  
  
Oder 
 <see langword="null" />, wenn das für diese Art der <see cref="T:System.IFormattable" />-Implementierung definierte Standardformat verwendet werden soll.</param>
        <param name="provider">Der zum Formatieren des Werts zu verwendende <see langword="IFormatProvider" />.  
  
Oder 
 <see langword="null" />, wenn die Informationen über numerische Formate dem aktuellen Gebietsschema des Betriebssystems entnommen werden sollen.</param>
        <summary>Dieser Member unterstützt die [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]-Infrastruktur und ist nicht für die direkte Verwendung im Code vorgesehen. Eine Beschreibung dieses Elements finden Sie unter <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</summary>
        <returns>Eine Zeichenfolge mit dem Wert der aktuellen Instanz im angegebenen Format.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Erstellt eine <see cref="T:System.String" />-Darstellung dieser <see cref="T:System.Windows.Point" />-Struktur.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="point.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt eine <see cref="T:System.String" />-Darstellung dieses <see cref="T:System.Windows.Point" />.</summary>
        <returns>Ein <see cref="T:System.String" /> mit den <see cref="P:System.Windows.Point.X" />- und <see cref="P:System.Windows.Point.Y" />-Werten dieser <see cref="T:System.Windows.Point" />-Struktur.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie die-Methode verwendet wird <xref:System.Windows.Point.ToString%2A> , um eine Darstellung einer-Struktur zu erhalten <xref:System.String> <xref:System.Windows.Point> .  
  
 [!code-csharp[PointExamples_snip#ToStringExample](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#tostringexample)]
 [!code-vb[PointExamples_snip#ToStringExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PointExamples_snip/visualbasic/pointexample.vb#tostringexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="point.ToString provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Kulturspezifische Formatierungsinformationen.</param>
        <summary>Erstellt eine <see cref="T:System.String" />-Darstellung dieses <see cref="T:System.Windows.Point" />.</summary>
        <returns>Ein <see cref="T:System.String" /> mit den <see cref="P:System.Windows.Point.X" />- und <see cref="P:System.Windows.Point.Y" />-Werten dieser <see cref="T:System.Windows.Point" />-Struktur.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="X">
      <MemberSignature Language="C#" Value="public double X { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 X" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Point.X" />
      <MemberSignature Language="VB.NET" Value="Public Property X As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double X { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.X : double with get, set" Usage="System.Windows.Point.X" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den <see cref="P:System.Windows.Point.X" />-Koordinatenwert dieser <see cref="T:System.Windows.Point" />-Struktur ab oder legt den Wert fest.</summary>
        <value>Der <see cref="P:System.Windows.Point.X" />-Koordinatenwert dieser <see cref="T:System.Windows.Point" />-Struktur.  Der Standardwert ist <c>0</c>.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie Sie überprüfen können, ob zwei- <xref:System.Windows.Point> Strukturen ungleich sind.  Außerdem wird veranschaulicht, wie einer Struktur Werte zugewiesen <xref:System.Windows.Point> werden, wenn die Struktur deklariert wird und nachdem die Struktur deklariert wurde.  
  
 [!code-csharp[PointExamples_snip#PointInequalityExample](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#pointinequalityexample)]
 [!code-vb[PointExamples_snip#PointInequalityExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PointExamples_snip/visualbasic/pointexample.vb#pointinequalityexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Point.Y" />
      </Docs>
    </Member>
    <Member MemberName="Y">
      <MemberSignature Language="C#" Value="public double Y { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Y" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Point.Y" />
      <MemberSignature Language="VB.NET" Value="Public Property Y As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Y { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Y : double with get, set" Usage="System.Windows.Point.Y" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den <see cref="P:System.Windows.Point.Y" />-Koordinatenwert dieser <see cref="T:System.Windows.Point" />-Struktur ab oder legt den Wert fest.</summary>
        <value>Der <see cref="P:System.Windows.Point.Y" />-Koordinatenwert dieser <see cref="T:System.Windows.Point" />-Struktur.  Der Standardwert ist <c>0</c>.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie Sie überprüfen können, ob zwei- <xref:System.Windows.Point> Strukturen ungleich sind.  Außerdem wird veranschaulicht, wie einer Struktur Werte zugewiesen <xref:System.Windows.Point> werden, wenn die Struktur deklariert wird und nachdem die Struktur deklariert wurde.  
  
 [!code-csharp[PointExamples_snip#PointInequalityExample](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#pointinequalityexample)]
 [!code-vb[PointExamples_snip#PointInequalityExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PointExamples_snip/visualbasic/pointexample.vb#pointinequalityexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Point.X" />
      </Docs>
    </Member>
  </Members>
</Type>

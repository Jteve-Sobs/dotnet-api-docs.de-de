<Type Name="LostFocusEventManager" FullName="System.Windows.LostFocusEventManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3d94f80a7a7f1349850647381b3da42201c26314" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75051383" /></Metadata><TypeSignature Language="C#" Value="public class LostFocusEventManager : System.Windows.WeakEventManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LostFocusEventManager extends System.Windows.WeakEventManager" />
  <TypeSignature Language="DocId" Value="T:System.Windows.LostFocusEventManager" />
  <TypeSignature Language="VB.NET" Value="Public Class LostFocusEventManager&#xA;Inherits WeakEventManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class LostFocusEventManager : System::Windows::WeakEventManager" />
  <TypeSignature Language="F#" Value="type LostFocusEventManager = class&#xA;    inherit WeakEventManager" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.WeakEventManager</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt eine <see cref="T:System.Windows.WeakEventManager" />-Implementierung bereit, damit Sie mit dem Muster für "schwache Ereignislistener" Listener für das <see cref="E:System.Windows.UIElement.LostFocus" />-Ereignis oder das <see cref="E:System.Windows.ContentElement.LostFocus" />-Ereignis anfügen können.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um Listener in diesem Muster zu sein, müssen die Listenerobjekte <xref:System.Windows.IWeakEventListener>implementieren. Sie müssen <xref:System.Windows.IWeakEventListener> für die Klasse, die die Quelle der Ereignisse ist, nicht implementieren.  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Datenbindung verwendet diese <xref:System.Windows.WeakEventManager>, damit interne Klassen, die Bindungen aktualisieren, Listener für ein <xref:System.Windows.UIElement.LostFocus?displayProperty=nameWithType> oder <xref:System.Windows.ContentElement.LostFocus?displayProperty=nameWithType> Ereignis an ein Objekt anfügen können, das das Ziel einer Bindung ist. Dadurch wird eine Benachrichtigung für den <xref:System.Windows.Data.UpdateSourceTrigger.LostFocus> Modus der Datenbindung unterstützt, ohne dass starke Verweise auf Daten Bindungs Ziele erstellt werden.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public static void AddHandler (System.Windows.DependencyObject source, EventHandler&lt;System.Windows.RoutedEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddHandler(class System.Windows.DependencyObject source, class System.EventHandler`1&lt;class System.Windows.RoutedEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LostFocusEventManager.AddHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.RoutedEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddHandler (source As DependencyObject, handler As EventHandler(Of RoutedEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddHandler(System::Windows::DependencyObject ^ source, EventHandler&lt;System::Windows::RoutedEventArgs ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddHandler : System.Windows.DependencyObject * EventHandler&lt;System.Windows.RoutedEventArgs&gt; -&gt; unit" Usage="System.Windows.LostFocusEventManager.AddHandler (source, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Windows.DependencyObject" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.Windows.RoutedEventArgs&gt;" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="source">Das Quellobjekt, das das <see cref="E:System.Windows.UIElement.LostFocus" /> oder <see cref="E:System.Windows.ContentElement.LostFocus" />-Ereignis auslöst.</param>
        <param name="handler">Der Delegat, der das <see cref="E:System.Windows.UIElement.LostFocus" />-Ereignis oder das <see cref="E:System.Windows.ContentElement.LostFocus" />-Ereignis behandelt.</param>
        <summary>Fügt den angegebenen Ereignishandler hinzu, der aufgerufen wird, wenn die angegebene Quelle das <see cref="E:System.Windows.UIElement.LostFocus" />-Ereignis oder das <see cref="E:System.Windows.ContentElement.LostFocus" />-Ereignis auslöst.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Methode, um den Ereignishandler anzugeben, den Sie zum Abonnieren des <xref:System.Windows.UIElement.LostFocus?displayProperty=nameWithType> oder <xref:System.Windows.ContentElement.LostFocus?displayProperty=nameWithType> Ereignisses verwenden möchten. Wenn Sie diese Methode verwenden, muss das Listener-Objekt die <xref:System.Windows.IWeakEventListener>-Schnittstelle nicht implementieren.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="handler" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddListener">
      <MemberSignature Language="C#" Value="public static void AddListener (System.Windows.DependencyObject source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddListener(class System.Windows.DependencyObject source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LostFocusEventManager.AddListener(System.Windows.DependencyObject,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddListener (source As DependencyObject, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddListener(System::Windows::DependencyObject ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="static member AddListener : System.Windows.DependencyObject * System.Windows.IWeakEventListener -&gt; unit" Usage="System.Windows.LostFocusEventManager.AddListener (source, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Windows.DependencyObject" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source">Das Objekt mit dem Ereignis.</param>
        <param name="listener">Das Objekt, das als Listener hinzugefügt werden soll.</param>
        <summary>Fügt den bereitgestellten Listener der Liste von Listenern in der bereitgestellten Quelle hinzu.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.WeakEventManager" />
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="NewListenerList">
      <MemberSignature Language="C#" Value="protected override System.Windows.WeakEventManager.ListenerList NewListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.WeakEventManager/ListenerList NewListenerList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LostFocusEventManager.NewListenerList" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function NewListenerList () As WeakEventManager.ListenerList" />
      <MemberSignature Language="F#" Value="override this.NewListenerList : unit -&gt; System.Windows.WeakEventManager.ListenerList" Usage="lostFocusEventManager.NewListenerList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt ein neues Objekt zurück, mit dem Listener zu dem <see cref="E:System.Windows.UIElement.LostFocus" />- oder <see cref="E:System.Windows.ContentElement.LostFocus" />-Ereignis hinzugefügt werden.</summary>
        <returns>Ein neues Objekt, mit dem Listener zum <see cref="E:System.Windows.UIElement.LostFocus" /> oder <see cref="E:System.Windows.ContentElement.LostFocus" />-Ereignis hinzugefügt werden.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public static void RemoveHandler (System.Windows.DependencyObject source, EventHandler&lt;System.Windows.RoutedEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveHandler(class System.Windows.DependencyObject source, class System.EventHandler`1&lt;class System.Windows.RoutedEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LostFocusEventManager.RemoveHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.RoutedEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveHandler (source As DependencyObject, handler As EventHandler(Of RoutedEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveHandler(System::Windows::DependencyObject ^ source, EventHandler&lt;System::Windows::RoutedEventArgs ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveHandler : System.Windows.DependencyObject * EventHandler&lt;System.Windows.RoutedEventArgs&gt; -&gt; unit" Usage="System.Windows.LostFocusEventManager.RemoveHandler (source, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Windows.DependencyObject" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.Windows.RoutedEventArgs&gt;" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="source">Das Quellobjekt, das das <see cref="E:System.Windows.UIElement.LostFocus" /> oder <see cref="E:System.Windows.ContentElement.LostFocus" />-Ereignis auslöst.</param>
        <param name="handler">Der Delegat, der das <see cref="E:System.Windows.UIElement.LostFocus" />-Ereignis oder das <see cref="E:System.Windows.ContentElement.LostFocus" />-Ereignis behandelt.</param>
        <summary>Entfernt den angegebenen Ereignishandler aus der angegebenen Quelle.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="handler" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveListener">
      <MemberSignature Language="C#" Value="public static void RemoveListener (System.Windows.DependencyObject source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveListener(class System.Windows.DependencyObject source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LostFocusEventManager.RemoveListener(System.Windows.DependencyObject,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveListener (source As DependencyObject, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveListener(System::Windows::DependencyObject ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="static member RemoveListener : System.Windows.DependencyObject * System.Windows.IWeakEventListener -&gt; unit" Usage="System.Windows.LostFocusEventManager.RemoveListener (source, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Windows.DependencyObject" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source">Das Objekt, aus dem der Listener entfernt werden soll.</param>
        <param name="listener">Der zu entfernende Listener.</param>
        <summary>Entfernt den angegebenen Listener aus der Liste der Listener in der bereitgestellten Quelle.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.WeakEventManager" />
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="protected override void StartListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void StartListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LostFocusEventManager.StartListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub StartListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void StartListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="override this.StartListening : obj -&gt; unit" Usage="lostFocusEventManager.StartListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">Das Objekt, bei dem die Überwachung entsprechenden <see cref="E:System.Windows.UIElement.LostFocus" />-Ereignisses begonnen werden soll.</param>
        <summary>Beginnt mit der Überwachung des <see cref="E:System.Windows.UIElement.LostFocus" />-Ereignisses bei der angegebenen Quelle und fügt einen internen Klassenhandler an die Quelle an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die angegebene Quelle wird auf den Typ geprüft, um festzustellen, ob es sich um <xref:System.Windows.UIElement> oder <xref:System.Windows.ContentElement> handelt, und fügt dann den Klassen Handler für das entsprechende Ereignis dieser Quelle hinzu.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostFocus" />
        <altmember cref="E:System.Windows.ContentElement.LostFocus" />
        <altmember cref="T:System.Windows.WeakEventManager" />
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="protected override void StopListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void StopListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LostFocusEventManager.StopListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub StopListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void StopListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="override this.StopListening : obj -&gt; unit" Usage="lostFocusEventManager.StopListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">Das Quellobjekt, für das die Überwachung von <see cref="E:System.Windows.UIElement.LostFocus" /> beendet werden soll.</param>
        <summary>Beendet die Überwachung des <see cref="E:System.Windows.UIElement.LostFocus" />-Ereignisses für die angegebene Quelle.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.WeakEventManager" />
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
  </Members>
</Type>

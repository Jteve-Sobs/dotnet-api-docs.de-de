<Type Name="EventManager" FullName="System.Windows.EventManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9af1b370002031277aba01b111b81e2ddcd5ee62" /><Meta Name="ms.sourcegitcommit" Value="9058026d5788c19bed0a767fc52b40a1eac8ebfe" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="10/24/2019" /><Meta Name="ms.locfileid" Value="72849196" /></Metadata><TypeSignature Language="C#" Value="public static class EventManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EventManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.EventManager" />
  <TypeSignature Language="VB.NET" Value="Public Class EventManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventManager abstract sealed" />
  <TypeSignature Language="F#" Value="type EventManager = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt ereignisbezogene Dienstprogrammmethoden bereit, die Routingereignisse für Klassenbesitzer registrieren und Klassenhandler hinzufügen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Klasse wird am häufigsten verwendet, um ein neues Routing Ereignis mit <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>zu registrieren.  
  
 Die zweithäufigste API-Verwendung ist <xref:System.Windows.EventManager.RegisterClassHandler%2A>. Sie verwenden diese Methode, um die Klassen Behandlung eines Routing Ereignisses für die Klasse oder ein angefügtes Ereignis zu aktivieren. Weitere Informationen finden Sie unter Markieren von Routing [Ereignissen als behandelt und Klassen Behandlung](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie diese Klasse zum Registrieren eines neuen Routing Ereignisses als Klassenmember zusammen mit dem Routing Ereignis "Wrapper"-Technik zum Überschreiben der Add-und remove-Implementierungen für ein [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] Ereignis verwendet werden kann.  
  
 [!code-csharp[DPCustom#EventManagerClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#eventmanagerclass)]
 [!code-vb[DPCustom#EventManagerClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#eventmanagerclass)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetRoutedEvents">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEvents" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEvents () As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEvents();" />
      <MemberSignature Language="F#" Value="static member GetRoutedEvents : unit -&gt; System.Windows.RoutedEvent[]" Usage="System.Windows.EventManager.GetRoutedEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt Bezeichner für Routingereignisse zurück, die im Ereignissystem registriert wurden.</summary>
        <returns>Ein Array vom Typ <see cref="T:System.Windows.RoutedEvent" />, das die registrierten Objekte enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere <xref:System.Windows.RoutedEvent> Objekte können später registriert werden. Diese Methode ruft eine Momentaufnahme ab, und die Auflistung der Routing Ereignisse kann während der gesamten Lebensdauer einer Anwendung geschrieben werden. Die zurückgegebene Auflistung kann sehr groß sein. Auch wenn nur die Ereignisse gezählt werden, die Teil der [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]-APIs sind, liegt die Anzahl der Sammlungen in den hohen Hunderten.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoutedEventsForOwner">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEventsForOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEventsForOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEventsForOwner (ownerType As Type) As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEventsForOwner(Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member GetRoutedEventsForOwner : Type -&gt; System.Windows.RoutedEvent[]" Usage="System.Windows.EventManager.GetRoutedEventsForOwner ownerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType">Der Typ, mit dem die Suche begonnen werden soll. Basisklassen werden in der Suche eingeschlossen.</param>
        <summary>Sucht alle Routingereignisbezeichner für Ereignisse, die mit dem angegebenen Besitzertyp registriert werden.</summary>
        <returns>Ein Array mit übereinstimmenden Routingereignisbezeichnern, wenn eine Übereinstimmung gefunden wird, andernfalls <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClassHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registriert einen Klassenhandler für ein bestimmtes Routingereignis.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="static member RegisterClassHandler : Type * System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="System.Windows.EventManager.RegisterClassHandler (classType, routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="classType">Der Typ der Klasse, die die Klassenbehandlung deklariert.</param>
        <param name="routedEvent">Der Routingereignisbezeichner des zu behandelnden Ereignisses.</param>
        <param name="handler">Ein Verweis auf die Klassenhandlerimplementierung.</param>
        <summary>Registriert einen Klassenhandler für ein bestimmtes Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Klassen Behandlung ist ein Feature, das für Routing Ereignisse verfügbar ist, einschließlich angefügter Ereignisse, die mit der Unterstützung von Routing Ereignissen implementiert werden. Ein Klassen Handler ist wie ein statischer Handler, der für alle Instanzen der-Klasse vorhanden ist. Da der Handler statisch ist, können Sie Instanzeigenschaften nicht direkt mit einem Klassen Handler ändern. Sie können jedoch über den `sender`-Parameter und/oder die Ereignisdaten auf Instanzen zugreifen.  
  
 Klassen Handler werden vor Instanzhandlern aufgerufen. Sie können einen Klassen Handler implementieren, der das Verhalten hat, das Ereignis als behandelt zu markieren. Daher werden Instanzhandler für ein Ereignis, das eine Klasse behandelt, nur dann aufgerufen, wenn die Instanzhandler speziell für behandelte Ereignisse registriert sind.  
  
 Viele der [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Basiselement Ereignisse bieten Klassen Behandlung für virtuelle Methoden. Indem Sie diese Methoden in Klassen überschreiben, die die Basisklassen erben, können Sie die Klassen Behandlung implementieren, ohne in statischen Konstruktoren <xref:System.Windows.EventManager.RegisterClassHandler%2A> aufrufen zu müssen. Diese Methoden zur Klassen Behandlung sind in der Regel für Eingabeereignisse vorhanden und haben Namen, die mit "on" beginnen und mit dem Namen des Ereignisses enden, das als Klasse behandelt wird.  
  
 Weitere Informationen zur Klassen Behandlung finden Sie unter [Markieren von Routing Ereignissen als behandelt und Klassen Behandlung](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
 Mit dieser Signatur werden Klassen Handler registriert, um nur als Reaktion auf nicht behandelte Ereignisse aufzurufen. Sie können auch Klassen Handler registrieren, um auch dann aufzurufen, wenn die Ereignis Argumente als behandelt gekennzeichnet sind. verwenden Sie dazu die <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> Signatur, wobei `handledEventsToo` auf `true`festgelegt ist.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Handler für <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>hinzugefügt, der <xref:System.Windows.EventManager.RegisterClassHandler%2A>aufgerufen wird.  
  
 [!code-csharp[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/ClassHandling/CSharp/SDKSampleLibrary/class1.cs#staticandregisterclasshandler)]
 [!code-vb[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClassHandling/visualbasic/sdksamplelibrary/class1.vb#staticandregisterclasshandler)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="static member RegisterClassHandler : Type * System.Windows.RoutedEvent * Delegate * bool -&gt; unit" Usage="System.Windows.EventManager.RegisterClassHandler (classType, routedEvent, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="classType">Der Typ der Klasse, die die Klassenbehandlung deklariert.</param>
        <param name="routedEvent">Der Routingereignisbezeichner des zu behandelnden Ereignisses.</param>
        <param name="handler">Ein Verweis auf die Klassenhandlerimplementierung.</param>
        <param name="handledEventsToo"><see langword="true" />, um diesen Klassenhandler aufzurufen, auch wenn Argumente des Routingereignisses als behandelt gekennzeichnet sind, <see langword="false" />, um das Standardverhalten beizubehalten, d. h. der Handler wird bei allen als behandelt markierten Ereignissen nicht aufgerufen.</param>
        <summary>Registriert einen Klassenhandler für ein bestimmtes Routingereignis mit der Option zum Behandeln von Ereignissen, wenn Ereignisdaten bereits als behandelt gekennzeichnet sind.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Klassen Behandlung ist ein Feature, das für Routing Ereignisse verfügbar ist, einschließlich angefügter Ereignisse, die mit der Unterstützung von Routing Ereignissen implementiert werden. Ein Klassen Handler ist wie ein statischer Handler, der für alle Instanzen der-Klasse vorhanden ist. Da der Handler statisch ist, können Sie Instanzeigenschaften nicht direkt mit einem Klassen Handler ändern. Sie können jedoch über den `sender`-Parameter und/oder die Ereignisdaten auf Instanzen zugreifen.  
  
 Klassen Handler werden vor Instanzhandlern aufgerufen. Sie können einen Klassen Handler implementieren, der das Verhalten hat, das Ereignis als behandelt zu markieren. Daher werden Instanzhandler für ein Ereignis, das eine Klasse behandelt, nur dann aufgerufen, wenn die Instanzhandler speziell für behandelte Ereignisse registriert sind.  
  
 Viele der [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Basiselement Ereignisse bieten Klassen Behandlung für virtuelle Methoden. Indem Sie diese Methoden in Klassen überschreiben, die die Basisklassen erben, können Sie die Klassen Behandlung implementieren, ohne in statischen Konstruktoren <xref:System.Windows.EventManager.RegisterClassHandler%2A> aufrufen zu müssen. Diese Methoden zur Klassen Behandlung sind in der Regel für Eingabeereignisse vorhanden und haben Namen, die mit "on" beginnen und mit dem Namen des Ereignisses enden, das als Klasse behandelt wird.  
  
 Weitere Informationen zur Klassen Behandlung finden Sie unter [Markieren von Routing Ereignissen als behandelt und Klassen Behandlung](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
 Mithilfe dieser Signatur können Klassen Handler registriert werden, um auf behandelte Ereignisse aufzurufen, indem `handledEventsToo` auf `true`festgelegt wird. Im Allgemeinen sollten Sie dies nur tun, wenn ein bekanntes Problem bei der Behandlung vorliegt, wie z. b. das Verarbeiten von Eingabe Systemen von Maus-oder Tastatur Ereignissen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterRoutedEvent">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent RegisterRoutedEvent (string name, System.Windows.RoutingStrategy routingStrategy, Type handlerType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent RegisterRoutedEvent(string name, valuetype System.Windows.RoutingStrategy routingStrategy, class System.Type handlerType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::RoutedEvent ^ RegisterRoutedEvent(System::String ^ name, System::Windows::RoutingStrategy routingStrategy, Type ^ handlerType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member RegisterRoutedEvent : string * System.Windows.RoutingStrategy * Type * Type -&gt; System.Windows.RoutedEvent" Usage="System.Windows.EventManager.RegisterRoutedEvent (name, routingStrategy, handlerType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="routingStrategy" Type="System.Windows.RoutingStrategy" />
        <Parameter Name="handlerType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des Routingereignisses. Der Name muss im Besitzertyp eindeutig sein und darf nicht <see langword="null" /> oder eine leere Zeichenfolge sein.</param>
        <param name="routingStrategy">Die Routingstrategie des Ereignisses als Wert der Enumeration.</param>
        <param name="handlerType">Der Typ des Ereignishandlers. Dies muss ein Delegattyp sein und darf nicht <see langword="null" /> sein.</param>
        <param name="ownerType">Der Besitzerklassentyp des Routingereignisses. Dieser darf nicht <see langword="null" /> sein.</param>
        <summary>Registriert ein neues Routingereignis beim [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]-Ereignissystem.</summary>
        <returns>Der Bezeichner für das neu registrierte Routingereignis. Dieses Bezeichnerobjekt kann jetzt als statisches Feld in einer Klasse gespeichert und dann als Parameter für Methoden verwendet werden, die Handler an das Ereignis anfügen. Der Routingereignisbezeichner wird auch für andere APIs des Ereignissystems verwendet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie den Rückgabewert dieser Methode, um die statische Deklaration für ein eindeutiges <xref:System.Windows.RoutedEvent> Bezeichnerfeld zu erstellen. Dieses Feld sollte innerhalb des Besitzer Typs gespeichert werden.  
  
 Es gibt eine beträchtliche Anzahl von Konventionen und bewährten Methoden für die Art und Weise, wie Routing Ereignisse in einer Klasse benannt, registriert und verfügbar gemacht werden sollen. Weitere Informationen finden Sie unter [Übersicht über Routing Ereignisse](~/docs/framework/wpf/advanced/routed-events-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

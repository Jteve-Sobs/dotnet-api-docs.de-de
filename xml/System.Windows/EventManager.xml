<Type Name="EventManager" FullName="System.Windows.EventManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c07ba11c7438326eddb5331a443033c7ee73acb9" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39844482" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class EventManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EventManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.EventManager" />
  <TypeSignature Language="VB.NET" Value="Public Class EventManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventManager abstract sealed" />
  <TypeSignature Language="F#" Value="type EventManager = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt ereignisbezogene Hilfsprogrammmethoden bereit, die Routingereignisse für Klassenbesitzer registrieren und Klassenhandler hinzufügen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Klasse wird am häufigsten verwendet, um ein neues Routingereignis beim Registrieren <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.  
  
 Die zweithäufigste [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] Verwendung <xref:System.Windows.EventManager.RegisterClassHandler%2A>. Sie verwenden diese Methode zum Behandeln eines Routingereignisses für die Klasse oder eines angefügten Ereignisses Klasse zu aktivieren. Weitere Informationen finden Sie unter [Markieren von Routingereignissen als behandelt und Klassenbehandlung](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie diese Klasse verwenden, um ein neues Ereignis als Klassenmember, zusammen mit das Routingereignis-"Wrapper"-Verfahren der überschreibenden hinzufügen zu registrieren und entfernen Implementierungen für eine [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] Ereignis.  
  
 [!code-csharp[DPCustom#EventManagerClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#eventmanagerclass)]
 [!code-vb[DPCustom#EventManagerClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#eventmanagerclass)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetRoutedEvents">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEvents" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEvents () As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEvents();" />
      <MemberSignature Language="F#" Value="static member GetRoutedEvents : unit -&gt; System.Windows.RoutedEvent[]" Usage="System.Windows.EventManager.GetRoutedEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt Bezeichner für Routingereignisse zurück, die im Ereignissystem registriert wurden.</summary>
        <returns>Ein Array vom Typ <see cref="T:System.Windows.RoutedEvent" />, das die registrierten Objekte enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere <xref:System.Windows.RoutedEvent> Objekte später registriert werden können. Diese Methode ruft eine Momentaufnahme ab, und die Auflistung von Routingereignissen kann geschrieben werden, während der Lebensdauer einer Anwendung. Die zurückgegebene Auflistung möglicherweise sehr groß sein. Zählen auch nur die Ereignisse, die Teil der [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)], die Auflistung in die hohe Hunderte enthält.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoutedEventsForOwner">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEventsForOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEventsForOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEventsForOwner (ownerType As Type) As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEventsForOwner(Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member GetRoutedEventsForOwner : Type -&gt; System.Windows.RoutedEvent[]" Usage="System.Windows.EventManager.GetRoutedEventsForOwner ownerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType">Der Typ, mit dem die Suche begonnen werden soll. Basisklassen werden in der Suche eingeschlossen.</param>
        <summary>Sucht alle Routingereignisbezeichner für Ereignisse, die mit dem angegebenen Besitzertyp registriert werden.</summary>
        <returns>Ein Array mit übereinstimmenden Routingereignisbezeichnern, wenn eine Übereinstimmung gefunden wird, andernfalls <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClassHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registriert einen Klassenhandler für ein bestimmtes Routingereignis.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="static member RegisterClassHandler : Type * System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="System.Windows.EventManager.RegisterClassHandler (classType, routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="classType">Der Typ der Klasse, die die Klassenbehandlung deklariert.</param>
        <param name="routedEvent">Der Routingereignisbezeichner des zu behandelnden Ereignisses.</param>
        <param name="handler">Ein Verweis auf die Klassenhandlerimplementierung.</param>
        <summary>Registriert einen Klassenhandler für ein bestimmtes Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klassenbehandlung ist ein Feature, das für weitergeleitete Ereignisse, einschließlich des angefügten Ereignisse, die implementiert werden, mit dem Routingereignis sichern verfügbar ist. Ein Klassenhandler ist z. B. einen statischen Handler, der für alle Instanzen der Klasse vorhanden ist. Da der Handler statisch ist, Instanzeigenschaften direkt mit einem Klassenhandler kann nicht geändert, aber es die Serverinstanzen über stehen die `sender` Parameter und/oder die Ereignisdaten.  
  
 Klassenhandler werden vor dem Instanzhandler aufgerufen. Sie können einen Klassenhandler implementieren, der das Verhalten der das Ereignis als behandelt markiert wurde. Aus diesem Grund werden Instanzhandler für ein Ereignis Klasse behandelt nicht aufgerufen werden, es sei denn, die Instanzhandler speziell für behandelten Ereignisse registrieren.  
  
 Viele der [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Basiselement-Ereignisse bieten eine Klassenbehandlung virtuelle Methoden. Durch das Überschreiben dieser Methoden in Klassen, die die Basisklassen erben, können Sie ohne Klassenbehandlung implementieren <xref:System.Windows.EventManager.RegisterClassHandler%2A> in statischen Konstruktoren. Diese Behandlung-Klasse, Methoden in der Regel für Eingabeereignisse vorhanden und haben Namen, die mit "On" beginnen und enden mit den Namen des Ereignisses Klasse behandelt wird.  
  
 Weitere Informationen zur Klassenbehandlung von finden Sie unter [Markieren von Routingereignissen als behandelt und Klassenbehandlung](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
 Mithilfe dieser Signatur werden Klassenhandler registriert werden, um nur als Reaktion auf Ereignisse ohne Behandlung aufzurufen. Sie können auch registrieren Klassenhandler aufzurufen, auch wenn die Ereignisargumente behandelt,, mithilfe markiert sind der <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> Signatur mit `handledEventsToo` festgelegt `true`.  
  
   
  
## Examples  
 Das folgende Beispiel fügt einen Handler für <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>, wird beim Aufruf <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 [!code-csharp[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/ClassHandling/CSharp/SDKSampleLibrary/class1.cs#staticandregisterclasshandler)]
 [!code-vb[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClassHandling/visualbasic/sdksamplelibrary/class1.vb#staticandregisterclasshandler)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="static member RegisterClassHandler : Type * System.Windows.RoutedEvent * Delegate * bool -&gt; unit" Usage="System.Windows.EventManager.RegisterClassHandler (classType, routedEvent, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="classType">Der Typ der Klasse, die die Klassenbehandlung deklariert.</param>
        <param name="routedEvent">Der Routingereignisbezeichner des zu behandelnden Ereignisses.</param>
        <param name="handler">Ein Verweis auf die Klassenhandlerimplementierung.</param>
        <param name="handledEventsToo">
          <see langword="true" />, um diesen Klassenhandler aufzurufen, auch wenn Argumente des Routingereignisses als behandelt gekennzeichnet sind, <see langword="false" />, um das Standardverhalten beizubehalten, d. h. der Handler wird bei allen als behandelt markierten Ereignissen nicht aufgerufen.</param>
        <summary>Registriert einen Klassenhandler für ein bestimmtes Routingereignis mit der Option zum Behandeln von Ereignissen, wenn Ereignisdaten bereits als behandelt gekennzeichnet sind.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klassenbehandlung ist ein Feature, das für weitergeleitete Ereignisse, einschließlich des angefügten Ereignisse, die implementiert werden, mit dem Routingereignis sichern verfügbar ist. Ein Klassenhandler ist z. B. einen statischen Handler, der für alle Instanzen der Klasse vorhanden ist. Da der Handler statisch ist, Instanzeigenschaften direkt mit einem Klassenhandler kann nicht geändert, aber es die Serverinstanzen über stehen die `sender` Parameter und/oder die Ereignisdaten.  
  
 Klassenhandler werden vor dem Instanzhandler aufgerufen. Sie können einen Klassenhandler implementieren, der das Verhalten der das Ereignis als behandelt markiert wurde. Aus diesem Grund werden Instanzhandler für ein Ereignis Klasse behandelt nicht aufgerufen werden, es sei denn, die Instanzhandler speziell für behandelten Ereignisse registrieren.  
  
 Viele der [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Basiselement-Ereignisse bieten eine Klassenbehandlung virtuelle Methoden. Durch das Überschreiben dieser Methoden in Klassen, die die Basisklassen erben, können Sie ohne Klassenbehandlung implementieren <xref:System.Windows.EventManager.RegisterClassHandler%2A> in statischen Konstruktoren. Diese Behandlung-Klasse, Methoden in der Regel für Eingabeereignisse vorhanden und haben Namen, die mit "On" beginnen und enden mit den Namen des Ereignisses Klasse behandelt wird.  
  
 Weitere Informationen zur Klassenbehandlung von finden Sie unter [Markieren von Routingereignissen als behandelt und Klassenbehandlung](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
 Mithilfe dieser Signatur Klassenhandler können registriert werden, um durch Festlegen von behandelten Ereignisse Aufrufen `handledEventsToo` festgelegt `true`. Im Allgemeinen sollten Sie dies tun, nur dann, wenn ein von bekannten Behandlungsproblem zu umgehen, z. B. Verarbeiten von Ereignissen von Maus oder Tastatur Eingabesystem gewünschten vorliegt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterRoutedEvent">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent RegisterRoutedEvent (string name, System.Windows.RoutingStrategy routingStrategy, Type handlerType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent RegisterRoutedEvent(string name, valuetype System.Windows.RoutingStrategy routingStrategy, class System.Type handlerType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::RoutedEvent ^ RegisterRoutedEvent(System::String ^ name, System::Windows::RoutingStrategy routingStrategy, Type ^ handlerType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member RegisterRoutedEvent : string * System.Windows.RoutingStrategy * Type * Type -&gt; System.Windows.RoutedEvent" Usage="System.Windows.EventManager.RegisterRoutedEvent (name, routingStrategy, handlerType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="routingStrategy" Type="System.Windows.RoutingStrategy" />
        <Parameter Name="handlerType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des Routingereignisses. Der Name muss im Besitzertyp eindeutig sein und darf nicht <see langword="null" /> oder eine leere Zeichenfolge sein.</param>
        <param name="routingStrategy">Die Routingstrategie des Ereignisses als Wert der Enumeration.</param>
        <param name="handlerType">Der Typ des Ereignishandlers. Dies muss ein Delegattyp sein und darf nicht <see langword="null" /> sein.</param>
        <param name="ownerType">Der Besitzerklassentyp des Routingereignisses. Darf nicht <see langword="null" /> sein.</param>
        <summary>Registriert ein neues Routingereignis beim [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]-Ereignissystem.</summary>
        <returns>Der Bezeichner für das neu registrierte Routingereignis. Dieses Bezeichnerobjekt kann jetzt als statisches Feld in einer Klasse gespeichert und dann als Parameter für Methoden verwendet werden, die Handler an das Ereignis anfügen. Der Routingereignisbezeichner wird auch für andere [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] des Ereignissystems verwendet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Den Rückgabewert dieser Methode verwenden, erstellen Sie die statische Deklaration für eine eindeutige <xref:System.Windows.RoutedEvent> Feld "ID". Dieses Feld muss im Besitzertyp gespeichert werden.  
  
 Es gibt eine beträchtliche Anzahl von Konventionen und bewährte Methoden wie Routingereignisse zu sollte mit dem Namen, registriert und in einer Klasse verfügbar gemacht werden. Weitere Informationen finden Sie unter [Übersicht über Routingereignisse](~/docs/framework/wpf/advanced/routed-events-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
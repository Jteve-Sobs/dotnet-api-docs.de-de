<Type Name="IWeakEventListener" FullName="System.Windows.IWeakEventListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="56c23c281fad327a8782e15b932a4c0347858871" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64185576" /></Metadata><TypeSignature Language="C#" Value="public interface IWeakEventListener" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWeakEventListener" />
  <TypeSignature Language="DocId" Value="T:System.Windows.IWeakEventListener" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWeakEventListener" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWeakEventListener" />
  <TypeSignature Language="F#" Value="type IWeakEventListener = interface" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="6c5ac-101">Unterstützt Klassen, die Ereignisse über das WeakEvent-Muster erwarten, bei der Überwachung von Ereignissen und stellt einen <see cref="T:System.Windows.WeakEventManager" /> bereit.</span><span class="sxs-lookup"><span data-stu-id="6c5ac-101">Provides event listening support for classes that expect to receive events through the WeakEvent pattern and a <see cref="T:System.Windows.WeakEventManager" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6c5ac-102">Die <xref:System.Windows.WeakEventManager> (ein Verteiler) leitet ein Ereignis durch Aufrufen der <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> Methode für Klassen, die diese Schnittstelle implementieren, und haben durch den Aufruf als Listener hinzugefügt wurden <xref:System.Windows.WeakEventManager> Methoden im voraus.</span><span class="sxs-lookup"><span data-stu-id="6c5ac-102">The <xref:System.Windows.WeakEventManager> (a dispatcher) forwards an event by calling the <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> method on classes that implement this interface, and that have been added as listeners by calling <xref:System.Windows.WeakEventManager> methods beforehand.</span></span>  
  
 <span data-ttu-id="6c5ac-103">Der Hauptgrund für die folgenden des WeakEvent-Musters ist, wenn die Ereignisquelle eine Objektlebensdauer enthält, die möglicherweise unabhängig von der Ereignislistener ist.</span><span class="sxs-lookup"><span data-stu-id="6c5ac-103">The principal reason for following the WeakEvent pattern is when the event source has an object lifetime that is potentially independent of the event listeners.</span></span> <span data-ttu-id="6c5ac-104">Mithilfe von zentralen Ereignis Weiterleiten der ein <xref:System.Windows.WeakEventManager> ermöglicht, die die Handlern für Listener Bereinigung gesammelt (oder manuell gelöscht), auch wenn die Lebensdauer der Energiequelle Objekt über die Listener hinausgeht.</span><span class="sxs-lookup"><span data-stu-id="6c5ac-104">Using the central event dispatching of a <xref:System.Windows.WeakEventManager> enables the handlers for listeners to be garbage collected (or manually purged) even if the source object lifetime extends beyond the listeners.</span></span> <span data-ttu-id="6c5ac-105">Im Gegensatz dazu, eine normale ereigniseinbindung mit `+=` oder entsprechende sprachspezifische Ereignissyntax bewirkt, dass die möglicherweise noch verbundene Quelle um einen starken Verweis auf die Handler zu speichern.</span><span class="sxs-lookup"><span data-stu-id="6c5ac-105">By contrast, a normal event hookup using `+=` or equivalent language-specific event syntax causes the potentially still-connected source to hold a strong reference to the handlers.</span></span> <span data-ttu-id="6c5ac-106">Auf diese Weise die Listener-Verweise, von der Garbage collection rechtzeitig.</span><span class="sxs-lookup"><span data-stu-id="6c5ac-106">This keeps the listener references from being garbage collected in a timely fashion.</span></span>  
  
 <span data-ttu-id="6c5ac-107">Eine allgemeine Situation, in denen die Beziehungen zwischen Datenquellen und Listener empfiehlt die Verwendung dieses Musters, ist die Behandlung der Update-Ereignisse, die aus Quellen für datenbindungen.</span><span class="sxs-lookup"><span data-stu-id="6c5ac-107">One common situation where the relationships between sources and listeners suggests the use of this pattern is the handling of update events coming from sources for data bindings.</span></span>  
  
 <span data-ttu-id="6c5ac-108">Sie können das WeakEvent-Muster verwenden, zum Abhören von Ereignissen, die außerhalb der Anwendung sind.</span><span class="sxs-lookup"><span data-stu-id="6c5ac-108">You can use the WeakEvent pattern to listen for events that are external to your application.</span></span> <span data-ttu-id="6c5ac-109">Müssen Sie nur definieren eine <xref:System.Windows.WeakEventManager> , bieten Überwachungsverhalten in <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>, und Verwenden der <xref:System.Windows.WeakEventManager> verweist, fügen Sie den Ereignishandler statt `+=`.</span><span class="sxs-lookup"><span data-stu-id="6c5ac-109">You only need to define a <xref:System.Windows.WeakEventManager> for it, provide listening behavior in <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>, and use the <xref:System.Windows.WeakEventManager> to attach the handler references rather than `+=`.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
  </Docs>
  <Members>
    <Member MemberName="ReceiveWeakEvent">
      <MemberSignature Language="C#" Value="public bool ReceiveWeakEvent (Type managerType, object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReceiveWeakEvent(class System.Type managerType, object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveWeakEvent (managerType As Type, sender As Object, e As EventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveWeakEvent(Type ^ managerType, System::Object ^ sender, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member ReceiveWeakEvent : Type * obj * EventArgs -&gt; bool" Usage="iWeakEventListener.ReceiveWeakEvent (managerType, sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="managerType"><span data-ttu-id="6c5ac-110">Der Typ des <see cref="T:System.Windows.WeakEventManager" />, der diese Methode aufruft.</span><span class="sxs-lookup"><span data-stu-id="6c5ac-110">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</span></span></param>
        <param name="sender"><span data-ttu-id="6c5ac-111">Das Objekt, das das Ereignis ausgelöst hat.</span><span class="sxs-lookup"><span data-stu-id="6c5ac-111">Object that originated the event.</span></span></param>
        <param name="e"><span data-ttu-id="6c5ac-112">Ereignisdaten.</span><span class="sxs-lookup"><span data-stu-id="6c5ac-112">Event data.</span></span></param>
        <summary><span data-ttu-id="6c5ac-113">Empfängt Ereignisse vom zentralen Ereignis-Manager.</span><span class="sxs-lookup"><span data-stu-id="6c5ac-113">Receives events from the centralized event manager.</span></span></summary>
        <returns><span data-ttu-id="6c5ac-114"><see langword="true" />, wenn das Ereignis vom Listener behandelt wurde.</span><span class="sxs-lookup"><span data-stu-id="6c5ac-114"><see langword="true" /> if the listener handled the event.</span></span> <span data-ttu-id="6c5ac-115">Das Registrieren eines Listeners für ein Ereignis, das vom Listener nicht behandelt wird, wird von der <see cref="T:System.Windows.WeakEventManager" />-Behandlung in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] als Fehler angesehen.</span><span class="sxs-lookup"><span data-stu-id="6c5ac-115">It is considered an error by the <see cref="T:System.Windows.WeakEventManager" /> handling in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] to register a listener for an event that the listener does not handle.</span></span> <span data-ttu-id="6c5ac-116">Die Methode sollte jedoch unabhängig davon <see langword="false" /> zurückgeben, wenn ein Ereignis empfangen wird, das nicht erkannt oder nicht behandelt werden kann.</span><span class="sxs-lookup"><span data-stu-id="6c5ac-116">Regardless, the method should return <see langword="false" /> if it receives an event that it does not recognize or handle.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6c5ac-117">Das folgende Beispiel implementiert <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> , zu WeakEvent-Muster unterstützen hypothetisches `ClockwiseSpin` und `CounterclockwiseSpin` , von denen jeder eine dedizierte <xref:System.Windows.WeakEventManager> (nicht dargestellt).</span><span class="sxs-lookup"><span data-stu-id="6c5ac-117">The following example implements <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> to provide WeakEvent pattern support for two hypothetical events `ClockwiseSpin` and `CounterclockwiseSpin` that each have a dedicated <xref:System.Windows.WeakEventManager> (not shown).</span></span> <span data-ttu-id="6c5ac-118">Diese Implementierung ruft Handlerstubs für die Klasse für die einzelnen unterstützten Ereignisse, die Umwandlung der Ereignisdaten (in diesem Fall die beiden Ereignisse gemeinsam einen Ereignisdatentyp `SpinEventArgs`).</span><span class="sxs-lookup"><span data-stu-id="6c5ac-118">This implementation calls class handler stubs for each supported event, casting the event data (in this case the two events share an event data type `SpinEventArgs`).</span></span> <span data-ttu-id="6c5ac-119">Die Implementierung gibt `false` ist das empfangene Ereignis nicht einen, der erwartet wird.</span><span class="sxs-lookup"><span data-stu-id="6c5ac-119">The implementation returns `false` if the event received is not one that is expected.</span></span>  
  
 [!code-csharp[CorePseudocode#IWeakEventListener](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#iweakeventlistener)]
 [!code-vb[CorePseudocode#IWeakEventListener](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#iweakeventlistener)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6c5ac-120">Diese Methode ist vorgesehen, um alle möglichen Ereignisse zu empfangen, in denen der Empfänger in einer Listenerliste ist.</span><span class="sxs-lookup"><span data-stu-id="6c5ac-120">This method is intended to receive all possible events where the receiver is in a listener list.</span></span> <span data-ttu-id="6c5ac-121">Insbesondere dann, wenn für eine Klasse zu implementieren, die auf mehr als ein Ereignis wartet, müssen Sie überprüfen, dass den Typ des eingehenden <paramref name="managerType" /> Parameter, um zu ermitteln, welches Ereignis den Aufruf entspricht.</span><span class="sxs-lookup"><span data-stu-id="6c5ac-121">Particularly if implementing for a class that is listening for more than one event, you must check the type of the incoming <paramref name="managerType" /> parameter in order to know which event the call corresponds to.</span></span> <span data-ttu-id="6c5ac-122">Daher ist jedes Ereignis, das Teil des Musters werden benötigen eine dedizierte <see cref="T:System.Windows.WeakEventManager" />.</span><span class="sxs-lookup"><span data-stu-id="6c5ac-122">This is why each event that is to be part of the pattern must have a dedicated <see cref="T:System.Windows.WeakEventManager" />.</span></span> <span data-ttu-id="6c5ac-123">Darüber hinaus die <paramref name="e" /> Parameter typisiert ist, als die allgemeinen <see cref="T:System.EventArgs" />.</span><span class="sxs-lookup"><span data-stu-id="6c5ac-123">Also, the <paramref name="e" /> parameter is typed as the general <see cref="T:System.EventArgs" />.</span></span> <span data-ttu-id="6c5ac-124">Daher in der Reihenfolge können bestimmten Eigenschaften der Ereignisdaten, Ihre Implementierung müssen in der ereignisspezifischen-Datentyp umgewandelt.</span><span class="sxs-lookup"><span data-stu-id="6c5ac-124">Therefore, in order get any specific properties out of the event data, your implementation will need to cast to the specific event data type.</span></span>  
  
<span data-ttu-id="6c5ac-125">In der Regel nach der Überprüfung der Identität des Ereignisses auf der Grundlage der <see cref="T:System.Windows.WeakEventManager" /> Typ sollte Ihre Implementierung einen Handler für die private Klasse aufrufen.</span><span class="sxs-lookup"><span data-stu-id="6c5ac-125">Typically, after checking for the identity of the event based on the <see cref="T:System.Windows.WeakEventManager" /> type, your implementation should call a private class handler.</span></span> <span data-ttu-id="6c5ac-126">Ihre Klasse Klassenhandler sein der dieselbe Klassenhandler, der verwendet wird, zum Behandeln dieses Ereignisses für Listener, die über das herkömmliche Ereignismuster über hinzufügen hinzugefügt werden <see langword="+=" /> auf das Ereignis für den Absender.</span><span class="sxs-lookup"><span data-stu-id="6c5ac-126">Your class handler could conceivably be the very same class handler that is used to handle that event for listeners that are added through the conventional event pattern of adding via <see langword="+=" /> to the event on the sender.</span></span> <span data-ttu-id="6c5ac-127">Im folgenden Beispielabschnitt bietet es sich um eine grobe Implementierungsvorlage.</span><span class="sxs-lookup"><span data-stu-id="6c5ac-127">The following example section provides a rough implementation template.</span></span></para></block>
        <altmember cref="T:System.Windows.WeakEventManager" />
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="IWeakEventListener" FullName="System.Windows.IWeakEventListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3ebfdb9ce19336f783b2dfdfa69984aebd3d731d" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37492170" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IWeakEventListener" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWeakEventListener" />
  <TypeSignature Language="DocId" Value="T:System.Windows.IWeakEventListener" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWeakEventListener" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWeakEventListener" />
  <TypeSignature Language="F#" Value="type IWeakEventListener = interface" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Unterstützt Klassen, die Ereignisse über das WeakEvent-Muster erwarten, bei der Überwachung von Ereignissen und stellt einen <see cref="T:System.Windows.WeakEventManager" /> bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.WeakEventManager> (ein Verteiler) leitet ein Ereignis durch Aufrufen der <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> Methode für Klassen, die diese Schnittstelle implementieren, und haben durch den Aufruf als Listener hinzugefügt wurden <xref:System.Windows.WeakEventManager> Methoden im voraus.  
  
 Der Hauptgrund für die folgenden des WeakEvent-Musters ist, wenn die Ereignisquelle eine Objektlebensdauer enthält, die möglicherweise unabhängig von der Ereignislistener ist. Mithilfe von zentralen Ereignis Weiterleiten der ein <xref:System.Windows.WeakEventManager> ermöglicht, die die Handlern für Listener Bereinigung gesammelt (oder manuell gelöscht), auch wenn die Lebensdauer der Energiequelle Objekt über die Listener hinausgeht. Im Gegensatz dazu, eine normale ereigniseinbindung mit `+=` oder entsprechende sprachspezifische Ereignissyntax bewirkt, dass die möglicherweise noch verbundene Quelle um einen starken Verweis auf die Handler zu speichern. Auf diese Weise die Listener-Verweise, von der Garbage collection rechtzeitig.  
  
 Eine allgemeine Situation, in denen die Beziehungen zwischen Datenquellen und Listener empfiehlt die Verwendung dieses Musters, ist die Behandlung der Update-Ereignisse, die aus Quellen für datenbindungen.  
  
 Sie können das WeakEvent-Muster verwenden, zum Abhören von Ereignissen, die außerhalb der Anwendung sind. Müssen Sie nur definieren eine <xref:System.Windows.WeakEventManager> , bieten Überwachungsverhalten in <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>, und Verwenden der <xref:System.Windows.WeakEventManager> verweist, fügen Sie den Ereignishandler statt `+=`.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
  </Docs>
  <Members>
    <Member MemberName="ReceiveWeakEvent">
      <MemberSignature Language="C#" Value="public bool ReceiveWeakEvent (Type managerType, object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReceiveWeakEvent(class System.Type managerType, object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveWeakEvent (managerType As Type, sender As Object, e As EventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveWeakEvent(Type ^ managerType, System::Object ^ sender, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member ReceiveWeakEvent : Type * obj * EventArgs -&gt; bool" Usage="iWeakEventListener.ReceiveWeakEvent (managerType, sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="managerType">Der Typ des <see cref="T:System.Windows.WeakEventManager" />, der diese Methode aufruft.</param>
        <param name="sender">Das Objekt, das das Ereignis ausgelöst hat.</param>
        <param name="e">Ereignisdaten.</param>
        <summary>Empfängt Ereignisse vom zentralen Ereignis-Manager.</summary>
        <returns>
          <see langword="true" />, wenn das Ereignis vom Listener behandelt wurde. Das Registrieren eines Listeners für ein Ereignis, das vom Listener nicht behandelt wird, wird von der <see cref="T:System.Windows.WeakEventManager" />-Behandlung in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] als Fehler angesehen. Die Methode sollte jedoch unabhängig davon <see langword="false" /> zurückgeben, wenn ein Ereignis empfangen wird, das nicht erkannt oder nicht behandelt werden kann.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel implementiert <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> , zu WeakEvent-Muster unterstützen hypothetisches `ClockwiseSpin` und `CounterclockwiseSpin` , von denen jeder eine dedizierte <xref:System.Windows.WeakEventManager> (nicht dargestellt). Diese Implementierung ruft Handlerstubs für die Klasse für die einzelnen unterstützten Ereignisse, die Umwandlung der Ereignisdaten (in diesem Fall die beiden Ereignisse gemeinsam einen Ereignisdatentyp `SpinEventArgs`). Die Implementierung gibt `false` ist das empfangene Ereignis nicht einen, der erwartet wird.  
  
 [!code-csharp[CorePseudocode#IWeakEventListener](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#iweakeventlistener)]
 [!code-vb[CorePseudocode#IWeakEventListener](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#iweakeventlistener)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Diese Methode ist vorgesehen, um alle möglichen Ereignisse zu empfangen, in denen der Empfänger in einer Listenerliste ist. Insbesondere dann, wenn für eine Klasse zu implementieren, die auf mehr als ein Ereignis wartet, müssen Sie überprüfen, dass den Typ des eingehenden <paramref name="managerType" /> Parameter, um zu ermitteln, welches Ereignis den Aufruf entspricht. Daher ist jedes Ereignis, das Teil des Musters werden benötigen eine dedizierte <see cref="T:System.Windows.WeakEventManager" />. Darüber hinaus die <paramref name="e" /> Parameter typisiert ist, als die allgemeinen <see cref="T:System.EventArgs" />. Daher in der Reihenfolge können bestimmten Eigenschaften der Ereignisdaten, Ihre Implementierung müssen in der ereignisspezifischen-Datentyp umgewandelt.  In der Regel nach der Überprüfung der Identität des Ereignisses auf der Grundlage der <see cref="T:System.Windows.WeakEventManager" /> Typ sollte Ihre Implementierung einen Handler für die private Klasse aufrufen. Ihre Klasse Klassenhandler sein der dieselbe Klassenhandler, der verwendet wird, zum Behandeln dieses Ereignisses für Listener, die über das herkömmliche Ereignismuster über hinzufügen hinzugefügt werden <see langword="+=" /> auf das Ereignis für den Absender. Im folgenden Beispielabschnitt bietet es sich um eine grobe Implementierungsvorlage.</para>
        </block>
        <altmember cref="T:System.Windows.WeakEventManager" />
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="IWeakEventListener" FullName="System.Windows.IWeakEventListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="756056d75471bc5df7d056483b16f2e6c5a72f82" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="82341306" /></Metadata><TypeSignature Language="C#" Value="public interface IWeakEventListener" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWeakEventListener" />
  <TypeSignature Language="DocId" Value="T:System.Windows.IWeakEventListener" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWeakEventListener" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWeakEventListener" />
  <TypeSignature Language="F#" Value="type IWeakEventListener = interface" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Unterstützt Klassen, die Ereignisse über das WeakEvent-Muster erwarten, bei der Überwachung von Ereignissen und stellt einen <see cref="T:System.Windows.WeakEventManager" /> bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.WeakEventManager>(Ein Verteiler) leitet ein Ereignis durch Aufrufen der- <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> Methode für Klassen weiter, die diese Schnittstelle implementieren, und die als Listener hinzugefügt wurden, indem <xref:System.Windows.WeakEventManager> Methoden vorher aufgerufen wurden.  
  
 Der Hauptgrund für das Muster von WeakEvent besteht darin, dass die Ereignis Quelle über eine Objekt Lebensdauer verfügt, die potenziell unabhängig von den Ereignislistenern ist. Durch die Verwendung der zentralen Ereignis Verteilung eines <xref:System.Windows.WeakEventManager> können die Handler für Listener in eine Garbage Collection (oder manuell gelöscht) werden, auch wenn die Lebensdauer des Quell Objekts über die Listener hinausgeht. Im Gegensatz dazu bewirkt eine normale Ereignis Einbindung mit `+=` oder einer entsprechenden sprachspezifischen Ereignis Syntax, dass die möglicherweise noch verbundene Quelle einen starken Verweis auf die Handler enthält. Dadurch wird verhindert, dass die listenerverweise rechtzeitig bereinigt werden.  
  
 Eine häufige Situation, in der die Beziehungen zwischen Quellen und Listenern die Verwendung dieses Musters nahelegen, ist die Behandlung von Update Ereignissen aus Quellen für Daten Bindungen.  
  
 Sie können das WeakEvent-Muster verwenden, um auf Ereignisse zu lauschen, die sich außerhalb Ihrer Anwendung befinden. Sie müssen nur eine <xref:System.Windows.WeakEventManager> für die IT definieren, das Überwachungs Verhalten in bereitstellen <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> und zum <xref:System.Windows.WeakEventManager> Anfügen der Handlerverweise anstelle von verwenden `+=` .  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
  </Docs>
  <Members>
    <Member MemberName="ReceiveWeakEvent">
      <MemberSignature Language="C#" Value="public bool ReceiveWeakEvent (Type managerType, object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReceiveWeakEvent(class System.Type managerType, object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveWeakEvent (managerType As Type, sender As Object, e As EventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveWeakEvent(Type ^ managerType, System::Object ^ sender, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member ReceiveWeakEvent : Type * obj * EventArgs -&gt; bool" Usage="iWeakEventListener.ReceiveWeakEvent (managerType, sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="managerType">Der Typ des <see cref="T:System.Windows.WeakEventManager" />, der diese Methode aufruft.</param>
        <param name="sender">Das Objekt, das das Ereignis ausgelöst hat.</param>
        <param name="e">Ereignisdaten.</param>
        <summary>Empfängt Ereignisse vom zentralen Ereignis-Manager.</summary>
        <returns><see langword="true" />, wenn das Ereignis vom Listener behandelt wurde. Das Registrieren eines Listeners für ein Ereignis, das vom Listener nicht behandelt wird, wird von der <see cref="T:System.Windows.WeakEventManager" />-Behandlung in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] als Fehler angesehen. Die Methode sollte jedoch unabhängig davon <see langword="false" /> zurückgeben, wenn ein Ereignis empfangen wird, das nicht erkannt oder nicht behandelt werden kann.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird implementiert <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> , um die Unterstützung von WeakEvent-Mustern für zwei hypothetische Ereignisse bereitzustellen `ClockwiseSpin` `CounterclockwiseSpin` , und jede verfügt über eine dedizierte <xref:System.Windows.WeakEventManager> (nicht angezeigt) Diese Implementierung ruft klassenhandlerstubdaten für jedes unterstützte Ereignis auf und wandelt die Ereignisdaten um (in diesem Fall verwenden die beiden Ereignisse einen Ereignis Datentyp gemeinsam `SpinEventArgs` ). Die-Implementierung gibt zurück `false` , wenn das empfangene Ereignis nicht erwartet wird.  
  
 [!code-csharp[CorePseudocode#IWeakEventListener](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#iweakeventlistener)]
 [!code-vb[CorePseudocode#IWeakEventListener](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#iweakeventlistener)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Diese Methode soll alle möglichen Ereignisse empfangen, bei denen sich der Empfänger in einer Listenerliste befindet. Insbesondere bei der Implementierung von für eine Klasse, die mehr als ein Ereignis überwacht, müssen Sie den Typ des eingehenden Parameters überprüfen, um zu ermitteln, <paramref name="managerType" /> welchem Ereignis der-Befehl entspricht. Aus diesem Grund muss jedes Ereignis, das Teil des Musters sein soll, über ein dediziertes verfügen <see cref="T:System.Windows.WeakEventManager" /> . Außerdem wird der- <paramref name="e" /> Parameter als allgemeine typisiert <see cref="T:System.EventArgs" /> . Um daher bestimmte Eigenschaften aus den Ereignisdaten zu erhalten, muss Ihre Implementierung in den spezifischen Ereignis Datentyp umgewandelt werden.  
  
Nach der Überprüfung der Identität des Ereignisses basierend auf dem <see cref="T:System.Windows.WeakEventManager" /> Typ sollte Ihre Implementierung in der Regel einen privaten Klassen Handler aufzurufen. Der Klassen Handler ist möglicherweise der gleiche Klassen Handler, der verwendet wird, um dieses Ereignis für Listener zu verarbeiten, die über das konventionelle Ereignis Muster hinzugefügt werden, <see langword="+=" /> um dem-Ereignis für den Absender das Hinzufügen von Via zum-Ereignis hinzuzufügen. Der folgende Beispiel Abschnitt enthält eine grobe Implementierungs Vorlage.</para></block>
        <altmember cref="T:System.Windows.WeakEventManager" />
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="IWeakEventListener" FullName="System.Windows.IWeakEventListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="756056d75471bc5df7d056483b16f2e6c5a72f82" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="82341306" /></Metadata><TypeSignature Language="C#" Value="public interface IWeakEventListener" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWeakEventListener" />
  <TypeSignature Language="DocId" Value="T:System.Windows.IWeakEventListener" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWeakEventListener" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWeakEventListener" />
  <TypeSignature Language="F#" Value="type IWeakEventListener = interface" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="a912f-101">Unterstützt Klassen, die Ereignisse über das WeakEvent-Muster erwarten, bei der Überwachung von Ereignissen und stellt einen <see cref="T:System.Windows.WeakEventManager" /> bereit.</span><span class="sxs-lookup"><span data-stu-id="a912f-101">Provides event listening support for classes that expect to receive events through the WeakEvent pattern and a <see cref="T:System.Windows.WeakEventManager" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a912f-102"><xref:System.Windows.WeakEventManager>(Ein Verteiler) leitet ein Ereignis durch Aufrufen der- <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> Methode für Klassen weiter, die diese Schnittstelle implementieren, und die als Listener hinzugefügt wurden, indem <xref:System.Windows.WeakEventManager> Methoden vorher aufgerufen wurden.</span><span class="sxs-lookup"><span data-stu-id="a912f-102">The <xref:System.Windows.WeakEventManager> (a dispatcher) forwards an event by calling the <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> method on classes that implement this interface, and that have been added as listeners by calling <xref:System.Windows.WeakEventManager> methods beforehand.</span></span>  
  
 <span data-ttu-id="a912f-103">Der Hauptgrund für das Muster von WeakEvent besteht darin, dass die Ereignis Quelle über eine Objekt Lebensdauer verfügt, die potenziell unabhängig von den Ereignislistenern ist.</span><span class="sxs-lookup"><span data-stu-id="a912f-103">The principal reason for following the WeakEvent pattern is when the event source has an object lifetime that is potentially independent of the event listeners.</span></span> <span data-ttu-id="a912f-104">Durch die Verwendung der zentralen Ereignis Verteilung eines <xref:System.Windows.WeakEventManager> können die Handler für Listener in eine Garbage Collection (oder manuell gelöscht) werden, auch wenn die Lebensdauer des Quell Objekts über die Listener hinausgeht.</span><span class="sxs-lookup"><span data-stu-id="a912f-104">Using the central event dispatching of a <xref:System.Windows.WeakEventManager> enables the handlers for listeners to be garbage collected (or manually purged) even if the source object lifetime extends beyond the listeners.</span></span> <span data-ttu-id="a912f-105">Im Gegensatz dazu bewirkt eine normale Ereignis Einbindung mit `+=` oder einer entsprechenden sprachspezifischen Ereignis Syntax, dass die möglicherweise noch verbundene Quelle einen starken Verweis auf die Handler enthält.</span><span class="sxs-lookup"><span data-stu-id="a912f-105">By contrast, a normal event hookup using `+=` or equivalent language-specific event syntax causes the potentially still-connected source to hold a strong reference to the handlers.</span></span> <span data-ttu-id="a912f-106">Dadurch wird verhindert, dass die listenerverweise rechtzeitig bereinigt werden.</span><span class="sxs-lookup"><span data-stu-id="a912f-106">This keeps the listener references from being garbage collected in a timely fashion.</span></span>  
  
 <span data-ttu-id="a912f-107">Eine häufige Situation, in der die Beziehungen zwischen Quellen und Listenern die Verwendung dieses Musters nahelegen, ist die Behandlung von Update Ereignissen aus Quellen für Daten Bindungen.</span><span class="sxs-lookup"><span data-stu-id="a912f-107">One common situation where the relationships between sources and listeners suggests the use of this pattern is the handling of update events coming from sources for data bindings.</span></span>  
  
 <span data-ttu-id="a912f-108">Sie können das WeakEvent-Muster verwenden, um auf Ereignisse zu lauschen, die sich außerhalb Ihrer Anwendung befinden.</span><span class="sxs-lookup"><span data-stu-id="a912f-108">You can use the WeakEvent pattern to listen for events that are external to your application.</span></span> <span data-ttu-id="a912f-109">Sie müssen nur eine <xref:System.Windows.WeakEventManager> für die IT definieren, das Überwachungs Verhalten in bereitstellen <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> und zum <xref:System.Windows.WeakEventManager> Anfügen der Handlerverweise anstelle von verwenden `+=` .</span><span class="sxs-lookup"><span data-stu-id="a912f-109">You only need to define a <xref:System.Windows.WeakEventManager> for it, provide listening behavior in <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>, and use the <xref:System.Windows.WeakEventManager> to attach the handler references rather than `+=`.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
  </Docs>
  <Members>
    <Member MemberName="ReceiveWeakEvent">
      <MemberSignature Language="C#" Value="public bool ReceiveWeakEvent (Type managerType, object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReceiveWeakEvent(class System.Type managerType, object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveWeakEvent (managerType As Type, sender As Object, e As EventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveWeakEvent(Type ^ managerType, System::Object ^ sender, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member ReceiveWeakEvent : Type * obj * EventArgs -&gt; bool" Usage="iWeakEventListener.ReceiveWeakEvent (managerType, sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="managerType"><span data-ttu-id="a912f-110">Der Typ des <see cref="T:System.Windows.WeakEventManager" />, der diese Methode aufruft.</span><span class="sxs-lookup"><span data-stu-id="a912f-110">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</span></span></param>
        <param name="sender"><span data-ttu-id="a912f-111">Das Objekt, das das Ereignis ausgelöst hat.</span><span class="sxs-lookup"><span data-stu-id="a912f-111">Object that originated the event.</span></span></param>
        <param name="e"><span data-ttu-id="a912f-112">Ereignisdaten.</span><span class="sxs-lookup"><span data-stu-id="a912f-112">Event data.</span></span></param>
        <summary><span data-ttu-id="a912f-113">Empfängt Ereignisse vom zentralen Ereignis-Manager.</span><span class="sxs-lookup"><span data-stu-id="a912f-113">Receives events from the centralized event manager.</span></span></summary>
        <returns><span data-ttu-id="a912f-114"><see langword="true" />, wenn das Ereignis vom Listener behandelt wurde.</span><span class="sxs-lookup"><span data-stu-id="a912f-114"><see langword="true" /> if the listener handled the event.</span></span> <span data-ttu-id="a912f-115">Das Registrieren eines Listeners für ein Ereignis, das vom Listener nicht behandelt wird, wird von der <see cref="T:System.Windows.WeakEventManager" />-Behandlung in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] als Fehler angesehen.</span><span class="sxs-lookup"><span data-stu-id="a912f-115">It is considered an error by the <see cref="T:System.Windows.WeakEventManager" /> handling in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] to register a listener for an event that the listener does not handle.</span></span> <span data-ttu-id="a912f-116">Die Methode sollte jedoch unabhängig davon <see langword="false" /> zurückgeben, wenn ein Ereignis empfangen wird, das nicht erkannt oder nicht behandelt werden kann.</span><span class="sxs-lookup"><span data-stu-id="a912f-116">Regardless, the method should return <see langword="false" /> if it receives an event that it does not recognize or handle.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a912f-117">Im folgenden Beispiel wird implementiert <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> , um die Unterstützung von WeakEvent-Mustern für zwei hypothetische Ereignisse bereitzustellen `ClockwiseSpin` `CounterclockwiseSpin` , und jede verfügt über eine dedizierte <xref:System.Windows.WeakEventManager> (nicht angezeigt)</span><span class="sxs-lookup"><span data-stu-id="a912f-117">The following example implements <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> to provide WeakEvent pattern support for two hypothetical events `ClockwiseSpin` and `CounterclockwiseSpin` that each have a dedicated <xref:System.Windows.WeakEventManager> (not shown).</span></span> <span data-ttu-id="a912f-118">Diese Implementierung ruft klassenhandlerstubdaten für jedes unterstützte Ereignis auf und wandelt die Ereignisdaten um (in diesem Fall verwenden die beiden Ereignisse einen Ereignis Datentyp gemeinsam `SpinEventArgs` ).</span><span class="sxs-lookup"><span data-stu-id="a912f-118">This implementation calls class handler stubs for each supported event, casting the event data (in this case the two events share an event data type `SpinEventArgs`).</span></span> <span data-ttu-id="a912f-119">Die-Implementierung gibt zurück `false` , wenn das empfangene Ereignis nicht erwartet wird.</span><span class="sxs-lookup"><span data-stu-id="a912f-119">The implementation returns `false` if the event received is not one that is expected.</span></span>  
  
 [!code-csharp[CorePseudocode#IWeakEventListener](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#iweakeventlistener)]
 [!code-vb[CorePseudocode#IWeakEventListener](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#iweakeventlistener)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a912f-120">Diese Methode soll alle möglichen Ereignisse empfangen, bei denen sich der Empfänger in einer Listenerliste befindet.</span><span class="sxs-lookup"><span data-stu-id="a912f-120">This method is intended to receive all possible events where the receiver is in a listener list.</span></span> <span data-ttu-id="a912f-121">Insbesondere bei der Implementierung von für eine Klasse, die mehr als ein Ereignis überwacht, müssen Sie den Typ des eingehenden Parameters überprüfen, um zu ermitteln, <paramref name="managerType" /> welchem Ereignis der-Befehl entspricht.</span><span class="sxs-lookup"><span data-stu-id="a912f-121">Particularly if implementing for a class that is listening for more than one event, you must check the type of the incoming <paramref name="managerType" /> parameter in order to know which event the call corresponds to.</span></span> <span data-ttu-id="a912f-122">Aus diesem Grund muss jedes Ereignis, das Teil des Musters sein soll, über ein dediziertes verfügen <see cref="T:System.Windows.WeakEventManager" /> .</span><span class="sxs-lookup"><span data-stu-id="a912f-122">This is why each event that is to be part of the pattern must have a dedicated <see cref="T:System.Windows.WeakEventManager" />.</span></span> <span data-ttu-id="a912f-123">Außerdem wird der- <paramref name="e" /> Parameter als allgemeine typisiert <see cref="T:System.EventArgs" /> .</span><span class="sxs-lookup"><span data-stu-id="a912f-123">Also, the <paramref name="e" /> parameter is typed as the general <see cref="T:System.EventArgs" />.</span></span> <span data-ttu-id="a912f-124">Um daher bestimmte Eigenschaften aus den Ereignisdaten zu erhalten, muss Ihre Implementierung in den spezifischen Ereignis Datentyp umgewandelt werden.</span><span class="sxs-lookup"><span data-stu-id="a912f-124">Therefore, in order get any specific properties out of the event data, your implementation will need to cast to the specific event data type.</span></span>  
  
<span data-ttu-id="a912f-125">Nach der Überprüfung der Identität des Ereignisses basierend auf dem <see cref="T:System.Windows.WeakEventManager" /> Typ sollte Ihre Implementierung in der Regel einen privaten Klassen Handler aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="a912f-125">Typically, after checking for the identity of the event based on the <see cref="T:System.Windows.WeakEventManager" /> type, your implementation should call a private class handler.</span></span> <span data-ttu-id="a912f-126">Der Klassen Handler ist möglicherweise der gleiche Klassen Handler, der verwendet wird, um dieses Ereignis für Listener zu verarbeiten, die über das konventionelle Ereignis Muster hinzugefügt werden, <see langword="+=" /> um dem-Ereignis für den Absender das Hinzufügen von Via zum-Ereignis hinzuzufügen.</span><span class="sxs-lookup"><span data-stu-id="a912f-126">Your class handler could conceivably be the very same class handler that is used to handle that event for listeners that are added through the conventional event pattern of adding via <see langword="+=" /> to the event on the sender.</span></span> <span data-ttu-id="a912f-127">Der folgende Beispiel Abschnitt enthält eine grobe Implementierungs Vorlage.</span><span class="sxs-lookup"><span data-stu-id="a912f-127">The following example section provides a rough implementation template.</span></span></para></block>
        <altmember cref="T:System.Windows.WeakEventManager" />
      </Docs>
    </Member>
  </Members>
</Type>

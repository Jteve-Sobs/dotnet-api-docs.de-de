<Type Name="CoerceValueCallback" FullName="System.Windows.CoerceValueCallback">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3549f194d7f55a1cd29ab7244ea240a4064e7850" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82342567" /></Metadata><TypeSignature Language="C#" Value="public delegate object CoerceValueCallback(DependencyObject d, object baseValue);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CoerceValueCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.CoerceValueCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function CoerceValueCallback(d As DependencyObject, baseValue As Object) As Object " />
  <TypeSignature Language="C++ CLI" Value="public delegate System::Object ^ CoerceValueCallback(DependencyObject ^ d, System::Object ^ baseValue);" />
  <TypeSignature Language="F#" Value="type CoerceValueCallback = delegate of DependencyObject * obj -&gt; obj" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="d" Type="System.Windows.DependencyObject" />
    <Parameter Name="baseValue" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Object</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="d">Das Objekt, für das die Eigenschaft vorhanden ist. Wenn der Rückruf aufgerufen wird, übergibt das Eigenschaftensystem diesen Wert.</param>
    <param name="baseValue">Der neue Wert der Eigenschaft vor einem Umwandlungsversuch.</param>
    <summary>Stellt eine Vorlage für eine Methode bereit, die aufgerufen wird, wenn der Wert einer Abhängigkeitseigenschaft erneut ausgewertet wird oder wenn ausdrücklich eine Umwandlung angefordert wird.</summary>
    <returns>Der umgewandelte Wert (mit dem entsprechenden Typ).</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rückrufe, die auf <xref:System.Windows.CoerceValueCallback> basieren, können mithilfe verschiedener Verfahren einer Abhängigkeits Eigenschaft zugewiesen werden. Jede dieser Techniken erfordert, dass Sie zunächst ein neues eigenschaftenmetadatenobjekt erstellen (<xref:System.Windows.PropertyMetadata>oder eine abgeleitete Klasse, z. b. <xref:System.Windows.FrameworkPropertyMetadata>). Erstellen Sie das Metadatenobjekt, indem Sie eine Konstruktorsignatur verwenden, die den `coerceValueCallback`-Parameter annimmt, und weisen Sie diesen Parameter Ihrem Rückruf Handler zu. Oder erstellen Sie die Metadaten durch eine beliebige Signatur, und legen Sie die <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>-Eigenschaft vor dem Einfügen der verwendeten Metadaten fest.  
  
 Wenn Sie über diese Metadaten verfügen, können Sie folgende Aktionen ausführen:  
  
-   Definieren Sie eine neue Abhängigkeits Eigenschaft für eine neue Klasse, wobei Sie entweder eine Signatur von <xref:System.Windows.DependencyProperty.Register%2A>verwenden und die Metadaten als `typeMetadata` Wert angeben.  
  
-   Überschreiben Sie die Metadaten (Call<xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>) für eine vorhandene Abhängigkeits Eigenschaft, wenn Sie von der Klasse ableiten, die die Abhängigkeits Eigenschaft besitzt.  
  
-   Fügen Sie einer neuen <xref:System.Windows.DependencyObject> Klasse eine vorhandene Abhängigkeits Eigenschaft hinzu, indem Sie die neuen Metadaten aufrufen, indem Sie <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>aufrufen.  
  
 Implementierungen dieses Rückrufs sollten den Wert in `baseValue` überprüfen und entweder basierend auf dem Wert oder dem Typ ermitteln, ob es sich um einen Wert handelt, der weiter umgewandelt werden muss.  
  
 Der <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> für eine Abhängigkeits Eigenschaft wird immer dann aufgerufen, wenn das Eigenschaften System oder ein anderer Aufrufer <xref:System.Windows.DependencyObject.CoerceValue%2A> in einer <xref:System.Windows.DependencyObject> Instanz aufruft, wobei der Bezeichner der Eigenschaft als `dp`angegeben wird.  
  
 Änderungen am Eigenschafts Wert können von einem beliebigen möglichen Teilnehmer im Eigenschaften System stammen. Dies schließt Stile, generische Invalidierung, Trigger, Eigenschafts Wert Vererbung und lokale Wert Einstellungen ein.  
  
 Im Allgemeinen sollten Sie nicht mehr als eine <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> für eine bestimmte Abhängigkeits Eigenschaft angeben (außer Kraft setzen oder mit neuen Metadaten für eine Abhängigkeits Eigenschaft hinzufügen, die bereits eine <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>hatte). Nur einer der Rückrufe ist in der Lage, zu agieren. Der aktive Rückruf ist der, der auf die am meisten abgeleitete Klasse in der Vererbung im Vergleich zum <xref:System.Windows.DependencyObject> Aufrufer angewendet wurde. Andere Rückrufe, die Metadaten für die Abhängigkeits Eigenschaft zugeordnet sind, wie Sie in der Besitzer Hierarchie höher vorhanden waren, werden ersetzt, wenn die Metadaten überschrieben werden.  
  
   
  
## Examples  
 Das folgende Beispiel schließt eine Implementierung dieses Rückrufs ein, um den gespeicherten Wert einer Abhängigkeits Eigenschaft auf der Grundlage anderer Eingaben (z. b. eines anderen Eigenschafts Werts) umzuleiten. In diesem Fall prüft der Rückruf, ob die `ShirtType`-Eigenschaft einem Shirt-Typ entspricht, der über Schaltflächen verfügt. Wenn dies der Fall ist, wird eine Standardfarbe für den `ButtonColor`festgelegt. wenn der Shirt-Typ keine Schaltflächen aufweist, wird der `ButtonColor` Wert zurück in einen Startwert umgewandelt, der bewirkt, dass der [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] (nicht angezeigt) diese Dropdown Liste aus den effektiven Optionen entfernt.  
  
 [!code-csharp[DPCustom#CoerceValueCallback](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#coercevaluecallback)]
 [!code-vb[DPCustom#CoerceValueCallback](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#coercevaluecallback)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
</Type>

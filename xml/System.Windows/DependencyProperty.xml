<Type Name="DependencyProperty" FullName="System.Windows.DependencyProperty">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2124cc045baaa4ee9bb0c7eaad463009085b854f" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83533017" /></Metadata><TypeSignature Language="C#" Value="public sealed class DependencyProperty" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyProperty extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyProperty" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyProperty" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyProperty sealed" />
  <TypeSignature Language="F#" Value="type DependencyProperty = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Markup.DependencyPropertyConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.DependencyPropertyValueSerializer))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Markup.DependencyPropertyConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="c868b-101">Stellt eine Eigenschaft dar, die durch Methoden festgelegt werden kann, z. B. Formatierung, Datenbindung, Animation und Vererbung.</span><span class="sxs-lookup"><span data-stu-id="c868b-101">Represents a property that can be set through methods such as, styling, data binding, animation, and inheritance.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c868b-102">Ein <xref:System.Windows.DependencyProperty> unterstützt die folgenden Funktionen in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]:</span><span class="sxs-lookup"><span data-stu-id="c868b-102">A <xref:System.Windows.DependencyProperty> supports the following capabilities in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]:</span></span>  
  
-   <span data-ttu-id="c868b-103">Die-Eigenschaft kann in einem Stil festgelegt werden.</span><span class="sxs-lookup"><span data-stu-id="c868b-103">The property can be set in a style.</span></span> <span data-ttu-id="c868b-104">Weitere Informationen finden Sie unter [Erstellen von Formaten und Vorlagen](~/docs/framework/wpf/controls/styling-and-templating.md).</span><span class="sxs-lookup"><span data-stu-id="c868b-104">For more information, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
-   <span data-ttu-id="c868b-105">Die-Eigenschaft kann durch Datenbindung festgelegt werden.</span><span class="sxs-lookup"><span data-stu-id="c868b-105">The property can be set through data binding.</span></span> <span data-ttu-id="c868b-106">Weitere Informationen zu den Abhängigkeits Eigenschaften von Daten Bindungen finden Sie unter Gewusst [wie: Binden der Eigenschaften von zwei Steuerelementen](~/docs/framework/wpf/data/how-to-bind-the-properties-of-two-controls.md).</span><span class="sxs-lookup"><span data-stu-id="c868b-106">For more information about data binding dependency properties, see [How to: Bind the Properties of Two Controls](~/docs/framework/wpf/data/how-to-bind-the-properties-of-two-controls.md).</span></span>  
  
-   <span data-ttu-id="c868b-107">Die-Eigenschaft kann mit einem dynamischen Ressourcen Verweis festgelegt werden.</span><span class="sxs-lookup"><span data-stu-id="c868b-107">The property can be set with a dynamic resource reference.</span></span> <span data-ttu-id="c868b-108">Weitere Informationen finden Sie unter [XAML-Ressourcen](~/docs/framework/wpf/advanced/xaml-resources.md).</span><span class="sxs-lookup"><span data-stu-id="c868b-108">For more information, see [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
-   <span data-ttu-id="c868b-109">Die-Eigenschaft kann ihren Wert automatisch von einem übergeordneten Element in der-Elementstruktur erben.</span><span class="sxs-lookup"><span data-stu-id="c868b-109">The property can inherit its value automatically from a parent element in the element tree.</span></span> <span data-ttu-id="c868b-110">Weitere Informationen finden Sie unter [ Vererbung von Eigenschaftswerten](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="c868b-110">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
-   <span data-ttu-id="c868b-111">Die-Eigenschaft kann animiert werden.</span><span class="sxs-lookup"><span data-stu-id="c868b-111">The property can be animated.</span></span> <span data-ttu-id="c868b-112">Weitere Informationen finden Sie unter [Übersicht über Animation](~/docs/framework/wpf/graphics-multimedia/animation-overview.md).</span><span class="sxs-lookup"><span data-stu-id="c868b-112">For more information, see [Animation Overview](~/docs/framework/wpf/graphics-multimedia/animation-overview.md).</span></span>  
  
-   <span data-ttu-id="c868b-113">Die-Eigenschaft kann melden, wenn der vorherige Wert der-Eigenschaft geändert wurde und der-Eigenschafts Wert erzwungen werden kann.</span><span class="sxs-lookup"><span data-stu-id="c868b-113">The property can report when the previous value of the property has been changed and the property value can be coerced.</span></span> <span data-ttu-id="c868b-114">Weitere Informationen finden Sie unter [Rückrufe und Validierung von Abhängigkeitseigenschaften](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="c868b-114">For more information, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
-   <span data-ttu-id="c868b-115">Die-Eigenschaft meldet Informationen an [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], z. b. ob beim Ändern eines Eigenschafts Werts das Layoutsystem eine Neukomposition der visuellen Elemente für ein Element erfordern muss.</span><span class="sxs-lookup"><span data-stu-id="c868b-115">The property reports information to [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], such as whether changing a property value should require the layout system to recompose the visuals for an element.</span></span>  
  
-   <span data-ttu-id="c868b-116">Die-Eigenschaft erhält Unterstützung in der [!INCLUDE[wpfdesigner_current_long](~/includes/wpfdesigner-current-long-md.md)].</span><span class="sxs-lookup"><span data-stu-id="c868b-116">The property receives support in the [!INCLUDE[wpfdesigner_current_long](~/includes/wpfdesigner-current-long-md.md)].</span></span>  <span data-ttu-id="c868b-117">Beispielsweise kann die-Eigenschaft im **Eigenschaften** Fenster bearbeitet werden.</span><span class="sxs-lookup"><span data-stu-id="c868b-117">For example, the property can be edited in the **Properties** window.</span></span>  
  
 <span data-ttu-id="c868b-118">Weitere Informationen zu Abhängigkeits Eigenschaften finden Sie unter [Übersicht über Abhängigkeits Eigenschaften](~/docs/framework/wpf/advanced/dependency-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="c868b-118">To learn more about dependency properties, see [Dependency Properties Overview](~/docs/framework/wpf/advanced/dependency-properties-overview.md).</span></span> <span data-ttu-id="c868b-119">Wenn Sie möchten, dass Eigenschaften von benutzerdefinierten Typen die Funktionen in der vorangehenden Liste unterstützen, sollten Sie eine Abhängigkeits Eigenschaft erstellen.</span><span class="sxs-lookup"><span data-stu-id="c868b-119">If you want properties on your custom types to support the capabilities in the preceding list, you should create a dependency property.</span></span>  <span data-ttu-id="c868b-120">Informationen zum Erstellen von benutzerdefinierten Abhängigkeits Eigenschaften finden Sie unter [benutzerdefinierte Abhängigkeits Eigenschaften](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="c868b-120">To learn how to create custom dependency properties, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span></span>  
  
 <span data-ttu-id="c868b-121">Eine angefügte Eigenschaft ist eine Eigenschaft, mit der jedes Objektinformationen an den Typ melden kann, der die angefügte Eigenschaft definiert.</span><span class="sxs-lookup"><span data-stu-id="c868b-121">An attached property is a property that enables any object to report information to the type that defines the attached property.</span></span> <span data-ttu-id="c868b-122">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]kann jeder Typ, der von <xref:System.Windows.DependencyObject> erbt, eine angefügte Eigenschaft verwenden, unabhängig davon, ob der Typ von dem Typ erbt, der die Eigenschaft definiert.</span><span class="sxs-lookup"><span data-stu-id="c868b-122">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], any type that inherits from <xref:System.Windows.DependencyObject> can use an attached property regardless of whether the type inherits from the type that defines the property.</span></span> <span data-ttu-id="c868b-123">Eine angefügte Eigenschaft ist eine Funktion der [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Sprache.</span><span class="sxs-lookup"><span data-stu-id="c868b-123">An attached property is a feature of the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language.</span></span>  <span data-ttu-id="c868b-124">Wenn Sie eine angefügte Eigenschaft in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]festlegen möchten, verwenden Sie den *besitztyp*. *propertyName* -Syntax.</span><span class="sxs-lookup"><span data-stu-id="c868b-124">To set an attached property in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], use the *ownerType*.*propertyName* syntax.</span></span> <span data-ttu-id="c868b-125">Ein Beispiel für eine angefügte Eigenschaft ist die <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType>-Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-125">An example of an attached property is the <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="c868b-126">Wenn Sie eine Eigenschaft erstellen möchten, die für alle <xref:System.Windows.DependencyObject> Typen verwendet werden kann, sollten Sie eine angefügte Eigenschaft erstellen.</span><span class="sxs-lookup"><span data-stu-id="c868b-126">If you want to create a property that can be used on all <xref:System.Windows.DependencyObject> types, then you should create an attached property.</span></span> <span data-ttu-id="c868b-127">Weitere Informationen zu angefügten Eigenschaften, einschließlich ihrer Erstellung, finden Sie unter [Übersicht über angefügte Eigenschaften](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="c868b-127">To learn more about attached properties, including how to create them, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
<a name="xamlAttributeUsage_DependencyProperty"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="c868b-128">Verwendung von XAML-Attributen</span><span class="sxs-lookup"><span data-stu-id="c868b-128">XAML Attribute Usage</span></span>  
  
```xaml 
<object property="dependencyPropertyName"/>  
```

<span data-ttu-id="c868b-129">- oder -</span><span class="sxs-lookup"><span data-stu-id="c868b-129">-or-</span></span>

```xaml
<object property="ownerType.dependencyPropertyName"/>  
```

<span data-ttu-id="c868b-130">- oder -</span><span class="sxs-lookup"><span data-stu-id="c868b-130">-or-</span></span>

```xaml
<object property="attachedPropertyOwnerType.attachedPropertyName"/>  
```  
  
<a name="xamlValues_DependencyProperty"></a>   
## <a name="xaml-values"></a><span data-ttu-id="c868b-131">XAML-Werte</span><span class="sxs-lookup"><span data-stu-id="c868b-131">XAML Values</span></span>  
 `dependencyPropertyName`  
 <span data-ttu-id="c868b-132">Eine Zeichenfolge, die den <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType> der gewünschten Abhängigkeits Eigenschaft angibt.</span><span class="sxs-lookup"><span data-stu-id="c868b-132">A string that specifies the <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType> of the desired dependency property.</span></span> <span data-ttu-id="c868b-133">Diesem kann ein XML-Namespace Präfix vorangestellt werden, wenn sich die Eigenschaft nicht im XML-Standard Namespace befindet (Weitere Informationen finden Sie unter [XAML-Namespaces und Namespace Zuordnung für WPF-XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)).</span><span class="sxs-lookup"><span data-stu-id="c868b-133">This can be preceded by an XML namespace prefix if the property is not in the default XML namespace (for details, see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).)</span></span>  
  
 <span data-ttu-id="c868b-134">`ownerType`.`dependencyPropertyName`</span><span class="sxs-lookup"><span data-stu-id="c868b-134">`ownerType`.`dependencyPropertyName`</span></span>  
 <span data-ttu-id="c868b-135">Eine Zeichenfolge, die den Besitzertyp einer Abhängigkeits Eigenschaft, einen Punkt (.) und dann den <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType>angibt.</span><span class="sxs-lookup"><span data-stu-id="c868b-135">A string that specifies an owner type of a dependency property, a dot (.), then the <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="c868b-136">`ownerType` kann auch ein XML-Namespace Präfix vorangestellt werden.</span><span class="sxs-lookup"><span data-stu-id="c868b-136">`ownerType` can also be preceded by an XML namespace prefix.</span></span> <span data-ttu-id="c868b-137">Diese Verwendung gilt insbesondere für spät gebundene Stile und Vorlagen, bei denen der Besitzer der Abhängigkeits Eigenschaft für den Kontext der Verwendung angegeben werden muss, da der `TargetType` noch nicht bekannt ist.</span><span class="sxs-lookup"><span data-stu-id="c868b-137">This usage is particular to late-bound styles and templates, where the owner of the dependency property must be specified for parsing context because the `TargetType` is not yet known.</span></span> <span data-ttu-id="c868b-138">Weitere Informationen finden Sie unter [Erstellen von Formaten und Vorlagen](~/docs/framework/wpf/controls/styling-and-templating.md).</span><span class="sxs-lookup"><span data-stu-id="c868b-138">For more information, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
 <span data-ttu-id="c868b-139">`attachedPropertyOwnerType` *zurück.*</span><span class="sxs-lookup"><span data-stu-id="c868b-139">`attachedPropertyOwnerType` *.*</span></span> `attachedPropertyName`  
 <span data-ttu-id="c868b-140">Eine Zeichenfolge, die den Besitzer einer angefügten Eigenschaft, einen Punkt (.) und dann den Namen der angefügten Eigenschaft angibt.</span><span class="sxs-lookup"><span data-stu-id="c868b-140">A string that specifies  the owner of an attached property, a dot (.), then the attached property name.</span></span> <span data-ttu-id="c868b-141">`attachedPropertyOwnerType` kann auch ein XML-Namespace Präfix vorangestellt werden.</span><span class="sxs-lookup"><span data-stu-id="c868b-141">`attachedPropertyOwnerType` can also be preceded by an XML namespace prefix.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyObject" />
    <altmember cref="T:System.Windows.DependencyPropertyHelper" />
  </Docs>
  <Members>
    <MemberGroup MemberName="AddOwner">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c868b-142">Fügt einen weiteren Typ als Besitzer einer Abhängigkeitseigenschaft hinzu, die bereits für einen Typ registriert wurde.</span><span class="sxs-lookup"><span data-stu-id="c868b-142">Adds another type as an owner of a dependency property that has already been registered to a type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddOwner">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty AddOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyProperty AddOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.AddOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddOwner (ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::DependencyProperty ^ AddOwner(Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="member this.AddOwner : Type -&gt; System.Windows.DependencyProperty" Usage="dependencyProperty.AddOwner ownerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType"><span data-ttu-id="c868b-143">Der Typ, der als ein Besitzer dieser Abhängigkeitseigenschaft hinzugefügt werden soll.</span><span class="sxs-lookup"><span data-stu-id="c868b-143">The type to add as an owner of this dependency property.</span></span></param>
        <summary><span data-ttu-id="c868b-144">Fügt einen weiteren Typ als Besitzer einer Abhängigkeitseigenschaft hinzu, die bereits registriert wurde.</span><span class="sxs-lookup"><span data-stu-id="c868b-144">Adds another type as an owner of a dependency property that has already been registered.</span></span></summary>
        <returns><span data-ttu-id="c868b-145">Ein Verweis auf den ursprünglichen <see cref="T:System.Windows.DependencyProperty" />-Bezeichner, der die Abhängigkeitseigenschaft angibt.</span><span class="sxs-lookup"><span data-stu-id="c868b-145">A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property.</span></span> <span data-ttu-id="c868b-146">Dieser Bezeichner sollte von der hinzufügenden Klasse als <see langword="public static readonly" />-Feld verfügbar gemacht werden.</span><span class="sxs-lookup"><span data-stu-id="c868b-146">This identifier should be exposed by the adding class as a <see langword="public static readonly" /> field.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c868b-147">Diese Methode ermöglicht es dem Eigenschaften System, eine Abhängigkeits Eigenschaft für einen Typ zu erkennen, der diese bestimmte Abhängigkeits Eigenschaft nicht anfänglich registriert hat.</span><span class="sxs-lookup"><span data-stu-id="c868b-147">This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.</span></span>  
  
 <span data-ttu-id="c868b-148">In der Regel wird <xref:System.Windows.DependencyProperty.AddOwner%2A> verwendet, um Klassen Abhängigkeits Eigenschaften hinzuzufügen, die diese Abhängigkeits Eigenschaft nicht bereits über die verwaltete Klassen Vererbung verfügbar machen (die Klassen Vererbung würde bewirken, dass die Wrapper Eigenschaften von der abgeleiteten Klasse geerbt werden und somit allgemeine Member-Table-Zugriff auf die Abhängigkeits Eigenschaft bereitstellen würde).</span><span class="sxs-lookup"><span data-stu-id="c868b-148">Typically, <xref:System.Windows.DependencyProperty.AddOwner%2A> is used to add dependency properties to classes that do not already expose that dependency property through managed class inheritance (class inheritance would cause the wrapper properties to be inherited by the derived class, and thus would provide general members-table access to the dependency property already).</span></span> <span data-ttu-id="c868b-149"><xref:System.Windows.DependencyProperty.AddOwner%2A> ermöglicht es dem Eigenschaften System, eine Abhängigkeits Eigenschaft für einen Typ zu erkennen, der diese Abhängigkeits Eigenschaft nicht anfänglich registriert hat.</span><span class="sxs-lookup"><span data-stu-id="c868b-149"><xref:System.Windows.DependencyProperty.AddOwner%2A> enables the property system to recognize a dependency property on a type that did not register that dependency property initially.</span></span>  
  
 <span data-ttu-id="c868b-150">Diese Signatur lässt keine Angabe von Metadaten zu.</span><span class="sxs-lookup"><span data-stu-id="c868b-150">This signature does not allow for specifying metadata.</span></span>  <span data-ttu-id="c868b-151">Wenn Sie diese Methode verwenden, werden die Metadaten automatisch für den neuen <xref:System.Windows.DependencyProperty> und deren Besitzertyp generiert.</span><span class="sxs-lookup"><span data-stu-id="c868b-151">When you use this method, the metadata is automatically generated for the new <xref:System.Windows.DependencyProperty> and its owner type.</span></span> <span data-ttu-id="c868b-152">Die automatisch generierten Metadaten sind das Ergebnis der zusammengeführten Metadaten aller Basis Typen, für die diese Eigenschaft definiert ist.</span><span class="sxs-lookup"><span data-stu-id="c868b-152">The auto-generated metadata is the result of the merged metadata from all of the base types that have this property defined.</span></span> <span data-ttu-id="c868b-153">Wenn keine zusammengeführten Metadaten verfügbar sind, werden die Standard Metadaten für die Eigenschaft verwendet.</span><span class="sxs-lookup"><span data-stu-id="c868b-153">If no merged metadata is available, then the default metadata for the property is used.</span></span> <span data-ttu-id="c868b-154">Wenn die Eigenschaft mit der <xref:System.Windows.DependencyProperty.RegisterAttached%2A>-Methode registriert wird, sind die Standard Metadaten identisch mit den Metadaten, die beim Aufrufen <xref:System.Windows.DependencyProperty.RegisterAttached%2A> erstellt wurden.</span><span class="sxs-lookup"><span data-stu-id="c868b-154">If the property is registered by using the <xref:System.Windows.DependencyProperty.RegisterAttached%2A> method, then the default metadata is the same as the metadata that is created when <xref:System.Windows.DependencyProperty.RegisterAttached%2A> was called.</span></span> <span data-ttu-id="c868b-155">Andernfalls wird das <xref:System.Windows.PropertyMetadata> Objekt erstellt, wobei die Eigenschaft <xref:System.Windows.PropertyMetadata.DefaultValue%2A> auf den Standardwert des Eigenschafts Typs und alle anderen Eigenschaften des <xref:System.Windows.PropertyMetadata> auf `null`festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="c868b-155">Otherwise, the <xref:System.Windows.PropertyMetadata> object is created with the <xref:System.Windows.PropertyMetadata.DefaultValue%2A> property set to the property type's default and all other properties of the <xref:System.Windows.PropertyMetadata> is set to `null`.</span></span> <span data-ttu-id="c868b-156">Verwenden Sie die <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29> Signatur, wenn Sie Metadaten für die Version der Abhängigkeits Eigenschaft bereitstellen möchten, die dem bereitgestellten Typ hinzugefügt wurde.</span><span class="sxs-lookup"><span data-stu-id="c868b-156">Use the <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29> signature if you want to provide metadata for the version of the dependency property as added to the provided type.</span></span>  
  
 <span data-ttu-id="c868b-157">Der Rückgabewert dieser Methode wird normalerweise verwendet, um die Abhängigkeits Eigenschaft zu deklarieren und verfügbar zu machen, indem Sie einen Bezeichner der Abhängigkeits Eigenschaft</span><span class="sxs-lookup"><span data-stu-id="c868b-157">The return value of this method is typically used to declare and expose the dependency property by storing a dependency property identifier.</span></span> <span data-ttu-id="c868b-158">Der Bezeichner ermöglicht den Zugriff auf die Abhängigkeits Eigenschaft, wenn Sie Eigenschaften System-APIs für die Abhängigkeits Eigenschaft aufrufen möchten, insbesondere, da Sie in der hinzugefügten Besitzer Klasse vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="c868b-158">The identifier provides access to the dependency property if you want to call property system APIs against the dependency property, particularly as it exists on the adding owner class.</span></span> <span data-ttu-id="c868b-159">Der gleiche Eigenschaftsname für den ursprünglichen Besitzer und den hinzugefügten Besitzer sollte verwendet werden, um die ähnliche Funktionalität anzugeben.</span><span class="sxs-lookup"><span data-stu-id="c868b-159">The same property name for both original owner and added owner should be used to indicate the similar functionality.</span></span> <span data-ttu-id="c868b-160">Sie sollten den <xref:System.Windows.DependencyProperty> Rückgabewert der <xref:System.Windows.DependencyProperty.AddOwner%2A>-Methode verwenden, um den Bezeichner der Abhängigkeits Eigenschaft zu definieren und außerdem [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] Eigenschaftenwrapper für Abhängigkeits Eigenschaften zu deklarieren, die Typen mithilfe <xref:System.Windows.DependencyProperty.AddOwner%2A>hinzugefügt werden.</span><span class="sxs-lookup"><span data-stu-id="c868b-160">You should use the <xref:System.Windows.DependencyProperty> return value of the <xref:System.Windows.DependencyProperty.AddOwner%2A> method to define the dependency property identifier, and also to declare [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span></span>  
  
 <span data-ttu-id="c868b-161">Die oben beschriebene <xref:System.Windows.DependencyProperty.AddOwner%2A> Methodik wird beim Erstellen der Abhängigkeits Eigenschaften verwendet, die in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]deklariert werden.</span><span class="sxs-lookup"><span data-stu-id="c868b-161">The <xref:System.Windows.DependencyProperty.AddOwner%2A> methodology recommended above is used when creating the dependency properties that are declared within [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span> <span data-ttu-id="c868b-162">Beispielsweise definieren sowohl <xref:System.Windows.Controls.Border> als auch <xref:System.Windows.Controls.Control> eine `BorderBrush`-Abhängigkeits Eigenschaft, die über eine ähnliche Funktionalität verfügt.</span><span class="sxs-lookup"><span data-stu-id="c868b-162">For instance, both <xref:System.Windows.Controls.Border> and <xref:System.Windows.Controls.Control> define a `BorderBrush` dependency property, which have similar functionality.</span></span> <span data-ttu-id="c868b-163"><xref:System.Windows.Controls.Control> definiert seine `BorderBrush`-Eigenschaft für das Eigenschaften System durch Aufrufen von <xref:System.Windows.DependencyProperty.AddOwner%2A> auf der Grundlage des ursprünglichen Besitzer <xref:System.Windows.Controls.Border> und des registrierten <xref:System.Windows.Controls.Border.BorderBrushProperty> Abhängigkeits Eigenschaften Bezeichners.</span><span class="sxs-lookup"><span data-stu-id="c868b-163"><xref:System.Windows.Controls.Control> defines its `BorderBrush` property to the property system by calling <xref:System.Windows.DependencyProperty.AddOwner%2A> based on the original owner <xref:System.Windows.Controls.Border> and its registered <xref:System.Windows.Controls.Border.BorderBrushProperty> dependency property identifer.</span></span> <span data-ttu-id="c868b-164">Der <xref:System.Windows.DependencyProperty.AddOwner%2A> Rückgabewert wird dann verwendet, um ein neues statisches <xref:System.Windows.DependencyProperty> Feld (<xref:System.Windows.Controls.Control.BorderBrushProperty>) für diese Eigenschaft für den hinzugefügten Besitzer einzurichten. Außerdem wird ein `BorderBrush` Eigenschafts Wrapper deklariert.</span><span class="sxs-lookup"><span data-stu-id="c868b-164">The <xref:System.Windows.DependencyProperty.AddOwner%2A> return value is then used to establish a new static <xref:System.Windows.DependencyProperty> field (<xref:System.Windows.Controls.Control.BorderBrushProperty>) for that property on the added owner, and a `BorderBrush` property wrapper is also declared.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOwner">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty AddOwner (Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyProperty AddOwner(class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.AddOwner(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddOwner (ownerType As Type, typeMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::DependencyProperty ^ AddOwner(Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.AddOwner : Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyProperty" Usage="dependencyProperty.AddOwner (ownerType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="ownerType"><span data-ttu-id="c868b-165">Der Typ, der als Besitzer dieser Abhängigkeitseigenschaft hinzugefügt werden soll.</span><span class="sxs-lookup"><span data-stu-id="c868b-165">The type to add as owner of this dependency property.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="c868b-166">Die Metadaten, die die Abhängigkeitseigenschaft beschreiben, wie sie für den bereitgestellten Typ vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="c868b-166">The metadata that qualifies the dependency property as it exists on the provided type.</span></span></param>
        <summary><span data-ttu-id="c868b-167">Fügt einen anderen Typ als Besitzer einer Abhängigkeitseigenschaft hinzu, die bereits registriert wurde. Dabei werden Abhängigkeitseigenschaft-Metadaten für die Abhängigkeitseigenschaft bereitgestellt, wie sie für den bereitgestellten Besitzertyp vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="c868b-167">Adds another type as an owner of a dependency property that has already been registered, providing dependency property metadata for the dependency property as it will exist on the provided owner type.</span></span></summary>
        <returns><span data-ttu-id="c868b-168">Ein Verweis auf den ursprünglichen <see cref="T:System.Windows.DependencyProperty" />-Bezeichner, der die Abhängigkeitseigenschaft angibt.</span><span class="sxs-lookup"><span data-stu-id="c868b-168">A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property.</span></span> <span data-ttu-id="c868b-169">Dieser Bezeichner sollte von der hinzufügenden Klasse als <see langword="public static readonly" />-Feld verfügbar gemacht werden.</span><span class="sxs-lookup"><span data-stu-id="c868b-169">This identifier should be exposed by the adding class as a <see langword="public static readonly" /> field.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c868b-170">Diese Methode ermöglicht es dem Eigenschaften System, eine Abhängigkeits Eigenschaft für einen Typ zu erkennen, der diese bestimmte Abhängigkeits Eigenschaft nicht anfänglich registriert hat.</span><span class="sxs-lookup"><span data-stu-id="c868b-170">This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.</span></span>  
  
 <span data-ttu-id="c868b-171">Der Rückgabewert dieser Methode wird verwendet, um die Abhängigkeits Eigenschaft zu deklarieren und verfügbar zu machen, insbesondere, da Sie in der hinzugefügten Besitzer Klasse vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="c868b-171">The return value of this method is used to declare and expose the dependency property, particularly as it exists on the adding owner class.</span></span> <span data-ttu-id="c868b-172">Im Allgemeinen sollte derselbe Eigenschaftsname sowohl für den ursprünglichen Besitzer als auch für den hinzugefügten Besitzer verwendet werden, um die ähnliche Funktionalität anzugeben.</span><span class="sxs-lookup"><span data-stu-id="c868b-172">Generally, the same property name for both original owner and added owner should be used to indicate the similar functionality.</span></span> <span data-ttu-id="c868b-173">Es empfiehlt sich, die Bezeichner sowie neue [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]-Eigenschaftenwrapper für Abhängigkeits Eigenschaften verfügbar zu machen, die Typen mithilfe von <xref:System.Windows.DependencyProperty.AddOwner%2A>hinzugefügt werden.</span><span class="sxs-lookup"><span data-stu-id="c868b-173">It is good practice to expose the identifiers, as well as new [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span></span>  
  
 <span data-ttu-id="c868b-174">Die oben beschriebene <xref:System.Windows.DependencyProperty.AddOwner%2A> Methodik wird beim Erstellen von in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]deklarierten APIs verwendet.</span><span class="sxs-lookup"><span data-stu-id="c868b-174">The <xref:System.Windows.DependencyProperty.AddOwner%2A> methodology recommended above is used when creating APIs declared within [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span> <span data-ttu-id="c868b-175">Beispielsweise definieren sowohl <xref:System.Windows.Controls.Border> als auch <xref:System.Windows.Controls.Control> eine `BorderBrush`-Abhängigkeits Eigenschaft, die über eine ähnliche Funktionalität verfügt.</span><span class="sxs-lookup"><span data-stu-id="c868b-175">For instance, both <xref:System.Windows.Controls.Border> and <xref:System.Windows.Controls.Control> define a `BorderBrush` dependency property, which have similar functionality.</span></span> <span data-ttu-id="c868b-176"><xref:System.Windows.Controls.Control> definiert seine `BorderBrush`-Eigenschaft für das Eigenschaften System durch Aufrufen von <xref:System.Windows.DependencyProperty.AddOwner%2A> für den ursprünglichen Besitzer <xref:System.Windows.Controls.Border> und seine registrierte <xref:System.Windows.Controls.Border.BorderBrushProperty> Abhängigkeits Eigenschaften Bezeichner.</span><span class="sxs-lookup"><span data-stu-id="c868b-176"><xref:System.Windows.Controls.Control> defines its `BorderBrush` property to the property system by calling <xref:System.Windows.DependencyProperty.AddOwner%2A> on original owner <xref:System.Windows.Controls.Border> and its registered <xref:System.Windows.Controls.Border.BorderBrushProperty> dependency property identifer.</span></span> <span data-ttu-id="c868b-177">Der <xref:System.Windows.DependencyProperty.AddOwner%2A> Rückgabewert wird dann verwendet, um ein statisches <xref:System.Windows.DependencyProperty> Feld (<xref:System.Windows.Controls.Control.BorderBrushProperty>) für diese Eigenschaft für den hinzugefügten Besitzer einzurichten. Außerdem wird ein `BorderBrush` Eigenschafts Wrapper deklariert.</span><span class="sxs-lookup"><span data-stu-id="c868b-177">The <xref:System.Windows.DependencyProperty.AddOwner%2A> return value is then used to establish a static <xref:System.Windows.DependencyProperty> field (<xref:System.Windows.Controls.Control.BorderBrushProperty>) for that property on the added owner, and a `BorderBrush` property wrapper is also declared.</span></span>  
  
 <span data-ttu-id="c868b-178">Der Bezeichner der Abhängigkeits Eigenschaft des hinzugefügten Besitzers sollte für Vorgänge wie <xref:System.Windows.DependencyObject.GetValue%2A>verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="c868b-178">The added owner's dependency property identifier should be used for operations such as <xref:System.Windows.DependencyObject.GetValue%2A>.</span></span> <span data-ttu-id="c868b-179">Typspezifische Vorgänge, die entweder Typen oder Instanzen der Klasse betreffen, die als Besitzer mit unterschiedlichen Metadaten hinzugefügt wurden, geben jedoch weiterhin die erwarteten Ergebnisse zurück, auch wenn der ursprüngliche Bezeichner der Abhängigkeits Eigenschaft (nicht der hinzugefügte Besitzer) in Aufrufen von Methoden wie <xref:System.Windows.DependencyObject.GetValue%2A> oder <xref:System.Windows.DependencyProperty.GetMetadata%2A>angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="c868b-179">However, type-specific operations involving either types or instances of the class that was added as owner with different metadata will still return the expected results even if the original (not the added owner's) dependency property identifier is specified in calls to methods such as <xref:System.Windows.DependencyObject.GetValue%2A> or <xref:System.Windows.DependencyProperty.GetMetadata%2A>.</span></span> <span data-ttu-id="c868b-180">Die Metadaten für den hinzugefügten Besitzer werden durch den <xref:System.Windows.DependencyProperty.AddOwner%2A>-Rückruf selbst fortgesetzt, nicht notwendigerweise ausschließlich durch das Hinzufügen des Bezeichners für Besitzer Klassen Bezeichner.</span><span class="sxs-lookup"><span data-stu-id="c868b-180">The metadata for the added owner is perpetuated by the <xref:System.Windows.DependencyProperty.AddOwner%2A> call itself, not necessarily referenced exclusively by the adding owner class identifier field.</span></span> <span data-ttu-id="c868b-181">Trotzdem empfiehlt es sich, den Bezeichner sowie neue [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]-Eigenschaftenwrapper für Abhängigkeits Eigenschaften verfügbar zu machen, die Typen mithilfe von <xref:System.Windows.DependencyProperty.AddOwner%2A>hinzugefügt werden, da dies nicht zu einer Unterschiede zwischen dem [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] und [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Darstellungen ihrer Eigenschaften führt.</span><span class="sxs-lookup"><span data-stu-id="c868b-181">Nevertheless, it is good practice to expose the  identifier, as well as new [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>, because failing to do so creates disparity between the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] representations of your properties.</span></span>  
  
 <span data-ttu-id="c868b-182">Die angegebenen Metadaten werden mit den Eigenschafts Metadaten für die Abhängigkeits Eigenschaft zusammengeführt, so wie Sie auf dem Basis Besitzer vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="c868b-182">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="c868b-183">Alle Eigenschaften, die in den ursprünglichen Basis Metadaten angegeben wurden, bleiben erhalten.</span><span class="sxs-lookup"><span data-stu-id="c868b-183">Any characteristics that were specified in the original base metadata will persist.</span></span> <span data-ttu-id="c868b-184">Nur die Merkmale, die speziell in den neuen Metadaten geändert wurden, überschreiben die Eigenschaften der Basis Metadaten.</span><span class="sxs-lookup"><span data-stu-id="c868b-184">Only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="c868b-185">Einige Merkmale, wie z. b. <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, werden ersetzt, wenn Sie in den neuen Metadaten angegeben werden.</span><span class="sxs-lookup"><span data-stu-id="c868b-185">Some characteristics, such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, are replaced if they are specified in the new metadata.</span></span> <span data-ttu-id="c868b-186">Andere, wie z. b. <xref:System.Windows.PropertyChangedCallback>, werden kombiniert.</span><span class="sxs-lookup"><span data-stu-id="c868b-186">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="c868b-187">Letztendlich hängt das Zusammensetzungs Verhalten vom Eigenschaftentyp ab, der für die Überschreibung verwendet wird, sodass das hier beschriebene Verhalten für die vorhandenen eigenschaftenmetadatenklassen ist, die von [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Abhängigkeits Eigenschaften verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="c868b-187">Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dependency properties.</span></span> <span data-ttu-id="c868b-188">Weitere Informationen finden Sie unter [Metadaten für Abhängigkeits Eigenschaften](~/docs/framework/wpf/advanced/dependency-property-metadata.md) und [Framework-Eigenschaften Metadaten](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span><span class="sxs-lookup"><span data-stu-id="c868b-188">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata DefaultMetadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.PropertyMetadata DefaultMetadata" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.DefaultMetadata" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultMetadata As PropertyMetadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::PropertyMetadata ^ DefaultMetadata { System::Windows::PropertyMetadata ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultMetadata : System.Windows.PropertyMetadata" Usage="System.Windows.DependencyProperty.DefaultMetadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c868b-189">Ruft die Standardmetadaten der Abhängigkeitseigenschaft ab.</span><span class="sxs-lookup"><span data-stu-id="c868b-189">Gets the default metadata of the dependency property.</span></span></summary>
        <value><span data-ttu-id="c868b-190">Die Standardmetadaten der Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-190">The default metadata of the dependency property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c868b-191">Die Standard Metadaten sind die Eigenschafts Metadaten, die für das betreffende Objekt verfügbar sind, oder ein Objekt eines abgeleiteten Typs, bei dem keine alternativen Metadaten von einem expliziten <xref:System.Windows.DependencyProperty.Register%2A> oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="c868b-191">The default metadata is the property metadata that is available to that particular object or an object of a derived type where no alternative metadata was supplied by an explicit <xref:System.Windows.DependencyProperty.Register%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> call.</span></span>  
  
 <span data-ttu-id="c868b-192">Wenn der ursprüngliche Besitzer Metadaten auf den ersten <xref:System.Windows.DependencyProperty.Register%2A> aufgerufen hat, der die Abhängigkeits Eigenschaft hergestellt hat, werden diese Metadaten als <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="c868b-192">If the original owner applied metadata to the first <xref:System.Windows.DependencyProperty.Register%2A> call that established the dependency property, then that metadata is returned as <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
 <span data-ttu-id="c868b-193">Wenn keine Metadaten im ursprünglichen <xref:System.Windows.DependencyProperty.Register%2A> aufgerufen wurden, werden Standard Metadaten aus dem <xref:System.Windows.DependencyProperty.Register%2A>-Befehl generiert, und dieser Wert wird als <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="c868b-193">If no metadata was applied in the original <xref:System.Windows.DependencyProperty.Register%2A> call, then default metadata is generated from within the <xref:System.Windows.DependencyProperty.Register%2A> call and this value is returned as the <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
 <span data-ttu-id="c868b-194">Der Hauptzweck, einem <xref:System.Windows.DependencyProperty> zugeordnete Standard Metadaten zu sein, besteht darin, für jede <xref:System.Windows.DependencyObject> oder einen abgeleiteten Typ einen Standardwert für diese Eigenschaft bereitzustellen.</span><span class="sxs-lookup"><span data-stu-id="c868b-194">The main purpose of having default metadata associated with a <xref:System.Windows.DependencyProperty> is to supply a default value for this property on any <xref:System.Windows.DependencyObject> or a derived type.</span></span>  
  
 <span data-ttu-id="c868b-195">Bei nicht angefügten Eigenschaften kann der von dieser Eigenschaft zurückgegebene Metadatentyp nicht in abgeleitete Typen <xref:System.Windows.PropertyMetadata> Typs umgewandelt werden, auch wenn die Eigenschaft ursprünglich mit einem abgeleiteten Metadatentyp registriert wurde.</span><span class="sxs-lookup"><span data-stu-id="c868b-195">For nonattached properties, the metadata type returned by this property cannot be cast to derived types of <xref:System.Windows.PropertyMetadata> type, even if the property was originally registered with a derived metadata type.</span></span> <span data-ttu-id="c868b-196">Wenn Sie die ursprünglich registrierten Metadaten einschließlich ihres ursprünglichen, möglicherweise abgeleiteten metadatentyps verwenden möchten, müssen Sie stattdessen <xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29> aufrufen und dabei den ursprünglichen registriungstyp als Parameter übergeben.</span><span class="sxs-lookup"><span data-stu-id="c868b-196">If you want the originally registered metadata including its original possibly derived metadata type, call <xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29> instead, passing the original registering type as a parameter.</span></span>  
  
 <span data-ttu-id="c868b-197">Für angefügte Eigenschaften entspricht der Typ der Metadaten, die von dieser Eigenschaft zurückgegeben werden, dem Typ, der in der ursprünglichen <xref:System.Windows.DependencyProperty.RegisterAttached%2A> Registrierungsmethode angegeben ist.</span><span class="sxs-lookup"><span data-stu-id="c868b-197">For attached properties, the type of the metadata returned by this property will match the type given in the original <xref:System.Windows.DependencyProperty.RegisterAttached%2A> registration method.</span></span>  
  
   
  
## Examples  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#DPDefaultValue](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpdefaultvalue)]
[!code-vb[PropertySystemEsoterics#DPDefaultValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpdefaultvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dependencyProperty.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c868b-198">Gibt einen Hashcode für diese <see cref="T:System.Windows.DependencyProperty" /> zurück.</span><span class="sxs-lookup"><span data-stu-id="c868b-198">Returns a hash code for this <see cref="T:System.Windows.DependencyProperty" />.</span></span></summary>
        <returns><span data-ttu-id="c868b-199">Der Hashcode für diese <see cref="T:System.Windows.DependencyProperty" />.</span><span class="sxs-lookup"><span data-stu-id="c868b-199">The hash code for this <see cref="T:System.Windows.DependencyProperty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c868b-200">Das Eigenschaften System verwendet einen eigenen eindeutigen Bezeichner <xref:System.Windows.DependencyProperty.GlobalIndex%2A>, und der Wert dieser Eigenschaft wird von <xref:System.Windows.DependencyProperty.GetHashCode%2A>zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="c868b-200">The property system uses its own unique identifier <xref:System.Windows.DependencyProperty.GlobalIndex%2A>, and the value of that property is returned by <xref:System.Windows.DependencyProperty.GetHashCode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMetadata">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c868b-201">Gibt die dieser Abhängigkeitseigenschaft zugeordneten Metadaten zurück, wie sie für einen bestimmten Typ vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="c868b-201">Returns the metadata associated with this dependency property as it exists for a particular type.</span></span> <span data-ttu-id="c868b-202">Dies kann der Typ sein, für den die Abhängigkeitseigenschaft zuerst registriert wurde, ein Typ, dem sie später hinzugefügt wurde, oder einen Typ, für den die Abhängigkeitseigenschaft über Vererbung abgerufen wurde, wobei die Metadaten jedoch ausdrücklich überschrieben wurden.</span><span class="sxs-lookup"><span data-stu-id="c868b-202">This can be the type where the dependency property was first registered, one to which it was added subsequently, or a type where the dependency property was obtained through inheritance but the metadata was specifically overridden.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (Type forType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Type forType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadata (forType As Type) As PropertyMetadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(Type ^ forType);" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : Type -&gt; System.Windows.PropertyMetadata" Usage="dependencyProperty.GetMetadata forType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="forType"><span data-ttu-id="c868b-203">Der spezifische Typ, von dem die Metadaten für die Abhängigkeitseigenschaft abgerufen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="c868b-203">The specific type from which to retrieve the dependency property metadata.</span></span></param>
        <summary><span data-ttu-id="c868b-204">Gibt die Metadaten für diese Abhängigkeitseigenschaft zurück, wie sie für einen angegebenen vorhanden Typ vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="c868b-204">Returns the metadata for this dependency property as it exists on a specified existing type.</span></span></summary>
        <returns><span data-ttu-id="c868b-205">Ein Objekt für Eigenschaftenmetadaten.</span><span class="sxs-lookup"><span data-stu-id="c868b-205">A property metadata object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c868b-206">Die Angabe des Typs oder eines Objekt Verweises, der als Typ verwendet werden soll, ist erforderlich, da die Metadaten von der ursprünglichen Registrierung abweichen können, da entweder <xref:System.Windows.DependencyProperty.AddOwner%2A> oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> Aufrufe, die die Metadaten der Abhängigkeits Eigenschaft ändern, wie Sie für einen Typ vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="c868b-206">Specifying either the type or an object reference to use as type is necessary because the metadata can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that alter the metadata of the dependency property as it exists on a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c868b-207">Im folgenden Beispiel werden Metadaten für eine Abhängigkeits Eigenschaft basierend auf dem Typ abgerufen.</span><span class="sxs-lookup"><span data-stu-id="c868b-207">The following example gets metadata for a dependency property based on its type.</span></span> <span data-ttu-id="c868b-208">Der Typ wird mithilfe eines `typeof` Operators abgerufen.</span><span class="sxs-lookup"><span data-stu-id="c868b-208">The type is obtained by using a `typeof` operator.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataType](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatatype)]
 [!code-vb[PropertySystemEsoterics#GetMetadataType](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatatype)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObject dependencyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Windows.DependencyObject dependencyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadata (dependencyObject As DependencyObject) As PropertyMetadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(System::Windows::DependencyObject ^ dependencyObject);" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : System.Windows.DependencyObject -&gt; System.Windows.PropertyMetadata" Usage="dependencyProperty.GetMetadata dependencyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObject" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="dependencyObject"><span data-ttu-id="c868b-209">Ein Abhängigkeitsobjekt, dessen Typ überprüft wird, um zu ermitteln, von welcher typenspezifischen Version der Abhängigkeitseigenschaft die Metadaten stammen sollen.</span><span class="sxs-lookup"><span data-stu-id="c868b-209">A dependency object that is checked for type, to determine which type-specific version of the dependency property the metadata should come from.</span></span></param>
        <summary><span data-ttu-id="c868b-210">Gibt die Metadaten für diese Abhängigkeitseigenschaft zurück, da sie für die angegebene Objektinstanz vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="c868b-210">Returns the metadata for this dependency property as it exists on the specified object instance.</span></span></summary>
        <returns><span data-ttu-id="c868b-211">Ein Objekt für Eigenschaftenmetadaten.</span><span class="sxs-lookup"><span data-stu-id="c868b-211">A property metadata object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c868b-212">Die Angabe des Typs oder eines Objekt Verweises ist erforderlich, da die Metadaten einer angegebenen Abhängigkeits Eigenschaft von der ursprünglichen Registrierung abweichen können, da entweder <xref:System.Windows.DependencyProperty.AddOwner%2A> oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> Aufrufe, die die Eigenschafts Metadaten verfeinern können, wie Sie für einen Typ vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="c868b-212">Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that can refine the property metadata as it exists on a type.</span></span>  
  
 <span data-ttu-id="c868b-213">Wenn Sie auf einer-Instanz basierende Eigenschafts Metadaten anfordern, übergeben Sie die-Instanz wirklich, damit ihr Typ intern ausgewertet werden kann.</span><span class="sxs-lookup"><span data-stu-id="c868b-213">When you request property metadata based on an instance, you are really just passing the instance so that its type can be evaluated internally.</span></span> <span data-ttu-id="c868b-214">Die Metadaten für Abhängigkeits Eigenschaften variieren je nach Instanz nicht. Sie ist für eine beliebige typeigenschafts Kombination immer konsistent.</span><span class="sxs-lookup"><span data-stu-id="c868b-214">Dependency property metadata does not vary per instance; it is always consistent for any given type-property combination.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c868b-215">Im folgenden Beispiel werden Metadaten für eine Abhängigkeits Eigenschaft basierend auf einer bestimmten <xref:System.Windows.DependencyObject> Instanz abgerufen.</span><span class="sxs-lookup"><span data-stu-id="c868b-215">The following example gets metadata for a dependency property based on a specific <xref:System.Windows.DependencyObject> instance.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataDOInstance](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatadoinstance)]
 [!code-vb[PropertySystemEsoterics#GetMetadataDOInstance](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatadoinstance)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObjectType dependencyObjectType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Windows.DependencyObjectType dependencyObjectType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObjectType)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadata (dependencyObjectType As DependencyObjectType) As PropertyMetadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(System::Windows::DependencyObjectType ^ dependencyObjectType);" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : System.Windows.DependencyObjectType -&gt; System.Windows.PropertyMetadata" Usage="dependencyProperty.GetMetadata dependencyObjectType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObjectType" Type="System.Windows.DependencyObjectType" />
      </Parameters>
      <Docs>
        <param name="dependencyObjectType"><span data-ttu-id="c868b-216">Ein bestimmtes Objekt, das den Abhängigkeitsobjekttyp aufzeichnet, von dem die Metadaten für die Abhängigkeitseigenschaft stammen sollen.</span><span class="sxs-lookup"><span data-stu-id="c868b-216">A specific object that records the dependency object type from which the dependency property metadata is desired.</span></span></param>
        <summary><span data-ttu-id="c868b-217">Gibt die Metadaten für diese Abhängigkeitseigenschaft zurück, wie sie für einen angegebenen Typ vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="c868b-217">Returns the metadata for this dependency property as it exists on a specified type.</span></span></summary>
        <returns><span data-ttu-id="c868b-218">Ein Objekt für Eigenschaftenmetadaten.</span><span class="sxs-lookup"><span data-stu-id="c868b-218">A property metadata object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c868b-219">Die Angabe des Typs oder eines Objekt Verweises ist erforderlich, da die Metadaten einer angegebenen Abhängigkeits Eigenschaft von der ursprünglichen Registrierung abweichen können, da entweder <xref:System.Windows.DependencyProperty.AddOwner%2A> oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> Aufrufe, die die Eigenschafts Metadaten verfeinern können, wie Sie für einen Typ vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="c868b-219">Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that can refine the property metadata as it exists on a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c868b-220">Im folgenden Beispiel werden Metadaten für eine Abhängigkeits Eigenschaft basierend auf dem <xref:System.Windows.DependencyObjectType>abgerufen.</span><span class="sxs-lookup"><span data-stu-id="c868b-220">The following example gets metadata for a dependency property based on its <xref:System.Windows.DependencyObjectType>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataDOType](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatadotype)]
 [!code-vb[PropertySystemEsoterics#GetMetadataDOType](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatadotype)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalIndex">
      <MemberSignature Language="C#" Value="public int GlobalIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GlobalIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.GlobalIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int GlobalIndex { int get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalIndex : int" Usage="System.Windows.DependencyProperty.GlobalIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c868b-221">Ruft einen intern generierten Wert ab, der die Abhängigkeitseigenschaft eindeutig identifiziert.</span><span class="sxs-lookup"><span data-stu-id="c868b-221">Gets an internally generated value that uniquely identifies the dependency property.</span></span></summary>
        <value><span data-ttu-id="c868b-222">Ein eindeutiger numerischer Bezeichner.</span><span class="sxs-lookup"><span data-stu-id="c868b-222">A unique numeric identifier.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c868b-223">Dieser Wert ist eine ganze Zahl, keine Globally Unique Identifier (GUID).</span><span class="sxs-lookup"><span data-stu-id="c868b-223">This value is an integer, not a globally unique identifier (GUID).</span></span> <span data-ttu-id="c868b-224">Im Allgemeinen ist die Verwendung dieses Indexwerts nicht erforderlich, und es ist kein Indexzugriff auf Tabellen aller Abhängigkeits Eigenschaften vorhanden.</span><span class="sxs-lookup"><span data-stu-id="c868b-224">Generally, using this index value is not required, and there is no index access to tables of all dependency properties.</span></span> <span data-ttu-id="c868b-225">Auf Abhängigkeits Eigenschaften sollte stattdessen in ihren Bezeichnerfeldern verwiesen werden.</span><span class="sxs-lookup"><span data-stu-id="c868b-225">Dependency properties should instead be referenced by their identifier fields.</span></span>  
  
 <span data-ttu-id="c868b-226"><xref:System.Windows.DependencyProperty.GlobalIndex%2A> wird intern verwendet, um den Zugriff auf Datenstrukturen zu beschleunigen, die die <xref:System.Windows.DependencyProperty.GlobalIndex%2A> als Null basierten Array Index verwenden.</span><span class="sxs-lookup"><span data-stu-id="c868b-226"><xref:System.Windows.DependencyProperty.GlobalIndex%2A> is used internally for faster access to data structures that use the <xref:System.Windows.DependencyProperty.GlobalIndex%2A> as a zero-based array index.</span></span> <span data-ttu-id="c868b-227">Eine ähnliche Verwendung kann Anwendungen für Designer oder Tools enthalten.</span><span class="sxs-lookup"><span data-stu-id="c868b-227">A similar usage might have applications for designers or tools.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidType">
      <MemberSignature Language="C#" Value="public bool IsValidType (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsValidType(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.IsValidType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidType (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsValidType(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.IsValidType : obj -&gt; bool" Usage="dependencyProperty.IsValidType value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c868b-228">Der zu überprüfende Wert.</span><span class="sxs-lookup"><span data-stu-id="c868b-228">The value to check.</span></span></param>
        <summary><span data-ttu-id="c868b-229">Bestimmt, ob ein angegebener Wert für den Typ dieser Abhängigkeitseigenschaft akzeptiert wird, wie anhand des in der Registrierung der ursprünglichen Abhängigkeitseigenschaft angegebenen Eigenschaftentyps überprüft wurde.</span><span class="sxs-lookup"><span data-stu-id="c868b-229">Determines whether a specified value is acceptable for this dependency property's type, as checked against the property type provided in the original dependency property registration.</span></span></summary>
        <returns><span data-ttu-id="c868b-230"><see langword="true" />, wenn der angegebene Wert der registrierte Eigenschaftentyp oder ein zulässiger abgeleiteter Typ ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c868b-230"><see langword="true" /> if the specified value is the registered property type or an acceptable derived type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c868b-231">Der Wert `null` ist ein gültiger Typ für Verweistyp-Abhängigkeits Eigenschaften oder für eine <xref:System.Nullable%601> Abhängigkeits Eigenschaft und würde `true` für diese Fälle zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="c868b-231">A value of `null` is a valid type for reference type dependency properties, or for a <xref:System.Nullable%601> dependency property, and would return `true` for these cases.</span></span> <span data-ttu-id="c868b-232">In Fällen, in denen die Abhängigkeits Eigenschaft weder ein Verweis noch ein <xref:System.Nullable%601> Typ ist, geben <xref:System.Windows.DependencyProperty.IsValidType%2A> `false` für einen NULL-Wert zurück, anstatt eine Ausnahme aufzurichten.</span><span class="sxs-lookup"><span data-stu-id="c868b-232">In cases where the dependency property is neither a reference nor a <xref:System.Nullable%601> type, <xref:System.Windows.DependencyProperty.IsValidType%2A> will return `false` for a null value rather than raise an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c868b-233">Im folgenden Beispiel wird <xref:System.Windows.DependencyProperty.IsValidType%2A> als Überprüfung verwendet, bevor <xref:System.Windows.DependencyObject.SetValue%2A> für die-Abhängigkeits Eigenschaft aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="c868b-233">The following example uses <xref:System.Windows.DependencyProperty.IsValidType%2A> as a check before calling <xref:System.Windows.DependencyObject.SetValue%2A> on the dependency property.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#TrySetValue](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#trysetvalue)]
 [!code-vb[PropertySystemEsoterics#TrySetValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#trysetvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidValue">
      <MemberSignature Language="C#" Value="public bool IsValidValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsValidValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.IsValidValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidValue (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsValidValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.IsValidValue : obj -&gt; bool" Usage="dependencyProperty.IsValidValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c868b-234">Der zu überprüfende Wert.</span><span class="sxs-lookup"><span data-stu-id="c868b-234">The value to check.</span></span></param>
        <summary><span data-ttu-id="c868b-235">Bestimmt, ob der angegebene Wert für den Eigenschaftentyp durch eine einfache Typüberprüfung zulässig ist und ob er sich potenziell im zulässigen Wertebereich für den Typ befindet.</span><span class="sxs-lookup"><span data-stu-id="c868b-235">Determines whether the provided value is accepted for the type of property through basic type checking, and also potentially if it is within the allowed range of values for that type.</span></span></summary>
        <returns><span data-ttu-id="c868b-236"><see langword="true" />, wenn der Wert zulässig ist und den richtigen Typ oder einen abgeleiteten Typ aufweist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c868b-236"><see langword="true" /> if the value is acceptable and is of the correct type or a derived type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c868b-237">Für eine Abhängigkeits Eigenschaft kann ein zulässiger Wertebereich für diesen Typ durch eine <xref:System.Windows.ValidateValueCallback> angegeben werden, die in der Registrierung der Abhängigkeits Eigenschaft bereitgestellt wird.</span><span class="sxs-lookup"><span data-stu-id="c868b-237">For a dependency property, an allowed range of values for that type can be specified through a <xref:System.Windows.ValidateValueCallback> that is provided in the dependency property registration.</span></span>  
  
 <span data-ttu-id="c868b-238">Mit dieser Methode werden <xref:System.Windows.DependencyProperty.IsValidType%2A> intern aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="c868b-238">This method calls <xref:System.Windows.DependencyProperty.IsValidType%2A> internally.</span></span> <span data-ttu-id="c868b-239">Wenn die betreffende Abhängigkeits Eigenschaft keine <xref:System.Windows.ValidateValueCallback>hat, entspricht das Aufrufen dieser Methode effektiv dem Aufrufen von <xref:System.Windows.DependencyProperty.IsValidType%2A>.</span><span class="sxs-lookup"><span data-stu-id="c868b-239">If the dependency property in question has no <xref:System.Windows.ValidateValueCallback>,then calling this method is effectively equivalent to calling <xref:System.Windows.DependencyProperty.IsValidType%2A>.</span></span> <span data-ttu-id="c868b-240">Wenn die Abhängigkeits Eigenschaft eine <xref:System.Windows.ValidateValueCallback>hat und <xref:System.Windows.DependencyProperty.IsValidType%2A> `true`zurückgegeben hätte, wird der zurückgegebene Wert im Rückruf als implementiert.</span><span class="sxs-lookup"><span data-stu-id="c868b-240">If the dependency property does have a <xref:System.Windows.ValidateValueCallback>, and if <xref:System.Windows.DependencyProperty.IsValidType%2A> would have returned `true`, then the value returned will be as implemented in the callback.</span></span>  
  
 <span data-ttu-id="c868b-241">Ein NULL-Wert ist ein gültiger Wert für Verweistyp-Abhängigkeits Eigenschaften oder für eine <xref:System.Nullable%601>-Abhängigkeits Eigenschaft und würde für diese Fälle `true` zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="c868b-241">A null value is a valid value for reference type dependency properties, or for a <xref:System.Nullable%601> dependency property, and would return `true` for these cases.</span></span> <span data-ttu-id="c868b-242">In Fällen, in denen die Abhängigkeits Eigenschaft weder ein Verweis noch ein <xref:System.Nullable%601> Typ ist, geben <xref:System.Windows.DependencyProperty.IsValidType%2A> `false` für einen NULL-Wert zurück, anstatt eine Ausnahme aufzurichten.</span><span class="sxs-lookup"><span data-stu-id="c868b-242">In cases where the dependency property is neither a reference nor a <xref:System.Nullable%601> type, <xref:System.Windows.DependencyProperty.IsValidType%2A> will return `false` for a null value rather than raise an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c868b-243">Im folgenden Beispiel wird <xref:System.Windows.DependencyProperty.IsValidValue%2A> als Überprüfung verwendet, bevor <xref:System.Windows.DependencyObject.SetValue%2A> für die-Abhängigkeits Eigenschaft aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="c868b-243">The following example uses <xref:System.Windows.DependencyProperty.IsValidValue%2A> as a check before calling <xref:System.Windows.DependencyObject.SetValue%2A> on the dependency property.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#TrySetValueWithValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#trysetvaluewithvalidate)]
 [!code-vb[PropertySystemEsoterics#TrySetValueWithValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#trysetvaluewithvalidate)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Windows.DependencyProperty.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c868b-244">Ruft den Namen der Abhängigkeitseigenschaft ab.</span><span class="sxs-lookup"><span data-stu-id="c868b-244">Gets the name of the dependency property.</span></span></summary>
        <value><span data-ttu-id="c868b-245">Der Name der Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-245">The name of the property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c868b-246">Diese Eigenschaft ruft den Namen ab, der während der Registrierung der Abhängigkeits Eigenschaft als `name` Parameter bereitgestellt wird.</span><span class="sxs-lookup"><span data-stu-id="c868b-246">This property gets the name provided as the `name` parameter during dependency property registration.</span></span> <span data-ttu-id="c868b-247">Dieser Name ist unveränderlich und kann nicht `null` oder eine leere Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="c868b-247">This name is immutable, and cannot be `null` or an empty string.</span></span> <span data-ttu-id="c868b-248">Doppelte namens Registrierungen für denselben Besitzertyp sind nicht zulässig, und es wird eine Ausnahme ausgelöst, wenn Sie versuchen, das Duplikat zu registrieren.</span><span class="sxs-lookup"><span data-stu-id="c868b-248">Duplicate name registrations on the same owner type are not permitted, and will throw an exception when you attempt to register the duplicate.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c868b-249">Der <xref:System.Windows.DependencyProperty.Name%2A> einer Abhängigkeits Eigenschaft muss der Konvention entsprechen, den Namen des Bezeichner der Abhängigkeits Eigenschaft minus dem Suffix "Property" zu finden.</span><span class="sxs-lookup"><span data-stu-id="c868b-249">The <xref:System.Windows.DependencyProperty.Name%2A> of a dependency property must follow the convention of matching the name of its dependency property identifier minus the suffix "Property".</span></span> <span data-ttu-id="c868b-250">Weitere Informationen finden Sie unter [Benutzerdefinierte Abhängigkeitseigenschaften](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="c868b-250">For details, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c868b-251">Im folgenden Beispiel werden verschiedene Merkmale eines Bezeichners für eine Abhängigkeits Eigenschaft abgefragt, einschließlich der <xref:System.Windows.DependencyProperty.Name%2A>.</span><span class="sxs-lookup"><span data-stu-id="c868b-251">The following example queries various characteristics of a dependency property identifier, including the <xref:System.Windows.DependencyProperty.Name%2A>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OverrideMetadata">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c868b-252">Stellt alternative Metadaten für diese Abhängigkeitseigenschaft bereit, wenn sie in Instanzen eines angegebenen Typs vorhanden ist, im Gegensatz zu den Metadaten, die bei der ersten Registrierung der Abhängigkeitseigenschaft bereitgestellt wurden.</span><span class="sxs-lookup"><span data-stu-id="c868b-252">Supplies alternate metadata for this dependency property when it is present on instances of a specified type, versus the metadata that was provided in the initial dependency property registration.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata -&gt; unit" Usage="dependencyProperty.OverrideMetadata (forType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType"><span data-ttu-id="c868b-253">Der Typ, bei dem diese Abhängigkeitseigenschaft geerbt wird und bei dem die bereitgestellten alternativen Metadaten angewendet werden.</span><span class="sxs-lookup"><span data-stu-id="c868b-253">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="c868b-254">Die Metadaten, die auf die Abhängigkeitseigenschaft im überschreibenden Typ angewendet werden sollen.</span><span class="sxs-lookup"><span data-stu-id="c868b-254">The metadata to apply to the dependency property on the overriding type.</span></span></param>
        <summary><span data-ttu-id="c868b-255">Gibt alternative Metadaten für diese Abhängigkeitseigenschaft an, wenn sie in Instanzen eines angegebenen Typs vorhanden ist. Dabei werden die Metadaten überschrieben, die für die Abhängigkeitseigenschaft bei der Vererbung von Basistypen vorhanden waren.</span><span class="sxs-lookup"><span data-stu-id="c868b-255">Specifies alternate metadata for this dependency property when it is present on instances of a specified type, overriding the metadata that existed for the dependency property as it was inherited from base types.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c868b-256">Metadaten für Abhängigkeits Eigenschaften sollten überschrieben werden, bevor das Eigenschaften System die Abhängigkeits Eigenschaft verwendet.</span><span class="sxs-lookup"><span data-stu-id="c868b-256">Dependency property metadata should be overridden before the property system uses the dependency property.</span></span> <span data-ttu-id="c868b-257">Dies entspricht der Zeit, in der bestimmte Instanzen mithilfe der Klasse erstellt werden, die die Abhängigkeits Eigenschaft registriert.</span><span class="sxs-lookup"><span data-stu-id="c868b-257">This equates to the time that specific instances are created using the class that registers the dependency property.</span></span> <span data-ttu-id="c868b-258">Aufrufe von <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> sollten nur innerhalb der statischen Konstruktoren des Typs ausgeführt werden, der sich selbst als `forType` Parameter dieser Methode oder über eine ähnliche Instanziierung bereitstellt.</span><span class="sxs-lookup"><span data-stu-id="c868b-258">Calls to <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or through similar instantiation.</span></span> <span data-ttu-id="c868b-259">Wenn Sie versuchen, die Metadaten zu ändern, nachdem Instanzen des Besitzertyps vorhanden sind, werden keine Ausnahmen ausgelöst, dies führt jedoch zu inkonsistenten Verhalten im Eigenschaften System.</span><span class="sxs-lookup"><span data-stu-id="c868b-259">Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.</span></span>  
  
 <span data-ttu-id="c868b-260">Nachdem die Metadaten für eine bestimmte abgeleitete Klasse mit dieser Methode überschrieben wurden, wird bei nachfolgenden versuchen, Metadaten für diese abgeleitete Klasse zu überschreiben, eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="c868b-260">After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.</span></span>  
  
 <span data-ttu-id="c868b-261">Die angegebenen Metadaten werden mit den Eigenschafts Metadaten für die Abhängigkeits Eigenschaft zusammengeführt, so wie Sie auf dem Basis Besitzer vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="c868b-261">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="c868b-262">Alle Eigenschaften, die in den ursprünglichen Basis Metadaten angegeben wurden, bleiben erhalten. nur die Merkmale, die speziell in den neuen Metadaten geändert wurden, überschreiben die Eigenschaften der Basis Metadaten.</span><span class="sxs-lookup"><span data-stu-id="c868b-262">Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="c868b-263">Einige Merkmale wie <xref:System.Windows.PropertyMetadata.DefaultValue%2A> werden ersetzt, wenn Sie in den neuen Metadaten angegeben werden.</span><span class="sxs-lookup"><span data-stu-id="c868b-263">Some characteristics such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A> are replaced if specified in the new metadata.</span></span> <span data-ttu-id="c868b-264">Andere, wie z. b. <xref:System.Windows.PropertyChangedCallback>, werden kombiniert.</span><span class="sxs-lookup"><span data-stu-id="c868b-264">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="c868b-265">Letztendlich hängt das Zusammensetzungs Verhalten vom Eigenschaftentyp ab, der für die Überschreibung verwendet wird, sodass das hier beschriebene Verhalten für die vorhandenen eigenschaftenmetadatenklassen ist, die von [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Abhängigkeits Eigenschaften verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="c868b-265">Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dependency properties.</span></span> <span data-ttu-id="c868b-266">Weitere Informationen finden Sie unter [Metadaten für Abhängigkeits Eigenschaften](~/docs/framework/wpf/advanced/dependency-property-metadata.md) und [Framework-Eigenschaften Metadaten](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span><span class="sxs-lookup"><span data-stu-id="c868b-266">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c868b-267">Es wurde versucht, die Metadaten für eine schreibgeschützte Abhängigkeitseigenschaft zu überschreiben (dieser Vorgang kann nicht mit dieser Signatur ausgeführt werden).</span><span class="sxs-lookup"><span data-stu-id="c868b-267">An attempt was made to override metadata on a read-only dependency property (that operation cannot be done using this signature).</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c868b-268">Metadaten wurden für die Abhängigkeitseigenschaft bereits festgelegt, wie im bereitgestellten Typ vorhanden.</span><span class="sxs-lookup"><span data-stu-id="c868b-268">Metadata was already established for the dependency property as it exists on the provided type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata, System.Windows.DependencyPropertyKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.DependencyPropertyKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata, key As DependencyPropertyKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::DependencyPropertyKey ^ key);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata * System.Windows.DependencyPropertyKey -&gt; unit" Usage="dependencyProperty.OverrideMetadata (forType, typeMetadata, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
      </Parameters>
      <Docs>
        <param name="forType"><span data-ttu-id="c868b-269">Der Typ, bei dem diese Abhängigkeitseigenschaft geerbt wird und bei dem die bereitgestellten alternativen Metadaten angewendet werden.</span><span class="sxs-lookup"><span data-stu-id="c868b-269">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="c868b-270">Die Metadaten, die auf die Abhängigkeitseigenschaft im überschreibenden Typ angewendet werden sollen.</span><span class="sxs-lookup"><span data-stu-id="c868b-270">The metadata to apply to the dependency property on the overriding type.</span></span></param>
        <param name="key"><span data-ttu-id="c868b-271">Der Zugriffsschlüssel für eine schreibgeschützte Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-271">The access key for a read-only dependency property.</span></span></param>
        <summary><span data-ttu-id="c868b-272">Stellt alternative Metadaten für eine schreibgeschützte Abhängigkeitseigenschaft bereit, wenn sie in Instanzen eines angegebenen Typs vorhanden ist, wodurch die Metadaten überschrieben werden, die bei der ersten Registrierung der Abhängigkeitseigenschaft bereitgestellt wurden.</span><span class="sxs-lookup"><span data-stu-id="c868b-272">Supplies alternate metadata for a read-only dependency property when it is present on instances of a specified type, overriding the metadata that was provided in the initial dependency property registration.</span></span> <span data-ttu-id="c868b-273">Sie müssen die <see cref="T:System.Windows.DependencyPropertyKey" /> für die schreibgeschützte Abhängigkeitseigenschaft übergeben, um das Auslösen einer Ausnahme zu vermeiden.</span><span class="sxs-lookup"><span data-stu-id="c868b-273">You must pass the <see cref="T:System.Windows.DependencyPropertyKey" /> for the read-only dependency property to avoid raising an exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c868b-274">Diese Signatur stellt die zugrunde liegende Implementierung für eine schreibgeschützte Abhängigkeits Eigenschaften-bezeichnermethode (<xref:System.Windows.DependencyPropertyKey>) bereit.</span><span class="sxs-lookup"><span data-stu-id="c868b-274">This signature provides underlying implementation for a read-only dependency property identifier (<xref:System.Windows.DependencyPropertyKey>) method.</span></span> <span data-ttu-id="c868b-275">Verwenden Sie zum Überschreiben von Metadaten für eine Abhängigkeits Eigenschaft mit Lese-/Schreibzugriff <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29></span><span class="sxs-lookup"><span data-stu-id="c868b-275">If overriding metadata for a read-write dependency property, use <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span></span>  
  
 <span data-ttu-id="c868b-276">Metadaten für Abhängigkeits Eigenschaften sollten überschrieben werden, bevor das Eigenschaften System die Abhängigkeits Eigenschaft verwendet.</span><span class="sxs-lookup"><span data-stu-id="c868b-276">Dependency property metadata should be overridden before the property system uses the dependency property.</span></span> <span data-ttu-id="c868b-277">Dies entspricht der Zeit, in der bestimmte Objekte für die Klasse erstellt werden, die die Abhängigkeits Eigenschaft registriert.</span><span class="sxs-lookup"><span data-stu-id="c868b-277">This equates to the time that specific objects are created for the class that registers the dependency property.</span></span> <span data-ttu-id="c868b-278">Aufrufe von <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> sollten nur innerhalb der statischen Konstruktoren des Typs ausgeführt werden, der sich selbst als `forType` Parameter dieser Methode oder über eine ähnliche Instanziierung bereitstellt.</span><span class="sxs-lookup"><span data-stu-id="c868b-278">Calls to <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or through similar instantiation.</span></span> <span data-ttu-id="c868b-279">Wenn Sie versuchen, die Metadaten zu ändern, nachdem Instanzen des Besitzertyps vorhanden sind, werden keine Ausnahmen ausgelöst, dies führt jedoch zu inkonsistenten Verhalten im Eigenschaften System.</span><span class="sxs-lookup"><span data-stu-id="c868b-279">Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.</span></span>  
  
 <span data-ttu-id="c868b-280">Nachdem die Metadaten für eine bestimmte abgeleitete Klasse mit dieser Methode überschrieben wurden, wird bei nachfolgenden versuchen, Metadaten für diese abgeleitete Klasse zu überschreiben, eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="c868b-280">After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.</span></span>  
  
 <span data-ttu-id="c868b-281">Die angegebenen Metadaten werden mit den Eigenschafts Metadaten für die Abhängigkeits Eigenschaft zusammengeführt, so wie Sie auf dem Basis Besitzer vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="c868b-281">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="c868b-282">Alle Eigenschaften, die in den ursprünglichen Basis Metadaten angegeben wurden, bleiben erhalten. nur die Merkmale, die speziell in den neuen Metadaten geändert wurden, überschreiben die Eigenschaften der Basis Metadaten.</span><span class="sxs-lookup"><span data-stu-id="c868b-282">Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="c868b-283">Einige Merkmale wie <xref:System.Windows.PropertyMetadata.DefaultValue%2A> werden ersetzt, wenn Sie in den neuen Metadaten angegeben werden.</span><span class="sxs-lookup"><span data-stu-id="c868b-283">Some characteristics such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A> are replaced if specified in the new metadata.</span></span> <span data-ttu-id="c868b-284">Andere, wie z. b. <xref:System.Windows.PropertyChangedCallback>, werden kombiniert.</span><span class="sxs-lookup"><span data-stu-id="c868b-284">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="c868b-285">Das Zusammensetzungs Verhalten hängt von dem Eigenschaftentyp ab, der für die Überschreibung verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="c868b-285">The merge behavior depends on the property metadata type being used for the override.</span></span> <span data-ttu-id="c868b-286">Weitere Informationen finden Sie unter [Metadaten für Abhängigkeits Eigenschaften](~/docs/framework/wpf/advanced/dependency-property-metadata.md) und [Framework-Eigenschaften Metadaten](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span><span class="sxs-lookup"><span data-stu-id="c868b-286">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.OwnerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ OwnerType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OwnerType : Type" Usage="System.Windows.DependencyProperty.OwnerType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c868b-287">Ruft den Typ des Objekts ab, das die Abhängigkeitseigenschaft im Eigenschaftensystem registriert oder sich selbst als Besitzer der Eigenschaft hinzugefügt hat.</span><span class="sxs-lookup"><span data-stu-id="c868b-287">Gets the type of the object that registered the dependency property with the property system, or added itself as owner of the property.</span></span></summary>
        <value><span data-ttu-id="c868b-288">Der Typ des Objekts, das die Eigenschaft registriert oder sich selbst als Besitzer der Eigenschaft hinzugefügt hat.</span><span class="sxs-lookup"><span data-stu-id="c868b-288">The type of the object that registered the property or added itself as owner of the property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c868b-289">Dieser Wert wurde während der Eigenschaften Registrierung bereitgestellt.</span><span class="sxs-lookup"><span data-stu-id="c868b-289">This value was provided during property registration.</span></span> <span data-ttu-id="c868b-290">Der Besitzer ist entweder der ursprüngliche registriungstyp im Fall eines <xref:System.Windows.DependencyProperty> Bezeichners, der von einem <xref:System.Windows.DependencyProperty.Register%2A>-Befehl generiert wurde, oder der Typ, der sich selbst als Besitzer hinzugefügt hat, wenn ein <xref:System.Windows.DependencyProperty> Bezeichner, der von einem <xref:System.Windows.DependencyProperty.AddOwner%2A>-Befehl generiert wurde.</span><span class="sxs-lookup"><span data-stu-id="c868b-290">The owner will be either the original registering type in the case of a <xref:System.Windows.DependencyProperty> identifier generated from a <xref:System.Windows.DependencyProperty.Register%2A> call, or the type that added itself as owner in the case of a <xref:System.Windows.DependencyProperty> identifier generated from an <xref:System.Windows.DependencyProperty.AddOwner%2A> call.</span></span>  
  
 <span data-ttu-id="c868b-291">Die <xref:System.Windows.DependencyProperty.OwnerType%2A> für eine beliebige <xref:System.Windows.DependencyProperty> ist unveränderlich und kann nicht in einem gültigen <xref:System.Windows.DependencyProperty>`null` werden.</span><span class="sxs-lookup"><span data-stu-id="c868b-291">The <xref:System.Windows.DependencyProperty.OwnerType%2A> on any given <xref:System.Windows.DependencyProperty> is immutable, and cannot be `null` in a valid <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c868b-292">Im folgenden Beispiel wird der Besitzertyp basierend auf dem Bezeichner einer Abhängigkeits Eigenschaft abgerufen `dp`und dann die Metadaten für den Besitzertyp für denselben Bezeichner abgerufen.</span><span class="sxs-lookup"><span data-stu-id="c868b-292">The following example gets the owner type based on a dependency property identifier `dp`, and then gets metadata on the owner type for that same identifier.</span></span> <span data-ttu-id="c868b-293">Dieser Vorgang entspricht tatsächlich dem Abrufen von <xref:System.Windows.DependencyProperty.DefaultMetadata%2A> auf `dp`.</span><span class="sxs-lookup"><span data-stu-id="c868b-293">This operation is actually equivalent to getting <xref:System.Windows.DependencyProperty.DefaultMetadata%2A> on `dp`.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyType">
      <MemberSignature Language="C#" Value="public Type PropertyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type PropertyType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.PropertyType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PropertyType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ PropertyType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyType : Type" Usage="System.Windows.DependencyProperty.PropertyType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c868b-294">Ruft den Typ ab, den die Abhängigkeitseigenschaft für den Wert verwendet.</span><span class="sxs-lookup"><span data-stu-id="c868b-294">Gets the type that the dependency property uses for its value.</span></span></summary>
        <value><span data-ttu-id="c868b-295">Der <see cref="T:System.Type" /> des Eigenschaftswerts.</span><span class="sxs-lookup"><span data-stu-id="c868b-295">The <see cref="T:System.Type" /> of the property value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c868b-296">Diese Eigenschaft meldet den Typ des Eigenschafts Werts, wie er von der ursprünglichen Eigenschaften Registrierung deklariert wurde, über den `propertyType`-Parameter.</span><span class="sxs-lookup"><span data-stu-id="c868b-296">This property reports the type of the property's value as declared by the original property registration, through the `propertyType` parameter.</span></span> <span data-ttu-id="c868b-297">Ähnlich wie bei der <xref:System.Windows.DependencyProperty.Name%2A>ist der Eigenschaftentyp einer Abhängigkeits Eigenschaft nach der Registrierung unveränderlich.</span><span class="sxs-lookup"><span data-stu-id="c868b-297">Similar to the <xref:System.Windows.DependencyProperty.Name%2A>, the property type of a dependency property is immutable after registration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c868b-298">Im folgenden Beispiel werden verschiedene Merkmale eines Bezeichners für eine Abhängigkeits Eigenschaft abgefragt, einschließlich der <xref:System.Windows.DependencyProperty.PropertyType%2A>.</span><span class="sxs-lookup"><span data-stu-id="c868b-298">The following example queries various characteristics of a dependency property identifier, including the <xref:System.Windows.DependencyProperty.PropertyType%2A>.</span></span> <span data-ttu-id="c868b-299">Die Typnamen Zeichenfolge des <xref:System.Windows.DependencyProperty.PropertyType%2A> wird aus der zurückgegebenen <xref:System.Type>abgerufen.</span><span class="sxs-lookup"><span data-stu-id="c868b-299">The type name string of the <xref:System.Windows.DependencyProperty.PropertyType%2A> is obtained from the returned <xref:System.Type>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadOnly : bool" Usage="System.Windows.DependencyProperty.ReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c868b-300">Ruft einen Wert ab, der angibt, ob die von dieser <see cref="T:System.Windows.DependencyProperty" />-Instanz angegebene Abhängigkeitseigenschaft eine schreibgeschützte Abhängigkeitseigenschaft ist.</span><span class="sxs-lookup"><span data-stu-id="c868b-300">Gets a value that indicates whether the dependency property identified by this <see cref="T:System.Windows.DependencyProperty" /> instance is a read-only dependency property.</span></span></summary>
        <value><span data-ttu-id="c868b-301"><see langword="true" />, wenn die Abhängigkeitseigenschaft schreibgeschützt ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c868b-301"><see langword="true" /> if the dependency property is read-only; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c868b-302">Schreibgeschützte Abhängigkeits Eigenschaften werden innerhalb des-Eigenschaften Systems registriert, indem die <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A>-Methode im Gegensatz zur <xref:System.Windows.DependencyProperty.Register%2A>-Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="c868b-302">Read-only dependency properties are registered within the property system by calling the <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> method as opposed to the <xref:System.Windows.DependencyProperty.Register%2A> method.</span></span> <span data-ttu-id="c868b-303">Angefügte Eigenschaften können auch als schreibgeschützt registriert werden. Siehe <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span><span class="sxs-lookup"><span data-stu-id="c868b-303">Attached properties can also be registered as read-only; see <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span></span>  
  
 <span data-ttu-id="c868b-304">Schreibgeschützte Abhängigkeits Eigenschaften erfordern anstelle eines <xref:System.Windows.DependencyProperty> Bezeichners einen <xref:System.Windows.DependencyPropertyKey> Bezeichner, um Metadatenvorgänge wie das Überschreiben der Metadaten oder das Festlegen des Werts auszuführen.</span><span class="sxs-lookup"><span data-stu-id="c868b-304">Read-only dependency properties require a <xref:System.Windows.DependencyPropertyKey> identifier rather than a <xref:System.Windows.DependencyProperty> identifier to perform metadata operations such as overriding the metadata or setting the value.</span></span> <span data-ttu-id="c868b-305">Wenn Sie über einen <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> oder eine andere API, die Bezeichner verfügbar macht, eine Auflistung von <xref:System.Windows.DependencyProperty> Bezeichnern erhalten haben, überprüfen Sie den <xref:System.Windows.DependencyProperty.ReadOnly%2A> Wert, bevor Sie versuchen, <xref:System.Windows.DependencyObject.SetValue%2A> oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> mit diesem Bezeichner der Abhängigkeits Eigenschaft als Eingabeparameter aufzurufen, um sicherzustellen, dass die Abhängigkeits Eigenschaft, die der Bezeichner darstellt, nicht schreibgeschützt ist.</span><span class="sxs-lookup"><span data-stu-id="c868b-305">If you obtained a collection of <xref:System.Windows.DependencyProperty> identifiers through a call to <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> or another API that exposes identifiers, check the <xref:System.Windows.DependencyProperty.ReadOnly%2A> value before attempting to call <xref:System.Windows.DependencyObject.SetValue%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> using that dependency property identifier as an input parameter, to verify that the dependency property that the identifier represents is not read-only.</span></span> <span data-ttu-id="c868b-306">Wenn der Wert von <xref:System.Windows.DependencyProperty.ReadOnly%2A> für eine Abhängigkeits Eigenschaft `true` wird, gibt es keine programmgesteuerte Methode, um einen Verweis auf den <xref:System.Windows.DependencyPropertyKey> Bezeichner der Abhängigkeits Eigenschaft aus den Metadaten oder dem <xref:System.Windows.DependencyProperty> Bezeichner abzurufen. der Bezeichner muss als statisches Feld verfügbar sein, um <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> für eine schreibgeschützte Abhängigkeits Eigenschaft aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="c868b-306">If the value of <xref:System.Windows.DependencyProperty.ReadOnly%2A> is `true` on a dependency property, there is no programmatic way to obtain a reference to the <xref:System.Windows.DependencyPropertyKey> identifier of that dependency property, from the metadata or from the <xref:System.Windows.DependencyProperty> identifier; the identifier must be available as a static field in order to call <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> against a read-only dependency property.</span></span>  
  
 <span data-ttu-id="c868b-307">Wenn Sie eine benutzerdefinierte Abhängigkeits Eigenschaft erstellen und Sie als schreibgeschützt registrieren, sollten Sie nur einen get-Accessor für die [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] Wrapper Eigenschaft definieren.</span><span class="sxs-lookup"><span data-stu-id="c868b-307">When you create a custom dependency property, and register it as read-only, you should define only a get accessor for the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] wrapper property.</span></span> <span data-ttu-id="c868b-308">Andernfalls verfügt die Klasse über ein verwirrendes Objektmodell für den Eigenschafts Wrapper im Vergleich zum Zugriff auf die Abhängigkeits Eigenschaft, die unterstützt.</span><span class="sxs-lookup"><span data-stu-id="c868b-308">Otherwise, your class will have a confusing object model for the property wrapper as compared to the access to the backing dependency property.</span></span> <span data-ttu-id="c868b-309">Weitere Informationen finden Sie unter [benutzerdefinierte Abhängigkeits Eigenschaften](~/docs/framework/wpf/advanced/custom-dependency-properties.md) oder schreibgeschützte [Abhängigkeits Eigenschaften](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="c868b-309">For details, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md) or [Read-Only Dependency Properties](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c868b-310">Im folgenden Beispiel werden die Standard Metadaten und die Eigenschaften des bezeichnerbezeichnerbezeichners aus unterschiedlichen Abhängigkeits Eigenschafts Feldern abgerufen, und die Informationen werden verwendet, um eine Tabelle zum Implementieren eines "metadatenbrowsers" aufzufüllen.</span><span class="sxs-lookup"><span data-stu-id="c868b-310">The following example obtains the default metadata and the dependency property identifier properties from various dependency property fields, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Register">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c868b-311">Registriert eine Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-311">Registers a dependency property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Register (name As String, propertyType As Type, ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member Register : string * Type * Type -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.Register (name, propertyType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="c868b-312">Der Name der zu registrierenden Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-312">The name of the dependency property to register.</span></span> <span data-ttu-id="c868b-313">Der Name muss innerhalb des Registrierungsnamespace des Besitzertyps eindeutig sein.</span><span class="sxs-lookup"><span data-stu-id="c868b-313">The name must be unique within the registration namespace of the owner type.</span></span></param>
        <param name="propertyType"><span data-ttu-id="c868b-314">Der Typ der Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-314">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="c868b-315">Der Besitzertyp, von dem die Abhängigkeitseigenschaft registriert wird.</span><span class="sxs-lookup"><span data-stu-id="c868b-315">The owner type that is registering the dependency property.</span></span></param>
        <summary><span data-ttu-id="c868b-316">Registriert eine Abhängigkeitseigenschaft mit dem angegebenen Eigenschaftsnamen, Eigenschaftstyp und Besitzertyp.</span><span class="sxs-lookup"><span data-stu-id="c868b-316">Registers a dependency property with the specified property name, property type, and owner type.</span></span></summary>
        <returns><span data-ttu-id="c868b-317">Ein Bezeichner für eine Abhängigkeitseigenschaft, der zum Festlegen des Werts eines <see langword="public static readonly" />-Felds in der Klasse verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="c868b-317">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span></span> <span data-ttu-id="c868b-318">Dieser Bezeichner wird dann später in Vorgängen (z. B. beim programmgesteuerten Festlegen des Werts oder beim Abrufen von Metadaten) zum Verweisen auf die Abhängigkeitseigenschaft verwendet.</span><span class="sxs-lookup"><span data-stu-id="c868b-318">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c868b-319">Weitere Informationen zur Registrierung von Abhängigkeits Eigenschaften finden Sie unter <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="c868b-319">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 [!code-csharp[WPFAquariumSln#Register3Param](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#register3param)]
 [!code-vb[WPFAquariumSln#Register3Param](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#register3param)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Register (name As String, propertyType As Type, ownerType As Type, typeMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="static member Register : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.Register (name, propertyType, ownerType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="c868b-320">Der Name der zu registrierenden Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-320">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="c868b-321">Der Typ der Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-321">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="c868b-322">Der Besitzertyp, von dem die Abhängigkeitseigenschaft registriert wird.</span><span class="sxs-lookup"><span data-stu-id="c868b-322">The owner type that is registering the dependency property.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="c868b-323">Eigenschaftenmetadaten für die Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-323">Property metadata for the dependency property.</span></span></param>
        <summary><span data-ttu-id="c868b-324">Registriert eine Abhängigkeitseigenschaft mit dem angegebenen Eigenschaftsnamen, Eigenschaftstyp und Besitzertyp sowie den angegebenen Eigenschaftsmetadaten.</span><span class="sxs-lookup"><span data-stu-id="c868b-324">Registers a dependency property with the specified property name, property type, owner type, and property metadata.</span></span></summary>
        <returns><span data-ttu-id="c868b-325">Ein Bezeichner für eine Abhängigkeitseigenschaft, der zum Festlegen des Werts eines <see langword="public static readonly" />-Felds in der Klasse verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="c868b-325">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span></span> <span data-ttu-id="c868b-326">Dieser Bezeichner wird dann später in Vorgängen (z. B. beim programmgesteuerten Festlegen des Werts oder beim Abrufen von Metadaten) zum Verweisen auf die Abhängigkeitseigenschaft verwendet.</span><span class="sxs-lookup"><span data-stu-id="c868b-326">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c868b-327">Weitere Informationen zur Registrierung von Abhängigkeits Eigenschaften finden Sie unter <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="c868b-327">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Register (name As String, propertyType As Type, ownerType As Type, typeMetadata As PropertyMetadata, validateValueCallback As ValidateValueCallback) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member Register : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.Register (name, propertyType, ownerType, typeMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="c868b-328">Der Name der zu registrierenden Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-328">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="c868b-329">Der Typ der Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-329">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="c868b-330">Der Besitzertyp, von dem die Abhängigkeitseigenschaft registriert wird.</span><span class="sxs-lookup"><span data-stu-id="c868b-330">The owner type that is registering the dependency property.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="c868b-331">Eigenschaftenmetadaten für die Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-331">Property metadata for the dependency property.</span></span></param>
        <param name="validateValueCallback"><span data-ttu-id="c868b-332">Ein Verweis auf einen Rückruf, der eine beliebige benutzerdefinierte Validierung des Werts der Abhängigkeitseigenschaft über die normale Validierung hinaus durchführen soll.</span><span class="sxs-lookup"><span data-stu-id="c868b-332">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</span></span></param>
        <summary><span data-ttu-id="c868b-333">Registriert eine Abhängigkeitseigenschaft mit dem angegebenen Eigenschaftsnamen, Eigenschaftstyp, Besitzertyp, den angegebenen Eigenschaftsmetadaten und einem angegebenen Wertvalidierungsrückruf für die Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-333">Registers a dependency property with the specified property name, property type, owner type, property metadata, and a value validation callback for the property.</span></span></summary>
        <returns><span data-ttu-id="c868b-334">Ein Bezeichner für eine Abhängigkeitseigenschaft, der zum Festlegen des Werts eines <see langword="public static readonly" />-Felds in der Klasse verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="c868b-334">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span></span> <span data-ttu-id="c868b-335">Dieser Bezeichner wird dann später in Vorgängen (z. B. beim programmgesteuerten Festlegen des Werts oder beim Abrufen von Metadaten) zum Verweisen auf die Abhängigkeitseigenschaft verwendet.</span><span class="sxs-lookup"><span data-stu-id="c868b-335">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c868b-336">Weitere Informationen zur Registrierung von Abhängigkeits Eigenschaften finden Sie unter <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="c868b-336">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c868b-337">Im folgenden Beispiel wird eine Abhängigkeits Eigenschaft (einschließlich eines Validierungs Rückrufs) registriert (die Rückruf Definition wird nicht angezeigt; ausführliche Informationen zur Rückruf Definition finden Sie unter <xref:System.Windows.ValidateValueCallback>).</span><span class="sxs-lookup"><span data-stu-id="c868b-337">The following example registers a dependency property, including a validation callback (the callback definition is not shown; for details on the callback definition, see <xref:System.Windows.ValidateValueCallback>).</span></span>  
  
 [!code-csharp[DPCallbackOverride#CurrentDefinitionWithWrapper](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCallbackOverride/CSharp/SDKSampleLibrary/class1.cs#currentdefinitionwithwrapper)]
 [!code-vb[DPCallbackOverride#CurrentDefinitionWithWrapper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCallbackOverride/visualbasic/sdksamplelibrary/class1.vb#currentdefinitionwithwrapper)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterAttached">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c868b-338">Registriert eine angefügte Eigenschaft mit dem Eigenschaftensystem.</span><span class="sxs-lookup"><span data-stu-id="c868b-338">Registers an attached property with the property system.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttached (name As String, propertyType As Type, ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member RegisterAttached : string * Type * Type -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.RegisterAttached (name, propertyType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="c868b-339">Der Name der zu registrierenden Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-339">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="c868b-340">Der Typ der Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-340">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="c868b-341">Der Besitzertyp, von dem die Abhängigkeitseigenschaft registriert wird.</span><span class="sxs-lookup"><span data-stu-id="c868b-341">The owner type that is registering the dependency property.</span></span></param>
        <summary><span data-ttu-id="c868b-342">Registriert eine angefügte Eigenschaft mit dem angegebenen Eigenschaftsnamen, Eigenschaftstyp und Besitzertyp.</span><span class="sxs-lookup"><span data-stu-id="c868b-342">Registers an attached property with the specified property name, property type, and owner type.</span></span></summary>
        <returns><span data-ttu-id="c868b-343">Ein Bezeichner für eine Abhängigkeitseigenschaft, der zum Festlegen des Werts eines <see langword="public static readonly" />-Felds in der Klasse verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="c868b-343">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span></span> <span data-ttu-id="c868b-344">Dieser Bezeichner wird dann später in Vorgängen (z. B. beim programmgesteuerten Festlegen des Werts oder beim Abrufen von Metadaten) zum Verweisen auf die Abhängigkeitseigenschaft verwendet.</span><span class="sxs-lookup"><span data-stu-id="c868b-344">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c868b-345">Eine angefügte Eigenschaft ist ein Eigenschafts Konzept, das durch [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]definiert wird.</span><span class="sxs-lookup"><span data-stu-id="c868b-345">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="c868b-346">die angefügten Eigenschaften als Abhängigkeits Eigenschaften implementiert.</span><span class="sxs-lookup"><span data-stu-id="c868b-346">implements attached properties as dependency properties.</span></span> <span data-ttu-id="c868b-347">Da es sich bei den [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] angefügten Eigenschaften um Abhängigkeits Eigenschaften handelt, können Metadaten angewendet werden, die vom allgemeinen Eigenschaften System für Vorgänge wie Berichts Layouteigenschaften verwendet werden können.</span><span class="sxs-lookup"><span data-stu-id="c868b-347">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="c868b-348">Weitere Informationen finden Sie unter [Übersicht über angefügte Eigenschaften](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="c868b-348">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="c868b-349">Weitere Informationen zur Registrierung von Abhängigkeits Eigenschaften finden Sie unter <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="c868b-349">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c868b-350">Im folgenden Beispiel wird eine angefügte-Eigenschaft für eine abstrakte Klasse mithilfe dieses <xref:System.Windows.DependencyProperty.RegisterAttached%2A> Signatur registriert.</span><span class="sxs-lookup"><span data-stu-id="c868b-350">The following example registers an attached property on an abstract class using this <xref:System.Windows.DependencyProperty.RegisterAttached%2A> signature.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]
 [!code-vb[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttached (name As String, propertyType As Type, ownerType As Type, defaultMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata);" />
      <MemberSignature Language="F#" Value="static member RegisterAttached : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.RegisterAttached (name, propertyType, ownerType, defaultMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="c868b-351">Der Name der zu registrierenden Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-351">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="c868b-352">Der Typ der Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-352">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="c868b-353">Der Besitzertyp, von dem die Abhängigkeitseigenschaft registriert wird.</span><span class="sxs-lookup"><span data-stu-id="c868b-353">The owner type that is registering the dependency property.</span></span></param>
        <param name="defaultMetadata"><span data-ttu-id="c868b-354">Eigenschaftenmetadaten für die Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-354">Property metadata for the dependency property.</span></span> <span data-ttu-id="c868b-355">Dies kann den Standardwert sowie andere Merkmale einschließen.</span><span class="sxs-lookup"><span data-stu-id="c868b-355">This can include the default value as well as other characteristics.</span></span></param>
        <summary><span data-ttu-id="c868b-356">Registriert eine angefügte Eigenschaft mit dem angegebenen Eigenschaftsnamen, Eigenschaftstyp und Besitzertyp sowie den angegebenen Eigenschaftenmetadaten.</span><span class="sxs-lookup"><span data-stu-id="c868b-356">Registers an attached property with the specified property name, property type, owner type, and property metadata.</span></span></summary>
        <returns><span data-ttu-id="c868b-357">Ein Bezeichner für eine Abhängigkeitseigenschaft, der zum Festlegen des Werts eines <see langword="public static readonly" />-Felds in der Klasse verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="c868b-357">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span></span> <span data-ttu-id="c868b-358">Dieser Bezeichner wird dann später in Vorgängen (z. B. beim programmgesteuerten Festlegen des Werts oder beim Abrufen von Metadaten) zum Verweisen auf die Abhängigkeitseigenschaft verwendet.</span><span class="sxs-lookup"><span data-stu-id="c868b-358">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c868b-359">Eine angefügte Eigenschaft ist ein Eigenschafts Konzept, das durch [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]definiert wird.</span><span class="sxs-lookup"><span data-stu-id="c868b-359">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="c868b-360">die angefügten Eigenschaften als Abhängigkeits Eigenschaften implementiert.</span><span class="sxs-lookup"><span data-stu-id="c868b-360">implements attached properties as dependency properties.</span></span> <span data-ttu-id="c868b-361">Da es sich bei den [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] angefügten Eigenschaften um Abhängigkeits Eigenschaften handelt, können Metadaten angewendet werden, die vom allgemeinen Eigenschaften System für Vorgänge wie Berichts Layouteigenschaften verwendet werden können.</span><span class="sxs-lookup"><span data-stu-id="c868b-361">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="c868b-362">Weitere Informationen finden Sie unter [Übersicht über angefügte Eigenschaften](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="c868b-362">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="c868b-363">Weitere Informationen zur Registrierung von Abhängigkeits Eigenschaften finden Sie unter <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="c868b-363">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="c868b-364">Verwenden von RegisterAttached für Wert erbende Abhängigkeits Eigenschaften</span><span class="sxs-lookup"><span data-stu-id="c868b-364">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="c868b-365">Ein bestimmtes Szenario für das Registrieren einer Abhängigkeits Eigenschaft bei <xref:System.Windows.DependencyProperty.RegisterAttached%2A> anstelle von <xref:System.Windows.DependencyProperty.Register%2A> ist die Unterstützung der Vererbung von Eigenschafts Werten.</span><span class="sxs-lookup"><span data-stu-id="c868b-365">One particular scenario for registering a dependency property with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="c868b-366">Sie sollten Wert erbende Abhängigkeits Eigenschaften auch dann mit <xref:System.Windows.DependencyProperty.RegisterAttached%2A> registrieren, wenn die Klasse Eigenschaften Wrapper Accessoren definiert, die die Abhängigkeits Eigenschaft verfügbar machen, und auch wenn Sie nicht beabsichtigen, Get \*-und Set \* static-Methoden zur Bereitstellung von echten Accessoren für die angefügte Eigenschaften Unterstützung bereitzustellen.</span><span class="sxs-lookup"><span data-stu-id="c868b-366">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get\* and Set\* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="c868b-367">Obwohl die Vererbung von Eigenschafts Werten für nicht angefügte Abhängigkeits Eigenschaften aussehen könnte, ist das Vererbungs Verhalten für eine nicht angefügte Eigenschaft über bestimmte Elementgrenzen in der Laufzeitstruktur nicht definiert.</span><span class="sxs-lookup"><span data-stu-id="c868b-367">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="c868b-368">Wenn die Eigenschaft als angefügt registriert wird, ist die angefügte Eigenschaft eine globale Eigenschaft für das Eigenschaften System und stellt sicher, dass die Vererbung von Eigenschafts Werten über alle Grenzen in einer Elementstruktur hinweg funktioniert.</span><span class="sxs-lookup"><span data-stu-id="c868b-368">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="c868b-369">Verwenden Sie immer <xref:System.Windows.DependencyProperty.RegisterAttached%2A>, um Eigenschaften zu registrieren, bei denen Sie <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in den Metadaten angeben.</span><span class="sxs-lookup"><span data-stu-id="c868b-369">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="c868b-370">Weitere Informationen finden Sie unter [ Vererbung von Eigenschaftswerten](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="c868b-370">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttached (name As String, propertyType As Type, ownerType As Type, defaultMetadata As PropertyMetadata, validateValueCallback As ValidateValueCallback) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member RegisterAttached : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.RegisterAttached (name, propertyType, ownerType, defaultMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="c868b-371">Der Name der zu registrierenden Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-371">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="c868b-372">Der Typ der Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-372">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="c868b-373">Der Besitzertyp, von dem die Abhängigkeitseigenschaft registriert wird.</span><span class="sxs-lookup"><span data-stu-id="c868b-373">The owner type that is registering the dependency property.</span></span></param>
        <param name="defaultMetadata"><span data-ttu-id="c868b-374">Eigenschaftenmetadaten für die Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-374">Property metadata for the dependency property.</span></span> <span data-ttu-id="c868b-375">Dies kann den Standardwert sowie andere Merkmale einschließen.</span><span class="sxs-lookup"><span data-stu-id="c868b-375">This can include the default value as well as other characteristics.</span></span></param>
        <param name="validateValueCallback"><span data-ttu-id="c868b-376">Ein Verweis auf einen Rückruf, der eine beliebige benutzerdefinierte Validierung des Werts der Abhängigkeitseigenschaft über die normale Validierung hinaus durchführen soll.</span><span class="sxs-lookup"><span data-stu-id="c868b-376">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</span></span></param>
        <summary><span data-ttu-id="c868b-377">Registriert eine angefügte Eigenschaft mit dem angegebenen Eigenschaftstyp, Besitzertyp, den angegebenen Eigenschaftsmetadaten und dem angegebenen Wertvalidierungsrückruf für die Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-377">Registers an attached property with the specified property type, owner type, property metadata, and value validation callback for the property.</span></span></summary>
        <returns><span data-ttu-id="c868b-378">Ein Bezeichner für eine Abhängigkeitseigenschaft, der zum Festlegen des Werts eines <see langword="public static readonly" />-Felds in der Klasse verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="c868b-378">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span></span> <span data-ttu-id="c868b-379">Dieser Bezeichner wird dann später in Vorgängen (z. B. beim programmgesteuerten Festlegen des Werts oder beim Abrufen von Metadaten) zum Verweisen auf die Abhängigkeitseigenschaft verwendet.</span><span class="sxs-lookup"><span data-stu-id="c868b-379">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c868b-380">Eine angefügte Eigenschaft ist ein Eigenschafts Konzept, das durch [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]definiert wird.</span><span class="sxs-lookup"><span data-stu-id="c868b-380">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="c868b-381">die angefügten Eigenschaften als Abhängigkeits Eigenschaften implementiert.</span><span class="sxs-lookup"><span data-stu-id="c868b-381">implements attached properties as dependency properties.</span></span> <span data-ttu-id="c868b-382">Da es sich bei den [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] angefügten Eigenschaften um Abhängigkeits Eigenschaften handelt, können Metadaten angewendet werden, die vom allgemeinen Eigenschaften System für Vorgänge wie Berichts Layouteigenschaften verwendet werden können.</span><span class="sxs-lookup"><span data-stu-id="c868b-382">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="c868b-383">Weitere Informationen finden Sie unter [Übersicht über angefügte Eigenschaften](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="c868b-383">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="c868b-384">Weitere Informationen zur Registrierung von Abhängigkeits Eigenschaften finden Sie unter <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="c868b-384">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="c868b-385">Verwenden von RegisterAttached für Wert erbende Abhängigkeits Eigenschaften</span><span class="sxs-lookup"><span data-stu-id="c868b-385">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="c868b-386">Ein bestimmtes Szenario für das Registrieren einer Abhängigkeits Eigenschaft bei <xref:System.Windows.DependencyProperty.RegisterAttached%2A> anstelle von <xref:System.Windows.DependencyProperty.Register%2A> ist die Unterstützung der Vererbung von Eigenschafts Werten.</span><span class="sxs-lookup"><span data-stu-id="c868b-386">One particular scenario for registering a dependency property with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="c868b-387">Sie sollten Wert erbende Abhängigkeits Eigenschaften auch dann mit <xref:System.Windows.DependencyProperty.RegisterAttached%2A> registrieren, wenn die Klasse Eigenschaften Wrapper Accessoren definiert, die die Abhängigkeits Eigenschaft verfügbar machen, und auch wenn Sie nicht beabsichtigen, Get \*-und Set \* static-Methoden zur Bereitstellung von echten Accessoren für die angefügte Eigenschaften Unterstützung bereitzustellen.</span><span class="sxs-lookup"><span data-stu-id="c868b-387">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get\* and Set\* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="c868b-388">Obwohl die Vererbung von Eigenschafts Werten für nicht angefügte Abhängigkeits Eigenschaften aussehen könnte, ist das Vererbungs Verhalten für eine nicht angefügte Eigenschaft über bestimmte Elementgrenzen in der Laufzeitstruktur nicht definiert.</span><span class="sxs-lookup"><span data-stu-id="c868b-388">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="c868b-389">Wenn die Eigenschaft als angefügt registriert wird, ist die angefügte Eigenschaft eine globale Eigenschaft für das Eigenschaften System und stellt sicher, dass die Vererbung von Eigenschafts Werten über alle Grenzen in einer Elementstruktur hinweg funktioniert.</span><span class="sxs-lookup"><span data-stu-id="c868b-389">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="c868b-390">Verwenden Sie immer <xref:System.Windows.DependencyProperty.RegisterAttached%2A>, um Eigenschaften zu registrieren, bei denen Sie <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in den Metadaten angeben.</span><span class="sxs-lookup"><span data-stu-id="c868b-390">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="c868b-391">Weitere Informationen finden Sie unter [ Vererbung von Eigenschaftswerten](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="c868b-391">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c868b-392">Im folgenden Beispiel wird eine angefügte-Eigenschaft für eine abstrakte Klasse mithilfe dieses <xref:System.Windows.DependencyProperty.RegisterAttached%2A> Signatur registriert.</span><span class="sxs-lookup"><span data-stu-id="c868b-392">The following example registers an attached property on an abstract class using this <xref:System.Windows.DependencyProperty.RegisterAttached%2A> signature.</span></span> <span data-ttu-id="c868b-393">Diese angefügte Eigenschaft ist eine Enumerationstyp-Eigenschaft, und die Registrierung fügt einen Validierungs Rückruf hinzu, um zu überprüfen, ob der angegebene Wert ein Wert der-Enumeration ist.</span><span class="sxs-lookup"><span data-stu-id="c868b-393">This attached property is an enumeration type property, and the registration adds a validation callback to verify that the provided value is a value of the enumeration.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]
 [!code-vb[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterAttachedReadOnly">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c868b-394">Registriert eine schreibgeschützte angefügte Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-394">Registers a read-only attached property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterAttachedReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterAttachedReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttachedReadOnly (name As String, propertyType As Type, ownerType As Type, defaultMetadata As PropertyMetadata) As DependencyPropertyKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterAttachedReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata);" />
      <MemberSignature Language="F#" Value="static member RegisterAttachedReadOnly : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterAttachedReadOnly (name, propertyType, ownerType, defaultMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="c868b-395">Der Name der zu registrierenden Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-395">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="c868b-396">Der Typ der Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-396">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="c868b-397">Der Besitzertyp, von dem die Abhängigkeitseigenschaft registriert wird.</span><span class="sxs-lookup"><span data-stu-id="c868b-397">The owner type that is registering the dependency property.</span></span></param>
        <param name="defaultMetadata"><span data-ttu-id="c868b-398">Eigenschaftenmetadaten für die Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-398">Property metadata for the dependency property.</span></span></param>
        <summary><span data-ttu-id="c868b-399">Registriert eine schreibgeschützte angefügte Eigenschaft mit dem angegebenen Eigenschaftstyp und Besitzertyp sowie den angegebenen Eigenschaftsmetadaten.</span><span class="sxs-lookup"><span data-stu-id="c868b-399">Registers a read-only attached property, with the specified property type, owner type, and property metadata.</span></span></summary>
        <returns><span data-ttu-id="c868b-400">Ein Schlüssel für eine Abhängigkeitseigenschaft, der zum Festlegen des Werts für ein statisches schreibgeschütztes Feld in der Klasse verwendet werden sollte. Mit diesem wird dann später auf die Abhängigkeitseigenschaft verwiesen.</span><span class="sxs-lookup"><span data-stu-id="c868b-400">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c868b-401">Diese Methode gibt den Typ <xref:System.Windows.DependencyPropertyKey>zurück, während <xref:System.Windows.DependencyProperty.RegisterAttached%2A> den Typ <xref:System.Windows.DependencyProperty>zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="c868b-401">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="c868b-402">Normalerweise werden die Schlüssel, die schreibgeschützte Eigenschaften darstellen, nicht öffentlich gemacht, da die Schlüssel verwendet werden können, um den Wert der Abhängigkeits Eigenschaft festzulegen, indem <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="c868b-402">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="c868b-403">Ihr Klassen Design wirkt sich auf Ihre Anforderungen aus. es wird jedoch im Allgemeinen empfohlen, den Zugriff und die Sichtbarkeit aller <xref:System.Windows.DependencyPropertyKey> auf die Teile des Codes zu beschränken, die notwendig sind, um diese Abhängigkeits Eigenschaft als Teil der Klassen-oder Anwendungslogik festzulegen.</span><span class="sxs-lookup"><span data-stu-id="c868b-403">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="c868b-404">Außerdem wird empfohlen, dass Sie einen Bezeichner für die Abhängigkeits Eigenschaft für die schreibgeschützte Abhängigkeits Eigenschaft verfügbar machen, indem Sie den Wert <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> als `public static readonly` Feld in der Klasse verfügbar machen.</span><span class="sxs-lookup"><span data-stu-id="c868b-404">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="c868b-405">Schreibgeschützte angefügte Eigenschaften sind ein seltenen Szenario, da das primäre Szenario für eine angefügte Eigenschaft in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]verwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="c868b-405">Read-only attached properties are a rare scenario, because the primary scenario for an attached property is its use in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span> <span data-ttu-id="c868b-406">Ohne einen öffentlichen Setter kann eine angefügte Eigenschaft nicht in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Syntax festgelegt werden.</span><span class="sxs-lookup"><span data-stu-id="c868b-406">Without a public setter, an attached property cannot be set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="c868b-407">Weitere Informationen zur Registrierung von Abhängigkeits Eigenschaften finden Sie unter <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="c868b-407">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="c868b-408">Verwenden von RegisterAttached für Wert erbende Abhängigkeits Eigenschaften</span><span class="sxs-lookup"><span data-stu-id="c868b-408">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="c868b-409">Ein bestimmtes Szenario zum Registrieren einer Abhängigkeits Eigenschaft als angefügt ist die Unterstützung der Vererbung von Eigenschafts Werten.</span><span class="sxs-lookup"><span data-stu-id="c868b-409">One particular scenario for registering a dependency property as attached is to support property value inheritance.</span></span> <span data-ttu-id="c868b-410">Sie sollten Wert erbende Abhängigkeits Eigenschaften auch dann mit <xref:System.Windows.DependencyProperty.RegisterAttached%2A> registrieren, wenn die Klasse Eigenschaften Wrapper Accessoren definiert, die die Abhängigkeits Eigenschaft verfügbar machen, und auch wenn Sie nicht beabsichtigen, Get \*-und Set \* static-Methoden zur Bereitstellung von echten Accessoren für die angefügte Eigenschaften Unterstützung bereitzustellen.</span><span class="sxs-lookup"><span data-stu-id="c868b-410">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get\* and Set\* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="c868b-411">Obwohl die Vererbung von Eigenschafts Werten für nicht angefügte Abhängigkeits Eigenschaften aussehen könnte, ist das Vererbungs Verhalten für eine nicht angefügte Eigenschaft über bestimmte Elementgrenzen in der Laufzeitstruktur nicht definiert.</span><span class="sxs-lookup"><span data-stu-id="c868b-411">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="c868b-412">Wenn die Eigenschaft als angefügt registriert wird, ist die angefügte Eigenschaft eine globale Eigenschaft für das Eigenschaften System und stellt sicher, dass die Vererbung von Eigenschafts Werten über alle Grenzen in einer Elementstruktur hinweg funktioniert.</span><span class="sxs-lookup"><span data-stu-id="c868b-412">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="c868b-413">Verwenden Sie immer <xref:System.Windows.DependencyProperty.RegisterAttached%2A>, um Eigenschaften zu registrieren, bei denen Sie <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in den Metadaten angeben.</span><span class="sxs-lookup"><span data-stu-id="c868b-413">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="c868b-414">Weitere Informationen finden Sie unter [ Vererbung von Eigenschaftswerten](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="c868b-414">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterAttachedReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterAttachedReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttachedReadOnly (name As String, propertyType As Type, ownerType As Type, defaultMetadata As PropertyMetadata, validateValueCallback As ValidateValueCallback) As DependencyPropertyKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterAttachedReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member RegisterAttachedReadOnly : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterAttachedReadOnly (name, propertyType, ownerType, defaultMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="c868b-415">Der Name der zu registrierenden Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-415">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="c868b-416">Der Typ der Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-416">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="c868b-417">Der Besitzertyp, von dem die Abhängigkeitseigenschaft registriert wird.</span><span class="sxs-lookup"><span data-stu-id="c868b-417">The owner type that is registering the dependency property.</span></span></param>
        <param name="defaultMetadata"><span data-ttu-id="c868b-418">Eigenschaftenmetadaten für die Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-418">Property metadata for the dependency property.</span></span></param>
        <param name="validateValueCallback"><span data-ttu-id="c868b-419">Ein Verweis auf einen benutzerdefinierten Rückruf, der eine beliebige benutzerdefinierte Validierung des Werts der Abhängigkeitseigenschaft über die normale Validierung hinaus durchführen soll.</span><span class="sxs-lookup"><span data-stu-id="c868b-419">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</span></span></param>
        <summary><span data-ttu-id="c868b-420">Registriert eine schreibgeschützte Eigenschaft mit dem angegebenen Eigenschaftstyp, Besitzertyp, den angegebenen Eigenschaftsmetadaten und einem Validierungsrückruf.</span><span class="sxs-lookup"><span data-stu-id="c868b-420">Registers a read-only attached property, with the specified property type, owner type, property metadata, and a validation callback.</span></span></summary>
        <returns><span data-ttu-id="c868b-421">Ein Abhängigkeitseigenschaftsschlüssel, der dazu verwendet werden soll, den Wert eines statischen schreibgeschützten Felds in Ihrer Klasse festzulegen, die dann dazu verwendet wird, auf die Abhängigkeitseigenschaft zu verweisen.</span><span class="sxs-lookup"><span data-stu-id="c868b-421">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c868b-422">Diese Methode gibt den Typ <xref:System.Windows.DependencyPropertyKey>zurück, während <xref:System.Windows.DependencyProperty.RegisterAttached%2A> den Typ <xref:System.Windows.DependencyProperty>zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="c868b-422">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="c868b-423">In der Regel werden die Schlüssel <xref:System.Windows.DependencyProperty>, die den Typ darstellen.</span><span class="sxs-lookup"><span data-stu-id="c868b-423">Typically, the keys that represent the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="c868b-424">Normalerweise werden die Schlüssel, die schreibgeschützte Eigenschaften darstellen, nicht öffentlich gemacht, da die Schlüssel verwendet werden können, um den Wert der Abhängigkeits Eigenschaft festzulegen, indem <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="c868b-424">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="c868b-425">Ihr Klassen Design wirkt sich auf Ihre Anforderungen aus. es wird jedoch im Allgemeinen empfohlen, den Zugriff und die Sichtbarkeit aller <xref:System.Windows.DependencyPropertyKey> auf die Teile des Codes zu beschränken, die notwendig sind, um diese Abhängigkeits Eigenschaft als Teil der Klassen-oder Anwendungslogik festzulegen.</span><span class="sxs-lookup"><span data-stu-id="c868b-425">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="c868b-426">Außerdem wird empfohlen, dass Sie einen Bezeichner für die Abhängigkeits Eigenschaft für die schreibgeschützte Abhängigkeits Eigenschaft verfügbar machen, indem Sie den Wert <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> als `public static readonly` Feld in der Klasse verfügbar machen.</span><span class="sxs-lookup"><span data-stu-id="c868b-426">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="c868b-427">Schreibgeschützte angefügte Eigenschaften sind ein seltenen Szenario, da das primäre Szenario für eine angefügte Eigenschaft in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]verwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="c868b-427">Read-only attached properties are a rare scenario, because the primary scenario for an attached property is its use in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span> <span data-ttu-id="c868b-428">Ohne einen öffentlichen Setter kann eine angefügte Eigenschaft nicht in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Syntax festgelegt werden.</span><span class="sxs-lookup"><span data-stu-id="c868b-428">Without a public setter, an attached property cannot be set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="c868b-429">Weitere Informationen zur Registrierung von Abhängigkeits Eigenschaften finden Sie unter <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="c868b-429">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="c868b-430">Verwenden von RegisterAttached für Wert erbende Abhängigkeits Eigenschaften</span><span class="sxs-lookup"><span data-stu-id="c868b-430">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="c868b-431">Ein bestimmtes Szenario zum Registrieren einer Abhängigkeits Eigenschaft als angefügt anstelle von <xref:System.Windows.DependencyProperty.Register%2A> ist die Unterstützung der Vererbung von Eigenschafts Werten.</span><span class="sxs-lookup"><span data-stu-id="c868b-431">One particular scenario for registering a dependency property as attached instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="c868b-432">Sie sollten Wert erbende Abhängigkeits Eigenschaften auch dann mit <xref:System.Windows.DependencyProperty.RegisterAttached%2A> registrieren, wenn die Klasse Eigenschaften Wrapper Accessoren definiert, die die Abhängigkeits Eigenschaft verfügbar machen, und auch wenn Sie nicht beabsichtigen, Get \*-und Set \* static-Methoden zur Bereitstellung von echten Accessoren für die angefügte Eigenschaften Unterstützung bereitzustellen.</span><span class="sxs-lookup"><span data-stu-id="c868b-432">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get\* and Set\* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="c868b-433">Obwohl die Vererbung von Eigenschafts Werten für nicht angefügte Abhängigkeits Eigenschaften aussehen könnte, ist das Vererbungs Verhalten für eine nicht angefügte Eigenschaft über bestimmte Elementgrenzen in der Laufzeitstruktur nicht definiert.</span><span class="sxs-lookup"><span data-stu-id="c868b-433">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="c868b-434">Wenn die Eigenschaft als angefügt registriert wird, ist die angefügte Eigenschaft eine globale Eigenschaft für das Eigenschaften System und stellt sicher, dass die Vererbung von Eigenschafts Werten über alle Grenzen in einer Elementstruktur hinweg funktioniert.</span><span class="sxs-lookup"><span data-stu-id="c868b-434">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="c868b-435">Verwenden Sie immer <xref:System.Windows.DependencyProperty.RegisterAttached%2A>, um Eigenschaften zu registrieren, bei denen Sie <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in den Metadaten angeben.</span><span class="sxs-lookup"><span data-stu-id="c868b-435">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="c868b-436">Weitere Informationen finden Sie unter [ Vererbung von Eigenschaftswerten](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="c868b-436">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterReadOnly">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c868b-437">Registriert eine Abhängigkeitseigenschaft als schreibgeschützte Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-437">Registers a dependency property as a read-only dependency property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterReadOnly (name As String, propertyType As Type, ownerType As Type, typeMetadata As PropertyMetadata) As DependencyPropertyKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="static member RegisterReadOnly : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterReadOnly (name, propertyType, ownerType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="c868b-438">Der Name der zu registrierenden Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-438">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="c868b-439">Der Typ der Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-439">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="c868b-440">Der Besitzertyp, von dem die Abhängigkeitseigenschaft registriert wird.</span><span class="sxs-lookup"><span data-stu-id="c868b-440">The owner type that is registering the dependency property.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="c868b-441">Eigenschaftenmetadaten für die Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-441">Property metadata for the dependency property.</span></span></param>
        <summary><span data-ttu-id="c868b-442">Registriert eine schreibgeschützte Abhängigkeitseigenschaft mit dem angegebenen Eigenschaftstyp und Besitzertyp sowie den angegebenen Eigenschaftsmetadaten.</span><span class="sxs-lookup"><span data-stu-id="c868b-442">Registers a read-only dependency property, with the specified property type, owner type, and property metadata.</span></span></summary>
        <returns><span data-ttu-id="c868b-443">Ein Abhängigkeitseigenschaftsschlüssel, der dazu verwendet werden soll, den Wert eines statischen schreibgeschützten Felds in Ihrer Klasse festzulegen, die dann dazu verwendet wird, auf die Abhängigkeitseigenschaft zu verweisen.</span><span class="sxs-lookup"><span data-stu-id="c868b-443">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c868b-444">Diese Methode gibt den Typ <xref:System.Windows.DependencyPropertyKey>zurück, während <xref:System.Windows.DependencyProperty.RegisterAttached%2A> den Typ <xref:System.Windows.DependencyProperty>zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="c868b-444">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="c868b-445">Normalerweise werden die Schlüssel, die schreibgeschützte Eigenschaften darstellen, nicht öffentlich gemacht, da die Schlüssel verwendet werden können, um den Wert der Abhängigkeits Eigenschaft festzulegen, indem <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="c868b-445">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="c868b-446">Ihr Klassen Design wirkt sich auf Ihre Anforderungen aus. es wird jedoch im Allgemeinen empfohlen, den Zugriff und die Sichtbarkeit aller <xref:System.Windows.DependencyPropertyKey> auf die Teile des Codes zu beschränken, die notwendig sind, um diese Abhängigkeits Eigenschaft als Teil der Klassen-oder Anwendungslogik festzulegen.</span><span class="sxs-lookup"><span data-stu-id="c868b-446">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="c868b-447">Außerdem wird empfohlen, dass Sie einen Bezeichner für die Abhängigkeits Eigenschaft für die schreibgeschützte Abhängigkeits Eigenschaft verfügbar machen, indem Sie den Wert <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> als `public static readonly` Feld in der Klasse verfügbar machen.</span><span class="sxs-lookup"><span data-stu-id="c868b-447">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="c868b-448">Schreibgeschützte Abhängigkeits Eigenschaften sind ein ziemlich typisches Szenario sowohl in der vorhandenen API als auch in Anpassungs Szenarien, da andere [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Features möglicherweise eine Abhängigkeits Eigenschaft erfordern, auch wenn diese Eigenschaft nicht von Aufrufern festgelegt werden soll.</span><span class="sxs-lookup"><span data-stu-id="c868b-448">Read-only dependency properties are a fairly typical scenario both in the existing API and for customization scenarios, because other [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features might require a dependency property even if that property is not intended to be settable by callers.</span></span> <span data-ttu-id="c868b-449">Sie können den Wert einer schreibgeschützten Abhängigkeits Eigenschaft als Grundlage für andere Eigenschafts System Vorgänge verwenden, die eine Abhängigkeits Eigenschaft verwenden, z. b. das Erstellen einer <xref:System.Windows.Trigger> auf der Abhängigkeits Eigenschaft in einem Stil.</span><span class="sxs-lookup"><span data-stu-id="c868b-449">You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a <xref:System.Windows.Trigger> on the dependency property in a style.</span></span>  
  
 <span data-ttu-id="c868b-450">Weitere Informationen zur Registrierung von Abhängigkeits Eigenschaften finden Sie unter <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="c868b-450">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c868b-451">Im folgenden Beispiel wird eine `AquariumSize`-Abhängigkeits Eigenschaft als schreibgeschützt registriert.</span><span class="sxs-lookup"><span data-stu-id="c868b-451">The following example registers an `AquariumSize` dependency property as read-only.</span></span> <span data-ttu-id="c868b-452">Im Beispiel wird `AquariumSizeKey` als interner Schlüssel definiert (sodass andere Klassen in der Assembly Metadaten überschreiben könnten) und den Bezeichner der Abhängigkeits Eigenschaft auf der Grundlage dieses Schlüssels als `AquariumSizeProperty`verfügbar machen.</span><span class="sxs-lookup"><span data-stu-id="c868b-452">The example defines `AquariumSizeKey` as an internal key (so that other classes in the assembly could override metadata) and exposes the dependency property identifier based on that key as `AquariumSizeProperty`.</span></span> <span data-ttu-id="c868b-453">Außerdem wird ein Wrapper für `AquariumSize`erstellt, der nur über einen get-Accessor verfügt.</span><span class="sxs-lookup"><span data-stu-id="c868b-453">Also, a wrapper is created for `AquariumSize`, with only a get accessor.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterReadOnly (name As String, propertyType As Type, ownerType As Type, typeMetadata As PropertyMetadata, validateValueCallback As ValidateValueCallback) As DependencyPropertyKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member RegisterReadOnly : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterReadOnly (name, propertyType, ownerType, typeMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="c868b-454">Der Name der zu registrierenden Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-454">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="c868b-455">Der Typ der Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-455">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="c868b-456">Der Besitzertyp, von dem die Abhängigkeitseigenschaft registriert wird.</span><span class="sxs-lookup"><span data-stu-id="c868b-456">The owner type that is registering the dependency property.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="c868b-457">Eigenschaftenmetadaten für die Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-457">Property metadata for the dependency property.</span></span></param>
        <param name="validateValueCallback"><span data-ttu-id="c868b-458">Ein Verweis auf einen benutzerdefinierten Rückruf, der eine beliebige benutzerdefinierte Validierung des Werts der Abhängigkeitseigenschaft über die normale Validierung hinaus durchführen soll.</span><span class="sxs-lookup"><span data-stu-id="c868b-458">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</span></span></param>
        <summary><span data-ttu-id="c868b-459">Registriert eine schreibgeschützte Abhängigkeitseigenschaft mit dem angegebenen Eigenschaftstyp, Besitzertyp, den angegebenen Eigenschaftsmetadaten und einem Validierungsrückruf.</span><span class="sxs-lookup"><span data-stu-id="c868b-459">Registers a read-only dependency property, with the specified property type, owner type, property metadata, and a validation callback.</span></span></summary>
        <returns><span data-ttu-id="c868b-460">Ein Schlüssel für eine Abhängigkeitseigenschaft, der zum Festlegen des Werts für ein statisches schreibgeschütztes Feld in der Klasse verwendet werden sollte. Mit diesem wird dann später auf die Abhängigkeitseigenschaft verwiesen.</span><span class="sxs-lookup"><span data-stu-id="c868b-460">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c868b-461">Diese Methode gibt den Typ <xref:System.Windows.DependencyPropertyKey>zurück, während <xref:System.Windows.DependencyProperty.RegisterAttached%2A> den Typ <xref:System.Windows.DependencyProperty>zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="c868b-461">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="c868b-462">Normalerweise werden die Schlüssel, die schreibgeschützte Eigenschaften darstellen, nicht öffentlich gemacht, da die Schlüssel verwendet werden können, um den Wert der Abhängigkeits Eigenschaft festzulegen, indem <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="c868b-462">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="c868b-463">Ihr Klassen Design wirkt sich auf Ihre Anforderungen aus. es wird jedoch im Allgemeinen empfohlen, den Zugriff und die Sichtbarkeit aller <xref:System.Windows.DependencyPropertyKey> auf die Teile des Codes zu beschränken, die notwendig sind, um diese Abhängigkeits Eigenschaft als Teil der Klassen-oder Anwendungslogik festzulegen.</span><span class="sxs-lookup"><span data-stu-id="c868b-463">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="c868b-464">Außerdem wird empfohlen, dass Sie einen Bezeichner für die Abhängigkeits Eigenschaft für die schreibgeschützte Abhängigkeits Eigenschaft verfügbar machen, indem Sie den Wert <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> als `public static readonly` Feld in der Klasse verfügbar machen.</span><span class="sxs-lookup"><span data-stu-id="c868b-464">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="c868b-465">Schreibgeschützte Abhängigkeits Eigenschaften sind ein ziemlich typisches Szenario.</span><span class="sxs-lookup"><span data-stu-id="c868b-465">Read-only dependency properties are a fairly typical scenario.</span></span> <span data-ttu-id="c868b-466">Sie können den Wert einer schreibgeschützten Abhängigkeits Eigenschaft als Grundlage für andere Eigenschafts System Vorgänge verwenden, die eine Abhängigkeits Eigenschaft verwenden, z. b. das Erstellen einer <xref:System.Windows.Trigger> auf der Abhängigkeits Eigenschaft in einem Stil.</span><span class="sxs-lookup"><span data-stu-id="c868b-466">You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a <xref:System.Windows.Trigger> on the dependency property in a style.</span></span>  
  
 <span data-ttu-id="c868b-467">Weitere Informationen zur Registrierung von Abhängigkeits Eigenschaften finden Sie unter <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="c868b-467">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
 <span data-ttu-id="c868b-468">Die Validierung für eine schreibgeschützte Abhängigkeits Eigenschaft ist möglicherweise weniger wichtig.</span><span class="sxs-lookup"><span data-stu-id="c868b-468">Validation on a read-only dependency property might be less important.</span></span> <span data-ttu-id="c868b-469">Die nicht öffentliche Zugriffsebene, die Sie für den Schlüssel angeben, reduziert die Wahrscheinlichkeit für eine beliebige ungültige Eingabe.</span><span class="sxs-lookup"><span data-stu-id="c868b-469">The nonpublic access level you specify for the key reduces the likelihood for arbitrary invalid input.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dependencyProperty.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c868b-470">Gibt die Zeichenfolgendarstellung der Abhängigkeitseigenschaft zurück.</span><span class="sxs-lookup"><span data-stu-id="c868b-470">Returns the string representation of the dependency property.</span></span></summary>
        <returns><span data-ttu-id="c868b-471">Die Zeichenfolgendarstellung der Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-471">The string representation of the dependency property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c868b-472">Diese Implementierung gibt den <xref:System.Windows.DependencyProperty.Name%2A>-Eigenschafts Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="c868b-472">This implementation returns the <xref:System.Windows.DependencyProperty.Name%2A> property value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.DependencyProperty.Name" />
      </Docs>
    </Member>
    <Member MemberName="UnsetValue">
      <MemberSignature Language="C#" Value="public static readonly object UnsetValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object UnsetValue" />
      <MemberSignature Language="DocId" Value="F:System.Windows.DependencyProperty.UnsetValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnsetValue As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ UnsetValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnsetValue : obj" Usage="System.Windows.DependencyProperty.UnsetValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c868b-473">Gibt einen statischen Wert an, der vom [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]-Eigenschaftensystem verwendet wird, und nicht <see langword="null" />, um anzugeben, dass die Eigenschaft vorhanden ist, der Wert jedoch nicht vom Eigenschaftensystem festgelegt wird.</span><span class="sxs-lookup"><span data-stu-id="c868b-473">Specifies a static value that is used by the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system rather than <see langword="null" /> to indicate that the property exists, but does not have its value set by the property system.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c868b-474"><xref:System.Windows.DependencyProperty.UnsetValue> ist ein Sentinelwert, der für Szenarios verwendet wird, in denen das [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]-Eigenschaften System einen angeforderten <xref:System.Windows.DependencyProperty> Wert nicht ermitteln kann.</span><span class="sxs-lookup"><span data-stu-id="c868b-474"><xref:System.Windows.DependencyProperty.UnsetValue> is a sentinel value that is used for scenarios where the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system is unable to determine a requested <xref:System.Windows.DependencyProperty> value.</span></span> <span data-ttu-id="c868b-475"><xref:System.Windows.DependencyProperty.UnsetValue> wird anstelle von `null`verwendet, da `null` ein gültiger Eigenschafts Wert und ein gültiger (und häufig verwendeter) <xref:System.Windows.PropertyMetadata.DefaultValue%2A>sein können.</span><span class="sxs-lookup"><span data-stu-id="c868b-475"><xref:System.Windows.DependencyProperty.UnsetValue> is used rather than `null`, because `null` could be a valid property value, as well as a valid (and frequently used) <xref:System.Windows.PropertyMetadata.DefaultValue%2A>.</span></span>  
  
 <span data-ttu-id="c868b-476"><xref:System.Windows.DependencyProperty.UnsetValue> wird nie <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType>zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="c868b-476"><xref:System.Windows.DependencyProperty.UnsetValue> is never returned out of <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="c868b-477">Wenn Sie <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType> für eine Abhängigkeits Eigenschaft in einer <xref:System.Windows.DependencyObject> Instanz von abrufen, gilt eine der folgenden Aktionen:</span><span class="sxs-lookup"><span data-stu-id="c868b-477">When you call <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType> on a dependency property on a <xref:System.Windows.DependencyObject> instance, one of the following applies:</span></span>  
  
-   <span data-ttu-id="c868b-478">Für eine Abhängigkeits Eigenschaft wird ein Standardwert in den Metadaten festgelegt, und dieser Wert wird zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="c868b-478">A dependency property has a default value established in metadata and that value is returned.</span></span> <span data-ttu-id="c868b-479">Dieser Wert kann aus <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>stammen.</span><span class="sxs-lookup"><span data-stu-id="c868b-479">This value might come from <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
-   <span data-ttu-id="c868b-480">Ein anderer Wert wurde durch das Eigenschaften System festgelegt, und der Standardwert ist nicht mehr relevant.</span><span class="sxs-lookup"><span data-stu-id="c868b-480">Some other value was established by the property system, and the default value is no longer relevant.</span></span> <span data-ttu-id="c868b-481">Weitere Informationen finden Sie unter [Priorität von Abhängigkeitseigenschaftswerten](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="c868b-481">For details, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="c868b-482">Das Festlegen einer <xref:System.Windows.PropertyMetadata.DefaultValue%2A> von <xref:System.Windows.DependencyProperty.UnsetValue> ist ausdrücklich nicht zulässig.</span><span class="sxs-lookup"><span data-stu-id="c868b-482">Setting a <xref:System.Windows.PropertyMetadata.DefaultValue%2A> of <xref:System.Windows.DependencyProperty.UnsetValue> is specifically disallowed.</span></span>  
  
 <span data-ttu-id="c868b-483"><xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=nameWithType> gibt <xref:System.Windows.DependencyProperty.UnsetValue> zurück, wenn die angeforderte Eigenschaft nicht lokal festgelegt wurde.</span><span class="sxs-lookup"><span data-stu-id="c868b-483"><xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=nameWithType> returns <xref:System.Windows.DependencyProperty.UnsetValue> when the requested property has not been locally set.</span></span>  
  
 <span data-ttu-id="c868b-484"><xref:System.Windows.DependencyProperty.UnsetValue> hat eine besondere Bedeutung, wenn er als Rückgabewert eines <xref:System.Windows.CoerceValueCallback>verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="c868b-484"><xref:System.Windows.DependencyProperty.UnsetValue> has a special meaning when used as the return value of a <xref:System.Windows.CoerceValueCallback>.</span></span> <span data-ttu-id="c868b-485">Weitere Informationen finden Sie unter [Rückrufe und Validierung von Abhängigkeits Eigenschaften](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="c868b-485">For details, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
 <span data-ttu-id="c868b-486">Wenn Sie eine Bindung an eine Datenbank durchlaufen, beachten Sie, dass <xref:System.Windows.DependencyProperty.UnsetValue> nicht mit <xref:System.DBNull.Value>identisch ist, ähnlich wie <xref:System.DBNull.Value> nicht mit dem Wert true Null übereinstimmt.</span><span class="sxs-lookup"><span data-stu-id="c868b-486">If you are binding to a database, note that <xref:System.Windows.DependencyProperty.UnsetValue> is not equivalent to <xref:System.DBNull.Value>, in a similar way to how <xref:System.DBNull.Value> is not equivalent to a true null.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateValueCallback">
      <MemberSignature Language="C#" Value="public System.Windows.ValidateValueCallback ValidateValueCallback { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ValidateValueCallback ValidateValueCallback" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.ValidateValueCallback" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValidateValueCallback As ValidateValueCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ValidateValueCallback ^ ValidateValueCallback { System::Windows::ValidateValueCallback ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValidateValueCallback : System.Windows.ValidateValueCallback" Usage="System.Windows.DependencyProperty.ValidateValueCallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.ValidateValueCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c868b-487">Ruft den Wertvalidierungsrückruf für die Abhängigkeitseigenschaft ab.</span><span class="sxs-lookup"><span data-stu-id="c868b-487">Gets the value validation callback for the dependency property.</span></span></summary>
        <value><span data-ttu-id="c868b-488">Der Wertvalidierungsrückruf für diese Abhängigkeitseigenschaft, wie für den <paramref name="validateValueCallback" />-Parameter in der ursprünglichen Registrierung der Abhängigkeitseigenschaft angegeben.</span><span class="sxs-lookup"><span data-stu-id="c868b-488">The value validation callback for this dependency property, as provided for the <paramref name="validateValueCallback" /> parameter in the original dependency property registration.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c868b-489">Diese Eigenschaft enthält `null` für jede Abhängigkeits Eigenschaft ohne registrierten Validierungs Rückruf.</span><span class="sxs-lookup"><span data-stu-id="c868b-489">This property will contain `null` for any dependency property with no registered validation callback.</span></span>  
  
 <span data-ttu-id="c868b-490">Validierungswertrückrufe müssen einen statischen Sinn haben: die über die <xref:System.Windows.ValidateValueCallback> angewendete Validierung kann nicht bestimmen, ob der angegebene Wert für eine bestimmte Instanz gültig ist.</span><span class="sxs-lookup"><span data-stu-id="c868b-490">Validate value callbacks must act in a static sense: validation applied through the <xref:System.Windows.ValidateValueCallback> cannot determine whether the provided value is valid for any particular instance.</span></span> <span data-ttu-id="c868b-491">Der Rückruf kann nur bestimmen, ob alle Objekte, die die Abhängigkeits Eigenschaft besitzen, den bereitgestellten Wert als gültig akzeptieren sollen oder nicht.</span><span class="sxs-lookup"><span data-stu-id="c868b-491">The callback can only determine whether all objects that possess the dependency property should or should not accept the provided value as valid.</span></span> <span data-ttu-id="c868b-492">Wenn Sie eine Validierung durchführen müssen, die die Werte anderer Abhängigkeits Eigenschaften für eine bestimmte Instanz kennt, verwenden Sie stattdessen eine-<xref:System.Windows.CoerceValueCallback>.</span><span class="sxs-lookup"><span data-stu-id="c868b-492">If you need to perform validation that relies on knowing the values of other dependency properties on a particular instance, use a <xref:System.Windows.CoerceValueCallback> instead.</span></span> <span data-ttu-id="c868b-493">Der <xref:System.Windows.CoerceValueCallback> wird als Teil der Metadaten für Abhängigkeits Eigenschaften registriert, nicht direkt innerhalb des Bezeichners der Abhängigkeits Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c868b-493">The <xref:System.Windows.CoerceValueCallback> is registered as part of dependency property metadata, rather than directly within the dependency property identifier.</span></span> <span data-ttu-id="c868b-494">Weitere Informationen finden Sie unter [Rückrufe und Validierung von Abhängigkeits Eigenschaften](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="c868b-494">For details, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.ValidateValueCallback" />
      </Docs>
    </Member>
  </Members>
</Type>

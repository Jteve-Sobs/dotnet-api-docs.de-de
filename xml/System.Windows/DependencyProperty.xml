<Type Name="DependencyProperty" FullName="System.Windows.DependencyProperty">
  <Metadata><Meta Name="ms.openlocfilehash" Value="21210545d8206e6e4e474c2b2e8040e528891f8a" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70465496" /></Metadata><TypeSignature Language="C#" Value="public sealed class DependencyProperty" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyProperty extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyProperty" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyProperty" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyProperty sealed" />
  <TypeSignature Language="F#" Value="type DependencyProperty = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Markup.DependencyPropertyConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.DependencyPropertyValueSerializer))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Markup.DependencyPropertyConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt eine Eigenschaft dar, die durch Methoden festgelegt werden kann, z. B. Formatierung, Datenbindung, Animation und Vererbung.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Windows.DependencyProperty> unterstützt die folgenden Funktionen [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]in:  
  
-   Die-Eigenschaft kann in einem Stil festgelegt werden. Weitere Informationen finden Sie unter [Erstellen von Formaten und Vorlagen](~/docs/framework/wpf/controls/styling-and-templating.md).  
  
-   Die-Eigenschaft kann durch Datenbindung festgelegt werden. Weitere Informationen zu den Abhängigkeits Eigenschaften von Daten Bindungen finden Sie unter Gewusst [wie: Binden der Eigenschaften von zwei Steuerelementen](~/docs/framework/wpf/data/how-to-bind-the-properties-of-two-controls.md).  
  
-   Die-Eigenschaft kann mit einem dynamischen Ressourcen Verweis festgelegt werden. Weitere Informationen finden Sie unter [XAML-Ressourcen](~/docs/framework/wpf/advanced/xaml-resources.md).  
  
-   Die-Eigenschaft kann ihren Wert automatisch von einem übergeordneten Element in der-Elementstruktur erben. Weitere Informationen finden Sie unter [Vererbung von Eigenschaftswerten](~/docs/framework/wpf/advanced/property-value-inheritance.md).  
  
-   Die-Eigenschaft kann animiert werden. Weitere Informationen finden Sie unter [Übersicht über Animation](~/docs/framework/wpf/graphics-multimedia/animation-overview.md).  
  
-   Die-Eigenschaft kann melden, wenn der vorherige Wert der-Eigenschaft geändert wurde und der-Eigenschafts Wert erzwungen werden kann. Weitere Informationen finden Sie unter [Rückrufe und Validierung von Abhängigkeitseigenschaften](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).  
  
-   Die-Eigenschaft meldet Informationen [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]an, z. b. ob beim Ändern eines Eigenschafts Werts das Layoutsystem eine Neukomposition der visuellen Elemente für ein Element erfordern muss.  
  
-   Die-Eigenschaft erhält Unterstützung [!INCLUDE[wpfdesigner_current_long](~/includes/wpfdesigner-current-long-md.md)]in.  Beispielsweise kann die-Eigenschaft im **Eigenschaften** Fenster bearbeitet werden.  
  
 Weitere Informationen zu Abhängigkeits Eigenschaften finden Sie unter [Übersicht über Abhängigkeits Eigenschaften](~/docs/framework/wpf/advanced/dependency-properties-overview.md). Wenn Sie möchten, dass Eigenschaften von benutzerdefinierten Typen die Funktionen in der vorangehenden Liste unterstützen, sollten Sie eine Abhängigkeits Eigenschaft erstellen.  Informationen zum Erstellen von benutzerdefinierten Abhängigkeits Eigenschaften finden Sie unter [benutzerdefinierte Abhängigkeits Eigenschaften](~/docs/framework/wpf/advanced/custom-dependency-properties.md).  
  
 Eine angefügte Eigenschaft ist eine Eigenschaft, mit der jedes Objektinformationen an den Typ melden kann, der die angefügte Eigenschaft definiert. In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]kann jeder Typ, der von <xref:System.Windows.DependencyObject> erbt, eine angefügte-Eigenschaft verwenden, unabhängig davon, ob der Typ von dem Typ erbt, der die Eigenschaft definiert. Eine angefügte Eigenschaft ist eine Funktion der [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Sprache.  Verwenden Sie zum Festlegen einer angefügten Eigenschaft in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]den *besitztyp*. *PropertyName* -Syntax. Ein Beispiel für eine angefügte Eigenschaft ist <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> die-Eigenschaft. Wenn Sie eine Eigenschaft erstellen möchten, die für alle <xref:System.Windows.DependencyObject> Typen verwendet werden kann, sollten Sie eine angefügte Eigenschaft erstellen. Weitere Informationen zu angefügten Eigenschaften, einschließlich ihrer Erstellung, finden Sie unter [Übersicht über angefügte Eigenschaften](~/docs/framework/wpf/advanced/attached-properties-overview.md).  
  
<a name="xamlAttributeUsage_DependencyProperty"></a>   
## <a name="xaml-attribute-usage"></a>Verwendung von XAML-Attributen  
  
```xaml 
<object property="dependencyPropertyName"/>  
```

- oder -

```xaml
<object property="ownerType.dependencyPropertyName"/>  
```

- oder -

```xaml
<object property="attachedPropertyOwnerType.attachedPropertyName"/>  
```  
  
<a name="xamlValues_DependencyProperty"></a>   
## <a name="xaml-values"></a>XAML-Werte  
 `dependencyPropertyName`  
 Eine Zeichenfolge, die <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType> den der gewünschten Abhängigkeits Eigenschaft angibt. Diesem kann ein XML-Namespace Präfix vorangestellt werden, wenn sich die Eigenschaft nicht im XML-Standard Namespace befindet (Weitere Informationen finden Sie unter [XAML-Namespaces und Namespace Zuordnung für WPF-XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)).  
  
 `ownerType`.`dependencyPropertyName`  
 Eine Zeichenfolge, die den Besitzertyp einer Abhängigkeits Eigenschaft, einen Punkt (.) und <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType>dann den angibt. `ownerType`Außerdem kann ein XML-Namespace Präfix vorangestellt werden. Diese Verwendung gilt insbesondere für spät gebundene Stile und Vorlagen, bei denen der Besitzer der Abhängigkeits Eigenschaft für den Kontext der Verwendung angegeben werden muss, `TargetType` da der noch nicht bekannt ist. Weitere Informationen finden Sie unter [Erstellen von Formaten und Vorlagen](~/docs/framework/wpf/controls/styling-and-templating.md).  
  
 `attachedPropertyOwnerType` *zurück.* `attachedPropertyName`  
 Eine Zeichenfolge, die den Besitzer einer angefügten Eigenschaft, einen Punkt (.) und dann den Namen der angefügten Eigenschaft angibt. `attachedPropertyOwnerType`Außerdem kann ein XML-Namespace Präfix vorangestellt werden.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyObject" />
    <altmember cref="T:System.Windows.DependencyPropertyHelper" />
  </Docs>
  <Members>
    <MemberGroup MemberName="AddOwner">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Fügt einen weiteren Typ als Besitzer einer Abhängigkeitseigenschaft hinzu, die bereits für einen Typ registriert wurde.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddOwner">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty AddOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyProperty AddOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.AddOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddOwner (ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::DependencyProperty ^ AddOwner(Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="member this.AddOwner : Type -&gt; System.Windows.DependencyProperty" Usage="dependencyProperty.AddOwner ownerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType">Der Typ, der als ein Besitzer dieser Abhängigkeitseigenschaft hinzugefügt werden soll.</param>
        <summary>Fügt einen weiteren Typ als Besitzer einer Abhängigkeitseigenschaft hinzu, die bereits registriert wurde.</summary>
        <returns>Ein Verweis auf den ursprünglichen <see cref="T:System.Windows.DependencyProperty" />-Bezeichner, der die Abhängigkeitseigenschaft angibt. Dieser Bezeichner sollte von der hinzufügenden Klasse als <see langword="public static readonly" />-Feld verfügbar gemacht werden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ermöglicht es dem Eigenschaften System, eine Abhängigkeits Eigenschaft für einen Typ zu erkennen, der diese bestimmte Abhängigkeits Eigenschaft nicht anfänglich registriert hat.  
  
 In der Regel wird verwendet, um Abhängigkeits Eigenschaften zu Klassen hinzuzufügen, die diese Abhängigkeits Eigenschaft nicht bereits über die verwaltete Klassen Vererbung verfügbar machen (die Klassen Vererbung würde bewirken, dass die Wrapper Eigenschaften von der abgeleiteten Klasse geerbt werden und somit <xref:System.Windows.DependencyProperty.AddOwner%2A> bietet allgemeine Mitglieder-Tabellen Zugriff auf die Abhängigkeits Eigenschaft bereits). <xref:System.Windows.DependencyProperty.AddOwner%2A>ermöglicht dem Eigenschaften System, eine Abhängigkeits Eigenschaft für einen Typ zu erkennen, der diese Abhängigkeits Eigenschaft nicht anfänglich registriert hat.  
  
 Diese Signatur lässt keine Angabe von Metadaten zu.  Wenn Sie diese Methode verwenden, werden die Metadaten automatisch für den neuen <xref:System.Windows.DependencyProperty> und dessen Besitzertyp generiert. Die automatisch generierten Metadaten sind das Ergebnis der zusammengeführten Metadaten aller Basis Typen, für die diese Eigenschaft definiert ist. Wenn keine zusammengeführten Metadaten verfügbar sind, werden die Standard Metadaten für die Eigenschaft verwendet. Wenn die Eigenschaft mithilfe der <xref:System.Windows.DependencyProperty.RegisterAttached%2A> -Methode registriert wird, sind die Standard Metadaten identisch mit den Metadaten, die beim <xref:System.Windows.DependencyProperty.RegisterAttached%2A> Aufruf von erstellt wurden. Andernfalls wird das <xref:System.Windows.PropertyMetadata> -Objekt erstellt, wobei <xref:System.Windows.PropertyMetadata.DefaultValue%2A> die-Eigenschaft auf den Standardwert des Eigenschafts Typs und <xref:System.Windows.PropertyMetadata> alle anderen Eigenschaften von auf `null`festgelegt ist. Verwenden Sie <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29> die Signatur, wenn Sie Metadaten für die Version der Abhängigkeits Eigenschaft bereitstellen möchten, die dem bereitgestellten Typ hinzugefügt wurde.  
  
 Der Rückgabewert dieser Methode wird normalerweise verwendet, um die Abhängigkeits Eigenschaft zu deklarieren und verfügbar zu machen, indem Sie einen Bezeichner der Abhängigkeits Eigenschaft Der Bezeichner ermöglicht den Zugriff auf die Abhängigkeits Eigenschaft, wenn Sie das [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] Eigenschaften System für die Abhängigkeits Eigenschaft aufrufen möchten, insbesondere, da Sie in der hinzugefügten Besitzer Klasse vorhanden ist. Der gleiche Eigenschaftsname für den ursprünglichen Besitzer und den hinzugefügten Besitzer sollte verwendet werden, um die ähnliche Funktionalität anzugeben. Sie sollten den Rückgabe <xref:System.Windows.DependencyProperty> Wert <xref:System.Windows.DependencyProperty.AddOwner%2A> der-Methode verwenden, um den Bezeichner der Abhängigkeits Eigenschaft zu definieren [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] . Außerdem müssen Sie die Eigenschaftenwrapper für Abhängigkeits Eigenschaften <xref:System.Windows.DependencyProperty.AddOwner%2A>deklarieren, die Typen mithilfe von hinzugefügt werden.  
  
 Die <xref:System.Windows.DependencyProperty.AddOwner%2A> oben genannte Methodik wird verwendet, wenn die Abhängigkeits Eigenschaften erstellt werden, [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]die in deklariert werden. Beispielsweise definieren sowohl <xref:System.Windows.Controls.Border> als <xref:System.Windows.Controls.Control> auch eine `BorderBrush` Abhängigkeits Eigenschaft, die über ähnliche Funktionen verfügen. <xref:System.Windows.Controls.Control>definiert seine `BorderBrush` -Eigenschaft für das Eigenschaften System durch <xref:System.Windows.DependencyProperty.AddOwner%2A> Aufrufen von basierend auf dem <xref:System.Windows.Controls.Border> ursprünglichen Besitzer und <xref:System.Windows.Controls.Border.BorderBrushProperty> dessen registriertem Bezeichner der Abhängigkeits Eigenschaft. Der <xref:System.Windows.DependencyProperty.AddOwner%2A> Rückgabewert wird dann verwendet, um ein neues statisches <xref:System.Windows.DependencyProperty> Feld<xref:System.Windows.Controls.Control.BorderBrushProperty>() für diese Eigenschaft für den hinzugefügten Besitzer `BorderBrush` einzurichten. Außerdem wird ein Eigenschafts Wrapper deklariert.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOwner">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty AddOwner (Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyProperty AddOwner(class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.AddOwner(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddOwner (ownerType As Type, typeMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::DependencyProperty ^ AddOwner(Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.AddOwner : Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyProperty" Usage="dependencyProperty.AddOwner (ownerType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="ownerType">Der Typ, der als Besitzer dieser Abhängigkeitseigenschaft hinzugefügt werden soll.</param>
        <param name="typeMetadata">Die Metadaten, die die Abhängigkeitseigenschaft beschreiben, wie sie für den bereitgestellten Typ vorhanden sind.</param>
        <summary>Fügt einen anderen Typ als Besitzer einer Abhängigkeitseigenschaft hinzu, die bereits registriert wurde. Dabei werden Abhängigkeitseigenschaft-Metadaten für die Abhängigkeitseigenschaft bereitgestellt, wie sie für den bereitgestellten Besitzertyp vorhanden sind.</summary>
        <returns>Ein Verweis auf den ursprünglichen <see cref="T:System.Windows.DependencyProperty" />-Bezeichner, der die Abhängigkeitseigenschaft angibt. Dieser Bezeichner sollte von der hinzufügenden Klasse als <see langword="public static readonly" />-Feld verfügbar gemacht werden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ermöglicht es dem Eigenschaften System, eine Abhängigkeits Eigenschaft für einen Typ zu erkennen, der diese bestimmte Abhängigkeits Eigenschaft nicht anfänglich registriert hat.  
  
 Der Rückgabewert dieser Methode wird verwendet, um die Abhängigkeits Eigenschaft zu deklarieren und verfügbar zu machen, insbesondere, da Sie in der hinzugefügten Besitzer Klasse vorhanden ist. Im Allgemeinen sollte derselbe Eigenschaftsname sowohl für den ursprünglichen Besitzer als auch für den hinzugefügten Besitzer verwendet werden, um die ähnliche Funktionalität anzugeben. Es wird empfohlen, die Bezeichner sowie die neuen [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] Eigenschaftenwrapper für Abhängigkeits Eigenschaften verfügbar zu machen, die Typen mithilfe <xref:System.Windows.DependencyProperty.AddOwner%2A>von hinzugefügt werden.  
  
 Die <xref:System.Windows.DependencyProperty.AddOwner%2A> oben genannte Methodik wird beim Erstellen [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] von deklariert in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]verwendet. Beispielsweise definieren sowohl <xref:System.Windows.Controls.Border> als <xref:System.Windows.Controls.Control> auch eine `BorderBrush` Abhängigkeits Eigenschaft, die über ähnliche Funktionen verfügen. <xref:System.Windows.Controls.Control>definiert die- <xref:System.Windows.DependencyProperty.AddOwner%2A> <xref:System.Windows.Controls.Border> <xref:System.Windows.Controls.Border.BorderBrushProperty> Eigenschaft für das Eigenschaften System durch Aufrufen von für den ursprünglichen Besitzer und den zugehörigen Bezeichner der Abhängigkeits Eigenschaft. `BorderBrush` Der <xref:System.Windows.DependencyProperty.AddOwner%2A> Rückgabewert wird dann verwendet, um ein statisches <xref:System.Windows.DependencyProperty> Feld<xref:System.Windows.Controls.Control.BorderBrushProperty>() für diese Eigenschaft für den hinzugefügten Besitzer `BorderBrush` einzurichten, und ein Eigenschafts Wrapper wird ebenfalls deklariert.  
  
 Der Bezeichner der Abhängigkeits Eigenschaft des hinzugefügten Besitzers sollte für <xref:System.Windows.DependencyObject.GetValue%2A>Vorgänge wie verwendet werden. Typspezifische Vorgänge, die entweder Typen oder Instanzen der Klasse betreffen, die als Besitzer mit unterschiedlichen Metadaten hinzugefügt wurden, geben jedoch weiterhin die erwarteten Ergebnisse zurück, auch wenn der ursprüngliche Bezeichner der Abhängigkeits Eigenschaft (nicht der hinzugefügte Besitzer) in angegeben wird. Aufrufe von-Methoden, <xref:System.Windows.DependencyObject.GetValue%2A> z <xref:System.Windows.DependencyProperty.GetMetadata%2A>. b. oder. Die Metadaten für den hinzugefügten Besitzer werden durch den <xref:System.Windows.DependencyProperty.AddOwner%2A> eigentlichen Rückruf fortgeführt. es wird nicht notwendigerweise ausschließlich durch das hinzugefügte Feld Bezeichner der Besitzer Klasse verwiesen. Trotzdem empfiehlt es sich, den Bezeichner sowie neue [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] Eigenschaftenwrapper für Abhängigkeits Eigenschaften verfügbar zu machen, die Typen mithilfe <xref:System.Windows.DependencyProperty.AddOwner%2A>von hinzugefügt werden, da dadurch keine Unterschiede zwischen dem und  [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] dem  [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Darstellungen ihrer Eigenschaften.  
  
 Die angegebenen Metadaten werden mit den Eigenschafts Metadaten für die Abhängigkeits Eigenschaft zusammengeführt, so wie Sie auf dem Basis Besitzer vorhanden sind. Alle Eigenschaften, die in den ursprünglichen Basis Metadaten angegeben wurden, bleiben erhalten. Nur die Merkmale, die speziell in den neuen Metadaten geändert wurden, überschreiben die Eigenschaften der Basis Metadaten. Einige Merkmale, wie z <xref:System.Windows.PropertyMetadata.DefaultValue%2A>. b., werden ersetzt, wenn Sie in den neuen Metadaten angegeben werden. Andere, wie z <xref:System.Windows.PropertyChangedCallback>. b., werden kombiniert. Letztendlich hängt das Zusammensetzungs Verhalten vom Eigenschaftentyp ab, der für die Überschreibung verwendet wird, sodass das hier beschriebene Verhalten für die vorhandenen eigenschaftenmetadatenklassen ist, die von [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Abhängigkeits Eigenschaften verwendet werden. Weitere Informationen finden Sie unter [Metadaten für Abhängigkeits Eigenschaften](~/docs/framework/wpf/advanced/dependency-property-metadata.md) und [Framework-Eigenschaften Metadaten](~/docs/framework/wpf/advanced/framework-property-metadata.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata DefaultMetadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.PropertyMetadata DefaultMetadata" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.DefaultMetadata" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultMetadata As PropertyMetadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::PropertyMetadata ^ DefaultMetadata { System::Windows::PropertyMetadata ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultMetadata : System.Windows.PropertyMetadata" Usage="System.Windows.DependencyProperty.DefaultMetadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Standardmetadaten der Abhängigkeitseigenschaft ab.</summary>
        <value>Die Standardmetadaten der Abhängigkeitseigenschaft.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Standard Metadaten sind die Eigenschafts Metadaten, die für das betreffende Objekt verfügbar sind, oder ein Objekt eines abgeleiteten Typs, bei dem keine alternativen Metadaten <xref:System.Windows.DependencyProperty.Register%2A> durch <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> einen expliziten-oder-Befehl bereitgestellt wurden.  
  
 Wenn der ursprüngliche Besitzer Metadaten auf den ersten <xref:System.Windows.DependencyProperty.Register%2A> -Befehl angewendet hat, der die Abhängigkeits Eigenschaft hergestellt hat, werden diese Metadaten als <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>zurückgegeben.  
  
 Wenn im ursprünglichen <xref:System.Windows.DependencyProperty.Register%2A> -Befehl keine Metadaten angewendet wurden, werden Standard Metadaten aus dem <xref:System.Windows.DependencyProperty.Register%2A> -Befehl generiert, und dieser <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>Wert wird als zurückgegeben.  
  
 Der Hauptzweck der Verwendung von Standard Metadaten, die <xref:System.Windows.DependencyProperty> einem zugeordnet sind, besteht darin, einen Standardwert für <xref:System.Windows.DependencyObject> diese Eigenschaft für einen beliebigen oder einen abgeleiteten Typ bereitzustellen.  
  
 Bei nicht angefügten Eigenschaften kann der von dieser Eigenschaft zurückgegebene Metadatentyp nicht in abgeleitete <xref:System.Windows.PropertyMetadata> Typen vom Typ umgewandelt werden, auch wenn die Eigenschaft ursprünglich mit einem abgeleiteten Metadatentyp registriert wurde. Wenn Sie die ursprünglich registrierten Metadaten einschließlich ihres ursprünglichen, möglicherweise abgeleiteten metadatentyps verwenden möchten, müssen Sie stattdessen aufrufen <xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29> und den ursprünglichen Registrierungs Typ als Parameter übergeben.  
  
 Für angefügte Eigenschaften entspricht der Typ der Metadaten, die von dieser Eigenschaft zurückgegeben werden, dem Typ, <xref:System.Windows.DependencyProperty.RegisterAttached%2A> der in der ursprünglichen Registrierungsmethode angegeben ist.  
  
   
  
## Examples  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#DPDefaultValue](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpdefaultvalue)]
[!code-vb[PropertySystemEsoterics#DPDefaultValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpdefaultvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dependencyProperty.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt einen Hashcode für diesen <see cref="T:System.Windows.DependencyProperty" /> zurück.</summary>
        <returns>Der Hashcode für diese <see cref="T:System.Windows.DependencyProperty" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das-Eigenschaften System verwendet einen eigenen eindeutigen <xref:System.Windows.DependencyProperty.GlobalIndex%2A>Bezeichner, und der Wert dieser Eigenschaft wird von <xref:System.Windows.DependencyProperty.GetHashCode%2A>zurückgegeben.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMetadata">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt die dieser Abhängigkeitseigenschaft zugeordneten Metadaten zurück, wie sie für einen bestimmten Typ vorhanden sind. Dies kann der Typ sein, für den die Abhängigkeitseigenschaft zuerst registriert wurde, ein Typ, dem sie später hinzugefügt wurde, oder einen Typ, für den die Abhängigkeitseigenschaft über Vererbung abgerufen wurde, wobei die Metadaten jedoch ausdrücklich überschrieben wurden.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (Type forType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Type forType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadata (forType As Type) As PropertyMetadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(Type ^ forType);" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : Type -&gt; System.Windows.PropertyMetadata" Usage="dependencyProperty.GetMetadata forType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="forType">Der spezifische Typ, von dem die Metadaten für die Abhängigkeitseigenschaft abgerufen werden sollen.</param>
        <summary>Gibt die Metadaten für diese Abhängigkeitseigenschaft zurück, wie sie für einen angegebenen vorhanden Typ vorhanden sind.</summary>
        <returns>Ein Objekt für Eigenschaftenmetadaten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Angabe des Typs oder eines Objekt Verweises, der als Typ verwendet werden soll, ist erforderlich, da die Metadaten von der ursprünglichen <xref:System.Windows.DependencyProperty.AddOwner%2A> Registrierung <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> abhängig sein können, indem oder aufgerufen wird, die die Metadaten der Abhängigkeits Eigenschaft ändern, wie Sie für einen Typ vorhanden sind.  
  
   
  
## Examples  
 Im folgenden Beispiel werden Metadaten für eine Abhängigkeits Eigenschaft basierend auf dem Typ abgerufen. Der-Typ wird mithilfe eines `typeof` -Operators abgerufen.  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataType](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatatype)]
 [!code-vb[PropertySystemEsoterics#GetMetadataType](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatatype)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObject dependencyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Windows.DependencyObject dependencyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(System::Windows::DependencyObject ^ dependencyObject);" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : System.Windows.DependencyObject -&gt; System.Windows.PropertyMetadata" Usage="dependencyProperty.GetMetadata dependencyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObject" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="dependencyObject">Ein Abhängigkeitsobjekt, dessen Typ überprüft wird, um zu ermitteln, von welcher typspezifischen Version der Abhängigkeitseigenschaft die Metadaten stammen sollen.</param>
        <summary>Gibt die Metadaten für diese Abhängigkeitseigenschaft zurück, da sie für die angegebene Objektinstanz vorhanden sind.</summary>
        <returns>Ein Objekt für Eigenschaftenmetadaten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Angabe des Typs oder eines Objekt Verweises ist erforderlich, da die Metadaten einer angegebenen Abhängigkeits Eigenschaft von der ursprünglichen Registrierung abhängig sein können <xref:System.Windows.DependencyProperty.AddOwner%2A> . <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> Dies erfolgt entweder durch-oder-Aufrufe, die die Eigenschafts Metadaten verfeinern können, wie Sie auf einem Sorte.  
  
 Wenn Sie auf einer-Instanz basierende Eigenschafts Metadaten anfordern, übergeben Sie die-Instanz wirklich, damit ihr Typ intern ausgewertet werden kann. Die Metadaten für Abhängigkeits Eigenschaften variieren je nach Instanz nicht. Sie ist für eine beliebige typeigenschafts Kombination immer konsistent.  
  
   
  
## Examples  
 Im folgenden Beispiel werden Metadaten für eine Abhängigkeits Eigenschaft basierend auf einer <xref:System.Windows.DependencyObject> bestimmten-Instanz abgerufen.  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataDOInstance](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatadoinstance)]
 [!code-vb[PropertySystemEsoterics#GetMetadataDOInstance](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatadoinstance)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObjectType dependencyObjectType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Windows.DependencyObjectType dependencyObjectType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObjectType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(System::Windows::DependencyObjectType ^ dependencyObjectType);" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : System.Windows.DependencyObjectType -&gt; System.Windows.PropertyMetadata" Usage="dependencyProperty.GetMetadata dependencyObjectType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObjectType" Type="System.Windows.DependencyObjectType" />
      </Parameters>
      <Docs>
        <param name="dependencyObjectType">Ein bestimmtes Objekt, das den Abhängigkeitsobjekttyp aufzeichnet, von dem die Metadaten für die Abhängigkeitseigenschaft stammen sollen.</param>
        <summary>Gibt die Metadaten für diese Abhängigkeitseigenschaft zurück, wie sie für einen angegebenen Typ vorhanden sind.</summary>
        <returns>Ein Objekt für Eigenschaftenmetadaten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Angabe des Typs oder eines Objekt Verweises ist erforderlich, da die Metadaten einer angegebenen Abhängigkeits Eigenschaft von der ursprünglichen Registrierung abhängig sein können <xref:System.Windows.DependencyProperty.AddOwner%2A> . <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> Dies erfolgt entweder durch-oder-Aufrufe, die die Eigenschafts Metadaten verfeinern können, wie Sie auf einem Sorte.  
  
   
  
## Examples  
 Im folgenden Beispiel werden Metadaten für eine Abhängigkeits Eigenschaft basierend auf <xref:System.Windows.DependencyObjectType>dem-Element abgerufen.  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataDOType](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatadotype)]
 [!code-vb[PropertySystemEsoterics#GetMetadataDOType](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatadotype)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalIndex">
      <MemberSignature Language="C#" Value="public int GlobalIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GlobalIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.GlobalIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int GlobalIndex { int get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalIndex : int" Usage="System.Windows.DependencyProperty.GlobalIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen intern generierten Wert ab, der die Abhängigkeitseigenschaft eindeutig identifiziert.</summary>
        <value>Ein eindeutiger numerischer Bezeichner.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Wert ist eine ganze Zahl, keine Globally Unique Identifier (GUID). Im Allgemeinen ist die Verwendung dieses Indexwerts nicht erforderlich, und es ist kein Indexzugriff auf Tabellen aller Abhängigkeits Eigenschaften vorhanden. Auf Abhängigkeits Eigenschaften sollte stattdessen in ihren Bezeichnerfeldern verwiesen werden.  
  
 <xref:System.Windows.DependencyProperty.GlobalIndex%2A>wird intern für den <xref:System.Windows.DependencyProperty.GlobalIndex%2A> schnelleren Zugriff auf Datenstrukturen verwendet, die als Null basierten Array Index verwenden. Eine ähnliche Verwendung kann Anwendungen für Designer oder Tools enthalten.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidType">
      <MemberSignature Language="C#" Value="public bool IsValidType (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsValidType(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.IsValidType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidType (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsValidType(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.IsValidType : obj -&gt; bool" Usage="dependencyProperty.IsValidType value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Der zu überprüfende Wert.</param>
        <summary>Bestimmt, ob ein angegebener Wert für den Typ dieser Abhängigkeitseigenschaft akzeptiert wird, wie anhand des in der Registrierung der ursprünglichen Abhängigkeitseigenschaft angegebenen Eigenschaftentyps überprüft wurde.</summary>
        <returns><see langword="true" />, wenn der angegebene Wert der registrierte Eigenschaftentyp oder ein zulässiger abgeleiteter Typ ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der `null` Wert ist ein gültiger Typ für Verweistyp-Abhängigkeits Eigenschaften oder für eine <xref:System.Nullable%601> Abhängigkeits Eigenschaft und würde für `true` diese Fälle zurückgeben. In Fällen, in denen die Abhängigkeits Eigenschaft weder ein Verweis <xref:System.Nullable%601> noch ein <xref:System.Windows.DependencyProperty.IsValidType%2A> Typ ist `false` , wird für einen NULL-Wert zurückgegeben, anstatt eine Ausnahme aufzurichten.  
  
   
  
## Examples  
 Im folgenden Beispiel wird <xref:System.Windows.DependencyProperty.IsValidType%2A> als Überprüfung verwendet, <xref:System.Windows.DependencyObject.SetValue%2A> bevor für die-Abhängigkeits Eigenschaft aufgerufen wird.  
  
 [!code-csharp[PropertySystemEsoterics#TrySetValue](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#trysetvalue)]
 [!code-vb[PropertySystemEsoterics#TrySetValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#trysetvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidValue">
      <MemberSignature Language="C#" Value="public bool IsValidValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsValidValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.IsValidValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidValue (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsValidValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.IsValidValue : obj -&gt; bool" Usage="dependencyProperty.IsValidValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Der zu überprüfende Wert.</param>
        <summary>Bestimmt, ob der angegebene Wert für den Eigenschaftentyp durch eine einfache Typüberprüfung zulässig ist und ob er sich potenziell im zulässigen Wertebereich für den Typ befindet.</summary>
        <returns><see langword="true" />, wenn der Wert zulässig ist und den richtigen Typ oder einen abgeleiteten Typ aufweist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Für eine Abhängigkeits Eigenschaft kann ein zulässiger Wertebereich für diesen Typ über einen <xref:System.Windows.ValidateValueCallback> angegeben werden, der in der Registrierung der Abhängigkeits Eigenschaft bereitgestellt wird.  
  
 Diese Methode ruft <xref:System.Windows.DependencyProperty.IsValidType%2A> intern auf. Wenn die betreffende Abhängigkeits Eigenschaft über keinen <xref:System.Windows.ValidateValueCallback>verfügt, entspricht das Aufrufen dieser Methode tatsächlich dem Aufrufen <xref:System.Windows.DependencyProperty.IsValidType%2A>von. Wenn die Abhängigkeits Eigenschaft einen <xref:System.Windows.ValidateValueCallback>hat und wenn <xref:System.Windows.DependencyProperty.IsValidType%2A> zurückgegeben `true`hätte, wird der zurückgegebene Wert im Rückruf als implementiert.  
  
 Ein NULL-Wert ist ein gültiger Wert für Verweistyp-Abhängigkeits Eigenschaften oder <xref:System.Nullable%601> für eine Abhängigkeits Eigenschaft und `true` würde für diese Fälle zurückgeben. In Fällen, in denen die Abhängigkeits Eigenschaft weder ein Verweis <xref:System.Nullable%601> noch ein <xref:System.Windows.DependencyProperty.IsValidType%2A> Typ ist `false` , wird für einen NULL-Wert zurückgegeben, anstatt eine Ausnahme aufzurichten.  
  
   
  
## Examples  
 Im folgenden Beispiel wird <xref:System.Windows.DependencyProperty.IsValidValue%2A> als Überprüfung verwendet, <xref:System.Windows.DependencyObject.SetValue%2A> bevor für die-Abhängigkeits Eigenschaft aufgerufen wird.  
  
 [!code-csharp[PropertySystemEsoterics#TrySetValueWithValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#trysetvaluewithvalidate)]
 [!code-vb[PropertySystemEsoterics#TrySetValueWithValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#trysetvaluewithvalidate)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Windows.DependencyProperty.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Abhängigkeitseigenschaft ab.</summary>
        <value>Den Namen der Eigenschaft.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ruft den Namen ab, der `name` während der Registrierung der Abhängigkeits Eigenschaft als Parameter angegeben wird. Dieser Name ist unveränderlich und darf nicht oder eine `null` leere Zeichenfolge sein. Doppelte namens Registrierungen für denselben Besitzertyp sind nicht zulässig, und es wird eine Ausnahme ausgelöst, wenn Sie versuchen, das Duplikat zu registrieren.  
  
> [!IMPORTANT]
>  Der <xref:System.Windows.DependencyProperty.Name%2A> einer Abhängigkeits Eigenschaft muss der Konvention entsprechen, den Namen des Bezeichner der Abhängigkeits Eigenschaft minus dem Suffix "Property" zu finden. Weitere Informationen finden Sie unter [Benutzerdefinierte Abhängigkeitseigenschaften](~/docs/framework/wpf/advanced/custom-dependency-properties.md).  
  
   
  
## Examples  
 Im folgenden Beispiel werden verschiedene Merkmale eines Bezeichners für eine Abhängigkeits Eigenschaft <xref:System.Windows.DependencyProperty.Name%2A>, einschließlich, abgefragt.  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OverrideMetadata">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Stellt alternative Metadaten für diese Abhängigkeitseigenschaft bereit, wenn sie in Instanzen eines angegebenen Typs vorhanden ist, im Gegensatz zu den Metadaten, die bei der ersten Registrierung der Abhängigkeitseigenschaft bereitgestellt wurden.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata -&gt; unit" Usage="dependencyProperty.OverrideMetadata (forType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType">Der Typ, bei dem diese Abhängigkeitseigenschaft geerbt wird und bei dem die bereitgestellten alternativen Metadaten angewendet werden.</param>
        <param name="typeMetadata">Die Metadaten, die auf die Abhängigkeitseigenschaft im überschreibenden Typ angewendet werden sollen.</param>
        <summary>Gibt alternative Metadaten für diese Abhängigkeitseigenschaft an, wenn sie in Instanzen eines angegebenen Typs vorhanden ist. Dabei werden die Metadaten überschrieben, die für die Abhängigkeitseigenschaft bei der Vererbung von Basistypen vorhanden waren.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metadaten für Abhängigkeits Eigenschaften sollten überschrieben werden, bevor das Eigenschaften System die Abhängigkeits Eigenschaft verwendet. Dies entspricht der Zeit, in der bestimmte Instanzen mithilfe der Klasse erstellt werden, die die Abhängigkeits Eigenschaft registriert. Aufrufe von `forType` sollten nur innerhalb der statischen Konstruktoren des Typs ausgeführt werden, der sich selbst als Parameter dieser Methode bereitstellt, oder durch eine ähnliche Instanziierung. <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> Wenn Sie versuchen, die Metadaten zu ändern, nachdem Instanzen des Besitzertyps vorhanden sind, werden keine Ausnahmen ausgelöst, dies führt jedoch zu inkonsistenten Verhalten im Eigenschaften System.  
  
 Nachdem die Metadaten für eine bestimmte abgeleitete Klasse mit dieser Methode überschrieben wurden, wird bei nachfolgenden versuchen, Metadaten für diese abgeleitete Klasse zu überschreiben, eine Ausnahme ausgelöst.  
  
 Die angegebenen Metadaten werden mit den Eigenschafts Metadaten für die Abhängigkeits Eigenschaft zusammengeführt, so wie Sie auf dem Basis Besitzer vorhanden sind. Alle Eigenschaften, die in den ursprünglichen Basis Metadaten angegeben wurden, bleiben erhalten. nur die Merkmale, die speziell in den neuen Metadaten geändert wurden, überschreiben die Eigenschaften der Basis Metadaten. Einige Merkmale wie <xref:System.Windows.PropertyMetadata.DefaultValue%2A> werden ersetzt, wenn Sie in den neuen Metadaten angegeben werden. Andere, wie z <xref:System.Windows.PropertyChangedCallback>. b., werden kombiniert. Letztendlich hängt das Zusammensetzungs Verhalten vom Eigenschaftentyp ab, der für die Überschreibung verwendet wird, sodass das hier beschriebene Verhalten für die vorhandenen eigenschaftenmetadatenklassen ist, die von [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Abhängigkeits Eigenschaften verwendet werden. Weitere Informationen finden Sie unter [Metadaten für Abhängigkeits Eigenschaften](~/docs/framework/wpf/advanced/dependency-property-metadata.md) und [Framework-Eigenschaften Metadaten](~/docs/framework/wpf/advanced/framework-property-metadata.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Es wurde versucht, die Metadaten für eine schreibgeschützte Abhängigkeitseigenschaft zu überschreiben (dieser Vorgang kann nicht mit dieser Signatur ausgeführt werden).</exception>
        <exception cref="T:System.ArgumentException">Metadaten wurden für die Abhängigkeitseigenschaft bereits festgelegt, wie im bereitgestellten Typ vorhanden.</exception>
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata, System.Windows.DependencyPropertyKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.DependencyPropertyKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata, key As DependencyPropertyKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::DependencyPropertyKey ^ key);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata * System.Windows.DependencyPropertyKey -&gt; unit" Usage="dependencyProperty.OverrideMetadata (forType, typeMetadata, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
      </Parameters>
      <Docs>
        <param name="forType">Der Typ, bei dem diese Abhängigkeitseigenschaft geerbt wird und bei dem die bereitgestellten alternativen Metadaten angewendet werden.</param>
        <param name="typeMetadata">Die Metadaten, die auf die Abhängigkeitseigenschaft im überschreibenden Typ angewendet werden sollen.</param>
        <param name="key">Der Zugriffsschlüssel für eine schreibgeschützte Abhängigkeitseigenschaft.</param>
        <summary>Stellt alternative Metadaten für eine schreibgeschützte Abhängigkeitseigenschaft bereit, wenn sie in Instanzen eines angegebenen Typs vorhanden ist, wodurch die Metadaten überschrieben werden, die bei der ersten Registrierung der Abhängigkeitseigenschaft bereitgestellt wurden. Sie müssen die <see cref="T:System.Windows.DependencyPropertyKey" /> für die schreibgeschützte Abhängigkeitseigenschaft übergeben, um das Auslösen einer Ausnahme zu vermeiden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Signatur stellt die zugrunde liegende Implementierung für eine schreibgeschützte Abhängigkeits Eigenschaften<xref:System.Windows.DependencyPropertyKey>-bezeichnermethode () dar. Wenn Sie Metadaten für eine Abhängigkeits Eigenschaft mit Lese-und <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>Schreibzugriff überschreiben, verwenden Sie  
  
 Metadaten für Abhängigkeits Eigenschaften sollten überschrieben werden, bevor das Eigenschaften System die Abhängigkeits Eigenschaft verwendet. Dies entspricht der Zeit, in der bestimmte Objekte für die Klasse erstellt werden, die die Abhängigkeits Eigenschaft registriert. Aufrufe von `forType` sollten nur innerhalb der statischen Konstruktoren des Typs ausgeführt werden, der sich selbst als Parameter dieser Methode bereitstellt, oder durch eine ähnliche Instanziierung. <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> Wenn Sie versuchen, die Metadaten zu ändern, nachdem Instanzen des Besitzertyps vorhanden sind, werden keine Ausnahmen ausgelöst, dies führt jedoch zu inkonsistenten Verhalten im Eigenschaften System.  
  
 Nachdem die Metadaten für eine bestimmte abgeleitete Klasse mit dieser Methode überschrieben wurden, wird bei nachfolgenden versuchen, Metadaten für diese abgeleitete Klasse zu überschreiben, eine Ausnahme ausgelöst.  
  
 Die angegebenen Metadaten werden mit den Eigenschafts Metadaten für die Abhängigkeits Eigenschaft zusammengeführt, so wie Sie auf dem Basis Besitzer vorhanden sind. Alle Eigenschaften, die in den ursprünglichen Basis Metadaten angegeben wurden, bleiben erhalten. nur die Merkmale, die speziell in den neuen Metadaten geändert wurden, überschreiben die Eigenschaften der Basis Metadaten. Einige Merkmale wie <xref:System.Windows.PropertyMetadata.DefaultValue%2A> werden ersetzt, wenn Sie in den neuen Metadaten angegeben werden. Andere, wie z <xref:System.Windows.PropertyChangedCallback>. b., werden kombiniert. Das Zusammensetzungs Verhalten hängt von dem Eigenschaftentyp ab, der für die Überschreibung verwendet wird. Weitere Informationen finden Sie unter [Metadaten für Abhängigkeits Eigenschaften](~/docs/framework/wpf/advanced/dependency-property-metadata.md) und [Framework-Eigenschaften Metadaten](~/docs/framework/wpf/advanced/framework-property-metadata.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.OwnerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ OwnerType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OwnerType : Type" Usage="System.Windows.DependencyProperty.OwnerType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Typ des Objekts ab, das die Abhängigkeitseigenschaft im Eigenschaftensystem registriert oder sich selbst als Besitzer der Eigenschaft hinzugefügt hat.</summary>
        <value>Der Typ des Objekts, das die Eigenschaft registriert oder sich selbst als Besitzer der Eigenschaft hinzugefügt hat.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Wert wurde während der Eigenschaften Registrierung bereitgestellt. Der Besitzer ist entweder der ursprüngliche registriungstyp <xref:System.Windows.DependencyProperty> im Fall eines Bezeichners, der von einem <xref:System.Windows.DependencyProperty.Register%2A> -Befehl generiert wurde, oder der Typ, der sich selbst als Besitzer hinzugefügt hat, wenn ein <xref:System.Windows.DependencyProperty> Bezeichner, der von einem <xref:System.Windows.DependencyProperty.AddOwner%2A> -Befehl generiert wurde.  
  
 Der <xref:System.Windows.DependencyProperty.OwnerType%2A> auf `null` <xref:System.Windows.DependencyProperty>einem beliebigen ist unveränderlich und darf nicht in einem gültigen sein. <xref:System.Windows.DependencyProperty>  
  
   
  
## Examples  
 Im folgenden Beispiel wird der Besitzertyp basierend auf dem Bezeichner `dp`einer Abhängigkeits Eigenschaft abgerufen, und dann werden die Metadaten für den Besitzertyp für denselben Bezeichner abgerufen. Dieser Vorgang entspricht tatsächlich dem <xref:System.Windows.DependencyProperty.DefaultMetadata%2A> Abrufen von. `dp`  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyType">
      <MemberSignature Language="C#" Value="public Type PropertyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type PropertyType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.PropertyType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PropertyType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ PropertyType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyType : Type" Usage="System.Windows.DependencyProperty.PropertyType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Typ ab, den die Abhängigkeitseigenschaft für den Wert verwendet.</summary>
        <value>Der <see cref="T:System.Type" /> des Eigenschaftswerts.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft meldet den Typ des Eigenschafts Werts, wie er von der ursprünglichen Eigenschaften Registrierung deklariert wurde, `propertyType` über den-Parameter. Ähnlich wie bei <xref:System.Windows.DependencyProperty.Name%2A>ist der Eigenschaftentyp einer Abhängigkeits Eigenschaft nach der Registrierung unveränderlich.  
  
   
  
## Examples  
 Im folgenden Beispiel werden verschiedene Merkmale eines Bezeichners für eine Abhängigkeits Eigenschaft <xref:System.Windows.DependencyProperty.PropertyType%2A>, einschließlich, abgefragt. Die Typnamen Zeichenfolge <xref:System.Windows.DependencyProperty.PropertyType%2A> von wird aus der zurück <xref:System.Type>gegebenen abgerufen.  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadOnly : bool" Usage="System.Windows.DependencyProperty.ReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die von dieser <see cref="T:System.Windows.DependencyProperty" />-Instanz angegebene Abhängigkeitseigenschaft eine schreibgeschützte Abhängigkeitseigenschaft ist.</summary>
        <value><see langword="true" />, wenn die Abhängigkeitseigenschaft schreibgeschützt ist, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Schreibgeschützte Abhängigkeits Eigenschaften werden innerhalb des-Eigenschaften Systems registriert, indem <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> die-Methode im Gegensatz <xref:System.Windows.DependencyProperty.Register%2A> zur-Methode aufgerufen wird. Angefügte Eigenschaften können auch als schreibgeschützt registriert werden. siehe <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.  
  
 Schreibgeschützte Abhängigkeits Eigenschaften erfordern anstelle <xref:System.Windows.DependencyPropertyKey> eines <xref:System.Windows.DependencyProperty> Bezeichners einen Bezeichner, um Metadatenvorgänge wie das Überschreiben der Metadaten oder das Festlegen des Werts auszuführen. Wenn Sie eine <xref:System.Windows.DependencyProperty> Auflistung der Bezeichner über einen <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> oder einen anderen [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] aufgerufen <xref:System.Windows.DependencyObject.SetValue%2A> haben, der Bezeichner verfügbar macht, <xref:System.Windows.DependencyProperty.ReadOnly%2A> überprüfen Sie den Wert, <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> bevor Sie versuchen, oder zu verwenden. der Bezeichner der Abhängigkeits Eigenschaft als Eingabeparameter, um zu überprüfen, ob die Abhängigkeits Eigenschaft, die der Bezeichner darstellt, nicht schreibgeschützt ist. Wenn der Wert von <xref:System.Windows.DependencyProperty.ReadOnly%2A> für `true` eine Abhängigkeits Eigenschaft ist, gibt es keine programmgesteuerte Methode zum Abrufen eines Verweises auf den <xref:System.Windows.DependencyPropertyKey> Bezeichner der Abhängigkeits Eigenschaft, aus den <xref:System.Windows.DependencyProperty> Metadaten oder dem Bezeichner. der Bezeichner muss als statisches Feld zur Verfügung stehen, um für <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> eine schreibgeschützte Abhängigkeits Eigenschaft aufzurufen.  
  
 Wenn Sie eine benutzerdefinierte Abhängigkeits Eigenschaft erstellen und Sie als schreibgeschützt registrieren, sollten Sie nur einen get-Accessor für die [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] Wrapper Eigenschaft definieren. Andernfalls verfügt die Klasse über ein verwirrendes Objektmodell für den Eigenschafts Wrapper im Vergleich zum Zugriff auf die Abhängigkeits Eigenschaft, die unterstützt. Weitere Informationen finden Sie unter [benutzerdefinierte Abhängigkeits Eigenschaften](~/docs/framework/wpf/advanced/custom-dependency-properties.md) oder schreibgeschützte [Abhängigkeits Eigenschaften](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Standard Metadaten und die Eigenschaften des bezeichnerbezeichnerbezeichners aus unterschiedlichen Abhängigkeits Eigenschafts Feldern abgerufen, und die Informationen werden verwendet, um eine Tabelle zum Implementieren eines "metadatenbrowsers" aufzufüllen.  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Register">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registriert eine Abhängigkeitseigenschaft.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Register (name As String, propertyType As Type, ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member Register : string * Type * Type -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.Register (name, propertyType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der zu registrierenden Abhängigkeitseigenschaft. Der Name muss innerhalb des Registrierungsnamespace des Besitzertyps eindeutig sein.</param>
        <param name="propertyType">Den Typ der Eigenschaft.</param>
        <param name="ownerType">Der Besitzertyp, von dem die Abhängigkeitseigenschaft registriert wird.</param>
        <summary>Registriert eine Abhängigkeitseigenschaft mit dem angegebenen Eigenschaftennamen, Eigenschaftentyp und Besitzertyp.</summary>
        <returns>Ein Bezeichner für eine Abhängigkeitseigenschaft, der zum Festlegen des Werts eines <see langword="public static readonly" />-Felds in der Klasse verwendet werden soll. Dieser Bezeichner wird dann später in Vorgängen (z. B. beim programmgesteuerten Festlegen des Werts oder beim Abrufen von Metadaten) zum Verweisen auf die Abhängigkeitseigenschaft verwendet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur Registrierung von Abhängigkeits Eigenschaften finden <xref:System.Windows.DependencyProperty>Sie unter.  
  
   
  
## Examples  
 [!code-csharp[WPFAquariumSln#Register3Param](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#register3param)]
 [!code-vb[WPFAquariumSln#Register3Param](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#register3param)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Register (name As String, propertyType As Type, ownerType As Type, typeMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="static member Register : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.Register (name, propertyType, ownerType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der zu registrierenden Abhängigkeitseigenschaft.</param>
        <param name="propertyType">Den Typ der Eigenschaft.</param>
        <param name="ownerType">Der Besitzertyp, von dem die Abhängigkeitseigenschaft registriert wird.</param>
        <param name="typeMetadata">Eigenschaftenmetadaten für die Abhängigkeitseigenschaft.</param>
        <summary>Registriert eine Abhängigkeitseigenschaft mit dem angegebenen Eigenschaftsnamen, Eigenschaftstyp und Besitzertyp sowie den angegebenen Eigenschaftsmetadaten.</summary>
        <returns>Ein Bezeichner für eine Abhängigkeitseigenschaft, der zum Festlegen des Werts eines <see langword="public static readonly" />-Felds in der Klasse verwendet werden soll. Dieser Bezeichner wird dann später in Vorgängen (z. B. beim programmgesteuerten Festlegen des Werts oder beim Abrufen von Metadaten) zum Verweisen auf die Abhängigkeitseigenschaft verwendet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur Registrierung von Abhängigkeits Eigenschaften finden <xref:System.Windows.DependencyProperty>Sie unter.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member Register : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.Register (name, propertyType, ownerType, typeMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der zu registrierenden Abhängigkeitseigenschaft.</param>
        <param name="propertyType">Den Typ der Eigenschaft.</param>
        <param name="ownerType">Der Besitzertyp, von dem die Abhängigkeitseigenschaft registriert wird.</param>
        <param name="typeMetadata">Eigenschaftenmetadaten für die Abhängigkeitseigenschaft.</param>
        <param name="validateValueCallback">Ein Verweis auf einen Rückruf, der eine beliebige benutzerdefinierte Validierung des Werts der Abhängigkeitseigenschaft über die normale Validierung hinaus durchführen soll.</param>
        <summary>Registriert eine Abhängigkeitseigenschaft mit dem angegebenen Eigenschaftennamen, Eigenschaftentyp, Besitzertyp, den angegebenen Eigenschaftenmetadaten und einem Wertvalidierungsrückruf für die Eigenschaft.</summary>
        <returns>Ein Bezeichner für eine Abhängigkeitseigenschaft, der zum Festlegen des Werts eines <see langword="public static readonly" />-Felds in der Klasse verwendet werden soll. Dieser Bezeichner wird dann später in Vorgängen (z. B. beim programmgesteuerten Festlegen des Werts oder beim Abrufen von Metadaten) zum Verweisen auf die Abhängigkeitseigenschaft verwendet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur Registrierung von Abhängigkeits Eigenschaften finden <xref:System.Windows.DependencyProperty>Sie unter.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine Abhängigkeits Eigenschaft (einschließlich eines Validierungs Rückrufs) registriert (die Rückruf Definition wird nicht angezeigt; ausführliche Informationen zur Rückruf <xref:System.Windows.ValidateValueCallback>Definition finden Sie unter).  
  
 [!code-csharp[DPCallbackOverride#CurrentDefinitionWithWrapper](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCallbackOverride/CSharp/SDKSampleLibrary/class1.cs#currentdefinitionwithwrapper)]
 [!code-vb[DPCallbackOverride#CurrentDefinitionWithWrapper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCallbackOverride/visualbasic/sdksamplelibrary/class1.vb#currentdefinitionwithwrapper)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterAttached">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registriert eine angefügte Eigenschaft mit dem Eigenschaftensystem.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttached (name As String, propertyType As Type, ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member RegisterAttached : string * Type * Type -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.RegisterAttached (name, propertyType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der zu registrierenden Abhängigkeitseigenschaft.</param>
        <param name="propertyType">Den Typ der Eigenschaft.</param>
        <param name="ownerType">Der Besitzertyp, von dem die Abhängigkeitseigenschaft registriert wird.</param>
        <summary>Registriert eine angefügte Eigenschaft mit dem angegebenen Eigenschaftsnamen, Eigenschaftstyp und Besitzertyp.</summary>
        <returns>Ein Bezeichner für eine Abhängigkeitseigenschaft, der zum Festlegen des Werts eines <see langword="public static readonly" />-Felds in der Klasse verwendet werden soll. Dieser Bezeichner wird dann später in Vorgängen (z. B. beim programmgesteuerten Festlegen des Werts oder beim Abrufen von Metadaten) zum Verweisen auf die Abhängigkeitseigenschaft verwendet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine angefügte Eigenschaft ist ein Eigenschafts Konzept [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)], das von definiert wird. [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]implementiert angefügte Eigenschaften als Abhängigkeits Eigenschaften. Da es [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] sich bei den angefügten Eigenschaften um Abhängigkeits Eigenschaften handelt, können Metadaten angewendet werden, die vom allgemeinen Eigenschaften System für Vorgänge wie Berichts Layouteigenschaften verwendet werden können. Weitere Informationen finden Sie unter [Übersicht über angefügte Eigenschaften](~/docs/framework/wpf/advanced/attached-properties-overview.md).  
  
 Weitere Informationen zur Registrierung von Abhängigkeits Eigenschaften finden <xref:System.Windows.DependencyProperty>Sie unter.  
  
   
  
## Examples  
 Im folgenden Beispiel wird mit dieser <xref:System.Windows.DependencyProperty.RegisterAttached%2A> Signatur eine angefügte Eigenschaft für eine abstrakte Klasse registriert.  
  
 [!code-csharp[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]
 [!code-vb[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttached (name As String, propertyType As Type, ownerType As Type, defaultMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata);" />
      <MemberSignature Language="F#" Value="static member RegisterAttached : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.RegisterAttached (name, propertyType, ownerType, defaultMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der zu registrierenden Abhängigkeitseigenschaft.</param>
        <param name="propertyType">Den Typ der Eigenschaft.</param>
        <param name="ownerType">Der Besitzertyp, von dem die Abhängigkeitseigenschaft registriert wird.</param>
        <param name="defaultMetadata">Eigenschaftenmetadaten für die Abhängigkeitseigenschaft. Dies kann den Standardwert sowie andere Merkmale einschließen.</param>
        <summary>Registriert eine angefügte Eigenschaft mit dem angegebenen Eigenschaftsnamen, Eigenschaftstyp und Besitzertyp sowie den angegebenen Eigenschaftenmetadaten.</summary>
        <returns>Ein Bezeichner für eine Abhängigkeitseigenschaft, der zum Festlegen des Werts eines <see langword="public static readonly" />-Felds in der Klasse verwendet werden soll. Dieser Bezeichner wird dann später in Vorgängen (z. B. beim programmgesteuerten Festlegen des Werts oder beim Abrufen von Metadaten) zum Verweisen auf die Abhängigkeitseigenschaft verwendet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine angefügte Eigenschaft ist ein Eigenschafts Konzept [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)], das von definiert wird. [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]implementiert angefügte Eigenschaften als Abhängigkeits Eigenschaften. Da es [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] sich bei den angefügten Eigenschaften um Abhängigkeits Eigenschaften handelt, können Metadaten angewendet werden, die vom allgemeinen Eigenschaften System für Vorgänge wie Berichts Layouteigenschaften verwendet werden können. Weitere Informationen finden Sie unter [Übersicht über angefügte Eigenschaften](~/docs/framework/wpf/advanced/attached-properties-overview.md).  
  
 Weitere Informationen zur Registrierung von Abhängigkeits Eigenschaften finden <xref:System.Windows.DependencyProperty>Sie unter.  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a>Verwenden von RegisterAttached für Wert erbende Abhängigkeits Eigenschaften  
 Ein bestimmtes Szenario zum Registrieren einer Abhängigkeits Eigenschaft <xref:System.Windows.DependencyProperty.RegisterAttached%2A> mit anstelle <xref:System.Windows.DependencyProperty.Register%2A> von ist die Unterstützung der Vererbung von Eigenschafts Werten. Sie sollten Wert erbende Abhängigkeits Eigenschaften auch dann <xref:System.Windows.DependencyProperty.RegisterAttached%2A> bei registrieren, wenn die-Klasse Eigenschaften Wrapper Accessoren definiert, die die Abhängigkeits Eigenschaft verfügbar machen, und auch wenn Sie nicht beabsichtigen, Get *-und Set * static-Methoden zur Bereitstellung von true bereitzustellen. eigenschaftenunterstützungs-Accessoren.   Obwohl die Vererbung von Eigenschafts Werten für nicht angefügte Abhängigkeits Eigenschaften aussehen könnte, ist das Vererbungs Verhalten für eine nicht angefügte Eigenschaft über bestimmte Elementgrenzen in der Laufzeitstruktur nicht definiert. Wenn die Eigenschaft als angefügt registriert wird, ist die angefügte Eigenschaft eine globale Eigenschaft für das Eigenschaften System und stellt sicher, dass die Vererbung von Eigenschafts Werten über alle Grenzen in einer Elementstruktur hinweg funktioniert. Verwenden <xref:System.Windows.DependencyProperty.RegisterAttached%2A> Sie immer, um die Eigenschaften zu <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> registrieren, die Sie in den Metadaten angeben. Weitere Informationen finden Sie unter [Vererbung von Eigenschaftswerten](~/docs/framework/wpf/advanced/property-value-inheritance.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member RegisterAttached : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.RegisterAttached (name, propertyType, ownerType, defaultMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der zu registrierenden Abhängigkeitseigenschaft.</param>
        <param name="propertyType">Den Typ der Eigenschaft.</param>
        <param name="ownerType">Der Besitzertyp, von dem die Abhängigkeitseigenschaft registriert wird.</param>
        <param name="defaultMetadata">Eigenschaftenmetadaten für die Abhängigkeitseigenschaft. Dies kann den Standardwert sowie andere Merkmale einschließen.</param>
        <param name="validateValueCallback">Ein Verweis auf einen Rückruf, der eine beliebige benutzerdefinierte Validierung des Werts der Abhängigkeitseigenschaft über die normale Validierung hinaus durchführen soll.</param>
        <summary>Registriert eine angefügte Eigenschaft mit dem angegebenen Eigenschaftentyp, Besitzertyp, Eigenschaftenmetadaten und einem Wertvalidierungsrückruf für die Eigenschaft.</summary>
        <returns>Ein Bezeichner für eine Abhängigkeitseigenschaft, der zum Festlegen des Werts eines <see langword="public static readonly" />-Felds in der Klasse verwendet werden soll. Dieser Bezeichner wird dann später in Vorgängen (z. B. beim programmgesteuerten Festlegen des Werts oder beim Abrufen von Metadaten) zum Verweisen auf die Abhängigkeitseigenschaft verwendet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine angefügte Eigenschaft ist ein Eigenschafts Konzept [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)], das von definiert wird. [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]implementiert angefügte Eigenschaften als Abhängigkeits Eigenschaften. Da es [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] sich bei den angefügten Eigenschaften um Abhängigkeits Eigenschaften handelt, können Metadaten angewendet werden, die vom allgemeinen Eigenschaften System für Vorgänge wie Berichts Layouteigenschaften verwendet werden können. Weitere Informationen finden Sie unter [Übersicht über angefügte Eigenschaften](~/docs/framework/wpf/advanced/attached-properties-overview.md).  
  
 Weitere Informationen zur Registrierung von Abhängigkeits Eigenschaften finden <xref:System.Windows.DependencyProperty>Sie unter.  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a>Verwenden von RegisterAttached für Wert erbende Abhängigkeits Eigenschaften  
 Ein bestimmtes Szenario zum Registrieren einer Abhängigkeits Eigenschaft <xref:System.Windows.DependencyProperty.RegisterAttached%2A> mit anstelle <xref:System.Windows.DependencyProperty.Register%2A> von ist die Unterstützung der Vererbung von Eigenschafts Werten. Sie sollten Wert erbende Abhängigkeits Eigenschaften auch dann <xref:System.Windows.DependencyProperty.RegisterAttached%2A> bei registrieren, wenn die-Klasse Eigenschaften Wrapper Accessoren definiert, die die Abhängigkeits Eigenschaft verfügbar machen, und auch wenn Sie nicht beabsichtigen, Get *-und Set * static-Methoden zur Bereitstellung von true bereitzustellen. eigenschaftenunterstützungs-Accessoren.   Obwohl die Vererbung von Eigenschafts Werten für nicht angefügte Abhängigkeits Eigenschaften aussehen könnte, ist das Vererbungs Verhalten für eine nicht angefügte Eigenschaft über bestimmte Elementgrenzen in der Laufzeitstruktur nicht definiert. Wenn die Eigenschaft als angefügt registriert wird, ist die angefügte Eigenschaft eine globale Eigenschaft für das Eigenschaften System und stellt sicher, dass die Vererbung von Eigenschafts Werten über alle Grenzen in einer Elementstruktur hinweg funktioniert. Verwenden <xref:System.Windows.DependencyProperty.RegisterAttached%2A> Sie immer, um die Eigenschaften zu <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> registrieren, die Sie in den Metadaten angeben. Weitere Informationen finden Sie unter [Vererbung von Eigenschaftswerten](~/docs/framework/wpf/advanced/property-value-inheritance.md).  
  
   
  
## Examples  
 Im folgenden Beispiel wird mit dieser <xref:System.Windows.DependencyProperty.RegisterAttached%2A> Signatur eine angefügte Eigenschaft für eine abstrakte Klasse registriert. Diese angefügte Eigenschaft ist eine Enumerationstyp-Eigenschaft, und die Registrierung fügt einen Validierungs Rückruf hinzu, um zu überprüfen, ob der angegebene Wert ein Wert der-Enumeration ist.  
  
 [!code-csharp[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]
 [!code-vb[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterAttachedReadOnly">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registriert eine schreibgeschützte angefügte Eigenschaft.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterAttachedReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterAttachedReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttachedReadOnly (name As String, propertyType As Type, ownerType As Type, defaultMetadata As PropertyMetadata) As DependencyPropertyKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterAttachedReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata);" />
      <MemberSignature Language="F#" Value="static member RegisterAttachedReadOnly : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterAttachedReadOnly (name, propertyType, ownerType, defaultMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der zu registrierenden Abhängigkeitseigenschaft.</param>
        <param name="propertyType">Den Typ der Eigenschaft.</param>
        <param name="ownerType">Der Besitzertyp, von dem die Abhängigkeitseigenschaft registriert wird.</param>
        <param name="defaultMetadata">Eigenschaftenmetadaten für die Abhängigkeitseigenschaft.</param>
        <summary>Registriert eine schreibgeschützte angefügte Eigenschaft mit dem angegebenen Eigenschaftstyp und Besitzertyp sowie den angegebenen Eigenschaftsmetadaten.</summary>
        <returns>Ein Schlüssel für eine Abhängigkeitseigenschaft, der zum Festlegen des Werts für ein statisches schreibgeschütztes Feld in der Klasse verwendet werden sollte. Mit diesem wird dann später auf die Abhängigkeitseigenschaft verwiesen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode gibt den- <xref:System.Windows.DependencyPropertyKey>Typ zurück <xref:System.Windows.DependencyProperty.RegisterAttached%2A> , während den <xref:System.Windows.DependencyProperty>-Typ zurückgibt. Normalerweise werden die Schlüssel, die schreibgeschützte Eigenschaften darstellen, nicht öffentlich gemacht, da die Schlüssel verwendet werden können, um den Wert der Abhängigkeits <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>Eigenschaft festzulegen, indem aufgerufen wird. Ihr Klassen Design wirkt sich auf Ihre Anforderungen aus. es wird jedoch im Allgemeinen empfohlen, den Zugriff und die <xref:System.Windows.DependencyPropertyKey> Sichtbarkeit eines beliebigen auf die Teile des Codes zu beschränken, die erforderlich sind, um diese Abhängigkeits Eigenschaft als Teil der Klassen-oder Anwendungslogik festzulegen. Außerdem wird empfohlen, dass Sie einen Bezeichner für die Abhängigkeits Eigenschaft für die schreibgeschützte Abhängigkeits Eigenschaft verfügbar machen, <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> indem Sie `public static readonly` den Wert von als Feld für die Klasse verfügbar machen.  
  
 Schreibgeschützte angefügte Eigenschaften sind ein seltenen Szenario, da das primäre Szenario für eine angefügte Eigenschaft in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]verwendet wird. Ohne einen öffentlichen Setter kann eine angefügte Eigenschaft nicht in der [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Syntax festgelegt werden.  
  
 Weitere Informationen zur Registrierung von Abhängigkeits Eigenschaften finden <xref:System.Windows.DependencyProperty>Sie unter.  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a>Verwenden von RegisterAttached für Wert erbende Abhängigkeits Eigenschaften  
 Ein bestimmtes Szenario zum Registrieren einer Abhängigkeits Eigenschaft als angefügt ist die Unterstützung der Vererbung von Eigenschafts Werten. Sie sollten Wert erbende Abhängigkeits Eigenschaften auch dann <xref:System.Windows.DependencyProperty.RegisterAttached%2A> bei registrieren, wenn die-Klasse Eigenschaften Wrapper Accessoren definiert, die die Abhängigkeits Eigenschaft verfügbar machen, und auch wenn Sie nicht beabsichtigen, Get *-und Set * static-Methoden zur Bereitstellung von true bereitzustellen. eigenschaftenunterstützungs-Accessoren.   Obwohl die Vererbung von Eigenschafts Werten für nicht angefügte Abhängigkeits Eigenschaften aussehen könnte, ist das Vererbungs Verhalten für eine nicht angefügte Eigenschaft über bestimmte Elementgrenzen in der Laufzeitstruktur nicht definiert. Wenn die Eigenschaft als angefügt registriert wird, ist die angefügte Eigenschaft eine globale Eigenschaft für das Eigenschaften System und stellt sicher, dass die Vererbung von Eigenschafts Werten über alle Grenzen in einer Elementstruktur hinweg funktioniert. Verwenden <xref:System.Windows.DependencyProperty.RegisterAttached%2A> Sie immer, um die Eigenschaften zu <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> registrieren, die Sie in den Metadaten angeben. Weitere Informationen finden Sie unter [Vererbung von Eigenschaftswerten](~/docs/framework/wpf/advanced/property-value-inheritance.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterAttachedReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterAttachedReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterAttachedReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member RegisterAttachedReadOnly : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterAttachedReadOnly (name, propertyType, ownerType, defaultMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der zu registrierenden Abhängigkeitseigenschaft.</param>
        <param name="propertyType">Den Typ der Eigenschaft.</param>
        <param name="ownerType">Der Besitzertyp, von dem die Abhängigkeitseigenschaft registriert wird.</param>
        <param name="defaultMetadata">Eigenschaftenmetadaten für die Abhängigkeitseigenschaft.</param>
        <param name="validateValueCallback">Ein Verweis auf einen benutzerdefinierten Rückruf, der eine beliebige benutzerdefinierte Validierung des Werts der Abhängigkeitseigenschaft über die normale Validierung hinaus durchführen soll.</param>
        <summary>Registriert eine schreibgeschützte Eigenschaft mit dem angegebenen Eigenschaftstyp, Besitzertyp, den angegebenen Eigenschaftsmetadaten und einem Validierungsrückruf.</summary>
        <returns>Ein Abhängigkeitseigenschaftsschlüssel, der dazu verwendet werden soll, den Wert eines statischen schreibgeschützten Felds in Ihrer Klasse festzulegen, die dann dazu verwendet wird, auf die Abhängigkeitseigenschaft zu verweisen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode gibt den- <xref:System.Windows.DependencyPropertyKey>Typ zurück <xref:System.Windows.DependencyProperty.RegisterAttached%2A> , während den <xref:System.Windows.DependencyProperty>-Typ zurückgibt. In der Regel die Schlüssel, die den <xref:System.Windows.DependencyProperty>Typ darstellen. Normalerweise werden die Schlüssel, die schreibgeschützte Eigenschaften darstellen, nicht öffentlich gemacht, da die Schlüssel verwendet werden können, um den Wert der Abhängigkeits <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>Eigenschaft festzulegen, indem aufgerufen wird. Ihr Klassen Design wirkt sich auf Ihre Anforderungen aus. es wird jedoch im Allgemeinen empfohlen, den Zugriff und die <xref:System.Windows.DependencyPropertyKey> Sichtbarkeit eines beliebigen auf die Teile des Codes zu beschränken, die erforderlich sind, um diese Abhängigkeits Eigenschaft als Teil der Klassen-oder Anwendungslogik festzulegen. Außerdem wird empfohlen, dass Sie einen Bezeichner für die Abhängigkeits Eigenschaft für die schreibgeschützte Abhängigkeits Eigenschaft verfügbar machen, <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> indem Sie `public static readonly` den Wert von als Feld für die Klasse verfügbar machen.  
  
 Schreibgeschützte angefügte Eigenschaften sind ein seltenen Szenario, da das primäre Szenario für eine angefügte Eigenschaft in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]verwendet wird. Ohne einen öffentlichen Setter kann eine angefügte Eigenschaft nicht in der [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Syntax festgelegt werden.  
  
 Weitere Informationen zur Registrierung von Abhängigkeits Eigenschaften finden <xref:System.Windows.DependencyProperty>Sie unter.  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a>Verwenden von RegisterAttached für Wert erbende Abhängigkeits Eigenschaften  
 Ein bestimmtes Szenario zum Registrieren einer Abhängigkeits Eigenschaft als angefügt <xref:System.Windows.DependencyProperty.Register%2A> anstelle von ist die Unterstützung der Vererbung von Eigenschafts Werten. Sie sollten Wert erbende Abhängigkeits Eigenschaften auch dann <xref:System.Windows.DependencyProperty.RegisterAttached%2A> bei registrieren, wenn die-Klasse Eigenschaften Wrapper Accessoren definiert, die die Abhängigkeits Eigenschaft verfügbar machen, und auch wenn Sie nicht beabsichtigen, Get *-und Set * static-Methoden zur Bereitstellung von true bereitzustellen. eigenschaftenunterstützungs-Accessoren.   Obwohl die Vererbung von Eigenschafts Werten für nicht angefügte Abhängigkeits Eigenschaften aussehen könnte, ist das Vererbungs Verhalten für eine nicht angefügte Eigenschaft über bestimmte Elementgrenzen in der Laufzeitstruktur nicht definiert. Wenn die Eigenschaft als angefügt registriert wird, ist die angefügte Eigenschaft eine globale Eigenschaft für das Eigenschaften System und stellt sicher, dass die Vererbung von Eigenschafts Werten über alle Grenzen in einer Elementstruktur hinweg funktioniert. Verwenden <xref:System.Windows.DependencyProperty.RegisterAttached%2A> Sie immer, um die Eigenschaften zu <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> registrieren, die Sie in den Metadaten angeben. Weitere Informationen finden Sie unter [Vererbung von Eigenschaftswerten](~/docs/framework/wpf/advanced/property-value-inheritance.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterReadOnly">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registriert eine Abhängigkeitseigenschaft als schreibgeschützte Abhängigkeitseigenschaft.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterReadOnly (name As String, propertyType As Type, ownerType As Type, typeMetadata As PropertyMetadata) As DependencyPropertyKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="static member RegisterReadOnly : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterReadOnly (name, propertyType, ownerType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der zu registrierenden Abhängigkeitseigenschaft.</param>
        <param name="propertyType">Den Typ der Eigenschaft.</param>
        <param name="ownerType">Der Besitzertyp, von dem die Abhängigkeitseigenschaft registriert wird.</param>
        <param name="typeMetadata">Eigenschaftenmetadaten für die Abhängigkeitseigenschaft.</param>
        <summary>Registriert eine schreibgeschützte Abhängigkeitseigenschaft mit dem angegebenen Eigenschaftstyp und Besitzertyp sowie den angegebenen Eigenschaftsmetadaten.</summary>
        <returns>Ein Abhängigkeitseigenschaftsschlüssel, der dazu verwendet werden soll, den Wert eines statischen schreibgeschützten Felds in Ihrer Klasse festzulegen, die dann dazu verwendet wird, auf die Abhängigkeitseigenschaft zu verweisen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode gibt den- <xref:System.Windows.DependencyPropertyKey>Typ zurück <xref:System.Windows.DependencyProperty.RegisterAttached%2A> , während den <xref:System.Windows.DependencyProperty>-Typ zurückgibt. Normalerweise werden die Schlüssel, die schreibgeschützte Eigenschaften darstellen, nicht öffentlich gemacht, da die Schlüssel verwendet werden können, um den Wert der Abhängigkeits <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>Eigenschaft festzulegen, indem aufgerufen wird. Ihr Klassen Design wirkt sich auf Ihre Anforderungen aus. es wird jedoch im Allgemeinen empfohlen, den Zugriff und die <xref:System.Windows.DependencyPropertyKey> Sichtbarkeit eines beliebigen auf die Teile des Codes zu beschränken, die erforderlich sind, um diese Abhängigkeits Eigenschaft als Teil der Klassen-oder Anwendungslogik festzulegen. Außerdem wird empfohlen, dass Sie einen Bezeichner für die Abhängigkeits Eigenschaft für die schreibgeschützte Abhängigkeits Eigenschaft verfügbar machen, <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> indem Sie `public static readonly` den Wert von als Feld für die Klasse verfügbar machen.  
  
 Schreibgeschützte Abhängigkeits Eigenschaften sind ein gängiges Szenario, das sowohl in [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] der vorhandenen-als auch in der [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] -Anpassungs Szenarios üblich ist, da andere Funktionen möglicherweise eine Abhängigkeits Eigenschaft erfordern, auch wenn diese Eigenschaft nicht von festgelegt werden kann. Anrufer. Sie können den Wert einer schreibgeschützten Abhängigkeits Eigenschaft als Grundlage für andere Eigenschafts System Vorgänge verwenden, die eine Abhängigkeits Eigenschaft annehmen, z. b <xref:System.Windows.Trigger> . das Erstellen eines auf der Abhängigkeits Eigenschaft in einem Stil.  
  
 Weitere Informationen zur Registrierung von Abhängigkeits Eigenschaften finden <xref:System.Windows.DependencyProperty>Sie unter.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine `AquariumSize` Abhängigkeits Eigenschaft als schreibgeschützt registriert. Das Beispiel definiert `AquariumSizeKey` als internen Schlüssel (sodass andere Klassen in der Assembly Metadaten überschreiben könnten) und macht den Bezeichner der Abhängigkeits Eigenschaft auf Grundlage dieses `AquariumSizeProperty`Schlüssels als verfügbar. Außerdem wird ein Wrapper für `AquariumSize`erstellt, der nur über einen get-Accessor verfügt.  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member RegisterReadOnly : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterReadOnly (name, propertyType, ownerType, typeMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der zu registrierenden Abhängigkeitseigenschaft.</param>
        <param name="propertyType">Den Typ der Eigenschaft.</param>
        <param name="ownerType">Der Besitzertyp, von dem die Abhängigkeitseigenschaft registriert wird.</param>
        <param name="typeMetadata">Eigenschaftenmetadaten für die Abhängigkeitseigenschaft.</param>
        <param name="validateValueCallback">Ein Verweis auf einen benutzerdefinierten Rückruf, der eine beliebige benutzerdefinierte Validierung des Werts der Abhängigkeitseigenschaft über die normale Validierung hinaus durchführen soll.</param>
        <summary>Registriert eine schreibgeschützte Abhängigkeitseigenschaft mit dem angegebenen Eigenschaftstyp, Besitzertyp, den angegebenen Eigenschaftsmetadaten und einem Validierungsrückruf.</summary>
        <returns>Ein Schlüssel für eine Abhängigkeitseigenschaft, der zum Festlegen des Werts für ein statisches schreibgeschütztes Feld in der Klasse verwendet werden sollte. Mit diesem wird dann später auf die Abhängigkeitseigenschaft verwiesen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode gibt den- <xref:System.Windows.DependencyPropertyKey>Typ zurück <xref:System.Windows.DependencyProperty.RegisterAttached%2A> , während den <xref:System.Windows.DependencyProperty>-Typ zurückgibt. Normalerweise werden die Schlüssel, die schreibgeschützte Eigenschaften darstellen, nicht öffentlich gemacht, da die Schlüssel verwendet werden können, um den Wert der Abhängigkeits <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>Eigenschaft festzulegen, indem aufgerufen wird. Ihr Klassen Design wirkt sich auf Ihre Anforderungen aus. es wird jedoch im Allgemeinen empfohlen, den Zugriff und die <xref:System.Windows.DependencyPropertyKey> Sichtbarkeit eines beliebigen auf die Teile des Codes zu beschränken, die erforderlich sind, um diese Abhängigkeits Eigenschaft als Teil der Klassen-oder Anwendungslogik festzulegen. Außerdem wird empfohlen, dass Sie einen Bezeichner für die Abhängigkeits Eigenschaft für die schreibgeschützte Abhängigkeits Eigenschaft verfügbar machen, <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> indem Sie `public static readonly` den Wert von als Feld für die Klasse verfügbar machen.  
  
 Schreibgeschützte Abhängigkeits Eigenschaften sind ein ziemlich typisches Szenario. Sie können den Wert einer schreibgeschützten Abhängigkeits Eigenschaft als Grundlage für andere Eigenschafts System Vorgänge verwenden, die eine Abhängigkeits Eigenschaft annehmen, z. b <xref:System.Windows.Trigger> . das Erstellen eines auf der Abhängigkeits Eigenschaft in einem Stil.  
  
 Weitere Informationen zur Registrierung von Abhängigkeits Eigenschaften finden <xref:System.Windows.DependencyProperty>Sie unter.  
  
 Die Validierung für eine schreibgeschützte Abhängigkeits Eigenschaft ist möglicherweise weniger wichtig. Die nicht öffentliche Zugriffsebene, die Sie für den Schlüssel angeben, reduziert die Wahrscheinlichkeit für eine beliebige ungültige Eingabe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dependencyProperty.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt die Zeichenfolgendarstellung der Abhängigkeitseigenschaft zurück.</summary>
        <returns>Die Zeichenfolgendarstellung der Abhängigkeitseigenschaft.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Implementierung gibt den <xref:System.Windows.DependencyProperty.Name%2A> Eigenschafts Wert zurück.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.DependencyProperty.Name" />
      </Docs>
    </Member>
    <Member MemberName="UnsetValue">
      <MemberSignature Language="C#" Value="public static readonly object UnsetValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object UnsetValue" />
      <MemberSignature Language="DocId" Value="F:System.Windows.DependencyProperty.UnsetValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnsetValue As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ UnsetValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnsetValue : obj" Usage="System.Windows.DependencyProperty.UnsetValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt einen statischen Wert an, der vom [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]-Eigenschaftensystem verwendet wird, und nicht <see langword="null" />, um anzugeben, dass die Eigenschaft vorhanden ist, der Wert jedoch nicht vom Eigenschaftensystem festgelegt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.DependencyProperty.UnsetValue>ist ein Sentinelwert, der für Szenarios verwendet [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] wird, in denen das Eigenschaften System einen <xref:System.Windows.DependencyProperty> angeforderten Wert nicht ermitteln kann. <xref:System.Windows.DependencyProperty.UnsetValue>wird anstelle `null`von verwendet, da `null` ein gültiger Eigenschafts Wert und ein gültiger (und häufig verwendeter) <xref:System.Windows.PropertyMetadata.DefaultValue%2A>Wert sein könnte.  
  
 <xref:System.Windows.DependencyProperty.UnsetValue>wird nie von <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType>zurückgegeben. Wenn Sie für <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType> eine Abhängigkeits Eigenschaft in einer <xref:System.Windows.DependencyObject> -Instanz aufzurufen, gilt eine der folgenden Aktionen:  
  
-   Für eine Abhängigkeits Eigenschaft wird ein Standardwert in den Metadaten festgelegt, und dieser Wert wird zurückgegeben. Dieser Wert kann aus <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>stammen.  
  
-   Ein anderer Wert wurde durch das Eigenschaften System festgelegt, und der Standardwert ist nicht mehr relevant. Weitere Informationen finden Sie unter [Priorität von Abhängigkeitseigenschaftswerten](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).  
  
 Das Festlegen <xref:System.Windows.PropertyMetadata.DefaultValue%2A> eines <xref:System.Windows.DependencyProperty.UnsetValue> von ist ausdrücklich nicht zulässig.  
  
 <xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=nameWithType>gibt <xref:System.Windows.DependencyProperty.UnsetValue> zurück, wenn die angeforderte Eigenschaft nicht lokal festgelegt wurde.  
  
 <xref:System.Windows.DependencyProperty.UnsetValue>hat eine besondere Bedeutung, wenn als Rückgabewert eines <xref:System.Windows.CoerceValueCallback>verwendet wird. Weitere Informationen finden Sie unter [Rückrufe und Validierung von Abhängigkeits Eigenschaften](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).  
  
 Wenn Sie eine Bindung an eine Datenbank durchlaufen, <xref:System.Windows.DependencyProperty.UnsetValue> beachten Sie, dass <xref:System.DBNull.Value>nicht entspricht, und zwar auf ähnliche <xref:System.DBNull.Value> Weise, wie nicht mit einem true NULL-Wert identisch ist.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateValueCallback">
      <MemberSignature Language="C#" Value="public System.Windows.ValidateValueCallback ValidateValueCallback { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ValidateValueCallback ValidateValueCallback" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.ValidateValueCallback" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValidateValueCallback As ValidateValueCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ValidateValueCallback ^ ValidateValueCallback { System::Windows::ValidateValueCallback ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValidateValueCallback : System.Windows.ValidateValueCallback" Usage="System.Windows.DependencyProperty.ValidateValueCallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.ValidateValueCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Wertvalidierungsrückruf für die Abhängigkeitseigenschaft ab.</summary>
        <value>Der Wertvalidierungsrückruf für diese Abhängigkeitseigenschaft, wie für den <paramref name="validateValueCallback" />-Parameter in der ursprünglichen Registrierung der Abhängigkeitseigenschaft angegeben.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft enthält `null` für jede Abhängigkeits Eigenschaft ohne registrierten Validierungs Rückruf.  
  
 Validierungswertrückrufe müssen statisch sein: die über das <xref:System.Windows.ValidateValueCallback> angewendete Validierung kann nicht bestimmen, ob der angegebene Wert für eine bestimmte Instanz gültig ist. Der Rückruf kann nur bestimmen, ob alle Objekte, die die Abhängigkeits Eigenschaft besitzen, den bereitgestellten Wert als gültig akzeptieren sollen oder nicht. Wenn Sie eine Validierung durchführen müssen, die die Werte anderer Abhängigkeits Eigenschaften für eine bestimmte Instanz kennt, verwenden Sie <xref:System.Windows.CoerceValueCallback> stattdessen eine. Der <xref:System.Windows.CoerceValueCallback> wird als Teil der Metadaten für Abhängigkeits Eigenschaften registriert, anstatt direkt innerhalb des Bezeichners für die Abhängigkeits Eigenschaft. Weitere Informationen finden Sie unter [Rückrufe und Validierung von Abhängigkeits Eigenschaften](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.ValidateValueCallback" />
      </Docs>
    </Member>
  </Members>
</Type>

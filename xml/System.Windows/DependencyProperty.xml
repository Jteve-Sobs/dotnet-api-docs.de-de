<Type Name="DependencyProperty" FullName="System.Windows.DependencyProperty">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fc117fffb2ec2f4ee7c294166d054208a4b13ede" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39942028" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DependencyProperty" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyProperty extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyProperty" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyProperty" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyProperty sealed" />
  <TypeSignature Language="F#" Value="type DependencyProperty = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Markup.DependencyPropertyConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.DependencyPropertyValueSerializer))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Markup.DependencyPropertyConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="fa9b3-101">Stellt eine Eigenschaft dar, die durch Methoden festgelegt werden kann, z. B. Formatierung, Datenbindung, Animation und Vererbung.</span>
      <span class="sxs-lookup">
        <span data-stu-id="fa9b3-101">Represents a property that can be set through methods such as, styling, data binding, animation, and inheritance.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa9b3-102">Ein <xref:System.Windows.DependencyProperty> unterstützt die folgenden Funktionen in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]:</span><span class="sxs-lookup"><span data-stu-id="fa9b3-102">A <xref:System.Windows.DependencyProperty> supports the following capabilities in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]:</span></span>  
  
-   <span data-ttu-id="fa9b3-103">Die Eigenschaft kann in einem Stil festgelegt werden.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-103">The property can be set in a style.</span></span> <span data-ttu-id="fa9b3-104">Weitere Informationen finden Sie unter [Erstellen von Formaten und Vorlagen](~/docs/framework/wpf/controls/styling-and-templating.md).</span><span class="sxs-lookup"><span data-stu-id="fa9b3-104">For more information, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
-   <span data-ttu-id="fa9b3-105">Die Eigenschaft kann über die Datenbindung festgelegt werden.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-105">The property can be set through data binding.</span></span> <span data-ttu-id="fa9b3-106">Weitere Informationen zur Datenbindung mit Abhängigkeitseigenschaften finden Sie unter [Vorgehensweise: Binden der Eigenschaften von zwei Steuerelementen](~/docs/framework/wpf/data/how-to-bind-the-properties-of-two-controls.md).</span><span class="sxs-lookup"><span data-stu-id="fa9b3-106">For more information about data binding dependency properties, see [How to: Bind the Properties of Two Controls](~/docs/framework/wpf/data/how-to-bind-the-properties-of-two-controls.md).</span></span>  
  
-   <span data-ttu-id="fa9b3-107">Die Eigenschaft kann mit einem dynamischen Ressourcenverweis festgelegt werden.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-107">The property can be set with a dynamic resource reference.</span></span> <span data-ttu-id="fa9b3-108">Weitere Informationen finden Sie unter [XAML-Ressourcen](~/docs/framework/wpf/advanced/xaml-resources.md).</span><span class="sxs-lookup"><span data-stu-id="fa9b3-108">For more information, see [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
-   <span data-ttu-id="fa9b3-109">Die Eigenschaft kann den Wert automatisch von einem übergeordneten Element in der Elementstruktur erben.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-109">The property can inherit its value automatically from a parent element in the element tree.</span></span> <span data-ttu-id="fa9b3-110">Weitere Informationen finden Sie unter [Vererbung von Eigenschaftswerten](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="fa9b3-110">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
-   <span data-ttu-id="fa9b3-111">Die Eigenschaft kann animiert werden.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-111">The property can be animated.</span></span> <span data-ttu-id="fa9b3-112">Weitere Informationen finden Sie unter [Übersicht über Animation](~/docs/framework/wpf/graphics-multimedia/animation-overview.md).</span><span class="sxs-lookup"><span data-stu-id="fa9b3-112">For more information, see [Animation Overview](~/docs/framework/wpf/graphics-multimedia/animation-overview.md).</span></span>  
  
-   <span data-ttu-id="fa9b3-113">Die Eigenschaft kann melden, wenn der vorherige Wert der Eigenschaft geändert wurde und den Wert der Eigenschaft umgewandelt werden kann.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-113">The property can report when the previous value of the property has been changed and the property value can be coerced.</span></span> <span data-ttu-id="fa9b3-114">Weitere Informationen finden Sie unter [Rückrufe und Validierung von Abhängigkeitseigenschaften](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="fa9b3-114">For more information, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
-   <span data-ttu-id="fa9b3-115">Die Eigenschaft meldet Informationen zu [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], z. B., ob Ändern eines Eigenschaftswerts das Layoutsystem die visuellen Objekte für ein Element Zertifikatsinfrastruktur mehr erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-115">The property reports information to [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], such as whether changing a property value should require the layout system to recompose the visuals for an element.</span></span>  
  
-   <span data-ttu-id="fa9b3-116">Die Eigenschaft empfängt-Unterstützung in den [!INCLUDE[wpfdesigner_current_long](~/includes/wpfdesigner-current-long-md.md)].</span><span class="sxs-lookup"><span data-stu-id="fa9b3-116">The property receives support in the [!INCLUDE[wpfdesigner_current_long](~/includes/wpfdesigner-current-long-md.md)].</span></span>  <span data-ttu-id="fa9b3-117">Beispielsweise kann die Eigenschaft bearbeitet werden, der **Eigenschaften** Fenster.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-117">For example, the property can be edited in the **Properties** window.</span></span>  
  
 <span data-ttu-id="fa9b3-118">Weitere Informationen zu Abhängigkeitseigenschaften finden Sie unter [Übersicht über Abhängigkeitseigenschaften](~/docs/framework/wpf/advanced/dependency-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="fa9b3-118">To learn more about dependency properties, see [Dependency Properties Overview](~/docs/framework/wpf/advanced/dependency-properties-overview.md).</span></span> <span data-ttu-id="fa9b3-119">Wenn Sie Eigenschaften für die benutzerdefinierten Typen zur Unterstützung von Funktionen in der vorangehenden Liste wünschen, sollten Sie eine Abhängigkeitseigenschaft erstellen.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-119">If you want properties on your custom types to support the capabilities in the preceding list, you should create a dependency property.</span></span>  <span data-ttu-id="fa9b3-120">Vorgehensweise: Erstellen von benutzerdefinierten Abhängigkeitseigenschaften finden Sie unter [benutzerdefinierte Abhängigkeitseigenschaften](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="fa9b3-120">To learn how to create custom dependency properties, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span></span>  
  
 <span data-ttu-id="fa9b3-121">Eine angefügte Eigenschaft ist eine Eigenschaft, mit der jedes beliebige Objekt an den Informationen in den Typ, der die angefügte Eigenschaft definiert.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-121">An attached property is a property that enables any object to report information to the type that defines the attached property.</span></span> <span data-ttu-id="fa9b3-122">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], jeder Typ, der von erbt <xref:System.Windows.DependencyObject> können unabhängig davon, ob der Typ vom Typ erbt, die die Eigenschaft definiert eine angefügte Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-122">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], any type that inherits from <xref:System.Windows.DependencyObject> can use an attached property regardless of whether the type inherits from the type that defines the property.</span></span> <span data-ttu-id="fa9b3-123">Eine angefügte Eigenschaft ist ein Feature von der [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Sprache.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-123">An attached property is a feature of the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language.</span></span>  <span data-ttu-id="fa9b3-124">Eine angefügte Eigenschaft festlegen, in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], verwenden Sie die *Besitzertyp*.* PropertyName* Syntax.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-124">To set an attached property in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], use the *ownerType*.*propertyName* syntax.</span></span> <span data-ttu-id="fa9b3-125">Ein Beispiel für eine angefügte Eigenschaft ist die <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-125">An example of an attached property is the <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="fa9b3-126">Wenn eine Eigenschaft zu erstellen, die auf allen verwendet werden können sollen <xref:System.Windows.DependencyObject> eingibt, dann sollten Sie eine angefügte Eigenschaft erstellen.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-126">If you want to create a property that can be used on all <xref:System.Windows.DependencyObject> types, then you should create an attached property.</span></span> <span data-ttu-id="fa9b3-127">Weitere Informationen zu angefügten Eigenschaften, einschließlich Informationen zum Erstellen, finden Sie unter [Übersicht über angefügte Eigenschaften](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="fa9b3-127">To learn more about attached properties, including how to create them, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
<a name="xamlAttributeUsage_DependencyProperty"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="fa9b3-128">Verwendung von XAML-Attributen</span><span class="sxs-lookup"><span data-stu-id="fa9b3-128">XAML Attribute Usage</span></span>  
  
```  
<object property="dependencyPropertyName"/>  
- or -  
<object property="ownerType.dependencyPropertyName"/>  
- or -  
<object property="attachedPropertyOwnerType.attachedPropertyName"/>  
```  
  
<a name="xamlValues_DependencyProperty"></a>   
## <a name="xaml-values"></a><span data-ttu-id="fa9b3-129">XAML-Werte</span><span class="sxs-lookup"><span data-stu-id="fa9b3-129">XAML Values</span></span>  
 `dependencyPropertyName`  
 <span data-ttu-id="fa9b3-130">Eine Zeichenfolge, der angibt, die <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType> der gewünschten Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-130">A string that specifies the <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType> of the desired dependency property.</span></span> <span data-ttu-id="fa9b3-131">Dies kann vorangestellt werden ein XML-Namespacepräfix, wenn die Eigenschaft nicht in der XML-Standardnamespace ist (Weitere Informationen finden Sie unter [XAML-Namespaces und Namespace-Zuordnung für WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).)</span><span class="sxs-lookup"><span data-stu-id="fa9b3-131">This can be preceded by an XML namespace prefix if the property is not in the default XML namespace (for details, see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).)</span></span>  
  
 <span data-ttu-id="fa9b3-132">`ownerType`.`dependencyPropertyName`</span><span class="sxs-lookup"><span data-stu-id="fa9b3-132">`ownerType`.`dependencyPropertyName`</span></span>  
 <span data-ttu-id="fa9b3-133">Eine Zeichenfolge, die eines Besitzertyps für eine Abhängigkeitseigenschaft, der einen Punkt (.) gibt an, und klicken Sie dann die <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-133">A string that specifies an owner type of a dependency property, a dot (.), then the <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="fa9b3-134">`ownerType` kann auch ein XML-Namespacepräfix vorangestellt werden.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-134">`ownerType` can also be preceded by an XML namespace prefix.</span></span> <span data-ttu-id="fa9b3-135">Diese Verwendung ist speziell für spät gebundene-Stile und Vorlagen, der Besitzer der Abhängigkeitseigenschaft angegeben werden, muss für die Analyse von Kontext, da die `TargetType` ist noch nicht bekannt.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-135">This usage is particular to late-bound styles and templates, where the owner of the dependency property must be specified for parsing context because the `TargetType` is not yet known.</span></span> <span data-ttu-id="fa9b3-136">Weitere Informationen finden Sie unter [Erstellen von Formaten und Vorlagen](~/docs/framework/wpf/controls/styling-and-templating.md).</span><span class="sxs-lookup"><span data-stu-id="fa9b3-136">For more information, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
 <span data-ttu-id="fa9b3-137">`attachedPropertyOwnerType` *.*</span><span class="sxs-lookup"><span data-stu-id="fa9b3-137">`attachedPropertyOwnerType` *.*</span></span> `attachedPropertyName`  
 <span data-ttu-id="fa9b3-138">Eine Zeichenfolge, die den Besitzer einer angefügten Eigenschaft, ein Punkt (.) und dann den Namen der angefügten Eigenschaft angibt.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-138">A string that specifies  the owner of an attached property, a dot (.), then the attached property name.</span></span> <span data-ttu-id="fa9b3-139">`attachedPropertyOwnerType` kann auch ein XML-Namespacepräfix vorangestellt werden.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-139">`attachedPropertyOwnerType` can also be preceded by an XML namespace prefix.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyObject" />
    <altmember cref="T:System.Windows.DependencyPropertyHelper" />
  </Docs>
  <Members>
    <MemberGroup MemberName="AddOwner">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fa9b3-140">Fügt einen weiteren Typ als Besitzer einer Abhängigkeitseigenschaft hinzu, die bereits für einen Typ registriert wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-140">Adds another type as an owner of a dependency property that has already been registered to a type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddOwner">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty AddOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyProperty AddOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.AddOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddOwner (ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::DependencyProperty ^ AddOwner(Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="member this.AddOwner : Type -&gt; System.Windows.DependencyProperty" Usage="dependencyProperty.AddOwner ownerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType">
          <span data-ttu-id="fa9b3-141">Der Typ, der als ein Besitzer dieser Abhängigkeitseigenschaft hinzugefügt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-141">The type to add as an owner of this dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa9b3-142">Fügt einen weiteren Typ als Besitzer einer Abhängigkeitseigenschaft hinzu, die bereits registriert wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-142">Adds another type as an owner of a dependency property that has already been registered.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa9b3-143">Ein Verweis auf den ursprünglichen <see cref="T:System.Windows.DependencyProperty" />-Bezeichner, der die Abhängigkeitseigenschaft angibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-143">A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property.</span>
          </span>
          <span data-ttu-id="fa9b3-144">Dieser Bezeichner sollte von der hinzufügenden Klasse als <see langword="public static readonly" />-Feld verfügbar gemacht werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-144">This identifier should be exposed by the adding class as a <see langword="public static readonly" /> field.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa9b3-145">Diese Methode ermöglicht das Eigenschaftensystem Abhängigkeitseigenschaft für einen Typ zu erkennen, die nicht diese Abhängigkeitseigenschaft ursprünglich registriert hat.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-145">This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.</span></span>  
  
 <span data-ttu-id="fa9b3-146">In der Regel <xref:System.Windows.DependencyProperty.AddOwner%2A> wird verwendet, um Abhängigkeitseigenschaften Klassen hinzufügen, die nicht bereits die Abhängigkeitseigenschaft über Vererbung von verwalteten Klasse verfügbar machen (klassenvererbung würde dazu führen, dass die Wrappereigenschaften, die von der abgeleiteten Klasse geerbt werden und somit wird allgemein Membertabelle bietet Zugriff auf die Abhängigkeitseigenschaft bereits).</span><span class="sxs-lookup"><span data-stu-id="fa9b3-146">Typically, <xref:System.Windows.DependencyProperty.AddOwner%2A> is used to add dependency properties to classes that do not already expose that dependency property through managed class inheritance (class inheritance would cause the wrapper properties to be inherited by the derived class, and thus would provide general members-table access to the dependency property already).</span></span> <span data-ttu-id="fa9b3-147"><xref:System.Windows.DependencyProperty.AddOwner%2A> ermöglicht das Eigenschaftensystem Abhängigkeitseigenschaft für einen Typ zu erkennen, die nicht die Abhängigkeitseigenschaft ursprünglich registriert hat.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-147"><xref:System.Windows.DependencyProperty.AddOwner%2A> enables the property system to recognize a dependency property on a type that did not register that dependency property initially.</span></span>  
  
 <span data-ttu-id="fa9b3-148">Diese Signatur lässt sich nicht zum Angeben von Metadaten.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-148">This signature does not allow for specifying metadata.</span></span>  <span data-ttu-id="fa9b3-149">Wenn Sie diese Methode verwenden, wird die Metadaten automatisch für die neue generiert <xref:System.Windows.DependencyProperty> und ihren Besitzertyp.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-149">When you use this method, the metadata is automatically generated for the new <xref:System.Windows.DependencyProperty> and its owner type.</span></span> <span data-ttu-id="fa9b3-150">Die automatisch generierten Metadaten ist das Ergebnis der zusammengeführten Metadaten aller Basistypen, die diese Eigenschaft definiert haben.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-150">The auto-generated metadata is the result of the merged metadata from all of the base types that have this property defined.</span></span> <span data-ttu-id="fa9b3-151">Wenn keine zusammengeführte Metadaten verfügbar ist, wird die Standardmetadaten für die Eigenschaft verwendet.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-151">If no merged metadata is available, then the default metadata for the property is used.</span></span> <span data-ttu-id="fa9b3-152">Wenn die Eigenschaft, mithilfe registriert ist der <xref:System.Windows.DependencyProperty.RegisterAttached%2A> -Methode, und klicken Sie dann auf die Standardmetadaten, ist identisch mit den Metadaten, die erstellt wird <xref:System.Windows.DependencyProperty.RegisterAttached%2A> aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-152">If the property is registered by using the <xref:System.Windows.DependencyProperty.RegisterAttached%2A> method, then the default metadata is the same as the metadata that is created when <xref:System.Windows.DependencyProperty.RegisterAttached%2A> was called.</span></span> <span data-ttu-id="fa9b3-153">Andernfalls die <xref:System.Windows.PropertyMetadata> -Objekt wird erstellt, mit der <xref:System.Windows.PropertyMetadata.DefaultValue%2A> -Eigenschaft auf den Standardwert für den Eigenschaftentyp und alle anderen Eigenschaften festgelegt die <xref:System.Windows.PropertyMetadata> nastaven NA hodnotu `null`.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-153">Otherwise, the <xref:System.Windows.PropertyMetadata> object is created with the <xref:System.Windows.PropertyMetadata.DefaultValue%2A> property set to the property type's default and all other properties of the <xref:System.Windows.PropertyMetadata> is set to `null`.</span></span> <span data-ttu-id="fa9b3-154">Verwenden der <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29> Signatur, wenn Metadaten für die Version der Abhängigkeitseigenschaft bereitgestellt, wie in den bereitgestellten Typ hinzugefügt werden sollen.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-154">Use the <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29> signature if you want to provide metadata for the version of the dependency property as added to the provided type.</span></span>  
  
 <span data-ttu-id="fa9b3-155">Der Rückgabewert dieser Methode wird in der Regel zum Deklarieren und einzugehen, die Abhängigkeitseigenschaft Bezeichner einer Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-155">The return value of this method is typically used to declare and expose the dependency property by storing a dependency property identifier.</span></span> <span data-ttu-id="fa9b3-156">Der Bezeichner bietet Zugriff auf die Abhängigkeitseigenschaft, wenn das Eigenschaftensystem aufgerufen werden soll [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] auf die hinzufügende Besitzerklasse für die Abhängigkeitseigenschaft, insbesondere, wenn er vorhanden.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-156">The identifier provides access to the dependency property if you want to call property system [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] against the dependency property, particularly as it exists on the adding owner class.</span></span> <span data-ttu-id="fa9b3-157">Der gleiche Name für den ursprünglichen Besitzer und hinzugefügte Benutzer sollte verwendet werden, die ähnliche Funktionen an.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-157">The same property name for both original owner and added owner should be used to indicate the similar functionality.</span></span> <span data-ttu-id="fa9b3-158">Verwenden Sie die <xref:System.Windows.DependencyProperty> Rückgabewert der <xref:System.Windows.DependencyProperty.AddOwner%2A> Methode der Bezeichner der Abhängigkeitseigenschaft definieren, sowie zum Deklarieren [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] Eigenschaftenwrapper für Abhängigkeitseigenschaften, die mithilfe von Typen hinzugefügt werden <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-158">You should use the <xref:System.Windows.DependencyProperty> return value of the <xref:System.Windows.DependencyProperty.AddOwner%2A> method to define the dependency property identifier, and also to declare [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span></span>  
  
 <span data-ttu-id="fa9b3-159">Die <xref:System.Windows.DependencyProperty.AddOwner%2A> oben empfohlenen Methode wird verwendet, wenn es sich bei Erstellen von Abhängigkeitseigenschaften, die innerhalb von deklariert werden [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span><span class="sxs-lookup"><span data-stu-id="fa9b3-159">The <xref:System.Windows.DependencyProperty.AddOwner%2A> methodology recommended above is used when creating the dependency properties that are declared within [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span> <span data-ttu-id="fa9b3-160">Beispielsweise sowohl <xref:System.Windows.Controls.Border> und <xref:System.Windows.Controls.Control> definieren eine `BorderBrush` Abhängigkeitseigenschaft, die ähnliche Funktionen aufweisen.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-160">For instance, both <xref:System.Windows.Controls.Border> and <xref:System.Windows.Controls.Control> define a `BorderBrush` dependency property, which have similar functionality.</span></span> <span data-ttu-id="fa9b3-161"><xref:System.Windows.Controls.Control> definiert die `BorderBrush` Eigenschaft im Eigenschaftensystem durch Aufrufen von <xref:System.Windows.DependencyProperty.AddOwner%2A> basierend auf dem ursprünglichen Besitzer <xref:System.Windows.Controls.Border> und ihre registrierte <xref:System.Windows.Controls.Border.BorderBrushProperty> Abhängigkeit Eigenschaft Bezeichner.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-161"><xref:System.Windows.Controls.Control> defines its `BorderBrush` property to the property system by calling <xref:System.Windows.DependencyProperty.AddOwner%2A> based on the original owner <xref:System.Windows.Controls.Border> and its registered <xref:System.Windows.Controls.Border.BorderBrushProperty> dependency property identifer.</span></span> <span data-ttu-id="fa9b3-162">Die <xref:System.Windows.DependencyProperty.AddOwner%2A> zurückgegeben Wert wird dann verwendet, um ein neues statisches <xref:System.Windows.DependencyProperty> Feld (<xref:System.Windows.Controls.Control.BorderBrushProperty>) für diese Eigenschaft auf den Besitzer hinzugefügt und ein `BorderBrush` Eigenschaftenwrapper auch deklariert wird.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-162">The <xref:System.Windows.DependencyProperty.AddOwner%2A> return value is then used to establish a new static <xref:System.Windows.DependencyProperty> field (<xref:System.Windows.Controls.Control.BorderBrushProperty>) for that property on the added owner, and a `BorderBrush` property wrapper is also declared.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOwner">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty AddOwner (Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyProperty AddOwner(class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.AddOwner(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddOwner (ownerType As Type, typeMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::DependencyProperty ^ AddOwner(Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.AddOwner : Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyProperty" Usage="dependencyProperty.AddOwner (ownerType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="ownerType">
          <span data-ttu-id="fa9b3-163">Der Typ, der als Besitzer dieser Abhängigkeitseigenschaft hinzugefügt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-163">The type to add as owner of this dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="fa9b3-164">Die Metadaten, die die Abhängigkeitseigenschaft beschreiben, wie sie für den bereitgestellten Typ vorhanden sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-164">The metadata that qualifies the dependency property as it exists on the provided type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa9b3-165">Fügt einen anderen Typ als Besitzer einer Abhängigkeitseigenschaft hinzu, die bereits registriert wurde. Dabei werden Abhängigkeitseigenschaft-Metadaten für die Abhängigkeitseigenschaft bereitgestellt, wie sie für den bereitgestellten Besitzertyp vorhanden sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-165">Adds another type as an owner of a dependency property that has already been registered, providing dependency property metadata for the dependency property as it will exist on the provided owner type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa9b3-166">Ein Verweis auf den ursprünglichen <see cref="T:System.Windows.DependencyProperty" />-Bezeichner, der die Abhängigkeitseigenschaft angibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-166">A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property.</span>
          </span>
          <span data-ttu-id="fa9b3-167">Dieser Bezeichner sollte von der hinzufügenden Klasse als <see langword="public static readonly" />-Feld verfügbar gemacht werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-167">This identifier should be exposed by the adding class as a <see langword="public static readonly" /> field.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa9b3-168">Diese Methode ermöglicht das Eigenschaftensystem Abhängigkeitseigenschaft für einen Typ zu erkennen, die nicht diese Abhängigkeitseigenschaft ursprünglich registriert hat.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-168">This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.</span></span>  
  
 <span data-ttu-id="fa9b3-169">Der Rückgabewert dieser Methode wird zum Deklarieren und verfügbar zu machen die Abhängigkeitseigenschaft, insbesondere, wie sie auf die hinzufügende Besitzerklasse vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-169">The return value of this method is used to declare and expose the dependency property, particularly as it exists on the adding owner class.</span></span> <span data-ttu-id="fa9b3-170">Im Allgemeinen sollte der gleiche Name für den ursprünglichen Besitzer und Besitzer hinzugefügt verwendet werden, die ähnliche Funktionen an.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-170">Generally, the same property name for both original owner and added owner should be used to indicate the similar functionality.</span></span> <span data-ttu-id="fa9b3-171">Es wird empfohlen, die Bezeichner, sowie neue verfügbar zu machen [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] Eigenschaftenwrapper für Abhängigkeitseigenschaften, die mithilfe von Typen hinzugefügt werden <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-171">It is good practice to expose the identifiers, as well as new [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span></span>  
  
 <span data-ttu-id="fa9b3-172">Die <xref:System.Windows.DependencyProperty.AddOwner%2A> oben empfohlenen Methoden wird beim Erstellen verwendet [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] innerhalb deklarierten [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span><span class="sxs-lookup"><span data-stu-id="fa9b3-172">The <xref:System.Windows.DependencyProperty.AddOwner%2A> methodology recommended above is used when creating [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] declared within [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span> <span data-ttu-id="fa9b3-173">Beispielsweise sowohl <xref:System.Windows.Controls.Border> und <xref:System.Windows.Controls.Control> definieren eine `BorderBrush` Abhängigkeitseigenschaft, die ähnliche Funktionen aufweisen.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-173">For instance, both <xref:System.Windows.Controls.Border> and <xref:System.Windows.Controls.Control> define a `BorderBrush` dependency property, which have similar functionality.</span></span> <span data-ttu-id="fa9b3-174"><xref:System.Windows.Controls.Control> definiert die `BorderBrush` Eigenschaft im Eigenschaftensystem durch Aufrufen von <xref:System.Windows.DependencyProperty.AddOwner%2A> für den ursprünglichen Besitzer <xref:System.Windows.Controls.Border> und ihre registrierte <xref:System.Windows.Controls.Border.BorderBrushProperty> Abhängigkeit Eigenschaft Bezeichner.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-174"><xref:System.Windows.Controls.Control> defines its `BorderBrush` property to the property system by calling <xref:System.Windows.DependencyProperty.AddOwner%2A> on original owner <xref:System.Windows.Controls.Border> and its registered <xref:System.Windows.Controls.Border.BorderBrushProperty> dependency property identifer.</span></span> <span data-ttu-id="fa9b3-175">Die <xref:System.Windows.DependencyProperty.AddOwner%2A> zurückgegeben Wert wird dann verwendet, um ein neues statisches <xref:System.Windows.DependencyProperty> Feld (<xref:System.Windows.Controls.Control.BorderBrushProperty>) für diese Eigenschaft auf den Besitzer hinzugefügt und ein `BorderBrush` Eigenschaftenwrapper auch deklariert wird.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-175">The <xref:System.Windows.DependencyProperty.AddOwner%2A> return value is then used to establish a static <xref:System.Windows.DependencyProperty> field (<xref:System.Windows.Controls.Control.BorderBrushProperty>)for that property on the added owner, and a `BorderBrush` property wrapper is also declared.</span></span>  
  
 <span data-ttu-id="fa9b3-176">Der Bezeichner des hinzugefügten Besitzers Abhängigkeitseigenschaft zu verwendende für Vorgänge wie z. B. <xref:System.Windows.DependencyObject.GetValue%2A>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-176">The added owner's dependency property identifier should be used for operations such as <xref:System.Windows.DependencyObject.GetValue%2A>.</span></span> <span data-ttu-id="fa9b3-177">Jedoch typspezifische Vorgänge im Zusammenhang mit Typen oder Instanzen der Klasse, die hinzugefügt wurde, wie Sie weiterhin Besitzer über unterschiedliche Metadaten zurückgeben die erwarteten Ergebnisse auch wenn die ursprüngliche (nicht des hinzugefügten Besitzers) in Abhängigkeit der Bezeichner angegeben wird Aufrufe von Methoden wie z. B. <xref:System.Windows.DependencyObject.GetValue%2A> oder <xref:System.Windows.DependencyProperty.GetMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-177">However, type-specific operations involving either types or instances of the class that was added as owner with different metadata will still return the expected results even if the original (not the added owner's) dependency property identifier is specified in calls to methods such as <xref:System.Windows.DependencyObject.GetValue%2A> or <xref:System.Windows.DependencyProperty.GetMetadata%2A>.</span></span> <span data-ttu-id="fa9b3-178">Die Metadaten für den hinzugefügten Besitzer wird aufrechterhalten, durch die <xref:System.Windows.DependencyProperty.AddOwner%2A> selbst, nicht unbedingt auf die verwiesen wird ausschließlich von Feld-ID hinzufügen von Owner-Klasse aufrufen.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-178">The metadata for the added owner is perpetuated by the <xref:System.Windows.DependencyProperty.AddOwner%2A> call itself, not necessarily referenced exclusively by the adding owner class identifier field.</span></span> <span data-ttu-id="fa9b3-179">Dennoch ist es empfiehlt sich, die Bezeichner, sowie neue [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] Eigenschaftenwrapper für Abhängigkeitseigenschaften, die mithilfe von Typen hinzugefügt werden <xref:System.Windows.DependencyProperty.AddOwner%2A>, da die Abweichung zwischen geschieht dies nicht erstellt werden. die [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] und [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] -Darstellung der Eigenschaften.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-179">Nevertheless, it is good practice to expose the  identifier, as well as new [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>, because failing to do so creates disparity between the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] representations of your properties.</span></span>  
  
 <span data-ttu-id="fa9b3-180">Die angegebene Metadaten wird mit die Eigenschaftenmetadaten für die Abhängigkeitseigenschaft zusammengeführt, wie sie auf der Basis Besitzer vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-180">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="fa9b3-181">Alle Eigenschaften, die in den ursprünglichen grundlegenden Metadaten angegeben wurden, werden beibehalten.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-181">Any characteristics that were specified in the original base metadata will persist.</span></span> <span data-ttu-id="fa9b3-182">Nur die Merkmale, die insbesondere in den neuen Metadaten geändert wurden, werden die Merkmale der grundlegenden Metadaten überschrieben.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-182">Only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="fa9b3-183">Einige Merkmale, z. B. <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, ersetzt werden, wenn sie in den neuen Metadaten angegeben sind.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-183">Some characteristics, such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, are replaced if they are specified in the new metadata.</span></span> <span data-ttu-id="fa9b3-184">Andere, z. B. <xref:System.Windows.PropertyChangedCallback>, kombiniert werden.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-184">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="fa9b3-185">Letzten Endes hängt das mergeverhalten der Metadaten-Eigenschaftentyp, die für das Überschreiben verwendet wird, also das hier beschriebene Verhalten für die vorhandene Eigenschaft Metadaten-Klassen, die von verwendet [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Abhängigkeitseigenschaften.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-185">Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dependency properties.</span></span> <span data-ttu-id="fa9b3-186">Weitere Informationen finden Sie unter [Metadaten für Abhängigkeitseigenschaften](~/docs/framework/wpf/advanced/dependency-property-metadata.md) und [Framework-Eigenschaftenmetadaten](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span><span class="sxs-lookup"><span data-stu-id="fa9b3-186">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata DefaultMetadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.PropertyMetadata DefaultMetadata" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.DefaultMetadata" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultMetadata As PropertyMetadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::PropertyMetadata ^ DefaultMetadata { System::Windows::PropertyMetadata ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultMetadata : System.Windows.PropertyMetadata" Usage="System.Windows.DependencyProperty.DefaultMetadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fa9b3-187">Ruft die Standardmetadaten der Abhängigkeitseigenschaft ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-187">Gets the default metadata of the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fa9b3-188">Die Standardmetadaten der Abhängigkeitseigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-188">The default metadata of the dependency property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa9b3-189">Die Standardmetadaten handelt, die Metadaten, die für dieses Objekt oder ein Objekt eines abgeleiteten Typs verfügbar ist, in denen keine alternative Metadaten angegeben wurden durch eine explizite <xref:System.Windows.DependencyProperty.Register%2A> oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> aufrufen.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-189">The default metadata is the property metadata that is available to that particular object or an object of a derived type where no alternative metadata was supplied by an explicit <xref:System.Windows.DependencyProperty.Register%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> call.</span></span>  
  
 <span data-ttu-id="fa9b3-190">Wenn der ursprüngliche Besitzer Metadaten mit dem ersten angewendet <xref:System.Windows.DependencyProperty.Register%2A> Aufruf, der die Abhängigkeitseigenschaft, hergestellt wird, wird, dass die Metadaten als zurückgegeben <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-190">If the original owner applied metadata to the first <xref:System.Windows.DependencyProperty.Register%2A> call that established the dependency property, then that metadata is returned as <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
 <span data-ttu-id="fa9b3-191">Wenn keine Metadaten, in der ursprünglichen angewendet wurde <xref:System.Windows.DependencyProperty.Register%2A> aufrufen, und klicken Sie dann die Standardmetadaten aus generiert wird die <xref:System.Windows.DependencyProperty.Register%2A> Aufruf und dieser Wert wird zurückgegeben, als die <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-191">If no metadata was applied in the original <xref:System.Windows.DependencyProperty.Register%2A> call, then default metadata is generated from within the <xref:System.Windows.DependencyProperty.Register%2A> call and this value is returned as the <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
 <span data-ttu-id="fa9b3-192">Der Hauptzweck der Standardmetadaten an, die mit einem <xref:System.Windows.DependencyProperty> besteht darin, geben Sie einen Standardwert für diese Eigenschaft auf einem <xref:System.Windows.DependencyObject> oder einen abgeleiteten Typ.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-192">The main purpose of having default metadata associated with a <xref:System.Windows.DependencyProperty> is to supply a default value for this property on any <xref:System.Windows.DependencyObject> or a derived type.</span></span>  
  
 <span data-ttu-id="fa9b3-193">Bei nicht angefügten Eigenschaften nicht dem Metadatentyp, der von dieser Eigenschaft zurückgegebene in abgeleiteten Typen umgewandelt werden <xref:System.Windows.PropertyMetadata> eingeben, auch wenn die Eigenschaft ursprünglich mit einem abgeleiteten Metadatentyp registriert wurde.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-193">For nonattached properties, the metadata type returned by this property cannot be cast to derived types of <xref:System.Windows.PropertyMetadata> type, even if the property was originally registered with a derived metadata type.</span></span> <span data-ttu-id="fa9b3-194">Rufen Sie die ursprünglich registrierte Metadaten, einschließlich der ursprünglichen Metadatentyp abweichen möglicherweise abgeleiteten können <xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29> stattdessen als Parameter übergeben, die ursprüngliche Registrierung eingeben kann.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-194">If you want the originally registered metadata including its original possibly derived metadata type, call <xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29> instead, passing the original registering type as a parameter.</span></span>  
  
 <span data-ttu-id="fa9b3-195">Für angefügte Eigenschaften muss der Typ der von dieser Eigenschaft zurückgegebenen Metadaten entspricht den Typ in der ursprünglichen <xref:System.Windows.DependencyProperty.RegisterAttached%2A> Registrierungsmethode.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-195">For attached properties, the type of the metadata returned by this property will match the type given in the original <xref:System.Windows.DependencyProperty.RegisterAttached%2A> registration method.</span></span>  
  
   
  
## Examples  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#DPDefaultValue](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpdefaultvalue)]
[!code-vb[PropertySystemEsoterics#DPDefaultValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpdefaultvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dependencyProperty.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="fa9b3-196">Gibt einen Hashcode für diesen <see cref="T:System.Windows.DependencyProperty" /> zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-196">Returns a hash code for this <see cref="T:System.Windows.DependencyProperty" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa9b3-197">Der Hashcode für diese <see cref="T:System.Windows.DependencyProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-197">The hash code for this <see cref="T:System.Windows.DependencyProperty" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa9b3-198">Verwendet einen eigenen eindeutigen Bezeichner für das Eigenschaftensystem <xref:System.Windows.DependencyProperty.GlobalIndex%2A>, und der Wert dieser Eigenschaft zurückgegeben wird, indem <xref:System.Windows.DependencyProperty.GetHashCode%2A>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-198">The property system uses its own unique identifier <xref:System.Windows.DependencyProperty.GlobalIndex%2A>, and the value of that property is returned by <xref:System.Windows.DependencyProperty.GetHashCode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMetadata">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fa9b3-199">Gibt die dieser Abhängigkeitseigenschaft zugeordneten Metadaten zurück, wie sie für einen bestimmten Typ vorhanden sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-199">Returns the metadata associated with this dependency property as it exists for a particular type.</span>
          </span>
          <span data-ttu-id="fa9b3-200">Dies kann der Typ sein, für den die Abhängigkeitseigenschaft zuerst registriert wurde, ein Typ, dem sie später hinzugefügt wurde, oder einen Typ, für den die Abhängigkeitseigenschaft über Vererbung abgerufen wurde, wobei die Metadaten jedoch ausdrücklich überschrieben wurden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-200">This can be the type where the dependency property was first registered, one to which it was added subsequently, or a type where the dependency property was obtained through inheritance but the metadata was specifically overridden.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (Type forType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Type forType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadata (forType As Type) As PropertyMetadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(Type ^ forType);" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : Type -&gt; System.Windows.PropertyMetadata" Usage="dependencyProperty.GetMetadata forType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="forType">
          <span data-ttu-id="fa9b3-201">Der spezifische Typ, von dem die Metadaten für die Abhängigkeitseigenschaft abgerufen werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-201">The specific type from which to retrieve the dependency property metadata.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa9b3-202">Gibt die Metadaten für diese Abhängigkeitseigenschaft zurück, wie sie für einen angegebenen vorhanden Typ vorhanden sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-202">Returns the metadata for this dependency property as it exists on a specified existing type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa9b3-203">Ein Objekt für Eigenschaftenmetadaten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-203">A property metadata object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa9b3-204">Angeben der Typ oder einen Objektverweis verwenden, wie der Typ ist erforderlich, da die Metadaten aus der ursprünglichen Registrierung aufgrund von abweichen können <xref:System.Windows.DependencyProperty.AddOwner%2A> oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> Aufrufe, die die Metadaten der Abhängigkeitseigenschaft ändern, wie sie für einen Typ vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-204">Specifying either the type or an object reference to use as type is necessary because the metadata can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that alter the metadata of the dependency property as it exists on a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa9b3-205">Im folgende Beispiel ruft die Metadaten für eine Abhängigkeitseigenschaft, die basierend auf seinem Typ ab.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-205">The following example gets metadata for a dependency property based on its type.</span></span> <span data-ttu-id="fa9b3-206">Der Typ wird abgerufen, mithilfe einer `typeof` Operator.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-206">The type is obtained by using a `typeof` operator.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataType](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatatype)]
 [!code-vb[PropertySystemEsoterics#GetMetadataType](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatatype)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObject dependencyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Windows.DependencyObject dependencyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(System::Windows::DependencyObject ^ dependencyObject);" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : System.Windows.DependencyObject -&gt; System.Windows.PropertyMetadata" Usage="dependencyProperty.GetMetadata dependencyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObject" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="dependencyObject">
          <span data-ttu-id="fa9b3-207">Ein Abhängigkeitsobjekt, dessen Typ überprüft wird, um zu ermitteln, von welcher typenspezifischen Version der Abhängigkeitseigenschaft die Metadaten stammen sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-207">A dependency object that is checked for type, to determine which type-specific version of the dependency property the metadata should come from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa9b3-208">Gibt die Metadaten für diese Abhängigkeitseigenschaft zurück, da sie für die angegebene Objektinstanz vorhanden sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-208">Returns the metadata for this dependency property as it exists on the specified object instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa9b3-209">Ein Objekt für Eigenschaftenmetadaten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-209">A property metadata object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa9b3-210">Angeben eines Typs oder ein Objektverweis ist erforderlich, da die Metadaten einer angegebenen Abhängigkeitseigenschaft von der ursprünglichen Registrierung aufgrund von abweichen können <xref:System.Windows.DependencyProperty.AddOwner%2A> oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> Aufrufe, die die Metadaten für ein genauer bestimmt werden können, auf eine Geben Sie ein.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-210">Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that can refine the property metadata as it exists on a type.</span></span>  
  
 <span data-ttu-id="fa9b3-211">Wenn Sie basierend auf einer Instanz Metadaten anfordern, übergeben Sie eigentlich nur die Instanz, damit der Typ intern ausgewertet werden kann.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-211">When you request property metadata based on an instance, you are really just passing the instance so that its type can be evaluated internally.</span></span> <span data-ttu-id="fa9b3-212">Metadaten für Abhängigkeitseigenschaften ändern sich nicht pro Instanz; Es ist immer für eine beliebige Kombination von Typ und Eigenschaft konsistent.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-212">Dependency property metadata does not vary per instance; it is always consistent for any given type-property combination.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa9b3-213">Im folgenden Beispiel wird die Metadaten für eine Abhängigkeitseigenschaft, die anhand einer bestimmten <xref:System.Windows.DependencyObject> Instanz.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-213">The following example gets metadata for a dependency property based on a specific <xref:System.Windows.DependencyObject> instance.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataDOInstance](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatadoinstance)]
 [!code-vb[PropertySystemEsoterics#GetMetadataDOInstance](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatadoinstance)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObjectType dependencyObjectType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Windows.DependencyObjectType dependencyObjectType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObjectType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(System::Windows::DependencyObjectType ^ dependencyObjectType);" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : System.Windows.DependencyObjectType -&gt; System.Windows.PropertyMetadata" Usage="dependencyProperty.GetMetadata dependencyObjectType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObjectType" Type="System.Windows.DependencyObjectType" />
      </Parameters>
      <Docs>
        <param name="dependencyObjectType">
          <span data-ttu-id="fa9b3-214">Ein bestimmtes Objekt, das den Abhängigkeitsobjekttyp aufzeichnet, von dem die Metadaten für die Abhängigkeitseigenschaft stammen sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-214">A specific object that records the dependency object type from which the dependency property metadata is desired.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa9b3-215">Gibt die Metadaten für diese Abhängigkeitseigenschaft zurück, wie sie für einen angegebenen Typ vorhanden sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-215">Returns the metadata for this dependency property as it exists on a specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa9b3-216">Ein Objekt für Eigenschaftenmetadaten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-216">A property metadata object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa9b3-217">Angeben eines Typs oder ein Objektverweis ist erforderlich, da die Metadaten einer angegebenen Abhängigkeitseigenschaft von der ursprünglichen Registrierung aufgrund von abweichen können <xref:System.Windows.DependencyProperty.AddOwner%2A> oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> Aufrufe, die die Metadaten für ein genauer bestimmt werden können, auf eine Geben Sie ein.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-217">Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that can refine the property metadata as it exists on a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa9b3-218">Im folgenden Beispiel wird die Metadaten für eine Abhängigkeitseigenschaft, die basierend auf dessen <xref:System.Windows.DependencyObjectType>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-218">The following example gets metadata for a dependency property based on its <xref:System.Windows.DependencyObjectType>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataDOType](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatadotype)]
 [!code-vb[PropertySystemEsoterics#GetMetadataDOType](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatadotype)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalIndex">
      <MemberSignature Language="C#" Value="public int GlobalIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GlobalIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.GlobalIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int GlobalIndex { int get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalIndex : int" Usage="System.Windows.DependencyProperty.GlobalIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fa9b3-219">Ruft einen intern generierten Wert ab, der die Abhängigkeitseigenschaft eindeutig identifiziert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-219">Gets an internally generated value that uniquely identifies the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fa9b3-220">Ein eindeutiger numerischer Bezeichner.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-220">A unique numeric identifier.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa9b3-221">Dieser Wert ist eine ganze Zahl, nicht auf ein global eindeutiger Bezeichner (GUID).</span><span class="sxs-lookup"><span data-stu-id="fa9b3-221">This value is an integer, not a globally unique identifier (GUID).</span></span> <span data-ttu-id="fa9b3-222">In der Regel mit diesem Indexwert ist nicht erforderlich, und es gibt keinen Indexzugriff auf Tabellen alle Abhängigkeitseigenschaften.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-222">Generally, using this index value is not required, and there is no index access to tables of all dependency properties.</span></span> <span data-ttu-id="fa9b3-223">Abhängigkeitseigenschaften sollten stattdessen von ihrer Bezeichnerfelder verwiesen werden.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-223">Dependency properties should instead be referenced by their identifier fields.</span></span>  
  
 <span data-ttu-id="fa9b3-224"><xref:System.Windows.DependencyProperty.GlobalIndex%2A> wird intern verwendet, für einen schnelleren Zugriff auf Datenstrukturen, mit denen die <xref:System.Windows.DependencyProperty.GlobalIndex%2A> als nullbasierte Arrayindex.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-224"><xref:System.Windows.DependencyProperty.GlobalIndex%2A> is used internally for faster access to data structures that use the <xref:System.Windows.DependencyProperty.GlobalIndex%2A> as a zero-based array index.</span></span> <span data-ttu-id="fa9b3-225">Eine ähnliche Verwendung verfügen möglicherweise über Anwendungen für Designer oder Tools.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-225">A similar usage might have applications for designers or tools.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidType">
      <MemberSignature Language="C#" Value="public bool IsValidType (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsValidType(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.IsValidType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidType (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsValidType(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.IsValidType : obj -&gt; bool" Usage="dependencyProperty.IsValidType value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="fa9b3-226">Der zu überprüfende Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-226">The value to check.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa9b3-227">Bestimmt, ob ein angegebener Wert für den Typ dieser Abhängigkeitseigenschaft akzeptiert wird, wie anhand des in der Registrierung der ursprünglichen Abhängigkeitseigenschaft angegebenen Eigenschaftentyps überprüft wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-227">Determines whether a specified value is acceptable for this dependency property's type, as checked against the property type provided in the original dependency property registration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa9b3-228">
            <see langword="true" />, wenn der angegebene Wert der registrierte Eigenschaftentyp oder ein zulässiger abgeleiteter Typ ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-228">
              <see langword="true" /> if the specified value is the registered property type or an acceptable derived type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa9b3-229">Der Wert `null` ist ein gültiger Typ für Abhängigkeitseigenschaften Verweis oder für eine <xref:System.Nullable%601> Abhängigkeitseigenschaft fest, und würde zurückgeben `true` in diesen Fällen.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-229">A value of `null` is a valid type for reference type dependency properties, or for a <xref:System.Nullable%601> dependency property, and would return `true` for these cases.</span></span> <span data-ttu-id="fa9b3-230">In Fällen, in dem die Abhängigkeitseigenschaft weder ein Verweis ist, noch eine <xref:System.Nullable%601> Typ <xref:System.Windows.DependencyProperty.IsValidType%2A> zurück `false` für einen null-Wert anstelle von lösen eine Ausnahme.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-230">In cases where the dependency property is neither a reference nor a <xref:System.Nullable%601> type, <xref:System.Windows.DependencyProperty.IsValidType%2A> will return `false` for a null value rather than raise an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa9b3-231">Im folgenden Beispiel wird <xref:System.Windows.DependencyProperty.IsValidType%2A> als eine Überprüfung vor dem Aufruf <xref:System.Windows.DependencyObject.SetValue%2A> für die Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-231">The following example uses <xref:System.Windows.DependencyProperty.IsValidType%2A> as a check before calling <xref:System.Windows.DependencyObject.SetValue%2A> on the dependency property.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#TrySetValue](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#trysetvalue)]
 [!code-vb[PropertySystemEsoterics#TrySetValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#trysetvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidValue">
      <MemberSignature Language="C#" Value="public bool IsValidValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsValidValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.IsValidValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidValue (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsValidValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.IsValidValue : obj -&gt; bool" Usage="dependencyProperty.IsValidValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="fa9b3-232">Der zu überprüfende Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-232">The value to check.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa9b3-233">Bestimmt, ob der angegebene Wert für den Eigenschaftentyp durch eine einfache Typüberprüfung zulässig ist und ob er sich potenziell im zulässigen Wertebereich für den Typ befindet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-233">Determines whether the provided value is accepted for the type of property through basic type checking, and also potentially if it is within the allowed range of values for that type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa9b3-234">
            <see langword="true" />, wenn der Wert zulässig ist und den richtigen Typ oder einen abgeleiteten Typ aufweist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-234">
              <see langword="true" /> if the value is acceptable and is of the correct type or a derived type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa9b3-235">Für eine Abhängigkeitseigenschaft kann über einen zulässigen Werte für diesen Typ angegeben werden eine <xref:System.Windows.ValidateValueCallback> , die in der Registrierung der Abhängigkeitseigenschaft bereitgestellt wird.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-235">For a dependency property, an allowed range of values for that type can be specified through a <xref:System.Windows.ValidateValueCallback> that is provided in the dependency property registration.</span></span>  
  
 <span data-ttu-id="fa9b3-236">Diese Methode ruft <xref:System.Windows.DependencyProperty.IsValidType%2A> intern.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-236">This method calls <xref:System.Windows.DependencyProperty.IsValidType%2A> internally.</span></span> <span data-ttu-id="fa9b3-237">Wenn die fragliche Abhängigkeitseigenschaft keine <xref:System.Windows.ValidateValueCallback>, dann ist das Aufrufen dieser Methode entspricht dem Aufruf <xref:System.Windows.DependencyProperty.IsValidType%2A>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-237">If the dependency property in question has no <xref:System.Windows.ValidateValueCallback>,then calling this method is effectively equivalent to calling <xref:System.Windows.DependencyProperty.IsValidType%2A>.</span></span> <span data-ttu-id="fa9b3-238">Wenn die Abhängigkeitseigenschaft besitzt eine <xref:System.Windows.ValidateValueCallback>, und wenn <xref:System.Windows.DependencyProperty.IsValidType%2A> zurückgegeben hätte `true`, wird der Wert werden zurückgegeben, wie Sie in der Rückruf implementiert.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-238">If the dependency property does have a <xref:System.Windows.ValidateValueCallback>, and if <xref:System.Windows.DependencyProperty.IsValidType%2A> would have returned `true`, then the value returned will be as implemented in the callback.</span></span>  
  
 <span data-ttu-id="fa9b3-239">Ein null-Wert ist ein gültiger Wert für Abhängigkeitseigenschaften Verweis oder für eine <xref:System.Nullable%601> Abhängigkeitseigenschaft fest, und würde zurückgeben `true` in diesen Fällen.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-239">A null value is a valid value for reference type dependency properties, or for a <xref:System.Nullable%601> dependency property, and would return `true` for these cases.</span></span> <span data-ttu-id="fa9b3-240">In Fällen, in dem die Abhängigkeitseigenschaft weder ein Verweis ist, noch eine <xref:System.Nullable%601> Typ <xref:System.Windows.DependencyProperty.IsValidType%2A> zurück `false` für einen null-Wert anstelle von lösen eine Ausnahme.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-240">In cases where the dependency property is neither a reference nor a <xref:System.Nullable%601> type, <xref:System.Windows.DependencyProperty.IsValidType%2A> will return `false` for a null value rather than raise an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa9b3-241">Im folgenden Beispiel wird <xref:System.Windows.DependencyProperty.IsValidValue%2A> als eine Überprüfung vor dem Aufruf <xref:System.Windows.DependencyObject.SetValue%2A> für die Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-241">The following example uses <xref:System.Windows.DependencyProperty.IsValidValue%2A> as a check before calling <xref:System.Windows.DependencyObject.SetValue%2A> on the dependency property.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#TrySetValueWithValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#trysetvaluewithvalidate)]
 [!code-vb[PropertySystemEsoterics#TrySetValueWithValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#trysetvaluewithvalidate)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Windows.DependencyProperty.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fa9b3-242">Ruft den Namen der Abhängigkeitseigenschaft ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-242">Gets the name of the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fa9b3-243">Den Namen der Eigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-243">The name of the property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa9b3-244">Diese Eigenschaft ruft ab, der als Name der `name` Parameter während der Registrierung der Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-244">This property gets the name provided as the `name` parameter during dependency property registration.</span></span> <span data-ttu-id="fa9b3-245">Dieser Name ist unveränderlich und nicht `null` oder eine leere Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-245">This name is immutable, and cannot be `null` or an empty string.</span></span> <span data-ttu-id="fa9b3-246">Aufgrund des doppelten namensregistrierungen für den gleichen Besitzertyp sind nicht zulässig, und es werden eine Ausnahme ausgelöst, wenn Sie versuchen, registrieren Sie das Duplikat.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-246">Duplicate name registrations on the same owner type are not permitted, and will throw an exception when you attempt to register the duplicate.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="fa9b3-247">Die <xref:System.Windows.DependencyProperty.Name%2A> einer Abhängigkeit Eigenschaft muss die Konvention eingehalten, der mit dem Namen des Bezeichners der Abhängigkeitseigenschaft ohne das Suffix "-Eigenschaft" übereinstimmt.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-247">The <xref:System.Windows.DependencyProperty.Name%2A> of a dependency property must follow the convention of matching the name of its dependency property identifier minus the suffix "Property".</span></span> <span data-ttu-id="fa9b3-248">Weitere Informationen finden Sie unter [Benutzerdefinierte Abhängigkeitseigenschaften](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="fa9b3-248">For details, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa9b3-249">Das folgende Beispiel fragt verschiedene Merkmale der Bezeichner einer Abhängigkeitseigenschaft, einschließlich der <xref:System.Windows.DependencyProperty.Name%2A>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-249">The following example queries various characteristics of a dependency property identifier, including the <xref:System.Windows.DependencyProperty.Name%2A>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OverrideMetadata">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fa9b3-250">Stellt alternative Metadaten für diese Abhängigkeitseigenschaft bereit, wenn sie in Instanzen eines angegebenen Typs vorhanden ist, im Gegensatz zu den Metadaten, die bei der ersten Registrierung der Abhängigkeitseigenschaft bereitgestellt wurden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-250">Supplies alternate metadata for this dependency property when it is present on instances of a specified type, versus the metadata that was provided in the initial dependency property registration.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata -&gt; unit" Usage="dependencyProperty.OverrideMetadata (forType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType">
          <span data-ttu-id="fa9b3-251">Der Typ, bei dem diese Abhängigkeitseigenschaft geerbt wird und bei dem die bereitgestellten alternativen Metadaten angewendet werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-251">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="fa9b3-252">Die Metadaten, die auf die Abhängigkeitseigenschaft im überschreibenden Typ angewendet werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-252">The metadata to apply to the dependency property on the overriding type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa9b3-253">Gibt alternative Metadaten für diese Abhängigkeitseigenschaft an, wenn sie in Instanzen eines angegebenen Typs vorhanden ist. Dabei werden die Metadaten überschrieben, die für die Abhängigkeitseigenschaft bei der Vererbung von Basistypen vorhanden waren.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-253">Specifies alternate metadata for this dependency property when it is present on instances of a specified type, overriding the metadata that existed for the dependency property as it was inherited from base types.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa9b3-254">Metadaten für Abhängigkeitseigenschaften sollte überschrieben werden, bevor Sie das Eigenschaftensystem die Abhängigkeitseigenschaft verwendet.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-254">Dependency property metadata should be overridden before the property system uses the dependency property.</span></span> <span data-ttu-id="fa9b3-255">Dies entspricht der Zeit, die bestimmte Instanzen erstellt werden, mit der Klasse, die die Abhängigkeitseigenschaft registriert.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-255">This equates to the time that specific instances are created using the class that registers the dependency property.</span></span> <span data-ttu-id="fa9b3-256">Aufrufe von <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> sollte nur ausgeführt werden, in den statischen Konstruktoren des Typs, der sich selbst als die `forType` Parameter dieser Methode oder über eine ähnliche Instanziierung.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-256">Calls to <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or through similar instantiation.</span></span> <span data-ttu-id="fa9b3-257">Es wird versucht, Metadaten zu ändern, nachdem die Instanzen des Besitzertyps vorhanden sind, werden keine Ausnahmen ausgelöst, es wird aber führt zu inkonsistentem Verhalten im Eigenschaftensystem.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-257">Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.</span></span>  
  
 <span data-ttu-id="fa9b3-258">Nachdem Metadaten für einen bestimmten abgeleiteten Klasse außer Kraft setzen, die mit dieser Methode eingerichtet wurde, werden nachfolgende Versuche zum Überschreiben von Metadaten in dieser abgeleiteten Klasse eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-258">After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.</span></span>  
  
 <span data-ttu-id="fa9b3-259">Die angegebene Metadaten wird mit die Eigenschaftenmetadaten für die Abhängigkeitseigenschaft zusammengeführt, wie sie auf der Basis Besitzer vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-259">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="fa9b3-260">Alle Eigenschaften, die in den ursprünglichen grundlegenden Metadaten angegeben wurden, werden beibehalten. nur die Merkmale, die insbesondere in den neuen Metadaten geändert wurden, werden die Merkmale der grundlegenden Metadaten überschrieben.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-260">Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="fa9b3-261">Einige Merkmale wie z. B. <xref:System.Windows.PropertyMetadata.DefaultValue%2A> ersetzt werden, wenn in den neuen Metadaten angegeben.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-261">Some characteristics such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A> are replaced if specified in the new metadata.</span></span> <span data-ttu-id="fa9b3-262">Andere, z. B. <xref:System.Windows.PropertyChangedCallback>, kombiniert werden.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-262">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="fa9b3-263">Letzten Endes hängt das mergeverhalten der Metadaten-Eigenschaftentyp, die für das Überschreiben verwendet wird, also das hier beschriebene Verhalten für die vorhandene Eigenschaft Metadaten-Klassen, die von verwendet [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Abhängigkeitseigenschaften.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-263">Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dependency properties.</span></span> <span data-ttu-id="fa9b3-264">Weitere Informationen finden Sie unter [Metadaten für Abhängigkeitseigenschaften](~/docs/framework/wpf/advanced/dependency-property-metadata.md) und [Framework-Eigenschaftenmetadaten](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span><span class="sxs-lookup"><span data-stu-id="fa9b3-264">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fa9b3-265">Es wurde versucht, die Metadaten für eine schreibgeschützte Abhängigkeitseigenschaft zu überschreiben (dieser Vorgang kann nicht mit dieser Signatur ausgeführt werden).</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-265">An attempt was made to override metadata on a read-only dependency property (that operation cannot be done using this signature).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fa9b3-266">Metadaten wurden für die Abhängigkeitseigenschaft bereits festgelegt, wie im bereitgestellten Typ vorhanden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-266">Metadata was already established for the dependency property as it exists on the provided type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata, System.Windows.DependencyPropertyKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.DependencyPropertyKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata, key As DependencyPropertyKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::DependencyPropertyKey ^ key);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata * System.Windows.DependencyPropertyKey -&gt; unit" Usage="dependencyProperty.OverrideMetadata (forType, typeMetadata, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
      </Parameters>
      <Docs>
        <param name="forType">
          <span data-ttu-id="fa9b3-267">Der Typ, bei dem diese Abhängigkeitseigenschaft geerbt wird und bei dem die bereitgestellten alternativen Metadaten angewendet werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-267">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="fa9b3-268">Die Metadaten, die auf die Abhängigkeitseigenschaft im überschreibenden Typ angewendet werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-268">The metadata to apply to the dependency property on the overriding type.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="fa9b3-269">Der Zugriffsschlüssel für eine schreibgeschützte Abhängigkeitseigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-269">The access key for a read-only dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa9b3-270">Stellt alternative Metadaten für eine schreibgeschützte Abhängigkeitseigenschaft bereit, wenn sie in Instanzen eines angegebenen Typs vorhanden ist, wodurch die Metadaten überschrieben werden, die bei der ersten Registrierung der Abhängigkeitseigenschaft bereitgestellt wurden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-270">Supplies alternate metadata for a read-only dependency property when it is present on instances of a specified type, overriding the metadata that was provided in the initial dependency property registration.</span>
          </span>
          <span data-ttu-id="fa9b3-271">Sie müssen den <see cref="T:System.Windows.DependencyPropertyKey" /> für die schreibgeschützte Abhängigkeitseigenschaft übergeben, um das Auslösen einer Ausnahme zu vermeiden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-271">You must pass the <see cref="T:System.Windows.DependencyPropertyKey" /> for the read-only dependency property to avoid raising an exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa9b3-272">Diese Signatur bietet die zugrunde liegende Implementierung für den Bezeichner für eine schreibgeschützte Abhängigkeitseigenschaft (<xref:System.Windows.DependencyPropertyKey>) Methode.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-272">This signature provides underlying implementation for a read-only dependency property identifier (<xref:System.Windows.DependencyPropertyKey>) method.</span></span> <span data-ttu-id="fa9b3-273">Wenn Metadaten für eine schreibgeschützte Abhängigkeitseigenschaft zu überschreiben, verwenden Sie <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-273">If overriding metadata for a read-write dependency property, use <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span></span>  
  
 <span data-ttu-id="fa9b3-274">Metadaten für Abhängigkeitseigenschaften sollte überschrieben werden, bevor Sie das Eigenschaftensystem die Abhängigkeitseigenschaft verwendet.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-274">Dependency property metadata should be overridden before the property system uses the dependency property.</span></span> <span data-ttu-id="fa9b3-275">Dies entspricht der Zeit, die bestimmte Objekte erstellt werden, für die Klasse, die die Abhängigkeitseigenschaft registriert.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-275">This equates to the time that specific objects are created for the class that registers the dependency property.</span></span> <span data-ttu-id="fa9b3-276">Aufrufe von <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> sollte nur ausgeführt werden, in den statischen Konstruktoren des Typs, der sich selbst als die `forType` Parameter dieser Methode oder über eine ähnliche Instanziierung.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-276">Calls to <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or through similar instantiation.</span></span> <span data-ttu-id="fa9b3-277">Es wird versucht, Metadaten zu ändern, nachdem die Instanzen des Besitzertyps vorhanden sind, werden keine Ausnahmen ausgelöst, es wird aber führt zu inkonsistentem Verhalten im Eigenschaftensystem.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-277">Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.</span></span>  
  
 <span data-ttu-id="fa9b3-278">Nachdem Metadaten für einen bestimmten abgeleiteten Klasse außer Kraft setzen, die mit dieser Methode eingerichtet wurde, werden nachfolgende Versuche zum Überschreiben von Metadaten in dieser abgeleiteten Klasse eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-278">After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.</span></span>  
  
 <span data-ttu-id="fa9b3-279">Die angegebene Metadaten wird mit die Eigenschaftenmetadaten für die Abhängigkeitseigenschaft zusammengeführt, wie sie auf der Basis Besitzer vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-279">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="fa9b3-280">Alle Eigenschaften, die in den ursprünglichen grundlegenden Metadaten angegeben wurden, werden beibehalten. nur die Merkmale, die insbesondere in den neuen Metadaten geändert wurden, werden die Merkmale der grundlegenden Metadaten überschrieben.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-280">Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="fa9b3-281">Einige Merkmale wie z. B. <xref:System.Windows.PropertyMetadata.DefaultValue%2A> ersetzt werden, wenn in den neuen Metadaten angegeben.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-281">Some characteristics such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A> are replaced if specified in the new metadata.</span></span> <span data-ttu-id="fa9b3-282">Andere, z. B. <xref:System.Windows.PropertyChangedCallback>, kombiniert werden.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-282">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="fa9b3-283">Der mergeverhalten hängt vom Typ der Metadaten für die Überschreibung verwendet wird ab.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-283">The merge behavior depends on the property metadata type being used for the override.</span></span> <span data-ttu-id="fa9b3-284">Weitere Informationen finden Sie unter [Metadaten für Abhängigkeitseigenschaften](~/docs/framework/wpf/advanced/dependency-property-metadata.md) und [Framework-Eigenschaftenmetadaten](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span><span class="sxs-lookup"><span data-stu-id="fa9b3-284">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.OwnerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ OwnerType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OwnerType : Type" Usage="System.Windows.DependencyProperty.OwnerType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fa9b3-285">Ruft den Typ des Objekts ab, das die Abhängigkeitseigenschaft im Eigenschaftensystem registriert oder sich selbst als Besitzer der Eigenschaft hinzugefügt hat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-285">Gets the type of the object that registered the dependency property with the property system, or added itself as owner of the property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fa9b3-286">Der Typ des Objekts, das die Eigenschaft registriert oder sich selbst als Besitzer der Eigenschaft hinzugefügt hat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-286">The type of the object that registered the property or added itself as owner of the property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa9b3-287">Dieser Wert wurde während der Registrierung bereitgestellt werden.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-287">This value was provided during property registration.</span></span> <span data-ttu-id="fa9b3-288">Der Besitzer wird entweder der ursprünglichen Registrierung Typ in der eine <xref:System.Windows.DependencyProperty> aus generierter Bezeichner eine <xref:System.Windows.DependencyProperty.Register%2A> Aufruf oder der Typ, der sich selbst als Besitzer im Fall von hinzugefügt eine <xref:System.Windows.DependencyProperty> aus generierter Bezeichner ein <xref:System.Windows.DependencyProperty.AddOwner%2A> aufrufen.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-288">The owner will be either the original registering type in the case of a <xref:System.Windows.DependencyProperty> identifier generated from a <xref:System.Windows.DependencyProperty.Register%2A> call, or the type that added itself as owner in the case of a <xref:System.Windows.DependencyProperty> identifier generated from an <xref:System.Windows.DependencyProperty.AddOwner%2A> call.</span></span>  
  
 <span data-ttu-id="fa9b3-289">Die <xref:System.Windows.DependencyProperty.OwnerType%2A> auf ein beliebiges <xref:System.Windows.DependencyProperty> ist unveränderlich und nicht `null` in einen gültigen <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-289">The <xref:System.Windows.DependencyProperty.OwnerType%2A> on any given <xref:System.Windows.DependencyProperty> is immutable, and cannot be `null` in a valid <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa9b3-290">Im folgende Beispiel ruft den Besitzertyp basierend auf den Bezeichner einer Abhängigkeitseigenschaft `dp`, und klicken Sie dann Ruft Metadaten für den Besitzertyp ab, dem gleichen Bezeichner.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-290">The following example gets the owner type based on a dependency property identifier `dp`, and then gets metadata on the owner type for that same identifier.</span></span> <span data-ttu-id="fa9b3-291">Dieser Vorgang entspricht dem Abrufen von <xref:System.Windows.DependencyProperty.DefaultMetadata%2A> auf `dp`.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-291">This operation is actually equivalent to getting <xref:System.Windows.DependencyProperty.DefaultMetadata%2A> on `dp`.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyType">
      <MemberSignature Language="C#" Value="public Type PropertyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type PropertyType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.PropertyType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PropertyType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ PropertyType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyType : Type" Usage="System.Windows.DependencyProperty.PropertyType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fa9b3-292">Ruft den Typ ab, den die Abhängigkeitseigenschaft für den Wert verwendet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-292">Gets the type that the dependency property uses for its value.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fa9b3-293">Der <see cref="T:System.Type" /> des Eigenschaftswerts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-293">The <see cref="T:System.Type" /> of the property value.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa9b3-294">Diese Eigenschaft meldet den Typ des Werts der Eigenschaft, gemäß der Deklaration von der ursprünglichen Registrierung, durch die `propertyType` Parameter.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-294">This property reports the type of the property's value as declared by the original property registration, through the `propertyType` parameter.</span></span> <span data-ttu-id="fa9b3-295">Ähnlich wie die <xref:System.Windows.DependencyProperty.Name%2A>, welche Eigenschaft eine Abhängigkeitseigenschaft ist unveränderlich, nach der Registrierung.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-295">Similar to the <xref:System.Windows.DependencyProperty.Name%2A>, the property type of a dependency property is immutable after registration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa9b3-296">Das folgende Beispiel fragt verschiedene Merkmale der Bezeichner einer Abhängigkeitseigenschaft, einschließlich der <xref:System.Windows.DependencyProperty.PropertyType%2A>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-296">The following example queries various characteristics of a dependency property identifier, including the <xref:System.Windows.DependencyProperty.PropertyType%2A>.</span></span> <span data-ttu-id="fa9b3-297">Zeichenfolge für den Typnamen der <xref:System.Windows.DependencyProperty.PropertyType%2A> wird abgerufen, von dem zurückgegebenen <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-297">The type name string of the <xref:System.Windows.DependencyProperty.PropertyType%2A> is obtained from the returned <xref:System.Type>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadOnly : bool" Usage="System.Windows.DependencyProperty.ReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fa9b3-298">Ruft einen Wert ab, der angibt, ob die von dieser <see cref="T:System.Windows.DependencyProperty" />-Instanz angegebene Abhängigkeitseigenschaft eine schreibgeschützte Abhängigkeitseigenschaft ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-298">Gets a value that indicates whether the dependency property identified by this <see cref="T:System.Windows.DependencyProperty" /> instance is a read-only dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fa9b3-299">
            <see langword="true" />, wenn die Abhängigkeitseigenschaft schreibgeschützt ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-299">
              <see langword="true" /> if the dependency property is read-only; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa9b3-300">Schreibgeschützte Abhängigkeitseigenschaften im Eigenschaftensystem registriert sind, durch den Aufruf der <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> Methode im Gegensatz zu den <xref:System.Windows.DependencyProperty.Register%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-300">Read-only dependency properties are registered within the property system by calling the <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> method as opposed to the <xref:System.Windows.DependencyProperty.Register%2A> method.</span></span> <span data-ttu-id="fa9b3-301">Angefügte Eigenschaften können auch als nur-Lese registriert werden; finden Sie unter <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-301">Attached properties can also be registered as read-only; see <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span></span>  
  
 <span data-ttu-id="fa9b3-302">Schreibgeschützte Abhängigkeitseigenschaften ist erforderlich, eine <xref:System.Windows.DependencyPropertyKey> Bezeichner anstelle eines <xref:System.Windows.DependencyProperty> Bezeichner auszuführenden Vorgänge mit Metadaten wie z. B. das Überschreiben der Metadaten oder Festlegen des Werts.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-302">Read-only dependency properties require a <xref:System.Windows.DependencyPropertyKey> identifier rather than a <xref:System.Windows.DependencyProperty> identifier to perform metadata operations such as overriding the metadata or setting the value.</span></span> <span data-ttu-id="fa9b3-303">Wenn Sie eine Auflistung von erhalten <xref:System.Windows.DependencyProperty> Bezeichner durch einen Aufruf von <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> oder einem anderen [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] , verfügbar macht, Bezeichner, überprüfen Sie die <xref:System.Windows.DependencyProperty.ReadOnly%2A> Wert vor dem Aufrufen <xref:System.Windows.DependencyObject.SetValue%2A> oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> verwenden, der Abhängigkeitseigenschaftbezeichner als Eingabeparameter, um sicherzustellen, dass die Abhängigkeitseigenschaft, die den Bezeichner darstellt, nicht schreibgeschützt ist.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-303">If you obtained a collection of <xref:System.Windows.DependencyProperty> identifiers through a call to <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> or another [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] that exposes identifiers, check the <xref:System.Windows.DependencyProperty.ReadOnly%2A> value before attempting to call <xref:System.Windows.DependencyObject.SetValue%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> using that dependency property identifier as an input parameter, to verify that the dependency property that the identifier represents is not read-only.</span></span> <span data-ttu-id="fa9b3-304">Wenn der Wert des <xref:System.Windows.DependencyProperty.ReadOnly%2A> ist `true` für eine Abhängigkeitseigenschaft, es ist keine programmgesteuerte Möglichkeit zum Abrufen eines Verweises auf die <xref:System.Windows.DependencyPropertyKey> Bezeichner für die Abhängigkeitseigenschaft, die aus den Metadaten oder aus der <xref:System.Windows.DependencyProperty> Bezeichner; der Bezeichner muss als ein statisches Feld verfügbar sein, um Aufrufen <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> für eine schreibgeschützte Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-304">If the value of <xref:System.Windows.DependencyProperty.ReadOnly%2A> is `true` on a dependency property, there is no programmatic way to obtain a reference to the <xref:System.Windows.DependencyPropertyKey> identifier of that dependency property, from the metadata or from the <xref:System.Windows.DependencyProperty> identifier; the identifier must be available as a static field in order to call <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> against a read-only dependency property.</span></span>  
  
 <span data-ttu-id="fa9b3-305">Wenn Sie eine benutzerdefinierte Abhängigkeitseigenschaft erstellen und registrieren Sie ihn als schreibgeschützt, definieren Sie nur einen Get-Accessor für die [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] Wrapper-Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-305">When you create a custom dependency property, and register it as read-only, you should define only a get accessor for the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] wrapper property.</span></span> <span data-ttu-id="fa9b3-306">Andernfalls müssen die Klasse ein verwirrendes Objektmodell für den Eigenschaftenwrapper im Vergleich zu den Zugriff auf die dahinter liegende Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-306">Otherwise, your class will have a confusing object model for the property wrapper as compared to the access to the backing dependency property.</span></span> <span data-ttu-id="fa9b3-307">Weitere Informationen finden Sie unter [benutzerdefinierte Abhängigkeitseigenschaften](~/docs/framework/wpf/advanced/custom-dependency-properties.md) oder [schreibgeschützte Abhängigkeitseigenschaften](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="fa9b3-307">For details, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md) or [Read-Only Dependency Properties](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa9b3-308">Im folgende Beispiel ruft die Standardmetadaten und die Eigenschaft Bezeichner Abhängigkeitseigenschaften aus verschiedenen Feldern der Dependency-Eigenschaft ab, und verwendet die Informationen zum Auffüllen einer Tabelle zum Implementieren von "Metadatenbrowser".</span><span class="sxs-lookup"><span data-stu-id="fa9b3-308">The following example obtains the default metadata and the dependency property identifier properties from various dependency property fields, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Register">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fa9b3-309">Registriert eine Abhängigkeitseigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-309">Registers a dependency property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Register (name As String, propertyType As Type, ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member Register : string * Type * Type -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.Register (name, propertyType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="fa9b3-310">Der Name der zu registrierenden Abhängigkeitseigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-310">The name of the dependency property to register.</span>
          </span>
          <span data-ttu-id="fa9b3-311">Der Name muss innerhalb des Registrierungsnamespace des Besitzertyps eindeutig sein.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-311">The name must be unique within the registration namespace of the owner type.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="fa9b3-312">Den Typ der Eigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-312">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="fa9b3-313">Der Besitzertyp, von dem die Abhängigkeitseigenschaft registriert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-313">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa9b3-314">Registriert eine Abhängigkeitseigenschaft mit dem angegebenen Eigenschaftsnamen, Eigenschaftstyp und Besitzertyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-314">Registers a dependency property with the specified property name, property type, and owner type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa9b3-315">Ein Bezeichner für eine Abhängigkeitseigenschaft, der zum Festlegen des Werts für ein <see langword="public static readonly" />-Feld in der Klasse verwendet werden sollte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-315">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="fa9b3-316">Dieser Bezeichner wird dann später in Vorgängen (z. B. beim programmgesteuerten Festlegen des Werts oder beim Abrufen von Metadaten) zum Verweisen auf die Abhängigkeitseigenschaft verwendet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-316">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa9b3-317">Weitere Informationen zur Registrierung von Abhängigkeitseigenschaften finden Sie unter <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-317">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 [!code-csharp[WPFAquariumSln#Register3Param](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#register3param)]
 [!code-vb[WPFAquariumSln#Register3Param](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#register3param)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Register (name As String, propertyType As Type, ownerType As Type, typeMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="static member Register : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.Register (name, propertyType, ownerType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="fa9b3-318">Der Name der zu registrierenden Abhängigkeitseigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-318">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="fa9b3-319">Den Typ der Eigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-319">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="fa9b3-320">Der Besitzertyp, von dem die Abhängigkeitseigenschaft registriert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-320">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="fa9b3-321">Eigenschaftenmetadaten für die Abhängigkeitseigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-321">Property metadata for the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa9b3-322">Registriert eine Abhängigkeitseigenschaft mit dem angegebenen Eigenschaftsnamen, Eigenschaftstyp und Besitzertyp sowie den angegebenen Eigenschaftsmetadaten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-322">Registers a dependency property with the specified property name, property type, owner type, and property metadata.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa9b3-323">Ein Bezeichner für eine Abhängigkeitseigenschaft, der zum Festlegen des Werts für ein <see langword="public static readonly" />-Feld in der Klasse verwendet werden sollte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-323">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="fa9b3-324">Dieser Bezeichner wird dann später in Vorgängen (z. B. beim programmgesteuerten Festlegen des Werts oder beim Abrufen von Metadaten) zum Verweisen auf die Abhängigkeitseigenschaft verwendet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-324">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa9b3-325">Weitere Informationen zur Registrierung von Abhängigkeitseigenschaften finden Sie unter <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-325">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member Register : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.Register (name, propertyType, ownerType, typeMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="fa9b3-326">Der Name der zu registrierenden Abhängigkeitseigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-326">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="fa9b3-327">Den Typ der Eigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-327">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="fa9b3-328">Der Besitzertyp, von dem die Abhängigkeitseigenschaft registriert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-328">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="fa9b3-329">Eigenschaftenmetadaten für die Abhängigkeitseigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-329">Property metadata for the dependency property.</span>
          </span>
        </param>
        <param name="validateValueCallback">
          <span data-ttu-id="fa9b3-330">Ein Verweis auf einen Rückruf, der eine beliebige benutzerdefinierte Validierung des Werts der Abhängigkeitseigenschaft über die normale Validierung hinaus durchführen soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-330">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa9b3-331">Registriert eine Abhängigkeitseigenschaft mit dem angegebenen Eigenschaftsnamen, Eigenschaftstyp, Besitzertyp, den angegebenen Eigenschaftsmetadaten und einem angegebenen Wertvalidierungsrückruf für die Eigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-331">Registers a dependency property with the specified property name, property type, owner type, property metadata, and a value validation callback for the property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa9b3-332">Ein Bezeichner für eine Abhängigkeitseigenschaft, der zum Festlegen des Werts für ein <see langword="public static readonly" />-Feld in der Klasse verwendet werden sollte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-332">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="fa9b3-333">Dieser Bezeichner wird dann später in Vorgängen (z. B. beim programmgesteuerten Festlegen des Werts oder beim Abrufen von Metadaten) zum Verweisen auf die Abhängigkeitseigenschaft verwendet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-333">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa9b3-334">Weitere Informationen zur Registrierung von Abhängigkeitseigenschaften finden Sie unter <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-334">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa9b3-335">Das folgende Beispiel registriert eine Abhängigkeitseigenschaft, einschließlich einen Validierungsrückruf (die Rückruf-Definition wird nicht angezeigt; Weitere Informationen über die Rückruf-Definition finden Sie unter <xref:System.Windows.ValidateValueCallback>).</span><span class="sxs-lookup"><span data-stu-id="fa9b3-335">The following example registers a dependency property, including a validation callback (the callback definition is not shown; for details on the callback definition, see <xref:System.Windows.ValidateValueCallback>).</span></span>  
  
 [!code-csharp[DPCallbackOverride#CurrentDefinitionWithWrapper](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCallbackOverride/CSharp/SDKSampleLibrary/class1.cs#currentdefinitionwithwrapper)]
 [!code-vb[DPCallbackOverride#CurrentDefinitionWithWrapper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCallbackOverride/visualbasic/sdksamplelibrary/class1.vb#currentdefinitionwithwrapper)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterAttached">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fa9b3-336">Registriert eine angefügte Eigenschaft mit dem Eigenschaftensystem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-336">Registers an attached property with the property system.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttached (name As String, propertyType As Type, ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member RegisterAttached : string * Type * Type -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.RegisterAttached (name, propertyType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="fa9b3-337">Der Name der zu registrierenden Abhängigkeitseigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-337">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="fa9b3-338">Den Typ der Eigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-338">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="fa9b3-339">Der Besitzertyp, von dem die Abhängigkeitseigenschaft registriert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-339">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa9b3-340">Registriert eine angefügte Eigenschaft mit dem angegebenen Eigenschaftsnamen, Eigenschaftstyp und Besitzertyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-340">Registers an attached property with the specified property name, property type, and owner type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa9b3-341">Ein Bezeichner für eine Abhängigkeitseigenschaft, der zum Festlegen des Werts für ein <see langword="public static readonly" />-Feld in der Klasse verwendet werden sollte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-341">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="fa9b3-342">Dieser Bezeichner wird dann später in Vorgängen (z. B. beim programmgesteuerten Festlegen des Werts oder beim Abrufen von Metadaten) zum Verweisen auf die Abhängigkeitseigenschaft verwendet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-342">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa9b3-343">Eine angefügte Eigenschaft ist ein Eigenschaftenkonzept von definierten [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="fa9b3-343">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="fa9b3-344"> implementiert angefügte Eigenschaften als Abhängigkeitseigenschaften an.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-344"> implements attached properties as dependency properties.</span></span> <span data-ttu-id="fa9b3-345">Da die [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] angefügte Eigenschaften sind Abhängigkeitseigenschaften handelt, können Metadaten auf Sie angewendet werden, die vom allgemeinen Eigenschaftensystem für Vorgänge wie die Layoutmerkmale reporting verwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-345">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="fa9b3-346">Weitere Informationen finden Sie unter [Übersicht über angefügte Eigenschaften](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="fa9b3-346">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="fa9b3-347">Weitere Informationen zur Registrierung von Abhängigkeitseigenschaften finden Sie unter <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-347">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa9b3-348">Das folgende Beispiel registriert eine angefügte Eigenschaft für eine abstrakte Klasse, die mit diesem <xref:System.Windows.DependencyProperty.RegisterAttached%2A> Signatur.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-348">The following example registers an attached property on an abstract class using this <xref:System.Windows.DependencyProperty.RegisterAttached%2A> signature.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]
 [!code-vb[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttached (name As String, propertyType As Type, ownerType As Type, defaultMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata);" />
      <MemberSignature Language="F#" Value="static member RegisterAttached : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.RegisterAttached (name, propertyType, ownerType, defaultMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="fa9b3-349">Der Name der zu registrierenden Abhängigkeitseigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-349">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="fa9b3-350">Den Typ der Eigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-350">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="fa9b3-351">Der Besitzertyp, von dem die Abhängigkeitseigenschaft registriert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-351">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="defaultMetadata">
          <span data-ttu-id="fa9b3-352">Eigenschaftenmetadaten für die Abhängigkeitseigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-352">Property metadata for the dependency property.</span>
          </span>
          <span data-ttu-id="fa9b3-353">Dies kann den Standardwert sowie andere Merkmale einschließen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-353">This can include the default value as well as other characteristics.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa9b3-354">Registriert eine angefügte Eigenschaft mit dem angegebenen Eigenschaftsnamen, Eigenschaftstyp und Besitzertyp sowie den angegebenen Eigenschaftenmetadaten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-354">Registers an attached property with the specified property name, property type, owner type, and property metadata.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa9b3-355">Ein Bezeichner für eine Abhängigkeitseigenschaft, der zum Festlegen des Werts für ein <see langword="public static readonly" />-Feld in der Klasse verwendet werden sollte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-355">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="fa9b3-356">Dieser Bezeichner wird dann später in Vorgängen (z. B. beim programmgesteuerten Festlegen des Werts oder beim Abrufen von Metadaten) zum Verweisen auf die Abhängigkeitseigenschaft verwendet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-356">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa9b3-357">Eine angefügte Eigenschaft ist ein Eigenschaftenkonzept von definierten [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="fa9b3-357">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="fa9b3-358"> implementiert angefügte Eigenschaften als Abhängigkeitseigenschaften an.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-358"> implements attached properties as dependency properties.</span></span> <span data-ttu-id="fa9b3-359">Da die [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] angefügte Eigenschaften sind Abhängigkeitseigenschaften handelt, können Metadaten auf Sie angewendet werden, die vom allgemeinen Eigenschaftensystem für Vorgänge wie die Layoutmerkmale reporting verwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-359">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="fa9b3-360">Weitere Informationen finden Sie unter [Übersicht über angefügte Eigenschaften](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="fa9b3-360">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="fa9b3-361">Weitere Informationen zur Registrierung von Abhängigkeitseigenschaften finden Sie unter <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-361">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="fa9b3-362">Verwendung von RegisterAttached für Abhängigkeitseigenschaften erben</span><span class="sxs-lookup"><span data-stu-id="fa9b3-362">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="fa9b3-363">Ein bestimmtes Szenario für eine Abhängigkeitseigenschaft mit <xref:System.Windows.DependencyProperty.RegisterAttached%2A> anstelle von <xref:System.Windows.DependencyProperty.Register%2A> dient zur Unterstützung von Vererbung von Eigenschaftswerten.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-363">One particular scenario for registering a dependency property with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="fa9b3-364">Registrieren Sie erben von Abhängigkeitseigenschaften mit <xref:System.Windows.DependencyProperty.RegisterAttached%2A> , auch wenn die Klasse definiert, die die Abhängigkeitseigenschaft verfügbar zu machen und selbst wenn Sie nicht beabsichtigen, Get * "und" Set * statische Methoden zur Bereitstellung verfügbar zu machen "true" angefügt. Unterstützung für Eigenschaftenaccessoren.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-364">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="fa9b3-365">Obwohl die Vererbung von Eigenschaftswerten bei nicht angefügten Abhängigkeitseigenschaften zu funktionieren scheint, ist das Vererbungsverhalten einer nicht angefügten Eigenschaft über bestimmte Elementgrenzen in der Common Language Runtime-Struktur nicht definiert.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-365">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="fa9b3-366">Registrieren der Eigenschaft als effektiv angefügt wird die angefügte Eigenschaft eine globale Eigenschaft im Eigenschaftensystem, und stellt sicher, dass die Vererbung von Eigenschaftswerten über alle hinweg in einer Elementstruktur funktioniert.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-366">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="fa9b3-367">Verwenden Sie immer <xref:System.Windows.DependencyProperty.RegisterAttached%2A> zum Registrieren von Eigenschaften in dem Sie angeben <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in den Metadaten.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-367">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="fa9b3-368">Weitere Informationen finden Sie unter [Vererbung von Eigenschaftswerten](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="fa9b3-368">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member RegisterAttached : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.RegisterAttached (name, propertyType, ownerType, defaultMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="fa9b3-369">Der Name der zu registrierenden Abhängigkeitseigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-369">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="fa9b3-370">Den Typ der Eigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-370">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="fa9b3-371">Der Besitzertyp, von dem die Abhängigkeitseigenschaft registriert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-371">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="defaultMetadata">
          <span data-ttu-id="fa9b3-372">Eigenschaftenmetadaten für die Abhängigkeitseigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-372">Property metadata for the dependency property.</span>
          </span>
          <span data-ttu-id="fa9b3-373">Dies kann den Standardwert sowie andere Merkmale einschließen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-373">This can include the default value as well as other characteristics.</span>
          </span>
        </param>
        <param name="validateValueCallback">
          <span data-ttu-id="fa9b3-374">Ein Verweis auf einen Rückruf, der eine beliebige benutzerdefinierte Validierung des Werts der Abhängigkeitseigenschaft über die normale Validierung hinaus durchführen soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-374">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa9b3-375">Registriert eine angefügte Eigenschaft mit dem angegebenen Eigenschaftstyp, Besitzertyp, den angegebenen Eigenschaftsmetadaten und dem angegebenen Wertvalidierungsrückruf für die Eigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-375">Registers an attached property with the specified property type, owner type, property metadata, and value validation callback for the property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa9b3-376">Ein Bezeichner für eine Abhängigkeitseigenschaft, der zum Festlegen des Werts für ein <see langword="public static readonly" />-Feld in der Klasse verwendet werden sollte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-376">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="fa9b3-377">Dieser Bezeichner wird dann später in Vorgängen (z. B. beim programmgesteuerten Festlegen des Werts oder beim Abrufen von Metadaten) zum Verweisen auf die Abhängigkeitseigenschaft verwendet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-377">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa9b3-378">Eine angefügte Eigenschaft ist ein Eigenschaftenkonzept von definierten [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="fa9b3-378">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="fa9b3-379"> implementiert angefügte Eigenschaften als Abhängigkeitseigenschaften an.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-379"> implements attached properties as dependency properties.</span></span> <span data-ttu-id="fa9b3-380">Da die [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] angefügte Eigenschaften sind Abhängigkeitseigenschaften handelt, können Metadaten auf Sie angewendet werden, die vom allgemeinen Eigenschaftensystem für Vorgänge wie die Layoutmerkmale reporting verwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-380">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="fa9b3-381">Weitere Informationen finden Sie unter [Übersicht über angefügte Eigenschaften](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="fa9b3-381">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="fa9b3-382">Weitere Informationen zur Registrierung von Abhängigkeitseigenschaften finden Sie unter <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-382">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="fa9b3-383">Verwendung von RegisterAttached für Abhängigkeitseigenschaften erben</span><span class="sxs-lookup"><span data-stu-id="fa9b3-383">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="fa9b3-384">Ein bestimmtes Szenario für eine Abhängigkeitseigenschaft mit <xref:System.Windows.DependencyProperty.RegisterAttached%2A> anstelle von <xref:System.Windows.DependencyProperty.Register%2A> dient zur Unterstützung von Vererbung von Eigenschaftswerten.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-384">One particular scenario for registering a dependency property with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="fa9b3-385">Registrieren Sie erben von Abhängigkeitseigenschaften mit <xref:System.Windows.DependencyProperty.RegisterAttached%2A> , auch wenn die Klasse definiert, die die Abhängigkeitseigenschaft verfügbar zu machen und selbst wenn Sie nicht beabsichtigen, Get * "und" Set * statische Methoden zur Bereitstellung verfügbar zu machen "true" angefügt. Unterstützung für Eigenschaftenaccessoren.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-385">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="fa9b3-386">Obwohl die Vererbung von Eigenschaftswerten bei nicht angefügten Abhängigkeitseigenschaften zu funktionieren scheint, ist das Vererbungsverhalten einer nicht angefügten Eigenschaft über bestimmte Elementgrenzen in der Common Language Runtime-Struktur nicht definiert.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-386">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="fa9b3-387">Registrieren der Eigenschaft als effektiv angefügt wird die angefügte Eigenschaft eine globale Eigenschaft im Eigenschaftensystem, und stellt sicher, dass die Vererbung von Eigenschaftswerten über alle hinweg in einer Elementstruktur funktioniert.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-387">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="fa9b3-388">Verwenden Sie immer <xref:System.Windows.DependencyProperty.RegisterAttached%2A> zum Registrieren von Eigenschaften in dem Sie angeben <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in den Metadaten.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-388">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="fa9b3-389">Weitere Informationen finden Sie unter [Vererbung von Eigenschaftswerten](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="fa9b3-389">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa9b3-390">Das folgende Beispiel registriert eine angefügte Eigenschaft für eine abstrakte Klasse, die mit diesem <xref:System.Windows.DependencyProperty.RegisterAttached%2A> Signatur.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-390">The following example registers an attached property on an abstract class using this <xref:System.Windows.DependencyProperty.RegisterAttached%2A> signature.</span></span> <span data-ttu-id="fa9b3-391">Diese angefügte Eigenschaft ist eine Enumeration Type-Eigenschaft, und die Registrierung Fügt einen Validierungsrückruf, um sicherzustellen, dass der angegebene Wert den Wert der Enumeration ist.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-391">This attached property is an enumeration type property, and the registration adds a validation callback to verify that the provided value is a value of the enumeration.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]
 [!code-vb[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterAttachedReadOnly">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fa9b3-392">Registriert eine schreibgeschützte angefügte Eigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-392">Registers a read-only attached property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterAttachedReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterAttachedReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttachedReadOnly (name As String, propertyType As Type, ownerType As Type, defaultMetadata As PropertyMetadata) As DependencyPropertyKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterAttachedReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata);" />
      <MemberSignature Language="F#" Value="static member RegisterAttachedReadOnly : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterAttachedReadOnly (name, propertyType, ownerType, defaultMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="fa9b3-393">Der Name der zu registrierenden Abhängigkeitseigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-393">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="fa9b3-394">Den Typ der Eigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-394">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="fa9b3-395">Der Besitzertyp, von dem die Abhängigkeitseigenschaft registriert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-395">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="defaultMetadata">
          <span data-ttu-id="fa9b3-396">Eigenschaftenmetadaten für die Abhängigkeitseigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-396">Property metadata for the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa9b3-397">Registriert eine schreibgeschützte angefügte Eigenschaft mit dem angegebenen Eigenschaftstyp und Besitzertyp sowie den angegebenen Eigenschaftsmetadaten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-397">Registers a read-only attached property, with the specified property type, owner type, and property metadata.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa9b3-398">Ein Schlüssel für eine Abhängigkeitseigenschaft, der zum Festlegen des Werts für ein statisches schreibgeschütztes Feld in der Klasse verwendet werden sollte. Mit diesem wird dann später auf die Abhängigkeitseigenschaft verwiesen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-398">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa9b3-399">Diese Methode gibt den Typ zurück <xref:System.Windows.DependencyPropertyKey>hingegen <xref:System.Windows.DependencyProperty.RegisterAttached%2A> gibt den Typ zurück <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-399">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="fa9b3-400">In der Regel die Schlüssel, die schreibgeschützten Eigenschaften darstellen sind nicht öffentlich gemacht, da der Schlüssel verwendet werden können, Festlegen des Werts der Abhängigkeitseigenschaft durch Aufrufen von <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-400">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="fa9b3-401">Ihr Klassenentwurf wirkt sich Ihre Anforderungen, jedoch wird allgemein empfohlen, beschränken den Zugriff und die Sichtbarkeit aller <xref:System.Windows.DependencyPropertyKey> , nur die Teile des Codes, die die Abhängigkeitseigenschaft als Teil der Klasse oder die Anwendung Logik festgelegt sind.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-401">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="fa9b3-402">Es wird empfohlen, dass Sie Bezeichner einer Abhängigkeitseigenschaft für die schreibgeschützte Abhängigkeitseigenschaft verfügbar machen, indem der Wert von <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> als eine `public static readonly` Feld in Ihrer Klasse auf.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-402">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="fa9b3-403">Schreibgeschützte angefügte Eigenschaften sind Szenario selten vorkommt, da das primäre Szenario für eine angefügte Eigenschaft mit der Verwendung in der ist [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="fa9b3-403">Read-only attached properties are a rare scenario, because the primary scenario for an attached property is its use in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span> <span data-ttu-id="fa9b3-404">Ohne einen öffentlichen Setter, kann keine angefügte Eigenschaft festgelegt werden [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Syntax.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-404">Without a public setter, an attached property cannot be set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="fa9b3-405">Weitere Informationen zur Registrierung von Abhängigkeitseigenschaften finden Sie unter <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-405">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="fa9b3-406">Verwendung von RegisterAttached für Abhängigkeitseigenschaften erben</span><span class="sxs-lookup"><span data-stu-id="fa9b3-406">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="fa9b3-407">Ein bestimmtes Szenario für eine Abhängigkeitseigenschaft als zur Unterstützung der Vererbung von Eigenschaftswerten ist angefügt.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-407">One particular scenario for registering a dependency property as attached is to support property value inheritance.</span></span> <span data-ttu-id="fa9b3-408">Registrieren Sie erben von Abhängigkeitseigenschaften mit <xref:System.Windows.DependencyProperty.RegisterAttached%2A> , auch wenn die Klasse definiert, die die Abhängigkeitseigenschaft verfügbar zu machen und selbst wenn Sie nicht beabsichtigen, Get * "und" Set * statische Methoden zur Bereitstellung verfügbar zu machen "true" angefügt. Unterstützung für Eigenschaftenaccessoren.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-408">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="fa9b3-409">Obwohl die Vererbung von Eigenschaftswerten bei nicht angefügten Abhängigkeitseigenschaften zu funktionieren scheint, ist das Vererbungsverhalten einer nicht angefügten Eigenschaft über bestimmte Elementgrenzen in der Common Language Runtime-Struktur nicht definiert.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-409">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="fa9b3-410">Registrieren der Eigenschaft als effektiv angefügt wird die angefügte Eigenschaft eine globale Eigenschaft im Eigenschaftensystem, und stellt sicher, dass die Vererbung von Eigenschaftswerten über alle hinweg in einer Elementstruktur funktioniert.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-410">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="fa9b3-411">Verwenden Sie immer <xref:System.Windows.DependencyProperty.RegisterAttached%2A> zum Registrieren von Eigenschaften in dem Sie angeben <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in den Metadaten.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-411">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="fa9b3-412">Weitere Informationen finden Sie unter [Vererbung von Eigenschaftswerten](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="fa9b3-412">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterAttachedReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterAttachedReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterAttachedReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member RegisterAttachedReadOnly : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterAttachedReadOnly (name, propertyType, ownerType, defaultMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="fa9b3-413">Der Name der zu registrierenden Abhängigkeitseigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-413">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="fa9b3-414">Den Typ der Eigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-414">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="fa9b3-415">Der Besitzertyp, von dem die Abhängigkeitseigenschaft registriert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-415">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="defaultMetadata">
          <span data-ttu-id="fa9b3-416">Eigenschaftenmetadaten für die Abhängigkeitseigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-416">Property metadata for the dependency property.</span>
          </span>
        </param>
        <param name="validateValueCallback">
          <span data-ttu-id="fa9b3-417">Ein Verweis auf einen benutzerdefinierten Rückruf, der eine beliebige benutzerdefinierte Validierung des Werts der Abhängigkeitseigenschaft über die normale Validierung hinaus durchführen soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-417">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa9b3-418">Registriert eine schreibgeschützte Eigenschaft mit dem angegebenen Eigenschaftstyp, Besitzertyp, den angegebenen Eigenschaftsmetadaten und einem Validierungsrückruf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-418">Registers a read-only attached property, with the specified property type, owner type, property metadata, and a validation callback.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa9b3-419">Ein Abhängigkeitseigenschaftsschlüssel, der dazu verwendet werden soll, den Wert eines statischen schreibgeschützten Felds in Ihrer Klasse festzulegen, die dann dazu verwendet wird, auf die Abhängigkeitseigenschaft zu verweisen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-419">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa9b3-420">Diese Methode gibt den Typ zurück <xref:System.Windows.DependencyPropertyKey>hingegen <xref:System.Windows.DependencyProperty.RegisterAttached%2A> gibt den Typ zurück <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-420">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="fa9b3-421">In der Regel die Schlüssel, die den darstellen <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-421">Typically, the keys that represent the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="fa9b3-422">In der Regel die Schlüssel, die schreibgeschützten Eigenschaften darstellen sind nicht öffentlich gemacht, da der Schlüssel verwendet werden können, Festlegen des Werts der Abhängigkeitseigenschaft durch Aufrufen von <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-422">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="fa9b3-423">Ihr Klassenentwurf wirkt sich Ihre Anforderungen, jedoch wird allgemein empfohlen, beschränken den Zugriff und die Sichtbarkeit aller <xref:System.Windows.DependencyPropertyKey> , nur die Teile des Codes, die die Abhängigkeitseigenschaft als Teil der Klasse oder die Anwendung Logik festgelegt sind.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-423">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="fa9b3-424">Es wird empfohlen, dass Sie Bezeichner einer Abhängigkeitseigenschaft für die schreibgeschützte Abhängigkeitseigenschaft verfügbar machen, indem der Wert von <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> als eine `public static readonly` Feld in Ihrer Klasse auf.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-424">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="fa9b3-425">Schreibgeschützte angefügte Eigenschaften sind Szenario selten vorkommt, da das primäre Szenario für eine angefügte Eigenschaft mit der Verwendung in der ist [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="fa9b3-425">Read-only attached properties are a rare scenario, because the primary scenario for an attached property is its use in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span> <span data-ttu-id="fa9b3-426">Ohne einen öffentlichen Setter, kann keine angefügte Eigenschaft festgelegt werden [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Syntax.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-426">Without a public setter, an attached property cannot be set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="fa9b3-427">Weitere Informationen zur Registrierung von Abhängigkeitseigenschaften finden Sie unter <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-427">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="fa9b3-428">Verwendung von RegisterAttached für Abhängigkeitseigenschaften erben</span><span class="sxs-lookup"><span data-stu-id="fa9b3-428">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="fa9b3-429">Ein bestimmtes Szenario für eine Abhängigkeitseigenschaft registrieren, wie anstelle von angeschlossenen <xref:System.Windows.DependencyProperty.Register%2A> dient zur Unterstützung von Vererbung von Eigenschaftswerten.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-429">One particular scenario for registering a dependency property as attached instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="fa9b3-430">Registrieren Sie erben von Abhängigkeitseigenschaften mit <xref:System.Windows.DependencyProperty.RegisterAttached%2A> , auch wenn die Klasse definiert, die die Abhängigkeitseigenschaft verfügbar zu machen und selbst wenn Sie nicht beabsichtigen, Get * "und" Set * statische Methoden zur Bereitstellung verfügbar zu machen "true" angefügt. Unterstützung für Eigenschaftenaccessoren.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-430">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="fa9b3-431">Obwohl die Vererbung von Eigenschaftswerten bei nicht angefügten Abhängigkeitseigenschaften zu funktionieren scheint, ist das Vererbungsverhalten einer nicht angefügten Eigenschaft über bestimmte Elementgrenzen in der Common Language Runtime-Struktur nicht definiert.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-431">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="fa9b3-432">Registrieren der Eigenschaft als effektiv angefügt wird die angefügte Eigenschaft eine globale Eigenschaft im Eigenschaftensystem, und stellt sicher, dass die Vererbung von Eigenschaftswerten über alle hinweg in einer Elementstruktur funktioniert.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-432">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="fa9b3-433">Verwenden Sie immer <xref:System.Windows.DependencyProperty.RegisterAttached%2A> zum Registrieren von Eigenschaften in dem Sie angeben <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in den Metadaten.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-433">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="fa9b3-434">Weitere Informationen finden Sie unter [Vererbung von Eigenschaftswerten](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="fa9b3-434">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterReadOnly">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fa9b3-435">Registriert eine Abhängigkeitseigenschaft als schreibgeschützte Abhängigkeitseigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-435">Registers a dependency property as a read-only dependency property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterReadOnly (name As String, propertyType As Type, ownerType As Type, typeMetadata As PropertyMetadata) As DependencyPropertyKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="static member RegisterReadOnly : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterReadOnly (name, propertyType, ownerType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="fa9b3-436">Der Name der zu registrierenden Abhängigkeitseigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-436">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="fa9b3-437">Den Typ der Eigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-437">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="fa9b3-438">Der Besitzertyp, von dem die Abhängigkeitseigenschaft registriert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-438">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="fa9b3-439">Eigenschaftenmetadaten für die Abhängigkeitseigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-439">Property metadata for the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa9b3-440">Registriert eine schreibgeschützte Abhängigkeitseigenschaft mit dem angegebenen Eigenschaftstyp und Besitzertyp sowie den angegebenen Eigenschaftsmetadaten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-440">Registers a read-only dependency property, with the specified property type, owner type, and property metadata.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa9b3-441">Ein Abhängigkeitseigenschaftsschlüssel, der dazu verwendet werden soll, den Wert eines statischen schreibgeschützten Felds in Ihrer Klasse festzulegen, die dann dazu verwendet wird, auf die Abhängigkeitseigenschaft zu verweisen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-441">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa9b3-442">Diese Methode gibt den Typ zurück <xref:System.Windows.DependencyPropertyKey>hingegen <xref:System.Windows.DependencyProperty.RegisterAttached%2A> gibt den Typ zurück <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-442">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="fa9b3-443">In der Regel die Schlüssel, die schreibgeschützten Eigenschaften darstellen sind nicht öffentlich gemacht, da der Schlüssel verwendet werden können, Festlegen des Werts der Abhängigkeitseigenschaft durch Aufrufen von <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-443">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="fa9b3-444">Ihr Klassenentwurf wirkt sich Ihre Anforderungen, jedoch wird allgemein empfohlen, beschränken den Zugriff und die Sichtbarkeit aller <xref:System.Windows.DependencyPropertyKey> , nur die Teile des Codes, die die Abhängigkeitseigenschaft als Teil der Klasse oder die Anwendung Logik festgelegt sind.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-444">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="fa9b3-445">Es wird empfohlen, dass Sie Bezeichner einer Abhängigkeitseigenschaft für die schreibgeschützte Abhängigkeitseigenschaft verfügbar machen, indem der Wert von <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> als eine `public static readonly` Feld in Ihrer Klasse auf.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-445">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="fa9b3-446">Schreibgeschützte Abhängigkeitseigenschaften sind ein ziemlich typischen Fall sowohl in der vorhandenen [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] und Szenarios für das Anpassen, da andere [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Features möglicherweise eine Abhängigkeitseigenschaft, auch wenn diese Eigenschaft nicht festgelegt werden, indem sein soll Aufrufer.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-446">Read-only dependency properties are a fairly typical scenario both in the existing [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] and for customization scenarios, because other [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features might require a dependency property even if that property is not intended to be settable by callers.</span></span> <span data-ttu-id="fa9b3-447">Können Sie den Wert einer schreibgeschützten Abhängigkeitseigenschaft als Grundlage für andere Systemoperationen, die eine Abhängigkeitseigenschaft, wie z. B. der Basis einer <xref:System.Windows.Trigger> für die Abhängigkeitseigenschaft in einem Stil.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-447">You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a <xref:System.Windows.Trigger> on the dependency property in a style.</span></span>  
  
 <span data-ttu-id="fa9b3-448">Weitere Informationen zur Registrierung von Abhängigkeitseigenschaften finden Sie unter <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-448">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa9b3-449">Das folgende Beispiel registriert eine `AquariumSize` Abhängigkeitseigenschaft als schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-449">The following example registers an `AquariumSize` dependency property as read-only.</span></span> <span data-ttu-id="fa9b3-450">Das Beispiel definiert `AquariumSizeKey` als einen internen Schlüssel (also, dass andere Klassen in der Assembly konnte Metadaten überschreiben) und der Bezeichner der Abhängigkeitseigenschaft auf der Grundlage dieses Schlüssels als macht `AquariumSizeProperty`.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-450">The example defines `AquariumSizeKey` as an internal key (so that other classes in the assembly could override metadata) and exposes the dependency property identifier based on that key as `AquariumSizeProperty`.</span></span> <span data-ttu-id="fa9b3-451">Darüber hinaus wird ein Wrapper für erstellt `AquariumSize`, mit nur einem Get-Accessor.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-451">Also, a wrapper is created for `AquariumSize`, with only a get accessor.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member RegisterReadOnly : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterReadOnly (name, propertyType, ownerType, typeMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="fa9b3-452">Der Name der zu registrierenden Abhängigkeitseigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-452">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="fa9b3-453">Den Typ der Eigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-453">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="fa9b3-454">Der Besitzertyp, von dem die Abhängigkeitseigenschaft registriert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-454">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="fa9b3-455">Eigenschaftenmetadaten für die Abhängigkeitseigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-455">Property metadata for the dependency property.</span>
          </span>
        </param>
        <param name="validateValueCallback">
          <span data-ttu-id="fa9b3-456">Ein Verweis auf einen benutzerdefinierten Rückruf, der eine beliebige benutzerdefinierte Validierung des Werts der Abhängigkeitseigenschaft über die normale Validierung hinaus durchführen soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-456">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa9b3-457">Registriert eine schreibgeschützte Abhängigkeitseigenschaft mit dem angegebenen Eigenschaftstyp, Besitzertyp, den angegebenen Eigenschaftsmetadaten und einem Validierungsrückruf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-457">Registers a read-only dependency property, with the specified property type, owner type, property metadata, and a validation callback.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa9b3-458">Ein Schlüssel für eine Abhängigkeitseigenschaft, der zum Festlegen des Werts für ein statisches schreibgeschütztes Feld in der Klasse verwendet werden sollte. Mit diesem wird dann später auf die Abhängigkeitseigenschaft verwiesen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-458">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa9b3-459">Diese Methode gibt den Typ zurück <xref:System.Windows.DependencyPropertyKey>hingegen <xref:System.Windows.DependencyProperty.RegisterAttached%2A> gibt den Typ zurück <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-459">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="fa9b3-460">In der Regel die Schlüssel, die schreibgeschützten Eigenschaften darstellen sind nicht öffentlich gemacht, da der Schlüssel verwendet werden können, Festlegen des Werts der Abhängigkeitseigenschaft durch Aufrufen von <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-460">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="fa9b3-461">Ihr Klassenentwurf wirkt sich Ihre Anforderungen, jedoch wird allgemein empfohlen, beschränken den Zugriff und die Sichtbarkeit aller <xref:System.Windows.DependencyPropertyKey> , nur die Teile des Codes, die die Abhängigkeitseigenschaft als Teil der Klasse oder die Anwendung Logik festgelegt sind.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-461">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="fa9b3-462">Es wird empfohlen, dass Sie Bezeichner einer Abhängigkeitseigenschaft für die schreibgeschützte Abhängigkeitseigenschaft verfügbar machen, indem der Wert von <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> als eine `public static readonly` Feld in Ihrer Klasse auf.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-462">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="fa9b3-463">Schreibgeschützte Abhängigkeitseigenschaften sind ziemlich üblich.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-463">Read-only dependency properties are a fairly typical scenario.</span></span> <span data-ttu-id="fa9b3-464">Können Sie den Wert einer schreibgeschützten Abhängigkeitseigenschaft als Grundlage für andere Systemoperationen, die eine Abhängigkeitseigenschaft, wie z. B. der Basis einer <xref:System.Windows.Trigger> für die Abhängigkeitseigenschaft in einem Stil.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-464">You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a <xref:System.Windows.Trigger> on the dependency property in a style.</span></span>  
  
 <span data-ttu-id="fa9b3-465">Weitere Informationen zur Registrierung von Abhängigkeitseigenschaften finden Sie unter <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-465">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
 <span data-ttu-id="fa9b3-466">Überprüfung für eine schreibgeschützte Abhängigkeitseigenschaft möglicherweise weniger wichtig.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-466">Validation on a read-only dependency property might be less important.</span></span> <span data-ttu-id="fa9b3-467">Die nicht öffentliche Zugriffsebene, die Sie für den Schlüssel angeben, verringert die Wahrscheinlichkeit für den beliebigen ungültige Eingabe.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-467">The nonpublic access level you specify for the key reduces the likelihood for arbitrary invalid input.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dependencyProperty.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="fa9b3-468">Gibt die Zeichenfolgendarstellung der Abhängigkeitseigenschaft zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-468">Returns the string representation of the dependency property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa9b3-469">Die Zeichenfolgendarstellung der Abhängigkeitseigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-469">The string representation of the dependency property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa9b3-470">Diese Implementierung gibt die <xref:System.Windows.DependencyProperty.Name%2A> -Eigenschaftswert.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-470">This implementation returns the <xref:System.Windows.DependencyProperty.Name%2A> property value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.DependencyProperty.Name" />
      </Docs>
    </Member>
    <Member MemberName="UnsetValue">
      <MemberSignature Language="C#" Value="public static readonly object UnsetValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object UnsetValue" />
      <MemberSignature Language="DocId" Value="F:System.Windows.DependencyProperty.UnsetValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnsetValue As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ UnsetValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnsetValue : obj" Usage="System.Windows.DependencyProperty.UnsetValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fa9b3-471">Gibt einen statischen Wert an, der vom [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]-Eigenschaftensystem verwendet wird, und nicht <see langword="null" />, um anzugeben, dass die Eigenschaft vorhanden ist, der Wert jedoch nicht vom Eigenschaftensystem festgelegt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-471">Specifies a static value that is used by the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system rather than <see langword="null" /> to indicate that the property exists, but does not have its value set by the property system.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa9b3-472"><xref:System.Windows.DependencyProperty.UnsetValue> ist ein Sentinelwert, die für Szenarien verwendet wird, in denen die [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] ist nicht möglich, um eine angeforderte zu bestimmen, <xref:System.Windows.DependencyProperty> Wert.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-472"><xref:System.Windows.DependencyProperty.UnsetValue> is a sentinel value that is used for scenarios where the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system is unable to determine a requested <xref:System.Windows.DependencyProperty> value.</span></span> <span data-ttu-id="fa9b3-473"><xref:System.Windows.DependencyProperty.UnsetValue> wird verwendet, statt `null`, da `null` möglicherweise einen gültigen Eigenschaftswert als auch einen gültigen (und häufig verwendete) <xref:System.Windows.PropertyMetadata.DefaultValue%2A>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-473"><xref:System.Windows.DependencyProperty.UnsetValue> is used rather than `null`, because `null` could be a valid property value, as well as a valid (and frequently used) <xref:System.Windows.PropertyMetadata.DefaultValue%2A>.</span></span>  
  
 <span data-ttu-id="fa9b3-474"><xref:System.Windows.DependencyProperty.UnsetValue> wird niemals zurückgegeben, von <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-474"><xref:System.Windows.DependencyProperty.UnsetValue> is never returned out of <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="fa9b3-475">Beim Aufruf <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType> für eine Abhängigkeitseigenschaft auf einem <xref:System.Windows.DependencyObject> Instanz angewendet wird, eine der folgenden:</span><span class="sxs-lookup"><span data-stu-id="fa9b3-475">When you call <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType> on a dependency property on a <xref:System.Windows.DependencyObject> instance, one of the following applies:</span></span>  
  
-   <span data-ttu-id="fa9b3-476">Eine Abhängigkeitseigenschaft hat den Standardwert, der in den Metadaten eingerichtet, und dieser Wert wird zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-476">A dependency property has a default value established in metadata and that value is returned.</span></span> <span data-ttu-id="fa9b3-477">Dieser Wert kann aus stammen <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-477">This value might come from <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
-   <span data-ttu-id="fa9b3-478">Ein anderer Wert vom Eigenschaftensystem hergestellt wurde, und der Standardwert ist nicht mehr relevant.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-478">Some other value was established by the property system, and the default value is no longer relevant.</span></span> <span data-ttu-id="fa9b3-479">Weitere Informationen finden Sie unter [Priorität von Abhängigkeitseigenschaftswerten](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="fa9b3-479">For details, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="fa9b3-480">Festlegen einer <xref:System.Windows.PropertyMetadata.DefaultValue%2A> von <xref:System.Windows.DependencyProperty.UnsetValue> ist ausdrücklich nicht zulässig.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-480">Setting a <xref:System.Windows.PropertyMetadata.DefaultValue%2A> of <xref:System.Windows.DependencyProperty.UnsetValue> is specifically disallowed.</span></span>  
  
 <span data-ttu-id="fa9b3-481"><xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=nameWithType> Gibt <xref:System.Windows.DependencyProperty.UnsetValue> Wenn die angeforderte Eigenschaft nicht lokal festgelegt wurde.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-481"><xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=nameWithType> returns <xref:System.Windows.DependencyProperty.UnsetValue> when the requested property has not been locally set.</span></span>  
  
 <span data-ttu-id="fa9b3-482"><xref:System.Windows.DependencyProperty.UnsetValue> hat eine besondere Bedeutung, bei Verwendung als den Rückgabewert einer <xref:System.Windows.CoerceValueCallback>.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-482"><xref:System.Windows.DependencyProperty.UnsetValue> has a special meaning when used as the return value of a <xref:System.Windows.CoerceValueCallback>.</span></span> <span data-ttu-id="fa9b3-483">Weitere Informationen finden Sie unter [Abhängigkeitsrückrufe und Validierung von](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="fa9b3-483">For details, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
 <span data-ttu-id="fa9b3-484">Wenn Sie mit einer Datenbank binden, beachten Sie, dass <xref:System.Windows.DependencyProperty.UnsetValue> ist nicht gleichbedeutend mit <xref:System.DBNull.Value>, auf ähnliche Weise wie <xref:System.DBNull.Value> ist nicht gleichbedeutend mit dem ein NULL-Wert "true".</span><span class="sxs-lookup"><span data-stu-id="fa9b3-484">If you are binding to a database, note that <xref:System.Windows.DependencyProperty.UnsetValue> is not equivalent to <xref:System.DBNull.Value>, in a similar way to how <xref:System.DBNull.Value> is not equivalent to a true null.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateValueCallback">
      <MemberSignature Language="C#" Value="public System.Windows.ValidateValueCallback ValidateValueCallback { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ValidateValueCallback ValidateValueCallback" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.ValidateValueCallback" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValidateValueCallback As ValidateValueCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ValidateValueCallback ^ ValidateValueCallback { System::Windows::ValidateValueCallback ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValidateValueCallback : System.Windows.ValidateValueCallback" Usage="System.Windows.DependencyProperty.ValidateValueCallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.ValidateValueCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fa9b3-485">Ruft den Wertvalidierungsrückruf für die Abhängigkeitseigenschaft ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-485">Gets the value validation callback for the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fa9b3-486">Der Wertvalidierungsrückruf für diese Abhängigkeitseigenschaft, wie für den <paramref name="validateValueCallback" />-Parameter in der ursprünglichen Registrierung der Abhängigkeitseigenschaft angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa9b3-486">The value validation callback for this dependency property, as provided for the <paramref name="validateValueCallback" /> parameter in the original dependency property registration.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa9b3-487">Enthält diese Eigenschaft `null` für jede Abhängigkeitseigenschaft keine registrierten Validierungsrückruf.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-487">This property will contain `null` for any dependency property with no registered validation callback.</span></span>  
  
 <span data-ttu-id="fa9b3-488">Wert Rückrufe in gewisser statische fungieren müssen überprüfen: Überprüfung angewendet wird, über die <xref:System.Windows.ValidateValueCallback> kann nicht bestimmt werden, ob der angegebene Wert für eine bestimmte Instanz gültig ist.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-488">Validate value callbacks must act in a static sense: validation applied through the <xref:System.Windows.ValidateValueCallback> cannot determine whether the provided value is valid for any particular instance.</span></span> <span data-ttu-id="fa9b3-489">Der Rückruf kann nur bestimmen, ob alle Objekte, die die Abhängigkeitseigenschaft besitzt oder sollte nicht den angegebenen Wert als gültig akzeptieren soll.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-489">The callback can only determine whether all objects that possess the dependency property should or should not accept the provided value as valid.</span></span> <span data-ttu-id="fa9b3-490">Wenn Sie für die Validierung, die bekannt sein die Werte der anderen Abhängigkeitseigenschaften für eine bestimmte Instanz verwenden müssen müssen eine <xref:System.Windows.CoerceValueCallback> stattdessen.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-490">If you need to perform validation that relies on knowing the values of other dependency properties on a particular instance, use a <xref:System.Windows.CoerceValueCallback> instead.</span></span> <span data-ttu-id="fa9b3-491">Die <xref:System.Windows.CoerceValueCallback> als Teil der Metadaten für Abhängigkeitseigenschaften, anstatt direkt in der Bezeichner der Abhängigkeitseigenschaft registriert ist.</span><span class="sxs-lookup"><span data-stu-id="fa9b3-491">The <xref:System.Windows.CoerceValueCallback> is registered as part of dependency property metadata, rather than directly within the dependency property identifier.</span></span> <span data-ttu-id="fa9b3-492">Weitere Informationen finden Sie unter [Abhängigkeitsrückrufe und Validierung von](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="fa9b3-492">For details, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.ValidateValueCallback" />
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="DependencyObject" FullName="System.Windows.DependencyObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6023396816c2ce384f3a4bba180bad7392c9134f" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73331141" /></Metadata><TypeSignature Language="C#" Value="public class DependencyObject : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DependencyObject extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyObject" />
  <TypeSignature Language="VB.NET" Value="Public Class DependencyObject&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyObject : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type DependencyObject = class&#xA;    inherit DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.TypeDescriptionProvider(typeof(MS.Internal.ComponentModel.DependencyObjectProvider))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Windows.Markup.NameScopeProperty("NameScope", typeof(System.Windows.NameScope))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f52a1-101">Stellt ein Objekt dar, das im Abhängigkeitseigenschaftensystem teilnimmt.</span><span class="sxs-lookup"><span data-stu-id="f52a1-101">Represents an object that participates in the dependency property system.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f52a1-102">Die <xref:System.Windows.DependencyObject>-Klasse ermöglicht die [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]-Eigenschaften Systemdienste für viele abgeleitete Klassen.</span><span class="sxs-lookup"><span data-stu-id="f52a1-102">The <xref:System.Windows.DependencyObject> class enables [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] property system services on its many derived classes.</span></span>  
  
 <span data-ttu-id="f52a1-103">Die primäre Funktion des Eigenschaften Systems ist, die Werte von Eigenschaften zu berechnen und System Benachrichtigungen über geänderte Werte bereitzustellen.</span><span class="sxs-lookup"><span data-stu-id="f52a1-103">The property system's primary function is to compute the values of properties, and to provide system notification about values that have changed.</span></span> <span data-ttu-id="f52a1-104">Eine andere Schlüssel Klasse, die am Eigenschaften System teilnimmt, ist <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="f52a1-104">Another key class that participates in the property system is <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="f52a1-105">mit <xref:System.Windows.DependencyProperty> können Abhängigkeits Eigenschaften im Eigenschaften System registriert werden, und es werden Identifizierungs-und Informations Informationen zu den einzelnen Abhängigkeits Eigenschaften bereitstellt, während <xref:System.Windows.DependencyObject> als Basisklasse die Verwendung der Abhängigkeits Eigenschaften durch die Objekte ermöglicht.</span><span class="sxs-lookup"><span data-stu-id="f52a1-105"><xref:System.Windows.DependencyProperty> enables the registration of dependency properties into the property system, and provides identification and information about each dependency property, whereas <xref:System.Windows.DependencyObject> as a base class enables objects to use the dependency properties.</span></span>  
  
 <span data-ttu-id="f52a1-106"><xref:System.Windows.DependencyObject>-Dienste und-Merkmale umfassen Folgendes:</span><span class="sxs-lookup"><span data-stu-id="f52a1-106"><xref:System.Windows.DependencyObject> services and characteristics include the following:</span></span>  
  
-   <span data-ttu-id="f52a1-107">Unterstützung für Abhängigkeits Eigenschaften Hosting.</span><span class="sxs-lookup"><span data-stu-id="f52a1-107">Dependency property hosting support.</span></span> <span data-ttu-id="f52a1-108">Sie registrieren eine Abhängigkeits Eigenschaft, indem Sie die <xref:System.Windows.DependencyProperty.Register%2A>-Methode aufrufen und den Rückgabewert der Methode als öffentliches statisches Feld in der Klasse speichern.</span><span class="sxs-lookup"><span data-stu-id="f52a1-108">You register a dependency property by calling the <xref:System.Windows.DependencyProperty.Register%2A> method, and storing the method's return value as a public static field in your class.</span></span>  
  
-   <span data-ttu-id="f52a1-109">Unterstützung für angefügte Eigenschaften Hosting.</span><span class="sxs-lookup"><span data-stu-id="f52a1-109">Attached property hosting support.</span></span> <span data-ttu-id="f52a1-110">Sie registrieren eine angefügte Eigenschaft, indem Sie die <xref:System.Windows.DependencyProperty.RegisterAttached%2A>-Methode aufrufen und den Rückgabewert der Methode als öffentliches statisches Schreib geschütztes Feld in der Klasse speichern.</span><span class="sxs-lookup"><span data-stu-id="f52a1-110">You register an attached property by calling the <xref:System.Windows.DependencyProperty.RegisterAttached%2A> method, and storing the method's return value as a public static read-only field in your class.</span></span> <span data-ttu-id="f52a1-111">(Es gibt auch zusätzliche Member-Anforderungen. Beachten Sie, dass dies eine [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]-spezifische Implementierung für angefügte Eigenschaften darstellt.</span><span class="sxs-lookup"><span data-stu-id="f52a1-111">(There are also additional member requirements; note that this represents a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] specific implementation for attached properties.</span></span> <span data-ttu-id="f52a1-112">Weitere Informationen finden Sie unter [Übersicht über angefügte Eigenschaften](~/docs/framework/wpf/advanced/attached-properties-overview.md).) Die angefügte Eigenschaft kann dann für jede Klasse festgelegt werden, die von <xref:System.Windows.DependencyObject>abgeleitet ist.</span><span class="sxs-lookup"><span data-stu-id="f52a1-112">For details, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).) Your attached property can then be set on any class that derives from <xref:System.Windows.DependencyObject>.</span></span>  
  
-   <span data-ttu-id="f52a1-113">Get, Set und Clear Utility-Methoden für Werte aller Abhängigkeits Eigenschaften, die auf dem <xref:System.Windows.DependencyObject> vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="f52a1-113">Get, set, and clear utility methods for values of any dependency properties that exist on the <xref:System.Windows.DependencyObject>.</span></span>  
  
-   <span data-ttu-id="f52a1-114">Metadaten, coerce-Wert Unterstützung, Benachrichtigung über geänderte Eigenschaften und Überschreiben von Rückrufen für Abhängigkeits Eigenschaften oder angefügte Eigenschaften.</span><span class="sxs-lookup"><span data-stu-id="f52a1-114">Metadata, coerce value support, property changed notification, and override callbacks for  dependency properties or attached properties.</span></span> <span data-ttu-id="f52a1-115">Außerdem ermöglicht die <xref:System.Windows.DependencyObject>-Klasse die metadateneigenschaftenmetadaten für eine Abhängigkeits Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="f52a1-115">Also, the <xref:System.Windows.DependencyObject> class facilitates the per-owner property metadata for a dependency property.</span></span>  
  
-   <span data-ttu-id="f52a1-116">Eine allgemeine Basisklasse für Klassen, die von <xref:System.Windows.ContentElement>, <xref:System.Windows.Freezable> oder <xref:System.Windows.Media.Visual> abgeleitet werden.</span><span class="sxs-lookup"><span data-stu-id="f52a1-116">A common base class for classes derived from <xref:System.Windows.ContentElement>, <xref:System.Windows.Freezable>, or <xref:System.Windows.Media.Visual>.</span></span> <span data-ttu-id="f52a1-117">(<xref:System.Windows.UIElement>, eine andere Basiselement Klasse, verfügt über eine Klassenhierarchie, die <xref:System.Windows.Media.Visual> enthält.)</span><span class="sxs-lookup"><span data-stu-id="f52a1-117">(<xref:System.Windows.UIElement>, another base element class, has a class hierarchy that includes <xref:System.Windows.Media.Visual>.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f52a1-118">Im folgenden Beispiel wird von <xref:System.Windows.DependencyObject> abgeleitet, um eine neue abstrakte Klasse zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="f52a1-118">The following example derives from <xref:System.Windows.DependencyObject> to create a new abstract class.</span></span> <span data-ttu-id="f52a1-119">Die Klasse registriert dann eine angefügte Eigenschaft und enthält Unterstützungs Member für diese angefügte Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="f52a1-119">The class then registers an attached property and includes support members for that attached property.</span></span>  
  
 [!code-csharp[WPFAquariumSln#DOMain](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#domain)]
 [!code-vb[WPFAquariumSln#DOMain](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#domain)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DependencyObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DependencyObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f52a1-120">Initialisiert eine neue Instanz der <see cref="T:System.Windows.DependencyObject" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="f52a1-120">Initializes a new instance of the <see cref="T:System.Windows.DependencyObject" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ClearValue">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f52a1-121">Löscht den lokalen Wert einer Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="f52a1-121">Clears the local value of a property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ClearValue">
      <MemberSignature Language="C#" Value="public void ClearValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearValue (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.ClearValue : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.ClearValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="f52a1-122">Die Abhängigkeitseigenschaft, deren Wert gelöscht werden soll, wird durch einen <see cref="T:System.Windows.DependencyProperty" />-Objektverweis identifiziert.</span><span class="sxs-lookup"><span data-stu-id="f52a1-122">The dependency property to be cleared, identified by a <see cref="T:System.Windows.DependencyProperty" /> object reference.</span></span></param>
        <summary><span data-ttu-id="f52a1-123">Löscht den lokalen Wert einer Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="f52a1-123">Clears the local value of a property.</span></span> <span data-ttu-id="f52a1-124">Die Eigenschaft, deren Wert gelöscht werden soll, wird durch einen <see cref="T:System.Windows.DependencyProperty" />-Bezeichner angegeben.</span><span class="sxs-lookup"><span data-stu-id="f52a1-124">The property to be cleared is specified by a <see cref="T:System.Windows.DependencyProperty" /> identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f52a1-125">Das Löschen des Eigenschafts Werts durch Aufrufen von <xref:System.Windows.DependencyObject.ClearValue%2A> weist nicht notwendigerweise eine Abhängigkeits Eigenschaft als Standardwert zu, der in den Metadaten der Abhängigkeits Eigenschaft angegeben ist.</span><span class="sxs-lookup"><span data-stu-id="f52a1-125">Clearing the property value by calling <xref:System.Windows.DependencyObject.ClearValue%2A> does not necessarily give a dependency property the default value that is specified in the dependency property metadata.</span></span> <span data-ttu-id="f52a1-126">Durch das Löschen der Eigenschaft wird lediglich der lokale Wert gelöscht, der möglicherweise angewendet wurde.</span><span class="sxs-lookup"><span data-stu-id="f52a1-126">Clearing the property only specifically clears whatever local value may have been applied.</span></span> <span data-ttu-id="f52a1-127">Weitere Informationen finden Sie unter [Priorität von Abhängigkeitseigenschaftswerten](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="f52a1-127">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f52a1-128">Im folgenden Beispiel werden alle Eigenschaften durchlaufen, für die lokale Werte für ein Objekt festgelegt sind, und dann <xref:System.Windows.DependencyObject.ClearValue%2A> aufgerufen, um die Werte der einzelnen Eigenschaften zu löschen.</span><span class="sxs-lookup"><span data-stu-id="f52a1-128">The following example iterates all properties that have local values set on an object, then calls <xref:System.Windows.DependencyObject.ClearValue%2A> to clear the values of each such property.</span></span>  
  
 [!code-csharp[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/csharp/VS_Snippets_Wpf/DPClearValue/CSharp/default.xaml.cs#iteratelocalvaluesandclear)]
 [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPClearValue/VisualBasic/default.xaml.vb#iteratelocalvaluesandclear)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f52a1-129">Es wurde versucht, <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> für ein versiegeltes <see cref="T:System.Windows.DependencyObject" /> aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="f52a1-129">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> on a sealed <see cref="T:System.Windows.DependencyObject" />.</span></span></exception>
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
        <altmember cref="P:System.Windows.DependencyObject.IsSealed" />
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="ClearValue">
      <MemberSignature Language="C#" Value="public void ClearValue (System.Windows.DependencyPropertyKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearValue(class System.Windows.DependencyPropertyKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearValue (key As DependencyPropertyKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearValue(System::Windows::DependencyPropertyKey ^ key);" />
      <MemberSignature Language="F#" Value="member this.ClearValue : System.Windows.DependencyPropertyKey -&gt; unit" Usage="dependencyObject.ClearValue key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="f52a1-130">Der Schlüssel für die Abhängigkeitseigenschaft, deren Wert gelöscht werden soll.</span><span class="sxs-lookup"><span data-stu-id="f52a1-130">The key for the dependency property to be cleared.</span></span></param>
        <summary><span data-ttu-id="f52a1-131">Löscht den lokalen Wert einer schreibgeschützten Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="f52a1-131">Clears the local value of a read-only property.</span></span> <span data-ttu-id="f52a1-132">Die Eigenschaft, deren Wert gelöscht werden soll, wird durch einen <see cref="T:System.Windows.DependencyPropertyKey" /> angegeben.</span><span class="sxs-lookup"><span data-stu-id="f52a1-132">The property to be cleared is specified by a <see cref="T:System.Windows.DependencyPropertyKey" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f52a1-133">Ein <xref:System.Windows.DependencyPropertyKey> identifiziert eine schreibgeschützte Abhängigkeits Eigenschaft für Eigenschaften System Vorgänge.</span><span class="sxs-lookup"><span data-stu-id="f52a1-133">A <xref:System.Windows.DependencyPropertyKey> identifies a read-only dependency property for property system operations.</span></span> <span data-ttu-id="f52a1-134">Klassen, die schreibgeschützte Abhängigkeits Eigenschaften definieren, sollten diesen Schlüssel nicht mit öffentlichem Zugriff verfügbar machen.</span><span class="sxs-lookup"><span data-stu-id="f52a1-134">Classes that define read-only dependency properties should not expose this key with public access.</span></span> <span data-ttu-id="f52a1-135">Ein öffentlich verfügbar gemachter Schlüssel stellt einen öffentlichen Codepfad bereit, der das schreibgeschützte Zeichen der-Eigenschaft negiert, wenn Methoden wie <xref:System.Windows.DependencyObject.ClearValue%2A> oder <xref:System.Windows.DependencyObject.SetValue%2A> außerhalb der Klasse oder Assembly aufgerufen werden können, die auf den Schlüssel verweisen.</span><span class="sxs-lookup"><span data-stu-id="f52a1-135">A publicly exposed key would provide a public code pathway that negated the read-only character of the property, if methods such as <xref:System.Windows.DependencyObject.ClearValue%2A> or <xref:System.Windows.DependencyObject.SetValue%2A> could be called outside the class or assembly, referencing the key.</span></span>  
  
 <span data-ttu-id="f52a1-136">Das Löschen des Eigenschafts Werts durch Aufrufen von <xref:System.Windows.DependencyObject.ClearValue%2A> weist nicht notwendigerweise eine Abhängigkeits Eigenschaft als Standardwert zu, der in den Metadaten der Abhängigkeits Eigenschaft angegeben ist.</span><span class="sxs-lookup"><span data-stu-id="f52a1-136">Clearing the property value by calling <xref:System.Windows.DependencyObject.ClearValue%2A> does not necessarily give a dependency property the default value that is specified in the dependency property metadata.</span></span> <span data-ttu-id="f52a1-137">Durch das Löschen des Werts wird lediglich der lokale Wert gelöscht.</span><span class="sxs-lookup"><span data-stu-id="f52a1-137">Clearing the value only specifically clears whatever local value may have been applied.</span></span> <span data-ttu-id="f52a1-138">Weitere Informationen finden Sie unter [Priorität von Abhängigkeitseigenschaftswerten](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="f52a1-138">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f52a1-139">Es wurde versucht, <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> für ein versiegeltes <see cref="T:System.Windows.DependencyObject" /> aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="f52a1-139">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> on a sealed <see cref="T:System.Windows.DependencyObject" />.</span></span></exception>
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
        <altmember cref="T:System.Windows.DependencyPropertyKey" />
      </Docs>
    </Member>
    <Member MemberName="CoerceValue">
      <MemberSignature Language="C#" Value="public void CoerceValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CoerceValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CoerceValue (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CoerceValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.CoerceValue : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.CoerceValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="f52a1-140">Der Bezeichner für die zu erzwingende Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="f52a1-140">The identifier for the dependency property to coerce.</span></span></param>
        <summary><span data-ttu-id="f52a1-141">Erzwingt den Wert der angegebenen Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="f52a1-141">Coerces the value of the specified dependency property.</span></span> <span data-ttu-id="f52a1-142">Dies erfolgt durch den Aufruf einer beliebigen <see cref="T:System.Windows.CoerceValueCallback" />-Funktion, die in den Metadaten für die Abhängigkeitseigenschaft angegeben ist, während sie beim aufrufenden <see cref="T:System.Windows.DependencyObject" /> beendet wird.</span><span class="sxs-lookup"><span data-stu-id="f52a1-142">This is accomplished by invoking any <see cref="T:System.Windows.CoerceValueCallback" /> function specified in property metadata for the dependency property as it exists on the calling <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f52a1-143">Das <xref:System.Windows.CoerceValueCallback> für eine Abhängigkeits Eigenschaft wird nicht nur explizit durch Aufrufen von <xref:System.Windows.DependencyObject.CoerceValue%2A> aufgerufen, sondern auch intern aufgerufen, wenn der Wert der Abhängigkeits Eigenschaft vom [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]-Eigenschaften System erneut ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="f52a1-143">In addition to being explicitly invoked through calling <xref:System.Windows.DependencyObject.CoerceValue%2A>, the <xref:System.Windows.CoerceValueCallback> for a dependency property is also invoked internally whenever the dependency property value is being re-evaluated by the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</span></span>  
  
 <span data-ttu-id="f52a1-144">Wenn Sie die <xref:System.Windows.DependencyObject.CoerceValue%2A>-Methode aufrufen, rufen Sie letztendlich den coerce-Wert Rückruf für die angegebene Eigenschaft auf.</span><span class="sxs-lookup"><span data-stu-id="f52a1-144">When you invoke the <xref:System.Windows.DependencyObject.CoerceValue%2A> method, you are ultimately invoking the coerce value callback for the property that you specify.</span></span> <span data-ttu-id="f52a1-145">In der Regel werden Sie <xref:System.Windows.DependencyObject.CoerceValue%2A> nur aufrufen, wenn Sie wissen, dass ein coerce-Wert Rückruf vorhanden ist, und wenn Sie die Kriterien des Rückrufs für die Umwandlung kennen.</span><span class="sxs-lookup"><span data-stu-id="f52a1-145">Typically you will invoke <xref:System.Windows.DependencyObject.CoerceValue%2A> only if you know that a coerce value callback exists, and if you know the callback's criteria for coercion.</span></span>  
  
 <span data-ttu-id="f52a1-146">Das gängigste Szenario für das Aufrufen von <xref:System.Windows.DependencyObject.CoerceValue%2A> liegt innerhalb der Klassen Behandlung oder der Rückrufe von Eigenschafts Änderungen von verknüpften Eigenschaften, die die Werte der anderen Werte auf abhängige Weise beeinflussen.</span><span class="sxs-lookup"><span data-stu-id="f52a1-146">The most common scenario for calling <xref:System.Windows.DependencyObject.CoerceValue%2A> is within class handling or property change callbacks of related properties that influence each other's values in a dependent way.</span></span> <span data-ttu-id="f52a1-147">Weitere Informationen finden Sie unter [Rückrufe und Validierung von Abhängigkeitseigenschaften](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="f52a1-147">For more information, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f52a1-148">Im folgenden Beispiel wird <xref:System.Windows.DependencyObject.CoerceValue%2A> innerhalb einer <xref:System.Windows.PropertyChangedCallback>-Implementierung aufgerufen, die als <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> für andere Abhängigkeits Eigenschaften für dieselbe Klasse verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="f52a1-148">The following example calls <xref:System.Windows.DependencyObject.CoerceValue%2A> within a <xref:System.Windows.PropertyChangedCallback> implementation that is used as the <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> for a different dependency properties on the same class.</span></span> <span data-ttu-id="f52a1-149">Dies ist ein gängiges Muster zum Einführen von true-Wert Abhängigkeiten zwischen Abhängigkeits Eigenschaften.</span><span class="sxs-lookup"><span data-stu-id="f52a1-149">This is a common pattern for introducing true value dependencies between dependency properties.</span></span>  
  
 [!code-csharp[DPCallbackOverride#OnPCCurrent](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCallbackOverride/CSharp/SDKSampleLibrary/class1.cs#onpccurrent)]
 [!code-vb[DPCallbackOverride#OnPCCurrent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCallbackOverride/visualbasic/sdksamplelibrary/class1.vb#onpccurrent)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f52a1-150">Der angegebene <paramref name="dp" /> oder sein Wert waren ungültig oder sind nicht vorhanden.</span><span class="sxs-lookup"><span data-stu-id="f52a1-150">The specified <paramref name="dp" /> or its value were invalid or do not exist.</span></span></exception>
        <altmember cref="T:System.Windows.CoerceValueCallback" />
        <altmember cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DependencyObjectType">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObjectType DependencyObjectType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObjectType DependencyObjectType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyObject.DependencyObjectType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyObjectType As DependencyObjectType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObjectType ^ DependencyObjectType { System::Windows::DependencyObjectType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyObjectType : System.Windows.DependencyObjectType" Usage="System.Windows.DependencyObject.DependencyObjectType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObjectType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f52a1-151">Ruft den <see cref="T:System.Windows.DependencyObjectType" /> ab, der den [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]-Typ dieser Instanz umschließt.</span><span class="sxs-lookup"><span data-stu-id="f52a1-151">Gets the <see cref="T:System.Windows.DependencyObjectType" /> that wraps the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type of this instance.</span></span></summary>
        <value><span data-ttu-id="f52a1-152">Ein <see cref="T:System.Windows.DependencyObjectType" />, der den [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]-Typ dieser Instanz umschließt.</span><span class="sxs-lookup"><span data-stu-id="f52a1-152">A <see cref="T:System.Windows.DependencyObjectType" /> that wraps the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type of this instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f52a1-153">Diese Eigenschaft ist nützlich, wenn ein Objekt, das von einer Methode zurückgegeben wird, den Rückgabe Werttyp <xref:System.Windows.DependencyObject> aufweist und Sie abhängig vom Typ Eigenschaften systemspezifische Vorgänge ausführen möchten.</span><span class="sxs-lookup"><span data-stu-id="f52a1-153">This property is useful if an object that is returned from a method has a return value type of <xref:System.Windows.DependencyObject> and you want to perform property system specific operations on it depending on its type.</span></span> <span data-ttu-id="f52a1-154">Beispielsweise ist es effizienter, <xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29> mit der <xref:System.Windows.DependencyObjectType> statt mit dem [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]-Typ aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="f52a1-154">For example it is more efficient to call <xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29> using the <xref:System.Windows.DependencyObjectType> rather than the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type.</span></span> <span data-ttu-id="f52a1-155"><xref:System.Windows.DependencyObjectType> ermöglicht eine schnellere Suche.</span><span class="sxs-lookup"><span data-stu-id="f52a1-155"><xref:System.Windows.DependencyObjectType> facilitates faster lookup.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f52a1-156">Im folgenden Pseudo Codebeispiel geht `MySubClass` davon aus, dass zusätzliche abgeleitete Klassen möglicherweise den Standardwert der Abhängigkeits Eigenschaft `MyCustom` ändern.</span><span class="sxs-lookup"><span data-stu-id="f52a1-156">In the following pseudocode example, `MySubClass` anticipates that additional derived classes might change the default value of the `MyCustom` dependency property.</span></span> <span data-ttu-id="f52a1-157">Die-Klasse implementiert einen Parameter losen Konstruktor, der die tatsächliche abgeleitete Klasse ermitteln kann, indem Sie Polymorphie für den <xref:System.Windows.DependencyObjectType>-Wert verwendet, wenn dieser Konstruktor als abgeleitete klasseninstanziator verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="f52a1-157">The class implements a parameterless constructor that can determine the actual derived class by taking advantage of polymorphism on the <xref:System.Windows.DependencyObjectType> value whenever that constructor is used as a derived class instantiator.</span></span>  
  
 `public DOClass() : base()`  
  
 `{`  
  
 `__customPropertyCache = (CustomDP)`  
  
 `CustomDPProperty.GetMetadata(DependencyObjectType).DefaultValue;`  
  
 `}`  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" />
        <altmember cref="T:System.Windows.DependencyObjectType" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override sealed bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dependencyObject.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="f52a1-158">Der <see cref="T:System.Windows.DependencyObject" />, der mit der aktuellen Instanz verglichen werden soll.</span><span class="sxs-lookup"><span data-stu-id="f52a1-158">The <see cref="T:System.Windows.DependencyObject" /> to compare to the current instance.</span></span></param>
        <summary><span data-ttu-id="f52a1-159">Bestimmt, ob ein angegebenes <see cref="T:System.Windows.DependencyObject" /> dem aktuellen <see cref="T:System.Windows.DependencyObject" /> entspricht.</span><span class="sxs-lookup"><span data-stu-id="f52a1-159">Determines whether a provided <see cref="T:System.Windows.DependencyObject" /> is equivalent to the current <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <returns><span data-ttu-id="f52a1-160"><see langword="true" />, wenn beide Instanzen identisch sind, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="f52a1-160"><see langword="true" /> if the two instances are the same; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f52a1-161">Diese Implementierung ist nur Verweis Gleichheit und versucht nicht, die Wert Gleichheit der enthaltenen Eigenschaften auszuwerten.</span><span class="sxs-lookup"><span data-stu-id="f52a1-161">This implementation is reference equality only, and does not attempt to evaluate value equality of the contained properties.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="f52a1-162">
            <see cref="T:System.Windows.DependencyObject" /> überschreibt und dann zwei grundlegende <see cref="T:System.Object" />-Methoden: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> und <see cref="M:System.Windows.DependencyObject.GetHashCode" />.</span><span class="sxs-lookup"><span data-stu-id="f52a1-162">
            <see cref="T:System.Windows.DependencyObject" /> overrides and then seals two basic <see cref="T:System.Object" /> methods: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> and <see cref="M:System.Windows.DependencyObject.GetHashCode" />.</span></span> <span data-ttu-id="f52a1-163">Die über schreibungen nennen die <see cref="T:System.Object" />-Implementierungen, was zu einem Objekt Gleichheits Verhalten führt.</span><span class="sxs-lookup"><span data-stu-id="f52a1-163">The overrides call the <see cref="T:System.Object" /> implementations, resulting in an object equality behavior.</span></span> <span data-ttu-id="f52a1-164">Der Zweck dieser absichtlichen über schreibungen besteht darin, zu verhindern, dass abgeleitete Klassen versuchen, eine Wert Gleichheit für eine <see cref="T:System.Windows.DependencyObject" /> zu definieren.</span><span class="sxs-lookup"><span data-stu-id="f52a1-164">The purpose of these deliberate overrides is to prevent derived classes from trying to define a value equality for a <see cref="T:System.Windows.DependencyObject" />.</span></span> <span data-ttu-id="f52a1-165">Der Wert der equalitäten für "<see cref="T:System.Windows.DependencyObject" />" ist aufgrund der angeborenen Eigenschafts Wert veränderlichen Funktionen einer <see cref="T:System.Windows.DependencyObject" /> und ihrer Abhängigkeits Eigenschaften nie genau.</span><span class="sxs-lookup"><span data-stu-id="f52a1-165">Value equalities for <see cref="T:System.Windows.DependencyObject" /> will never be accurate because of the innate property value-changing capabilities of a <see cref="T:System.Windows.DependencyObject" /> and its dependency properties.</span></span> <span data-ttu-id="f52a1-166">Dies schließt grundlegende [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]-Funktionen ein, z. b. die Datenbindung und das [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]-Eigenschaften System.</span><span class="sxs-lookup"><span data-stu-id="f52a1-166">This includes fundamental [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features such as data binding and the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override sealed int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dependencyObject.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f52a1-167">Ruft einen Hashcode für diese <see cref="T:System.Windows.DependencyObject" /> ab.</span><span class="sxs-lookup"><span data-stu-id="f52a1-167">Gets a hash code for this <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <returns><span data-ttu-id="f52a1-168">Ein 32-Bit-Ganzzahl-Hashcode mit Vorzeichen.</span><span class="sxs-lookup"><span data-stu-id="f52a1-168">A signed 32-bit integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="f52a1-169">
            <see cref="T:System.Windows.DependencyObject" /> überschreibt und dann zwei <see cref="T:System.Object" />-Methoden: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> und <see cref="M:System.Windows.DependencyObject.GetHashCode" />.</span><span class="sxs-lookup"><span data-stu-id="f52a1-169">
            <see cref="T:System.Windows.DependencyObject" /> overrides and then seals two <see cref="T:System.Object" /> methods: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> and <see cref="M:System.Windows.DependencyObject.GetHashCode" />.</span></span> <span data-ttu-id="f52a1-170">Die über schreibungen nennen die <see cref="T:System.Object" />-Implementierungen, was zu einem Objekt Gleichheits Verhalten führt.</span><span class="sxs-lookup"><span data-stu-id="f52a1-170">The overrides call the <see cref="T:System.Object" /> implementations, resulting in an object equality behavior.</span></span> <span data-ttu-id="f52a1-171">Der Zweck dieser absichtlichen über schreibungen besteht darin, zu verhindern, dass abgeleitete Klassen versuchen, eine Wert Gleichheit für eine <see cref="T:System.Windows.DependencyObject" /> zu definieren.</span><span class="sxs-lookup"><span data-stu-id="f52a1-171">The purpose of these deliberate overrides is to prevent derived classes from trying to define a value equality for a <see cref="T:System.Windows.DependencyObject" />.</span></span> <span data-ttu-id="f52a1-172">Der Wert der equalitäten für "<see cref="T:System.Windows.DependencyObject" />" ist aufgrund der angeborenen Eigenschafts Wert veränderlichen Funktionen einer <see cref="T:System.Windows.DependencyObject" /> und ihrer Abhängigkeits Eigenschaften nie genau.</span><span class="sxs-lookup"><span data-stu-id="f52a1-172">Value equalities for <see cref="T:System.Windows.DependencyObject" /> will never be accurate because of the innate property value-changing capabilities of a <see cref="T:System.Windows.DependencyObject" /> and its dependency properties.</span></span> <span data-ttu-id="f52a1-173">Dies schließt grundlegende [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]-Funktionen ein, z. b. die Datenbindung und das [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]-Eigenschaften System.</span><span class="sxs-lookup"><span data-stu-id="f52a1-173">This includes fundamental [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features such as data binding and the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetLocalValueEnumerator">
      <MemberSignature Language="C#" Value="public System.Windows.LocalValueEnumerator GetLocalValueEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.LocalValueEnumerator GetLocalValueEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetLocalValueEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLocalValueEnumerator () As LocalValueEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::LocalValueEnumerator GetLocalValueEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetLocalValueEnumerator : unit -&gt; System.Windows.LocalValueEnumerator" Usage="dependencyObject.GetLocalValueEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.LocalValueEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f52a1-174">Erstellt einen spezialisierten Enumerator, mit dem bestimmt wird, welche Abhängigkeitseigenschaften dieses <see cref="T:System.Windows.DependencyObject" /> über lokal festgelegte Werte verfügen.</span><span class="sxs-lookup"><span data-stu-id="f52a1-174">Creates a specialized enumerator for determining which dependency properties have locally set values on this <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <returns><span data-ttu-id="f52a1-175">Ein spezialisierter lokaler Wertenumerator.</span><span class="sxs-lookup"><span data-stu-id="f52a1-175">A specialized local value enumerator.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f52a1-176">Ein *lokaler Wert* ist ein beliebiger Wert für eine Abhängigkeits Eigenschaft, der von <xref:System.Windows.DependencyObject.SetValue%2A>festgelegt wurde, im Gegensatz zu anderen Aspekten des Eigenschaften Systems.</span><span class="sxs-lookup"><span data-stu-id="f52a1-176">A *local value* is any dependency property value that was set by <xref:System.Windows.DependencyObject.SetValue%2A>, as opposed to other aspects of the property system.</span></span>  
  
 <span data-ttu-id="f52a1-177">Der <xref:System.Windows.LocalValueEnumerator>, der durch Aufrufen von <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> abgerufen wird, kann verwendet werden, um Eigenschaften aufzulisten, die einen lokal festgelegten Wert für eine <xref:System.Windows.DependencyObject>-Instanz aufweisen.</span><span class="sxs-lookup"><span data-stu-id="f52a1-177">The <xref:System.Windows.LocalValueEnumerator> obtained by calling <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> can be used to enumerate properties that have a locally set value on a <xref:System.Windows.DependencyObject> instance.</span></span> <span data-ttu-id="f52a1-178">Jede dieser Eigenschaften wird im Enumerator durch ein <xref:System.Windows.LocalValueEntry>-Objekt dargestellt, das über Eigenschaften verfügt, die auf den spezifischen <xref:System.Windows.DependencyProperty> und seine Werte verweisen.</span><span class="sxs-lookup"><span data-stu-id="f52a1-178">Each such property is represented in the enumerator by a <xref:System.Windows.LocalValueEntry> object, which has properties that reference the specific <xref:System.Windows.DependencyProperty> and its values.</span></span> <span data-ttu-id="f52a1-179">Diese Methode zum Auflisten der lokal festgelegten Werte kann für die Optimierung oder andere Behandlung lokaler Werte verwendet werden, z. b. um zu ermitteln, welche Eigenschaftswerte einer <xref:System.Windows.DependencyObject> geändert werden, wenn Sie gelöscht wurden.</span><span class="sxs-lookup"><span data-stu-id="f52a1-179">This technique of enumerating over the locally set values can be used for optimization or for other handling of local values, such as to determine which property values of a <xref:System.Windows.DependencyObject> would change if they were cleared.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f52a1-180">Der zurückgegebene <xref:System.Windows.LocalValueEnumerator> kann <xref:System.Windows.LocalValueEntry>-Einträge für Abhängigkeits Eigenschaften enthalten, die schreibgeschützt sind, oder Abhängigkeits Eigenschaften, bei denen Werte vom-Eigenschaften System berechnet werden.</span><span class="sxs-lookup"><span data-stu-id="f52a1-180">The returned <xref:System.Windows.LocalValueEnumerator> might contain <xref:System.Windows.LocalValueEntry> records for dependency properties that are read-only, or dependency properties where values are calculated by the property system.</span></span> <span data-ttu-id="f52a1-181">Ein Visual Framework-Element, das über das Layout über eine festgelegte Breite verfügt, meldet z. b. einen lokalen Wert für <xref:System.Windows.FrameworkElement.ActualWidth%2A>.</span><span class="sxs-lookup"><span data-stu-id="f52a1-181">For example, a visual framework element that has an established width through layout will report a local value for <xref:System.Windows.FrameworkElement.ActualWidth%2A>.</span></span> <span data-ttu-id="f52a1-182">Wenn Sie lokale Werte erhalten, um diese zurückzusetzen, überprüfen Sie den <xref:System.Windows.DependencyProperty.ReadOnly%2A>-Wert auf dem Eigenschaften Bezeichner jedes <xref:System.Windows.LocalValueEntry>, um sicherzustellen, dass die betreffende <xref:System.Windows.DependencyProperty>-Option nicht schreibgeschützt ist.</span><span class="sxs-lookup"><span data-stu-id="f52a1-182">If you are getting local values in order to reset them, check the <xref:System.Windows.DependencyProperty.ReadOnly%2A> value on the property identifier of each <xref:System.Windows.LocalValueEntry> to verify that the <xref:System.Windows.DependencyProperty> in question is not read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f52a1-183">Im folgenden Beispiel werden alle Eigenschaften durchlaufen, für die lokale Werte für ein Objekt festgelegt sind, und dann <xref:System.Windows.DependencyObject.ClearValue%2A> aufgerufen, um die Werte der einzelnen Eigenschaften zu löschen.</span><span class="sxs-lookup"><span data-stu-id="f52a1-183">The following example iterates all properties that have local values set on an object, then calls <xref:System.Windows.DependencyObject.ClearValue%2A> to clear the values of each such property.</span></span>  
  
 [!code-csharp[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/csharp/VS_Snippets_Wpf/DPClearValue/CSharp/default.xaml.cs#iteratelocalvaluesandclear)]
 [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPClearValue/VisualBasic/default.xaml.vb#iteratelocalvaluesandclear)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.LocalValueEntry" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.GetValue : System.Windows.DependencyProperty -&gt; obj" Usage="dependencyObject.GetValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="f52a1-184">Der <see cref="T:System.Windows.DependencyProperty" />-Bezeichner der Eigenschaft, für die der Wert abgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="f52a1-184">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</span></span></param>
        <summary><span data-ttu-id="f52a1-185">Gibt den aktuellen effektiven Wert einer Abhängigkeitseigenschaft für diese Instanz eines <see cref="T:System.Windows.DependencyObject" /> zurück.</span><span class="sxs-lookup"><span data-stu-id="f52a1-185">Returns the current effective value of a dependency property on this instance of a <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <returns><span data-ttu-id="f52a1-186">Gibt den aktuellen effektiven Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="f52a1-186">Returns the current effective value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f52a1-187">Der *effektive Wert* ist der Wert der Eigenschaft, die vom Eigenschaften System an jeden Aufrufer zurückgegeben wird, der den Wert anfordert.</span><span class="sxs-lookup"><span data-stu-id="f52a1-187">The *effective value* is the value of the property that is returned by the property system to any caller that is requesting the value.</span></span> <span data-ttu-id="f52a1-188">Der effektive Wert ist das Ergebnis des Eigenschaften Systems, das alle möglichen Eingaben ausgewertet hat, die an der Rangfolge des Eigenschaften System Werts beteiligt sind.</span><span class="sxs-lookup"><span data-stu-id="f52a1-188">The effective value is the result of the property system having evaluated all the possible inputs that participate in the property system value precedence.</span></span> <span data-ttu-id="f52a1-189">Dies schließt Umwandlungs-und Animations Zeichen ein.</span><span class="sxs-lookup"><span data-stu-id="f52a1-189">This includes coercion and animation.</span></span> <span data-ttu-id="f52a1-190">Weitere Informationen finden Sie unter [Priorität von Abhängigkeitseigenschaftswerten](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="f52a1-190">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="f52a1-191">Diese Methode gibt nie <xref:System.Windows.DependencyProperty.UnsetValue> zurück.</span><span class="sxs-lookup"><span data-stu-id="f52a1-191">This method will never return <xref:System.Windows.DependencyProperty.UnsetValue>.</span></span> <span data-ttu-id="f52a1-192">Der <xref:System.Windows.DependencyProperty.UnsetValue> ist ein Sentinelwert für das Eigenschaften System, der in verschiedenen Kapazitäten intern verwendet und gelegentlich auch durch Umwandlungs Rückrufe verfügbar gemacht wird.</span><span class="sxs-lookup"><span data-stu-id="f52a1-192">The <xref:System.Windows.DependencyProperty.UnsetValue> is a sentinel value for the property system that is used in various capacities internally and occasionally also exposed through coercion callbacks.</span></span>  
  
 <span data-ttu-id="f52a1-193">Wenn Sie nicht sicher sind, welcher Eigenschaftentyp sein sollte, können Sie den Bezeichner der angeforderten Abhängigkeits Eigenschaft Abfragen, um zu bestimmen, ob eine spezifischere <xref:System.Windows.DependencyProperty.PropertyType%2A> vorhanden ist, in die der Rückgabewert konvertiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="f52a1-193">If you are not sure what the property's type should be, you can query the identifier of the requested dependency property to determine whether there is a more specific <xref:System.Windows.DependencyProperty.PropertyType%2A> that the return value can be converted to.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f52a1-194">Der angegebene <paramref name="dp" /> oder sein Wert ist ungültig, oder das angegebene <paramref name="dp" /> ist nicht vorhanden.</span><span class="sxs-lookup"><span data-stu-id="f52a1-194">The specified <paramref name="dp" /> or its value was invalid, or the specified <paramref name="dp" /> does not exist.</span></span></exception>
        <altmember cref="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateProperty">
      <MemberSignature Language="C#" Value="public void InvalidateProperty (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateProperty(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateProperty (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateProperty(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.InvalidateProperty : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.InvalidateProperty dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="f52a1-195">Der <see cref="T:System.Windows.DependencyProperty" />-Bezeichner der neu zu berechnenden Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="f52a1-195">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to invalidate.</span></span></param>
        <summary><span data-ttu-id="f52a1-196">Wertet den effektiven Wert für die angegebene Abhängigkeitseigenschaft erneut aus.</span><span class="sxs-lookup"><span data-stu-id="f52a1-196">Re-evaluates the effective value for the specified dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f52a1-197">Wenn Sie <xref:System.Windows.DependencyObject.InvalidateProperty%2A> aufrufen, können alle zugeordneten und anwendbaren <xref:System.Windows.CoerceValueCallback>-oder <xref:System.Windows.PropertyChangedCallback>-Funktionen, die für diese Abhängigkeits Eigenschaft registriert sind, aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="f52a1-197">When you call <xref:System.Windows.DependencyObject.InvalidateProperty%2A>, any associated and applicable <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions registered for that dependency property might be invoked.</span></span>  
  
 <span data-ttu-id="f52a1-198">Das Aufrufen von <xref:System.Windows.DependencyObject.InvalidateProperty%2A> für eine Eigenschaft, deren lokaler Wert festgelegt ist, hat keine Auswirkung, da der lokale Wert Vorrang vor anderen Eigenschaften System Eingaben hat, mit Ausnahme von Animationen.</span><span class="sxs-lookup"><span data-stu-id="f52a1-198">Calling <xref:System.Windows.DependencyObject.InvalidateProperty%2A> on a property that has its local value set will have no effect, because the local value takes precedence over other property system inputs, except for animations.</span></span> <span data-ttu-id="f52a1-199">Sie können jedoch <xref:System.Windows.DependencyObject.ClearValue%2A> und dann <xref:System.Windows.DependencyObject.InvalidateProperty%2A> aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="f52a1-199">However, you could call <xref:System.Windows.DependencyObject.ClearValue%2A>, then call <xref:System.Windows.DependencyObject.InvalidateProperty%2A>.</span></span> <span data-ttu-id="f52a1-200">Weitere Informationen finden Sie unter [Priorität von Abhängigkeitseigenschaftswerten](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="f52a1-200">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="f52a1-201">Das Aufrufen von <xref:System.Windows.DependencyObject.InvalidateProperty%2A> ist nicht notwendigerweise auf viele Szenarien mit Abhängigkeits Eigenschaften anwendbar.</span><span class="sxs-lookup"><span data-stu-id="f52a1-201">Calling <xref:System.Windows.DependencyObject.InvalidateProperty%2A> is not necessarily applicable for many dependency property scenarios.</span></span> <span data-ttu-id="f52a1-202">Wenn eine Abhängigkeits Eigenschaft aufgrund von Wertänderungen in einer der Bestandteile ungültig wird, wird die Abhängigkeits Eigenschaft durch das Eigenschaften System ungültig und automatisch erneut ausgewertet.</span><span class="sxs-lookup"><span data-stu-id="f52a1-202">If a dependency property becomes invalidated because of value changes in any of the constituents, the property system invalidates and re-evaluates the dependency property automatically.</span></span> <span data-ttu-id="f52a1-203">Es gibt jedoch noch einige geeignete Szenarios, in denen <xref:System.Windows.DependencyObject.InvalidateProperty%2A> nützlich ist.</span><span class="sxs-lookup"><span data-stu-id="f52a1-203">However, there are still some appropriate scenarios where <xref:System.Windows.DependencyObject.InvalidateProperty%2A> is useful.</span></span> <span data-ttu-id="f52a1-204">Insbesondere können Sie <xref:System.Windows.DependencyObject.InvalidateProperty%2A> innerhalb des coerce-Werts oder des Eigenschafts geänderten Rückrufs für eine andere Abhängigkeits Eigenschaft verwenden.</span><span class="sxs-lookup"><span data-stu-id="f52a1-204">In particular, you can use <xref:System.Windows.DependencyObject.InvalidateProperty%2A> inside the coerce value or property changed callback for a different dependency property.</span></span> <span data-ttu-id="f52a1-205">Sie können auch <xref:System.Windows.DependencyObject.InvalidateProperty%2A> verwenden, um die erneute Auswertung einer Bindung für eine Datenquelle zu erzwingen, die nicht in der Lage ist, den empfohlenen <xref:System.ComponentModel.INotifyPropertyChanged>-Benachrichtigungs Mechanismus zu implementieren (z. b., wenn Sie Daten Klassen verwenden, die nicht von abgeleitet werden können, oder wenn die Daten ein statischer Member sind).</span><span class="sxs-lookup"><span data-stu-id="f52a1-205">You can also use <xref:System.Windows.DependencyObject.InvalidateProperty%2A> to force re-evaluation of a binding against a data source that is not able to implement the recommended <xref:System.ComponentModel.INotifyPropertyChanged> notification mechanism (perhaps if consuming data classes that cannot be derived from, or where the data is a static member).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f52a1-206">Im folgenden Beispiel wird <xref:System.Windows.DependencyObject.InvalidateProperty%2A> für eine benutzerdefinierte Eigenschaft aufgerufen, wenn Eigenschaften, die an den Berechnungen der ungültigen Eigenschaft beteiligt sind, geändert werden.</span><span class="sxs-lookup"><span data-stu-id="f52a1-206">The following example calls <xref:System.Windows.DependencyObject.InvalidateProperty%2A> on a custom property, whenever properties that are involved in the invalidated property's calculations change.</span></span> <span data-ttu-id="f52a1-207">Dies ist eine alternative Methode, um die <xref:System.Windows.DependencyObject.CoerceValue%2A>-Methode aufzurufen, da durch das invalidieren der Eigenschaft auch alle registrierten <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="f52a1-207">This is an alternative technique to calling the <xref:System.Windows.DependencyObject.CoerceValue%2A> method, because invalidating the property will also call any registered <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#InvalidateProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/SDKSampleLibrary/class1.cs#invalidateproperty)]
 [!code-vb[PropertySystemEsoterics#InvalidateProperty](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/sdksamplelibrary/class1.vb#invalidateproperty)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Windows.DependencyProperty.UnsetValue" />
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyObject.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSealed : bool" Usage="System.Windows.DependencyObject.IsSealed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f52a1-208">Ruft einen Wert ab, der angibt, ob diese Instanz derzeit versiegelt (schreibgeschützt) ist.</span><span class="sxs-lookup"><span data-stu-id="f52a1-208">Gets a value that indicates whether this instance is currently sealed (read-only).</span></span></summary>
        <value><span data-ttu-id="f52a1-209"><see langword="true" />, wenn diese Instanz versiegelt ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="f52a1-209"><see langword="true" /> if this instance is sealed; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f52a1-210">Dieser Wert wird intern festgelegt.</span><span class="sxs-lookup"><span data-stu-id="f52a1-210">This value is set internally.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.FrameworkElementFactory" />
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="dependencyObject.OnPropertyChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="f52a1-211">Ereignisdaten, die den betreffenden Bezeichner für eine Abhängigkeitseigenschaft, die Eigenschaftsmetadaten für den Typ sowie die alten und neuen Werte enthalten.</span><span class="sxs-lookup"><span data-stu-id="f52a1-211">Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.</span></span></param>
        <summary><span data-ttu-id="f52a1-212">Wird immer dann aufgerufen, wenn der effektive Wert einer Abhängigkeitseigenschaft für dieses <see cref="T:System.Windows.DependencyObject" /> aktualisiert wurde.</span><span class="sxs-lookup"><span data-stu-id="f52a1-212">Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.DependencyObject" /> has been updated.</span></span> <span data-ttu-id="f52a1-213">Welche spezifische Abhängigkeitseigenschaft geändert wird, wird in den Ereignisdaten gemeldet.</span><span class="sxs-lookup"><span data-stu-id="f52a1-213">The specific dependency property that changed is reported in the event data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f52a1-214">Diese Methode ist nicht dafür vorgesehen, einzelne Eigenschafts Änderungen im Allgemeinen zu erkennen oder die Validierung von Eigenschaften auf Einzelfallbasis auszuführen.</span><span class="sxs-lookup"><span data-stu-id="f52a1-214">This method is not intended to generally detect individual property changes or perform invalidations of properties on a per-case basis.</span></span> <span data-ttu-id="f52a1-215"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> ist stattdessen für Änderungen des allgemeinen invalidierungsmusters vorgesehen, wenn bestimmte Informationen über breite Klassifizierungen von Eigenschaften bekannt sind.</span><span class="sxs-lookup"><span data-stu-id="f52a1-215"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> is instead intended for modifications of the general invalidation pattern, if certain information is known about wide classifications of properties.</span></span> <span data-ttu-id="f52a1-216">Änderungen in einem <xref:System.Windows.Freezable> können z. b. Änderungen in den Werttypen von <xref:System.Windows.Freezable> oder unter Eigenschaften sein, bei denen sich die Änderungen innerhalb anderer <xref:System.Windows.Freezable>-Verweise befinden.</span><span class="sxs-lookup"><span data-stu-id="f52a1-216">For example, changes in a <xref:System.Windows.Freezable> might be changes in the value types of the <xref:System.Windows.Freezable>, or might be subproperties, where the changes are within other <xref:System.Windows.Freezable> references.</span></span> <span data-ttu-id="f52a1-217">Die <xref:System.Windows.Freezable>-Überschreibungs Implementierung von <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> verwendet interne Informationen, um zu bestimmen, ob es sich bei den Eigenschaften um untergeordnete Eigenschaften handelt, und bietet für beide Fälle eine entsprechende Basisklassen Logik.</span><span class="sxs-lookup"><span data-stu-id="f52a1-217">The <xref:System.Windows.Freezable> override implementation of <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> uses internal information to determine whether the properties are subproperties, and provides appropriate base class logic for either case.</span></span>  
  
 <span data-ttu-id="f52a1-218"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> kann während der Lebensdauer eines Objekts möglicherweise mehrmals aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="f52a1-218"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> is potentially invoked many times during the life of an object.</span></span> <span data-ttu-id="f52a1-219">Aus diesem Grund können Sie eine bessere Leistung für das allgemeine Eigenschaften System erzielen, wenn Sie die Metadaten bestimmter Eigenschaften überschreiben und dann <xref:System.Windows.CoerceValueCallback>-oder <xref:System.Windows.PropertyChangedCallback>-Funktionen für einzelne Eigenschaften anfügen.</span><span class="sxs-lookup"><span data-stu-id="f52a1-219">Therefore, you can achieve better performance for the overall property system if you override the metadata of specific properties and then attach <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions for individual properties.</span></span> <span data-ttu-id="f52a1-220">Sie verwenden diese Methode jedoch, wenn eine <xref:System.Windows.DependencyObject> eine beträchtliche Anzahl von Wert abhängigen Abhängigkeits Eigenschaften enthält, oder wenn Sie Logik wie das Renderingverhalten enthält, das für mehrere verwandte Fälle von Eigenschafts Invalidierungen erneut ausgeführt werden muss.</span><span class="sxs-lookup"><span data-stu-id="f52a1-220">However, you would use this method if a <xref:System.Windows.DependencyObject> includes a significant number of value-interrelated dependency properties, or if it includes logic such as rendering behavior that must be rerun for several related cases of property invalidations.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="f52a1-221">Ruft immer die Basis Implementierung auf.</span><span class="sxs-lookup"><span data-stu-id="f52a1-221">Always call the base implementation.</span></span> <span data-ttu-id="f52a1-222">Wenn dies nicht der Fall ist, wird das gesamte [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]-Eigenschaften System erheblich deaktiviert, sodass falsche Werte gemeldet werden.</span><span class="sxs-lookup"><span data-stu-id="f52a1-222">Failure to do this will significantly disable the entire [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system, causing incorrect values to be reported.</span></span></para></block>
        <altmember cref="T:System.Windows.FrameworkElement" />
      </Docs>
    </Member>
    <Member MemberName="ReadLocalValue">
      <MemberSignature Language="C#" Value="public object ReadLocalValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ReadLocalValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLocalValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ReadLocalValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.ReadLocalValue : System.Windows.DependencyProperty -&gt; obj" Usage="dependencyObject.ReadLocalValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="f52a1-223">Der <see cref="T:System.Windows.DependencyProperty" />-Bezeichner der Eigenschaft, für die der Wert abgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="f52a1-223">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</span></span></param>
        <summary><span data-ttu-id="f52a1-224">Gibt, sofern vorhanden, den lokalen Wert einer Abhängigkeitseigenschaft zurück.</span><span class="sxs-lookup"><span data-stu-id="f52a1-224">Returns the local value of a dependency property, if it exists.</span></span></summary>
        <returns><span data-ttu-id="f52a1-225">Gibt den lokalen Wert oder den Sentinelwert <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> zurück, wenn kein lokaler Wert festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="f52a1-225">Returns the local value, or returns the sentinel value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> if no local value is set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f52a1-226">Sie sollten <xref:System.Windows.DependencyObject.GetValue%2A> für die meisten typischen "Get"-Vorgänge für eine Abhängigkeits Eigenschaft verwenden.</span><span class="sxs-lookup"><span data-stu-id="f52a1-226">You should use <xref:System.Windows.DependencyObject.GetValue%2A> for most typical "get" operations for a dependency property.</span></span> <span data-ttu-id="f52a1-227"><xref:System.Windows.DependencyObject.ReadLocalValue%2A> gibt den effektiven Wert für eine Vielzahl von Situationen zurück, in denen der Wert nicht lokal festgelegt wurde.</span><span class="sxs-lookup"><span data-stu-id="f52a1-227"><xref:System.Windows.DependencyObject.ReadLocalValue%2A> does not return the effective value for a variety of circumstances where the value was not locally set.</span></span>  
  
 <span data-ttu-id="f52a1-228">Werte, die durch Stile, Designs, Vorlagen, den Standardwert aus Metadaten oder die Vererbung von Eigenschafts Werten festgelegt werden, werden nicht als lokale Werte betrachtet.</span><span class="sxs-lookup"><span data-stu-id="f52a1-228">Values that are set by styles, themes, templates, the default value from metadata, or property value inheritance are not considered to be local values.</span></span> <span data-ttu-id="f52a1-229">Bindungen und andere Ausdrücke werden jedoch als lokale Werte betrachtet, nachdem Sie ausgewertet wurden.</span><span class="sxs-lookup"><span data-stu-id="f52a1-229">However, bindings and other expressions are considered to be local values, after they have been evaluated.</span></span>  
  
 <span data-ttu-id="f52a1-230">Wenn kein lokaler Wert festgelegt ist, gibt diese Methode <xref:System.Windows.DependencyProperty.UnsetValue> zurück.</span><span class="sxs-lookup"><span data-stu-id="f52a1-230">When no local value is set, this method returns <xref:System.Windows.DependencyProperty.UnsetValue>.</span></span>  
  
 <span data-ttu-id="f52a1-231">Wenn der zurückgegebene Wert nicht <xref:System.Windows.DependencyProperty.UnsetValue> ist, können Sie die Metadaten der angeforderten Abhängigkeits Eigenschaft Abfragen, um zu bestimmen, ob es einen spezifischeren Typ gibt, in den der Rückgabewert konvertiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="f52a1-231">If the returned value is other than <xref:System.Windows.DependencyProperty.UnsetValue>, you can query the metadata of the requested dependency property to determine whether there is a more specific type that the return value can be converted to.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetLocalValueEnumerator" />
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="SetCurrentValue">
      <MemberSignature Language="C#" Value="public void SetCurrentValue (System.Windows.DependencyProperty dp, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCurrentValue(class System.Windows.DependencyProperty dp, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCurrentValue (dp As DependencyProperty, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCurrentValue(System::Windows::DependencyProperty ^ dp, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetCurrentValue : System.Windows.DependencyProperty * obj -&gt; unit" Usage="dependencyObject.SetCurrentValue (dp, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="f52a1-232">Der Bezeichner der festzulegenden Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="f52a1-232">The identifier of the dependency property to set.</span></span></param>
        <param name="value"><span data-ttu-id="f52a1-233">Der neue lokale Wert.</span><span class="sxs-lookup"><span data-stu-id="f52a1-233">The new local value.</span></span></param>
        <summary><span data-ttu-id="f52a1-234">Legt den Wert einer Abhängigkeitseigenschaft fest, ohne die Wertquelle zu ändern.</span><span class="sxs-lookup"><span data-stu-id="f52a1-234">Sets the value of a dependency property without changing its value source.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f52a1-235">Diese Methode wird von einer Komponente verwendet, die den Wert einer ihrer eigenen Eigenschaften Programm gesteuert festlegt, ohne die deklarierte Verwendung der-Eigenschaft einer Anwendung zu deaktivieren.</span><span class="sxs-lookup"><span data-stu-id="f52a1-235">This method is used by a component that programmatically sets the value of one of its own properties without disabling an application's declared use of the property.</span></span> <span data-ttu-id="f52a1-236">Mit der <xref:System.Windows.DependencyObject.SetCurrentValue%2A>-Methode wird der effektive Wert der Eigenschaft geändert, vorhandene Trigger, Daten Bindungen und Stile funktionieren jedoch weiterhin.</span><span class="sxs-lookup"><span data-stu-id="f52a1-236">The <xref:System.Windows.DependencyObject.SetCurrentValue%2A> method changes the effective value of the property, but existing triggers, data bindings, and styles will continue to work.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f52a1-237">Es wurde versucht, eine schreibgeschützte Abhängigkeitseigenschaft oder eine Eigenschaft eines versiegelten <see cref="T:System.Windows.DependencyObject" /> zu ändern.</span><span class="sxs-lookup"><span data-stu-id="f52a1-237">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f52a1-238"><paramref name="value" /> hatte nicht den richtigen Typ, wie er für die <paramref name="dp" />-Eigenschaft registriert ist.</span><span class="sxs-lookup"><span data-stu-id="f52a1-238"><paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetValue">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f52a1-239">Legt den lokalen Wert einer Abhängigkeitseigenschaft fest.</span><span class="sxs-lookup"><span data-stu-id="f52a1-239">Sets the local value of a dependency property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (System.Windows.DependencyProperty dp, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(class System.Windows.DependencyProperty dp, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (dp As DependencyProperty, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Windows::DependencyProperty ^ dp, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : System.Windows.DependencyProperty * obj -&gt; unit" Usage="dependencyObject.SetValue (dp, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="f52a1-240">Der Bezeichner der festzulegenden Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="f52a1-240">The identifier of the dependency property to set.</span></span></param>
        <param name="value"><span data-ttu-id="f52a1-241">Der neue lokale Wert.</span><span class="sxs-lookup"><span data-stu-id="f52a1-241">The new local value.</span></span></param>
        <summary><span data-ttu-id="f52a1-242">Legt den lokalen Wert einer Abhängigkeitseigenschaft fest, die über ihren Bezeichner angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="f52a1-242">Sets the local value of a dependency property, specified by its dependency property identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f52a1-243">Wenn der angegebene Typ nicht mit dem Typ identisch ist, der für die Abhängigkeits Eigenschaft deklariert wurde, weil er ursprünglich registriert wurde, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="f52a1-243">If the provided type does not match the type that is declared for the dependency property as it was originally registered, an exception is thrown.</span></span> <span data-ttu-id="f52a1-244">Der Parameter "`value`" sollte immer als geeigneter Typ angegeben werden.</span><span class="sxs-lookup"><span data-stu-id="f52a1-244">The `value` parameter should always be provided as the appropriate type.</span></span>  
  
 <span data-ttu-id="f52a1-245">Die Ausnahmebedingungen werden potenziell durch den <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A>-Rückruf beeinflusst, der im Bezeichner der Abhängigkeits Eigenschaft der festgelegten Abhängigkeits Eigenschaft vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="f52a1-245">The exception conditions are potentially influenced by the <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> callback that exists on the dependency property identifier of the dependency property being set.</span></span> <span data-ttu-id="f52a1-246">Andernfalls können bei dem bereitgestellten Wert allgemeine Typüberprüfungen fehlschlagen (z. b. das Übergeben einer Zeichenfolge, wenn der Native Typ Double ist).</span><span class="sxs-lookup"><span data-stu-id="f52a1-246">Otherwise, the value provided might be failing general type-checking conditions (for example, passing a string when the native type is Double).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f52a1-247">Es wurde versucht, eine schreibgeschützte Abhängigkeitseigenschaft oder eine Eigenschaft eines versiegelten <see cref="T:System.Windows.DependencyObject" /> zu ändern.</span><span class="sxs-lookup"><span data-stu-id="f52a1-247">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f52a1-248"><paramref name="value" /> entsprach nicht dem für die <paramref name="dp" />-Eigenschaft registrierten Typ.</span><span class="sxs-lookup"><span data-stu-id="f52a1-248"><paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (System.Windows.DependencyPropertyKey key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(class System.Windows.DependencyPropertyKey key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (key As DependencyPropertyKey, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Windows::DependencyPropertyKey ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : System.Windows.DependencyPropertyKey * obj -&gt; unit" Usage="dependencyObject.SetValue (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="f52a1-249">Der <see cref="T:System.Windows.DependencyPropertyKey" />-Bezeichner der festzulegenden Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="f52a1-249">The <see cref="T:System.Windows.DependencyPropertyKey" /> identifier of the property to set.</span></span></param>
        <param name="value"><span data-ttu-id="f52a1-250">Der neue lokale Wert.</span><span class="sxs-lookup"><span data-stu-id="f52a1-250">The new local value.</span></span></param>
        <summary><span data-ttu-id="f52a1-251">Legt den lokalen Wert einer schreibgeschützten Abhängigkeitseigenschaft fest, die durch den <see cref="T:System.Windows.DependencyPropertyKey" />-Bezeichner der Abhängigkeitseigenschaft angegeben ist.</span><span class="sxs-lookup"><span data-stu-id="f52a1-251">Sets the local value of a read-only dependency property, specified by the <see cref="T:System.Windows.DependencyPropertyKey" /> identifier of the dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f52a1-252">Diese Signatur wird in der Regel verwendet, wenn Sie Werte für schreibgeschützte Abhängigkeits Eigenschaften festlegen, die von Ihren benutzerdefinierten Klassen definiert werden.</span><span class="sxs-lookup"><span data-stu-id="f52a1-252">This signature is generally used when you set values for read-only dependency properties that are defined by your custom classes.</span></span> <span data-ttu-id="f52a1-253">Im Allgemeinen wird <xref:System.Windows.DependencyObject.SetValue%2A> nur von dem Typ aufgerufen, der diese Abhängigkeits Eigenschaft registriert hat, die die interne Logik implementiert, die den festgelegten Wert für die Abhängigkeits Eigenschaft bereitstellt.</span><span class="sxs-lookup"><span data-stu-id="f52a1-253">Generally, <xref:System.Windows.DependencyObject.SetValue%2A> is called only from the type that registered that dependency property, which implements the internal logic that provides the determined value for the dependency property.</span></span> <span data-ttu-id="f52a1-254">Weitere Informationen finden Sie unter [Schreibgeschützte Abhängigkeitseigenschaften](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="f52a1-254">For more information, see [Read-Only Dependency Properties](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span></span>  
  
 <span data-ttu-id="f52a1-255">Wenn der angegebene Typ nicht mit dem Typ identisch ist, der für die Abhängigkeits Eigenschaft deklariert wurde, weil er ursprünglich registriert wurde, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="f52a1-255">If the provided type does not match the type that is declared for the dependency property as it was originally registered, an exception is thrown.</span></span> <span data-ttu-id="f52a1-256">Der Parameter "`value`" sollte immer als geeigneter Typ angegeben werden.</span><span class="sxs-lookup"><span data-stu-id="f52a1-256">The `value` parameter should always be provided as the appropriate type.</span></span> <span data-ttu-id="f52a1-257">Die Ausnahmebedingungen werden potenziell durch den <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A>-Rückruf beeinflusst, der im Bezeichner der Abhängigkeits Eigenschaft der festgelegten Abhängigkeits Eigenschaft vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="f52a1-257">The exception conditions are potentially influenced by the <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> callback that exists on the dependency property identifier of the dependency property being set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f52a1-258">Im folgenden Beispiel wird eine schreibgeschützte Abhängigkeits Eigenschaft zusammen mit einer `public static readonly`-<xref:System.Windows.DependencyProperty> definiert, die die erforderliche schreibgeschützte bereit barkeit für eigenschaftenconsumer und den Get-Accessor für den [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]-Wrapper bereitstellt.</span><span class="sxs-lookup"><span data-stu-id="f52a1-258">The following example defines a read-only dependency property, along with a `public static readonly` <xref:System.Windows.DependencyProperty> that provides necessary read-only exposure to property consumers, and the get accessor for the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] wrapper.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeProperty">
      <MemberSignature Language="C#" Value="protected internal virtual bool ShouldSerializeProperty (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ShouldSerializeProperty(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function ShouldSerializeProperty (dp As DependencyProperty) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ShouldSerializeProperty(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member ShouldSerializeProperty : System.Windows.DependencyProperty -&gt; bool&#xA;override this.ShouldSerializeProperty : System.Windows.DependencyProperty -&gt; bool" Usage="dependencyObject.ShouldSerializeProperty dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="f52a1-259">Der Bezeichner für die Abhängigkeitseigenschaft, die serialisiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="f52a1-259">The identifier for the dependency property that should be serialized.</span></span></param>
        <summary><span data-ttu-id="f52a1-260">Gibt einen Wert zurück, der angibt, ob Serialisierungsprozesse den Wert der bereitgestellten Abhängigkeitseigenschaft serialisieren sollen.</span><span class="sxs-lookup"><span data-stu-id="f52a1-260">Returns a value that indicates whether serialization processes should serialize the value for the provided dependency property.</span></span></summary>
        <returns><span data-ttu-id="f52a1-261"><see langword="true" />, wenn die bereitgestellte Abhängigkeitseigenschaft serialisiert werden soll, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="f52a1-261"><see langword="true" /> if the dependency property that is supplied should be value-serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f52a1-262">Die Standard Implementierung gibt für alle Fälle, in denen für eine Abhängigkeits Eigenschaft ein lokaler Wert auf <xref:System.Windows.DependencyObject> festgelegt wurde, `true` zurück.</span><span class="sxs-lookup"><span data-stu-id="f52a1-262">The default implementation returns `true` for all cases in which a dependency property had a local value established on the <xref:System.Windows.DependencyObject>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="f52a1-263">Durch außer Kraft setzungen für diese Methode können bestimmte Abhängigkeits Eigenschaften anders behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="f52a1-263">Overrides for this method might handle specific dependency properties differently.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>

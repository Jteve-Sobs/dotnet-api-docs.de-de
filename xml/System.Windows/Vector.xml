<Type Name="Vector" FullName="System.Windows.Vector">
  <TypeSignature Language="C#" Value="public struct Vector : IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit Vector extends System.ValueType implements class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Vector" />
  <TypeSignature Language="VB.NET" Value="Public Structure Vector&#xA;Implements IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class Vector : IFormattable" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.VectorConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.Converters.VectorValueSerializer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="a3ca7-101">Stellt eine Verschiebung im zweidimensionalen Raum dar.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-101">Represents a displacement in 2-D space.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3ca7-102">Ein <xref:System.Windows.Point> stellt eine feste Position, aber ein <xref:System.Windows.Vector> eine Richtung und eine Größe (z. B. Geschwindigkeit oder die Beschleunigung) darstellt.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-102">A <xref:System.Windows.Point> represents a fixed position, but a <xref:System.Windows.Vector> represents a direction and a magnitude (for example, velocity or acceleration).</span></span> <span data-ttu-id="a3ca7-103">Daher die Endpunkte eines Liniensegments sind Punkte, aber ihre Unterschied ist ein Vektor; der Zeile, also die Richtung und die Länge dieses Segment.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-103">Thus, the endpoints of a line segment are points but their difference is a vector; that is, the direction and length of that line segment.</span></span>  
  
 <span data-ttu-id="a3ca7-104">In XAML wird als Trennzeichen zwischen den <xref:System.Windows.Vector.X%2A> und <xref:System.Windows.Vector.Y%2A> Werte von einer <xref:System.Windows.Vector> kann entweder ein Komma oder ein Leerzeichen sein.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-104">In XAML, the delimiter between the <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> values of a <xref:System.Windows.Vector> can be either a comma or a space.</span></span>  
  
 <span data-ttu-id="a3ca7-105">Einige Kulturen möglicherweise das Komma als Dezimaltrennzeichen statt das Punktzeichen verwenden.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-105">Some cultures might use the comma character as the decimal delimiter instead of the period character.</span></span> <span data-ttu-id="a3ca7-106">XAML-Verarbeitung für die invariante Kultur wird standardmäßig auf En-US, in den meisten Implementierungen von XAML-Prozessor und das Intervall Dezimaltrennzeichen erwartet.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-106">XAML processing for invariant culture defaults to en-US in most XAML processor implementations, and expects the period to be the decimal delimiter.</span></span> <span data-ttu-id="a3ca7-107">Vermeiden Sie das Komma als Dezimaltrennzeichen verwenden, wenn Sie angeben einer <xref:System.Windows.Vector> in XAML, da, die mit der Zeichenfolge typkonvertierung miteinander in Konflikt geraten wird eine <xref:System.Windows.Vector> Attributwert in der <xref:System.Windows.Vector.X%2A> und <xref:System.Windows.Vector.Y%2A> Komponenten.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-107">You should avoid using the comma character as the decimal delimiter if specifying a <xref:System.Windows.Vector> in XAML, because that will clash with the string type conversion of a <xref:System.Windows.Vector> attribute value into the <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> components.</span></span>  
  
<a name="xamlAttributeUsage_Vector"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a3ca7-108">Verwendung von XAML-Attributen</span><span class="sxs-lookup"><span data-stu-id="a3ca7-108">XAML Attribute Usage</span></span>  
  
```  
<object property="x,y"/>  
-or-  
<object property="x y"/>  
```  
  
<a name="xamlValues_Vector"></a>   
## <a name="xaml-values"></a><span data-ttu-id="a3ca7-109">XAML-Werte</span><span class="sxs-lookup"><span data-stu-id="a3ca7-109">XAML Values</span></span>  
 <span data-ttu-id="a3ca7-110">*w*</span><span class="sxs-lookup"><span data-stu-id="a3ca7-110">*x*</span></span>  
 <span data-ttu-id="a3ca7-111">Des Vektors der X-Komponente.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-111">The vector's X component.</span></span> <span data-ttu-id="a3ca7-112">Weitere Informationen finden Sie in den Ausführungen zur <xref:System.Windows.Vector.X%2A>-Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-112">For more information, see the <xref:System.Windows.Vector.X%2A> property.</span></span>  
  
 <span data-ttu-id="a3ca7-113">*y*</span><span class="sxs-lookup"><span data-stu-id="a3ca7-113">*y*</span></span>  
 <span data-ttu-id="a3ca7-114">Y-Komponente des Vektors.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-114">The vector's Y component.</span></span> <span data-ttu-id="a3ca7-115">Weitere Informationen finden Sie in den Ausführungen zur <xref:System.Windows.Vector.Y%2A>-Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-115">For more information, see the <xref:System.Windows.Vector.Y%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3ca7-116">Das folgende Beispiel veranschaulicht das Hinzufügen zwei <xref:System.Windows.Vector> Strukturen.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-116">The following example shows how to add two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorSample#10](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorSample/CSharp/Window1.xaml.cs#10)]
 [!code-vb[VectorSample#10](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorSample/visualbasic/window1.xaml.vb#10)]  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Windows.Vector.Add" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Vector (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 x, float64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.#ctor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (x As Double, y As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Vector(double x, double y);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="a3ca7-117">Der <see cref="P:System.Windows.Vector.X" />-Offset des neuen <see cref="T:System.Windows.Vector" />.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-117">The <see cref="P:System.Windows.Vector.X" />-offset of the new <see cref="T:System.Windows.Vector" />.</span></span></param>
        <param name="y"><span data-ttu-id="a3ca7-118">Der <see cref="P:System.Windows.Vector.Y" />-Offset des neuen <see cref="T:System.Windows.Vector" />.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-118">The <see cref="P:System.Windows.Vector.Y" />-offset of the new <see cref="T:System.Windows.Vector" />.</span></span></param>
        <summary><span data-ttu-id="a3ca7-119">Initialisiert eine neue Instanz der <see cref="T:System.Windows.Vector" />-Struktur.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-119">Initializes a new instance of the <see cref="T:System.Windows.Vector" /> structure.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a3ca7-120">Im folgende Beispiel wird gezeigt, wie zwei Vektoren erstellen und anschließend addiert wird.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-120">The following example shows how to create two vectors and add them together.</span></span>  
  
 [!code-csharp[VectorExamples_snip#AddTwoVectorsExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#addtwovectorsexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a3ca7-121">Fügt einem Punkt oder einem anderen Vektor einen Vektor hinzu.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-121">Adds a vector to a point or to another vector.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Windows.Point Add (System.Windows.Vector vector, System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Point Add(valuetype System.Windows.Vector vector, valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Point Add(System::Windows::Vector vector, System::Windows::Point point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="a3ca7-122">Der Betrag, um den der angegebene Punkt verschoben werden soll.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-122">The amount to translate the specified point.</span></span></param>
        <param name="point"><span data-ttu-id="a3ca7-123">Der zu verschiebende Punkt.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-123">The point to translate.</span></span></param>
        <summary><span data-ttu-id="a3ca7-124">Verschiebt den angegebenen Punkt um den angegebenen Vektor und gibt den sich ergebenden Punkt zurück.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-124">Translates the specified point by the specified vector and returns the resulting point.</span></span></summary>
        <returns><span data-ttu-id="a3ca7-125">Das Ergebnis der Verschiebung von <paramref name="point" /> um <paramref name="vector" />.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-125">The result of translating <paramref name="point" /> by <paramref name="vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a3ca7-126">Im folgende Beispiel wird gezeigt, wie diese Methode verwendet wird, zum Hinzufügen einer <xref:System.Windows.Point> -Struktur in eine <xref:System.Windows.Vector> Struktur.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-126">The following example shows how to use this method to add a <xref:System.Windows.Point> structure to a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#AddPointAndVectorExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#addpointandvectorexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Add" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Add (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Add(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (vector1 As Vector, vector2 As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Add(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="a3ca7-127">Der erste zu addierende Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-127">The first vector to add.</span></span></param>
        <param name="vector2"><span data-ttu-id="a3ca7-128">Der zweite zu addierende Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-128">The second vector to add.</span></span></param>
        <summary><span data-ttu-id="a3ca7-129">Fügt zwei Vektoren hinzu und gibt das Ergebnis als <see cref="T:System.Windows.Vector" />-Struktur zurück.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-129">Adds two vectors and returns the result as a <see cref="T:System.Windows.Vector" /> structure.</span></span></summary>
        <returns><span data-ttu-id="a3ca7-130">Die Summe von <paramref name="vector1" /> und <paramref name="vector2" />.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-130">The sum of <paramref name="vector1" /> and <paramref name="vector2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a3ca7-131">Im folgende Beispiel wird gezeigt, wie diese Methode verwendet, um zwei <xref:System.Windows.Vector> Strukturen.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-131">The following example shows how to use this method to add two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorExamples_snip#AddTwoVectorsExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#addtwovectorsexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Add" />
      </Docs>
    </Member>
    <Member MemberName="AngleBetween">
      <MemberSignature Language="C#" Value="public static double AngleBetween (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 AngleBetween(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.AngleBetween(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AngleBetween (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double AngleBetween(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="a3ca7-132">Der erste auszuwertende Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-132">The first vector to evaluate.</span></span></param>
        <param name="vector2"><span data-ttu-id="a3ca7-133">Der zweite auszuwertende Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-133">The second vector to evaluate.</span></span></param>
        <summary><span data-ttu-id="a3ca7-134">Ruft den in Grad ausgedrückten Winkel zwischen den zwei angegebenen Vektoren ab.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-134">Retrieves the angle, expressed in degrees, between the two specified vectors.</span></span></summary>
        <returns><span data-ttu-id="a3ca7-135">Der Winkel zwischen <paramref name="vector1" /> und <paramref name="vector2" /> in Grad.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-135">The angle, in degrees, between <paramref name="vector1" /> and <paramref name="vector2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a3ca7-136">Im folgende Beispiel wird gezeigt, wie diese Methode verwendet zum Abrufen des Winkels zwischen zwei <xref:System.Windows.Vector> Strukturen.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-136">The following example shows how to use this method to get the angle between two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorExamples_snip#AngleBetweenExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#anglebetweenexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CrossProduct">
      <MemberSignature Language="C#" Value="public static double CrossProduct (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 CrossProduct(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.CrossProduct(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CrossProduct (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double CrossProduct(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="a3ca7-137">Der erste auszuwertende Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-137">The first vector to evaluate.</span></span></param>
        <param name="vector2"><span data-ttu-id="a3ca7-138">Der zweite auszuwertende Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-138">The second vector to evaluate.</span></span></param>
        <summary><span data-ttu-id="a3ca7-139">Berechnet das Kreuzprodukt zweier Vektoren.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-139">Calculates the cross product of two vectors.</span></span></summary>
        <returns><span data-ttu-id="a3ca7-140">Das Kreuzprodukt von <paramref name="vector1" /> und <paramref name="vector2" />.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-140">The cross product of <paramref name="vector1" /> and <paramref name="vector2" />.</span></span> <span data-ttu-id="a3ca7-141">Das Kreuzprodukt wird mithilfe der folgenden Formel berechnet:</span><span class="sxs-lookup"><span data-stu-id="a3ca7-141">The following formula is used to calculate the cross product:</span></span>  
  
 <span data-ttu-id="a3ca7-142"><c>(Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)</c></span><span class="sxs-lookup"><span data-stu-id="a3ca7-142"><c>(Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)</c></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a3ca7-143">Im folgende Beispiel wird gezeigt, wie diese Methode verwendet wird, berechnet das Kreuzprodukt zweier <xref:System.Windows.Vector> Strukturen.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-143">The following example shows how to use this method to calculate the cross product of two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorExamples_snip#CrossProductExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#crossproductexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Determinant">
      <MemberSignature Language="C#" Value="public static double Determinant (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Determinant(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Determinant(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Determinant (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Determinant(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="a3ca7-144">Der erste auszuwertende Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-144">The first vector to evaluate.</span></span></param>
        <param name="vector2"><span data-ttu-id="a3ca7-145">Der zweite auszuwertende Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-145">The second vector to evaluate.</span></span></param>
        <summary><span data-ttu-id="a3ca7-146">Berechnet die Determinante von zwei Vektoren.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-146">Calculates the determinant of two vectors.</span></span></summary>
        <returns><span data-ttu-id="a3ca7-147">Die Determinante von <paramref name="vector1" /> und <paramref name="vector2" />.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-147">The determinant of <paramref name="vector1" /> and <paramref name="vector2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a3ca7-148">Im folgende Beispiel wird gezeigt, wie die Determinante von zwei berechnet <xref:System.Windows.Vector> Strukturen.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-148">The following example shows how to calculate the determinant of two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorExamples_snip#DeterminantExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#determinantexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Divide (System.Windows.Vector vector, double scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Divide(valuetype System.Windows.Vector vector, float64 scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Divide(System.Windows.Vector,System.Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Divide(System::Windows::Vector vector, double scalar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="a3ca7-149">Die zu dividierende Vektorstruktur.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-149">The vector structure to divide.</span></span></param>
        <param name="scalar"><span data-ttu-id="a3ca7-150">Der Betrag, durch den <c>vector</c> dividiert wird.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-150">The amount by which <c>vector</c> is divided.</span></span></param>
        <summary><span data-ttu-id="a3ca7-151">Dividiert den angegebenen Vektor durch die angegebene Skalarzahl und gibt das Ergebnis als <see cref="T:System.Windows.Vector" /> zurück.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-151">Divides the specified vector by the specified scalar and returns the result as a <see cref="T:System.Windows.Vector" />.</span></span></summary>
        <returns><span data-ttu-id="a3ca7-152">Das Ergebnis der Division von <paramref name="vector" /> durch <paramref name="scalar" />.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-152">The result of dividing <paramref name="vector" /> by <paramref name="scalar" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a3ca7-153">Im folgende Beispiel wird gezeigt, wie diese Methode verwendet, um unterteilen eine <xref:System.Windows.Vector> mit einem Skalarwert.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-153">The following example shows how to use this method to divide a <xref:System.Windows.Vector> by a scalar.</span></span>  
  
 [!code-csharp[VectorExamples_snip#DivideExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#divideexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a3ca7-154">Überprüft zwei Vektoren auf Gleichheit.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-154">Compares two vectors for equality.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3ca7-155">Eines Vektors <xref:System.Windows.Vector.X%2A> und <xref:System.Windows.Vector.Y%2A> Eigenschaften werden mithilfe von beschrieben <xref:System.Double> Werte.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-155">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="a3ca7-156">Da der Wert des einem <xref:System.Double> abnehmen kann, wenn arithmetische Operationen, darauf, eines Vergleichs zwischen zwei ausgeführt werden <xref:System.Double> fehlschlagen, Strukturen, die logisch gleich sind.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-156">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Double> structures that are logically equal might fail.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="a3ca7-157">Der zu vergleichende Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-157">The vector to compare.</span></span></param>
        <summary><span data-ttu-id="a3ca7-158">Bestimmt, ob das angegebene <see cref="T:System.Object" /> eine <see cref="T:System.Windows.Vector" />-Struktur ist. Wenn dies der Fall ist, wird überprüft, ob der <see cref="P:System.Windows.Vector.X" />-Wert und der <see cref="P:System.Windows.Vector.Y" />-Wert mit den Werten des Vektors übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-158">Determines whether the specified <see cref="T:System.Object" /> is a <see cref="T:System.Windows.Vector" /> structure and, if it is, whether it has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector.</span></span></summary>
        <returns>
          <span data-ttu-id="a3ca7-159"><see langword="true" />, wenn <paramref name="o" /> ein <see cref="T:System.Windows.Vector" /> mit dem gleichen <see cref="P:System.Windows.Vector.X" />-Wert und dem gleichen <see cref="P:System.Windows.Vector.Y" />-Wert wie dieser Vektor ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-159"><see langword="true" /> if <paramref name="o" /> is a <see cref="T:System.Windows.Vector" /> and has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3ca7-160">Eines Vektors <xref:System.Windows.Vector.X%2A> und <xref:System.Windows.Vector.Y%2A> Eigenschaften werden mithilfe von beschrieben <xref:System.Double> Werte.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-160">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="a3ca7-161">Da der Wert des einem <xref:System.Double> abnehmen kann, wenn arithmetische Operationen, darauf, eines Vergleichs zwischen zwei ausgeführt werden <xref:System.Windows.Vector> fehlschlagen, Strukturen, die logisch gleich sind.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-161">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3ca7-162">Im folgende Beispiel wird gezeigt, wie diese Methode verwendet, um zu überprüfen, ob eine <xref:System.Windows.Vector> und ein <xref:System.Object> gleich sind.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-162">The following example shows how to use this method to check whether a <xref:System.Windows.Vector> and an <xref:System.Object> are equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#EqualsExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#equalsexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Windows.Vector value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Windows.Vector value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Equals(System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As Vector) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Windows::Vector value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a3ca7-163">Der mit diesem Vektor zu vergleichende Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-163">The vector to compare with this vector.</span></span></param>
        <summary><span data-ttu-id="a3ca7-164">Überprüft zwei Vektoren auf Gleichheit.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-164">Compares two vectors for equality.</span></span></summary>
        <returns>
          <span data-ttu-id="a3ca7-165"><see langword="true" />, wenn <paramref name="value" /> den gleichen <see cref="P:System.Windows.Vector.X" />-Wert und <see cref="P:System.Windows.Vector.Y" />-Wert wie dieser Vektor aufweist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-165"><see langword="true" /> if <paramref name="value" /> has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3ca7-166">Eines Vektors <xref:System.Windows.Vector.X%2A> und <xref:System.Windows.Vector.Y%2A> Eigenschaften werden mithilfe von beschrieben <xref:System.Double> Werte.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-166">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="a3ca7-167">Da der Wert des einem <xref:System.Double> abnehmen kann, wenn arithmetische Operationen, darauf, eines Vergleichs zwischen zwei ausgeführt werden <xref:System.Windows.Vector> fehlschlagen, Strukturen, die logisch gleich sind.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-167">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3ca7-168">Im folgende Beispiel wird gezeigt, wie diese Methode verwendet, um zu überprüfen, ob zwei <xref:System.Windows.Vector> -Strukturen gleich sind.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-168">The following example shows how to use this method to check whether two <xref:System.Windows.Vector> structures are equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#EqualsExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#equalsexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Equals(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (vector1 As Vector, vector2 As Vector) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="a3ca7-169">Der erste zu vergleichende Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-169">The first vector to compare.</span></span></param>
        <param name="vector2"><span data-ttu-id="a3ca7-170">Der zweite zu vergleichende Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-170">The second vector to compare.</span></span></param>
        <summary><span data-ttu-id="a3ca7-171">Vergleicht die beiden angegebenen Vektoren auf Gleichheit.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-171">Compares the two specified vectors for equality.</span></span></summary>
        <returns>
          <span data-ttu-id="a3ca7-172"><see langword="true" />, wenn die <see cref="P:System.Windows.Vector.X" />-Komponente und die <see cref="P:System.Windows.Vector.Y" />-Komponente von <paramref name="vector1" /> und <paramref name="vector2" /> gleich sind, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-172"><see langword="true" /> if t he <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3ca7-173">Eines Vektors <xref:System.Windows.Vector.X%2A> und <xref:System.Windows.Vector.Y%2A> Eigenschaften werden mithilfe von beschrieben <xref:System.Double> Werte.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-173">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="a3ca7-174">Da der Wert des einem <xref:System.Double> abnehmen kann, wenn arithmetische Operationen, darauf, eines Vergleichs zwischen zwei ausgeführt werden <xref:System.Double> fehlschlagen, Strukturen, die logisch gleich sind.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-174">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Double> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3ca7-175">Im folgende Beispiel wird gezeigt, wie diese Methode verwendet, um zu überprüfen, ob zwei <xref:System.Windows.Vector> -Strukturen gleich sind.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-175">The following example shows how to use this method to check whether two <xref:System.Windows.Vector> structures are equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#EqualsExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#equalsexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a3ca7-176">Gibt den Hashcode für diesen Vektor zurück.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-176">Returns the hash code for this vector.</span></span></summary>
        <returns><span data-ttu-id="a3ca7-177">Der Hashcode für diese Instanz.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-177">The hash code for this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a3ca7-178">Im folgende Beispiel wird gezeigt, wie den Hashcode des abzurufenden eine <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-178">The following example shows how to get the hash code of a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#GetHashCodeExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#gethashcodeexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public double Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Vector.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Length { double get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a3ca7-179">Ruft die Länge dieses Vektors ab.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-179">Gets the length of this vector.</span></span></summary>
        <value><span data-ttu-id="a3ca7-180">Die Länge dieses Vektors.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-180">The length of this vector.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3ca7-181">Die Länge des Vektors wird manchmal als die Größenordnung bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-181">The length of a vector is sometimes referred to as the magnitude.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3ca7-182">Im folgenden Beispiel gezeigt verwenden wie diese Eigenschaft zum Abrufen der Länge des Vektors.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-182">The following example shows how use this property to get the length of a vector.</span></span>  
  
 [!code-csharp[VectorExamples_snip#LengthExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#lengthexample)]
 [!code-vb[VectorExamples_snip#LengthExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#lengthexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LengthSquared">
      <MemberSignature Language="C#" Value="public double LengthSquared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 LengthSquared" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Vector.LengthSquared" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LengthSquared As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double LengthSquared { double get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a3ca7-183">Ruft das Quadrat der Länge dieses Vektors ab.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-183">Gets the square of the length of this vector.</span></span></summary>
        <value><span data-ttu-id="a3ca7-184">Das Quadrat der <see cref="P:System.Windows.Vector.Length" /> dieses Vektors.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-184">The square of the <see cref="P:System.Windows.Vector.Length" /> of this vector.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3ca7-185">Die Länge des Vektors wird manchmal als seine Größe, bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-185">The length of a vector is sometimes referred to as its magnitude.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3ca7-186">Das folgende Beispiel zeigt, wie diese Eigenschaft verwendet, um das Quadrat der Länge des Vektors abzurufen.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-186">The following example shows how to use this property to get the square of the length of a vector.</span></span>  
  
 [!code-csharp[VectorExamples_snip#LengthSquaredExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#lengthsquaredexample)]
 [!code-vb[VectorExamples_snip#LengthSquaredExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#lengthsquaredexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Multiply">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a3ca7-187">Multipliziert den angegebenen Vektor mit dem angegebenen <see cref="T:System.Double" />, der angegebenen <see cref="T:System.Windows.Media.Matrix" /> oder einem <see cref="T:System.Windows.Vector" /> und gibt das Ergebnis als <see cref="T:System.Windows.Vector" /> oder <see cref="T:System.Double" /> zurück.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-187">Multiplies the specified vector by the specified <see cref="T:System.Double" />, <see cref="T:System.Windows.Media.Matrix" />, or <see cref="T:System.Windows.Vector" /> and returns the result as a <see cref="T:System.Windows.Vector" /> or <see cref="T:System.Double" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Multiply (double scalar, System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Multiply(float64 scalar, valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Multiply(double scalar, System::Windows::Vector vector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scalar" Type="System.Double" />
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="scalar"><span data-ttu-id="a3ca7-188">Der zu multiplizierende Skalar.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-188">The scalar to multiply.</span></span></param>
        <param name="vector"><span data-ttu-id="a3ca7-189">Der zu multiplizierende Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-189">The vector to multiply.</span></span></param>
        <summary><span data-ttu-id="a3ca7-190">Multipliziert den angegebenen Skalar mit dem angegebenen Vektor und gibt den sich ergebenden <see cref="T:System.Windows.Vector" /> zurück.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-190">Multiplies the specified scalar by the specified vector and returns the resulting <see cref="T:System.Windows.Vector" />.</span></span></summary>
        <returns><span data-ttu-id="a3ca7-191">Das Ergebnis der Multiplikation von <paramref name="scalar" /> und <paramref name="vector" />.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-191">The result of multiplying <paramref name="scalar" /> and <paramref name="vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a3ca7-192">Das folgende Beispiel zeigt, wie diese Methode einen Skalar durch Multiplizieren mit einer <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-192">The following example shows how to use this method to multiply a scalar by a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#MultiplyVectorByScalarExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#multiplyvectorbyscalarexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Multiply (System.Windows.Vector vector, double scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Multiply(valuetype System.Windows.Vector vector, float64 scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Multiply(System::Windows::Vector vector, double scalar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="a3ca7-193">Der zu multiplizierende Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-193">The vector to multiply.</span></span></param>
        <param name="scalar"><span data-ttu-id="a3ca7-194">Der zu multiplizierende Skalar.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-194">The scalar to multiply.</span></span></param>
        <summary><span data-ttu-id="a3ca7-195">Multipliziert den angegebenen Vektor mit dem angegebenen Skalar und gibt den sich ergebenden <see cref="T:System.Windows.Vector" /> zurück.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-195">Multiplies the specified vector by the specified scalar and returns the resulting <see cref="T:System.Windows.Vector" />.</span></span></summary>
        <returns><span data-ttu-id="a3ca7-196">Das Ergebnis der Multiplikation von <paramref name="vector" /> und <paramref name="scalar" />.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-196">The result of multiplying <paramref name="vector" /> and <paramref name="scalar" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a3ca7-197">Im folgende Beispiel wird gezeigt, wie diese Methode verwendet wird, multipliziert eine <xref:System.Windows.Vector> mit einem Skalarwert.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-197">The following example shows how to use this method to multiply a <xref:System.Windows.Vector> by a scalar.</span></span>  
  
 [!code-csharp[VectorExamples_snip#MultiplyVectorByScalarExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#multiplyvectorbyscalarexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Multiply (System.Windows.Vector vector, System.Windows.Media.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Multiply(valuetype System.Windows.Vector vector, valuetype System.Windows.Media.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Media.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Multiply(System::Windows::Vector vector, System::Windows::Media::Matrix matrix);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="matrix" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="a3ca7-198">Die zu transformierende Vektorstruktur.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-198">The vector structure to transform.</span></span></param>
        <param name="matrix"><span data-ttu-id="a3ca7-199">Die auf <c>vector</c> anzuwendende Transformation.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-199">The transformation to apply to <c>vector</c>.</span></span></param>
        <summary><span data-ttu-id="a3ca7-200">Transformiert den Koordinatenbereich des angegebenen Vektors mithilfe der angegebenen <see cref="T:System.Windows.Media.Matrix" />.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-200">Transforms the coordinate space of the specified vector using the specified <see cref="T:System.Windows.Media.Matrix" />.</span></span></summary>
        <returns><span data-ttu-id="a3ca7-201">Das Ergebnis der Transformation von <paramref name="vector" /> um <paramref name="matrix" />.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-201">The result of transforming <paramref name="vector" /> by <paramref name="matrix" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a3ca7-202">Im folgende Beispiel wird gezeigt, wie diese Methode verwendet wird, multipliziert eine <xref:System.Windows.Vector> durch eine <xref:System.Windows.Media.Matrix>.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-202">The following example shows how to use this method to multiply a <xref:System.Windows.Vector> by a <xref:System.Windows.Media.Matrix>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#MultiplyVectorByMatrixExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#multiplyvectorbymatrixexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static double Multiply (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Multiply(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Multiply(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="a3ca7-203">Der erste zu multiplizierende Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-203">The first vector to multiply.</span></span></param>
        <param name="vector2"><span data-ttu-id="a3ca7-204">Die zweite zu multiplizierende Vektorstruktur.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-204">The second vector structure to multiply.</span></span></param>
        <summary><span data-ttu-id="a3ca7-205">Berechnet das Skalarprodukt von zwei angegebenen Vektoren und gibt das Ergebnis als <see cref="T:System.Double" /> zurück.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-205">Calculates the dot product of the two specified vectors and returns the result as a <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="a3ca7-206">Ein <see cref="T:System.Double" /> mit dem Skalarprodukt von <paramref name="vector1" /> und <paramref name="vector2" />, das mit der folgenden Formel berechnet wird:</span><span class="sxs-lookup"><span data-stu-id="a3ca7-206">A <see cref="T:System.Double" /> containing the scalar dot product of <paramref name="vector1" /> and <paramref name="vector2" />, which is calculated using the following formula:</span></span>  
  
 <span data-ttu-id="a3ca7-207"><c>(vector1.X * vector2.X) + (vector1.Y * vector2.Y)</c></span><span class="sxs-lookup"><span data-stu-id="a3ca7-207"><c>(vector1.X * vector2.X) + (vector1.Y * vector2.Y)</c></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a3ca7-208">Im folgende Beispiel wird gezeigt, wie diese Methode verwendet wird, multipliziert eine <xref:System.Windows.Vector> durch eine <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-208">The following example shows how to use this method to multiply a <xref:System.Windows.Vector> by a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#GetDotProductExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#getdotproductexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public void Negate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Negate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Negate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Negate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Negate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a3ca7-209">Negiert diesen Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-209">Negates this vector.</span></span> <span data-ttu-id="a3ca7-210">Der Vektor weist denselben Betrag wie zuvor, doch die entgegengesetzte Richtung auf.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-210">The vector has the same magnitude as before, but its direction is now opposite.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a3ca7-211">Im folgende Beispiel wird gezeigt, wie diese Methode, die um zu negierende Vektor verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-211">The following example shows how to use this method to negate a vector.</span></span>  
  
 [!code-csharp[VectorExamples_snip#NegateExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#negateexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Normalize">
      <MemberSignature Language="C#" Value="public void Normalize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Normalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Normalize" />
      <MemberSignature Language="VB.NET" Value="Public Sub Normalize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Normalize();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a3ca7-212">Normalisiert diesen Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-212">Normalizes this vector.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3ca7-213">Ein normalisierter Vektor behält seine Richtung jedoch <xref:System.Windows.Vector.Length%2A> ist 1.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-213">A normalized vector maintains its direction but its <xref:System.Windows.Vector.Length%2A> becomes 1.</span></span> <span data-ttu-id="a3ca7-214">Der Ergebnisvektor wird einen Einheitsvektor häufig aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-214">The resulting vector is often called a unit vector.</span></span> <span data-ttu-id="a3ca7-215">Ein Vektor wird durch Dividieren des Vektors durch seine eigene normalisiert <xref:System.Windows.Vector.Length%2A>.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-215">A vector is normalized by dividing the vector by its own <xref:System.Windows.Vector.Length%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3ca7-216">Im folgende Beispiel wird gezeigt, wie diese Methode, die um zu normalisierende Vektor verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-216">The following example shows how to use this method to normalize a vector.</span></span>  
  
 [!code-csharp[VectorExamples_snip#NormalizeExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#normalizeexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Addition">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a3ca7-217">Fügt einem Punkt oder einem anderen Vektor einen Vektor hinzu.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-217">Adds a vector to a point or to another vector.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Windows.Point operator + (System.Windows.Vector vector, System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Point op_Addition(valuetype System.Windows.Vector vector, valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Point operator +(System::Windows::Vector vector, System::Windows::Point point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="a3ca7-218">Der Vektor, der zum Verschieben von <c>point</c> verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-218">The vector used to translate <c>point</c>.</span></span></param>
        <param name="point"><span data-ttu-id="a3ca7-219">Der zu verschiebende Punkt.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-219">The point to translate.</span></span></param>
        <summary><span data-ttu-id="a3ca7-220">Verschiebt einen Punkt um den angegebenen Vektor und gibt den sich ergebenden Punkt zurück.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-220">Translates a point by the specified vector and returns the resulting point.</span></span></summary>
        <returns><span data-ttu-id="a3ca7-221">Das Ergebnis der Verschiebung von <paramref name="point" /> um <paramref name="vector" />.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-221">The result of translating <paramref name="point" /> by <paramref name="vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a3ca7-222">Im folgende Beispiel wird gezeigt, wie mithilfe dieses Operators (+) übersetzt eine <xref:System.Windows.Point> -Struktur in eine <xref:System.Windows.Vector> Struktur.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-222">The following example shows how to use this operator (+) to translate a <xref:System.Windows.Point> structure to a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedAdditionOperatorExample2](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedadditionoperatorexample2)]
 [!code-vb[VectorExamples_snip#OverloadedAdditionOperatorExample2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedadditionoperatorexample2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Add" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator + (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Addition(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (vector1 As Vector, vector2 As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator +(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="a3ca7-223">Der erste zu addierende Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-223">The first vector to add.</span></span></param>
        <param name="vector2"><span data-ttu-id="a3ca7-224">Der zweite zu addierende Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-224">The second vector to add.</span></span></param>
        <summary><span data-ttu-id="a3ca7-225">Addiert zwei Vektoren und gibt das Ergebnis als Vektor zurück.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-225">Adds two vectors and returns the result as a vector.</span></span></summary>
        <returns><span data-ttu-id="a3ca7-226">Die Summe von <paramref name="vector1" /> und <paramref name="vector2" />.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-226">The sum of <paramref name="vector1" /> and <paramref name="vector2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a3ca7-227">Im folgende Beispiel wird gezeigt, wie mithilfe dieses Operators (+), um zwei <xref:System.Windows.Vector> Strukturen und der Rückgabewert eine <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-227">The following example shows how to use this operator (+) to add two <xref:System.Windows.Vector> structures and return a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedAdditionOperatorExample1](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedadditionoperatorexample1)]
 [!code-vb[VectorExamples_snip#OverloadedAdditionOperatorExample1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedadditionoperatorexample1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Add" />
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator / (System.Windows.Vector vector, double scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Division(valuetype System.Windows.Vector vector, float64 scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator /(System::Windows::Vector vector, double scalar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="a3ca7-228">Der zu dividierende Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-228">The vector to divide.</span></span></param>
        <param name="scalar"><span data-ttu-id="a3ca7-229">Der Skalar, durch den <c>vector</c> dividiert wird.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-229">The scalar by which <c>vector</c> will be divided.</span></span></param>
        <summary><span data-ttu-id="a3ca7-230">Dividiert den angegebenen Vektor durch den angegebenen Skalar und gibt den sich ergebenden Vektor zurück.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-230">Divides the specified vector by the specified scalar and returns the resulting vector.</span></span></summary>
        <returns><span data-ttu-id="a3ca7-231">Das Ergebnis der Division von <paramref name="vector" /> durch <paramref name="scalar" />.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-231">The result of dividing <paramref name="vector" /> by <paramref name="scalar" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a3ca7-232">Im folgende Beispiel wird gezeigt, wie mithilfe dieses Operators (/) dividiert eine <xref:System.Windows.Vector> Struktur mit einem Skalarwert.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-232">The following example shows how to use this operator (/) to divide a <xref:System.Windows.Vector> structure by a scalar.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedDivisionOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadeddivisionoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedDivisionOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadeddivisionoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Divide(System.Windows.Vector,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (vector1 As Vector, vector2 As Vector) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="a3ca7-233">Der erste zu vergleichende Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-233">The first vector to compare.</span></span></param>
        <param name="vector2"><span data-ttu-id="a3ca7-234">Der zweite zu vergleichende Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-234">The second vector to compare.</span></span></param>
        <summary><span data-ttu-id="a3ca7-235">Überprüft zwei Vektoren auf Gleichheit.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-235">Compares two vectors for equality.</span></span></summary>
        <returns>
          <span data-ttu-id="a3ca7-236"><see langword="true" />, wenn die <see cref="P:System.Windows.Vector.X" />-Komponente und die <see cref="P:System.Windows.Vector.Y" />-Komponente von <paramref name="vector1" /> und <paramref name="vector2" /> gleich sind, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-236"><see langword="true" /> if the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3ca7-237">Eines Vektors <xref:System.Windows.Vector.X%2A> und <xref:System.Windows.Vector.Y%2A> Eigenschaften werden mithilfe von beschrieben <xref:System.Double> Werte.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-237">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="a3ca7-238">Da der Wert des einem <xref:System.Double> abnehmen kann, wenn arithmetische Operationen, darauf, eines Vergleichs zwischen zwei ausgeführt werden <xref:System.Windows.Vector> fehlschlagen, Strukturen, die logisch gleich sind.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-238">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3ca7-239">Im folgende Beispiel wird gezeigt, wie mithilfe dieses Operators (==), um zu überprüfen, ob zwei <xref:System.Windows.Vector> -Strukturen gleich sind.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-239">The following example shows how to use this operator (==) to check whether two <xref:System.Windows.Vector> structures are equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedEqualityOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedequalityoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedEqualityOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedequalityoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Equals" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Explicit">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a3ca7-240">Konvertiert einen Vektor in eine <see cref="T:System.Windows.Size" /> oder einen <see cref="T:System.Windows.Point" />.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-240">Converts a vector into a <see cref="T:System.Windows.Size" /> or a <see cref="T:System.Windows.Point" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Windows.Point (System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Point op_Explicit(valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Windows::Point(System::Windows::Vector vector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="a3ca7-241">Der zu konvertierende Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-241">The vector to convert.</span></span></param>
        <summary><span data-ttu-id="a3ca7-242">Erstellt einen <see cref="T:System.Windows.Point" /> mit dem <see cref="P:System.Windows.Vector.X" />-Wert und dem <see cref="P:System.Windows.Vector.Y" />-Wert dieses Vektors.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-242">Creates a <see cref="T:System.Windows.Point" /> with the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this vector.</span></span></summary>
        <returns><span data-ttu-id="a3ca7-243">Ein Punkt, dessen <see cref="P:System.Windows.Point.X" />-Koordinatenwert und <see cref="P:System.Windows.Point.Y" />-Koordinatenwert den Offsetwerten <see cref="P:System.Windows.Vector.X" /> und <see cref="P:System.Windows.Vector.Y" /> von <paramref name="vector" /> entsprechen.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-243">A point with <see cref="P:System.Windows.Point.X" />- and <see cref="P:System.Windows.Point.Y" />-coordinate values equal to the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> offset values of <paramref name="vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a3ca7-244">Im folgende Beispiel wird gezeigt, wie zum Konvertieren einer <xref:System.Windows.Vector> in einem <xref:System.Windows.Point>.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-244">The following example shows how to convert a <xref:System.Windows.Vector> into a <xref:System.Windows.Point>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedExplicitOperatorExample2](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedexplicitoperatorexample2)]
 [!code-vb[VectorExamples_snip#OverloadedExplicitOperatorExample2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedexplicitoperatorexample2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Windows.Size (System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Size op_Explicit(valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Windows::Size(System::Windows::Vector vector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="a3ca7-245">Der zu konvertierende Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-245">The vector to convert.</span></span></param>
        <summary><span data-ttu-id="a3ca7-246">Erstellt eine <see cref="T:System.Windows.Size" /> aus den Offsets dieses Vektors.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-246">Creates a <see cref="T:System.Windows.Size" /> from the offsets of this vector.</span></span></summary>
        <returns><span data-ttu-id="a3ca7-247">Eine <see cref="T:System.Windows.Size" />, deren <see cref="P:System.Windows.Size.Width" /> dem absoluten Wert der <see cref="P:System.Windows.Vector.X" />-Eigenschaft dieses Vektors entspricht und deren <see cref="P:System.Windows.Size.Height" /> dem absoluten Wert der <see cref="P:System.Windows.Vector.Y" />-Eigenschaft dieses Vektors entspricht.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-247">A <see cref="T:System.Windows.Size" /> with a <see cref="P:System.Windows.Size.Width" /> equal to the absolute value of this vector's <see cref="P:System.Windows.Vector.X" /> property and a <see cref="P:System.Windows.Size.Height" /> equal to the absolute value of this vector's <see cref="P:System.Windows.Vector.Y" /> property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a3ca7-248">Im folgende Beispiel wird gezeigt, wie zur expliziten Konvertierung einer <xref:System.Windows.Vector> in einem <xref:System.Windows.Size>.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-248">The following example shows how to explicitly convert a <xref:System.Windows.Vector> into a <xref:System.Windows.Size>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedExplicitOperatorExample1](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedexplicitoperatorexample1)]
 [!code-vb[VectorExamples_snip#OverloadedExplicitOperatorExample1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedexplicitoperatorexample1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Inequality(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (vector1 As Vector, vector2 As Vector) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="a3ca7-249">Der erste zu vergleichende Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-249">The first vector to compare.</span></span></param>
        <param name="vector2"><span data-ttu-id="a3ca7-250">Der zweite zu vergleichende Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-250">The second vector to compare.</span></span></param>
        <summary><span data-ttu-id="a3ca7-251">Überprüft zwei Vektoren auf Ungleichheit.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-251">Compares two vectors for inequality.</span></span></summary>
        <returns>
          <span data-ttu-id="a3ca7-252"><see langword="true" />, wenn die <see cref="P:System.Windows.Vector.X" />-Komponente und die <see cref="P:System.Windows.Vector.Y" />-Komponente von <paramref name="vector1" /> und <paramref name="vector2" /> ungleich sind, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-252"><see langword="true" /> if the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are different; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3ca7-253">Eines Vektors <xref:System.Windows.Vector.X%2A> und <xref:System.Windows.Vector.Y%2A> Eigenschaften werden mithilfe von beschrieben <xref:System.Double> Werte.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-253">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="a3ca7-254">Da der Wert des einem <xref:System.Double> abnehmen kann, wenn arithmetische Operationen, darauf, eines Vergleichs zwischen zwei ausgeführt werden <xref:System.Windows.Vector> fehlschlagen, Strukturen, die logisch gleich sind.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-254">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3ca7-255">Im folgende Beispiel wird gezeigt, wie mithilfe dieses Operators (! =) überprüft, ob zwei <xref:System.Windows.Vector> -Strukturen ungleich sind.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-255">The following example shows how to use this operator (!=) to check whether two <xref:System.Windows.Vector> structures are not equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedInequalityOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedinequalityoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedInequalityOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedinequalityoperatorexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Multiply">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a3ca7-256">Multipliziert den angegebenen <see cref="T:System.Windows.Vector" /> mit dem angegebenen <see cref="T:System.Double" />, der <see cref="T:System.Windows.Media.Matrix" /> oder dem <see cref="T:System.Windows.Vector" /> und gibt das Ergebnis zurück.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-256">Multiplies the specified <see cref="T:System.Windows.Vector" /> by the specified <see cref="T:System.Double" />, <see cref="T:System.Windows.Media.Matrix" />, or <see cref="T:System.Windows.Vector" /> and returns the result.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator * (double scalar, System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Multiply(float64 scalar, valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator *(double scalar, System::Windows::Vector vector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scalar" Type="System.Double" />
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="scalar"><span data-ttu-id="a3ca7-257">Der zu multiplizierende Skalar.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-257">The scalar to multiply.</span></span></param>
        <param name="vector"><span data-ttu-id="a3ca7-258">Der zu multiplizierende Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-258">The vector to multiply.</span></span></param>
        <summary><span data-ttu-id="a3ca7-259">Multipliziert den angegebenen Skalar mit dem angegebenen Vektor und gibt den sich ergebenden Vektor zurück.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-259">Multiplies the specified scalar by the specified vector and returns the resulting vector.</span></span></summary>
        <returns><span data-ttu-id="a3ca7-260">Das Ergebnis der Multiplikation von <paramref name="scalar" /> und <paramref name="vector" />.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-260">The result of multiplying <paramref name="scalar" /> and <paramref name="vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a3ca7-261">Im folgende Beispiel wird gezeigt, wie mithilfe dieses Operators (\*) einen Skalar multipliziert durch eine <xref:System.Windows.Vector> Struktur.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-261">The following example shows how to use this operator (\*) to multiply a scalar by a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedMultiplicationOperatorExample2](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedmultiplicationoperatorexample2)]
 [!code-vb[VectorExamples_snip#OverloadedMultiplicationOperatorExample2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedmultiplicationoperatorexample2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator * (System.Windows.Vector vector, double scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Multiply(valuetype System.Windows.Vector vector, float64 scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator *(System::Windows::Vector vector, double scalar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="a3ca7-262">Der zu multiplizierende Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-262">The vector to multiply.</span></span></param>
        <param name="scalar"><span data-ttu-id="a3ca7-263">Der zu multiplizierende Skalar.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-263">The scalar to multiply.</span></span></param>
        <summary><span data-ttu-id="a3ca7-264">Multipliziert den angegebenen Vektor mit dem angegebenen Skalar und gibt den sich ergebenden Vektor zurück.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-264">Multiplies the specified vector by the specified scalar and returns the resulting vector.</span></span></summary>
        <returns><span data-ttu-id="a3ca7-265">Das Ergebnis der Multiplikation von <paramref name="vector" /> und <paramref name="scalar" />.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-265">The result of multiplying <paramref name="vector" /> and <paramref name="scalar" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a3ca7-266">Im folgende Beispiel wird gezeigt, wie mithilfe dieses Operators (\*) multipliziert eine <xref:System.Windows.Vector> Struktur mit einem Skalarwert.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-266">The following example shows how to use this operator (\*) to multiply a <xref:System.Windows.Vector> structure by a scalar.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedMultiplicationOperatorExample1](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedmultiplicationoperatorexample1)]
 [!code-vb[VectorExamples_snip#OverloadedMultiplicationOperatorExample1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedmultiplicationoperatorexample1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator * (System.Windows.Vector vector, System.Windows.Media.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Multiply(valuetype System.Windows.Vector vector, valuetype System.Windows.Media.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator *(System::Windows::Vector vector, System::Windows::Media::Matrix matrix);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="matrix" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="a3ca7-267">Der zu transformierende Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-267">The vector to transform.</span></span></param>
        <param name="matrix"><span data-ttu-id="a3ca7-268">Die auf <c>vector</c> anzuwendende Transformation.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-268">The transformation to apply to <c>vector</c>.</span></span></param>
        <summary><span data-ttu-id="a3ca7-269">Transformiert den Koordinatenbereich des angegebenen Vektors mithilfe der angegebenen <see cref="T:System.Windows.Media.Matrix" />.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-269">Transforms the coordinate space of the specified vector using the specified <see cref="T:System.Windows.Media.Matrix" />.</span></span></summary>
        <returns><span data-ttu-id="a3ca7-270">Das Ergebnis der Transformation von <paramref name="vector" /> um <paramref name="matrix" />.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-270">The result of transforming <paramref name="vector" /> by <paramref name="matrix" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a3ca7-271">Im folgende Beispiel wird gezeigt, wie mithilfe dieses Operators (\*) multipliziert eine <xref:System.Windows.Vector> Struktur durch eine <xref:System.Windows.Media.Matrix> Struktur.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-271">The following example shows how to use this operator (\*) to multiply a <xref:System.Windows.Vector> structure by a <xref:System.Windows.Media.Matrix> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedMultiplyVectorByMatrixOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedmultiplyvectorbymatrixoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedMultiplyVectorByMatrixOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedmultiplyvectorbymatrixoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static double operator * (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float64 op_Multiply(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double operator *(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="a3ca7-272">Der erste zu multiplizierende Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-272">The first vector to multiply.</span></span></param>
        <param name="vector2"><span data-ttu-id="a3ca7-273">Der zweite zu multiplizierende Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-273">The second vector to multiply.</span></span></param>
        <summary><span data-ttu-id="a3ca7-274">Berechnet das Skalarprodukt von zwei angegebenen Vektorstrukturen und gibt das Ergebnis als <see cref="T:System.Double" /> zurück.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-274">Calculates the dot product of the two specified vector structures and returns the result as a <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="a3ca7-275">Gibt ein <see cref="T:System.Double" /> mit dem Skalarprodukt von <paramref name="vector1" /> und <paramref name="vector2" />, das mit der folgenden Formel berechnet wird:</span><span class="sxs-lookup"><span data-stu-id="a3ca7-275">Returns a <see cref="T:System.Double" /> containing the scalar dot product of <paramref name="vector1" /> and <paramref name="vector2" />, which is calculated using the following formula:</span></span>  
  
 <span data-ttu-id="a3ca7-276"><c>vector1.X * vector2.X + vector1.Y * vector2.Y</c></span><span class="sxs-lookup"><span data-stu-id="a3ca7-276"><c>vector1.X * vector2.X + vector1.Y * vector2.Y</c></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a3ca7-277">Im folgende Beispiel wird gezeigt, wie mithilfe dieses Operators (\*) multipliziert eine <xref:System.Windows.Vector> Struktur durch eine <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-277">The following example shows how to use this operator (\*) to multiply a <xref:System.Windows.Vector> structure by a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedOperatorGetDotProductExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedoperatorgetdotproductexample)]
 [!code-vb[VectorExamples_snip#OverloadedOperatorGetDotProductExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedoperatorgetdotproductexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator - (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Subtraction(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (vector1 As Vector, vector2 As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator -(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="a3ca7-278">Der Vektor, von dem <c>vector2</c> subtrahiert wird.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-278">The vector from which <c>vector2</c> is subtracted.</span></span></param>
        <param name="vector2"><span data-ttu-id="a3ca7-279">Der Vektor, der von <c>vector1</c> subtrahiert wird.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-279">The vector to subtract from <c>vector1</c>.</span></span></param>
        <summary><span data-ttu-id="a3ca7-280">Subtrahiert einen angegebenen Vektor von einem anderen.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-280">Subtracts one specified vector from another.</span></span></summary>
        <returns><span data-ttu-id="a3ca7-281">Die Differenz zwischen <paramref name="vector1" /> und <paramref name="vector2" />.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-281">The difference between <paramref name="vector1" /> and <paramref name="vector2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a3ca7-282">Im folgende Beispiel wird gezeigt, wie mithilfe dieses Operators (-) um zu subtrahierenden eine <xref:System.Windows.Vector> Struktur aus einer <xref:System.Windows.Vector> Struktur.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-282">The following example shows how to use this operator (-) to subtract a <xref:System.Windows.Vector> structure from a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedSubtractionOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedsubtractionoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedSubtractionOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedsubtractionoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator - (System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_UnaryNegation(valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator -(System::Windows::Vector vector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="a3ca7-283">Der zu negierende Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-283">The vector to negate.</span></span></param>
        <summary><span data-ttu-id="a3ca7-284">Negiert den angegebenen Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-284">Negates the specified vector.</span></span></summary>
        <returns><span data-ttu-id="a3ca7-285">Ein Vektor, dessen <see cref="P:System.Windows.Vector.X" />-Wert und <see cref="P:System.Windows.Vector.Y" />-Wert das umgekehrte Vorzeichen des <see cref="P:System.Windows.Vector.X" />-Werts und des <see cref="P:System.Windows.Vector.Y" />-Werts von <paramref name="vector" /> aufweisen.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-285">A vector with <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values opposite of the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of <paramref name="vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a3ca7-286">Im folgende Beispiel wird gezeigt, wie mit diesem Negationsoperator um zu negierende eine <xref:System.Windows.Vector> Struktur.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-286">The following example shows how to use this negation operator to negate a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedNegationOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadednegationoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedNegationOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadednegationoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Negate" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Parse (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Parse(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (source As String) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Parse(System::String ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a3ca7-287">Die Zeichenfolgendarstellung des Vektors.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-287">The string representation of the vector.</span></span></param>
        <summary><span data-ttu-id="a3ca7-288">Konvertiert eine Zeichenfolgendarstellung eines Vektors in die entsprechende <see cref="T:System.Windows.Vector" />-Struktur.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-288">Converts a string representation of a vector into the equivalent <see cref="T:System.Windows.Vector" /> structure.</span></span></summary>
        <returns><span data-ttu-id="a3ca7-289">Die entsprechende <see cref="T:System.Windows.Vector" />-Struktur.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-289">The equivalent <see cref="T:System.Windows.Vector" /> structure.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a3ca7-290">Im folgende Beispiel wird gezeigt, wie diese Methode mithilfe eines Vektors in eine Zeichenfolgendarstellung Konvertieren einer <xref:System.Windows.Vector> Struktur.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-290">The following example shows how to use this method to convert a string representation of a vector into a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#ParseExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#parseexample)]
 [!code-vb[VectorExamples_snip#ParseExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#parseexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Subtract (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Subtract(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (vector1 As Vector, vector2 As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Subtract(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="a3ca7-291">Der Vektor, von dem <c>vector2</c> subtrahiert wird.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-291">The vector from which <c>vector2</c> is subtracted.</span></span></param>
        <param name="vector2"><span data-ttu-id="a3ca7-292">Der Vektor, der von <c>vector1</c> subtrahiert wird.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-292">The vector to subtract from <c>vector1</c>.</span></span></param>
        <summary><span data-ttu-id="a3ca7-293">Subtrahiert den angegebenen Vektor von einem anderen angegebenen Vektor.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-293">Subtracts the specified vector from another specified vector.</span></span></summary>
        <returns><span data-ttu-id="a3ca7-294">Die Differenz zwischen <paramref name="vector1" /> und <paramref name="vector2" />.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-294">The difference between <paramref name="vector1" /> and <paramref name="vector2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a3ca7-295">Im folgende Beispiel wird gezeigt, wie diese Methode verwendet werden soll eine <xref:System.Windows.Vector> Struktur aus einem <xref:System.Windows.Vector> Struktur.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-295">The following example shows how to use this method to subtract a <xref:System.Windows.Vector> structure from a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#SubtractExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#subtractexample)]
 [!code-vb[VectorExamples_snip#SubtractExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#subtractexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="System.IFormattable.ToString">
      <MemberSignature Language="C#" Value="string IFormattable.ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IFormattable.ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.System#IFormattable#ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (format As String, provider As IFormatProvider) As String Implements IFormattable.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IFormattable.ToString(System::String ^ format, IFormatProvider ^ provider) = IFormattable::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="a3ca7-296">Die Zeichenfolge, die das zu verwendende Format angibt.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-296">The string specifying the format to use.</span></span>  
  
 <span data-ttu-id="a3ca7-297">- oder - </span><span class="sxs-lookup"><span data-stu-id="a3ca7-297">-or-</span></span>  
  
 <span data-ttu-id="a3ca7-298"><see langword="null" />, wenn das für diese Art der <see cref="T:System.IFormattable" />-Implementierung definierte Standardformat verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-298"><see langword="null" /> to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</span></span></param>
        <param name="provider"><span data-ttu-id="a3ca7-299">Der zum Formatieren des Werts zu verwendende <see langword="IFormatProvider" />.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-299">The <see langword="IFormatProvider" /> to use to format the value.</span></span>  
  
 <span data-ttu-id="a3ca7-300">- oder - </span><span class="sxs-lookup"><span data-stu-id="a3ca7-300">-or-</span></span>  
  
 <span data-ttu-id="a3ca7-301"><see langword="null" />, wenn die Informationen über numerische Formate dem aktuellen Gebietsschema des Betriebssystems entnommen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-301"><see langword="null" /> to obtain the numeric format information from the current locale setting of the operating system.</span></span></param>
        <summary><span data-ttu-id="a3ca7-302">Dieser Member unterstützt die [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]-Infrastruktur und ist nicht für die direkte Verwendung im Code vorgesehen.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-302">This member supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.</span></span> <span data-ttu-id="a3ca7-303">Eine Beschreibung dieses Elements finden Sie unter <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-303">For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="a3ca7-304">Eine Zeichenfolge mit dem Wert der aktuellen Instanz im angegebenen Format.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-304">A string containing the value of the current instance in the specified format.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a3ca7-305">Gibt die Zeichenfolgendarstellung dieser <see cref="T:System.Windows.Vector" />-Struktur zurück.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-305">Returns the string representation of this <see cref="T:System.Windows.Vector" /> structure.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a3ca7-306">Gibt die Zeichenfolgendarstellung dieser <see cref="T:System.Windows.Vector" />-Struktur zurück.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-306">Returns the string representation of this <see cref="T:System.Windows.Vector" /> structure.</span></span></summary>
        <returns><span data-ttu-id="a3ca7-307">Eine Zeichenfolge, die den <see cref="P:System.Windows.Vector.X" />-Wert und den <see cref="P:System.Windows.Vector.Y" />-Wert dieses <see cref="T:System.Windows.Vector" /> darstellt.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-307">A string that represents the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this <see cref="T:System.Windows.Vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a3ca7-308">Im folgende Beispiel wird gezeigt, wie diese Methode verwendet eine Zeichenfolgendarstellung des abzurufenden eine <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-308">The following example shows how to use this method to get a string representation of a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#ToStringExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#tostringexample)]
 [!code-vb[VectorExamples_snip#ToStringExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#tostringexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="a3ca7-309">Die kulturspezifischen Formatierungsinformationen.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-309">The culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="a3ca7-310">Gibt die Zeichenfolgendarstellung dieser <see cref="T:System.Windows.Vector" />-Struktur mit den angegebenen Formatierungsinformationen zurück.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-310">Returns the string representation of this <see cref="T:System.Windows.Vector" /> structure with the specified formatting information.</span></span></summary>
        <returns><span data-ttu-id="a3ca7-311">Eine Zeichenfolge, die den <see cref="P:System.Windows.Vector.X" />-Wert und den <see cref="P:System.Windows.Vector.Y" />-Wert dieses <see cref="T:System.Windows.Vector" /> darstellt.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-311">A string that represents the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this <see cref="T:System.Windows.Vector" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="X">
      <MemberSignature Language="C#" Value="public double X { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 X" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Vector.X" />
      <MemberSignature Language="VB.NET" Value="Public Property X As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double X { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a3ca7-312">Ruft die <see cref="P:System.Windows.Vector.X" />-Komponente dieses Vektors ab oder legt diese fest.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-312">Gets or sets the <see cref="P:System.Windows.Vector.X" /> component of this vector.</span></span></summary>
        <value><span data-ttu-id="a3ca7-313">Die <see cref="P:System.Windows.Vector.X" />-Komponente dieses Vektors.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-313">The <see cref="P:System.Windows.Vector.X" /> component of this vector.</span></span> <span data-ttu-id="a3ca7-314">Der Standardwert ist 0.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-314">The default value is 0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a3ca7-315">Im folgende Beispiel wird gezeigt, wie zwei <xref:System.Windows.Vector> -Strukturen auf Gleichheit.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-315">The following example shows how to check two <xref:System.Windows.Vector> structures for equality.</span></span>  
  
 [!code-csharp[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#vectorequalityexample)]
 [!code-vb[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#vectorequalityexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Vector.Y" />
      </Docs>
    </Member>
    <Member MemberName="Y">
      <MemberSignature Language="C#" Value="public double Y { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Y" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Vector.Y" />
      <MemberSignature Language="VB.NET" Value="Public Property Y As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Y { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a3ca7-316">Ruft die <see cref="P:System.Windows.Vector.Y" />-Komponente dieses Vektors ab oder legt diese fest.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-316">Gets or sets the <see cref="P:System.Windows.Vector.Y" /> component of this vector.</span></span></summary>
        <value><span data-ttu-id="a3ca7-317">Die <see cref="P:System.Windows.Vector.Y" />-Komponente dieses Vektors.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-317">The <see cref="P:System.Windows.Vector.Y" /> component of this vector.</span></span> <span data-ttu-id="a3ca7-318">Der Standardwert ist 0.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-318">The default value is 0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a3ca7-319">Im folgende Beispiel wird gezeigt, wie zwei <xref:System.Windows.Vector> -Strukturen auf Gleichheit.</span><span class="sxs-lookup"><span data-stu-id="a3ca7-319">The following example shows how to check two <xref:System.Windows.Vector> structures for equality.</span></span>  
  
 [!code-csharp[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#vectorequalityexample)]
 [!code-vb[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#vectorequalityexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Vector.X" />
      </Docs>
    </Member>
  </Members>
</Type>
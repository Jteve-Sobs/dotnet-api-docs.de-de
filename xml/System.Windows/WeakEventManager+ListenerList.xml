<Type Name="WeakEventManager+ListenerList" FullName="System.Windows.WeakEventManager+ListenerList">
  <TypeSignature Language="C#" Value="protected class WeakEventManager.ListenerList" />
  <TypeSignature Language="ILAsm" Value=".class nested protected auto ansi beforefieldinit WeakEventManager/ListenerList extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.WeakEventManager.ListenerList" />
  <TypeSignature Language="VB.NET" Value="Protected Class WeakEventManager.ListenerList" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="fe01e-101">Stellt eine integrierte Auflistung zum Speichern von Listenern für einen <see cref="T:System.Windows.WeakEventManager" /> bereit.</span><span class="sxs-lookup"><span data-stu-id="fe01e-101">Provides a built-in collection list for storing listeners for a <see cref="T:System.Windows.WeakEventManager" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fe01e-102">Obwohl diese Liste Elemente, die enthält durch definierten ähneln <xref:System.Collections.IList> und <xref:System.Collections.ICollection>, und bieten eine ähnliche Funktionalität dieser Klasse implementiert keine der Schnittstellen.</span><span class="sxs-lookup"><span data-stu-id="fe01e-102">Although this list contains members that resemble those defined by <xref:System.Collections.IList> and <xref:System.Collections.ICollection>, and provide similar functionality, this class implements neither of those interfaces.</span></span>  
  
 <span data-ttu-id="fe01e-103">Die meisten <xref:System.Windows.WeakEventManager> abgeleitete Klassen müssen keine Member für verwenden <xref:System.Windows.WeakEventManager.ListenerList>.</span><span class="sxs-lookup"><span data-stu-id="fe01e-103">Most <xref:System.Windows.WeakEventManager> derived classes do not need to use any members on <xref:System.Windows.WeakEventManager.ListenerList>.</span></span> <span data-ttu-id="fe01e-104">Die <xref:System.Windows.WeakEventManager> Methoden <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> und <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> verwenden Sie den Standardwert <xref:System.Windows.WeakEventManager.ListenerList> intern eine Liste für die einzelnen `source`.</span><span class="sxs-lookup"><span data-stu-id="fe01e-104">The <xref:System.Windows.WeakEventManager> methods <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> use a default <xref:System.Windows.WeakEventManager.ListenerList> internally, one list for each `source`.</span></span>  
  
 <span data-ttu-id="fe01e-105">Sie müssen nur aufrufen <xref:System.Windows.WeakEventManager.ListenerList> Methoden Wenn Ihre <xref:System.Windows.WeakEventManager> -Klasse verwaltet mehrere Listen für die gleiche Ereignisquelle Kombination mit jeder Liste erstellt, um das Konto für die verschiedenen Zuständen des Ereignisses.</span><span class="sxs-lookup"><span data-stu-id="fe01e-105">You only need to call <xref:System.Windows.WeakEventManager.ListenerList> methods if your <xref:System.Windows.WeakEventManager> class maintains multiple lists for the same event-source combination, with each list created to account for different conditions of the event.</span></span> <span data-ttu-id="fe01e-106">In diesem Fall würden Sie nicht verwenden <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> und <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> und würde stattdessen implementieren `AddListener` oder `RemoveListener` , Listener in nur einer der internen Listener Listen, in der Regel auf Grundlage eines Parameters, den Sie hinzufügen zu fungieren `AddListener` oder `RemoveListener`.</span><span class="sxs-lookup"><span data-stu-id="fe01e-106">In this case, you would not use <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> and would instead implement `AddListener` or `RemoveListener` to act upon listeners in just one of the internal listener lists, typically based on a parameter that you add to `AddListener` or `RemoveListener`.</span></span> <span data-ttu-id="fe01e-107">Darüber hinaus die Handlerimplementierung, die das raw-Ereignis empfängt kann nicht einfach aufrufen <xref:System.Windows.WeakEventManager.DeliverEvent%2A>; Sie müssen stattdessen verfolgen die Einzelheiten des Ereignisses und übermitteln Sie das Ereignis nur für die entsprechende Liste mit <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span><span class="sxs-lookup"><span data-stu-id="fe01e-107">Also, the handler implementation that receives the raw event cannot simply call <xref:System.Windows.WeakEventManager.DeliverEvent%2A>; you must instead keep track of the specifics of the event and deliver the event only to the appropriate list using <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span></span>  
  
 <span data-ttu-id="fe01e-108">Die verschiedenen Methoden der <xref:System.Windows.WeakEventManager.ListenerList> werden bereitgestellt, damit Sie mit Ihren internen Listen arbeiten können und Sie verhindern, die Änderung der Liste während der tatsächliche Übermittlung des Ereignisses dass können.</span><span class="sxs-lookup"><span data-stu-id="fe01e-108">The various methods of <xref:System.Windows.WeakEventManager.ListenerList> are provided so that you can work with your internal lists and so that you can prevent modification of the list during actual delivery of the event.</span></span>  
  
 <span data-ttu-id="fe01e-109">Ist eine Beispielklasse, die diese Implementierungstechnik verwendet <xref:System.ComponentModel.PropertyChangedEventManager>, die separaten verwaltet Listen für `PropertyChanged` basierend auf, dessen Eigenschaft geändert.</span><span class="sxs-lookup"><span data-stu-id="fe01e-109">An example class that used this implementation technique is <xref:System.ComponentModel.PropertyChangedEventManager>, which maintains separate listener lists for `PropertyChanged` based on which property changed.</span></span>  
  
<a name="xamlTextUsage_ListenerList"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="fe01e-110">Verwendung von XAML-Text</span><span class="sxs-lookup"><span data-stu-id="fe01e-110">XAML Text Usage</span></span>  
 <span data-ttu-id="fe01e-111">Sie können keine dieser Klasse in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="fe01e-111">You cannot use this class in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fe01e-112">Initialisiert eine neue Instanz der <see cref="T:System.Windows.WeakEventManager.ListenerList" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="fe01e-112">Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListenerList();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fe01e-113">Initialisiert eine neue Instanz der <see cref="T:System.Windows.WeakEventManager.ListenerList" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="fe01e-113">Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListenerList (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListenerList(int capacity);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="fe01e-114">Die Anzahl der Elemente, die in der ursprünglichen Liste zugeordnet werden sollen.</span><span class="sxs-lookup"><span data-stu-id="fe01e-114">The number of items that should be allocated in the initial list.</span></span></param>
        <summary><span data-ttu-id="fe01e-115">Initialisiert eine neue Instanz der <see cref="T:System.Windows.WeakEventManager.ListenerList" />-Klasse mit der angegebenen anfänglichen Kapazität.</span><span class="sxs-lookup"><span data-stu-id="fe01e-115">Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class with the specified initial capacity.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Windows::IWeakEventListener ^ listener);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="listener"><span data-ttu-id="fe01e-116">Das Listenerelement, das der <see cref="T:System.Windows.WeakEventManager.ListenerList" /> hinzugefügt werden soll.</span><span class="sxs-lookup"><span data-stu-id="fe01e-116">The listener element to add to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></param>
        <summary><span data-ttu-id="fe01e-117">Fügt ein <see cref="T:System.Windows.IWeakEventListener" />-Objekt der <see cref="T:System.Windows.WeakEventManager.ListenerList" />-Auflistung hinzu.</span><span class="sxs-lookup"><span data-stu-id="fe01e-117">Adds a <see cref="T:System.Windows.IWeakEventListener" /> object to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fe01e-118">Das Objekt, das als Listener sein soll eine <xref:System.Windows.DependencyObject> , implementiert die <xref:System.Windows.IWeakEventListener> Schnittstelle und verfügt daher über eine funktionierende <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> Implementierung.</span><span class="sxs-lookup"><span data-stu-id="fe01e-118">The object provided as listener should be a <xref:System.Windows.DependencyObject> that implements the <xref:System.Windows.IWeakEventListener> interface and therefore has a working <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implementation.</span></span>  
  
 <span data-ttu-id="fe01e-119">Sie sollten immer Aufrufen <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> vor dem Inhalt der Liste ändern.</span><span class="sxs-lookup"><span data-stu-id="fe01e-119">You should always call <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> before changing the list contents.</span></span> <span data-ttu-id="fe01e-120">Andernfalls möglicherweise die Liste für die Übermittlung von Ereignissen und daher die ursprüngliche gesperrt ist.</span><span class="sxs-lookup"><span data-stu-id="fe01e-120">Otherwise, the list may be in process of delivering events and therefore the original is locked.</span></span> <span data-ttu-id="fe01e-121">Aufrufen <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> ändert sich die Eingabe `list` einen Klon sein, damit Ihre <xref:System.Windows.WeakEventManager.ListenerList.Add%2A> Aufruf kann weiterhin auf dem Klon arbeiten.</span><span class="sxs-lookup"><span data-stu-id="fe01e-121">Calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> changes the input `list` to be a clone so that your <xref:System.Windows.WeakEventManager.ListenerList.Add%2A> call can still work on the clone.</span></span> <span data-ttu-id="fe01e-122">Wenn <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> gibt `true`, müssen Sie möglicherweise private Verweise auf die Liste zu aktualisieren, die Sie in anderen Bereichen des Codes zu verwalten.</span><span class="sxs-lookup"><span data-stu-id="fe01e-122">If <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, you might need to update any private references to the list that you maintain in other areas of your code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHandler (handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="fe01e-123">Der dem <see cref="T:System.Windows.WeakEventManager.ListenerList" /> hinzuzufügende Ereignishandler.</span><span class="sxs-lookup"><span data-stu-id="fe01e-123">The event handler to add to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></param>
        <summary><span data-ttu-id="fe01e-124">Fügt der <see cref="T:System.Windows.WeakEventManager.ListenerList" /> einen Ereignishandler hinzu.</span><span class="sxs-lookup"><span data-stu-id="fe01e-124">Adds an event handler to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUse">
      <MemberSignature Language="C#" Value="public bool BeginUse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool BeginUse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginUse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool BeginUse();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fe01e-125">Gibt an, dass die Liste verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="fe01e-125">Declares the list to be in use.</span></span> <span data-ttu-id="fe01e-126">Dadurch werden Änderungen an der Liste während der Iteration von Listenelementen verhindert.</span><span class="sxs-lookup"><span data-stu-id="fe01e-126">This prevents direct changes to the list during iterations of the list items.</span></span></summary>
        <returns>
          <span data-ttu-id="fe01e-127"><see langword="true" />, wenn bereits angegeben wurde, dass die Liste verwendet wird; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="fe01e-127"><see langword="true" /> if the list was already declared to be in use; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fe01e-128">Ein <xref:System.Windows.WeakEventManager> Implementierung aufrufen sollte <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> vor dem Durchlaufen der Liste, um ein Ereignis an den Listener zu übermitteln, und rufen Sie die sollten <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A> wird neu.</span><span class="sxs-lookup"><span data-stu-id="fe01e-128">A <xref:System.Windows.WeakEventManager> implementation should call <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> before iterating through the list to deliver an event to the listeners, and should call <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A> when it is done.</span></span> <span data-ttu-id="fe01e-129">Dadurch wird verhindert, dass eine andere Aufrufer die Liste ändern, während die Iteration zum Zweck der Ereignisübermittlung ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="fe01e-129">This prevents another caller from modifying the list while the iteration for purposes of event delivery is in progress.</span></span> <span data-ttu-id="fe01e-130">Wenn die Liste während dieser Zeit geändert wird, wird die Liste geklont.</span><span class="sxs-lookup"><span data-stu-id="fe01e-130">If the list is modified during this time, then the list is cloned.</span></span> <span data-ttu-id="fe01e-131">Wenn die Liste, klicken Sie dann geklont wird <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> gibt `true`, was bedeutet, dass Sie eine Änderung in der letzten Übermittlung Listener übersehen haben.</span><span class="sxs-lookup"><span data-stu-id="fe01e-131">If the list is cloned, then <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, which means that you have missed a recent listener change in the last delivery.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual System.Windows.WeakEventManager.ListenerList Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.WeakEventManager/ListenerList Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As WeakEventManager.ListenerList" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fe01e-132">Erstellt einen änderbaren Klon dieser <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="fe01e-132">Creates a modifiable clone of this <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <returns><span data-ttu-id="fe01e-133">Ein änderbarer Klon des aktuellen Objekts.</span><span class="sxs-lookup"><span data-stu-id="fe01e-133">A modifiable clone of the current object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="protected void CopyTo (System.Windows.WeakEventManager.ListenerList newList);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CopyTo(class System.Windows.WeakEventManager/ListenerList newList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub CopyTo (newList As WeakEventManager.ListenerList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newList" Type="System.Windows.WeakEventManager+ListenerList" />
      </Parameters>
      <Docs>
        <param name="newList"><span data-ttu-id="fe01e-134">Das Objekt, in das kopiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="fe01e-134">The object to copy to.</span></span></param>
        <summary><span data-ttu-id="fe01e-135">Kopiert die aktuelle <see cref="T:System.Windows.WeakEventManager.ListenerList" /> in die angegebene <see cref="T:System.Windows.WeakEventManager.ListenerList" /></span><span class="sxs-lookup"><span data-stu-id="fe01e-135">Copies the current <see cref="T:System.Windows.WeakEventManager.ListenerList" /> to the specified <see cref="T:System.Windows.WeakEventManager.ListenerList" /></span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fe01e-136">Ruft die Anzahl der Elemente in <see cref="T:System.Windows.WeakEventManager.ListenerList" /> ab.</span><span class="sxs-lookup"><span data-stu-id="fe01e-136">Gets the number of items contained in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <value><span data-ttu-id="fe01e-137">Die Anzahl der Elemente in der <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="fe01e-137">The number of items contained in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliverEvent">
      <MemberSignature Language="C#" Value="public virtual bool DeliverEvent (object sender, EventArgs args, Type managerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DeliverEvent(object sender, class System.EventArgs args, class System.Type managerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeliverEvent (sender As Object, args As EventArgs, managerType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool DeliverEvent(System::Object ^ sender, EventArgs ^ args, Type ^ managerType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
        <Parameter Name="managerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="sender"><span data-ttu-id="fe01e-138">Das Objekt, das das Ereignis ausgelöst hat.</span><span class="sxs-lookup"><span data-stu-id="fe01e-138">The object that raised the event.</span></span></param>
        <param name="args"><span data-ttu-id="fe01e-139">Ein Objekt, das die Ereignisdaten enthält.</span><span class="sxs-lookup"><span data-stu-id="fe01e-139">An object that contains the event data.</span></span></param>
        <param name="managerType"><span data-ttu-id="fe01e-140">Der Typ des <see cref="T:System.Windows.WeakEventManager" />, der diese Methode aufruft.</span><span class="sxs-lookup"><span data-stu-id="fe01e-140">The type of the <see cref="T:System.Windows.WeakEventManager" /> that calls this method.</span></span></param>
        <summary><span data-ttu-id="fe01e-141">Übermittelt das verwaltete Ereignis an alle Listener in der <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="fe01e-141">Delivers the event being managed to each listener in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <returns>
          <span data-ttu-id="fe01e-142"><see langword="true" />, wenn einer der Listener in <see cref="T:System.Windows.WeakEventManager.ListenerList" /> auf ein Objekt verweist, das an den Garbage Collector übergeben wurde; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="fe01e-142"><see langword="true" /> if any of the listeners in the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> refer to an object that has been garbage collected; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Windows.WeakEventManager.ListenerList Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.WeakEventManager/ListenerList Empty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As WeakEventManager.ListenerList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fe01e-143">Ruft einen Wert ab, der eine leere Liste für Vergleiche darstellt.</span><span class="sxs-lookup"><span data-stu-id="fe01e-143">Gets a value that represents an empty list for purposes of comparisons.</span></span></summary>
        <value><span data-ttu-id="fe01e-144">Die Darstellung der leeren Liste.</span><span class="sxs-lookup"><span data-stu-id="fe01e-144">The empty list representation.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndUse">
      <MemberSignature Language="C#" Value="public void EndUse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndUse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndUse ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndUse();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fe01e-145">Hebt den gesperrten Status auf, der von <see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" /> initiiert wurde.</span><span class="sxs-lookup"><span data-stu-id="fe01e-145">Unlocks the locked state initiated by <see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fe01e-146">Ruft einen Wert ab, der angibt, ob diese <see cref="T:System.Windows.WeakEventManager.ListenerList" /> leer ist.</span><span class="sxs-lookup"><span data-stu-id="fe01e-146">Gets a value that declares whether this <see cref="T:System.Windows.WeakEventManager.ListenerList" /> is empty.</span></span></summary>
        <value>
          <span data-ttu-id="fe01e-147"><see langword="true" />, wenn die Liste leer ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="fe01e-147"><see langword="true" /> if the list is empty; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fe01e-148">Diese Methode ist äquivalent zu überprüfen, ob die <xref:System.Windows.WeakEventManager.ListenerList.Count%2A> 0 (null), und überprüft nicht, ob eines der Verweise in der Liste ist jetzt veraltet sind.</span><span class="sxs-lookup"><span data-stu-id="fe01e-148">This method is equivalent to checking whether the <xref:System.Windows.WeakEventManager.ListenerList.Count%2A> is zero, and does not check whether any of the references in the list are now stale.</span></span> <span data-ttu-id="fe01e-149">Wenn Sie sicherstellen, dass alle Verweise noch gültig sind, rufen Sie möchten <xref:System.Windows.WeakEventManager.ListenerList.Purge%2A> unmittelbar vor dem Überprüfen des leeren Status der Liste.</span><span class="sxs-lookup"><span data-stu-id="fe01e-149">If you want to assure that all references are still valid, call <xref:System.Windows.WeakEventManager.ListenerList.Purge%2A> just prior to checking the empty status of the list.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Windows.IWeakEventListener this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IWeakEventListener Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As IWeakEventListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IWeakEventListener ^ default[int] { System::Windows::IWeakEventListener ^ get(int index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IWeakEventListener</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="fe01e-150">Der nullbasierte Index des Listeners in der Liste.</span><span class="sxs-lookup"><span data-stu-id="fe01e-150">The zero-based index of the listener in the list.</span></span></param>
        <summary><span data-ttu-id="fe01e-151">Ruft ein bestimmtes Listenerelement in der <see cref="T:System.Windows.WeakEventManager.ListenerList" /> ab oder legt dieses fest.</span><span class="sxs-lookup"><span data-stu-id="fe01e-151">Gets or sets a specific listener item in the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> .</span></span></summary>
        <value><span data-ttu-id="fe01e-152">Das Element an diesem Index, oder ein NULL-Verweis, wenn kein Element an diesem Index vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="fe01e-152">The item at that index, or a null reference if no item was at that index.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareForWriting">
      <MemberSignature Language="C#" Value="public static bool PrepareForWriting (ref System.Windows.WeakEventManager.ListenerList list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool PrepareForWriting(class System.Windows.WeakEventManager/ListenerList&amp; list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PrepareForWriting (ByRef list As WeakEventManager.ListenerList) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool PrepareForWriting(System::Windows::WeakEventManager::ListenerList ^ % list);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Windows.WeakEventManager+ListenerList&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="list"><span data-ttu-id="fe01e-153">Die Liste, die auf eine mögliche Verwendung überprüft und von der ggf. eine Kopie erstellt werden soll.</span><span class="sxs-lookup"><span data-stu-id="fe01e-153">The list to check for use state and potentially copy.</span></span></param>
        <summary><span data-ttu-id="fe01e-154">Überprüft eine mögliche Verwendung der bereitgestellten Liste und legt die Verweisparameter der Liste ggf. auf eine Kopie der Liste fest.</span><span class="sxs-lookup"><span data-stu-id="fe01e-154">Checks to see whether the provided list is in use, and if so, sets the list reference parameter to a copy of that list rather than the original.</span></span></summary>
        <returns>
          <span data-ttu-id="fe01e-155"><see langword="true" />, wenn die bereitgestellte Liste zum Zeitpunkt des Aufrufs verwendet wurde und der <paramref name="list" />-Parameterverweis daher auf eine Kopie festgelegt wurde.</span><span class="sxs-lookup"><span data-stu-id="fe01e-155"><see langword="true" /> if the provided list was in use at the time of call and therefore the <paramref name="list" /> parameter reference was reset to be a copy.</span></span> <span data-ttu-id="fe01e-156"><see langword="false" />, wenn die bereitgestellte Liste nicht verwendet wurde; der <paramref name="list" />-Parameterverweis wird in diesem Fall nicht verändert.</span><span class="sxs-lookup"><span data-stu-id="fe01e-156"><see langword="false" /> if the provided list was not in use, in which case the <paramref name="list" /> parameter reference remains unaltered.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fe01e-157">Wenn die angegebene Liste verwendet wird (d. h., ein Ereignis wird gerade gesendet wird), das Aufrufen dieser Methode ersetzt die Eingabe `list` durch einen Klon.</span><span class="sxs-lookup"><span data-stu-id="fe01e-157">If the given list is in use (which means an event is currently being delivered), calling this method will replace the input `list` with a clone.</span></span>  <span data-ttu-id="fe01e-158">Vorhandene Benutzer werden fertig gestellt, das Ereignis an der ursprünglichen Liste störungsfrei von Änderungen in die neue Liste übermittelt.</span><span class="sxs-lookup"><span data-stu-id="fe01e-158">The existing users will finish delivering the event to the original list, without interference from changes to the new list.</span></span>  
  
 <span data-ttu-id="fe01e-159">Wenn die-Methode zurückgibt `true`, Aufrufer möchte die neue Liste in den Datenstrukturen ihrer eigenen einfügen, da dies darauf hinweist, dass die bereitgestellte Liste nicht mehr aktuell sind.</span><span class="sxs-lookup"><span data-stu-id="fe01e-159">If the method returns `true`, callers may want to insert the new list in their own data structures, since this indicates the possibility that the provided list is no longer current.</span></span>  
  
 <span data-ttu-id="fe01e-160">Diese Methode ruft <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> intern und ruft dann sofort <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.</span><span class="sxs-lookup"><span data-stu-id="fe01e-160">This method calls <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> internally and then immediately calls <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.</span></span> <span data-ttu-id="fe01e-161">Aus diesem Grund Aufrufen <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> nicht selbst einführen eine Sperre in der Liste.</span><span class="sxs-lookup"><span data-stu-id="fe01e-161">Therefore calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> does not itself introduce a lock on the list.</span></span> <span data-ttu-id="fe01e-162">Auch die Klonkopie erfolgt als sekundäre Vorgang nach dem Aufruf <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.</span><span class="sxs-lookup"><span data-stu-id="fe01e-162">Even the clone copy is done as a secondary operation after calling <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="public bool Purge ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Purge() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Purge" />
      <MemberSignature Language="VB.NET" Value="Public Function Purge () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Purge();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fe01e-163">Entfernt alle Einträge aus der Liste mit dem zugrunde liegenden Verweisziel als NULL-Verweis.</span><span class="sxs-lookup"><span data-stu-id="fe01e-163">Removes all entries from the list where the underlying reference target is a null reference.</span></span></summary>
        <returns><span data-ttu-id="fe01e-164">Gibt <see langword="true" /> zurück, wenn Einträge gelöscht würden; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="fe01e-164">Returns <see langword="true" /> if any entries were purged; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Windows::IWeakEventListener ^ listener);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="listener"><span data-ttu-id="fe01e-165">Das zu entfernende Element.</span><span class="sxs-lookup"><span data-stu-id="fe01e-165">The item to remove.</span></span></param>
        <summary><span data-ttu-id="fe01e-166">Entfernt das erste Vorkommen eines Listenerelements aus der <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="fe01e-166">Removes the first occurrence of a listener item from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fe01e-167">Sie sollten immer Aufrufen <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> vor dem Inhalt der Liste ändern.</span><span class="sxs-lookup"><span data-stu-id="fe01e-167">You should always call <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> before changing the list contents.</span></span> <span data-ttu-id="fe01e-168">Andernfalls möglicherweise die Liste für die Übermittlung von Ereignissen und daher die ursprüngliche gesperrt ist.</span><span class="sxs-lookup"><span data-stu-id="fe01e-168">Otherwise, the list may be in process of delivering events and therefore the original is locked.</span></span> <span data-ttu-id="fe01e-169">Aufrufen <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> ändert sich die Eingabe `list` einen Klon sein, damit Ihre <xref:System.Windows.WeakEventManager.ListenerList.Remove%2A> Aufruf kann weiterhin auf dem Klon arbeiten.</span><span class="sxs-lookup"><span data-stu-id="fe01e-169">Calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> changes the input `list` to be a clone so that your <xref:System.Windows.WeakEventManager.ListenerList.Remove%2A> call can still work on the clone.</span></span> <span data-ttu-id="fe01e-170">Wenn <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> gibt `true`, müssen Sie möglicherweise private Verweise auf die Liste zu aktualisieren, die Sie in anderen Bereichen des Codes zu verwalten.</span><span class="sxs-lookup"><span data-stu-id="fe01e-170">If <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, you might need to update any private references to the list that you maintain in other areas of your code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveHandler(class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveHandler (handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveHandler(Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="fe01e-171">Der vom <see cref="T:System.Windows.WeakEventManager.ListenerList" /> zu entfernende Ereignishandler.</span><span class="sxs-lookup"><span data-stu-id="fe01e-171">The event handler to remove from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></param>
        <summary><span data-ttu-id="fe01e-172">Entfernt einen Ereignishandler aus der <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="fe01e-172">Removes an event handler from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
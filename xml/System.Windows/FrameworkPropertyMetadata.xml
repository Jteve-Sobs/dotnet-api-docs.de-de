<Type Name="FrameworkPropertyMetadata" FullName="System.Windows.FrameworkPropertyMetadata">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bea13cd5bde500f9727e766ea43ea4587fe4f2aa" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83968505" /></Metadata><TypeSignature Language="C#" Value="public class FrameworkPropertyMetadata : System.Windows.UIPropertyMetadata" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FrameworkPropertyMetadata extends System.Windows.UIPropertyMetadata" />
  <TypeSignature Language="DocId" Value="T:System.Windows.FrameworkPropertyMetadata" />
  <TypeSignature Language="VB.NET" Value="Public Class FrameworkPropertyMetadata&#xA;Inherits UIPropertyMetadata" />
  <TypeSignature Language="C++ CLI" Value="public ref class FrameworkPropertyMetadata : System::Windows::UIPropertyMetadata" />
  <TypeSignature Language="F#" Value="type FrameworkPropertyMetadata = class&#xA;    inherit UIPropertyMetadata" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.UIPropertyMetadata</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="18121-101">Meldet die Metadaten für eine Abhängigkeitseigenschaft oder wendet diese an und fügt dabei insbesondere Systemmerkmale für frameworkspezifische Eigenschaften hinzu.</span><span class="sxs-lookup"><span data-stu-id="18121-101">Reports or applies metadata for a dependency property, specifically adding framework-specific property system characteristics.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18121-102">Diese Klasse wird von <xref:System.Windows.PropertyMetadata> (über <xref:System.Windows.UIPropertyMetadata>) abgeleitet.</span><span class="sxs-lookup"><span data-stu-id="18121-102">This class derives from <xref:System.Windows.PropertyMetadata> (through <xref:System.Windows.UIPropertyMetadata>) .</span></span> <span data-ttu-id="18121-103">Bei den meisten Anwendungs Entwicklungszwecken auf WPF-Frameworkebene ist <xref:System.Windows.FrameworkPropertyMetadata> der Typ, der für Metadaten für Abhängigkeits Eigenschaften verwendet wird, und nicht die Basis Metadaten-Typen <xref:System.Windows.PropertyMetadata> oder <xref:System.Windows.UIPropertyMetadata>.</span><span class="sxs-lookup"><span data-stu-id="18121-103">For most WPF framework-level application development purposes, <xref:System.Windows.FrameworkPropertyMetadata> is the type used for dependency property metadata, rather than the base metadata types <xref:System.Windows.PropertyMetadata> or <xref:System.Windows.UIPropertyMetadata>.</span></span> <span data-ttu-id="18121-104">Dies gilt sowohl für vorhandene Abhängigkeits Eigenschaften als auch für die meisten benutzerdefinierten Abhängigkeits Eigenschafts Szenarios.</span><span class="sxs-lookup"><span data-stu-id="18121-104">This is true both for existing dependency properties and for most custom dependency property scenarios.</span></span>  
  
 <span data-ttu-id="18121-105">Die von dieser Klasse deklarierten Member, die die <xref:System.Windows.PropertyMetadata> Basisklasse ergänzen, beinhalten verschiedene boolesche Eigenschaften, die das Verhalten des Eigenschaften Systems auf WPF-Frameworkebene angeben oder melden, z. b. Eigenschaften Vererbung, Datenbindung und Layout.</span><span class="sxs-lookup"><span data-stu-id="18121-105">The members declared by this class that supplement the <xref:System.Windows.PropertyMetadata> base class include various Boolean properties that specify or report WPF framework-level property system behavior such as property inheritance, data binding, and layout.</span></span>  
  
 <span data-ttu-id="18121-106">Mehrere Konstruktorsignaturen zum Erstellen einer <xref:System.Windows.FrameworkPropertyMetadata> Instanz nehmen einen <xref:System.Windows.FrameworkPropertyMetadataOptions> Parameter.</span><span class="sxs-lookup"><span data-stu-id="18121-106">Several constructor signatures for creating a <xref:System.Windows.FrameworkPropertyMetadata> instance take a <xref:System.Windows.FrameworkPropertyMetadataOptions> parameter.</span></span> <span data-ttu-id="18121-107">Die <xref:System.Windows.FrameworkPropertyMetadataOptions> Enumeration wird nur verwendet, um das anfängliche Verhalten im Konstruktor anzugeben, und wird nicht anderweitig verfügbar gemacht, nachdem <xref:System.Windows.FrameworkPropertyMetadata> erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="18121-107">The <xref:System.Windows.FrameworkPropertyMetadataOptions> enumeration is used only to specify initial behavior in the constructor, and is not otherwise exposed after <xref:System.Windows.FrameworkPropertyMetadata> is constructed.</span></span> <span data-ttu-id="18121-108">Aus einer konstruierten Instanz können Sie die entsprechenden Informationen über verschiedene Eigenschaften abrufen oder festlegen, die den Namen der im konstruktorbefehl verwendeten Enumerationswerte gemeinsam verwenden.</span><span class="sxs-lookup"><span data-stu-id="18121-108">From a constructed instance, you can get or set the corresponding information through various properties that share the name of the enumeration values used in the constructor call.</span></span>  
  
<a name="xamlTextUsage_FrameworkPropertyMetadata"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="18121-109">Verwendung von XAML-Text</span><span class="sxs-lookup"><span data-stu-id="18121-109">XAML Text Usage</span></span>  
 <span data-ttu-id="18121-110">Diese Klasse wird in der Regel nicht in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]verwendet.</span><span class="sxs-lookup"><span data-stu-id="18121-110">This class is not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18121-111">Im folgenden Beispiel werden Metadaten für eine Abhängigkeits Eigenschaft eines bestimmten Besitzers als Ausgangsbasis <xref:System.Windows.PropertyMetadata> Typs abgerufen.</span><span class="sxs-lookup"><span data-stu-id="18121-111">The following example gets metadata for a dependency property on a particular owner as the initial base <xref:System.Windows.PropertyMetadata> type.</span></span> <span data-ttu-id="18121-112">Diese Metadaten werden in <xref:System.Windows.FrameworkPropertyMetadata>umgewandelt.</span><span class="sxs-lookup"><span data-stu-id="18121-112">That metadata is cast to <xref:System.Windows.FrameworkPropertyMetadata>.</span></span> <span data-ttu-id="18121-113">Wenn die Umwandlung eine gültige <xref:System.Windows.FrameworkPropertyMetadata>zurückgegeben hat, werden verschiedene <xref:System.Windows.FrameworkPropertyMetadata> Eigenschaftswerte über eine einfache Benutzeroberfläche (nicht angezeigt) gemeldet.</span><span class="sxs-lookup"><span data-stu-id="18121-113">If the cast returned a valid <xref:System.Windows.FrameworkPropertyMetadata>, then various <xref:System.Windows.FrameworkPropertyMetadata> property values are reported through a simple UI (not shown).</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.PropertyMetadata" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="18121-114">Initialisiert eine neue Instanz der Klasse <see cref="T:System.Windows.FrameworkPropertyMetadata" />.</span><span class="sxs-lookup"><span data-stu-id="18121-114">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class.</span></span></summary>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="18121-115">Initialisiert eine neue Instanz der Klasse <see cref="T:System.Windows.FrameworkPropertyMetadata" />.</span><span class="sxs-lookup"><span data-stu-id="18121-115">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18121-116">Mit dieser Signatur werden alle Werte von <xref:System.Windows.FrameworkPropertyMetadata.%23ctor%2A> auf Ihre Eigenschafts Standardwerte initialisiert.</span><span class="sxs-lookup"><span data-stu-id="18121-116">This signature initializes all values of <xref:System.Windows.FrameworkPropertyMetadata.%23ctor%2A> to their property defaults.</span></span> <span data-ttu-id="18121-117"><xref:System.Windows.PropertyMetadata.DefaultValue%2A> werden `null`, und die verschiedenen <xref:System.Windows.FrameworkPropertyMetadata> booleschen Eigenschaften werden `false`.</span><span class="sxs-lookup"><span data-stu-id="18121-117"><xref:System.Windows.PropertyMetadata.DefaultValue%2A> will be `null`, and the various <xref:System.Windows.FrameworkPropertyMetadata> Boolean properties will be `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata defaultValue" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="18121-118">Der Standardwert für die Abhängigkeitseigenschaft, der normalerweise als Wert eines bestimmten Typs angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="18121-118">The default value of the dependency property, usually provided as a value of a specific type.</span></span></param>
        <summary><span data-ttu-id="18121-119">Initialisiert eine neue Instanz der <see cref="T:System.Windows.FrameworkPropertyMetadata" />-Klasse mit dem angegebenen Standardwert.</span><span class="sxs-lookup"><span data-stu-id="18121-119">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the specified default value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18121-120">Der Typ des Werts, der für `defaultValue` bereitgestellt wird, muss mit dem Typ identisch sein, der in der ursprünglichen Registrierung der Abhängigkeits Eigenschaft angegeben ist, auf die diese Metadaten angewendet werden.</span><span class="sxs-lookup"><span data-stu-id="18121-120">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="18121-121">Konflikte zwischen metadatenstandardwerttyp und dem Typ der Abhängigkeits Eigenschaft, auf die Sie angewendet wird, können schwierig zu debuggen sein, da der Konflikt während der Kompilierung nicht erkennbar ist.</span><span class="sxs-lookup"><span data-stu-id="18121-121">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="18121-122">Das Eigenschaften System wertet den effektiven Wert einer Eigenschaft erst zur Laufzeit aus, d. h., das Ergebnis eines standardmäßigen Werttyps ist ein Laufzeitfehler.</span><span class="sxs-lookup"><span data-stu-id="18121-122">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="18121-123">Der Wert <xref:System.Windows.DependencyProperty.UnsetValue> hat im Eigenschaften System eine besondere Bedeutung und kann nicht als Standardwert für die Abhängigkeits Eigenschaft verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="18121-123">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18121-124">Im folgenden Beispiel wird diese Konstruktorsignatur aufgerufen:</span><span class="sxs-lookup"><span data-stu-id="18121-124">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor1param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor1param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="18121-125"><paramref name="defaultValue" /> ist auf <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> festgelegt.</span><span class="sxs-lookup"><span data-stu-id="18121-125"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (propertyChangedCallback As PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : System.Windows.PropertyChangedCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata propertyChangedCallback" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="propertyChangedCallback"><span data-ttu-id="18121-126">Ein Verweis auf eine Handlerimplementierung, die das Eigenschaftensystem aufruft, wenn der effektive Wert der Eigenschaft geändert wird.</span><span class="sxs-lookup"><span data-stu-id="18121-126">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <summary><span data-ttu-id="18121-127">Initialisiert eine neue Instanz der <see cref="T:System.Windows.FrameworkPropertyMetadata" />-Klasse mit dem angegebenen <see cref="T:System.Windows.PropertyChangedCallback" />-Rückruf.</span><span class="sxs-lookup"><span data-stu-id="18121-127">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the specified <see cref="T:System.Windows.PropertyChangedCallback" /> callback.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18121-128">Im folgenden Beispiel wird diese Konstruktorsignatur aufgerufen:</span><span class="sxs-lookup"><span data-stu-id="18121-128">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor1paramcallback](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor1paramcallback)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultValue As Object, flags As FrameworkPropertyMetadataOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="18121-129">Der Standardwert für die Abhängigkeitseigenschaft, der normalerweise als Wert eines bestimmten Typs angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="18121-129">The default value of the dependency property, usually provided as a value of a specific type.</span></span></param>
        <param name="flags"><span data-ttu-id="18121-130">Die Flags für die Metadatenoptionen (eine Kombination von <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> Werten).</span><span class="sxs-lookup"><span data-stu-id="18121-130">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span></span> <span data-ttu-id="18121-131">Diese Optionen geben Merkmale der Abhängigkeitseigenschaft an, die mit Systemen wie Layout oder Datenbindung zusammen arbeiten.</span><span class="sxs-lookup"><span data-stu-id="18121-131">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span></span></param>
        <summary><span data-ttu-id="18121-132">Initialisiert eine neue Instanz der <see cref="T:System.Windows.FrameworkPropertyMetadata" />-Klasse mit dem bereitgestellten Standardwert und Metadatenoptionen auf Frameworkebene.</span><span class="sxs-lookup"><span data-stu-id="18121-132">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework-level metadata options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18121-133">Der Typ des Werts, der für `defaultValue` bereitgestellt wird, muss mit dem Typ identisch sein, der in der ursprünglichen Registrierung der Abhängigkeits Eigenschaft angegeben ist, auf die diese Metadaten angewendet werden.</span><span class="sxs-lookup"><span data-stu-id="18121-133">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="18121-134">Konflikte zwischen metadatenstandardwerttyp und dem Typ der Abhängigkeits Eigenschaft, auf die Sie angewendet wird, können schwierig zu debuggen sein, da der Konflikt während der Kompilierung nicht erkennbar ist.</span><span class="sxs-lookup"><span data-stu-id="18121-134">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="18121-135">Das Eigenschaften System wertet den effektiven Wert einer Eigenschaft erst zur Laufzeit aus, d. h., das Ergebnis eines standardmäßigen Werttyps ist ein Laufzeitfehler.</span><span class="sxs-lookup"><span data-stu-id="18121-135">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="18121-136">Der Wert <xref:System.Windows.DependencyProperty.UnsetValue> hat im Eigenschaften System eine besondere Bedeutung und kann nicht als Standardwert für die Abhängigkeits Eigenschaft verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="18121-136">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="18121-137">Werte, die im `flags`-Parameter als Set-Flags gekennzeichnet sind, legen den booleschen Wert <xref:System.Windows.FrameworkPropertyMetadata> Eigenschaften, die mit diesem <xref:System.Windows.FrameworkPropertyMetadataOptions> flagnamen identisch sind, auf `true`fest.</span><span class="sxs-lookup"><span data-stu-id="18121-137">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="18121-138">Anschließend können Sie die Werte der Eigenschaften in den Metadaten ändern, solange die Metadaten noch nicht auf einen bestimmten Eigenschafts System Vorgang angewendet wurden.</span><span class="sxs-lookup"><span data-stu-id="18121-138">You can subsequently change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18121-139">Im folgenden Beispiel wird diese Konstruktorsignatur aufgerufen:</span><span class="sxs-lookup"><span data-stu-id="18121-139">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="18121-140"><paramref name="defaultValue" /> ist auf <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> festgelegt.</span><span class="sxs-lookup"><span data-stu-id="18121-140"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultValue As Object, propertyChangedCallback As PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.PropertyChangedCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, propertyChangedCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="18121-141">Der Standardwert für die Abhängigkeitseigenschaft, der normalerweise als Wert eines bestimmten Typs angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="18121-141">The default value of the dependency property, usually provided as a value of a specific type.</span></span></param>
        <param name="propertyChangedCallback"><span data-ttu-id="18121-142">Ein Verweis auf eine Handlerimplementierung, die das Eigenschaftensystem aufruft, wenn der effektive Wert der Eigenschaft geändert wird.</span><span class="sxs-lookup"><span data-stu-id="18121-142">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <summary><span data-ttu-id="18121-143">Initialisiert eine neue Instanz der <see cref="T:System.Windows.FrameworkPropertyMetadata" />-Klasse mit dem angegebenen Standardwert und dem angegebenen <see cref="T:System.Windows.PropertyChangedCallback" />-Rückruf.</span><span class="sxs-lookup"><span data-stu-id="18121-143">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and specified <see cref="T:System.Windows.PropertyChangedCallback" /> callback.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18121-144">Der Typ des Werts, der für `defaultValue` bereitgestellt wird, muss mit dem Typ identisch sein, der in der ursprünglichen Registrierung der Abhängigkeits Eigenschaft angegeben ist, auf die diese Metadaten angewendet werden.</span><span class="sxs-lookup"><span data-stu-id="18121-144">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="18121-145">Konflikte zwischen metadatenstandardwerttyp und dem Typ der Abhängigkeits Eigenschaft, auf die Sie angewendet wird, können schwierig zu debuggen sein, da der Konflikt während der Kompilierung nicht erkennbar ist.</span><span class="sxs-lookup"><span data-stu-id="18121-145">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="18121-146">Das Eigenschaften System wertet den effektiven Wert einer Eigenschaft erst zur Laufzeit aus, d. h., das Ergebnis eines standardmäßigen Werttyps ist ein Laufzeitfehler.</span><span class="sxs-lookup"><span data-stu-id="18121-146">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="18121-147">Der Wert <xref:System.Windows.DependencyProperty.UnsetValue> hat im Eigenschaften System eine besondere Bedeutung und kann nicht als Standardwert für die Abhängigkeits Eigenschaft verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="18121-147">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18121-148">Im folgenden Beispiel wird diese Konstruktorsignatur aufgerufen:</span><span class="sxs-lookup"><span data-stu-id="18121-148">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor2param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor2param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="18121-149"><paramref name="defaultValue" /> ist auf <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> festgelegt.</span><span class="sxs-lookup"><span data-stu-id="18121-149"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (propertyChangedCallback As PropertyChangedCallback, coerceValueCallback As CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (propertyChangedCallback, coerceValueCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="propertyChangedCallback"><span data-ttu-id="18121-150">Ein Verweis auf eine Handlerimplementierung, die das Eigenschaftensystem aufruft, wenn der effektive Wert der Eigenschaft geändert wird.</span><span class="sxs-lookup"><span data-stu-id="18121-150">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <param name="coerceValueCallback"><span data-ttu-id="18121-151">Ein Verweis auf eine Handlerimplementierung wird aufgerufen, wenn das Eigenschaftensystem <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> für diese Abhängigkeitseigenschaft aufruft.</span><span class="sxs-lookup"><span data-stu-id="18121-151">A reference to a handler implementation will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> for this dependency property.</span></span></param>
        <summary><span data-ttu-id="18121-152">Initialisiert eine neue Instanz der <see cref="T:System.Windows.FrameworkPropertyMetadata" />-Klasse mit den angegebenen Rückrufen.</span><span class="sxs-lookup"><span data-stu-id="18121-152">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the specified callbacks.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18121-153">Diese Implementierung ruft einen Basisinitialisierer auf und fügt dann die `coerceValueCallback` hinzu, indem die-Eigenschaft für die-Basis Instanz festgelegt wird.</span><span class="sxs-lookup"><span data-stu-id="18121-153">This implementation calls a base initializer and then adds the `coerceValueCallback` by setting the property on the base instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18121-154">Im folgenden Beispiel wird diese Konstruktorsignatur aufgerufen:</span><span class="sxs-lookup"><span data-stu-id="18121-154">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_PCC_CVC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_pcc_cvc)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultValue As Object, flags As FrameworkPropertyMetadataOptions, propertyChangedCallback As PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="18121-155">Der Standardwert für die Abhängigkeitseigenschaft, der normalerweise als Wert eines bestimmten Typs angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="18121-155">The default value of the dependency property, usually provided as a value of a specific type.</span></span></param>
        <param name="flags"><span data-ttu-id="18121-156">Die Flags für die Metadatenoptionen (eine Kombination von <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> Werten).</span><span class="sxs-lookup"><span data-stu-id="18121-156">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span></span> <span data-ttu-id="18121-157">Diese Optionen geben Merkmale der Abhängigkeitseigenschaft an, die mit Systemen wie Layout oder Datenbindung zusammen arbeiten.</span><span class="sxs-lookup"><span data-stu-id="18121-157">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span></span></param>
        <param name="propertyChangedCallback"><span data-ttu-id="18121-158">Ein Verweis auf eine Handlerimplementierung, die das Eigenschaftensystem aufruft, wenn der effektive Wert der Eigenschaft geändert wird.</span><span class="sxs-lookup"><span data-stu-id="18121-158">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <summary><span data-ttu-id="18121-159">Initialisiert eine neue Instanz der <see cref="T:System.Windows.FrameworkPropertyMetadata" />-Klasse mit dem bereitgestellten Standardwert und Metadatenoptionen auf Frameworkebene sowie dem angegebenen <see cref="T:System.Windows.PropertyChangedCallback" />-Rückruf.</span><span class="sxs-lookup"><span data-stu-id="18121-159">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, and specified <see cref="T:System.Windows.PropertyChangedCallback" /> callback.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18121-160">Der Typ des Werts, der für `defaultValue` bereitgestellt wird, muss mit dem Typ identisch sein, der in der ursprünglichen Registrierung der Abhängigkeits Eigenschaft angegeben ist, auf die diese Metadaten angewendet werden.</span><span class="sxs-lookup"><span data-stu-id="18121-160">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="18121-161">Konflikte zwischen metadatenstandardwerttyp und dem Typ der Abhängigkeits Eigenschaft, auf die Sie angewendet wird, können schwierig zu debuggen sein, da der Konflikt während der Kompilierung nicht erkennbar ist.</span><span class="sxs-lookup"><span data-stu-id="18121-161">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="18121-162">Das Eigenschaften System wertet den effektiven Wert einer Eigenschaft erst zur Laufzeit aus, d. h., das Ergebnis eines standardmäßigen Werttyps ist ein Laufzeitfehler.</span><span class="sxs-lookup"><span data-stu-id="18121-162">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="18121-163">Der Wert <xref:System.Windows.DependencyProperty.UnsetValue> hat im Eigenschaften System eine besondere Bedeutung und kann nicht als Standardwert für die Abhängigkeits Eigenschaft verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="18121-163">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="18121-164">Werte, die im `flags`-Parameter als Set-Flags gekennzeichnet sind, legen den booleschen Wert <xref:System.Windows.FrameworkPropertyMetadata> Eigenschaften, die mit diesem <xref:System.Windows.FrameworkPropertyMetadataOptions> flagnamen identisch sind, auf `true`fest.</span><span class="sxs-lookup"><span data-stu-id="18121-164">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="18121-165">Sie können die Werte der Eigenschaften in den Metadaten weiterhin ändern, solange die Metadaten noch nicht auf einen bestimmten Eigenschafts System Vorgang angewendet wurden.</span><span class="sxs-lookup"><span data-stu-id="18121-165">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18121-166">Im folgenden Beispiel wird diese Konstruktorsignatur aufgerufen:</span><span class="sxs-lookup"><span data-stu-id="18121-166">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="18121-167"><paramref name="defaultValue" /> ist auf <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> festgelegt.</span><span class="sxs-lookup"><span data-stu-id="18121-167"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultValue As Object, propertyChangedCallback As PropertyChangedCallback, coerceValueCallback As CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, propertyChangedCallback, coerceValueCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="18121-168">Der Standardwert für die Abhängigkeitseigenschaft, der normalerweise als Wert eines bestimmten Typs angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="18121-168">The default value of the dependency property, usually provided as a specific type.</span></span></param>
        <param name="propertyChangedCallback"><span data-ttu-id="18121-169">Ein Verweis auf eine Handlerimplementierung, die das Eigenschaftensystem aufruft, wenn der effektive Wert der Eigenschaft geändert wird.</span><span class="sxs-lookup"><span data-stu-id="18121-169">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <param name="coerceValueCallback"><span data-ttu-id="18121-170">Ein Verweis auf eine Handlerimplementierung, der aufgerufen wird, wenn das Eigenschaftensystem <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> für diese Abhängigkeitseigenschaft aufruft.</span><span class="sxs-lookup"><span data-stu-id="18121-170">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> for this dependency property.</span></span></param>
        <summary><span data-ttu-id="18121-171">Initialisiert eine neue Instanz der <see cref="T:System.Windows.FrameworkPropertyMetadata" />-Klasse mit dem angegebenen Standardwert und den angegebenen Rückrufen.</span><span class="sxs-lookup"><span data-stu-id="18121-171">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and specified callbacks.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18121-172">Der Typ des Werts, der für `defaultValue` bereitgestellt wird, muss mit dem Typ identisch sein, der in der ursprünglichen Registrierung der Abhängigkeits Eigenschaft angegeben ist, auf die diese Metadaten angewendet werden.</span><span class="sxs-lookup"><span data-stu-id="18121-172">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="18121-173">Konflikte zwischen metadatenstandardwerttyp und dem Typ der Abhängigkeits Eigenschaft, auf die Sie angewendet wird, können schwierig zu debuggen sein, da der Konflikt während der Kompilierung nicht erkennbar ist.</span><span class="sxs-lookup"><span data-stu-id="18121-173">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="18121-174">Das Eigenschaften System wertet den effektiven Wert einer Eigenschaft erst zur Laufzeit aus, d. h., das Ergebnis eines standardmäßigen Werttyps ist ein Laufzeitfehler.</span><span class="sxs-lookup"><span data-stu-id="18121-174">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="18121-175">Der Wert <xref:System.Windows.DependencyProperty.UnsetValue> hat im Eigenschaften System eine besondere Bedeutung und kann nicht als Standardwert für die Abhängigkeits Eigenschaft verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="18121-175">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18121-176">Im folgenden Beispiel wird diese Konstruktorsignatur aufgerufen:</span><span class="sxs-lookup"><span data-stu-id="18121-176">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor3param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor3param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="18121-177"><paramref name="defaultValue" /> ist auf <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> festgelegt.</span><span class="sxs-lookup"><span data-stu-id="18121-177"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultValue As Object, flags As FrameworkPropertyMetadataOptions, propertyChangedCallback As PropertyChangedCallback, coerceValueCallback As CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback, coerceValueCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="18121-178">Der Standardwert für die Abhängigkeitseigenschaft, der normalerweise als Wert eines bestimmten Typs angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="18121-178">The default value of the dependency property, usually provided as a specific type.</span></span></param>
        <param name="flags"><span data-ttu-id="18121-179">Die Flags für die Metadatenoptionen (eine Kombination von <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> Werten).</span><span class="sxs-lookup"><span data-stu-id="18121-179">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span></span> <span data-ttu-id="18121-180">Diese Optionen geben Merkmale der Abhängigkeitseigenschaft an, die mit Systemen wie Layout oder Datenbindung zusammen arbeiten.</span><span class="sxs-lookup"><span data-stu-id="18121-180">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span></span></param>
        <param name="propertyChangedCallback"><span data-ttu-id="18121-181">Ein Verweis auf eine Handlerimplementierung, die das Eigenschaftensystem aufruft, wenn der effektive Wert der Eigenschaft geändert wird.</span><span class="sxs-lookup"><span data-stu-id="18121-181">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <param name="coerceValueCallback"><span data-ttu-id="18121-182">Ein Verweis auf eine Handlerimplementierung, der aufgerufen wird, wenn das Eigenschaftensystem <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> für diese Abhängigkeitseigenschaft aufruft.</span><span class="sxs-lookup"><span data-stu-id="18121-182">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> against this property.</span></span></param>
        <summary><span data-ttu-id="18121-183">Initialisiert eine neue Instanz der <see cref="T:System.Windows.FrameworkPropertyMetadata" />-Klasse mit dem bereitgestellten Standardwert und Metadatenoptionen auf Frameworkebene sowie den angegebenen Rückrufen.</span><span class="sxs-lookup"><span data-stu-id="18121-183">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, and specified callbacks.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18121-184">Der Typ des Werts, der für `defaultValue` bereitgestellt wird, muss mit dem Typ identisch sein, der in der ursprünglichen Registrierung der Abhängigkeits Eigenschaft angegeben ist, auf die diese Metadaten angewendet werden.</span><span class="sxs-lookup"><span data-stu-id="18121-184">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="18121-185">Konflikte zwischen metadatenstandardwerttyp und dem Typ der Abhängigkeits Eigenschaft, auf die Sie angewendet wird, können schwierig zu debuggen sein, da der Konflikt während der Kompilierung nicht erkennbar ist.</span><span class="sxs-lookup"><span data-stu-id="18121-185">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="18121-186">Das Eigenschaften System wertet den effektiven Wert einer Eigenschaft erst zur Laufzeit aus, d. h., das Ergebnis eines standardmäßigen Werttyps ist ein Laufzeitfehler.</span><span class="sxs-lookup"><span data-stu-id="18121-186">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="18121-187">Der Wert <xref:System.Windows.DependencyProperty.UnsetValue> hat im Eigenschaften System eine besondere Bedeutung und kann nicht als Standardwert für die Abhängigkeits Eigenschaft verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="18121-187">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="18121-188">Werte, die im `flags`-Parameter als Set-Flags gekennzeichnet sind, legen den booleschen Wert <xref:System.Windows.FrameworkPropertyMetadata> Eigenschaften, die mit diesem <xref:System.Windows.FrameworkPropertyMetadataOptions> flagnamen identisch sind, auf `true`fest.</span><span class="sxs-lookup"><span data-stu-id="18121-188">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="18121-189">Sie können die Werte der Eigenschaften in den Metadaten weiterhin ändern, solange die Metadaten noch nicht auf einen bestimmten Eigenschafts System Vorgang angewendet wurden.</span><span class="sxs-lookup"><span data-stu-id="18121-189">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18121-190">Im folgenden Beispiel wird diese Konstruktorsignatur aufgerufen:</span><span class="sxs-lookup"><span data-stu-id="18121-190">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="18121-191"><paramref name="defaultValue" /> ist auf <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> festgelegt.</span><span class="sxs-lookup"><span data-stu-id="18121-191"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultValue As Object, flags As FrameworkPropertyMetadataOptions, propertyChangedCallback As PropertyChangedCallback, coerceValueCallback As CoerceValueCallback, isAnimationProhibited As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback, bool isAnimationProhibited);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback * bool -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback, coerceValueCallback, isAnimationProhibited)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
        <Parameter Name="isAnimationProhibited" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="18121-192">Der Standardwert für die Abhängigkeitseigenschaft, der normalerweise als Wert eines bestimmten Typs angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="18121-192">The default value of the dependency property, usually provided as a specific type.</span></span></param>
        <param name="flags"><span data-ttu-id="18121-193">Die Flags für die Metadatenoptionen (eine Kombination von <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> Werten).</span><span class="sxs-lookup"><span data-stu-id="18121-193">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span></span> <span data-ttu-id="18121-194">Diese Optionen geben Merkmale der Abhängigkeitseigenschaft an, die mit Systemen wie Layout oder Datenbindung zusammen arbeiten.</span><span class="sxs-lookup"><span data-stu-id="18121-194">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span></span></param>
        <param name="propertyChangedCallback"><span data-ttu-id="18121-195">Ein Verweis auf eine Handlerimplementierung, die das Eigenschaftensystem aufruft, wenn der effektive Wert der Eigenschaft geändert wird.</span><span class="sxs-lookup"><span data-stu-id="18121-195">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <param name="coerceValueCallback"><span data-ttu-id="18121-196">Ein Verweis auf eine Handlerimplementierung, der aufgerufen wird, wenn das Eigenschaftensystem <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> für diese Abhängigkeitseigenschaft aufruft.</span><span class="sxs-lookup"><span data-stu-id="18121-196">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> on this dependency property.</span></span></param>
        <param name="isAnimationProhibited"><span data-ttu-id="18121-197"><see langword="true" />, um zu verhindern, dass das Eigenschaftensystem die Eigenschaft animiert, auf die diese Metadaten angewendet werden.</span><span class="sxs-lookup"><span data-stu-id="18121-197"><see langword="true" /> to prevent the property system from animating the property that this metadata is applied to.</span></span> <span data-ttu-id="18121-198">Diese Eigenschaften lösen eine Laufzeitausnahme aus, die aus dem Eigenschaftensystem stammt, wenn versucht wird, sie zu animieren.</span><span class="sxs-lookup"><span data-stu-id="18121-198">Such properties will raise a run-time exception originating from the property system if animations of them are attempted.</span></span> <span data-ttu-id="18121-199"><see langword="false" />, um das Animieren der Eigenschaft zuzulassen.</span><span class="sxs-lookup"><span data-stu-id="18121-199"><see langword="false" /> to permit animating the property.</span></span> <span data-ttu-id="18121-200">Der Standardwert lautet <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="18121-200">The default is <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="18121-201">Initialisiert eine neue Instanz der <see cref="T:System.Windows.FrameworkPropertyMetadata" />-Klasse mit dem bereitgestellten Standardwert und Metadatenoptionen auf Frameworkebene, den angegebenen Rückrufen und einem booleschen Wert, mit dem die Animation der Eigenschaft verhindert werden kann.</span><span class="sxs-lookup"><span data-stu-id="18121-201">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, specified callbacks, and a Boolean that can be used to prevent animation of the property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18121-202">Der Typ des Werts, der für `defaultValue` bereitgestellt wird, muss mit dem Typ identisch sein, der in der ursprünglichen Registrierung der Abhängigkeits Eigenschaft angegeben ist, auf die diese Metadaten angewendet werden.</span><span class="sxs-lookup"><span data-stu-id="18121-202">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="18121-203">Konflikte zwischen metadatenstandardwerttyp und dem Typ der Abhängigkeits Eigenschaft, auf die Sie angewendet wird, können schwierig zu debuggen sein, da der Konflikt während der Kompilierung nicht erkennbar ist.</span><span class="sxs-lookup"><span data-stu-id="18121-203">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="18121-204">Das Eigenschaften System wertet den effektiven Wert einer Eigenschaft erst zur Laufzeit aus, d. h., das Ergebnis eines standardmäßigen Werttyps ist ein Laufzeitfehler.</span><span class="sxs-lookup"><span data-stu-id="18121-204">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="18121-205">Der Wert <xref:System.Windows.DependencyProperty.UnsetValue> hat im Eigenschaften System eine besondere Bedeutung und kann nicht als Standardwert für die Abhängigkeits Eigenschaft verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="18121-205">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="18121-206">Der `isAnimationProhibited`-Parameter legt den Anfangswert der <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> Eigenschaft fest, die von der unmittelbaren Basis <xref:System.Windows.UIPropertyMetadata> Klasse deklariert wird.</span><span class="sxs-lookup"><span data-stu-id="18121-206">The `isAnimationProhibited` parameter sets the initial value of the <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> property declared by the immediate base <xref:System.Windows.UIPropertyMetadata> class.</span></span>  
  
 <span data-ttu-id="18121-207">Werte, die im `flags`-Parameter als Set-Flags gekennzeichnet sind, legen den booleschen Wert <xref:System.Windows.FrameworkPropertyMetadata> Eigenschaften, die mit diesem <xref:System.Windows.FrameworkPropertyMetadataOptions> flagnamen identisch sind, auf `true`fest.</span><span class="sxs-lookup"><span data-stu-id="18121-207">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="18121-208">Sie können die Werte der Eigenschaften in den Metadaten weiterhin ändern, solange die Metadaten noch nicht auf einen bestimmten Eigenschafts System Vorgang angewendet wurden.</span><span class="sxs-lookup"><span data-stu-id="18121-208">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18121-209">Im folgenden Beispiel wird diese Konstruktorsignatur aufgerufen:</span><span class="sxs-lookup"><span data-stu-id="18121-209">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC_IAP](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc_iap)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="18121-210"><paramref name="defaultValue" /> ist auf <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> festgelegt.</span><span class="sxs-lookup"><span data-stu-id="18121-210"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited, System.Windows.Data.UpdateSourceTrigger defaultUpdateSourceTrigger);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited, valuetype System.Windows.Data.UpdateSourceTrigger defaultUpdateSourceTrigger) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean,System.Windows.Data.UpdateSourceTrigger)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultValue As Object, flags As FrameworkPropertyMetadataOptions, propertyChangedCallback As PropertyChangedCallback, coerceValueCallback As CoerceValueCallback, isAnimationProhibited As Boolean, defaultUpdateSourceTrigger As UpdateSourceTrigger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback, bool isAnimationProhibited, System::Windows::Data::UpdateSourceTrigger defaultUpdateSourceTrigger);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback * bool * System.Windows.Data.UpdateSourceTrigger -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback, coerceValueCallback, isAnimationProhibited, defaultUpdateSourceTrigger)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
        <Parameter Name="isAnimationProhibited" Type="System.Boolean" />
        <Parameter Name="defaultUpdateSourceTrigger" Type="System.Windows.Data.UpdateSourceTrigger" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="18121-211">Der Standardwert für die Abhängigkeitseigenschaft, der normalerweise als Wert eines bestimmten Typs angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="18121-211">The default value of the dependency property, usually provided as a specific type.</span></span></param>
        <param name="flags"><span data-ttu-id="18121-212">Die Flags für die Metadatenoptionen (eine Kombination von <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> Werten).</span><span class="sxs-lookup"><span data-stu-id="18121-212">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span></span> <span data-ttu-id="18121-213">Diese Optionen geben Merkmale der Abhängigkeitseigenschaft an, die mit Systemen wie Layout oder Datenbindung zusammen arbeiten.</span><span class="sxs-lookup"><span data-stu-id="18121-213">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span></span></param>
        <param name="propertyChangedCallback"><span data-ttu-id="18121-214">Ein Verweis auf eine Handlerimplementierung, die das Eigenschaftensystem aufruft, wenn der effektive Wert der Eigenschaft geändert wird.</span><span class="sxs-lookup"><span data-stu-id="18121-214">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <param name="coerceValueCallback"><span data-ttu-id="18121-215">Ein Verweis auf eine Handlerimplementierung, der aufgerufen wird, wenn das Eigenschaftensystem <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> für diese Abhängigkeitseigenschaft aufruft.</span><span class="sxs-lookup"><span data-stu-id="18121-215">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> against this property.</span></span></param>
        <param name="isAnimationProhibited"><span data-ttu-id="18121-216"><see langword="true" />, um zu verhindern, dass das Eigenschaftensystem die Eigenschaft animiert, auf die diese Metadaten angewendet werden.</span><span class="sxs-lookup"><span data-stu-id="18121-216"><see langword="true" /> to prevent the property system from animating the property that this metadata is applied to.</span></span> <span data-ttu-id="18121-217">Diese Eigenschaften lösen eine Laufzeitausnahme aus, die aus dem Eigenschaftensystem stammt, wenn versucht wird, sie zu animieren.</span><span class="sxs-lookup"><span data-stu-id="18121-217">Such properties will raise a run-time exception originating from the property system if animations of them are attempted.</span></span> <span data-ttu-id="18121-218">Der Standardwert lautet <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="18121-218">The default is <see langword="false" />.</span></span></param>
        <param name="defaultUpdateSourceTrigger"><span data-ttu-id="18121-219">Der <see cref="T:System.Windows.Data.UpdateSourceTrigger" />, der verwendet werden soll, wenn Bindungen für diese Eigenschaft angewendet werden, deren <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> auf <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" /> festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="18121-219">The <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> to use when bindings for this property are applied that have their <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> set to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span></span></param>
        <summary><span data-ttu-id="18121-220">Initialisiert eine neue Instanz der <see cref="T:System.Windows.FrameworkPropertyMetadata" />-Klasse mit dem bereitgestellten Standardwert und Metadatenoptionen auf Frameworkebene, den angegebenen Rückrufen, einem booleschen Wert, mit dem die Animation der Eigenschaft verhindert werden kann, und einem Standardwert für den Aktualisierungstrigger der Datenbindung.</span><span class="sxs-lookup"><span data-stu-id="18121-220">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, specified callbacks, a Boolean that can be used to prevent animation of the property, and a data-binding update trigger default.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18121-221">Der Typ des Werts, der für `defaultValue` bereitgestellt wird, muss mit dem Typ identisch sein, der in der ursprünglichen Registrierung der Abhängigkeits Eigenschaft angegeben ist, auf die diese Metadaten angewendet werden.</span><span class="sxs-lookup"><span data-stu-id="18121-221">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="18121-222">Konflikte zwischen metadatenstandardwerttyp und dem Typ der Abhängigkeits Eigenschaft, auf die Sie angewendet wird, können schwierig zu debuggen sein, da der Konflikt während der Kompilierung nicht erkennbar ist.</span><span class="sxs-lookup"><span data-stu-id="18121-222">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="18121-223">Das Eigenschaften System wertet den effektiven Wert einer Eigenschaft erst zur Laufzeit aus, d. h., das Ergebnis eines standardmäßigen Werttyps ist ein Laufzeitfehler.</span><span class="sxs-lookup"><span data-stu-id="18121-223">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="18121-224">Der Wert <xref:System.Windows.DependencyProperty.UnsetValue> hat im Eigenschaften System eine besondere Bedeutung und kann nicht als Standardwert für die Abhängigkeits Eigenschaft verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="18121-224">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="18121-225">Der `isAnimationProhibited`-Parameter legt den Anfangswert der <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> Eigenschaft fest, die von der unmittelbaren Basis <xref:System.Windows.UIPropertyMetadata> Klasse deklariert wird.</span><span class="sxs-lookup"><span data-stu-id="18121-225">The `isAnimationProhibited` parameter sets the initial value of the <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> property declared by the immediate base <xref:System.Windows.UIPropertyMetadata> class.</span></span>  
  
 <span data-ttu-id="18121-226">Weitere Informationen zum Verhalten der Update Quelle für Bindungen finden Sie unter [Übersicht über die Datenbindung](/dotnet/framework/wpf/data/data-binding-overview).</span><span class="sxs-lookup"><span data-stu-id="18121-226">For more information about the update source behavior for bindings, see [Data Binding Overview](/dotnet/framework/wpf/data/data-binding-overview).</span></span>  
  
 <span data-ttu-id="18121-227">Werte, die im `flags`-Parameter als Set-Flags gekennzeichnet sind, legen den booleschen Wert <xref:System.Windows.FrameworkPropertyMetadata> Eigenschaften, die mit diesem <xref:System.Windows.FrameworkPropertyMetadataOptions> flagnamen identisch sind, auf `true`fest.</span><span class="sxs-lookup"><span data-stu-id="18121-227">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="18121-228">Sie können die Werte der Eigenschaften in den Metadaten weiterhin ändern, solange die Metadaten noch nicht auf einen bestimmten Eigenschafts System Vorgang angewendet wurden.</span><span class="sxs-lookup"><span data-stu-id="18121-228">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC_IAP_DUST](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc_iap_dust)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="18121-229"><paramref name="defaultValue" /> ist auf <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> festgelegt.</span><span class="sxs-lookup"><span data-stu-id="18121-229"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName="AffectsArrange">
      <MemberSignature Language="C#" Value="public bool AffectsArrange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsArrange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsArrange" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsArrange As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsArrange { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsArrange : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsArrange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18121-230">Dient zum Abrufen oder Festlegen eines Werts, der angibt, ob eine Abhängigkeitseigenschaft möglicherweise die Anordnungsphase während Layout-Engine-Vorgängen beeinflusst.</span><span class="sxs-lookup"><span data-stu-id="18121-230">Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass during layout engine operations.</span></span></summary>
        <value><span data-ttu-id="18121-231"><see langword="true" />, wenn die Abhängigkeitseigenschaft, für die diese Metadaten vorhanden sind, möglicherweise die Anordnungsphase beeinflusst, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="18121-231"><see langword="true" /> if the dependency property on which this metadata exists potentially affects the arrange pass; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="18121-232">Der Standardwert lautet <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="18121-232">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18121-233"><xref:System.Windows.FrameworkElement> und <xref:System.Windows.FrameworkContentElement> enthalten eine Implementierung von <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>, mit der effektive Wertänderungen an allen in einem Element vorhandenen Abhängigkeits Eigenschaften überwacht werden.</span><span class="sxs-lookup"><span data-stu-id="18121-233"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="18121-234">Im Rahmen dieser Logik wird durch Abhängigkeits Eigenschaften, die den effektiven Wert ändern und Metadaten enthalten, bei denen <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> auf `true` festgelegt ist, eine verzögerte Anforderung initiiert, um die visuellen Elemente für dieses Element (einen <xref:System.Windows.UIElement.InvalidateArrange%2A>aufzurufen) ungültig zu machen.</span><span class="sxs-lookup"><span data-stu-id="18121-234">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element (a call to <xref:System.Windows.UIElement.InvalidateArrange%2A>).</span></span> <span data-ttu-id="18121-235">Da diese Implementierung auf WPF-Frameworkebene bereits vorhanden ist, müssen Sie in der Regel keine Abhängigkeits Eigenschaften mit <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> suchen, es sei denn, Sie ersetzen oder ändern das Layoutverhalten auf WPF-Frameworkebene.</span><span class="sxs-lookup"><span data-stu-id="18121-235">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="18121-236">Benutzerdefinierte <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> Implementierungen können ein ähnliches Verhalten für Änderungen an Abhängigkeits Eigenschaften haben, bei denen <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> `true`ist.</span><span class="sxs-lookup"><span data-stu-id="18121-236">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> is `true`.</span></span>  
  
 <span data-ttu-id="18121-237">Eigenschaften für abgeleitete Klassen von <xref:System.Windows.PropertyMetadata> werden in der Regel im Objektmodell als Lese-/Schreibzugriff definiert.</span><span class="sxs-lookup"><span data-stu-id="18121-237">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="18121-238">So können Sie nach der Initialisierung der-Instanz angepasst werden.</span><span class="sxs-lookup"><span data-stu-id="18121-238">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="18121-239">Nachdem die Metadaten jedoch im Rahmen eines Aufrufes <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>verarbeitet wurden, versiegelt das Eigenschaften System, dass die Metadateninstanz und die Eigenschaften, die die Einzelheiten der Metadaten vermitteln, jetzt als unveränderlich angesehen werden.</span><span class="sxs-lookup"><span data-stu-id="18121-239">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="18121-240">Wenn Sie versuchen, diese Eigenschaft festzulegen, nachdem <xref:System.Windows.PropertyMetadata.IsSealed%2A> in dieser Metadateninstanz `true` ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="18121-240">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsArrange"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="18121-241">Verwendung von XAML-Text</span><span class="sxs-lookup"><span data-stu-id="18121-241">XAML Text Usage</span></span>  
 <span data-ttu-id="18121-242">Member dieser Klasse werden in der Regel nicht in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]verwendet.</span><span class="sxs-lookup"><span data-stu-id="18121-242">Members of this class are either not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18121-243">Im folgenden Beispiel werden die Standard Metadaten aus verschiedenen Abhängigkeits Eigenschaften Feldern abgerufen, der Wert verschiedener <xref:System.Windows.FrameworkPropertyMetadata> Eigenschaften abgefragt und die Informationen zum Auffüllen einer Tabelle zum Implementieren eines "metadatenbrowsers" verwendet.</span><span class="sxs-lookup"><span data-stu-id="18121-243">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="18121-244">Die Metadaten wurden bereits auf einen Vorgang der Abhängigkeitseigenschaft angewendet, sodass Metadaten versiegelt sind und keine Eigenschaften für Metadaten festgelegt werden können.</span><span class="sxs-lookup"><span data-stu-id="18121-244">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="AffectsMeasure">
      <MemberSignature Language="C#" Value="public bool AffectsMeasure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsMeasure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsMeasure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsMeasure { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsMeasure : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsMeasure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18121-245">Dient zum Abrufen oder Festlegen eines Werts, der angibt, ob eine Abhängigkeitseigenschaft möglicherweise die Messphase während Layout-Engine-Vorgängen beeinflusst.</span><span class="sxs-lookup"><span data-stu-id="18121-245">Gets or sets a value that indicates whether a dependency property potentially affects the measure pass during layout engine operations.</span></span></summary>
        <value><span data-ttu-id="18121-246"><see langword="true" />, wenn die Abhängigkeitseigenschaft, für die diese Metadaten vorhanden sind, möglicherweise die Messphase beeinflusst, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="18121-246"><see langword="true" /> if the dependency property on which this metadata exists potentially affects the measure pass; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="18121-247">Der Standardwert lautet <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="18121-247">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18121-248"><xref:System.Windows.FrameworkElement> und <xref:System.Windows.FrameworkContentElement> enthalten eine Implementierung von <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>, mit der effektive Wertänderungen an allen in einem Element vorhandenen Abhängigkeits Eigenschaften überwacht werden.</span><span class="sxs-lookup"><span data-stu-id="18121-248"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="18121-249">Im Rahmen dieser Logik wird durch Abhängigkeits Eigenschaften, die den effektiven Wert ändern und Metadaten enthalten, bei denen <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> auf `true` festgelegt ist, eine verzögerte Anforderung initiiert, um die visuellen Elemente für dieses Element ungültig zu machen.</span><span class="sxs-lookup"><span data-stu-id="18121-249">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element.</span></span> <span data-ttu-id="18121-250">Da diese Implementierung auf WPF-Frameworkebene bereits vorhanden ist, müssen Sie in der Regel keine Abhängigkeits Eigenschaften mit <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> suchen, es sei denn, Sie ersetzen oder ändern das Layoutverhalten auf WPF-Frameworkebene.</span><span class="sxs-lookup"><span data-stu-id="18121-250">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="18121-251">Benutzerdefinierte <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> Implementierungen können ein ähnliches Verhalten für Änderungen an Abhängigkeits Eigenschaften haben, bei denen <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> `true`ist.</span><span class="sxs-lookup"><span data-stu-id="18121-251">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> is `true`.</span></span>  
  
 <span data-ttu-id="18121-252">Eigenschaften für abgeleitete Klassen von <xref:System.Windows.PropertyMetadata> werden in der Regel im Objektmodell als Lese-/Schreibzugriff definiert.</span><span class="sxs-lookup"><span data-stu-id="18121-252">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="18121-253">So können Sie nach der Initialisierung der-Instanz angepasst werden.</span><span class="sxs-lookup"><span data-stu-id="18121-253">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="18121-254">Nachdem die Metadaten jedoch im Rahmen eines Aufrufes <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>verarbeitet wurden, versiegelt das Eigenschaften System, dass die Metadateninstanz und die Eigenschaften, die die Einzelheiten der Metadaten vermitteln, jetzt als unveränderlich angesehen werden.</span><span class="sxs-lookup"><span data-stu-id="18121-254">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="18121-255">Wenn Sie versuchen, diese Eigenschaft festzulegen, nachdem <xref:System.Windows.PropertyMetadata.IsSealed%2A> in dieser Metadateninstanz `true` ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="18121-255">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsMeasure"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="18121-256">Verwendung von XAML-Text</span><span class="sxs-lookup"><span data-stu-id="18121-256">XAML Text Usage</span></span>  
 <span data-ttu-id="18121-257">Member dieser Klasse werden in der Regel nicht in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]verwendet.</span><span class="sxs-lookup"><span data-stu-id="18121-257">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18121-258">Im folgenden Beispiel werden die Standard Metadaten aus verschiedenen Abhängigkeits Eigenschaften Feldern abgerufen, der Wert verschiedener <xref:System.Windows.FrameworkPropertyMetadata> Eigenschaften abgefragt und die Informationen zum Auffüllen einer Tabelle zum Implementieren eines "metadatenbrowsers" verwendet.</span><span class="sxs-lookup"><span data-stu-id="18121-258">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="18121-259">Die Metadaten wurden bereits auf einen Vorgang der Abhängigkeitseigenschaft angewendet, sodass Metadaten versiegelt sind und keine Eigenschaften für Metadaten festgelegt werden können.</span><span class="sxs-lookup"><span data-stu-id="18121-259">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="AffectsParentArrange">
      <MemberSignature Language="C#" Value="public bool AffectsParentArrange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsParentArrange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsParentArrange As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsParentArrange { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsParentArrange : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsParentArrange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18121-260">Dient zum Abrufen oder Festlegen eines Werts, der angibt, ob eine Abhängigkeitseigenschaft möglicherweise die Anordnungsphase des übergeordneten Elements während Layout-Engine-Vorgängen beeinflusst.</span><span class="sxs-lookup"><span data-stu-id="18121-260">Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass of its parent element's layout during layout engine operations.</span></span></summary>
        <value><span data-ttu-id="18121-261"><see langword="true" />, wenn die Abhängigkeitseigenschaft, für die diese Metadaten vorhanden sind, möglicherweise die Anordnungsphase beeinflusst (insbesondere für das übergeordnete Element), andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="18121-261"><see langword="true" /> if the dependency property on which this metadata exists potentially affects the arrange pass specifically on its parent element; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="18121-262">Der Standardwert lautet <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="18121-262">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18121-263"><xref:System.Windows.FrameworkElement> und <xref:System.Windows.FrameworkContentElement> enthalten eine Implementierung von <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>, mit der effektive Wertänderungen an allen in einem Element vorhandenen Abhängigkeits Eigenschaften überwacht werden.</span><span class="sxs-lookup"><span data-stu-id="18121-263"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="18121-264">Im Rahmen dieser Logik wird durch Abhängigkeits Eigenschaften, die einen effektiven Wert ändern und Metadaten aufweisen, bei denen <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> auf `true` festgelegt ist, eine verzögerte Anforderung initiiert, um die visuellen Elemente für das übergeordnete Element ungültig zu machen.</span><span class="sxs-lookup"><span data-stu-id="18121-264">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> set to `true` will initiate a deferred request to invalidate the visuals for the parent element.</span></span>  
  
 <span data-ttu-id="18121-265">Im Allgemeinen ist es nicht erforderlich, Änderungen einer <xref:System.Windows.FrameworkElement>-Eigenschaft mithilfe <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> an ein übergeordnetes Element zu melden, da das Element selbst bereits seine eigene <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> `true`hat.</span><span class="sxs-lookup"><span data-stu-id="18121-265">Generally, you do not need to report changes of a <xref:System.Windows.FrameworkElement> property to a parent element using <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> because the element itself would already have its own <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> as `true`.</span></span> <span data-ttu-id="18121-266">Das ist in der Regel ausreichend, da Änderungen im untergeordneten Element im Allgemeinen eine übergeordnete anordnen initiieren, wenn dies angebracht ist.</span><span class="sxs-lookup"><span data-stu-id="18121-266">That is usually sufficient, because changes in the child element generally initiate a parent arrange when appropriate.</span></span> <span data-ttu-id="18121-267"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> wird manchmal für eine <xref:System.Windows.FrameworkContentElement> abgeleitete Klasse verwendet.</span><span class="sxs-lookup"><span data-stu-id="18121-267"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is sometimes used for a <xref:System.Windows.FrameworkContentElement> derived class.</span></span> <span data-ttu-id="18121-268">In diesem Fall legt das untergeordnete-Element eine Eigenschaft fest, aber eine <xref:System.Windows.FrameworkContentElement> abgeleitete Klasse steuert nicht Ihr eigenes Rendering.</span><span class="sxs-lookup"><span data-stu-id="18121-268">In this case, the child element sets a property, but a <xref:System.Windows.FrameworkContentElement> derived class does not control its own rendering.</span></span> <span data-ttu-id="18121-269">Das Rendering wird von einem <xref:System.Windows.FrameworkElement> übergeordneten Element behandelt, das als Inhalts Host fungiert.</span><span class="sxs-lookup"><span data-stu-id="18121-269">The rendering is handled by a <xref:System.Windows.FrameworkElement> parent element that serves as the content host.</span></span> <span data-ttu-id="18121-270">Beispielsweise wird durch eine Änderung des Werts der angefügten <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> angefügten Eigenschaft durch ein untergeordnetes Element die Anordnung des übergeordneten Elements ungültig, da die Position des untergeordneten Elements im übergeordneten Element geändert werden muss.</span><span class="sxs-lookup"><span data-stu-id="18121-270">For instance, a change to the value of the <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> attached property by a child element invalidates arrange of the parent, because the position of the child in the parent must be changed.</span></span> <span data-ttu-id="18121-271">Daher verfügt die <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> angefügte-Eigenschaft über Metadaten, bei denen <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> `true`ist.</span><span class="sxs-lookup"><span data-stu-id="18121-271">Therefore, the <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> attached property has metadata where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is `true`.</span></span> <span data-ttu-id="18121-272">Ein weiteres Beispiel ist <xref:System.Windows.Controls.Control.Padding%2A>. Wenn diese Eigenschaft geändert wird, kann das übergeordnete Element abhängig vom verfügbaren Platz die Positionierung des untergeordneten Elements ändern.</span><span class="sxs-lookup"><span data-stu-id="18121-272">Another example is <xref:System.Windows.Controls.Control.Padding%2A>; when this property changes, the parent might change the positioning of the child, depending on available space.</span></span>  
  
 <span data-ttu-id="18121-273">Da diese Implementierung auf WPF-Frameworkebene bereits vorhanden ist, müssen Sie in der Regel keine Abhängigkeits Eigenschaften mit <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> suchen, es sei denn, Sie ersetzen oder ändern das Layoutverhalten auf WPF-Frameworkebene.</span><span class="sxs-lookup"><span data-stu-id="18121-273">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="18121-274">Benutzerdefinierte <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> Implementierungen können ein ähnliches Verhalten für Änderungen an Abhängigkeits Eigenschaften haben, bei denen <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> `true`ist.</span><span class="sxs-lookup"><span data-stu-id="18121-274">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is `true`.</span></span>  
  
 <span data-ttu-id="18121-275">Eigenschaften für abgeleitete Klassen von <xref:System.Windows.PropertyMetadata> werden in der Regel im Objektmodell als Lese-/Schreibzugriff definiert.</span><span class="sxs-lookup"><span data-stu-id="18121-275">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="18121-276">So können Sie nach der Initialisierung der-Instanz angepasst werden.</span><span class="sxs-lookup"><span data-stu-id="18121-276">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="18121-277">Nachdem die Metadaten jedoch im Rahmen eines Aufrufes <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>verarbeitet wurden, versiegelt das Eigenschaften System, dass die Metadateninstanz und die Eigenschaften, die die Einzelheiten der Metadaten vermitteln, jetzt als unveränderlich angesehen werden.</span><span class="sxs-lookup"><span data-stu-id="18121-277">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="18121-278">Wenn Sie versuchen, diese Eigenschaft festzulegen, nachdem <xref:System.Windows.PropertyMetadata.IsSealed%2A> in dieser Metadateninstanz `true` ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="18121-278">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsParentArrange"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="18121-279">Verwendung von XAML-Text</span><span class="sxs-lookup"><span data-stu-id="18121-279">XAML Text Usage</span></span>  
 <span data-ttu-id="18121-280">Member dieser Klasse werden in der Regel nicht in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]verwendet.</span><span class="sxs-lookup"><span data-stu-id="18121-280">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="18121-281">Die Metadaten wurden bereits auf einen Vorgang der Abhängigkeitseigenschaft angewendet, sodass Metadaten versiegelt sind und keine Eigenschaften für Metadaten festgelegt werden können.</span><span class="sxs-lookup"><span data-stu-id="18121-281">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="AffectsParentMeasure">
      <MemberSignature Language="C#" Value="public bool AffectsParentMeasure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsParentMeasure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsParentMeasure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsParentMeasure { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsParentMeasure : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18121-282">Dient zum Abrufen oder Festlegen eines Werts, der angibt, ob eine Abhängigkeitseigenschaft möglicherweise den Bemessungsdurchgang des übergeordneten Elements während Layout-Engine-Vorgängen beeinflusst.</span><span class="sxs-lookup"><span data-stu-id="18121-282">Gets or sets a value that indicates whether a dependency property potentially affects the measure pass of its parent element's layout during layout engine operations.</span></span></summary>
        <value><span data-ttu-id="18121-283"><see langword="true" />, wenn die Abhängigkeits Eigenschaft, für die diese Metadaten vorhanden sind, möglicherweise den Measure-Durchlauf speziell für das übergeordnete Element beeinflusst. Andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="18121-283"><see langword="true" /> if the dependency property on which this metadata exists potentially affects the measure pass specifically on its parent element; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="18121-284">Der Standardwert lautet <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="18121-284">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18121-285"><xref:System.Windows.FrameworkElement> und <xref:System.Windows.FrameworkContentElement> enthalten eine Implementierung von <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>, mit der effektive Wertänderungen an allen in einem Element vorhandenen Abhängigkeits Eigenschaften überwacht werden.</span><span class="sxs-lookup"><span data-stu-id="18121-285"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="18121-286">Im Rahmen dieser Logik wird durch Abhängigkeits Eigenschaften, die einen effektiven Wert ändern und Metadaten aufweisen, bei denen <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> auf `true` festgelegt ist, eine verzögerte Anforderung initiiert, um die visuellen Elemente für das übergeordnete Element ungültig zu machen.</span><span class="sxs-lookup"><span data-stu-id="18121-286">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> set to `true` will initiate a deferred request to invalidate the visuals for the parent element.</span></span> <span data-ttu-id="18121-287">Da diese Implementierung auf WPF-Frameworkebene bereits vorhanden ist, müssen Sie in der Regel keine Abhängigkeits Eigenschaften mit <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> suchen, es sei denn, Sie ersetzen oder ändern das Layoutverhalten auf WPF-Frameworkebene.</span><span class="sxs-lookup"><span data-stu-id="18121-287">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="18121-288">Im Allgemeinen ist es nicht erforderlich, Änderungen einer <xref:System.Windows.FrameworkElement>-Eigenschaft mithilfe <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> an ein übergeordnetes Element zu melden, da das Element selbst bereits seine eigene <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> `true`hat.</span><span class="sxs-lookup"><span data-stu-id="18121-288">Generally, you do not need to report changes of a <xref:System.Windows.FrameworkElement> property to a parent element using <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> because the element itself would already have its own <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> as `true`.</span></span> <span data-ttu-id="18121-289">Das ist in der Regel ausreichend, da Änderungen im untergeordneten Element in der Regel eine übergeordnete Maßübergabe auslösen, wenn dies angebracht ist.</span><span class="sxs-lookup"><span data-stu-id="18121-289">That is usually sufficient, because changes in the child element generally initiate a parent measure pass when appropriate.</span></span> <span data-ttu-id="18121-290"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> wird manchmal für eine <xref:System.Windows.FrameworkContentElement> abgeleitete Klasse verwendet.</span><span class="sxs-lookup"><span data-stu-id="18121-290"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is sometimes used for a <xref:System.Windows.FrameworkContentElement> derived class.</span></span> <span data-ttu-id="18121-291">In diesem Fall legt das untergeordnete-Element eine Eigenschaft fest, aber eine <xref:System.Windows.FrameworkContentElement> abgeleitete Klasse steuert nicht Ihr eigenes Rendering.</span><span class="sxs-lookup"><span data-stu-id="18121-291">In this case, the child element sets a property, but a <xref:System.Windows.FrameworkContentElement> derived class does not control its own rendering.</span></span> <span data-ttu-id="18121-292">Das Rendering wird von einem <xref:System.Windows.FrameworkElement> übergeordneten Element behandelt, das als Inhalts Host fungiert.</span><span class="sxs-lookup"><span data-stu-id="18121-292">The rendering is handled by a <xref:System.Windows.FrameworkElement> parent element that serves as the content host.</span></span> <span data-ttu-id="18121-293">Beispielsweise wird durch eine Änderung am Wert der <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType>-Eigenschaft durch ein untergeordnetes Element das Measure des übergeordneten Elements ungültig, da sich der relative Abstand von Absätzen ändern und die Größe des Inhalts Hosts erhöhen oder verringern kann.</span><span class="sxs-lookup"><span data-stu-id="18121-293">For instance, a change to the value of the <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> property by a child element invalidates measure of the parent, because the relative spacing of paragraphs might change and might increase or decrease the content host size.</span></span> <span data-ttu-id="18121-294">Daher verfügt die <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType>-Eigenschaft über Metadaten, bei denen <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> `true`ist.</span><span class="sxs-lookup"><span data-stu-id="18121-294">Therefore, the <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> property has metadata where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`.</span></span>  
  
 <span data-ttu-id="18121-295">Inhalts Host Elemente suchen häufig auch nach Änderungen in Abhängigkeits Eigenschaften, bei denen <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> als Teil der Inhalts Host-Renderinglogik `true`ist.</span><span class="sxs-lookup"><span data-stu-id="18121-295">Content host elements also frequently look for changes in dependency properties where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`, as part of content host rendering logic.</span></span> <span data-ttu-id="18121-296">Beispielsweise muss das <xref:System.Windows.Controls.TextBox>-Element auf bestimmte Änderungen innerhalb von Text reagieren, die ggf. erfordern, dass das umgebende Feld des <xref:System.Windows.Controls.TextBox> selbst geändert werden kann.</span><span class="sxs-lookup"><span data-stu-id="18121-296">For instance, the <xref:System.Windows.Controls.TextBox> element must respond to certain changes within text that might require that the bounding box of the <xref:System.Windows.Controls.TextBox> itself be changed.</span></span>  
  
 <span data-ttu-id="18121-297">Benutzerdefinierte <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> Implementierungen können ein ähnliches Verhalten für Änderungen an Abhängigkeits Eigenschaften haben, bei denen <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> `true`ist.</span><span class="sxs-lookup"><span data-stu-id="18121-297">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`.</span></span>  
  
 <span data-ttu-id="18121-298">Eigenschaften für abgeleitete Klassen von <xref:System.Windows.PropertyMetadata> werden in der Regel im Objektmodell als Lese-/Schreibzugriff definiert.</span><span class="sxs-lookup"><span data-stu-id="18121-298">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="18121-299">So können Sie nach der Initialisierung der-Instanz angepasst werden.</span><span class="sxs-lookup"><span data-stu-id="18121-299">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="18121-300">Nachdem die Metadaten jedoch im Rahmen eines Aufrufes <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>verarbeitet wurden, versiegelt das Eigenschaften System, dass die Metadateninstanz und die Eigenschaften, die die Einzelheiten der Metadaten vermitteln, jetzt als unveränderlich angesehen werden.</span><span class="sxs-lookup"><span data-stu-id="18121-300">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="18121-301">Wenn Sie versuchen, diese Eigenschaft festzulegen, nachdem <xref:System.Windows.PropertyMetadata.IsSealed%2A> in dieser Metadateninstanz `true` ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="18121-301">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsParentMeasure"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="18121-302">Verwendung von XAML-Text</span><span class="sxs-lookup"><span data-stu-id="18121-302">XAML Text Usage</span></span>  
 <span data-ttu-id="18121-303">Member dieser Klasse werden in der Regel nicht in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]verwendet.</span><span class="sxs-lookup"><span data-stu-id="18121-303">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="18121-304">Die Metadaten wurden bereits auf einen Vorgang der Abhängigkeitseigenschaft angewendet, sodass Metadaten versiegelt sind und keine Eigenschaften für Metadaten festgelegt werden können.</span><span class="sxs-lookup"><span data-stu-id="18121-304">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="AffectsRender">
      <MemberSignature Language="C#" Value="public bool AffectsRender { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsRender" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsRender" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsRender As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsRender { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsRender : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsRender" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18121-305">Ruft einen Wert ab oder legt diesen fest, der angibt, ob sich eine Abhängigkeitseigenschaft möglicherweise in irgendeiner Weise (nicht speziell in Bezug auf Anordnung oder Messung, jedoch hinsichtlich eines erforderlichen Neuzeichnens) auf das allgemeine Layout auswirkt.</span><span class="sxs-lookup"><span data-stu-id="18121-305">Gets or sets a value that indicates whether a dependency property potentially affects the general layout in some way that does not specifically influence arrangement or measurement, but would require a redraw.</span></span></summary>
        <value><span data-ttu-id="18121-306"><see langword="true" />, falls die Abhängigkeitseigenschaft, für die diese Metadaten vorhanden sind, sich auf das Rendering auswirkt, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="18121-306"><see langword="true" /> if the dependency property on which this metadata exists affects rendering; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="18121-307">Der Standardwert lautet <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="18121-307">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18121-308"><xref:System.Windows.FrameworkElement> und <xref:System.Windows.FrameworkContentElement> enthalten eine Implementierung von <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>, mit der effektive Wertänderungen an allen in einem Element vorhandenen Abhängigkeits Eigenschaften überwacht werden.</span><span class="sxs-lookup"><span data-stu-id="18121-308"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="18121-309">Im Rahmen dieser Logik wird durch Abhängigkeits Eigenschaften, die den effektiven Wert ändern und Metadaten enthalten, bei denen <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> auf `true` festgelegt ist, eine verzögerte Anforderung initiiert, um die visuellen Elemente für dieses Element ungültig zu machen.</span><span class="sxs-lookup"><span data-stu-id="18121-309">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element.</span></span> <span data-ttu-id="18121-310">Da diese Implementierung auf WPF-Frameworkebene bereits vorhanden ist, müssen Sie in der Regel keine Abhängigkeits Eigenschaften mit <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> suchen, es sei denn, Sie ersetzen oder ändern das Layoutverhalten auf WPF-Frameworkebene.</span><span class="sxs-lookup"><span data-stu-id="18121-310">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="18121-311">Benutzerdefinierte <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> Implementierungen können ein ähnliches Verhalten für Änderungen an Abhängigkeits Eigenschaften haben, bei denen <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> `true`ist.</span><span class="sxs-lookup"><span data-stu-id="18121-311">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> is `true`.</span></span>  
  
 <span data-ttu-id="18121-312">Eigenschaften für abgeleitete Klassen von <xref:System.Windows.PropertyMetadata> werden in der Regel im Objektmodell als Lese-/Schreibzugriff definiert.</span><span class="sxs-lookup"><span data-stu-id="18121-312">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="18121-313">So können Sie nach der Initialisierung der-Instanz angepasst werden.</span><span class="sxs-lookup"><span data-stu-id="18121-313">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="18121-314">Nachdem die Metadaten jedoch im Rahmen eines Aufrufes <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>verarbeitet wurden, versiegelt das Eigenschaften System, dass die Metadateninstanz und die Eigenschaften, die die Einzelheiten der Metadaten vermitteln, jetzt als unveränderlich angesehen werden.</span><span class="sxs-lookup"><span data-stu-id="18121-314">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="18121-315">Wenn Sie versuchen, diese Eigenschaft festzulegen, nachdem <xref:System.Windows.PropertyMetadata.IsSealed%2A> in dieser Metadateninstanz `true` ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="18121-315">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsRender"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="18121-316">Verwendung von XAML-Text</span><span class="sxs-lookup"><span data-stu-id="18121-316">XAML Text Usage</span></span>  
 <span data-ttu-id="18121-317">Member dieser Klasse werden in der Regel nicht in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]verwendet.</span><span class="sxs-lookup"><span data-stu-id="18121-317">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18121-318">Im folgenden Beispiel werden die Standard Metadaten aus verschiedenen Abhängigkeits Eigenschaften Feldern abgerufen, der Wert verschiedener <xref:System.Windows.FrameworkPropertyMetadata> Eigenschaften abgefragt und die Informationen zum Auffüllen einer Tabelle zum Implementieren eines "metadatenbrowsers" verwendet.</span><span class="sxs-lookup"><span data-stu-id="18121-318">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="18121-319">Die Metadaten wurden bereits auf einen Vorgang der Abhängigkeitseigenschaft angewendet, sodass Metadaten versiegelt sind und keine Eigenschaften für Metadaten festgelegt werden können.</span><span class="sxs-lookup"><span data-stu-id="18121-319">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="BindsTwoWayByDefault">
      <MemberSignature Language="C#" Value="public bool BindsTwoWayByDefault { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BindsTwoWayByDefault" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault" />
      <MemberSignature Language="VB.NET" Value="Public Property BindsTwoWayByDefault As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BindsTwoWayByDefault { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.BindsTwoWayByDefault : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18121-320">Ruft einen Wert ab, der angibt, ob die Eigenschaft standardmäßig bidirektional gebunden wird, oder legt ihn fest.</span><span class="sxs-lookup"><span data-stu-id="18121-320">Gets or sets a value that indicates whether the property binds two-way by default.</span></span></summary>
        <value><span data-ttu-id="18121-321"><see langword="true" />, falls die Abhängigkeitseigenschaft, für die diese Metadaten vorhanden sind, standardmäßig bidirektional gebunden wird, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="18121-321"><see langword="true" /> if the dependency property on which this metadata exists binds two-way by default; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="18121-322">Der Standardwert lautet <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="18121-322">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18121-323">Wenn diese Eigenschaft nicht `true`wird, sind Bindungs Aktualisierungen standardmäßig unidirektional, basierend auf dem Standardverhalten der <xref:System.Windows.Data.Binding> Konstruktoren oder der entsprechenden [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]-Syntax.</span><span class="sxs-lookup"><span data-stu-id="18121-323">In absence of this property being `true`, binding updates are one-way by default, based on the default behavior of the <xref:System.Windows.Data.Binding> constructors or equivalent [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="18121-324">In vorhandenen Elementen wird diese Eigenschaft in der Regel auf `true` in den Metadaten für Abhängigkeits Eigenschaften festgelegt, die sowohl den Status melden als auch durch eine Benutzeraktion änderbar sind, z. b. <xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="18121-324">In existing elements, you will usually find this property set to `true` in metadata for dependency properties that both report state and are modifiable by user action, for example <xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="18121-325">Mit dieser Eigenschaft werden nur die standardmäßigen Bindungs Update Merkmale der Abhängigkeits Eigenschaft im allgemeinen gemeldet.</span><span class="sxs-lookup"><span data-stu-id="18121-325">This property only reports the default binding update characteristics of the dependency property in general.</span></span> <span data-ttu-id="18121-326">Jede Bindung, die auf diese Eigenschaft für eine Instanz festgelegt ist, kann die <xref:System.Windows.Data.Binding.Mode%2A>-Eigenschaft der Bindung lokal festlegen und diese Standardeinstellung ändern.</span><span class="sxs-lookup"><span data-stu-id="18121-326">Any binding set to this property on an instance can locally set the <xref:System.Windows.Data.Binding.Mode%2A> property of the binding and change this default.</span></span>  
  
 <span data-ttu-id="18121-327">Eigenschaften für abgeleitete Klassen von <xref:System.Windows.PropertyMetadata> werden in der Regel im Objektmodell als Lese-/Schreibzugriff definiert.</span><span class="sxs-lookup"><span data-stu-id="18121-327">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="18121-328">So können Sie nach der Initialisierung der-Instanz angepasst werden.</span><span class="sxs-lookup"><span data-stu-id="18121-328">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="18121-329">Nachdem die Metadaten jedoch im Rahmen eines Aufrufes <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>verarbeitet wurden, versiegelt das Eigenschaften System, dass die Metadateninstanz und die Eigenschaften, die die Einzelheiten der Metadaten vermitteln, jetzt als unveränderlich angesehen werden.</span><span class="sxs-lookup"><span data-stu-id="18121-329">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="18121-330">Wenn Sie versuchen, diese Eigenschaft festzulegen, nachdem <xref:System.Windows.PropertyMetadata.IsSealed%2A> in dieser Metadateninstanz `true` ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="18121-330">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_BindsTwoWayByDefault"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="18121-331">Verwendung von XAML-Text</span><span class="sxs-lookup"><span data-stu-id="18121-331">XAML Text Usage</span></span>  
 <span data-ttu-id="18121-332">Member dieser Klasse werden in der Regel nicht in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]verwendet.</span><span class="sxs-lookup"><span data-stu-id="18121-332">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18121-333">Im folgenden Beispiel werden die Standard Metadaten aus verschiedenen Abhängigkeits Eigenschaften Feldern abgerufen, der Wert verschiedener <xref:System.Windows.FrameworkPropertyMetadata> Eigenschaften abgefragt und die Informationen zum Auffüllen einer Tabelle zum Implementieren eines "metadatenbrowsers" verwendet.</span><span class="sxs-lookup"><span data-stu-id="18121-333">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="18121-334">Die Metadaten wurden bereits auf einen Vorgang der Abhängigkeitseigenschaft angewendet, sodass Metadaten versiegelt sind und keine Eigenschaften für Metadaten festgelegt werden können.</span><span class="sxs-lookup"><span data-stu-id="18121-334">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="DefaultUpdateSourceTrigger">
      <MemberSignature Language="C#" Value="public System.Windows.Data.UpdateSourceTrigger DefaultUpdateSourceTrigger { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Data.UpdateSourceTrigger DefaultUpdateSourceTrigger" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultUpdateSourceTrigger As UpdateSourceTrigger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::UpdateSourceTrigger DefaultUpdateSourceTrigger { System::Windows::Data::UpdateSourceTrigger get(); void set(System::Windows::Data::UpdateSourceTrigger value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultUpdateSourceTrigger : System.Windows.Data.UpdateSourceTrigger with get, set" Usage="System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.UpdateSourceTrigger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18121-335">Ruft den Standardwert für <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> ab, der beim Anwenden von Bindungen für die Eigenschaft mit diesen Metadaten verwendet werden soll, bei denen <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> auf <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" /> festgelegt ist, oder legt ihn fest.</span><span class="sxs-lookup"><span data-stu-id="18121-335">Gets or sets the default for <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> to use when bindings for the property with this metadata are applied, which have their <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> set to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span></span></summary>
        <value><span data-ttu-id="18121-336">Ein Wert der Enumeration, ungleich <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span><span class="sxs-lookup"><span data-stu-id="18121-336">A value of the enumeration, other than <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18121-337">Eigenschaften für abgeleitete Klassen von <xref:System.Windows.PropertyMetadata> werden in der Regel im Objektmodell als Lese-/Schreibzugriff definiert.</span><span class="sxs-lookup"><span data-stu-id="18121-337">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="18121-338">So können Sie nach der Initialisierung der-Instanz angepasst werden.</span><span class="sxs-lookup"><span data-stu-id="18121-338">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="18121-339">Nachdem die Metadaten jedoch im Rahmen eines Aufrufes <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>verarbeitet wurden, versiegelt das Eigenschaften System, dass die Metadateninstanz und die Eigenschaften, die die Einzelheiten der Metadaten vermitteln, jetzt als unveränderlich angesehen werden.</span><span class="sxs-lookup"><span data-stu-id="18121-339">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="18121-340">Wenn Sie versuchen, diese Eigenschaft festzulegen, nachdem <xref:System.Windows.PropertyMetadata.IsSealed%2A> in dieser Metadateninstanz `true` ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="18121-340">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_DefaultUpdateSourceTrigger"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="18121-341">Verwendung von XAML-Text</span><span class="sxs-lookup"><span data-stu-id="18121-341">XAML Text Usage</span></span>  
 <span data-ttu-id="18121-342">Member dieser Klasse werden in der Regel nicht in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]verwendet.</span><span class="sxs-lookup"><span data-stu-id="18121-342">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="18121-343">Diese Eigenschaft ist auf <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" /> festgelegt. Der von Ihnen festgelegte Wert soll bei der Anforderung durch Bindungen zum Standardwert werden.</span><span class="sxs-lookup"><span data-stu-id="18121-343">This property is set to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />; the value you set is supposed to become the default when requested by bindings.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="18121-344">Die Metadaten wurden bereits auf einen Vorgang der Abhängigkeitseigenschaft angewendet, sodass Metadaten versiegelt sind und keine Eigenschaften für Metadaten festgelegt werden können.</span><span class="sxs-lookup"><span data-stu-id="18121-344">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Inherits">
      <MemberSignature Language="C#" Value="public bool Inherits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Inherits" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.Inherits" />
      <MemberSignature Language="VB.NET" Value="Public Property Inherits As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Inherits { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Inherits : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.Inherits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18121-345">Ruft einen Wert ab, der angibt, ob der Wert für die Abhängigkeitseigenschaft vererbbar ist, oder legt ihn fest.</span><span class="sxs-lookup"><span data-stu-id="18121-345">Gets or sets a value that indicates whether the value of the dependency property is inheritable.</span></span></summary>
        <value><span data-ttu-id="18121-346"><see langword="true" />, wenn der Eigenschaftswert vererbbar ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="18121-346"><see langword="true" /> if the property value is inheritable; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="18121-347">Der Standardwert lautet <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="18121-347">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18121-348">Die Vererbung von Eigenschafts Werten ist eine Funktion des [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]-Eigenschaften Systems auf der WPF-Frameworkebene, bei der bestimmte Abhängigkeits Eigenschaften lokal für ein Element in oder in der Nähe des Stamms einer [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Elementstruktur festgelegt werden können und deren Wert dann von allen Elementen in der logischen Struktur von untergeordneten Elementen geerbt wird, die auch diese Eigenschaft besitzen.</span><span class="sxs-lookup"><span data-stu-id="18121-348">Property value inheritance is a feature of the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system at the WPF framework level, whereby certain dependency properties can be locally set on an element at or near the root of a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] element tree and then have their value inherited by all elements within the logical tree of child elements that also possess that property.</span></span> <span data-ttu-id="18121-349">Die Vererbung von Eigenschafts Werten ist standardmäßig nicht aktiviert, und das Aktivieren der Eigenschaft wirkt sich auf die Leistung aus.</span><span class="sxs-lookup"><span data-stu-id="18121-349">Property value inheritance is not enabled by default, and enabling it does have some performance implications.</span></span> <span data-ttu-id="18121-350">Weitere Informationen finden Sie unter [Vererbung von Eigenschaftswerten](/dotnet/framework/wpf/advanced/property-value-inheritance).</span><span class="sxs-lookup"><span data-stu-id="18121-350">For details, see [Property Value Inheritance](/dotnet/framework/wpf/advanced/property-value-inheritance).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="18121-351">Obwohl die Vererbung von Eigenschafts Werten für nicht angefügte Abhängigkeits Eigenschaften aussehen könnte, ist das Vererbungs Verhalten für eine nicht angefügte Eigenschaft über bestimmte Objekt-Objekt-Bereiche in der Laufzeitstruktur nicht definiert.</span><span class="sxs-lookup"><span data-stu-id="18121-351">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain object-object divisions in the runtime tree is undefined.</span></span> <span data-ttu-id="18121-352">Verwenden Sie immer <xref:System.Windows.DependencyProperty.RegisterAttached%2A>, um Eigenschaften zu registrieren, bei denen Sie <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in den Metadaten angeben.</span><span class="sxs-lookup"><span data-stu-id="18121-352">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span>  
  
 <span data-ttu-id="18121-353">Eigenschaften für abgeleitete Klassen von <xref:System.Windows.PropertyMetadata> werden in der Regel im Objektmodell als Lese-/Schreibzugriff definiert.</span><span class="sxs-lookup"><span data-stu-id="18121-353">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="18121-354">So können Sie nach der Initialisierung der-Instanz angepasst werden.</span><span class="sxs-lookup"><span data-stu-id="18121-354">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="18121-355">Nachdem die Metadaten jedoch im Rahmen eines Aufrufes <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>verarbeitet wurden, versiegelt das Eigenschaften System, dass die Metadateninstanz und die Eigenschaften, die die Einzelheiten der Metadaten vermitteln, jetzt als unveränderlich angesehen werden.</span><span class="sxs-lookup"><span data-stu-id="18121-355">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="18121-356">Wenn Sie versuchen, diese Eigenschaft festzulegen, nachdem <xref:System.Windows.PropertyMetadata.IsSealed%2A> in dieser Metadateninstanz `true` ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="18121-356">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_Inherits"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="18121-357">Verwendung von XAML-Text</span><span class="sxs-lookup"><span data-stu-id="18121-357">XAML Text Usage</span></span>  
 <span data-ttu-id="18121-358">Member dieser Klasse werden in der Regel nicht in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]verwendet.</span><span class="sxs-lookup"><span data-stu-id="18121-358">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18121-359">Im folgenden Beispiel werden die Standard Metadaten aus verschiedenen Abhängigkeits Eigenschaften Feldern abgerufen, der Wert verschiedener <xref:System.Windows.FrameworkPropertyMetadata> Eigenschaften abgefragt und die Informationen zum Auffüllen einer Tabelle zum Implementieren eines "metadatenbrowsers" verwendet.</span><span class="sxs-lookup"><span data-stu-id="18121-359">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="18121-360">Die Metadaten wurden bereits auf einen Vorgang der Abhängigkeitseigenschaft angewendet, sodass Metadaten versiegelt sind und keine Eigenschaften für Metadaten festgelegt werden können.</span><span class="sxs-lookup"><span data-stu-id="18121-360">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="IsDataBindingAllowed">
      <MemberSignature Language="C#" Value="public bool IsDataBindingAllowed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDataBindingAllowed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDataBindingAllowed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDataBindingAllowed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDataBindingAllowed : bool" Usage="System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18121-361">Ruft einen Wert ab, der anzeigt, ob die Datenbindung für die Abhängigkeitseigenschaft unterstützt wird.</span><span class="sxs-lookup"><span data-stu-id="18121-361">Gets a value that indicates whether data binding is supported for the dependency property.</span></span></summary>
        <value><span data-ttu-id="18121-362"><see langword="true" />, wenn die Datenbindung für die Abhängigkeitseigenschaft unterstützt wird, für die diese Metadaten gelten, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="18121-362"><see langword="true" /> if data binding is supported on the dependency property to which this metadata applies; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="18121-363">Der Standardwert lautet <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="18121-363">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18121-364">Diese Eigenschaft meldet `false` für eine von zwei möglichen Bedingungen: eine Datenbindung an eine Abhängigkeits Eigenschaft ist nicht zulässig, da die Abhängigkeits Eigenschaft schreibgeschützt ist (wie im Bezeichner der Abhängigkeits Eigenschaft, nicht in den Metadaten), oder wenn der Wert einer anderen Metadateneigenschaft, <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>, auf `true` in diesen Metadaten festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="18121-364">This property reports `false` for one of two possible conditions: either data binding to a dependency property is not allowed because the dependency property is read-only (as reported in the dependency property identifier, not the metadata), or the value of another metadata property, <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>, is set to `true` in this metadata.</span></span> <span data-ttu-id="18121-365">Diese Eigenschaft wird als bequeme bereitgestellt, sodass Aufrufer nicht sowohl <xref:System.Windows.DependencyProperty.ReadOnly%2A> als auch <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>überprüfen müssen.</span><span class="sxs-lookup"><span data-stu-id="18121-365">This property is exposed as a convenience so that callers do not have to check both <xref:System.Windows.DependencyProperty.ReadOnly%2A> and <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span></span>  
  
 <span data-ttu-id="18121-366">Wenn Sie versuchen, Metadaten zu erstellen, die angeben, dass eine anderweitig Lese-/Schreibeigenschaft keine Datenbindung unterstützen soll, geben Sie das-Flag <xref:System.Windows.FrameworkPropertyMetadataOptions.NotDataBindable> an (Beachten Sie den Unterschied der geringfügigen Namenskonvention und <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A></span><span class="sxs-lookup"><span data-stu-id="18121-366">If you are attempting to create metadata that specifies that an otherwise read/write property should not support data binding, specify the flag <xref:System.Windows.FrameworkPropertyMetadataOptions.NotDataBindable> (note the slight naming convention difference versus <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>).</span></span>  
  
<a name="xamlTextUsage_IsDataBindingAllowed"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="18121-367">Verwendung von XAML-Text</span><span class="sxs-lookup"><span data-stu-id="18121-367">XAML Text Usage</span></span>  
 <span data-ttu-id="18121-368">Member dieser Klasse werden in der Regel nicht in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]verwendet.</span><span class="sxs-lookup"><span data-stu-id="18121-368">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18121-369">Im folgenden Beispiel werden die Standard Metadaten aus verschiedenen Abhängigkeits Eigenschaften Feldern abgerufen, der Wert verschiedener <xref:System.Windows.FrameworkPropertyMetadata> Eigenschaften abgefragt und die Informationen zum Auffüllen einer Tabelle zum Implementieren eines "metadatenbrowsers" verwendet.</span><span class="sxs-lookup"><span data-stu-id="18121-369">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="IsNotDataBindable">
      <MemberSignature Language="C#" Value="public bool IsNotDataBindable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotDataBindable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable" />
      <MemberSignature Language="VB.NET" Value="Public Property IsNotDataBindable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotDataBindable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsNotDataBindable : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.IsNotDataBindable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18121-370">Ruft einen Wert ab, der angibt, ob die Datenbindung von der Abhängigkeitseigenschaft unterstützt wird, oder legt ihn fest.</span><span class="sxs-lookup"><span data-stu-id="18121-370">Gets or sets a value that indicates whether the dependency property supports data binding.</span></span></summary>
        <value><span data-ttu-id="18121-371"><see langword="true" />, wenn die Eigenschaft die Datenbindung nicht unterstützt, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="18121-371"><see langword="true" /> if the property does not support data binding; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="18121-372">Der Standardwert lautet <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="18121-372">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18121-373">Beachten Sie, dass diese Metadateneigenschaft auf `true` speziell für Eigenschaften festgelegt ist, die die Datenbindung trotz der Lese-/Schreibeigenschaften nicht unterstützen sollen.</span><span class="sxs-lookup"><span data-stu-id="18121-373">Note that this metadata property is set to `true` specifically for properties that should not support data binding, despite being read-write properties.</span></span> <span data-ttu-id="18121-374">Die Annahme ist, dass in den meisten Fällen, in denen eine Abhängigkeits Eigenschaft deklariert wird, Daten Bindungen gewünscht werden, da die Datenbindung eines der wichtigsten Szenarien ist, in denen eine Abhängigkeits Eigenschaft nützlich ist.</span><span class="sxs-lookup"><span data-stu-id="18121-374">The expectation is that in most cases where a dependency property is declared, data binding is desired, because data binding is one of the key scenarios where a dependency property is useful.</span></span> <span data-ttu-id="18121-375">Im Gegensatz zu <xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>ändert dies nicht nur einen Standardwert, der später für eine bestimmte Bindung geändert werden kann.</span><span class="sxs-lookup"><span data-stu-id="18121-375">Unlike <xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>, this does not merely change a default that can later be changed on a specific binding.</span></span> <span data-ttu-id="18121-376">Wenn diese Eigenschaft `true` in den Metadaten für die Metadaten einer Abhängigkeits Eigenschaft festgelegt wird, werden alle Bindungen daran deaktiviert, ihre Werte durch Ausdrücke auf diese Abhängigkeits Eigenschaft anzuwenden.</span><span class="sxs-lookup"><span data-stu-id="18121-376">Setting this property `true` in the metadata for a dependency property metadata will disable all bindings from applying their values through expressions to that dependency property.</span></span>  
  
 <span data-ttu-id="18121-377">Schreibgeschützte Abhängigkeits Eigenschaften unterstützen die Datenbindung nicht (da Sie über keinen Setter verfügen, der geänderte Werte anwenden kann), Sie melden jedoch weiterhin `false` für <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span><span class="sxs-lookup"><span data-stu-id="18121-377">Read-only dependency properties do not support data binding (because they have no setter that can apply changed values), but will still report `false` for <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span></span> <span data-ttu-id="18121-378">Dies liegt daran, dass Eigenschaften, die einem <xref:System.Windows.FrameworkPropertyMetadataOptions> Werten entsprechen, die Parität mit der tatsächlichen Einrichtung der Metadaten melden, anstatt immer das Ergebnis des Endergebnis zu melden, dass die Benennung der Eigenschaft impliziert werden könnte.</span><span class="sxs-lookup"><span data-stu-id="18121-378">This is because properties that correspond to a <xref:System.Windows.FrameworkPropertyMetadataOptions> values will report parity with how the metadata was actually established, rather than always reporting the end result behavior that the naming of the property might imply.</span></span> <span data-ttu-id="18121-379">Wenn Sie ermitteln möchten, ob eine bestimmte Abhängigkeits Eigenschaft die Datenbindung zulässt, sollten Sie in der Regel <xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> überprüfen.</span><span class="sxs-lookup"><span data-stu-id="18121-379">To determine whether a given dependency property permits data binding, you should usually check <xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> instead.</span></span> <span data-ttu-id="18121-380"><xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> ist eine einfache Möglichkeit zum Überprüfen von <xref:System.Windows.DependencyProperty.ReadOnly%2A> und <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A> als einzelner Vorgang und liefert das erwartete Ergebnis.</span><span class="sxs-lookup"><span data-stu-id="18121-380"><xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> is a convenience for checking both <xref:System.Windows.DependencyProperty.ReadOnly%2A> and <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A> as a single operation, yielding the expected result.</span></span>  
  
 <span data-ttu-id="18121-381">Eigenschaften für abgeleitete Klassen von <xref:System.Windows.PropertyMetadata> werden in der Regel im Objektmodell als Lese-/Schreibzugriff definiert.</span><span class="sxs-lookup"><span data-stu-id="18121-381">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="18121-382">So können Sie nach der Initialisierung der-Instanz angepasst werden.</span><span class="sxs-lookup"><span data-stu-id="18121-382">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="18121-383">Nachdem die Metadaten jedoch im Rahmen eines Aufrufes <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>verarbeitet wurden, versiegelt das Eigenschaften System, dass die Metadateninstanz und die Eigenschaften, die die Einzelheiten der Metadaten vermitteln, jetzt als unveränderlich angesehen werden.</span><span class="sxs-lookup"><span data-stu-id="18121-383">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="18121-384">Wenn Sie versuchen, diese Eigenschaft festzulegen, nachdem <xref:System.Windows.PropertyMetadata.IsSealed%2A> in dieser Metadateninstanz `true` ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="18121-384">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_IsNotDataBindable"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="18121-385">Verwendung von XAML-Text</span><span class="sxs-lookup"><span data-stu-id="18121-385">XAML Text Usage</span></span>  
 <span data-ttu-id="18121-386">Member dieser Klasse werden in der Regel nicht in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]verwendet.</span><span class="sxs-lookup"><span data-stu-id="18121-386">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="18121-387">Die Metadaten wurden bereits auf einen Vorgang der Abhängigkeitseigenschaft angewendet, sodass Metadaten versiegelt sind und keine Eigenschaften für Metadaten festgelegt werden können.</span><span class="sxs-lookup"><span data-stu-id="18121-387">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="P:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed" />
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="Journal">
      <MemberSignature Language="C#" Value="public bool Journal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Journal" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.Journal" />
      <MemberSignature Language="VB.NET" Value="Public Property Journal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Journal { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Journal : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.Journal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18121-388">Ruft einen Wert ab oder legt ihn fest, der angibt, ob diese Eigenschaft Journalinginformationen enthält, die von Anwendungen im Rahmen einer Journalingimplementierung gespeichert werden können oder sollen.</span><span class="sxs-lookup"><span data-stu-id="18121-388">Gets or sets a value that indicates whether this property contains journaling information that applications can or should store as part of a journaling implementation.</span></span></summary>
        <value><span data-ttu-id="18121-389"><see langword="true" />, wenn das Journaling für die Abhängigkeitseigenschaft ausgeführt werden soll, auf die diese Metadaten angewendet werden, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="18121-389"><see langword="true" /> if journaling should be performed on the dependency property that this metadata is applied to; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="18121-390">Der Standardwert lautet <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="18121-390">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18121-391">Eigenschaften für abgeleitete Klassen von <xref:System.Windows.PropertyMetadata> werden in der Regel im Objektmodell als Lese-/Schreibzugriff definiert.</span><span class="sxs-lookup"><span data-stu-id="18121-391">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="18121-392">So können Sie nach der Initialisierung der-Instanz angepasst werden.</span><span class="sxs-lookup"><span data-stu-id="18121-392">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="18121-393">Nachdem die Metadaten jedoch im Rahmen eines Aufrufes <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>verarbeitet wurden, versiegelt das Eigenschaften System, dass die Metadateninstanz und die Eigenschaften, die die Einzelheiten der Metadaten vermitteln, jetzt als unveränderlich angesehen werden.</span><span class="sxs-lookup"><span data-stu-id="18121-393">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="18121-394">Wenn Sie versuchen, diese Eigenschaft festzulegen, nachdem <xref:System.Windows.PropertyMetadata.IsSealed%2A> in dieser Metadateninstanz `true` ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="18121-394">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_Journal"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="18121-395">Verwendung von XAML-Text</span><span class="sxs-lookup"><span data-stu-id="18121-395">XAML Text Usage</span></span>  
 <span data-ttu-id="18121-396">Member dieser Klasse werden in der Regel nicht in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]verwendet.</span><span class="sxs-lookup"><span data-stu-id="18121-396">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="18121-397">Die Metadaten wurden bereits auf einen Vorgang der Abhängigkeitseigenschaft angewendet, sodass Metadaten versiegelt sind und keine Eigenschaften für Metadaten festgelegt werden können.</span><span class="sxs-lookup"><span data-stu-id="18121-397">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
        <altmember cref="T:System.Windows.Navigation.JournalEntry" />
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="protected override void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Merge(class System.Windows.PropertyMetadata baseMetadata, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Merge (baseMetadata As PropertyMetadata, dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Merge(System::Windows::PropertyMetadata ^ baseMetadata, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="override this.Merge : System.Windows.PropertyMetadata * System.Windows.DependencyProperty -&gt; unit" Usage="frameworkPropertyMetadata.Merge (baseMetadata, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="baseMetadata"><span data-ttu-id="18121-398">Die für das Zusammenführen zu verwendenden Basismetadaten.</span><span class="sxs-lookup"><span data-stu-id="18121-398">The base metadata to merge.</span></span></param>
        <param name="dp"><span data-ttu-id="18121-399">Die Abhängigkeitseigenschaft, auf die diese Metadaten angewendet werden sollen.</span><span class="sxs-lookup"><span data-stu-id="18121-399">The dependency property this metadata is being applied to.</span></span></param>
        <summary><span data-ttu-id="18121-400">Ermöglicht ein Zusammenführen der Quellmetadaten mit den Basismetadaten.</span><span class="sxs-lookup"><span data-stu-id="18121-400">Enables a merge of the source metadata with base metadata.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18121-401">Diese Methode wird intern verwendet, wenn Metadaten überschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="18121-401">This method is used internally when metadata is being overridden.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="18121-402">Klassen, die von <see cref="T:System.Windows.PropertyMetadata" /> (oder dieser Klasse) abgeleitet werden, sollten diese Methode überschreiben, um Metadaten-Eigenschaften zu berücksichtigen, die Sie in ihren Implementierungen hinzugefügt haben.</span><span class="sxs-lookup"><span data-stu-id="18121-402">Classes that derive from <see cref="T:System.Windows.PropertyMetadata" /> (or this class particularly) should override this method to account for any metadata properties they have added in their implementations.</span></span> <span data-ttu-id="18121-403">Beispielsweise kann Ihre-Implementierung einen neuen flagbezogenen Enumerationswert hinzugefügt haben, und die <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> Implementierung sollte dann in der Lage sein, diese Flags ordnungsgemäß zu kombinieren.</span><span class="sxs-lookup"><span data-stu-id="18121-403">For instance, your implementation might have added a new flagwise enumeration value, and the <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implementation should then be able to combine those flags correctly.</span></span>  
  
<span data-ttu-id="18121-404">Die Basis Implementierung muss immer vor ihrer eigenen Implementierung aufgerufen werden, da die Basis Implementierung alle Eigenschaften zusammenführt, die bereits für vorherige Typen in der Hierarchie definiert wurden.</span><span class="sxs-lookup"><span data-stu-id="18121-404">Always call the base implementation prior to your own implementation, because the base implementation takes care of merging all the properties already defined on previous types in the hierarchy.</span></span>  
  
<span data-ttu-id="18121-405">Das von der <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> Implementierung in <see cref="T:System.Windows.FrameworkPropertyMetadata" /> hinzugefügte Verhalten besteht darin, dass bestimmte Eigenschaften auf WPF-Frameworkebene in den Metadaten wie <see cref="P:System.Windows.FrameworkPropertyMetadata.AffectsRender" /> in einer bitweisen OR-Operation kombiniert werden.</span><span class="sxs-lookup"><span data-stu-id="18121-405">The behavior added by the <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implementation in <see cref="T:System.Windows.FrameworkPropertyMetadata" /> is that specific WPF framework-level properties in the metadata such as <see cref="P:System.Windows.FrameworkPropertyMetadata.AffectsRender" /> are combined in a bitwise or operation.</span></span>  
  
<span data-ttu-id="18121-406">Das <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> Verhalten implementiert auch das Verhalten, wenn Sie die Eigenschafts Metadaten für eine vorhandene Abhängigkeits Eigenschaft überschreiben, indem Sie <see cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />mithilfe von <see cref="T:System.Windows.FrameworkPropertyMetadata" />Überschreibungs Metadaten aufrufen.</span><span class="sxs-lookup"><span data-stu-id="18121-406">The <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> behavior also implements the behavior when you override the property metadata on an existing dependency property by calling <see cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />, using override metadata that is <see cref="T:System.Windows.FrameworkPropertyMetadata" />.</span></span></para></block>
        <altmember cref="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.PropertyMetadata.IsSealed" />
        <altmember cref="M:System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="OnApply">
      <MemberSignature Language="C#" Value="protected override void OnApply (System.Windows.DependencyProperty dp, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnApply(class System.Windows.DependencyProperty dp, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnApply (dp As DependencyProperty, targetType As Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnApply(System::Windows::DependencyProperty ^ dp, Type ^ targetType);" />
      <MemberSignature Language="F#" Value="override this.OnApply : System.Windows.DependencyProperty * Type -&gt; unit" Usage="frameworkPropertyMetadata.OnApply (dp, targetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="18121-407">Die Abhängigkeitseigenschaft, auf die die Metadaten angewendet wurden.</span><span class="sxs-lookup"><span data-stu-id="18121-407">The dependency property to which the metadata has been applied.</span></span></param>
        <param name="targetType"><span data-ttu-id="18121-408">Der diesen Metadaten zugeordnete Typ, wenn es sich um typspezifische Metadaten handelt.</span><span class="sxs-lookup"><span data-stu-id="18121-408">The type associated with this metadata if this is type-specific metadata.</span></span> <span data-ttu-id="18121-409">Wenn es sich um Standardmetadaten handelt, kann dieser Wert <see langword="null" /> sein.</span><span class="sxs-lookup"><span data-stu-id="18121-409">If this is default metadata, this value can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="18121-410">Wird aufgerufen, wenn diese Metadaten auf eine Eigenschaft angewendet wurden. Dies gibt an, dass die Metadaten versiegelt wurden.</span><span class="sxs-lookup"><span data-stu-id="18121-410">Called when this metadata has been applied to a property, which indicates that the metadata is being sealed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18121-411">Jede Änderbarkeit der Datenstruktur einer <xref:System.Windows.FrameworkPropertyMetadata> Instanz sollte als unveränderlich gekennzeichnet werden, wenn diese Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="18121-411">Any mutability of the data structure of a <xref:System.Windows.FrameworkPropertyMetadata> instance should be marked as immutable when this method is invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="18121-412">Die <see cref="T:System.Windows.FrameworkPropertyMetadata" /> Implementierung dieser Methode führt nicht zum Aufrufen der Basis Implementierung.</span><span class="sxs-lookup"><span data-stu-id="18121-412">The <see cref="T:System.Windows.FrameworkPropertyMetadata" /> implementation of this method does nothing beyond calling the base implementation.</span></span></para></block>
        <altmember cref="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
        <altmember cref="P:System.Windows.PropertyMetadata.IsSealed" />
        <altmember cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="OverridesInheritanceBehavior">
      <MemberSignature Language="C#" Value="public bool OverridesInheritanceBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OverridesInheritanceBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property OverridesInheritanceBehavior As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OverridesInheritanceBehavior { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OverridesInheritanceBehavior : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18121-413">Ruft einen Wert ab, der angibt, ob die Auswertung der Vererbung von Eigenschaftenwerten über bestimmte Inhaltsgrenzen in der logischen Struktur der Elemente hinweg ausgeführt werden soll.</span><span class="sxs-lookup"><span data-stu-id="18121-413">Gets or sets a value that indicates whether the property value inheritance evaluation should span across certain content boundaries in the logical tree of elements.</span></span></summary>
        <value><span data-ttu-id="18121-414"><see langword="true" />, wenn die Vererbung von Eigenschaftenwerten über bestimmte Inhaltsgrenzen hinweg ausgeführt werden soll, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="18121-414"><see langword="true" /> if the property value inheritance should span across certain content boundaries; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="18121-415">Der Standardwert lautet <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="18121-415">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18121-416">Diese Metadaten melden eine selten angewendete Änderung des Vererbungs Verhaltens von Eigenschafts Werten über spezielle übergeordnete Elementgrenzen hinweg.</span><span class="sxs-lookup"><span data-stu-id="18121-416">This metadata reports a seldom-applied modification to property value inheritance behavior across special parent element-child element boundaries.</span></span> <span data-ttu-id="18121-417">Das kanonische Beispiel einer solchen Grenze ist der Inhalt einer <xref:System.Windows.Controls.Frame>, bei der der <xref:System.Windows.Controls.Frame> Inhalt unabhängig vom vorhanden sein der <xref:System.Windows.Controls.Frame>erneut geladen werden kann.</span><span class="sxs-lookup"><span data-stu-id="18121-417">The canonical example of such a boundary is the contents of a <xref:System.Windows.Controls.Frame>, where the <xref:System.Windows.Controls.Frame> content might get reloaded independently of the existence of the <xref:System.Windows.Controls.Frame>.</span></span> <span data-ttu-id="18121-418">Das gewünschte Eigenschaften Systemverhalten besteht darin, dass die Vererbung von Eigenschafts Werten nicht in den Inhalt des <xref:System.Windows.Controls.Frame>übertragen werden kann, da es sich bei diesen Inhalten möglicherweise um Elemente handelt, die von der Anwendung, die den Frame gehostet, nicht</span><span class="sxs-lookup"><span data-stu-id="18121-418">The desired property system behavior is that property value inheritance should not traverse into the contents of the <xref:System.Windows.Controls.Frame>, because these contents might be elements that the application hosting the frame does not own or control.</span></span> <span data-ttu-id="18121-419">Wenn Sie Metadaten angeben, bei denen <xref:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior%2A> auf `true`festgelegt ist, und <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> als `true`angeben, bewirkt dies, dass die Eigenschaft, auf die die Metadaten angewendet werden, auch über die <xref:System.Windows.Controls.Frame> Grenze oder ähnliche Grenzen hinweg vererbbar ist.</span><span class="sxs-lookup"><span data-stu-id="18121-419">Specifying metadata with <xref:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior%2A> set to `true`, as well as specifying <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> as `true`, will cause the property on which the metadata is applied to be inheritable even across the <xref:System.Windows.Controls.Frame> boundary or similar boundaries.</span></span>  
  
 <span data-ttu-id="18121-420">Eigenschaften für abgeleitete Klassen von <xref:System.Windows.PropertyMetadata> werden in der Regel im Objektmodell als Lese-/Schreibzugriff definiert.</span><span class="sxs-lookup"><span data-stu-id="18121-420">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="18121-421">So können Sie nach der Initialisierung der-Instanz angepasst werden.</span><span class="sxs-lookup"><span data-stu-id="18121-421">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="18121-422">Nachdem die Metadaten jedoch im Rahmen eines Aufrufes <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>verarbeitet wurden, versiegelt das Eigenschaften System, dass die Metadateninstanz und die Eigenschaften, die die Einzelheiten der Metadaten vermitteln, jetzt als unveränderlich angesehen werden.</span><span class="sxs-lookup"><span data-stu-id="18121-422">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="18121-423">Wenn Sie versuchen, diese Eigenschaft festzulegen, nachdem <xref:System.Windows.PropertyMetadata.IsSealed%2A> in dieser Metadateninstanz `true` ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="18121-423">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_OverridesInheritanceBehavior"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="18121-424">Verwendung von XAML-Text</span><span class="sxs-lookup"><span data-stu-id="18121-424">XAML Text Usage</span></span>  
 <span data-ttu-id="18121-425">Member dieser Klasse werden in der Regel nicht in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]verwendet.</span><span class="sxs-lookup"><span data-stu-id="18121-425">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="18121-426">Die Metadaten wurden bereits auf einen Vorgang der Abhängigkeitseigenschaft angewendet, sodass Metadaten versiegelt sind und keine Eigenschaften für Metadaten festgelegt werden können.</span><span class="sxs-lookup"><span data-stu-id="18121-426">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="SubPropertiesDoNotAffectRender">
      <MemberSignature Language="C#" Value="public bool SubPropertiesDoNotAffectRender { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SubPropertiesDoNotAffectRender" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender" />
      <MemberSignature Language="VB.NET" Value="Public Property SubPropertiesDoNotAffectRender As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SubPropertiesDoNotAffectRender { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SubPropertiesDoNotAffectRender : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18121-427">Dient zum Abrufen oder Festlegen eines Werts, der angibt, ob sich untergeordnete Eigenschaften der Abhängigkeitseigenschaft nicht auf das Rendern des enthaltenden Objekts auswirken.</span><span class="sxs-lookup"><span data-stu-id="18121-427">Gets or sets a value that indicates whether sub-properties of the dependency property do not affect the rendering of the containing object.</span></span></summary>
        <value><span data-ttu-id="18121-428"><see langword="true" />, wenn sich Änderungen an untergeordneten Eigenschaftswerten nicht auf das Rendern auswirken, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="18121-428"><see langword="true" /> if changes to sub-property values do not affect rendering if changed; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="18121-429">Der Standardwert lautet <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="18121-429">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18121-430">Diese Metadatenoption ist für Abhängigkeits Eigenschaften relevant, bei denen es sich um Verweis Typen handelt, bei denen dieser Typ eigene Eigenschaftswerte aufweist.</span><span class="sxs-lookup"><span data-stu-id="18121-430">This metadata option is pertinent for dependency properties that are reference types, where that type has property values of its own.</span></span> <span data-ttu-id="18121-431">In der Regel ist die layoutsystemlogik davon auszugehen, dass sich jede Abhängigkeits Eigenschaft mit untergeordneten Eigenschaften möglicherweise auf das Layout auswirkt, da das Überprüfen aller unter Eigenschaften auf Änderungen zeitaufwändiger ist, als ein anderer renderdurchlauf tatsächlich ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="18121-431">Typically, the layout system logic is to assume that any dependency property with sub-properties potentially will affect layout, because checking all sub-properties for changes is more time consuming than actually running another render pass.</span></span> <span data-ttu-id="18121-432">Das Festlegen dieser Option auf `true` ist für die Optimierung der Leistung der layoutsystemimplementierung der WPF-Frameworkebene nützlich.</span><span class="sxs-lookup"><span data-stu-id="18121-432">Setting this option to `true` is useful for optimizing performance of the WPF framework level layout system implementation.</span></span>  
  
 <span data-ttu-id="18121-433">Eigenschaften für abgeleitete Klassen von <xref:System.Windows.PropertyMetadata> werden in der Regel im Objektmodell als Lese-/Schreibzugriff definiert.</span><span class="sxs-lookup"><span data-stu-id="18121-433">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="18121-434">So können Sie nach der Initialisierung der-Instanz angepasst werden.</span><span class="sxs-lookup"><span data-stu-id="18121-434">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="18121-435">Sobald die Metadaten jedoch im Rahmen eines Aufrufes <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>verarbeitet werden, versiegelt das Eigenschaften System, dass die Metadateninstanz und die Eigenschaften, die die Einzelheiten der Metadaten vermitteln, jetzt als unveränderlich angesehen werden.</span><span class="sxs-lookup"><span data-stu-id="18121-435">However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="18121-436">Wenn Sie versuchen, diese Eigenschaft festzulegen, nachdem <xref:System.Windows.PropertyMetadata.IsSealed%2A> in dieser Metadateninstanz `true` ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="18121-436">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_SubPropertiesDoNotAffectRender"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="18121-437">Verwendung von XAML-Text</span><span class="sxs-lookup"><span data-stu-id="18121-437">XAML Text Usage</span></span>  
 <span data-ttu-id="18121-438">Member dieser Klasse werden in der Regel nicht in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]verwendet.</span><span class="sxs-lookup"><span data-stu-id="18121-438">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="18121-439">Die Metadaten wurden bereits auf einen Vorgang der Abhängigkeitseigenschaft angewendet, sodass Metadaten versiegelt sind und keine Eigenschaften für Metadaten festgelegt werden können.</span><span class="sxs-lookup"><span data-stu-id="18121-439">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.Freezable" />
      </Docs>
    </Member>
  </Members>
</Type>

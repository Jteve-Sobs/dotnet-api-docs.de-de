<Type Name="FrameworkPropertyMetadata" FullName="System.Windows.FrameworkPropertyMetadata">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c70304d7b52b8f4e76c37fd1e35de0928f9619c7" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30680544" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FrameworkPropertyMetadata : System.Windows.UIPropertyMetadata" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FrameworkPropertyMetadata extends System.Windows.UIPropertyMetadata" />
  <TypeSignature Language="DocId" Value="T:System.Windows.FrameworkPropertyMetadata" />
  <TypeSignature Language="VB.NET" Value="Public Class FrameworkPropertyMetadata&#xA;Inherits UIPropertyMetadata" />
  <TypeSignature Language="C++ CLI" Value="public ref class FrameworkPropertyMetadata : System::Windows::UIPropertyMetadata" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.UIPropertyMetadata</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="2deaf-101">Meldet die Metadaten für eine Abhängigkeitseigenschaft oder wendet diese an und fügt dabei insbesondere Systemmerkmale für frameworkspezifische Eigenschaften hinzu.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2deaf-101">Reports or applies metadata for a dependency property, specifically adding framework-specific property system characteristics.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2deaf-102">Diese Klasse leitet sich von <xref:System.Windows.PropertyMetadata> (über <xref:System.Windows.UIPropertyMetadata>).</span><span class="sxs-lookup"><span data-stu-id="2deaf-102">This class derives from <xref:System.Windows.PropertyMetadata> (through <xref:System.Windows.UIPropertyMetadata>) .</span></span> <span data-ttu-id="2deaf-103">Für die meisten WPF-Frameworkebene Anwendung Entwicklungszwecken <xref:System.Windows.FrameworkPropertyMetadata> ist der Typ, der für die Metadaten für die Abhängigkeitseigenschaft verwendet, anstatt die Basis Metadatentypen <xref:System.Windows.PropertyMetadata> oder <xref:System.Windows.UIPropertyMetadata>.</span><span class="sxs-lookup"><span data-stu-id="2deaf-103">For most WPF framework-level application development purposes, <xref:System.Windows.FrameworkPropertyMetadata> is the type used for dependency property metadata, rather than the base metadata types <xref:System.Windows.PropertyMetadata> or <xref:System.Windows.UIPropertyMetadata>.</span></span> <span data-ttu-id="2deaf-104">Dies gilt sowohl für vorhandene Abhängigkeitseigenschaften und für die meisten Szenarios mit benutzerdefinierten Abhängigkeitseigenschaften.</span><span class="sxs-lookup"><span data-stu-id="2deaf-104">This is true both for existing dependency properties and for most custom dependency property scenarios.</span></span>  
  
 <span data-ttu-id="2deaf-105">Die Member deklariert, die von dieser Klasse diese Ergänzung der <xref:System.Windows.PropertyMetadata> Basisklasse enthalten verschiedene boolesche Eigenschaften, die angeben, oder melden WPF-Frameworkebene Eigenschaft Systemverhalten z. B. Vererbung von Eigenschaften, Datenbindung und das Layout.</span><span class="sxs-lookup"><span data-stu-id="2deaf-105">The members declared by this class that supplement the <xref:System.Windows.PropertyMetadata> base class include various Boolean properties that specify or report WPF framework-level property system behavior such as property inheritance, data binding, and layout.</span></span>  
  
 <span data-ttu-id="2deaf-106">Einige Konstruktorsignaturen zum Erstellen einer <xref:System.Windows.FrameworkPropertyMetadata> -Instanz nehmen eine <xref:System.Windows.FrameworkPropertyMetadataOptions> Parameter.</span><span class="sxs-lookup"><span data-stu-id="2deaf-106">Several constructor signatures for creating a <xref:System.Windows.FrameworkPropertyMetadata> instance take a <xref:System.Windows.FrameworkPropertyMetadataOptions> parameter.</span></span> <span data-ttu-id="2deaf-107">Die <xref:System.Windows.FrameworkPropertyMetadataOptions> Enumeration dient nur zum ursprünglichen Verhalten im Konstruktor angeben, und andernfalls nicht verfügbar nach <xref:System.Windows.FrameworkPropertyMetadata> erstellt wird.</span><span class="sxs-lookup"><span data-stu-id="2deaf-107">The <xref:System.Windows.FrameworkPropertyMetadataOptions> enumeration is used only to specify initial behavior in the constructor, and is not otherwise exposed after <xref:System.Windows.FrameworkPropertyMetadata> is constructed.</span></span> <span data-ttu-id="2deaf-108">Einer erstellten Instanz können Sie abrufen oder Festlegen der entsprechende Informationen über verschiedene Eigenschaften, die den Namen der Enumerationswerte, die im Konstruktoraufruf verwendet Freigabe.</span><span class="sxs-lookup"><span data-stu-id="2deaf-108">From a constructed instance, you can get or set the corresponding information through various properties that share the name of the enumeration values used in the constructor call.</span></span>  
  
<a name="xamlTextUsage_FrameworkPropertyMetadata"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="2deaf-109">Verwendung von XAML-Text</span><span class="sxs-lookup"><span data-stu-id="2deaf-109">XAML Text Usage</span></span>  
 <span data-ttu-id="2deaf-110">Diese Klasse dient in der Regel nicht [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="2deaf-110">This class is not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2deaf-111">Im folgende Beispiel ruft Metadaten für eine Abhängigkeitseigenschaft für einen bestimmten Besitzer als anfänglicher Basis <xref:System.Windows.PropertyMetadata> Typ.</span><span class="sxs-lookup"><span data-stu-id="2deaf-111">The following example gets metadata for a dependency property on a particular owner as the initial base <xref:System.Windows.PropertyMetadata> type.</span></span> <span data-ttu-id="2deaf-112">Die Metadaten umgewandelt wird <xref:System.Windows.FrameworkPropertyMetadata>.</span><span class="sxs-lookup"><span data-stu-id="2deaf-112">That metadata is cast to <xref:System.Windows.FrameworkPropertyMetadata>.</span></span> <span data-ttu-id="2deaf-113">Wenn die Umwandlung einen gültigen zurückgegeben <xref:System.Windows.FrameworkPropertyMetadata>, und dann verschiedene <xref:System.Windows.FrameworkPropertyMetadata> Eigenschaftswerte werden über eine einfache Benutzeroberfläche (nicht dargestellt) gemeldet.</span><span class="sxs-lookup"><span data-stu-id="2deaf-113">If the cast returned a valid <xref:System.Windows.FrameworkPropertyMetadata>, then various <xref:System.Windows.FrameworkPropertyMetadata> property values are reported through a simple UI (not shown).</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.PropertyMetadata" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2deaf-114">Initialisiert eine neue Instanz der <see cref="T:System.Windows.FrameworkPropertyMetadata" />-Klasse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-114">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class.</span>
          </span>
        </summary>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2deaf-115">Initialisiert eine neue Instanz der <see cref="T:System.Windows.FrameworkPropertyMetadata" />-Klasse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-115">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2deaf-116">Diese Signatur initialisiert alle Werte von <xref:System.Windows.FrameworkPropertyMetadata.%23ctor%2A> auf ihre Standardwerte für die Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="2deaf-116">This signature initializes all values of <xref:System.Windows.FrameworkPropertyMetadata.%23ctor%2A> to their property defaults.</span></span> <span data-ttu-id="2deaf-117"><xref:System.Windows.PropertyMetadata.DefaultValue%2A> werden `null`, und die verschiedenen <xref:System.Windows.FrameworkPropertyMetadata> booleschen Eigenschaften werden `false`.</span><span class="sxs-lookup"><span data-stu-id="2deaf-117"><xref:System.Windows.PropertyMetadata.DefaultValue%2A> will be `null`, and the various <xref:System.Windows.FrameworkPropertyMetadata> Boolean properties will be `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="2deaf-118">Der Standardwert für die Abhängigkeitseigenschaft, der normalerweise als Wert eines bestimmten Typs angegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-118">The default value of the dependency property, usually provided as a value of a specific type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2deaf-119">Initialisiert eine neue Instanz der <see cref="T:System.Windows.FrameworkPropertyMetadata" />-Klasse mit dem angegebenen Standardwert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-119">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the specified default value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2deaf-120">Der Typ des Werts vorgesehenen `defaultValue` übereinstimmen oder im Zusammenhang mit der werden in den angegebenen Typ in der ursprünglichen Registrierung der Abhängigkeitseigenschaft, die diese Metadaten angewendet werden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-120">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="2deaf-121">Konflikte zwischen Metadaten und den Typ der Abhängigkeitseigenschaft, der es angewendet wird können zu debuggen, schwierig sein, da der Konflikt während der Kompilierung nicht erkennbar ist.</span><span class="sxs-lookup"><span data-stu-id="2deaf-121">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="2deaf-122">Im Eigenschaftensystem wird den effektiven Wert einer Eigenschaft nicht erst zur Laufzeit ausgewertet, daher ist das Ergebnis der standardmäßige Wert Type-Eigenschaft Typenkonflikt einen Laufzeitfehler.</span><span class="sxs-lookup"><span data-stu-id="2deaf-122">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="2deaf-123">Der Wert <xref:System.Windows.DependencyProperty.UnsetValue> hat eine besondere Bedeutung in dem Eigenschaftensystem und kann nicht als Standardwert für eine Abhängigkeitseigenschaft verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-123">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2deaf-124">Im folgenden Beispiel wird die Signatur des Konstruktors:</span><span class="sxs-lookup"><span data-stu-id="2deaf-124">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor1param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor1param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2deaf-125">Für <paramref name="defaultValue" /> ist <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> festgelegt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-125">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="propertyChangedCallback">
          <span data-ttu-id="2deaf-126">Ein Verweis auf eine Handlerimplementierung, die das Eigenschaftensystem aufruft, wenn der effektive Wert der Eigenschaft geändert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-126">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2deaf-127">Initialisiert eine neue Instanz der <see cref="T:System.Windows.FrameworkPropertyMetadata" />-Klasse mit dem angegebenen <see cref="T:System.Windows.PropertyChangedCallback" />-Rückruf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-127">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the specified <see cref="T:System.Windows.PropertyChangedCallback" /> callback.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2deaf-128">Im folgenden Beispiel wird die Signatur des Konstruktors:</span><span class="sxs-lookup"><span data-stu-id="2deaf-128">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor1paramcallback](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor1paramcallback)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultValue As Object, flags As FrameworkPropertyMetadataOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="2deaf-129">Der Standardwert für die Abhängigkeitseigenschaft, der normalerweise als Wert eines bestimmten Typs angegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-129">The default value of the dependency property, usually provided as a value of a specific type.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="2deaf-130">Die Flags für die Metadatenoptionen (eine Kombination von <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> Werten).</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-130">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span>
          </span>
          <span data-ttu-id="2deaf-131">Diese Optionen geben Merkmale der Abhängigkeitseigenschaft an, die mit Systemen wie Layout oder Datenbindung zusammen arbeiten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-131">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2deaf-132">Initialisiert eine neue Instanz der <see cref="T:System.Windows.FrameworkPropertyMetadata" />-Klasse mit dem bereitgestellten Standardwert und Metadatenoptionen auf Frameworkebene.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-132">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework-level metadata options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2deaf-133">Der Typ des Werts vorgesehenen `defaultValue` übereinstimmen oder im Zusammenhang mit der werden in den angegebenen Typ in der ursprünglichen Registrierung der Abhängigkeitseigenschaft, die diese Metadaten angewendet werden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-133">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="2deaf-134">Konflikte zwischen Metadaten und den Typ der Abhängigkeitseigenschaft, der es angewendet wird können zu debuggen, schwierig sein, da der Konflikt während der Kompilierung nicht erkennbar ist.</span><span class="sxs-lookup"><span data-stu-id="2deaf-134">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="2deaf-135">Im Eigenschaftensystem wird den effektiven Wert einer Eigenschaft nicht erst zur Laufzeit ausgewertet, daher ist das Ergebnis der standardmäßige Wert Type-Eigenschaft Typenkonflikt einen Laufzeitfehler.</span><span class="sxs-lookup"><span data-stu-id="2deaf-135">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="2deaf-136">Der Wert <xref:System.Windows.DependencyProperty.UnsetValue> hat eine besondere Bedeutung in dem Eigenschaftensystem und kann nicht als Standardwert für eine Abhängigkeitseigenschaft verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-136">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="2deaf-137">Werte als Gruppe von Flags in markiert die `flags` Parametersatz wird den booleschen Wert der <xref:System.Windows.FrameworkPropertyMetadata> Eigenschaften, die entsprechen <xref:System.Windows.FrameworkPropertyMetadataOptions> FlagName zu `true`.</span><span class="sxs-lookup"><span data-stu-id="2deaf-137">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="2deaf-138">Sie können die Werte der Eigenschaften in den Metadaten später ändern, solange die Metadaten noch nicht auf einem bestimmten Vorgang angewendet wurde.</span><span class="sxs-lookup"><span data-stu-id="2deaf-138">You can subsequently change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2deaf-139">Im folgenden Beispiel wird die Signatur des Konstruktors:</span><span class="sxs-lookup"><span data-stu-id="2deaf-139">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2deaf-140">Für <paramref name="defaultValue" /> ist <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> festgelegt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-140">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="2deaf-141">Der Standardwert für die Abhängigkeitseigenschaft, der normalerweise als Wert eines bestimmten Typs angegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-141">The default value of the dependency property, usually provided as a value of a specific type.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="2deaf-142">Ein Verweis auf eine Handlerimplementierung, die das Eigenschaftensystem aufruft, wenn der effektive Wert der Eigenschaft geändert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-142">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2deaf-143">Initialisiert eine neue Instanz der <see cref="T:System.Windows.FrameworkPropertyMetadata" />-Klasse mit dem angegebenen Standardwert und dem angegebenen <see cref="T:System.Windows.PropertyChangedCallback" />-Rückruf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-143">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and specified <see cref="T:System.Windows.PropertyChangedCallback" /> callback.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2deaf-144">Der Typ des Werts vorgesehenen `defaultValue` übereinstimmen oder im Zusammenhang mit der werden in den angegebenen Typ in der ursprünglichen Registrierung der Abhängigkeitseigenschaft, die diese Metadaten angewendet werden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-144">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="2deaf-145">Konflikte zwischen Metadaten und den Typ der Abhängigkeitseigenschaft, der es angewendet wird können zu debuggen, schwierig sein, da der Konflikt während der Kompilierung nicht erkennbar ist.</span><span class="sxs-lookup"><span data-stu-id="2deaf-145">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="2deaf-146">Im Eigenschaftensystem wird den effektiven Wert einer Eigenschaft nicht erst zur Laufzeit ausgewertet, daher ist das Ergebnis der standardmäßige Wert Type-Eigenschaft Typenkonflikt einen Laufzeitfehler.</span><span class="sxs-lookup"><span data-stu-id="2deaf-146">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="2deaf-147">Der Wert <xref:System.Windows.DependencyProperty.UnsetValue> hat eine besondere Bedeutung in dem Eigenschaftensystem und kann nicht als Standardwert für eine Abhängigkeitseigenschaft verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-147">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2deaf-148">Im folgenden Beispiel wird die Signatur des Konstruktors:</span><span class="sxs-lookup"><span data-stu-id="2deaf-148">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor2param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor2param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2deaf-149">Für <paramref name="defaultValue" /> ist <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> festgelegt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-149">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="propertyChangedCallback">
          <span data-ttu-id="2deaf-150">Ein Verweis auf eine Handlerimplementierung, die das Eigenschaftensystem aufruft, wenn der effektive Wert der Eigenschaft geändert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-150">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <param name="coerceValueCallback">
          <span data-ttu-id="2deaf-151">Ein Verweis auf eine Handlerimplementierung wird aufgerufen, wenn das Eigenschaftensystem <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> für diese Abhängigkeitseigenschaft aufruft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-151">A reference to a handler implementation will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> for this dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2deaf-152">Initialisiert eine neue Instanz der <see cref="T:System.Windows.FrameworkPropertyMetadata" />-Klasse mit den angegebenen Rückrufen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-152">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the specified callbacks.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2deaf-153">Diese Implementierung ruft einen Basis-Initialisierer und fügt dann die `coerceValueCallback` durch Festlegen der Eigenschaft auf der Basis-Instanz.</span><span class="sxs-lookup"><span data-stu-id="2deaf-153">This implementation calls a base initializer and then adds the `coerceValueCallback` by setting the property on the base instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2deaf-154">Im folgenden Beispiel wird die Signatur des Konstruktors:</span><span class="sxs-lookup"><span data-stu-id="2deaf-154">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_PCC_CVC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_pcc_cvc)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="2deaf-155">Der Standardwert für die Abhängigkeitseigenschaft, der normalerweise als Wert eines bestimmten Typs angegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-155">The default value of the dependency property, usually provided as a value of a specific type.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="2deaf-156">Die Flags für die Metadatenoptionen (eine Kombination von <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> Werten).</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-156">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span>
          </span>
          <span data-ttu-id="2deaf-157">Diese Optionen geben Merkmale der Abhängigkeitseigenschaft an, die mit Systemen wie Layout oder Datenbindung zusammen arbeiten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-157">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="2deaf-158">Ein Verweis auf eine Handlerimplementierung, die das Eigenschaftensystem aufruft, wenn der effektive Wert der Eigenschaft geändert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-158">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2deaf-159">Initialisiert eine neue Instanz der <see cref="T:System.Windows.FrameworkPropertyMetadata" />-Klasse mit dem bereitgestellten Standardwert und Metadatenoptionen auf Frameworkebene sowie dem angegebenen <see cref="T:System.Windows.PropertyChangedCallback" />-Rückruf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-159">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, and specified <see cref="T:System.Windows.PropertyChangedCallback" /> callback.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2deaf-160">Der Typ des Werts vorgesehenen `defaultValue` übereinstimmen oder im Zusammenhang mit der werden in den angegebenen Typ in der ursprünglichen Registrierung der Abhängigkeitseigenschaft, die diese Metadaten angewendet werden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-160">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="2deaf-161">Konflikte zwischen Metadaten und den Typ der Abhängigkeitseigenschaft, der es angewendet wird können zu debuggen, schwierig sein, da der Konflikt während der Kompilierung nicht erkennbar ist.</span><span class="sxs-lookup"><span data-stu-id="2deaf-161">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="2deaf-162">Im Eigenschaftensystem wird den effektiven Wert einer Eigenschaft nicht erst zur Laufzeit ausgewertet, daher ist das Ergebnis der standardmäßige Wert Type-Eigenschaft Typenkonflikt einen Laufzeitfehler.</span><span class="sxs-lookup"><span data-stu-id="2deaf-162">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="2deaf-163">Der Wert <xref:System.Windows.DependencyProperty.UnsetValue> hat eine besondere Bedeutung in dem Eigenschaftensystem und kann nicht als Standardwert für eine Abhängigkeitseigenschaft verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-163">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="2deaf-164">Werte als Gruppe von Flags in markiert die `flags` Parametersatz wird den booleschen Wert der <xref:System.Windows.FrameworkPropertyMetadata> Eigenschaften, die entsprechen <xref:System.Windows.FrameworkPropertyMetadataOptions> FlagName zu `true`.</span><span class="sxs-lookup"><span data-stu-id="2deaf-164">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="2deaf-165">Sie können weiterhin die Werte der Eigenschaften in den Metadaten ändern, als die Metadaten noch nicht auf einem bestimmten Vorgang angewendet wurde.</span><span class="sxs-lookup"><span data-stu-id="2deaf-165">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2deaf-166">Im folgenden Beispiel wird die Signatur des Konstruktors:</span><span class="sxs-lookup"><span data-stu-id="2deaf-166">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2deaf-167">Für <paramref name="defaultValue" /> ist <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> festgelegt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-167">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="2deaf-168">Der Standardwert für die Abhängigkeitseigenschaft, der normalerweise als Wert eines bestimmten Typs angegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-168">The default value of the dependency property, usually provided as a specific type.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="2deaf-169">Ein Verweis auf eine Handlerimplementierung, die das Eigenschaftensystem aufruft, wenn der effektive Wert der Eigenschaft geändert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-169">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <param name="coerceValueCallback">
          <span data-ttu-id="2deaf-170">Ein Verweis auf eine Handlerimplementierung, der aufgerufen wird, wenn das Eigenschaftensystem <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> für diese Abhängigkeitseigenschaft aufruft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-170">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> for this dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2deaf-171">Initialisiert eine neue Instanz der <see cref="T:System.Windows.FrameworkPropertyMetadata" />-Klasse mit dem angegebenen Standardwert und den angegebenen Rückrufen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-171">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and specified callbacks.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2deaf-172">Der Typ des Werts vorgesehenen `defaultValue` übereinstimmen oder im Zusammenhang mit der werden in den angegebenen Typ in der ursprünglichen Registrierung der Abhängigkeitseigenschaft, die diese Metadaten angewendet werden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-172">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="2deaf-173">Konflikte zwischen Metadaten und den Typ der Abhängigkeitseigenschaft, der es angewendet wird können zu debuggen, schwierig sein, da der Konflikt während der Kompilierung nicht erkennbar ist.</span><span class="sxs-lookup"><span data-stu-id="2deaf-173">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="2deaf-174">Im Eigenschaftensystem wird den effektiven Wert einer Eigenschaft nicht erst zur Laufzeit ausgewertet, daher ist das Ergebnis der standardmäßige Wert Type-Eigenschaft Typenkonflikt einen Laufzeitfehler.</span><span class="sxs-lookup"><span data-stu-id="2deaf-174">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="2deaf-175">Der Wert <xref:System.Windows.DependencyProperty.UnsetValue> hat eine besondere Bedeutung in dem Eigenschaftensystem und kann nicht als Standardwert für eine Abhängigkeitseigenschaft verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-175">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2deaf-176">Im folgenden Beispiel wird die Signatur des Konstruktors:</span><span class="sxs-lookup"><span data-stu-id="2deaf-176">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor3param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor3param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2deaf-177">Für <paramref name="defaultValue" /> ist <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> festgelegt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-177">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="2deaf-178">Der Standardwert für die Abhängigkeitseigenschaft, der normalerweise als Wert eines bestimmten Typs angegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-178">The default value of the dependency property, usually provided as a specific type.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="2deaf-179">Die Flags für die Metadatenoptionen (eine Kombination von <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> Werten).</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-179">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span>
          </span>
          <span data-ttu-id="2deaf-180">Diese Optionen geben Merkmale der Abhängigkeitseigenschaft an, die mit Systemen wie Layout oder Datenbindung zusammen arbeiten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-180">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="2deaf-181">Ein Verweis auf eine Handlerimplementierung, die das Eigenschaftensystem aufruft, wenn der effektive Wert der Eigenschaft geändert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-181">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <param name="coerceValueCallback">
          <span data-ttu-id="2deaf-182">Ein Verweis auf eine Handlerimplementierung, der aufgerufen wird, wenn das Eigenschaftensystem <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> für diese Abhängigkeitseigenschaft aufruft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-182">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> against this property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2deaf-183">Initialisiert eine neue Instanz der <see cref="T:System.Windows.FrameworkPropertyMetadata" />-Klasse mit dem bereitgestellten Standardwert und Metadatenoptionen auf Frameworkebene sowie den angegebenen Rückrufen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-183">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, and specified callbacks.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2deaf-184">Der Typ des Werts vorgesehenen `defaultValue` übereinstimmen oder im Zusammenhang mit der werden in den angegebenen Typ in der ursprünglichen Registrierung der Abhängigkeitseigenschaft, die diese Metadaten angewendet werden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-184">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="2deaf-185">Konflikte zwischen Metadaten und den Typ der Abhängigkeitseigenschaft, der es angewendet wird können zu debuggen, schwierig sein, da der Konflikt während der Kompilierung nicht erkennbar ist.</span><span class="sxs-lookup"><span data-stu-id="2deaf-185">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="2deaf-186">Im Eigenschaftensystem wird den effektiven Wert einer Eigenschaft nicht erst zur Laufzeit ausgewertet, daher ist das Ergebnis der standardmäßige Wert Type-Eigenschaft Typenkonflikt einen Laufzeitfehler.</span><span class="sxs-lookup"><span data-stu-id="2deaf-186">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="2deaf-187">Der Wert <xref:System.Windows.DependencyProperty.UnsetValue> hat eine besondere Bedeutung in dem Eigenschaftensystem und kann nicht als Standardwert für eine Abhängigkeitseigenschaft verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-187">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="2deaf-188">Werte als Gruppe von Flags in markiert die `flags` Parametersatz wird den booleschen Wert der <xref:System.Windows.FrameworkPropertyMetadata> Eigenschaften, die entsprechen <xref:System.Windows.FrameworkPropertyMetadataOptions> FlagName zu `true`.</span><span class="sxs-lookup"><span data-stu-id="2deaf-188">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="2deaf-189">Sie können weiterhin die Werte der Eigenschaften in den Metadaten ändern, als die Metadaten noch nicht auf einem bestimmten Vorgang angewendet wurde.</span><span class="sxs-lookup"><span data-stu-id="2deaf-189">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2deaf-190">Im folgenden Beispiel wird die Signatur des Konstruktors:</span><span class="sxs-lookup"><span data-stu-id="2deaf-190">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2deaf-191">Für <paramref name="defaultValue" /> ist <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> festgelegt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-191">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback, bool isAnimationProhibited);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
        <Parameter Name="isAnimationProhibited" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="2deaf-192">Der Standardwert für die Abhängigkeitseigenschaft, der normalerweise als Wert eines bestimmten Typs angegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-192">The default value of the dependency property, usually provided as a specific type.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="2deaf-193">Die Flags für die Metadatenoptionen (eine Kombination von <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> Werten).</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-193">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span>
          </span>
          <span data-ttu-id="2deaf-194">Diese Optionen geben Merkmale der Abhängigkeitseigenschaft an, die mit Systemen wie Layout oder Datenbindung zusammen arbeiten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-194">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="2deaf-195">Ein Verweis auf eine Handlerimplementierung, die das Eigenschaftensystem aufruft, wenn der effektive Wert der Eigenschaft geändert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-195">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <param name="coerceValueCallback">
          <span data-ttu-id="2deaf-196">Ein Verweis auf eine Handlerimplementierung, der aufgerufen wird, wenn das Eigenschaftensystem <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> für diese Abhängigkeitseigenschaft aufruft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-196">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> on this dependency property.</span>
          </span>
        </param>
        <param name="isAnimationProhibited">
          <span data-ttu-id="2deaf-197">
            <see langword="true" />, um zu verhindern, dass das Eigenschaftensystem die Eigenschaft animiert, auf die diese Metadaten angewendet werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-197">
              <see langword="true" /> to prevent the property system from animating the property that this metadata is applied to.</span>
          </span>
          <span data-ttu-id="2deaf-198">Diese Eigenschaften lösen eine Laufzeitausnahme aus, die aus dem Eigenschaftensystem stammt, wenn versucht wird, sie zu animieren.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-198">Such properties will raise a run-time exception originating from the property system if animations of them are attempted.</span>
          </span>
          <span data-ttu-id="2deaf-199">
            <see langword="false" />, um das Animieren der Eigenschaft zuzulassen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-199">
              <see langword="false" /> to permit animating the property.</span>
          </span>
          <span data-ttu-id="2deaf-200">Der Standardwert ist <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-200">The default is <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2deaf-201">Initialisiert eine neue Instanz der <see cref="T:System.Windows.FrameworkPropertyMetadata" />-Klasse mit dem bereitgestellten Standardwert und Metadatenoptionen auf Frameworkebene, den angegebenen Rückrufen und einem booleschen Wert, mit dem die Animation der Eigenschaft verhindert werden kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-201">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, specified callbacks, and a Boolean that can be used to prevent animation of the property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2deaf-202">Der Typ des Werts vorgesehenen `defaultValue` übereinstimmen oder im Zusammenhang mit der werden in den angegebenen Typ in der ursprünglichen Registrierung der Abhängigkeitseigenschaft, die diese Metadaten angewendet werden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-202">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="2deaf-203">Konflikte zwischen Metadaten und den Typ der Abhängigkeitseigenschaft, der es angewendet wird können zu debuggen, schwierig sein, da der Konflikt während der Kompilierung nicht erkennbar ist.</span><span class="sxs-lookup"><span data-stu-id="2deaf-203">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="2deaf-204">Im Eigenschaftensystem wird den effektiven Wert einer Eigenschaft nicht erst zur Laufzeit ausgewertet, daher ist das Ergebnis der standardmäßige Wert Type-Eigenschaft Typenkonflikt einen Laufzeitfehler.</span><span class="sxs-lookup"><span data-stu-id="2deaf-204">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="2deaf-205">Der Wert <xref:System.Windows.DependencyProperty.UnsetValue> hat eine besondere Bedeutung in dem Eigenschaftensystem und kann nicht als Standardwert für eine Abhängigkeitseigenschaft verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-205">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="2deaf-206">Die `isAnimationProhibited` Parameter wird den Anfangswert von der <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> Eigenschaft deklariert, durch die sofortige Basis <xref:System.Windows.UIPropertyMetadata> Klasse.</span><span class="sxs-lookup"><span data-stu-id="2deaf-206">The `isAnimationProhibited` parameter sets the initial value of the <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> property declared by the immediate base <xref:System.Windows.UIPropertyMetadata> class.</span></span>  
  
 <span data-ttu-id="2deaf-207">Werte als Gruppe von Flags in markiert die `flags` Parametersatz wird den booleschen Wert der <xref:System.Windows.FrameworkPropertyMetadata> Eigenschaften, die entsprechen <xref:System.Windows.FrameworkPropertyMetadataOptions> FlagName zu `true`.</span><span class="sxs-lookup"><span data-stu-id="2deaf-207">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="2deaf-208">Sie können weiterhin die Werte der Eigenschaften in den Metadaten ändern, als die Metadaten noch nicht auf einem bestimmten Vorgang angewendet wurde.</span><span class="sxs-lookup"><span data-stu-id="2deaf-208">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2deaf-209">Im folgenden Beispiel wird die Signatur des Konstruktors:</span><span class="sxs-lookup"><span data-stu-id="2deaf-209">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC_IAP](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc_iap)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2deaf-210">Für <paramref name="defaultValue" /> ist <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> festgelegt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-210">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited, System.Windows.Data.UpdateSourceTrigger defaultUpdateSourceTrigger);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited, valuetype System.Windows.Data.UpdateSourceTrigger defaultUpdateSourceTrigger) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean,System.Windows.Data.UpdateSourceTrigger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback, bool isAnimationProhibited, System::Windows::Data::UpdateSourceTrigger defaultUpdateSourceTrigger);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
        <Parameter Name="isAnimationProhibited" Type="System.Boolean" />
        <Parameter Name="defaultUpdateSourceTrigger" Type="System.Windows.Data.UpdateSourceTrigger" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="2deaf-211">Der Standardwert für die Abhängigkeitseigenschaft, der normalerweise als Wert eines bestimmten Typs angegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-211">The default value of the dependency property, usually provided as a specific type.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="2deaf-212">Die Flags für die Metadatenoptionen (eine Kombination von <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> Werten).</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-212">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span>
          </span>
          <span data-ttu-id="2deaf-213">Diese Optionen geben Merkmale der Abhängigkeitseigenschaft an, die mit Systemen wie Layout oder Datenbindung zusammen arbeiten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-213">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="2deaf-214">Ein Verweis auf eine Handlerimplementierung, die das Eigenschaftensystem aufruft, wenn der effektive Wert der Eigenschaft geändert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-214">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <param name="coerceValueCallback">
          <span data-ttu-id="2deaf-215">Ein Verweis auf eine Handlerimplementierung, der aufgerufen wird, wenn das Eigenschaftensystem <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> für diese Abhängigkeitseigenschaft aufruft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-215">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> against this property.</span>
          </span>
        </param>
        <param name="isAnimationProhibited">
          <span data-ttu-id="2deaf-216">
            <see langword="true" />, um zu verhindern, dass das Eigenschaftensystem die Eigenschaft animiert, auf die diese Metadaten angewendet werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-216">
              <see langword="true" /> to prevent the property system from animating the property that this metadata is applied to.</span>
          </span>
          <span data-ttu-id="2deaf-217">Diese Eigenschaften lösen eine Laufzeitausnahme aus, die aus dem Eigenschaftensystem stammt, wenn versucht wird, sie zu animieren.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-217">Such properties will raise a run-time exception originating from the property system if animations of them are attempted.</span>
          </span>
          <span data-ttu-id="2deaf-218">Der Standardwert ist <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-218">The default is <see langword="false" />.</span>
          </span>
        </param>
        <param name="defaultUpdateSourceTrigger">
          <span data-ttu-id="2deaf-219">Der <see cref="T:System.Windows.Data.UpdateSourceTrigger" />, der verwendet werden soll, wenn Bindungen für diese Eigenschaft angewendet werden, deren <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> auf <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" /> festgelegt ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-219">The <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> to use when bindings for this property are applied that have their <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> set to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2deaf-220">Initialisiert eine neue Instanz der <see cref="T:System.Windows.FrameworkPropertyMetadata" />-Klasse mit dem bereitgestellten Standardwert und Metadatenoptionen auf Frameworkebene, den angegebenen Rückrufen, einem booleschen Wert, mit dem die Animation der Eigenschaft verhindert werden kann, und einem Standardwert für den Aktualisierungstrigger der Datenbindung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-220">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, specified callbacks, a Boolean that can be used to prevent animation of the property, and a data-binding update trigger default.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2deaf-221">Der Typ des Werts vorgesehenen `defaultValue` übereinstimmen oder im Zusammenhang mit der werden in den angegebenen Typ in der ursprünglichen Registrierung der Abhängigkeitseigenschaft, die diese Metadaten angewendet werden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-221">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="2deaf-222">Konflikte zwischen Metadaten und den Typ der Abhängigkeitseigenschaft, der es angewendet wird können zu debuggen, schwierig sein, da der Konflikt während der Kompilierung nicht erkennbar ist.</span><span class="sxs-lookup"><span data-stu-id="2deaf-222">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="2deaf-223">Im Eigenschaftensystem wird den effektiven Wert einer Eigenschaft nicht erst zur Laufzeit ausgewertet, daher ist das Ergebnis der standardmäßige Wert Type-Eigenschaft Typenkonflikt einen Laufzeitfehler.</span><span class="sxs-lookup"><span data-stu-id="2deaf-223">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="2deaf-224">Der Wert <xref:System.Windows.DependencyProperty.UnsetValue> hat eine besondere Bedeutung in dem Eigenschaftensystem und kann nicht als Standardwert für eine Abhängigkeitseigenschaft verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-224">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="2deaf-225">Die `isAnimationProhibited` Parameter wird den Anfangswert von der <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> Eigenschaft deklariert, durch die sofortige Basis <xref:System.Windows.UIPropertyMetadata> Klasse.</span><span class="sxs-lookup"><span data-stu-id="2deaf-225">The `isAnimationProhibited` parameter sets the initial value of the <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> property declared by the immediate base <xref:System.Windows.UIPropertyMetadata> class.</span></span>  
  
 <span data-ttu-id="2deaf-226">Weitere Informationen über das Verhalten des Update-Quelle für Bindungen finden Sie unter [Übersicht über Datenbindung](~/docs/framework/wpf/data/data-binding-overview.md).</span><span class="sxs-lookup"><span data-stu-id="2deaf-226">For more information about the update source behavior for bindings, see [Data Binding Overview](~/docs/framework/wpf/data/data-binding-overview.md).</span></span>  
  
 <span data-ttu-id="2deaf-227">Werte als Gruppe von Flags in markiert die `flags` Parametersatz wird den booleschen Wert der <xref:System.Windows.FrameworkPropertyMetadata> Eigenschaften, die entsprechen <xref:System.Windows.FrameworkPropertyMetadataOptions> FlagName zu `true`.</span><span class="sxs-lookup"><span data-stu-id="2deaf-227">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="2deaf-228">Sie können weiterhin die Werte der Eigenschaften in den Metadaten ändern, als die Metadaten noch nicht auf einem bestimmten Vorgang angewendet wurde.</span><span class="sxs-lookup"><span data-stu-id="2deaf-228">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC_IAP_DUST](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc_iap_dust)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2deaf-229">Für <paramref name="defaultValue" /> ist <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> festgelegt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-229">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName="AffectsArrange">
      <MemberSignature Language="C#" Value="public bool AffectsArrange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsArrange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsArrange" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsArrange As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsArrange { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2deaf-230">Dient zum Abrufen oder Festlegen eines Werts, der angibt, ob eine Abhängigkeitseigenschaft möglicherweise die Anordnungsphase während Layoutmodulvorgängen beeinflusst.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-230">Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass during layout engine operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2deaf-231">
            <see langword="true" />, wenn die Abhängigkeitseigenschaft, für die diese Metadaten vorhanden sind, möglicherweise die Anordnungsphase beeinflusst, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-231">
              <see langword="true" /> if the dependency property on which this metadata exists potentially affects the arrange pass; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="2deaf-232">Der Standardwert ist <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-232">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2deaf-233"><xref:System.Windows.FrameworkElement> und <xref:System.Windows.FrameworkContentElement> enthalten eine Implementierung von <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> , überwacht effektive Änderungen an alle Abhängigkeitseigenschaften, die auf ein Element vorhanden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-233"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="2deaf-234">Im Rahmen dieser Logik Abhängigkeitseigenschaften, die Änderung des effektiven Wert und Metadaten, bei denen <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> festgelegt `true` initiiert eine verzögerte Anforderung für ungültig zu erklärende die visuellen Elemente für dieses Element (einen Aufruf von <xref:System.Windows.UIElement.InvalidateArrange%2A>).</span><span class="sxs-lookup"><span data-stu-id="2deaf-234">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element (a call to <xref:System.Windows.UIElement.InvalidateArrange%2A>).</span></span> <span data-ttu-id="2deaf-235">Da dieses WPF-Frameworkebene vorgenommene Implementierung bereits vorhanden ist, müssen Sie normalerweise nicht für Abhängigkeitseigenschaften mit suchen <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> , wenn Sie im Wesentlichen ersetzen oder ändern die WPF-Frameworkebene Layoutverhalten.</span><span class="sxs-lookup"><span data-stu-id="2deaf-235">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="2deaf-236">Benutzerdefinierte <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> Implementierungen können sich entscheiden, ein ähnliches Verhalten für-Abhängigkeitseigenschaft haben, in denen <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> ist `true`.</span><span class="sxs-lookup"><span data-stu-id="2deaf-236">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> is `true`.</span></span>  
  
 <span data-ttu-id="2deaf-237">Eigenschaften für abgeleitete Klassen von <xref:System.Windows.PropertyMetadata> werden in der Regel im Objektmodell mit Lese-/ Schreibzugriff definiert.</span><span class="sxs-lookup"><span data-stu-id="2deaf-237">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="2deaf-238">Dies ist, dass sie nach der Initialisierung der Instanz angepasst werden können.</span><span class="sxs-lookup"><span data-stu-id="2deaf-238">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="2deaf-239">Jedoch, nachdem die Metadaten als Teil eines Aufrufs von genutzt werden <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, das Eigenschaftensystem diese Metadateninstanz und Eigenschaften, die die Merkmale der Metadaten enthalten nun als unveränderlich angesehen werden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-239">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="2deaf-240">Beim Festlegen dieser Eigenschaft nach <xref:System.Windows.PropertyMetadata.IsSealed%2A> ist `true` auf diesen Metadaten Instanz wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="2deaf-240">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsArrange"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="2deaf-241">Verwendung von XAML-Text</span><span class="sxs-lookup"><span data-stu-id="2deaf-241">XAML Text Usage</span></span>  
 <span data-ttu-id="2deaf-242">Member dieser Klasse werden üblicherweise nicht in verwendet [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="2deaf-242">Members of this class are either not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2deaf-243">Im folgenden Beispiel wird die Standardmetadaten aus verschiedenen Abhängigkeit abgerufen, fragt den Wert der verschiedenen <xref:System.Windows.FrameworkPropertyMetadata> Eigenschaften auf, und verwendet die Informationen zum Auffüllen einer Tabelle, um eine "Metadatenbrowser" implementieren.</span><span class="sxs-lookup"><span data-stu-id="2deaf-243">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2deaf-244">Die Metadaten wurden bereits auf einen Vorgang der Abhängigkeitseigenschaft angewendet, sodass Metadaten versiegelt sind und keine Eigenschaften für Metadaten festgelegt werden können.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-244">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="AffectsMeasure">
      <MemberSignature Language="C#" Value="public bool AffectsMeasure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsMeasure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsMeasure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsMeasure { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2deaf-245">Dient zum Abrufen oder Festlegen eines Werts, der angibt, ob eine Abhängigkeitseigenschaft möglicherweise die Messphase während Layoutmodulvorgängen beeinflusst.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-245">Gets or sets a value that indicates whether a dependency property potentially affects the measure pass during layout engine operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2deaf-246">
            <see langword="true" />, wenn die Abhängigkeitseigenschaft, für die diese Metadaten vorhanden sind, die Maßübergabe beeinflussen können, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-246">
              <see langword="true" /> if the dependency property on which this metadata exists potentially affects the measure pass; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="2deaf-247">Der Standardwert ist <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-247">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2deaf-248"><xref:System.Windows.FrameworkElement> und <xref:System.Windows.FrameworkContentElement> enthalten eine Implementierung von <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> , überwacht effektive Änderungen an alle Abhängigkeitseigenschaften, die auf ein Element vorhanden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-248"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="2deaf-249">Im Rahmen dieser Logik Abhängigkeitseigenschaften, die Änderung des effektiven Wert und Metadaten, bei denen <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> festgelegt `true` initiiert eine verzögerte Anforderung für ungültig zu erklärende die visuellen Elemente für dieses Element.</span><span class="sxs-lookup"><span data-stu-id="2deaf-249">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element.</span></span> <span data-ttu-id="2deaf-250">Da dieses WPF-Frameworkebene vorgenommene Implementierung bereits vorhanden ist, müssen Sie normalerweise nicht für Abhängigkeitseigenschaften mit suchen <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> , wenn Sie im Wesentlichen ersetzen oder ändern die WPF-Frameworkebene Layoutverhalten.</span><span class="sxs-lookup"><span data-stu-id="2deaf-250">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="2deaf-251">Benutzerdefinierte <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> Implementierungen können sich entscheiden, ein ähnliches Verhalten für-Abhängigkeitseigenschaft haben, in denen <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> ist `true`.</span><span class="sxs-lookup"><span data-stu-id="2deaf-251">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> is `true`.</span></span>  
  
 <span data-ttu-id="2deaf-252">Eigenschaften für abgeleitete Klassen von <xref:System.Windows.PropertyMetadata> werden in der Regel im Objektmodell mit Lese-/ Schreibzugriff definiert.</span><span class="sxs-lookup"><span data-stu-id="2deaf-252">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="2deaf-253">Dies ist, dass sie nach der Initialisierung der Instanz angepasst werden können.</span><span class="sxs-lookup"><span data-stu-id="2deaf-253">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="2deaf-254">Jedoch, nachdem die Metadaten als Teil eines Aufrufs von genutzt werden <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, das Eigenschaftensystem diese Metadateninstanz und Eigenschaften, die die Merkmale der Metadaten enthalten nun als unveränderlich angesehen werden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-254">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="2deaf-255">Beim Festlegen dieser Eigenschaft nach <xref:System.Windows.PropertyMetadata.IsSealed%2A> ist `true` auf diesen Metadaten Instanz wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="2deaf-255">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsMeasure"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="2deaf-256">Verwendung von XAML-Text</span><span class="sxs-lookup"><span data-stu-id="2deaf-256">XAML Text Usage</span></span>  
 <span data-ttu-id="2deaf-257">Member dieser Klasse werden üblicherweise nicht in verwendet [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="2deaf-257">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2deaf-258">Im folgenden Beispiel wird die Standardmetadaten aus verschiedenen Abhängigkeit abgerufen, fragt den Wert der verschiedenen <xref:System.Windows.FrameworkPropertyMetadata> Eigenschaften auf, und verwendet die Informationen zum Auffüllen einer Tabelle, um eine "Metadatenbrowser" implementieren.</span><span class="sxs-lookup"><span data-stu-id="2deaf-258">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2deaf-259">Die Metadaten wurden bereits auf einen Vorgang der Abhängigkeitseigenschaft angewendet, sodass Metadaten versiegelt sind und keine Eigenschaften für Metadaten festgelegt werden können.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-259">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="AffectsParentArrange">
      <MemberSignature Language="C#" Value="public bool AffectsParentArrange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsParentArrange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsParentArrange As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsParentArrange { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2deaf-260">Dient zum Abrufen oder Festlegen eines Werts, der angibt, ob eine Abhängigkeitseigenschaft möglicherweise die Anordnungsphase des übergeordneten Elements während Layoutmodulvorgängen beeinflusst.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-260">Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass of its parent element's layout during layout engine operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2deaf-261">
            <see langword="true" />, wenn die Abhängigkeitseigenschaft, für die diese Metadaten vorhanden sind, die Anordnungsübergabe, insbesondere für das übergeordnete Element, beeinflussen können, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-261">
              <see langword="true" /> if the dependency property on which this metadata exists potentially affects the arrange pass specifically on its parent element; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="2deaf-262">Der Standardwert ist <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-262">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2deaf-263"><xref:System.Windows.FrameworkElement> und <xref:System.Windows.FrameworkContentElement> enthalten eine Implementierung von <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> , überwacht effektive Änderungen an alle Abhängigkeitseigenschaften, die auf ein Element vorhanden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-263"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="2deaf-264">Im Rahmen dieser Logik Abhängigkeitseigenschaften, die Änderung des effektiven Wert und Metadaten, bei denen <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> festgelegt `true` initiiert eine verzögerte Anforderung, die visuellen Elemente für das übergeordnete Element für ungültig zu erklären.</span><span class="sxs-lookup"><span data-stu-id="2deaf-264">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> set to `true` will initiate a deferred request to invalidate the visuals for the parent element.</span></span>  
  
 <span data-ttu-id="2deaf-265">Im Allgemeinen, Sie müssen nicht zum Melden von Änderungen von einem <xref:System.Windows.FrameworkElement> Eigenschaft zu einem übergeordneten Element mit <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> , da das Element selbst bereits einen eigenen hätte <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> als `true`.</span><span class="sxs-lookup"><span data-stu-id="2deaf-265">Generally, you do not need to report changes of a <xref:System.Windows.FrameworkElement> property to a parent element using <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> because the element itself would already have its own <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> as `true`.</span></span> <span data-ttu-id="2deaf-266">In der Regel ausreichend, Änderungen an das untergeordnete Element in der Regel initiiert ein übergeordnetes Element anordnen, wenn dies angebracht.</span><span class="sxs-lookup"><span data-stu-id="2deaf-266">That is usually sufficient, because changes in the child element generally initiate a parent arrange when appropriate.</span></span> <span data-ttu-id="2deaf-267"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> wird für manchmal verwendet eine <xref:System.Windows.FrameworkContentElement> abgeleitete Klasse.</span><span class="sxs-lookup"><span data-stu-id="2deaf-267"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is sometimes used for a <xref:System.Windows.FrameworkContentElement> derived class.</span></span> <span data-ttu-id="2deaf-268">In diesem Fall wird das untergeordnete Element legt eine Eigenschaft, aber ein <xref:System.Windows.FrameworkContentElement> abgeleiteten Klasse steuert nicht ihr eigenes Rendering.</span><span class="sxs-lookup"><span data-stu-id="2deaf-268">In this case, the child element sets a property, but a <xref:System.Windows.FrameworkContentElement> derived class does not control its own rendering.</span></span> <span data-ttu-id="2deaf-269">Das Rendering erfolgt durch eine <xref:System.Windows.FrameworkElement> übergeordneten Elements, das als Inhaltshost dient.</span><span class="sxs-lookup"><span data-stu-id="2deaf-269">The rendering is handled by a <xref:System.Windows.FrameworkElement> parent element that serves as the content host.</span></span> <span data-ttu-id="2deaf-270">Z. B. eine Änderung auf den Wert von der <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> angefügte Eigenschaft von einem untergeordneten Element erklärt Anordnen des übergeordneten Elements, da die Position des untergeordneten Elements in der übergeordneten Tabelle geändert werden muss.</span><span class="sxs-lookup"><span data-stu-id="2deaf-270">For instance, a change to the value of the <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> attached property by a child element invalidates arrange of the parent, because the position of the child in the parent must be changed.</span></span> <span data-ttu-id="2deaf-271">Aus diesem Grund die <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> angefügte Eigenschaft besitzt die Metadaten, in denen <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> ist `true`.</span><span class="sxs-lookup"><span data-stu-id="2deaf-271">Therefore, the <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> attached property has metadata where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is `true`.</span></span> <span data-ttu-id="2deaf-272">Ein weiteres Beispiel ist <xref:System.Windows.Controls.Control.Padding%2A>; Wenn das übergeordnete Element dieser Eigenschaft ändert sich ändern kann, wenn die Positionierung des untergeordneten Elements, abhängig von den verfügbaren Speicherplatz.</span><span class="sxs-lookup"><span data-stu-id="2deaf-272">Another example is <xref:System.Windows.Controls.Control.Padding%2A>; when this property changes, the parent might change the positioning of the child, depending on available space.</span></span>  
  
 <span data-ttu-id="2deaf-273">Da dieses WPF-Frameworkebene vorgenommene Implementierung bereits vorhanden ist, müssen Sie normalerweise nicht für Abhängigkeitseigenschaften mit suchen <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> , wenn Sie im Wesentlichen ersetzen oder ändern die WPF-Frameworkebene Layoutverhalten.</span><span class="sxs-lookup"><span data-stu-id="2deaf-273">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="2deaf-274">Benutzerdefinierte <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> Implementierungen können sich entscheiden, ein ähnliches Verhalten für-Abhängigkeitseigenschaft haben, in denen <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> ist `true`.</span><span class="sxs-lookup"><span data-stu-id="2deaf-274">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is `true`.</span></span>  
  
 <span data-ttu-id="2deaf-275">Eigenschaften für alle abgeleiteten Klassen von <xref:System.Windows.PropertyMetadata> werden in der Regel im Objektmodell mit Lese-/ Schreibzugriff definiert.</span><span class="sxs-lookup"><span data-stu-id="2deaf-275">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="2deaf-276">Dies ist, dass sie nach der Initialisierung der Instanz angepasst werden können.</span><span class="sxs-lookup"><span data-stu-id="2deaf-276">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="2deaf-277">Jedoch, nachdem die Metadaten als Teil eines Aufrufs von genutzt werden <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, das Eigenschaftensystem diese Metadateninstanz und Eigenschaften, die die Merkmale der Metadaten enthalten nun als unveränderlich angesehen werden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-277">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="2deaf-278">Beim Festlegen dieser Eigenschaft nach <xref:System.Windows.PropertyMetadata.IsSealed%2A> ist `true` auf diesen Metadaten Instanz wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="2deaf-278">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsParentArrange"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="2deaf-279">Verwendung von XAML-Text</span><span class="sxs-lookup"><span data-stu-id="2deaf-279">XAML Text Usage</span></span>  
 <span data-ttu-id="2deaf-280">Member dieser Klasse werden üblicherweise nicht in verwendet [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="2deaf-280">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2deaf-281">Die Metadaten wurden bereits auf einen Vorgang der Abhängigkeitseigenschaft angewendet, sodass Metadaten versiegelt sind und keine Eigenschaften für Metadaten festgelegt werden können.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-281">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="AffectsParentMeasure">
      <MemberSignature Language="C#" Value="public bool AffectsParentMeasure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsParentMeasure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsParentMeasure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsParentMeasure { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2deaf-282">Dient zum Abrufen oder Festlegen eines Werts, der angibt, ob eine Abhängigkeitseigenschaft möglicherweise den Bemessungsdurchgang des übergeordneten Elements während Layoutmodulvorgängen beeinflusst.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-282">Gets or sets a value that indicates whether a dependency property potentially affects the measure pass of its parent element's layout during layout engine operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2deaf-283">
            <see langword="true" />, wenn die Abhängigkeitseigenschaft, für die diese Metadaten vorhanden sind, die Maßübergabe, insbesondere für das übergeordnete Element, beeinflussen können, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-283">
              <see langword="true" /> if the dependency property on which this metadata exists potentially affects the measure pass specifically on its parent element; otherwise, <see langword="false" />.The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2deaf-284"><xref:System.Windows.FrameworkElement> und <xref:System.Windows.FrameworkContentElement> enthalten eine Implementierung von <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> , überwacht effektive Änderungen an alle Abhängigkeitseigenschaften, die auf ein Element vorhanden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-284"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="2deaf-285">Im Rahmen dieser Logik Abhängigkeitseigenschaften, die Änderung des effektiven Wert und Metadaten, bei denen <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> festgelegt `true` initiiert eine verzögerte Anforderung, die visuellen Elemente für das übergeordnete Element für ungültig zu erklären.</span><span class="sxs-lookup"><span data-stu-id="2deaf-285">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> set to `true` will initiate a deferred request to invalidate the visuals for the parent element.</span></span> <span data-ttu-id="2deaf-286">Da dieses WPF-Frameworkebene vorgenommene Implementierung bereits vorhanden ist, müssen Sie normalerweise nicht für Abhängigkeitseigenschaften mit suchen <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> , wenn Sie im Wesentlichen ersetzen oder ändern die WPF-Frameworkebene Layoutverhalten.</span><span class="sxs-lookup"><span data-stu-id="2deaf-286">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="2deaf-287">Im Allgemeinen, Sie müssen nicht zum Melden von Änderungen von einem <xref:System.Windows.FrameworkElement> Eigenschaft zu einem übergeordneten Element mit <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> , da das Element selbst bereits einen eigenen hätte <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> als `true`.</span><span class="sxs-lookup"><span data-stu-id="2deaf-287">Generally, you do not need to report changes of a <xref:System.Windows.FrameworkElement> property to a parent element using <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> because the element itself would already have its own <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> as `true`.</span></span> <span data-ttu-id="2deaf-288">Hierfür ist, in der Regel ausreichend Änderungen in das untergeordnete Element in der Regel eine übergeordnete Maßübergabe ggf. initiieren.</span><span class="sxs-lookup"><span data-stu-id="2deaf-288">That is usually sufficient, because changes in the child element generally initiate a parent measure pass when appropriate.</span></span> <span data-ttu-id="2deaf-289"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> wird für manchmal verwendet eine <xref:System.Windows.FrameworkContentElement> abgeleitete Klasse.</span><span class="sxs-lookup"><span data-stu-id="2deaf-289"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is sometimes used for a <xref:System.Windows.FrameworkContentElement> derived class.</span></span> <span data-ttu-id="2deaf-290">In diesem Fall wird das untergeordnete Element legt eine Eigenschaft, aber ein <xref:System.Windows.FrameworkContentElement> abgeleiteten Klasse steuert nicht ihr eigenes Rendering.</span><span class="sxs-lookup"><span data-stu-id="2deaf-290">In this case, the child element sets a property, but a <xref:System.Windows.FrameworkContentElement> derived class does not control its own rendering.</span></span> <span data-ttu-id="2deaf-291">Das Rendering erfolgt durch eine <xref:System.Windows.FrameworkElement> übergeordneten Elements, das als Inhaltshost dient.</span><span class="sxs-lookup"><span data-stu-id="2deaf-291">The rendering is handled by a <xref:System.Windows.FrameworkElement> parent element that serves as the content host.</span></span> <span data-ttu-id="2deaf-292">Z. B. eine Änderung auf den Wert, der die <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> Eigenschaft von einem untergeordneten Element Maß für das übergeordnete Element ungültig, da es sich bei der relative Abstand von Absätzen ändern, und möglicherweise erhöhen oder verringern Sie die Inhaltshost Größe möglicherweise.</span><span class="sxs-lookup"><span data-stu-id="2deaf-292">For instance, a change to the value of the <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> property by a child element invalidates measure of the parent, because the relative spacing of paragraphs might change and might increase or decrease the content host size.</span></span> <span data-ttu-id="2deaf-293">Aus diesem Grund die <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> Eigenschaft verfügt über Metadaten, in denen <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> ist `true`.</span><span class="sxs-lookup"><span data-stu-id="2deaf-293">Therefore, the <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> property has metadata where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`.</span></span>  
  
 <span data-ttu-id="2deaf-294">Inhaltshostelemente auch häufig suchen Sie nach Änderungen in Abhängigkeitseigenschaften, in denen <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> ist `true`, im Rahmen des Inhaltshost Renderinglogik.</span><span class="sxs-lookup"><span data-stu-id="2deaf-294">Content host elements also frequently look for changes in dependency properties where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`, as part of content host rendering logic.</span></span> <span data-ttu-id="2deaf-295">Für die Instanz, die <xref:System.Windows.Controls.TextBox> Element muss, die bestimmte Änderungen in Text, die, die möglicherweise, das umgebende Feld reagieren die <xref:System.Windows.Controls.TextBox> selbst geändert werden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-295">For instance, the <xref:System.Windows.Controls.TextBox> element must respond to certain changes within text that might require that the bounding box of the <xref:System.Windows.Controls.TextBox> itself be changed.</span></span>  
  
 <span data-ttu-id="2deaf-296">Benutzerdefinierte <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> Implementierungen können sich entscheiden, ein ähnliches Verhalten für-Abhängigkeitseigenschaft haben, in denen <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> ist `true`.</span><span class="sxs-lookup"><span data-stu-id="2deaf-296">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`.</span></span>  
  
 <span data-ttu-id="2deaf-297">Eigenschaften für alle abgeleiteten Klassen von <xref:System.Windows.PropertyMetadata> werden in der Regel im Objektmodell mit Lese-/ Schreibzugriff definiert.</span><span class="sxs-lookup"><span data-stu-id="2deaf-297">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="2deaf-298">Dies ist, dass sie nach der Initialisierung der Instanz angepasst werden können.</span><span class="sxs-lookup"><span data-stu-id="2deaf-298">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="2deaf-299">Jedoch, nachdem die Metadaten als Teil eines Aufrufs von genutzt werden <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, das Eigenschaftensystem diese Metadateninstanz und Eigenschaften, die die Merkmale der Metadaten enthalten nun als unveränderlich angesehen werden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-299">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="2deaf-300">Beim Festlegen dieser Eigenschaft nach <xref:System.Windows.PropertyMetadata.IsSealed%2A> ist `true` auf diesen Metadaten Instanz wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="2deaf-300">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsParentMeasure"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="2deaf-301">Verwendung von XAML-Text</span><span class="sxs-lookup"><span data-stu-id="2deaf-301">XAML Text Usage</span></span>  
 <span data-ttu-id="2deaf-302">Member dieser Klasse werden üblicherweise nicht in verwendet [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="2deaf-302">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2deaf-303">Die Metadaten wurden bereits auf einen Vorgang der Abhängigkeitseigenschaft angewendet, sodass Metadaten versiegelt sind und keine Eigenschaften für Metadaten festgelegt werden können.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-303">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="AffectsRender">
      <MemberSignature Language="C#" Value="public bool AffectsRender { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsRender" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsRender" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsRender As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsRender { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2deaf-304">Ruft einen Wert ab oder legt diesen fest, der angibt, ob sich eine Abhängigkeitseigenschaft möglicherweise in irgendeiner Weise (nicht speziell in Bezug auf Anordnung oder Messung, jedoch hinsichtlich eines erforderlichen Neuzeichnens) auf das allgemeine Layout auswirkt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-304">Gets or sets a value that indicates whether a dependency property potentially affects the general layout in some way that does not specifically influence arrangement or measurement, but would require a redraw.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2deaf-305">
            <see langword="true" />, falls die Abhängigkeitseigenschaft, für die diese Metadaten vorhanden sind, sich auf das Rendering auswirkt, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-305">
              <see langword="true" /> if the dependency property on which this metadata exists affects rendering; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="2deaf-306">Der Standardwert ist <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-306">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2deaf-307"><xref:System.Windows.FrameworkElement> und <xref:System.Windows.FrameworkContentElement> enthalten eine Implementierung von <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> , überwacht effektive Änderungen an alle Abhängigkeitseigenschaften, die auf ein Element vorhanden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-307"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="2deaf-308">Im Rahmen dieser Logik Abhängigkeitseigenschaften, die Änderung des effektiven Wert und Metadaten, bei denen <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> festgelegt `true` initiiert eine verzögerte Anforderung für ungültig zu erklärende die visuellen Elemente für dieses Element.</span><span class="sxs-lookup"><span data-stu-id="2deaf-308">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element.</span></span> <span data-ttu-id="2deaf-309">Da dieses WPF-Frameworkebene vorgenommene Implementierung bereits vorhanden ist, müssen Sie normalerweise nicht für Abhängigkeitseigenschaften mit suchen <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> , wenn Sie im Wesentlichen ersetzen oder ändern die WPF-Frameworkebene Layoutverhalten.</span><span class="sxs-lookup"><span data-stu-id="2deaf-309">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="2deaf-310">Benutzerdefinierte <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> Implementierungen können sich entscheiden, ein ähnliches Verhalten für-Abhängigkeitseigenschaft haben, in denen <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> ist `true`.</span><span class="sxs-lookup"><span data-stu-id="2deaf-310">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> is `true`.</span></span>  
  
 <span data-ttu-id="2deaf-311">Eigenschaften für alle abgeleiteten Klassen von <xref:System.Windows.PropertyMetadata> werden in der Regel im Objektmodell mit Lese-/ Schreibzugriff definiert.</span><span class="sxs-lookup"><span data-stu-id="2deaf-311">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="2deaf-312">Dies ist, dass sie nach der Initialisierung der Instanz angepasst werden können.</span><span class="sxs-lookup"><span data-stu-id="2deaf-312">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="2deaf-313">Jedoch, nachdem die Metadaten als Teil eines Aufrufs von genutzt werden <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, das Eigenschaftensystem diese Metadateninstanz und Eigenschaften, die die Merkmale der Metadaten enthalten nun als unveränderlich angesehen werden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-313">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="2deaf-314">Beim Festlegen dieser Eigenschaft nach <xref:System.Windows.PropertyMetadata.IsSealed%2A> ist `true` auf diesen Metadaten Instanz wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="2deaf-314">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsRender"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="2deaf-315">Verwendung von XAML-Text</span><span class="sxs-lookup"><span data-stu-id="2deaf-315">XAML Text Usage</span></span>  
 <span data-ttu-id="2deaf-316">Member dieser Klasse werden üblicherweise nicht in verwendet [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="2deaf-316">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2deaf-317">Im folgenden Beispiel wird die Standardmetadaten aus verschiedenen Abhängigkeit abgerufen, fragt den Wert der verschiedenen <xref:System.Windows.FrameworkPropertyMetadata> Eigenschaften auf, und verwendet die Informationen zum Auffüllen einer Tabelle, um eine "Metadatenbrowser" implementieren.</span><span class="sxs-lookup"><span data-stu-id="2deaf-317">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2deaf-318">Die Metadaten wurden bereits auf einen Vorgang der Abhängigkeitseigenschaft angewendet, sodass Metadaten versiegelt sind und keine Eigenschaften für Metadaten festgelegt werden können.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-318">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="BindsTwoWayByDefault">
      <MemberSignature Language="C#" Value="public bool BindsTwoWayByDefault { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BindsTwoWayByDefault" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault" />
      <MemberSignature Language="VB.NET" Value="Public Property BindsTwoWayByDefault As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BindsTwoWayByDefault { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2deaf-319">Ruft einen Wert ab, der angibt, ob die Eigenschaft standardmäßig bidirektional gebunden wird, oder legt ihn fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-319">Gets or sets a value that indicates whether the property binds two-way by default.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2deaf-320">
            <see langword="true" />, falls die Abhängigkeitseigenschaft, für die diese Metadaten vorhanden sind, standardmäßig bidirektional gebunden wird, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-320">
              <see langword="true" /> if the dependency property on which this metadata exists binds two-way by default; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="2deaf-321">Der Standardwert ist <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-321">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2deaf-322">In Ermangelung dieser Eigenschaft wird `true`, Bindung Updates sind standardmäßig basierend auf dem Standardverhalten von unidirektionalen der <xref:System.Windows.Data.Binding> Konstruktoren oder einer entsprechenden [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Syntax.</span><span class="sxs-lookup"><span data-stu-id="2deaf-322">In absence of this property being `true`, binding updates are one-way by default, based on the default behavior of the <xref:System.Windows.Data.Binding> constructors or equivalent [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="2deaf-323">In vorhandenen Elemente finden Sie in der Regel dieser Eigenschaft `true` in den Metadaten für Abhängigkeitseigenschaften, die den Status und können geändert werden, durch eine Benutzeraktion, z. B. <xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="2deaf-323">In existing elements, you will usually find this property set to `true` in metadata for dependency properties that both report state and are modifiable by user action, for example <xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="2deaf-324">Diese Eigenschaft gibt im Allgemeinen nur die Standardeigenschaften für die Aktualisierung von Bindung der Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="2deaf-324">This property only reports the default binding update characteristics of the dependency property in general.</span></span> <span data-ttu-id="2deaf-325">Eine Bindung mit dem Festlegen dieser Eigenschaft auf eine Instanz kann lokal festgelegt. die <xref:System.Windows.Data.Binding.Mode%2A> -Eigenschaft der Bindung und diese Standardeinstellung ändern.</span><span class="sxs-lookup"><span data-stu-id="2deaf-325">Any binding set to this property on an instance can locally set the <xref:System.Windows.Data.Binding.Mode%2A> property of the binding and change this default.</span></span>  
  
 <span data-ttu-id="2deaf-326">Eigenschaften für alle abgeleiteten Klassen von <xref:System.Windows.PropertyMetadata> werden in der Regel im Objektmodell mit Lese-/ Schreibzugriff definiert.</span><span class="sxs-lookup"><span data-stu-id="2deaf-326">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="2deaf-327">Dies ist, dass sie nach der Initialisierung der Instanz angepasst werden können.</span><span class="sxs-lookup"><span data-stu-id="2deaf-327">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="2deaf-328">Jedoch, nachdem die Metadaten als Teil eines Aufrufs von genutzt werden <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, das Eigenschaftensystem diese Metadateninstanz und Eigenschaften, die die Merkmale der Metadaten enthalten nun als unveränderlich angesehen werden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-328">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="2deaf-329">Beim Festlegen dieser Eigenschaft nach <xref:System.Windows.PropertyMetadata.IsSealed%2A> ist `true` auf diesen Metadaten Instanz wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="2deaf-329">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_BindsTwoWayByDefault"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="2deaf-330">Verwendung von XAML-Text</span><span class="sxs-lookup"><span data-stu-id="2deaf-330">XAML Text Usage</span></span>  
 <span data-ttu-id="2deaf-331">Member dieser Klasse werden üblicherweise nicht in verwendet [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="2deaf-331">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2deaf-332">Im folgenden Beispiel wird die Standardmetadaten aus verschiedenen Abhängigkeit abgerufen, fragt den Wert der verschiedenen <xref:System.Windows.FrameworkPropertyMetadata> Eigenschaften auf, und verwendet die Informationen zum Auffüllen einer Tabelle, um eine "Metadatenbrowser" implementieren.</span><span class="sxs-lookup"><span data-stu-id="2deaf-332">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2deaf-333">Die Metadaten wurden bereits auf einen Vorgang der Abhängigkeitseigenschaft angewendet, sodass Metadaten versiegelt sind und keine Eigenschaften für Metadaten festgelegt werden können.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-333">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="DefaultUpdateSourceTrigger">
      <MemberSignature Language="C#" Value="public System.Windows.Data.UpdateSourceTrigger DefaultUpdateSourceTrigger { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Data.UpdateSourceTrigger DefaultUpdateSourceTrigger" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultUpdateSourceTrigger As UpdateSourceTrigger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::UpdateSourceTrigger DefaultUpdateSourceTrigger { System::Windows::Data::UpdateSourceTrigger get(); void set(System::Windows::Data::UpdateSourceTrigger value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.UpdateSourceTrigger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2deaf-334">Ruft den Standardwert für <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> ab, der beim Anwenden von Bindungen für die Eigenschaft mit diesen Metadaten verwendet werden soll, bei denen <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> auf <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" /> festgelegt ist, oder legt ihn fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-334">Gets or sets the default for <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> to use when bindings for the property with this metadata are applied, which have their <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> set to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2deaf-335">Ein Wert der Enumeration, ungleich <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-335">A value of the enumeration, other than <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2deaf-336">Eigenschaften für abgeleitete Klassen von <xref:System.Windows.PropertyMetadata> werden in der Regel im Objektmodell mit Lese-/ Schreibzugriff definiert.</span><span class="sxs-lookup"><span data-stu-id="2deaf-336">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="2deaf-337">Dies ist, dass sie nach der Initialisierung der Instanz angepasst werden können.</span><span class="sxs-lookup"><span data-stu-id="2deaf-337">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="2deaf-338">Jedoch, nachdem die Metadaten als Teil eines Aufrufs von genutzt werden <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, das Eigenschaftensystem diese Metadateninstanz und Eigenschaften, die die Merkmale der Metadaten enthalten nun als unveränderlich angesehen werden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-338">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="2deaf-339">Beim Festlegen dieser Eigenschaft nach <xref:System.Windows.PropertyMetadata.IsSealed%2A> ist `true` auf diesen Metadaten Instanz wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="2deaf-339">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_DefaultUpdateSourceTrigger"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="2deaf-340">Verwendung von XAML-Text</span><span class="sxs-lookup"><span data-stu-id="2deaf-340">XAML Text Usage</span></span>  
 <span data-ttu-id="2deaf-341">Member dieser Klasse werden üblicherweise nicht in verwendet [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="2deaf-341">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2deaf-342">Diese Eigenschaft ist auf <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" /> festgelegt. Der von Ihnen festgelegte Wert soll bei der Anforderung durch Bindungen zum Standardwert werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-342">This property is set to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />; the value you set is supposed to become the default when requested by bindings.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2deaf-343">Die Metadaten wurden bereits auf einen Vorgang der Abhängigkeitseigenschaft angewendet, sodass Metadaten versiegelt sind und keine Eigenschaften für Metadaten festgelegt werden können.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-343">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Inherits">
      <MemberSignature Language="C#" Value="public bool Inherits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Inherits" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.Inherits" />
      <MemberSignature Language="VB.NET" Value="Public Property Inherits As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Inherits { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2deaf-344">Ruft einen Wert ab, der angibt, ob der Wert für die Abhängigkeitseigenschaft vererbbar ist, oder legt ihn fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-344">Gets or sets a value that indicates whether the value of the dependency property is inheritable.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2deaf-345">
            <see langword="true" />, wenn die Eigenschaft vererbbar ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-345">
              <see langword="true" /> if the property value is inheritable; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="2deaf-346">Der Standardwert ist <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-346">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2deaf-347">Vererbung von Eigenschaftenwerten ist ein Feature von der [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Eigenschaftensystem auf WPF-Frameworkebene, bei dem bestimmte Abhängigkeitseigenschaften lokal werden für ein Element oder nahezu den Stamm festgelegt können einer [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Element Struktur, und klicken Sie dann ihren Wert von geerbt haben alle Elemente innerhalb der logischen Struktur des untergeordneten Elementen, die diese Eigenschaft außerdem besitzen.</span><span class="sxs-lookup"><span data-stu-id="2deaf-347">Property value inheritance is a feature of the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system at the WPF framework level, whereby certain dependency properties can be locally set on an element at or near the root of a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] element tree and then have their value inherited by all elements within the logical tree of child elements that also possess that property.</span></span> <span data-ttu-id="2deaf-348">Vererbung von Eigenschaftenwerten ist nicht standardmäßig aktiviert, und aktivieren sie hat einige Auswirkungen auf die Leistung.</span><span class="sxs-lookup"><span data-stu-id="2deaf-348">Property value inheritance is not enabled by default, and enabling it does have some performance implications.</span></span> <span data-ttu-id="2deaf-349">Weitere Informationen finden Sie unter [Vererbung von Eigenschaftswerten](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="2deaf-349">For details, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2deaf-350">Obwohl Vererbung von Eigenschaftenwerten Laufzeitstruktur Abhängigkeitseigenschaften funktionieren scheint, ist das Verhalten der Vererbung für eine nicht angefügte Eigenschaft über bestimmte Objektgrenzen in der Common Language Runtime-Struktur nicht definiert.</span><span class="sxs-lookup"><span data-stu-id="2deaf-350">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain object-object divisions in the runtime tree is undefined.</span></span> <span data-ttu-id="2deaf-351">Verwenden Sie immer <xref:System.Windows.DependencyProperty.RegisterAttached%2A> zum Registrieren von Eigenschaften in dem Sie angeben <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in den Metadaten.</span><span class="sxs-lookup"><span data-stu-id="2deaf-351">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span>  
  
 <span data-ttu-id="2deaf-352">Eigenschaften für abgeleitete Klassen von <xref:System.Windows.PropertyMetadata> werden in der Regel im Objektmodell mit Lese-/ Schreibzugriff definiert.</span><span class="sxs-lookup"><span data-stu-id="2deaf-352">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="2deaf-353">Dies ist, dass sie nach der Initialisierung der Instanz angepasst werden können.</span><span class="sxs-lookup"><span data-stu-id="2deaf-353">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="2deaf-354">Jedoch, nachdem die Metadaten als Teil eines Aufrufs von genutzt werden <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, das Eigenschaftensystem diese Metadateninstanz und Eigenschaften, die die Merkmale der Metadaten enthalten nun als unveränderlich angesehen werden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-354">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="2deaf-355">Beim Festlegen dieser Eigenschaft nach <xref:System.Windows.PropertyMetadata.IsSealed%2A> ist `true` auf diesen Metadaten Instanz wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="2deaf-355">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_Inherits"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="2deaf-356">Verwendung von XAML-Text</span><span class="sxs-lookup"><span data-stu-id="2deaf-356">XAML Text Usage</span></span>  
 <span data-ttu-id="2deaf-357">Member dieser Klasse werden üblicherweise nicht in verwendet [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="2deaf-357">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2deaf-358">Im folgenden Beispiel wird die Standardmetadaten aus verschiedenen Abhängigkeit abgerufen, fragt den Wert der verschiedenen <xref:System.Windows.FrameworkPropertyMetadata> Eigenschaften auf, und verwendet die Informationen zum Auffüllen einer Tabelle, um eine "Metadatenbrowser" implementieren.</span><span class="sxs-lookup"><span data-stu-id="2deaf-358">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2deaf-359">Die Metadaten wurden bereits auf einen Vorgang der Abhängigkeitseigenschaft angewendet, sodass Metadaten versiegelt sind und keine Eigenschaften für Metadaten festgelegt werden können.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-359">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="IsDataBindingAllowed">
      <MemberSignature Language="C#" Value="public bool IsDataBindingAllowed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDataBindingAllowed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDataBindingAllowed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDataBindingAllowed { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2deaf-360">Ruft einen Wert ab, der anzeigt, ob die Datenbindung für die Abhängigkeitseigenschaft unterstützt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-360">Gets a value that indicates whether data binding is supported for the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2deaf-361">
            <see langword="true" />, wenn Datenbindung für die Abhängigkeitseigenschaft unterstützt wird, auf diese Metadaten angewendet werden, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-361">
              <see langword="true" /> if data binding is supported on the dependency property to which this metadata applies; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="2deaf-362">Der Standardwert ist <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-362">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2deaf-363">Diese Eigenschaft gibt `false` für zwei mögliche Ursachen: entweder Binden von Daten an eine Abhängigkeitseigenschaft ist nicht zulässig, da die Abhängigkeitseigenschaft (wie in der Bezeichner der Abhängigkeitseigenschaft, nicht die Metadaten gemeldeten) schreibgeschützt ist oder der Wert von eine andere Metadateneigenschaft, <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>, festgelegt ist, um `true` in diesen Metadaten.</span><span class="sxs-lookup"><span data-stu-id="2deaf-363">This property reports `false` for one of two possible conditions: either data binding to a dependency property is not allowed because the dependency property is read-only (as reported in the dependency property identifier, not the metadata), or the value of another metadata property, <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>, is set to `true` in this metadata.</span></span> <span data-ttu-id="2deaf-364">Diese Eigenschaft ist verfügbar als Annehmlichkeit gemacht, sodass Aufrufer keine sowohl überprüfen <xref:System.Windows.DependencyProperty.ReadOnly%2A> und <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span><span class="sxs-lookup"><span data-stu-id="2deaf-364">This property is exposed as a convenience so that callers do not have to check both <xref:System.Windows.DependencyProperty.ReadOnly%2A> and <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span></span>  
  
 <span data-ttu-id="2deaf-365">Wenn Sie versuchen, um Metadaten zu erstellen, der angibt, dass eine andernfalls Lese-Schreib-Eigenschaft nicht die Datenbindung unterstützen soll, geben Sie das Flag <xref:System.Windows.FrameworkPropertyMetadataOptions.NotDataBindable> (Beachten Sie den leichte naming Convention Unterschied im Vergleich zu <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>).</span><span class="sxs-lookup"><span data-stu-id="2deaf-365">If you are attempting to create metadata that specifies that an otherwise read/write property should not support data binding, specify the flag <xref:System.Windows.FrameworkPropertyMetadataOptions.NotDataBindable> (note the slight naming convention difference versus <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>).</span></span>  
  
<a name="xamlTextUsage_IsDataBindingAllowed"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="2deaf-366">Verwendung von XAML-Text</span><span class="sxs-lookup"><span data-stu-id="2deaf-366">XAML Text Usage</span></span>  
 <span data-ttu-id="2deaf-367">Member dieser Klasse werden üblicherweise nicht in verwendet [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="2deaf-367">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2deaf-368">Im folgenden Beispiel wird die Standardmetadaten aus verschiedenen Abhängigkeit abgerufen, fragt den Wert der verschiedenen <xref:System.Windows.FrameworkPropertyMetadata> Eigenschaften auf, und verwendet die Informationen zum Auffüllen einer Tabelle, um eine "Metadatenbrowser" implementieren.</span><span class="sxs-lookup"><span data-stu-id="2deaf-368">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="IsNotDataBindable">
      <MemberSignature Language="C#" Value="public bool IsNotDataBindable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotDataBindable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable" />
      <MemberSignature Language="VB.NET" Value="Public Property IsNotDataBindable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotDataBindable { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2deaf-369">Ruft einen Wert ab, der angibt, ob die Datenbindung von der Abhängigkeitseigenschaft unterstützt wird, oder legt ihn fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-369">Gets or sets a value that indicates whether the dependency property supports data binding.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2deaf-370">
            <see langword="true" />, wenn die Eigenschaft keine Datenbindung unterstützt, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-370">
              <see langword="true" /> if the property does not support data binding; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="2deaf-371">Der Standardwert ist <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-371">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2deaf-372">Beachten Sie, die diese Metadateneigenschaft, um festgelegt wird `true` speziell für Eigenschaften, die Datenbindung trotz Eigenschaften mit Lese-/ Schreibzugriff wird nicht unterstützt werden sollen.</span><span class="sxs-lookup"><span data-stu-id="2deaf-372">Note that this metadata property is set to `true` specifically for properties that should not support data binding, despite being read-write properties.</span></span> <span data-ttu-id="2deaf-373">Die Annahme ist, dass in den meisten Fällen, in dem eine Abhängigkeitseigenschaft deklariert ist, die Datenbindung gewünscht ist, da Datenbindung eines der wichtigsten Szenarien, in denen eine Abhängigkeitseigenschaft nützlich ist.</span><span class="sxs-lookup"><span data-stu-id="2deaf-373">The expectation is that in most cases where a dependency property is declared, data binding is desired, because data binding is one of the key scenarios where a dependency property is useful.</span></span> <span data-ttu-id="2deaf-374">Im Gegensatz zu <xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>, dies ändert nicht nur einen Standardwert, der später für eine bestimmte Bindung geändert werden kann.</span><span class="sxs-lookup"><span data-stu-id="2deaf-374">Unlike <xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>, this does not merely change a default that can later be changed on a specific binding.</span></span> <span data-ttu-id="2deaf-375">Durch Festlegen dieser Eigenschaft `true` in den Metadaten für eine Abhängigkeitseigenschaft Metadaten deaktiviert alle Bindungen aus, deren Werte über Ausdrücke auf die Abhängigkeitseigenschaft angewendet.</span><span class="sxs-lookup"><span data-stu-id="2deaf-375">Setting this property `true` in the metadata for a dependency property metadata will disable all bindings from applying their values through expressions to that dependency property.</span></span>  
  
 <span data-ttu-id="2deaf-376">Schreibgeschützte Abhängigkeitseigenschaften unterstützen nicht das Binden von Daten (da sie keine Set-Methode, die geänderten Werte anwenden können haben), melden aber trotzdem `false` für <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span><span class="sxs-lookup"><span data-stu-id="2deaf-376">Read-only dependency properties do not support data binding (because they have no setter that can apply changed values), but will still report `false` for <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span></span> <span data-ttu-id="2deaf-377">Dies ist, da Eigenschaften entsprechen, die auf eine <xref:System.Windows.FrameworkPropertyMetadataOptions> Werte meldet Parität mit der tatsächlichen der Metadaten Einrichtung anstatt reporting immer das Verhalten der End-Ergebnis, das die Benennung der Eigenschaft impliziert.</span><span class="sxs-lookup"><span data-stu-id="2deaf-377">This is because properties that correspond to a <xref:System.Windows.FrameworkPropertyMetadataOptions> values will report parity with how the metadata was actually established, rather than always reporting the end result behavior that the naming of the property might imply.</span></span> <span data-ttu-id="2deaf-378">Sie sollten in der Regel überprüfen, um zu bestimmen, ob eine angegebene Abhängigkeitseigenschaft Datenbindung zulässt, <xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> stattdessen.</span><span class="sxs-lookup"><span data-stu-id="2deaf-378">To determine whether a given dependency property permits data binding, you should usually check <xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> instead.</span></span> <span data-ttu-id="2deaf-379"><xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> ist eine Annehmlichkeit beide zur Überprüfung der <xref:System.Windows.DependencyProperty.ReadOnly%2A> und <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A> als einzelner Vorgang, und gibt das erwartete Ergebnis.</span><span class="sxs-lookup"><span data-stu-id="2deaf-379"><xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> is a convenience for checking both <xref:System.Windows.DependencyProperty.ReadOnly%2A> and <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A> as a single operation, yielding the expected result.</span></span>  
  
 <span data-ttu-id="2deaf-380">Eigenschaften für abgeleitete Klassen von <xref:System.Windows.PropertyMetadata> werden in der Regel im Objektmodell mit Lese-/ Schreibzugriff definiert.</span><span class="sxs-lookup"><span data-stu-id="2deaf-380">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="2deaf-381">Dies ist, dass sie nach der Initialisierung der Instanz angepasst werden können.</span><span class="sxs-lookup"><span data-stu-id="2deaf-381">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="2deaf-382">Jedoch, nachdem die Metadaten als Teil eines Aufrufs von genutzt werden <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, das Eigenschaftensystem diese Metadateninstanz und Eigenschaften, die die Merkmale der Metadaten enthalten nun als unveränderlich angesehen werden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-382">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="2deaf-383">Beim Festlegen dieser Eigenschaft nach <xref:System.Windows.PropertyMetadata.IsSealed%2A> ist `true` auf diesen Metadaten Instanz wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="2deaf-383">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_IsNotDataBindable"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="2deaf-384">Verwendung von XAML-Text</span><span class="sxs-lookup"><span data-stu-id="2deaf-384">XAML Text Usage</span></span>  
 <span data-ttu-id="2deaf-385">Member dieser Klasse werden üblicherweise nicht in verwendet [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="2deaf-385">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2deaf-386">Die Metadaten wurden bereits auf einen Vorgang der Abhängigkeitseigenschaft angewendet, sodass Metadaten versiegelt sind und keine Eigenschaften für Metadaten festgelegt werden können.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-386">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="P:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed" />
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="Journal">
      <MemberSignature Language="C#" Value="public bool Journal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Journal" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.Journal" />
      <MemberSignature Language="VB.NET" Value="Public Property Journal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Journal { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2deaf-387">Ruft einen Wert ab oder legt ihn fest, der angibt, ob diese Eigenschaft Journalinginformationen enthält, die von Anwendungen im Rahmen einer Journalingimplementierung gespeichert werden können oder sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-387">Gets or sets a value that indicates whether this property contains journaling information that applications can or should store as part of a journaling implementation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2deaf-388">
            <see langword="true" />, wenn das Journaling für die Abhängigkeitseigenschaft ausgeführt werden soll, auf die diese Metadaten angewendet werden, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-388">
              <see langword="true" /> if journaling should be performed on the dependency property that this metadata is applied to; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="2deaf-389">Der Standardwert ist <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-389">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2deaf-390">Eigenschaften für abgeleitete Klassen von <xref:System.Windows.PropertyMetadata> werden in der Regel im Objektmodell mit Lese-/ Schreibzugriff definiert.</span><span class="sxs-lookup"><span data-stu-id="2deaf-390">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="2deaf-391">Dies ist, dass sie nach der Initialisierung der Instanz angepasst werden können.</span><span class="sxs-lookup"><span data-stu-id="2deaf-391">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="2deaf-392">Jedoch, nachdem die Metadaten als Teil eines Aufrufs von genutzt werden <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, das Eigenschaftensystem diese Metadateninstanz und Eigenschaften, die die Merkmale der Metadaten enthalten nun als unveränderlich angesehen werden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-392">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="2deaf-393">Beim Festlegen dieser Eigenschaft nach <xref:System.Windows.PropertyMetadata.IsSealed%2A> ist `true` auf diesen Metadaten Instanz wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="2deaf-393">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_Journal"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="2deaf-394">Verwendung von XAML-Text</span><span class="sxs-lookup"><span data-stu-id="2deaf-394">XAML Text Usage</span></span>  
 <span data-ttu-id="2deaf-395">Member dieser Klasse werden üblicherweise nicht in verwendet [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="2deaf-395">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2deaf-396">Die Metadaten wurden bereits auf einen Vorgang der Abhängigkeitseigenschaft angewendet, sodass Metadaten versiegelt sind und keine Eigenschaften für Metadaten festgelegt werden können.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-396">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
        <altmember cref="T:System.Windows.Navigation.JournalEntry" />
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="protected override void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Merge(class System.Windows.PropertyMetadata baseMetadata, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Merge (baseMetadata As PropertyMetadata, dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Merge(System::Windows::PropertyMetadata ^ baseMetadata, System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="baseMetadata">
          <span data-ttu-id="2deaf-397">Die für das Zusammenführen zu verwendenden Basismetadaten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-397">The base metadata to merge.</span>
          </span>
        </param>
        <param name="dp">
          <span data-ttu-id="2deaf-398">Die Abhängigkeitseigenschaft, auf die diese Metadaten angewendet werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-398">The dependency property this metadata is being applied to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2deaf-399">Ermöglicht einen Merge der Quellmetadaten mit den Basismetadaten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-399">Enables a merge of the source metadata with base metadata.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2deaf-400">Diese Methode wird intern verwendet, wenn Metadaten überschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-400">This method is used internally when metadata is being overridden.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="2deaf-401">Abgeleitete Klassen <see cref="T:System.Windows.PropertyMetadata" /> (oder sich die Klasse besonders) sollten überschreiben diese Methode, um alle Metadateneigenschaften berücksichtigen sie in ihren Implementierungen hinzugefügt haben.</span>
            <span class="sxs-lookup">
              <span data-stu-id="2deaf-401">Classes that derive from <see cref="T:System.Windows.PropertyMetadata" /> (or this class particularly) should override this method to account for any metadata properties they have added in their implementations.</span>
            </span>
            <span data-ttu-id="2deaf-402">Z. B. die Implementierung möglicherweise hinzugefügt einen neues Flag-Enumerationswert, und die <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> Implementierung sollte dann in der Lage, diese Flags ordnungsgemäß zu kombinieren.</span>
            <span class="sxs-lookup">
              <span data-stu-id="2deaf-402">For instance, your implementation might have added a new flagwise enumeration value, and the <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implementation should then be able to combine those flags correctly.</span>
            </span>
            <span data-ttu-id="2deaf-403">Rufen Sie immer die grundlegende Implementierung vor Ihrer eigenen Implementierung auf, da die grundlegende Implementierung übernimmt Zusammenführen aller Eigenschaften, die bereits bei vorherigen Typen in der Hierarchie definiert.</span>
            <span class="sxs-lookup">
              <span data-stu-id="2deaf-403">Always call the base implementation prior to your own implementation, because the base implementation takes care of merging all the properties already defined on previous types in the hierarchy.</span>
            </span>
            <span data-ttu-id="2deaf-404">Das Verhalten hinzugefügt, indem die <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> Implementierung in <see cref="T:System.Windows.FrameworkPropertyMetadata" /> ist, die bestimmte Eigenschaften von WPF-Frameworkebene in den Metadaten, wie z. B. <see cref="P:System.Windows.FrameworkPropertyMetadata.AffectsRender" /> sind in einer bitweisen Kombination bzw. den Vorgang.</span>
            <span class="sxs-lookup">
              <span data-stu-id="2deaf-404">The behavior added by the <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implementation in <see cref="T:System.Windows.FrameworkPropertyMetadata" /> is that specific WPF framework-level properties in the metadata such as <see cref="P:System.Windows.FrameworkPropertyMetadata.AffectsRender" /> are combined in a bitwise or operation.</span>
            </span>
            <span data-ttu-id="2deaf-405">Die <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> Verhalten implementiert auch das Verhalten beim Überschreiben in einer vorhandenen Abhängigkeitseigenschaft der Metadaten durch Aufrufen von <see cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />., Außerkraftsetzung Metadaten, die mit <see cref="T:System.Windows.FrameworkPropertyMetadata" />.</span>
            <span class="sxs-lookup">
              <span data-stu-id="2deaf-405">The <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> behavior also implements the behavior when you override the property metadata on an existing dependency property by calling <see cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />., using override metadata that is <see cref="T:System.Windows.FrameworkPropertyMetadata" />.</span>
            </span>
          </para>
        </block>
        <altmember cref="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.PropertyMetadata.IsSealed" />
        <altmember cref="M:System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="OnApply">
      <MemberSignature Language="C#" Value="protected override void OnApply (System.Windows.DependencyProperty dp, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnApply(class System.Windows.DependencyProperty dp, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnApply (dp As DependencyProperty, targetType As Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnApply(System::Windows::DependencyProperty ^ dp, Type ^ targetType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="2deaf-406">Die Abhängigkeitseigenschaft, auf die die Metadaten angewendet wurden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-406">The dependency property to which the metadata has been applied.</span>
          </span>
        </param>
        <param name="targetType">
          <span data-ttu-id="2deaf-407">Der diesen Metadaten zugeordnete Typ, wenn es sich um typspezifische Metadaten handelt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-407">The type associated with this metadata if this is type-specific metadata.</span>
          </span>
          <span data-ttu-id="2deaf-408">Wenn es sich um Standardmetadaten handelt, kann dieser Wert <see langword="null" /> sein.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-408">If this is default metadata, this value can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2deaf-409">Wird aufgerufen, wenn diese Metadaten auf eine Eigenschaft angewendet wurden. Dies gibt an, dass die Metadaten versiegelt wurden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-409">Called when this metadata has been applied to a property, which indicates that the metadata is being sealed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2deaf-410">Jede Veränderlichkeit der Datenstruktur einer <xref:System.Windows.FrameworkPropertyMetadata> Instanz sollte als unveränderlich gekennzeichnet, wenn diese Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="2deaf-410">Any mutability of the data structure of a <xref:System.Windows.FrameworkPropertyMetadata> instance should be marked as immutable when this method is invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="2deaf-411">Die <see cref="T:System.Windows.FrameworkPropertyMetadata" /> Implementierung dieser Methode bewirkt nichts über die basisimplementierung aufrufen.</span>
            <span class="sxs-lookup">
              <span data-stu-id="2deaf-411">The <see cref="T:System.Windows.FrameworkPropertyMetadata" /> implementation of this method does nothing beyond calling the base implementation.</span>
            </span>
          </para>
        </block>
        <altmember cref="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
        <altmember cref="P:System.Windows.PropertyMetadata.IsSealed" />
        <altmember cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="OverridesInheritanceBehavior">
      <MemberSignature Language="C#" Value="public bool OverridesInheritanceBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OverridesInheritanceBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property OverridesInheritanceBehavior As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OverridesInheritanceBehavior { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2deaf-412">Ruft einen Wert ab, der angibt, ob die Auswertung der Vererbung von Eigenschaftenwerten über bestimmte Inhaltsgrenzen in der logischen Struktur der Elemente hinweg ausgeführt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-412">Gets or sets a value that indicates whether the property value inheritance evaluation should span across certain content boundaries in the logical tree of elements.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2deaf-413">
            <see langword="true" />, wenn die Vererbung von Eigenschaftswerten über bestimmte Inhaltsgrenzen hinweg erfolgen soll, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-413">
              <see langword="true" /> if the property value inheritance should span across certain content boundaries; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="2deaf-414">Der Standardwert ist <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-414">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2deaf-415">Diese Metadaten meldet eine selten angewendete Änderung Eigenschaft Wert Vererbungsverhalten hinweg besonderes übergeordnetes untergeordnete Element.</span><span class="sxs-lookup"><span data-stu-id="2deaf-415">This metadata reports a seldom-applied modification to property value inheritance behavior across special parent element-child element boundaries.</span></span> <span data-ttu-id="2deaf-416">Das kanonische Beispiel einer solchen Grenze ist der Inhalt der eine <xref:System.Windows.Controls.Frame>, wobei die <xref:System.Windows.Controls.Frame> Inhalt erneut geladen werden kann unabhängig von das Vorhandensein der <xref:System.Windows.Controls.Frame>.</span><span class="sxs-lookup"><span data-stu-id="2deaf-416">The canonical example of such a boundary is the contents of a <xref:System.Windows.Controls.Frame>, where the <xref:System.Windows.Controls.Frame> content might get reloaded independently of the existence of the <xref:System.Windows.Controls.Frame>.</span></span> <span data-ttu-id="2deaf-417">Das Systemverhalten für die gewünschte Eigenschaft ist, dass die Vererbung von Eigenschaftenwerten nicht in den Inhalten von durchlaufen soll die <xref:System.Windows.Controls.Frame>, da diese Inhalte Elemente, die die Anwendung sein können, die den Frame hostet, nicht besitzen oder steuern.</span><span class="sxs-lookup"><span data-stu-id="2deaf-417">The desired property system behavior is that property value inheritance should not traverse into the contents of the <xref:System.Windows.Controls.Frame>, because these contents might be elements that the application hosting the frame does not own or control.</span></span> <span data-ttu-id="2deaf-418">Angeben von Metadaten mit <xref:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior%2A> festgelegt `true`, sowie das angeben <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> als `true`, führt dazu, dass die Eigenschaft auf die die Metadaten angewendet wird, um geerbt werden, auch über die <xref:System.Windows.Controls.Frame> -Grenze oder ähnliche Grenzen.</span><span class="sxs-lookup"><span data-stu-id="2deaf-418">Specifying metadata with <xref:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior%2A> set to `true`, as well as specifying <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> as `true`, will cause the property on which the metadata is applied to be inheritable even across the <xref:System.Windows.Controls.Frame> boundary or similar boundaries.</span></span>  
  
 <span data-ttu-id="2deaf-419">Eigenschaften für abgeleitete Klassen von <xref:System.Windows.PropertyMetadata> werden in der Regel im Objektmodell mit Lese-/ Schreibzugriff definiert.</span><span class="sxs-lookup"><span data-stu-id="2deaf-419">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="2deaf-420">Dies ist, dass sie nach der Initialisierung der Instanz angepasst werden können.</span><span class="sxs-lookup"><span data-stu-id="2deaf-420">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="2deaf-421">Jedoch, nachdem die Metadaten als Teil eines Aufrufs von genutzt werden <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, das Eigenschaftensystem diese Metadateninstanz und Eigenschaften, die die Merkmale der Metadaten enthalten nun als unveränderlich angesehen werden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-421">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="2deaf-422">Beim Festlegen dieser Eigenschaft nach <xref:System.Windows.PropertyMetadata.IsSealed%2A> ist `true` auf diesen Metadaten Instanz wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="2deaf-422">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_OverridesInheritanceBehavior"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="2deaf-423">Verwendung von XAML-Text</span><span class="sxs-lookup"><span data-stu-id="2deaf-423">XAML Text Usage</span></span>  
 <span data-ttu-id="2deaf-424">Member dieser Klasse werden üblicherweise nicht in verwendet [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="2deaf-424">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2deaf-425">Die Metadaten wurden bereits auf einen Vorgang der Abhängigkeitseigenschaft angewendet, sodass Metadaten versiegelt sind und keine Eigenschaften für Metadaten festgelegt werden können.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-425">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="SubPropertiesDoNotAffectRender">
      <MemberSignature Language="C#" Value="public bool SubPropertiesDoNotAffectRender { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SubPropertiesDoNotAffectRender" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender" />
      <MemberSignature Language="VB.NET" Value="Public Property SubPropertiesDoNotAffectRender As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SubPropertiesDoNotAffectRender { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2deaf-426">Dient zum Abrufen oder Festlegen eines Werts, der angibt, ob sich untergeordnete Eigenschaften der Abhängigkeitseigenschaft nicht auf das Rendern des enthaltenden Objekts auswirken.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-426">Gets or sets a value that indicates whether sub-properties of the dependency property do not affect the rendering of the containing object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2deaf-427">
            <see langword="true" />, wenn Änderungen an Werten von Untereigenschaften das Rendering nicht beeinflussen, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-427">
              <see langword="true" /> if changes to sub-property values do not affect rendering if changed; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="2deaf-428">Der Standardwert ist <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-428">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2deaf-429">Diese Metadatenoption ist relevant für Abhängigkeitseigenschaften, die Verweistypen sind, in denen der Typ Eigenschaftswerte selbst verfügt.</span><span class="sxs-lookup"><span data-stu-id="2deaf-429">This metadata option is pertinent for dependency properties that are reference types, where that type has property values of its own.</span></span> <span data-ttu-id="2deaf-430">In der Regel ist die Layoutlogik für das System davon ausgegangen, dass einer Abhängigkeitseigenschaft mit untergeordneten Eigenschaften potenziell wird auf das Layout auswirken, da alle untergeordneten Eigenschaften für Änderungen überprüfen zeitaufwändiger als die tatsächlich ausgeführten ist eine andere Renderings.</span><span class="sxs-lookup"><span data-stu-id="2deaf-430">Typically, the layout system logic is to assume that any dependency property with sub-properties potentially will affect layout, because checking all sub-properties for changes is more time consuming than actually running another render pass.</span></span> <span data-ttu-id="2deaf-431">Wenn diese Option auf `true` eignet sich zur Optimierung der Leistung der WPF-Framework Ebene Layout System-Implementierung.</span><span class="sxs-lookup"><span data-stu-id="2deaf-431">Setting this option to `true` is useful for optimizing performance of the WPF framework level layout system implementation.</span></span>  
  
 <span data-ttu-id="2deaf-432">Eigenschaften für abgeleitete Klassen von <xref:System.Windows.PropertyMetadata> werden in der Regel im Objektmodell mit Lese-/ Schreibzugriff definiert.</span><span class="sxs-lookup"><span data-stu-id="2deaf-432">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="2deaf-433">Dies ist, dass sie nach der Initialisierung der Instanz angepasst werden können.</span><span class="sxs-lookup"><span data-stu-id="2deaf-433">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="2deaf-434">Jedoch, nachdem die Metadaten im Rahmen eines Aufrufs von <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, oder <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, das Eigenschaftensystem diese Metadateninstanz und Eigenschaften, die die Merkmale der Metadaten enthalten nun als unveränderlich angesehen werden.</span><span class="sxs-lookup"><span data-stu-id="2deaf-434">However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="2deaf-435">Beim Festlegen dieser Eigenschaft nach <xref:System.Windows.PropertyMetadata.IsSealed%2A> ist `true` auf diesen Metadaten Instanz wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="2deaf-435">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_SubPropertiesDoNotAffectRender"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="2deaf-436">Verwendung von XAML-Text</span><span class="sxs-lookup"><span data-stu-id="2deaf-436">XAML Text Usage</span></span>  
 <span data-ttu-id="2deaf-437">Member dieser Klasse werden üblicherweise nicht in verwendet [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="2deaf-437">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2deaf-438">Die Metadaten wurden bereits auf einen Vorgang der Abhängigkeitseigenschaft angewendet, sodass Metadaten versiegelt sind und keine Eigenschaften für Metadaten festgelegt werden können.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2deaf-438">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Freezable" />
      </Docs>
    </Member>
  </Members>
</Type>
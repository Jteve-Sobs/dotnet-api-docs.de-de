<Type Name="ContentElement" FullName="System.Windows.ContentElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3ead77d5c5a1444bb78a389f6dd17f78c4fdbd08" />
    <Meta Name="ms.sourcegitcommit" Value="4b4804968da1dfdf71c501075a5b66957b54f2e8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/27/2018" />
    <Meta Name="ms.locfileid" Value="32038488" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ContentElement : System.Windows.DependencyObject, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ContentElement extends System.Windows.DependencyObject implements class System.Windows.IInputElement, class System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.ContentElement" />
  <TypeSignature Language="VB.NET" Value="Public Class ContentElement&#xA;Inherits DependencyObject&#xA;Implements IAnimatable, IInputElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class ContentElement : System::Windows::DependencyObject, System::Windows::IInputElement, System::Windows::Media::Animation::IAnimatable" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.IInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Media.Animation.IAnimatable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Stellt eine WPF-Hauptebenen-Basisklasse für Inhaltselemente bereit. Inhaltselemente sind auf die flüssige Präsentation ausgelegt, wobei ein intuitives, markuporientiertes Layoutmodell sowie ein vorsätzlich einfaches Objektmodell verwendet werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement> definiert die folgenden allgemeinen Inhaltseigenschaften:  
  
-   Eingabe: Alle <xref:System.Windows.ContentElement> abgeleitete Klassen bieten Unterstützung für grundlegende Erfassung von Tastatur, Maus, Drag & Drop-Vorgänge, Steuerelemente und Zugriffstasten Eingaben.  
  
-   Fokus: Alle <xref:System.Windows.ContentElement> abgeleitete Klassen sind möglicherweise den Fokus erhalten kann. (Allerdings den Fokus erhalten kann Standardstatus für das <xref:System.Windows.ContentElement> Basisklasse ist `false`. Weitere Informationen zum Erstellen einer <xref:System.Windows.ContentElement> den Fokus erhalten kann, finden Sie unter <xref:System.Windows.ContentElement.Focusable%2A>.) Darüber hinaus diese Klasse enthält [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] , dass Sie zum Verschieben des Fokus auf zugehörige Elemente verwenden können.  
  
-   Ereignisse: <xref:System.Windows.ContentElement> enthält Ereignisse im Zusammenhang mit der Eingabe und den Fokus; es enthält auch Ereignisse für Änderungen im Status. In vielen Fällen die <xref:System.Windows.ContentElement> weitergeleitete Ereignisse können. In einigen Fällen weisen die Routingereignisse tunneling und bubbling routing Strategien, die als Reaktion auf das Bundesland oder der Bedingung separate Ereignisse ausgelöst. Darüber hinaus <xref:System.Windows.ContentElement> definiert [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] auslösen können weitergeleitet werden, Ereignisse und, hinzufügen oder Entfernen von Ereignissen Handler.  
  
 <xref:System.Windows.ContentElement> weist viele derselben [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] mit <xref:System.Windows.UIElement>. Diese allgemeine [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] nicht von einer freigegebenen klassenvererbung stammen. Jedoch sie allgemeine Benennung, ähnliches Verhalten und ähnliche interne Implementierung der [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] in jeder Klasse. Die Ähnlichkeit ist, da <xref:System.Windows.ContentElement> und <xref:System.Windows.UIElement> Klassen sind, die ein Element Basisentität sind zwar jeweils unterschiedliche Absichten für das Verhalten der Markup-Objektmodells.  
  
 Insbesondere <xref:System.Windows.UIElement> absteigend von <xref:System.Windows.Media.Visual>, stellt die Grafiken auf niedrigerer Ebene zu unterstützen, für das Rendering einer <xref:System.Windows.ContentElement> um einen rechteckigen Bereich innerhalb eines zusammengesetzten Fensters während <xref:System.Windows.ContentElement> Rendering verzögert, damit weitere Konzepte Dokument-Szenarien, z. B. Fluss- und umbrechen gemeinsam sind leichter unterstützt. Diese beiden bezogene Klassen implementieren auch die gemeinsamen Schnittstellen <xref:System.Windows.IInputElement> und <xref:System.Windows.Media.Animation.IAnimatable>.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Die <see cref="T:System.Windows.ContentElement" /> Klasse definiert keine noch alle Aspekte der vollständigen Inhaltselements für Präsentation. <see cref="T:System.Windows.FrameworkContentElement" /> ist eine unmittelbar abgeleitete Klasse von <see cref="T:System.Windows.ContentElement" />. <see cref="T:System.Windows.FrameworkContentElement" /> enthält eine vollständige Reihe weiterer Member, die Renderingerweiterungen unterstützen ein <see cref="T:System.Windows.FrameworkContentElement" /> innerhalb einer Inhaltshost und die WPF-Frameworkebene Layoutsystem verwenden.</para>
    </block>
    <altmember cref="T:System.Windows.UIElement" />
    <altmember cref="T:System.Windows.FrameworkContentElement" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContentElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContentElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.ContentElement" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Fügt einen Routingereignishandler für ein bestimmtes Routingereignis hinzu, wobei der Handler der Handlerauflistung für das aktuelle Element hinzugefügt wird.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Ein Bezeichner für das zu behandelnde Routingereignis.</param>
        <param name="handler">Ein Verweis auf die Handlerimplementierung.</param>
        <summary>Fügt einen Routingereignishandler für ein bestimmtes Routingereignis hinzu, wobei der Handler der Handlerauflistung für das aktuelle Element hinzugefügt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können den gleichen Handler für das gleiche Ereignis mehrmals hinzufügen, ohne eine Ausnahme auszulösen. Der Handler wird jedoch tatsächlich mehrmals aufgerufen, wenn das Ereignis behandelt wird. Deshalb erwägen Sie, wie dieses Verhalten Nebeneffekte haben kann, die in Ihrem Handlerimplementierung berücksichtigt werden sollten.  
  
 Mithilfe dieser Methode die Implementierung der "hinzufügen"-Accessor für die [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] Ereignis Zugriffsmuster eines benutzerdefinierten Routingereignisses.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Ein Bezeichner für das zu behandelnde Routingereignis.</param>
        <param name="handler">Ein Verweis auf die Handlerimplementierung.</param>
        <param name="handledEventsToo">
          <see langword="true" />, wenn der Handler registriert werden soll, sodass er selbst dann aufgerufen wird, wenn das Routingereignis in den zugehörigen Ereignisdaten als behandelt markiert ist; <see langword="false" />, wenn der Handler mit der Standardbedingung registriert werden soll, dass er nicht aufgerufen wird, wenn das Routingereignis bereits als behandelt markiert ist.  
  
 Der Standardwert ist <see langword="false" />.  
  
 Legen Sie die Anforderung zum erneuten Behandeln eines Routingereignisses nicht gewohnheitsmäßig fest.</param>
        <summary>Fügt einen Routingereignishandler für ein bestimmtes Routingereignis hinzu, wobei der Handler der Handlerauflistung für das aktuelle Element hinzugefügt wird. Legen Sie <paramref name="handledEventsToo" /> auf <see langword="true" /> fest, damit der bereitgestellte Handler für ein Routingereignis aufgerufen wird, das bereits von einem anderen Element auf der Ereignisroute als behandelt markiert wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Verarbeitung von Eingabeereignissen auf niedriger Ebene in eine praktische Möglichkeit ist eine komplexe Aufgabe. Viele Steuerelemente implementieren Verhalten, in dem ein bestimmtes Ereignis als behandelt markiert ist, und wird durch ein anderes intuitiver Ereignis ersetzt. Im Allgemeinen wird ein Steuerelement nur ein Eingabeereignis Plattform als behandelt markiert Wenn einige Entwurf Absicht dafür vorhanden ist. In bestimmten Szenarien möglicherweise diesen Entwurf Absichten nicht was Ihre bestimmten Verarbeitung des Eingabeereignisses erforderlich ist. Es ist für die folgenden Szenarien, registrieren Handler mit `handledEventsToo` als `true` eignet. Aber Sie sollten Sie keine routinemäßig. Ereignishandler als Antwort auf alle Ereignisse aufrufen, selbst wenn behandelt wird ein eigene Anwendungsereignis Verarbeitungslogik erschweren. Wenn die Handlerlogik eine erhebliche ist möglicherweise eine Abnahme der Leistung angezeigt. Sie sollten die Verwendung der Handler für bereits verarbeitet Ereignisse für Situationen, in denen Sie bereits während des Entwicklungsprozesses ermittelt haben, die bestimmte Steuerelemente Ereignisse behandeln, die Sie weiterhin mit der Anwendungslogik behandeln möchten, Anfügen reservieren.  
  
 Ein weiteres Verfahren zum Vermeiden von der Klasse, die bestimmte Kombinationen von Ereignis-Control-Standardverhalten der Fehlerbehandlung ist die Verwendung des Ereignisses Preview Alternative. Z. B. wenn <xref:System.Windows.ContentElement.MouseLeftButtonDown> markiert wird durch die Klassenbehandlung, können Sie möglicherweise hinzuzufügenden Handler für <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> stattdessen.  
  
 Sie können den gleichen Handler für das gleiche Ereignis mehrmals hinzufügen, ohne eine Ausnahme auszulösen. Der Handler wird jedoch tatsächlich mehrmals aufgerufen, wenn das Ereignis behandelt wird. Deshalb erwägen Sie, wie dieses Verhalten Nebeneffekte haben kann, die in Ihrem Handlerimplementierung berücksichtigt werden sollten.  
  
 Mithilfe dieser Methode die Implementierung der "hinzufügen"-Accessor für die [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] Ereignis Zugriffsmuster eines benutzerdefinierten Routingereignisses.  
  
   
  
## Examples  
 Das folgende Beispiel implementiert einen Handler wird aufgerufen, auf die <xref:System.Windows.FrameworkElement.Initialized> Ereignis auf einer Seite, die an eines der benannten Elemente auf der Seite mithilfe einen definierten Handler anfügt `handledEventsToo` `true`. Dieser Handler wird aufgerufen werden, selbst wenn ein anderes Element entlang der Route, die gemeinsam genutzte Ereignisdaten als behandelt, die vor dem Erreichen der Behandlungselement in der Route gekennzeichnet.  
  
 [!code-csharp[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml.cs#addhandlerhandledtoo)]
 [!code-vb[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EventOvwSupport/visualbasic/page2.xaml.vb#addhandlerhandledtoo)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToEventRoute">
      <MemberSignature Language="C#" Value="public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToEventRoute(class System.Windows.EventRoute route, class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToEventRoute (route As EventRoute, e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToEventRoute(System::Windows::EventRoute ^ route, System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="System.Windows.EventRoute" />
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="route">Die Ereignisroute, der Handler hinzugefügt werden.</param>
        <param name="e">Die Ereignisdaten, mit denen die Handler hinzugefügt werden. Diese Methode verwendet die <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" />-Eigenschaft der Argumente, um die Handler zu erstellen.</param>
        <summary>Fügt der angegebenen <see cref="T:System.Windows.EventRoute" /> Handler für die aktuelle Auflistung von <see cref="T:System.Windows.ContentElement" />-Ereignishandlern hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Methode für Inhaltshostelemente (unabhängig davon, ob sie implementieren <xref:System.Windows.IContentHost>) um den Handler für den Inhaltshost untergeordnete Elemente an den Host hinzufügen <xref:System.Windows.EventRoute>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AllowDrop" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDrop { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab oder legt diesen fest, der anzeigt, ob dieses Element als Ziel eines Drag &amp; Drop-Vorgangs verwendet werden kann.</summary>
        <value>
          <see langword="true" />, wenn dieses Element als Ziel eines Drag &amp; Drop-Vorgangs verwendet werden kann, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Drag & Drop-Vorgänge sind nicht standardmäßig aktiviert und muss absichtlich aktiviert werden, indem <xref:System.Windows.ContentElement.AllowDrop%2A> auf `true`. Über diese Einstellung "Grundlegend" Drag-and-Drop-Verhalten basiert vollständig auf implementierungsspezifisch und ist nicht definiert, indem <xref:System.Windows.ContentElement> oder eine beliebige andere Basiselement-Klasse. Bestimmte Steuerelemente, z. B. <xref:System.Windows.Controls.RichTextBox>, verfügen über ein Standardverhalten, aber keine <xref:System.Windows.ContentElement> abgeleitete Klassen haben solches Verhalten. Weitere Informationen zu Drag & Drop, finden Sie unter [Drag- and -Drop Overview](~/docs/framework/wpf/advanced/drag-and-drop-overview.md).  
  
 <xref:System.Windows.FrameworkContentElement> überschreibt die Metadaten für diese Abhängigkeitseigenschaft in ihrer Implementierung. Insbesondere <xref:System.Windows.FrameworkContentElement> legt fest, dass diese Eigenschaft die Vererbung von Eigenschaftenwerten ermöglicht (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> ist `true` in Metadaten). Die Vererbung von Eigenschaftswerten in diesem Kontext bedeutet, dass, wenn kein anderer Wert für untergeordnete Elemente vorhanden sind <xref:System.Windows.ContentElement.AllowDrop%2A> über die lokalen Werte oder Formate den Wert des nächsten übergeordneten Elements mit diesem Wert zugewiesen (erneut aus, entweder in Stilen, standardmäßig zugewiesen Werte, oder einen lokalen Wert), und klicken Sie dann alle nicht zugewiesenen untergeordneten Elemente vom Eigenschaftensystem der Wert aus diesem übergeordneten Element zugewiesen wird. Dies bedeutet, dass Sie angeben können, ob Drop-Vorgänge im Stammelement zulassen, und klicken Sie dann weitergeben des Werts für alle <xref:System.Windows.FrameworkContentElement> untergeordnete Elemente, die nicht ausdrücklich einen Wert zugewiesen haben `false`.  
  
<a name="dependencyPropertyInfo_AllowDrop"></a>   
## <a name="dependency-property-information"></a>Informationen zur Abhängigkeitseigenschaft  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.AllowDropProperty>|  
|Metadaten-Eigenschaften festgelegt auf. `true`|Keiner|  
  
   
  
## Examples  
 Im folgenden Beispiel wird <xref:System.Windows.ContentElement.AllowDrop%2A> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].  
  
 [!code-xaml[ContentElementsSmorgasbord#AllowDrop](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#allowdrop)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDropProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowDropProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowDropProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AllowDropProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowDropProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowDropProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.ContentElement.AllowDrop" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ApplyAnimationClock">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wendet eine Animation auf eine angegebene Abhängigkeitseigenschaft für dieses Element an.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyAnimationClock (dp As DependencyProperty, clock As AnimationClock)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
      </Parameters>
      <Docs>
        <param name="dp">Der Bezeichner für die zu animierende Eigenschaft.</param>
        <param name="clock">Die Animationsuhr, die die Animation steuert und deklariert.</param>
        <summary>Wendet eine Animation auf eine angegebene Abhängigkeitseigenschaft für dieses Element an. Alle vorhandenen Animationen werden beendet und durch die neue Animation ersetzt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um eine Animation aus einer Eigenschaft zu entfernen, geben Sie den Bezeichner für diese Eigenschaft als `dp` , und geben Sie `clock` als `null`. Dadurch wird die Animation entfernt, und auf den Basiswert die animierte Eigenschaft festgelegt ist. Die ursprünglich zugeordnete Animationsuhr wird jedoch nicht beendet. Alle anderen dieser Uhr zugewiesenen Animationen werden weiterhin ausgeführt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">Die zu animierende Eigenschaft.</param>
        <param name="clock">Die Animationsuhr, die die Animation steuert und deklariert.</param>
        <param name="handoffBehavior">Ein Wert aus der Enumeration. Der Standardwert ist <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />, womit jede vorhandene Animation beendet und durch die neue Animation ersetzt wird.</param>
        <summary>Wendet eine Animation auf eine angegebene Abhängigkeitseigenschaft für dieses Element an, wobei angegeben werden kann, was geschieht, wenn die Eigenschaft bereits eine laufende Animation aufweist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um eine Animation aus einer Eigenschaft zu entfernen, geben Sie den Bezeichner für diese Eigenschaft als `dp` , und geben Sie `clock` als `null`. Dadurch wird die Animation entfernt, und auf den Basiswert die animierte Eigenschaft festgelegt ist. Die ursprünglich zugeordnete Animationsuhr wird jedoch nicht beendet. Alle anderen dieser Uhr zugewiesenen Animationen werden weiterhin ausgeführt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCaptured">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AreAnyTouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCaptured { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob mindestens ein Fingereingabegerät für dieses Element erfasst wird.</summary>
        <value>
          <see langword="true" />, wenn mindestens eine Fingereingabe für dieses Element erfasst wurde, andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.ContentElement.AreAnyTouchesCaptured" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCapturedWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCapturedWithin { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob mindestens ein Fingereingabegerät für dieses Element oder seine untergeordneten Elemente in der visuellen Struktur erfasst wird.</summary>
        <value>
          <see langword="true" />, wenn mindestens eine Fingereingabe für dieses Element oder seine untergeordneten Elemente in der visuellen Struktur erfasst wurde, andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedWithinProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.ContentElement.AreAnyTouchesCapturedWithin" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesDirectlyOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob mindestens ein Fingereingabegerät über diesem Element gedrückt wurde.</summary>
        <value>
          <see langword="true" />, wenn mindestens eine Fingereingabe auf diesem Element registriert wurde, andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesDirectlyOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.ContentElement.AreAnyTouchesDirectlyOver" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AreAnyTouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob mindestens ein Fingereingabegerät auf diesem Element oder seinen untergeordneten Elementen in der visuellen Struktur gedrückt wurde.</summary>
        <value>
          <see langword="true" />, wenn mindestens eine Fingereingabe auf diesem Element oder den untergeordneten Elementen in der visuellen Struktur erfasst wurde, andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AreAnyTouchesOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.ContentElement.AreAnyTouchesOver" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAnimation">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Startet eine Animation für eine angegebene animierte Eigenschaft dieses Elements.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginAnimation (dp As DependencyProperty, animation As AnimationTimeline)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
      </Parameters>
      <Docs>
        <param name="dp">Die zu animierende Eigenschaft, die als Bezeichner einer Abhängigkeitseigenschaft angegeben wird.</param>
        <param name="animation">Die Zeitachse der zu startenden Animation.</param>
        <summary>Startet eine Animation für eine angegebene animierte Eigenschaft dieses Elements.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie überprüfen, ob eine Eigenschaft animiert wird, beachten Sie, dass die Animation wird gestartet, und berücksichtigt werden animiert wird, wenn der erste Frame hinter nicht animiert Ausgangspunkt gerendert wird.  
  
 Wenn die <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> für `animation` ist `null`, klicken Sie dann alle aktuellen Animationen entfernt, und der aktuelle Wert der Eigenschaft aufrechterhalten wird.  
  
 Wenn die gesamte `animation` Wert `null`, werden alle Animationen aus der Eigenschaft entfernt, und der Eigenschaftswert wird auf den Basiswert zurückgesetzt. Die ursprünglich zugeordnete Animationszeitachse wird jedoch nicht beendet. Alle anderen dieser Zeitachse zugewiesenen Animationen werden weiterhin ausgeführt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">Die zu animierende Eigenschaft, die als Bezeichner einer Abhängigkeitseigenschaft angegeben wird.</param>
        <param name="animation">Die Zeitachse der anzuwendenden Animation.</param>
        <param name="handoffBehavior">Ein Wert der Enumeration, der angibt, wie die neue Animation mit aktuellen (ausgeführten) Animationen interagieren soll, die sich bereits auf den Eigenschaftswert auswirken.</param>
        <summary>Startet eine spezifische Animation für eine bestimmte animierte Eigenschaft dieses Elements, wobei angegeben werden kann, welches Verhalten gelten soll, wenn die Eigenschaft bereits über eine ausgeführte Animation verfügt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie überprüfen, ob eine Eigenschaft animiert wird, beachten Sie, dass die Animation wird gestartet, und berücksichtigt werden animiert wird, wenn der erste Frame hinter nicht animiert Ausgangspunkt gerendert wird.  
  
 Wenn die <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> für `animation` ist `null`, klicken Sie dann alle aktuellen Animationen entfernt, und der aktuelle Wert der Eigenschaft aufrechterhalten wird.  
  
 Wenn die gesamte `animation` Wert `null`, werden alle Animationen aus der Eigenschaft entfernt, und der Eigenschaftswert wird auf den Basiswert zurückgesetzt. Die ursprünglich zugeordnete Animationszeitachse wird jedoch nicht beendet. Alle anderen dieser Zeitachse zugewiesenen Animationen werden weiterhin ausgeführt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureMouse">
      <MemberSignature Language="C#" Value="public bool CaptureMouse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureMouse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.CaptureMouse" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureMouse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureMouse();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureMouse</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Versucht, die Mausaufzeichnung für dieses Element zu erzwingen.</summary>
        <returns>
          <see langword="true" />, wenn die Maus erfolgreich aufgezeichnet wird, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um erfasst werden, muss ein Element aktiviert sein. Überprüfen Sie, ob <xref:System.Windows.ContentElement.IsEnabled%2A> ist `true` vor dem Aufruf <xref:System.Windows.ContentElement.CaptureMouse%2A>.  
  
 Wenn der Aufruf <xref:System.Windows.ContentElement.CaptureMouse%2A> gibt `true`, klicken Sie dann <xref:System.Windows.ContentElement.IsMouseCaptured%2A> ist auch `true`.  
  
 Beim Aufrufen <xref:System.Windows.ContentElement.CaptureMouse%2A> gibt `true`, die <xref:System.Windows.ContentElement.GotMouseCapture> und <xref:System.Windows.ContentElement.IsMouseCapturedChanged> Ereignisse ausgelöst werden, mit <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType> Daten in den Ereignisdaten gemeldet haben, als das Element, in dem die <xref:System.Windows.ContentElement.CaptureMouse%2A> Methode wird aufgerufen. Wenn Sie die Aufzeichnung erzwingen, können Sie vorhandene Erfassungen beeinträchtigen, insbesondere bei Erfassungen, die mit Drag & Drop mit der Maus in Zusammenhang stehen.  
  
 Rufen Sie zum Löschen von Mauseingaben aufzufangen aus allen Elementen <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> mit der `element` -Parameter als `null`.  
  
   
  
## Examples  
 Im folgenden Beispiel erfasst die Maus oder frei Capture Grundlage, ob das Element bereits auf die Maus erfasst. Beachten Sie, dass in diesem Beispiel wird das Zielelement potenziellen Capture wandelt die <xref:System.Windows.IInputElement> Schnittstelle, und ist daher ersten Aufrufen der <xref:System.Windows.IInputElement.CaptureMouse%2A?displayProperty=nameWithType> Methode. Umwandeln in <xref:System.Windows.IInputElement> ist ein Verfahren, das ist nützlich, wenn Sie nicht sicher sind, ob das Element Capture sein sollen die Maus ist ein <xref:System.Windows.UIElement> oder ein <xref:System.Windows.ContentElement>. Schnittstellenumwandlung und die Schnittstellenmethode Aufruf wird dann der entsprechenden typspezifische CaptureMouse Implementierung intern ohne eine Testversion umgewandelt entweder <xref:System.Windows.UIElement> oder <xref:System.Windows.ContentElement>. Umwandlung auf die gleiche Weise funktioniert auch für andere Member, die <xref:System.Windows.IInputElement> definiert, z. B. häufig die Eingabe-bezogenen Ereignisse und die andere Eingabe bezogenen Methoden.  
  
 [!code-csharp[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#ismousecaptured)]
 [!code-vb[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#ismousecaptured)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="CaptureStylus">
      <MemberSignature Language="C#" Value="public bool CaptureStylus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureStylus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.CaptureStylus" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureStylus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureStylus();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureStylus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Versucht, die Tablettstiftaufzeichnung für dieses Element zu erzwingen.</summary>
        <returns>
          <see langword="true" />, wenn der Tablettstift erfolgreich aufgezeichnet wird, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gibt die standardmäßige Implementierung basierend auf dem zugrunde liegenden Tablettstift Standardgerät immer `true`. Wenn Sie die Eingabe Geräte, die die Geräte-Implementierung für der Eingabesystem bereitstellen erweitern, ist es jedoch möglich, ein System mit einer Implementierung der alternativen Tablettstift-Gerät zu erstellen, die möglicherweise andere Ergebnisse zurückgeben.  
  
 Wenn ein Element die Stiftauswahl erhält, erhält sie Stifteingabe, selbst wenn der Tablettstift außerhalb seiner Grenzen befindet. Der Tablettstift wird in der Regel nur während der Drag-and-Drop-Vorgänge erfasst.  
  
 Beim Aufrufen dieser Methode ruft eine zugrunde liegende statische <xref:System.Windows.Input.Stylus> Methode <xref:System.Windows.Input.Stylus.Capture%2A>. Die tatsächlich verwendeten Verhalten wird von der aktiven Implementierung des Tablettstiftgeräts implementiert.  
  
 Um erfasst werden, muss ein Element aktiviert sein. Überprüfen Sie, ob <xref:System.Windows.ContentElement.IsEnabled%2A> ist `true` vor dem Aufruf zurückgegeben <xref:System.Windows.ContentElement.CaptureStylus%2A>.  
  
 Wenn der Aufruf <xref:System.Windows.ContentElement.CaptureStylus%2A> gibt `true`, <xref:System.Windows.ContentElement.IsStylusCaptured%2A> ist auch `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureTouch">
      <MemberSignature Language="C#" Value="public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CaptureTouch(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CaptureTouch(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" />
      </Parameters>
      <Docs>
        <param name="touchDevice">Das zu erfassende Gerät.</param>
        <summary>Versucht, die Fingereingabe für dieses Element zu erzwingen.</summary>
        <returns>
          <see langword="true" />, wenn die angegebene Fingereingabe für dieses Element erfasst wird, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.CaptureTouch%2A> Gibt zurück, `false` Wenn die <xref:System.Windows.Input.TouchDevice> zurzeit zu einem anderen Element aufgezeichnet wird.  
  
 Wenn <xref:System.Windows.ContentElement.CaptureTouch%2A> gibt `true`, und klicken Sie dann die <xref:System.Windows.ContentElement.GotTouchCapture> Ereignis wird ausgelöst.  
  
 Um die Erfassung einer einzelnen Fingereingabe aus diesem Element freizugeben, verwenden die <xref:System.Windows.ContentElement.ReleaseTouchCapture%2A> Methode, und geben Sie die Touch-Geräte freigeben. Um alle Fingereingaben für dieses Element freizugeben, verwenden Sie die <xref:System.Windows.ContentElement.ReleaseAllTouchCaptures%2A> Methode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="touchDevice" /> ist <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="CommandBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.CommandBindingCollection CommandBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.CommandBindingCollection CommandBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.CommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandBindings As CommandBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::CommandBindingCollection ^ CommandBindings { System::Windows::Input::CommandBindingCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CommandBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Auflistung von <see cref="T:System.Windows.Input.CommandBinding" />-Objekten ab, die mit diesem Element verknüpft sind.</summary>
        <value>Die Auflistung aller <see cref="T:System.Windows.Input.CommandBinding" />-Objekte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Windows.Input.CommandBinding> ermöglicht die befehlsverarbeitung eines bestimmten Befehls für dieses Element ist, und deklarieren Sie die Verknüpfung zwischen einem Befehl, der Ereignisse und die Ereignishandler, die von diesem Element zugeordnet sind.  
  
 Eine weitere Möglichkeit zum Auffüllen der <xref:System.Windows.ContentElement.CommandBindings%2A> Auflistung ist die Verwendung <xref:System.Windows.Input.CommandManager> Methoden programmgesteuert.  
  
<a name="xamlPropertyElementUsage_CommandBindings"></a>   
## <a name="xaml-property-element-usage"></a>Verwendung von XAML-Eigenschaftenelementen  
  
```  
<object>  
  <object.CommandBindings>  
    oneOrMoreCommandBindings  </object.CommandBindings>  
</object>  
```  
  
<a name="xamlValues_CommandBindings"></a>   
## <a name="xaml-values"></a>XAML-Werte  
 *oneOrMoreCommandBindings*  
 Eine oder mehrere <xref:System.Windows.Input.CommandBinding> Elemente. Jede dieser müssen eine <xref:System.Windows.Input.CommandBinding.Command%2A> -Attribut auf einen bekannten Befehl festgelegt, und legen Sie die Attribute für die <xref:System.Windows.Input.CommandBinding.CanExecute> und <xref:System.Windows.Input.CommandBinding.Executed> Handlerimplementierungen. Weitere Informationen finden Sie unter <xref:System.Windows.Input.CommandBinding>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.DragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragEnter;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn das Eingabesystem ein zugrunde liegendes Drag-Ereignis mit diesem Element als Drag-Ziel meldet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.DragEnter?displayProperty=nameWithType> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.DragEnter> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
<a name="routedEventInfo_DragEnter"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.DragEnterEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Das entsprechende Tunneling-Ereignis ist <xref:System.Windows.ContentElement.PreviewDragEnter>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnDragEnter%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragLeave" />
        <altmember cref="E:System.Windows.ContentElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="DragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.DragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.DragEnter" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragLeave;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn das Eingabesystem ein zugrunde liegendes Drag-Ereignis mit diesem Element als Drag-Quelle meldet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.DragLeave?displayProperty=nameWithType> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.DragLeave> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
<a name="routedEventInfo_DragLeave"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.DragLeaveEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Das entsprechende Tunneling-Ereignis ist <xref:System.Windows.DragDrop.PreviewDragLeave>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnDragLeave%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragEnter" />
        <altmember cref="E:System.Windows.ContentElement.DragOver" />
        <altmember cref="E:System.Windows.ContentElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="DragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.DragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.DragLeave" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragOver;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn das Eingabesystem ein zugrunde liegendes Drag-Ereignis mit diesem Element als potenzielles Drop-Ziel meldet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis tritt auf, auch wenn das Ziehen der Elementgrenzen stammen. Wenn der Ziehvorgang gestartet wurde außerhalb des gültigen Bereichs und verschiebt dann, dieses Ereignis wird auch ausgelöst, als auch <xref:System.Windows.ContentElement.DragEnter> und Vorschauereignisse beziehen.  
  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.DragOver?displayProperty=nameWithType> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.DragOver> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
<a name="routedEventInfo_DragOver"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.DragOverEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Das entsprechende Tunneling-Ereignis ist <xref:System.Windows.DragDrop.PreviewDragOver>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnDragOver%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragEnter" />
        <altmember cref="E:System.Windows.ContentElement.DragLeave" />
        <altmember cref="E:System.Windows.ContentElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="DragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.DragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragOverEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.DragOver" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Drop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler Drop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler Drop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.Drop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Drop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ Drop;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn das Eingabesystem ein zugrunde liegendes Drop-Ereignis meldet, das dieses Element als Drop-Ziel aufweist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.Drop?displayProperty=nameWithType> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.Drop> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
<a name="routedEventInfo_Drop"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.DropEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Das entsprechende Tunneling-Ereignis ist <xref:System.Windows.ContentElement.PreviewDrop>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnDrop%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragOver" />
        <altmember cref="E:System.Windows.ContentElement.MouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="DropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.DropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DropEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.Drop" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public bool Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Function Focus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Focus();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.Focus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Versucht, den Fokus auf dieses Element festzulegen.</summary>
        <returns>
          <see langword="true" />, wenn der Tastaturfokus auf dieses Element festgelegt werden konnte, <see langword="false" />, wenn dieser Methodenaufruf keinen Fokus erzwungen hat.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um den Fokus erhalten kann, werden <xref:System.Windows.ContentElement.Focusable%2A> und <xref:System.Windows.ContentElement.IsEnabled%2A> müssen sowohl `true`. Beachten Sie, dass fast alle <xref:System.Windows.ContentElement> abgeleitete Klassen sind nicht <xref:System.Windows.ContentElement.Focusable%2A> standardmäßig.  
  
 Auch wenn ein Element den Fokus erhalten kann, und aktiviert ist, Ereignisbehandlung in einer bestimmten Struktur ist, (z. B. für ein zusammengesetztes Steuerelement) wird, dass es den Fokus auf die Vorschau Fokusereignisse reagieren möglicherweise, daher diese Methode würde zurück `false`.  
  
 Fokus wird im Allgemeinen durch zwei separaten Konzepten gesteuert: den Tastaturfokus und den logischen Fokus, die nicht immer identisch sind. Diese Methode setzt den logischen Fokus. Es ist keine programmgesteuerte Möglichkeit zum Festlegen des Tastaturfokus. über den Tastaturfokus wird durch die Benutzereingabe bestimmt. Weitere Informationen finden Sie unter [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md) und [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
 Wenn der Aufruf <xref:System.Windows.ContentElement.Focus%2A> gibt `true`, <xref:System.Windows.ContentElement.IsKeyboardFocused%2A> und <xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> sind auch `true`.  
  
 Wenn die verwandten Eigenschaften nicht bereits sind `true`, beim Aufrufen von <xref:System.Windows.ContentElement.Focus%2A>, eine oder mehrere der folgenden Ereignisse werden in der folgenden Reihenfolge ausgelöst: <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>, <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> (Quelle ist das neue Fokusziel), <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged>, <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged>, <xref:System.Windows.ContentElement.LostKeyboardFocus>, <xref:System.Windows.ContentElement.GotKeyboardFocus> (Quelle ist das neue Fokusziel).  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine Seite geladen Ereignishandler, der ein angegebenes findet, mit dem Namen Absatz des Dokuments und legt den Fokus zu. Absätze sind nicht standardmäßig den Fokus erhalten. Diese bestimmten Absatzes hatte einen Stil angewendet (nicht gezeigt), verwendet einen Stil <xref:System.Windows.Setter> zu erleichtern den Fokus erhalten kann.  
  
 [!code-csharp[ContentElementsSmorgasbord#Focus](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#focus)]
 [!code-vb[ContentElementsSmorgasbord#Focus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#focus)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="P:System.Windows.ContentElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="Focusable">
      <MemberSignature Language="C#" Value="public bool Focusable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focusable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.Focusable" />
      <MemberSignature Language="VB.NET" Value="Public Property Focusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Focusable { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.Focusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab bzw. legt einen Wert fest, der angibt, ob das Element den Fokus erhalten kann.</summary>
        <value>
          <see langword="true" />, wenn das Element den Fokus erhalten kann, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nur die Fokuselement empfängt Tastatureingaben.  
  
 Bestimmte abgeleiteten Klassen können Metadaten für diese Abhängigkeitseigenschaft außer Kraft gesetzt, sodass die abgeleitete Klasse den Fokus erhalten kann, in der Standardeinstellung ist.  
  
 Wenn von geerbt <xref:System.Windows.Documents.Hyperlink> oder seinen abgeleiteten Klassen <xref:System.Windows.Documents.Hyperlink> überschreibt die Metadaten für diese Abhängigkeitseigenschaft und den Standardwert dieser Eigenschaft werden definiert `true`.  
  
<a name="dependencyPropertyInfo_Focusable"></a>   
## <a name="dependency-property-information"></a>Informationen zur Abhängigkeitseigenschaft  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.FocusableProperty>|  
|Metadaten-Eigenschaften festgelegt auf. `true`|Keiner|  
  
   
  
## Examples  
 Im folgenden Beispiel wird einen Stil erstellt, eine <xref:System.Windows.Documents.Paragraph> den Fokus erhalten kann, in der Standardeinstellung und weist ihm ein visuelles Verhalten, wenn es den Fokus erhält.  
  
 [!code-xaml[ContentElementsSmorgasbord#Focusable](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#focusable)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Beim Ableiten von <see cref="T:System.Windows.ContentElement" />, überlegen Sie, ob das Element, den Fokus erhalten kann, da standardmäßig es den Fokus erhalten kann nicht verwendet werden soll. Wenn Sie das Element den Fokus erhalten kann sein soll, überschreiben Sie die Metadaten für diese Eigenschaft in den statischen Konstruktor der abgeleiteten Klasse wie folgt:  
  
 [!code-csharp[CorePseudocode#UIElementShortOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementshortoverride)]
 [!code-vb[CorePseudocode#UIElementShortOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementshortoverride)]  
  
 wobei <paramref name="myElement" /> ist der Klassenname des Typs, die Sie auf den Metadatenwert überschreiben.</para>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="FocusableChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler FocusableChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.FocusableChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FocusableChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ FocusableChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn sich der Wert der <see cref="P:System.Windows.ContentElement.Focusable" />-Eigenschaft ändert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Member ist ein [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] Ereignis, nicht für ein Routingereignis.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="FocusableProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusableProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusableProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.FocusableProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusableProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusableProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.ContentElement.Focusable" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnimationBaseValue">
      <MemberSignature Language="C#" Value="public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetAnimationBaseValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAnimationBaseValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetAnimationBaseValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.GetAnimationBaseValue(System.Windows.DependencyProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">Die zu überprüfende Abhängigkeitseigenschaft.</param>
        <summary>Gibt den Wert der Basiseigenschaft für die angegebene Eigenschaft dieses Elements zurück, wobei alle möglichen animierten Werte aus einer ausgeführten oder beendeten Animation nicht berücksichtigt werden.</summary>
        <returns>Der Eigenschaftswert, bei dem keine Animationen an die angegebene Abhängigkeitseigenschaft angefügt sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn keine Animationen an die Eigenschaft angefügt werden und dann die <xref:System.Windows.ContentElement.GetAnimationBaseValue%2A> Rückgabewert ist immer identisch mit der <xref:System.Windows.DependencyObject.GetValue%2A> Rückgabewert. Wenn Animationen angefügt sind, klicken Sie dann alle möglichen abgeleiteten Animationswerte einschließlich Anfangs- und Stop-Werte werden ignoriert und den Wert der Eigenschaft wird basierend auf alle möglichen Eingaben bestimmt. Weitere Informationen finden Sie unter [Priorität von Abhängigkeitseigenschaftswerten](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal virtual System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt beim Überschreiben in einer abgeleiteten Klasse ein alternatives übergeordnetes [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]-Element für dieses Element zurück, wenn kein visuelles übergeordnetes Element vorhanden ist.</summary>
        <returns>Ein Objekt, wenn die Implementierung einer abgeleiteten Klasse eine alternative übergeordnete Verbindung melden kann.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gibt die standardmäßige virtuelle Implementierung dieser Methode `null`. <xref:System.Windows.FrameworkContentElement> Stellt eine praktische Implementierung.  
  
 Alternative übergeordnete Elemente werden verwendet, für das Ereignisrouting in Fällen, in dem ein Element eine alternative übergeordnete Struktur erstellt so, dass die Ereignisse weitergeleitet werden, mit denen aus die Standardmuster Routing aufwärts in der visuellen Struktur mit dem standard übergeordneten-Dienstkontos, oder nach unten in der routing-Strategie in der Vorschau anzeigen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler GiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ GiveFeedback;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn das Eingabesystem ein zugrunde liegendes Drag &amp; Drop-Ereignis meldet, das dieses Element betrifft.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.ContentElement.GiveFeedback> -Ereignisses kann die Quelle des Drag-Ereignis, um die Darstellung des Mauszeigers zu ändern, um dem Benutzer während eines Drag & Drop-Vorgangs ein visuelles Feedback. Visuelle Feedback darauf hingewiesen, dass es sich bei ein Drag & Drop-Vorgang ausgeführt wird.  
  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.GiveFeedback> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.GiveFeedback> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
<a name="routedEventInfo_GiveFeedback"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.GiveFeedbackEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   Das entsprechende Tunneling-Ereignis ist <xref:System.Windows.ContentElement.PreviewGiveFeedback>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnGiveFeedback%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="GiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GiveFeedbackEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.GiveFeedback" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ GotFocus;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn dieses Element den logischen Fokus erhält.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der logische Fokus unterscheidet sich vom Tastaturfokus, wenn der Fokus absichtlich durch einen Methodenaufruf erzwungen wird, aber der vorherige Tastaturfokus in einem anderen Gültigkeitsbereich vorhanden ist. In diesem Fall über den Tastaturfokus bleibt, wo sie ist und das Element, in dem eine <xref:System.Windows.ContentElement.Focus%2A> Methode wird immer noch ruft der logische Fokus aufgerufen.  
  
 Eine genauere Interpretation dieses Ereignisses ist, dass die It ausgelöst wird, wenn der Wert des der <xref:System.Windows.ContentElement.IsFocused%2A> Eigenschaft eines Elements in der Route von geändert wird `false` auf `true`.  
  
 Da dieses Ereignis bubbling-routing verwendet, das Element, das Fokus erhält möglicherweise ein untergeordnetes Element anstatt des Elements, dem der Ereignishandler tatsächlich angefügt. Überprüfen Sie die <xref:System.Windows.RoutedEventArgs.Source%2A> in die Ereignisdaten an das aktuelle Element zu bestimmen, die Fokus erhalten hat.  
  
<a name="routedEventInfo_GotFocus"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.GotFocusEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|<xref:System.Windows.RoutedEventHandler>|  
  
-   Es ist keine entsprechende Tunneling-Ereignis.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnGotFocus%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotKeyboardFocus" />
        <altmember cref="M:System.Windows.ContentElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="GotFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.GotFocus" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ GotKeyboardFocus;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn sich der Fokus der Tastatur auf diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> ist ein ähnliches Ereignis, das ändert sich in einer Eigenschaft nachverfolgt, die nach einem Element des Fokuszustands verwaltet. die <xref:System.Windows.ContentElement.GotKeyboardFocus> Ereignis in vielen unter denselben Umständen ausgelöst wird.  
  
 Da dieses Ereignis bubbling-routing verwendet, das Element, das Fokus besitzt möglicherweise ein untergeordnetes Element anstatt des Elements, dem der Ereignishandler tatsächlich angefügt. Überprüfen Sie die <xref:System.Windows.RoutedEventArgs.Source%2A> in die Ereignisdaten an das aktuelle Element zu bestimmen, die Fokus besitzt.  
  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.GotKeyboardFocus> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.GotKeyboardFocus> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
<a name="routedEventInfo_GotKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.GotKeyboardFocusEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   Das entsprechende Tunneling-Ereignis ist <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnGotKeyboardFocus%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotKeyboardFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.GotKeyboardFocus" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler GotMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler GotMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ GotMouseCapture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn dieses Element die Mausauswahl erhält.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein Element die Maus erfasst hat, erhält sie Mauseingaben, selbst wenn der Mauszeiger sich außerhalb der Begrenzungen ist. Die Maus ist in der Regel nur während der Drag-and-Drop-Vorgänge erfasst und erfassten bleibt, bis die Drop-Aktion des Drag & Drop-Vorgangs ausgeführt wird.  
  
 Da dieses Ereignis bubbling-routing verwendet, das Element, das erfasst wird möglicherweise ein untergeordnetes Element anstatt des Elements, dem der Ereignishandler tatsächlich angefügt. Überprüfen Sie die <xref:System.Windows.RoutedEventArgs.Source%2A> im Ereignis erfassen von Daten an das aktuelle Element zu bestimmen, die Maus verfügt.  
  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.GotMouseCapture> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.GotMouseCapture> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
<a name="routedEventInfo_GotMouseCapture"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.GotMouseCaptureEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Es gibt keine definiertes entsprechendes Tunneling-Ereignis.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnGotMouseCapture%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="GotMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotMouseCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.GotMouseCapture" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler GotStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler GotStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ GotStylusCapture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn dieses Element die Stiftauswahl erhält.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein Element die Stiftauswahl erhält, erhält sie Stifteingabe, selbst wenn der Mauszeiger sich außerhalb der Begrenzungen befindet. Der Tablettstift in der Regel nur während der Drag-and-Drop-Vorgänge aufgezeichnet wird und behält die Aufzeichnung, bis die Drop-Aktion den Drag & Drop-Vorgang auftritt.  
  
 Da dieses Ereignis bubbling-routing verwendet, das Element, das erfasst wird möglicherweise ein untergeordnetes Element anstatt des Elements, dem der Ereignishandler tatsächlich angefügt. Überprüfen Sie die <xref:System.Windows.RoutedEventArgs.Source%2A> in die Ereignisdaten an das aktuelle Element zu bestimmen, die erfasst wird.  
  
 Dieses Ereignis erstellt einen Alias für das angefügte Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.GotStylusCapture> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.GotStylusCapture> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
<a name="routedEventInfo_GotStylusCapture"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.GotStylusCaptureEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Es gibt keine definiertes entsprechendes Tunneling-Ereignis.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnGotStylusCapture%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotStylusCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.GotStylusCapture" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; GotTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; GotTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ GotTouchCapture;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn eine Fingereingabe für dieses Element erfasst wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_GotTouchCapture"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.GotTouchCaptureEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|Eine <xref:System.EventHandler%601> vom Typ <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotTouchCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.GotTouchCapture" />-Routingereignis.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnimatedProperties">
      <MemberSignature Language="C#" Value="public bool HasAnimatedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAnimatedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.HasAnimatedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAnimatedProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAnimatedProperties { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Media.Animation.IAnimatable.HasAnimatedProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob dieses Element über animierte Eigenschaften verfügt.</summary>
        <value>
          <see langword="true" />, wenn Animationen an eine der Eigenschaften dieses Elements angefügt sind, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft gibt `true` für permanente (nicht getaktete, immer ausgeführte) Animationen oder für Animationen, die einen bestimmten Zeitplan aufweisen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputBindingCollection InputBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputBindingCollection InputBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.InputBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputBindings As InputBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputBindingCollection ^ InputBindings { System::Windows::Input::InputBindingCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Auflistung der Eingabebindungen ab, die diesem Element zugeordnet sind.</summary>
        <value>Die Auflistung der Eingabebindungen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eingabe Bindungen unterstützen die Bindung von Befehlen für die Eingabe von Geräten. Beispielsweise <xref:System.Windows.Input.MouseBinding> implementiert Eingabe Bindungen, die Eigenschaften enthalten, die für Mausgeräte spezifisch sind.  
  
 Die Auflistung der Eingabe Bindungen enthält sowohl Eingabe-Bindungen, die in den Typ zu beziehen, als auch Eingabe Bindungen, die auf der Instanz deklariert werden.  
  
 Eine verwandte Eigenschaft <xref:System.Windows.ContentElement.CommandBindings%2A>, verwaltet eine Auflistung von befehlsbindungen. Diese Bindungen unterscheiden sich von Eingabe Bindungen insofern, dass sie die nächste Ebene nach unten der befehlsverarbeitung - Aktionen darstellen, die auf bekannte Befehle und klassenspezifische Handler für diese gebunden sind.  
  
<a name="xamlPropertyElementUsage_InputBindings"></a>   
## <a name="xaml-property-element-usage"></a>Verwendung von XAML-Eigenschaftenelementen  
  
```  
<object>  
  <object.InputBindings>  
    oneOrMoreInputBindings  </object.InputBindings>  
</object>  
```  
  
<a name="xamlValues_InputBindings"></a>   
## <a name="xaml-values"></a>XAML-Werte  
 *oneOrMoreInputBindings*  
 Eine oder mehrere <xref:System.Windows.Input.InputBinding> Elemente (in der Regel die <xref:System.Windows.Input.KeyBinding> oder <xref:System.Windows.Input.MouseBinding> abgeleiteten Klassen). Jedes davon wird erwartet eine <xref:System.Windows.Input.InputBinding.Command%2A> und <xref:System.Windows.Input.InputBinding.Gesture%2A> -Attribut festgelegt ist.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob dieses Element in der [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] aktiviert ist, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn das Element aktiviert ist, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a>Informationen zur Abhängigkeitseigenschaft  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.IsEnabledProperty>|  
|Metadaten-Eigenschaften festgelegt auf. `true`|Keiner|  
  
   
  
## Examples  
 Das folgende Beispiel erstellt ein Format, das ein Eigenschaftensetter, die ein alternatives visuelles Verhalten bietet bei einer <xref:System.Windows.Documents.Hyperlink> festgelegt ist, um <xref:System.Windows.ContentElement.IsEnabled%2A> `false`.  
  
 [!code-xaml[ContentElementsSmorgasbord#IsEnabledIsMouseOver](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#isenabledismouseover)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsEnabledChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsEnabledChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsEnabledChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Wert der <see cref="P:System.Windows.ContentElement.IsEnabled" />-Eigenschaft für dieses Element geändert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Member ist ein [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] Ereignis, nicht für ein Routingereignis.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledCore">
      <MemberSignature Language="C#" Value="protected virtual bool IsEnabledCore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabledCore" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsEnabledCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IsEnabledCore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool IsEnabledCore { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der in abgeleiteten Klassen zum Rückgabewert von <see cref="P:System.Windows.ContentElement.IsEnabled" /> wird.</summary>
        <value>
          <see langword="true" />, wenn das Element aktiviert ist, andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Die standardmäßige Implementierung dieser Eigenschaft den Wert zwischengespeichert und berechnet, ob das übergeordnete Element dieses Elements aktiviert ist. (Wenn das übergeordnete Element nicht aktiviert ist, das untergeordnete Element kann nicht aktiviert werden, effektiv in praktische [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].) Wenn Sie diese Implementierung überschreiben, stellen Sie sicher, dass Sie die grundlegende Implementierung, um dieses Verhalten beizubehalten aufrufen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.ContentElement.IsEnabled" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFocused">
      <MemberSignature Language="C#" Value="public bool IsFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFocused { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der bestimmt, ob dieses Element den logischen Fokus hat.</summary>
        <value>
          <see langword="true" />, wenn dieses Element über den logischen Fokus verfügt, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der logische Fokus unterscheiden sich vom Tastaturfokus, wenn eine Anwendung mehrere Abteilungen für den Fokus, z. B. zwischen Menüinhalt und den Rest der Anwendung. In diesem Fall über den Tastaturfokus kann nur für ein Element der Benutzeroberfläche der Anwendung vorhanden sein, jedoch möglicherweise bestimmte Elemente in anderen Abteilungen Fokus weiterhin den logischen Fokus beibehalten. Weitere Informationen über den logischen Fokus finden Sie unter [Input Overview](~/docs/framework/wpf/advanced/input-overview.md) und [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).  
  
<a name="dependencyPropertyInfo_IsFocused"></a>   
## <a name="dependency-property-information"></a>Informationen zur Abhängigkeitseigenschaft  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.IsFocusedProperty>|  
|Metadaten-Eigenschaften festgelegt auf. `true`|Keiner|  
  
   
  
## Examples  
 Im folgenden Beispiel wird einen Stil erstellt, eine <xref:System.Windows.Documents.Paragraph> den Fokus erhalten kann, in der Standardeinstellung und weist ihm ein visuelles Verhalten, wenn es den Fokus erhält.  
  
 [!code-xaml[ContentElementsSmorgasbord#Focusable](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#focusable)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="IsFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsFocusedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.ContentElement.IsFocused" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInputMethodEnabled">
      <MemberSignature Language="C#" Value="public bool IsInputMethodEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInputMethodEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsInputMethodEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInputMethodEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInputMethodEnabled { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob ein Eingabemethodensystem (beispielsweise [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)]) für die Verarbeitung von Eingaben für dieses Element aktiviert ist.</summary>
        <value>
          <see langword="true" />, wenn eine Eingabemethode aktiv ist, andernfalls <see langword="false" />. Der Standardwert der zugrunde liegenden angefügten Eigenschaft ist <see langword="true" />, aber dieser Wert wird durch den Zustand der Eingabemethoden zur Laufzeit beeinflusst.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft gibt den Wert, der durch die angefügte Eigenschaft zurückgegeben wird <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType> für die derzeit aktivierten Eingabemethoden (Tastatur, Sprache und andere Eingabegeräte).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocused">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsKeyboardFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocused { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocused</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob dieses Element über den Tastaturfokus verfügt.</summary>
        <value>
          <see langword="true" />, wenn dieses Element über den Tastaturfokus verfügt, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsKeyboardFocused"></a>   
## <a name="dependency-property-information"></a>Informationen zur Abhängigkeitseigenschaft  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.IsKeyboardFocusedProperty>|  
|Metadaten-Eigenschaften festgelegt auf. `true`|Keiner|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotFocus" />
        <altmember cref="E:System.Windows.ContentElement.LostFocus" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsKeyboardFocusedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusedChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Wert der <see cref="P:System.Windows.ContentElement.IsKeyboardFocused" />-Eigenschaft für dieses Element geändert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Member ist ein [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] Ereignis, nicht für ein Routingereignis.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsKeyboardFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.ContentElement.IsKeyboardFocused" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithin">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocusWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocusWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsKeyboardFocusWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocusWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocusWithin { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocusWithin</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob sich der Tastaturfokus innerhalb des Elements oder seiner untergeordneten Elemente befindet.</summary>
        <value>
          <see langword="true" />, wenn sich der Tastaturfokus auf dem Element oder seinen untergeordneten Elementen befindet, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Änderungen des Werts dieser Eigenschaft in der Regel Auslösen der <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> Ereignis außer eine abgeleitete Klasse außer Kraft gesetzt wurde <xref:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged%2A> um das Ereignis zu unterdrücken.  
  
 Diese Eigenschaft wird nicht direkt festgelegt, aber Sie können den Fokus auf das Element festlegen, durch den Aufruf <xref:System.Windows.ContentElement.Focus%2A>, oder durch Treffen einer <xref:System.Windows.ContentElement.MoveFocus%2A> Anforderung. Beide Methoden rufen möglicherweise Wert dieser Eigenschaft geändert werden.  
  
<a name="dependencyPropertyInfo_IsKeyboardFocusWithin"></a>   
## <a name="dependency-property-information"></a>Informationen zur Abhängigkeitseigenschaft  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.IsKeyboardFocusWithinProperty>|  
|Metadaten-Eigenschaften festgelegt auf. `true`|Keiner|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusWithinChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Wert der <see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" />-Eigenschaft für dieses Element geändert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Member ist ein [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] Ereignis, nicht für ein Routingereignis.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.IsKeyboardFocusedChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusWithinProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.ContentElement.IsKeyboardFocusWithin" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptured">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsMouseCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptured { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Maus von diesem Element aufgezeichnet wird.</summary>
        <value>
          <see langword="true" />, wenn das Element Mauseingaben erfasst, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Maus Aufzeichnungsstatus bezieht sich auf prozessinternen Drag & Drop-Vorgänge.  
  
<a name="dependencyPropertyInfo_IsMouseCaptured"></a>   
## <a name="dependency-property-information"></a>Informationen zur Abhängigkeitseigenschaft  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.IsMouseCapturedProperty>|  
|Metadaten-Eigenschaften festgelegt auf. `true`|Keiner|  
  
   
  
## Examples  
 Im folgenden Beispiel wird den Zustand der Maus Erfassung ein- oder ausschalten, abhängig davon, ob das Element bereits auf die Maus erfasst.  
  
 [!code-csharp[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#ismousecaptured)]
 [!code-vb[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#ismousecaptured)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.CaptureMouse" />
        <altmember cref="E:System.Windows.ContentElement.GotMouseCapture" />
        <altmember cref="E:System.Windows.ContentElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsMouseCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCapturedChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Wert der <see cref="P:System.Windows.ContentElement.IsMouseCaptured" />-Eigenschaft für dieses Element geändert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Member ist ein [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] Ereignis, nicht für ein Routingereignis.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsMouseCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCapturedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.ContentElement.IsMouseCaptured" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsMouseCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptureWithin { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der bestimmt, ob die Mausaufzeichnung in diesem Element oder in untergeordneten Elementen in seiner Elementstruktur enthalten ist.</summary>
        <value>
          <see langword="true" />, wenn für dieses Element oder ein enthaltenes Element die Erfassung von Mauseingaben festgelegt ist, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsMouseCaptureWithin"></a>   
## <a name="dependency-property-information"></a>Informationen zur Abhängigkeitseigenschaft  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.IsMouseCaptureWithinProperty>|  
|Metadaten-Eigenschaften festgelegt auf. `true`|Keiner|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.IsMouseCaptured" />
        <altmember cref="M:System.Windows.ContentElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCaptureWithinChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Wert der <see cref="F:System.Windows.ContentElement.IsMouseCaptureWithinProperty" /> für dieses Element geändert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Member ist ein [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] Ereignis, nicht für ein Routingereignis.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsMouseCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCaptureWithinProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsMouseDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsMouseDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseDirectlyOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Position des Mauszeigers den Treffertestergebnissen entspricht, für die die Elementzusammensetzung berücksichtigt wird.</summary>
        <value>
          <see langword="true" /> Wenn der Mauszeiger über demselben Elementergebnis wie ein Treffertest befindet; andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im Gegensatz zu <xref:System.Windows.ContentElement.IsMouseOver%2A>, diese Eigenschaft ist nur `true` , wenn der Mauszeiger über dem literalen Element ist – wie für einen Treffertest. Wenn der Mauszeiger stattdessen über ein untergeordnetes Element ist, insbesondere über Elemente, die Teil eines Elements eine umfassendere Vorlage und Compositing, sind diese Eigenschaft werden `false`. Wenn Sie wissen, wie ein Steuerelement zusammengesetzte ist (z. B. Sie verwenden diese Eigenschaft in einer benutzerdefinierten Steuerelementvorlage für ein Steuerelement, das Sie definieren), diese Eigenschaft möglicherweise unerwartete Ergebnisse zurückgeben. Verwenden Sie für die meisten Szenarien, in denen Sie keine Steuerelemente erstellt werden, <xref:System.Windows.ContentElement.IsMouseOver%2A> stattdessen.  
  
 Wenn dieses Element die Maus erfasst und diese Eigenschaft ist `true` Zeitpunkt der Erfassung weiterhin diese Eigenschaft zurückgeben `true` bis Mauseingaben aufzufangen verloren gegangen ist und der Zeiger nicht über die Grenzen ist.  
  
<a name="dependencyPropertyInfo_IsMouseDirectlyOver"></a>   
## <a name="dependency-property-information"></a>Informationen zur Abhängigkeitseigenschaft  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.IsMouseDirectlyOverProperty>|  
|Metadaten-Eigenschaften festgelegt auf. `true`|Keiner|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseEnter" />
        <altmember cref="E:System.Windows.ContentElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsMouseDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseDirectlyOverChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Wert der <see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" />-Eigenschaft für dieses Element geändert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Member ist ein [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] Ereignis, nicht für ein Routingereignis.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsMouseDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseDirectlyOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseOver">
      <MemberSignature Language="C#" Value="public bool IsMouseOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsMouseOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob sich der Mauszeiger über diesem Element befindet (einschließlich visueller untergeordneter Elemente und der Elemente, aus denen sich ein Steuerelement zusammensetzt).</summary>
        <value>
          <see langword="true" />, wenn sich der Mauszeiger über dem Element oder seinen untergeordneten Elementen befindet, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obwohl eine analoge "IsMouseOverChanged"-Ereignis nicht vorhanden ist, sind mehrere ähnliche Ereignisse auf. Beispielsweise können Sie <xref:System.Windows.ContentElement.MouseEnter>, <xref:System.Windows.ContentElement.MouseMove>, und <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged>.  
  
 Wenn dieses Element die Maus erfasst hat, wird diese Eigenschaft bleibt `true` bis Mauseingaben aufzufangen verloren gegangen ist und der Mauszeiger den Bereich der Grenzen des Elements verlässt.  
  
<a name="dependencyPropertyInfo_IsMouseOver"></a>   
## <a name="dependency-property-information"></a>Informationen zur Abhängigkeitseigenschaft  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.IsMouseOverProperty>|  
|Metadaten-Eigenschaften festgelegt auf. `true`|Keiner|  
  
   
  
## Examples  
 Das folgende Beispiel erstellt ein Format, das ein Eigenschaftensetter, die ein alternatives visual Verhalten gibt bei einem <xref:System.Windows.Documents.Hyperlink> Berichte <xref:System.Windows.ContentElement.IsMouseOver%2A> `true`.  
  
 [!code-xaml[ContentElementsSmorgasbord#IsEnabledIsMouseOver](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#isenabledismouseover)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsMouseOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.ContentElement.IsMouseOver" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptured">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsStylusCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptured { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der Tablettstift für dieses Element erfasst wird.</summary>
        <value>
          <see langword="true" />, wenn das Element Tablettstifteingaben erfasst, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein. Weitere Informationen finden Sie unter [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusCaptured"></a>   
## <a name="dependency-property-information"></a>Informationen zur Abhängigkeitseigenschaft  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.IsStylusCapturedProperty>|  
|Metadaten-Eigenschaften festgelegt auf. `true`|Keiner|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.CaptureStylus" />
        <altmember cref="E:System.Windows.ContentElement.GotStylusCapture" />
        <altmember cref="E:System.Windows.ContentElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsStylusCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCapturedChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Wert der <see cref="P:System.Windows.ContentElement.IsStylusCaptured" />-Eigenschaft für dieses Element geändert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Member ist ein [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] Ereignis, nicht für ein Routingereignis.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsStylusCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCapturedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.ContentElement.IsStylusCaptured" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsStylusCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptureWithin { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das Element einschließlich der untergeordneten Elemente und der Elemente, aus denen sich ein Steuerelement zusammensetzt, Tablettstifteingaben erfasst.</summary>
        <value>
          <see langword="true" />, wenn das Element Tablettstifteingaben erfasst, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein. Weitere Informationen finden Sie unter [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusCaptureWithin"></a>   
## <a name="dependency-property-information"></a>Informationen zur Abhängigkeitseigenschaft  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.IsStylusCaptureWithinProperty>|  
|Metadaten-Eigenschaften festgelegt auf. `true`|Keiner|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsStylusCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCaptureWithinChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Wert der <see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" />-Eigenschaft für dieses Element geändert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Member ist ein [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] Ereignis, nicht für ein Routingereignis.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsStylusCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCaptureWithinProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsStylusDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsStylusDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusDirectlyOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Position des Tablettstifts den Treffertestergebnissen entspricht, für die die Elementzusammensetzung berücksichtigt wird.</summary>
        <value>
          <see langword="true" />, wenn sich der Tablettstift über dem gleichen Element wie ein Treffertest befindet, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im Gegensatz zu <xref:System.Windows.ContentElement.IsStylusOver%2A>, diese Eigenschaft ist nur `true` , wenn der Tablettstift über dem Element befindet. Wenn sich der Tablettstift stattdessen über ein untergeordnetes Element oder Elemente, die Teil einer tieferen elementzusammensetzung sind, wird diese Eigenschaft werden `false`.  
  
 Wenn Sie wissen, wie ein Steuerelement zusammengesetzte ist (z. B. Sie verwenden diese Eigenschaft in einer benutzerdefinierten Steuerelementvorlage für ein Steuerelement, das Sie definieren), diese Eigenschaft möglicherweise unerwartete Ergebnisse zurückgeben. Verwenden Sie für die meisten Szenarien, in denen Sie keine Steuerelemente erstellt werden, <xref:System.Windows.ContentElement.IsStylusOver%2A> stattdessen.  
  
 Wenn dieses Element den Tablettstift hat und diese Eigenschaft ist `true` zum Zeitpunkt der Erfassung, diese Eigenschaft bleibt `true` bis Tablettstift verloren gegangen ist und der Stift nicht über die Grenzen ist.  
  
 Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein. Weitere Informationen finden Sie unter [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusDirectlyOver"></a>   
## <a name="dependency-property-information"></a>Informationen zur Abhängigkeitseigenschaft  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.IsStylusDirectlyOverProperty>|  
|Metadaten-Eigenschaften festgelegt auf. `true`|Keiner|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsStylusDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusDirectlyOverChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Wert der <see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" />-Eigenschaft für dieses Element geändert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Member ist ein [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] Ereignis, nicht für ein Routingereignis.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsStylusDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusDirectlyOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOver">
      <MemberSignature Language="C#" Value="public bool IsStylusOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsStylusOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob sich der Tablettstift über diesem Element (einschließlich untergeordneter visueller Elemente) befindet.</summary>
        <value>
          <see langword="true" />, wenn sich der Tablettstift über dem Element oder seinen untergeordneten Elementen befindet, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn dieses Element die Stiftauswahl verfügt, wird diese Eigenschaft bleibt `true` bis Tablettstift verloren gegangen ist und der Mauszeiger befindet sich außerhalb der Grenzen.  
  
 Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein. Weitere Informationen finden Sie unter [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusOver"></a>   
## <a name="dependency-property-information"></a>Informationen zur Abhängigkeitseigenschaft  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.IsStylusOverProperty>|  
|Metadaten-Eigenschaften festgelegt auf. `true`|Keiner|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsStylusOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.ContentElement.IsStylusOver" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn eine Taste gedrückt wird, während sich der Fokus auf diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Schlüsselverarbeitung interagiert mit anderen Plattformfunktionen, z. B. Befehle und Text Zusammensetzung. Die <xref:System.Windows.ContentElement.KeyDown> Ereignis ist eine technisch anspruchsvolle Texteingabeereignis, die nicht auf bestimmte Steuerelemente erwartungsgemäß Verhalten. Dies ist, da einige Steuerelemente verfügen über Steuerelement Compositing oder Klassenbehandlung, die eine auf höherer Ebene Version des Texts enthält Eingabe Behandlung und verknüpfte Ereignisse.  
  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.KeyDown> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.KeyDown> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
<a name="routedEventInfo_KeyDown"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.KeyDownEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   Das entsprechende Tunneling-Ereignis ist <xref:System.Windows.ContentElement.PreviewKeyDown>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnKeyDown%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="KeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.KeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.KeyDown" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn eine Taste losgelassen wird, während sich der Fokus auf diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.KeyUp> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.KeyUp> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
<a name="routedEventInfo_KeyUp"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.KeyUpEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   Das entsprechende Tunneling-Ereignis ist <xref:System.Windows.ContentElement.PreviewKeyUp>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnKeyUp%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="KeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.KeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.KeyUp" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ LostFocus;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn dieses Element den logischen Fokus verliert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der logische Fokus unterscheidet sich vom Tastaturfokus, wenn der Fokus absichtlich durch einen Methodenaufruf verloren wird, der vorherige Tastaturfokus jedoch in einem anderen Gültigkeitsbereich vorhanden ist. In diesem Szenario, Tastatur Fokus bleibt, wo sie ist, und das Element, in dem eine <xref:System.Windows.ContentElement.Focus%2A> Methode wird immer noch ruft der logische Fokus aufgerufen.  
  
 Eine genauere Interpretation dieses Ereignisses ist, dass die It ausgelöst wird, wenn der Wert von der <xref:System.Windows.ContentElement.IsFocused%2A> Eigenschaft eines Elements in der Route ändert sich von `true` auf `false`.  
  
 Da dieses Ereignis bubbling-routing verwendet, das Element, das Fokus verloren hat möglicherweise ein untergeordnetes Element anstatt des Elements, dem der Ereignishandler tatsächlich angefügt. Überprüfen Sie die <xref:System.Windows.RoutedEventArgs.Source%2A> in die Ereignisdaten an das aktuelle Element zu bestimmen, die Fokus erhalten hat.  
  
<a name="routedEventInfo_LostFocus"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.LostFocusEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|<xref:System.Windows.RoutedEventHandler>|  
  
-   Es ist keine entsprechende Tunneling-Ereignis.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnLostFocus%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostKeyboardFocus" />
        <altmember cref="M:System.Windows.ContentElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="LostFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.LostFocus" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ LostKeyboardFocus;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn sich der Fokus der Tastatur nicht mehr auf diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Da dieses Ereignis bubbling-routing verwendet, das Element, das Fokus verloren hat möglicherweise ein untergeordnetes Element anstatt des Elements, dem der Ereignishandler tatsächlich angefügt. Überprüfen Sie die <xref:System.Windows.RoutedEventArgs.Source%2A> in die Ereignisdaten an das aktuelle Element zu bestimmen, die Fokus verloren hat.  
  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.LostKeyboardFocus> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.LostKeyboardFocus> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
<a name="routedEventInfo_LostKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.LostKeyboardFocusEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   Das entsprechende Tunneling-Ereignis ist <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnLostKeyboardFocus%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostKeyboardFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.LostKeyboardFocus" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler LostMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler LostMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ LostMouseCapture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn dieses Element die Mausauswahl verliert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein Element die Maus erfasst hat, erhält sie Mauseingaben, selbst wenn der Zeiger sich außerhalb der Begrenzungen. Die Maus ist in der Regel nur während der Drag-and-Drop-Vorgänge erfasst.  
  
 Da dieses Ereignis bubbling-routing verwendet, das Element, das die Erfassung verliert möglicherweise ein untergeordnetes Element anstatt des Elements, dem der Ereignishandler tatsächlich angefügt. Überprüfen Sie die <xref:System.Windows.RoutedEventArgs.Source%2A> in die Ereignisdaten an das aktuelle Element zu bestimmen, die Erfassung verloren.  
  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.LostMouseCapture> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.LostMouseCapture> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
<a name="routedEventInfo_LostMouseCapture"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.LostMouseCaptureEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Es gibt keine definiertes entsprechendes Tunneling-Ereignis.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnLostMouseCapture%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostMouseCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.LostMouseCapture" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler LostStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler LostStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ LostStylusCapture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn dieses Element die Stiftauswahl verliert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein Element die Stiftauswahl erhält, erhält sie Stifteingabe, selbst wenn der Mauszeiger sich außerhalb der Begrenzungen befindet. Der Tablettstift wird in der Regel nur während der Drag-and-Drop-Vorgänge erfasst.  
  
 Da dieses Ereignis bubbling-routing verwendet, das Element, das Fokus verloren hat möglicherweise ein untergeordnetes Element anstatt des Elements, dem der Ereignishandler tatsächlich angefügt. Überprüfen Sie die <xref:System.Windows.RoutedEventArgs.Source%2A> in die Ereignisdaten an das aktuelle Element zu bestimmen, die Fokus verloren hat.  
  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.LostStylusCapture> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.LostStylusCapture> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
<a name="routedEventInfo_LostStylusCapture"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.LostStylusCaptureEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Es gibt keine definiertes entsprechendes Tunneling-Ereignis.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnLostStylusCapture%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostStylusCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.LostStylusCapture" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; LostTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; LostTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ LostTouchCapture;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn dieses Element keine Fingereingaben mehr erfasst.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_LostTouchCapture"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.LostTouchCaptureEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|Eine <xref:System.EventHandler%601> vom Typ <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostTouchCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.LostTouchCapture" />-Routingereignis.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn eine Maustaste gedrückt wird, während sich der Mauszeiger über diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.MouseDown> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.MouseDown> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
 Die <xref:System.Windows.ContentElement.MouseDown> Ereignis wird häufig zusammen mit entweder <xref:System.Windows.ContentElement.MouseLeftButtonDown> oder <xref:System.Windows.ContentElement.MouseRightButtonDown>, das Drücken einer der beiden standard Maustasten entsprechen. <xref:System.Windows.ContentElement.MouseLeftButtonDown> und <xref:System.Windows.ContentElement.MouseRightButtonDown> sind auch Routingereignisse, aber sie sind direkte Routingereignisse und die entsprechende Schaltfläche-spezifische-Ereignis wird ausgelöst, wenn die <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> -Ereignis dieses Element auf der Ereignisroute erreicht. Finden Sie unter "Hinweise" für <xref:System.Windows.ContentElement.MouseLeftButtonDown> oder <xref:System.Windows.ContentElement.MouseRightButtonDown>.  
  
> [!IMPORTANT]
>  Einige <xref:System.Windows.ContentElement> abgeleitete Klassen, die Control-ähnliches Verhalten, z. B. <xref:System.Windows.Documents.Hyperlink>, möglicherweise inhärente Klassenbehandlung für Mausereignisse-Schaltfläche. Die linke Maustaste ausgelöste Ereignis ist das wahrscheinlichste Ereignis Klassenbehandlung in einem Steuerelement aufweisen. Die Klassenbehandlung häufig kennzeichnet die zugrunde liegende <xref:System.Windows.Input.Mouse> Klassenereignis als behandelt. Nachdem das Ereignis als behandelt markiert ist, werden andere Instanzhandler, die diesem Element zugeordnet sind, nicht in der Regel ausgelöst. Andere Klasse oder Instanz Handler, die auf Elemente in der bubbling-Richtung zum Stamm in der Benutzeroberflächenautomatisierungs-Struktur angefügt werden, werden auch nicht in der Regel ausgelöst.  
  
 Können Sie beheben Sie das Problem, das in der vorherigen wichtig beschrieben wird und weiterhin <xref:System.Windows.ContentElement.MouseDown> Ereignisse für die linke Maustaste unten Ereignisse in einer abgeleiteten Klasse, die eine Klassenbehandlung mithilfe einer dieser Lösungen verfügt:  
  
-   Fügen Sie Handler für das <xref:System.Windows.ContentElement.PreviewMouseDown> -Ereignis, das nicht von den Steuerelementen als behandelt markiert ist. Beachten Sie, da dies eine Vorschauereignis ist, die Route am Stamm beginnt und auf das Steuerelement tunnelt.  
  
-   Registrieren Sie einen Handler für das Steuerelement prozeduralen durch Aufrufen von <xref:System.Windows.ContentElement.AddHandler%2A> und wählen Sie die Option für die Signatur, die es ermöglicht die Ereignishandler für Ereignisse überwacht werden soll, selbst wenn sie bereits in die gerouteten Ereignisdaten als behandelt markiert sind.  
  
<a name="routedEventInfo_MouseDown"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.MouseDownEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Das entsprechende Tunneling-Ereignis ist <xref:System.Windows.ContentElement.PreviewMouseDown>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnMouseDown%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.MouseDown" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseEnter;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn der Mauszeiger in den Bereich dieses Elements eintritt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.MouseEnter> ist eine [Ereignisübersicht weitergeleitet](~/docs/framework/wpf/advanced/routed-events-overview.md) , routing-Strategie für die direkte Ereignisbehandlung verwendet. Direkte Routingereignisse werden nicht auf einer Route ausgelöst. Stattdessen werden diese in demselben Element behandelt, in dem sie ausgelöst werden. Aktivieren sie jedoch andere Aspekte der Routingereignis-Verhalten, z. B. in Formaten-Ereignis ausgelöst.  
  
 Obwohl <xref:System.Windows.ContentElement.MouseEnter> verfolgt nach, wenn der Mauszeiger die Grenzen eines Elements dieses Weitere Ereignis eintritt buchstäblich angibt, welches die <xref:System.Windows.ContentElement.IsMouseOver%2A> Eigenschaftswert geändert hat `false` auf `true` für dieses Element.  
  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.MouseEnter> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.MouseEnter> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
<a name="routedEventInfo_MouseEnter"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.MouseEnterEvent>|  
|Routing-Strategie|Direkt|  
|delegate|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnMouseEnter%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.MouseEnter" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseLeave;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn der Mauszeiger den Bereich dieses Elements verlässt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.MouseLeave> ist eine [Ereignisübersicht weitergeleitet](~/docs/framework/wpf/advanced/routed-events-overview.md) , routing-Strategie für die direkte Ereignisbehandlung verwendet. Direkte Routingereignisse werden nicht auf einer Route ausgelöst. Stattdessen werden diese in demselben Element behandelt, in dem sie ausgelöst werden. Aktivieren sie jedoch andere Aspekte der Routingereignis-Verhalten, z. B. in Formaten-Ereignis ausgelöst.  
  
 Obwohl <xref:System.Windows.ContentElement.MouseLeave> verfolgt nach, wann die Maus ein Element, das dieses Ereignis verlässt buchstäblich angibt, welches die <xref:System.Windows.ContentElement.IsMouseOver%2A> Eigenschaftswert geändert hat `true` auf `false` für dieses Element.  
  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.MouseLeave> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.MouseLeave> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
<a name="routedEventInfo_MouseLeave"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.MouseLeaveEvent>|  
|Routing-Strategie|Direkt|  
|delegate|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnMouseLeave%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.MouseLeave" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn die linke Maustaste gedrückt wird, während sich der Mauszeiger über diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obwohl dies [Ereignisübersicht weitergeleitet](~/docs/framework/wpf/advanced/routed-events-overview.md) scheint eine bubbling-Route durch eine Elementstruktur, führen es tatsächlich ist eine direkte Routingereignis, das ausgelöst wird, und die Elementstruktur nach jedem erneut <xref:System.Windows.ContentElement>.  
  
 Dieses Ereignis ist eine der mehrere verwandte Ereignisse, die die Schaltflächen Einzelheiten einer zugrunde liegenden Bericht <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> Ereignis, das ein angefügtes Ereignis handelt, die von jedem Element ein Ereignisroute verarbeitet wird.  
  
 Die Argumente für dieses Ereignis verfügbar machen, die Argumente des zugrunde liegenden <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> Ereignis. Wenn das Ereignis als behandelt der Ereignisroute markiert ist, werden die Maustaste los spezifischen Ereignisse dennoch ausgelöst; Allerdings müssen Handler bestimmter Ereignisse an die Schaltflächen hinzugefügt werden, durch explizites Aufrufen <xref:System.Windows.ContentElement.AddHandler%2A>, mit der Option zum Behandeln von Ereignissen, die bereits als behandelt markiert werden, damit Listener des Ereignisses ist.  
  
 Konzeptionell kann dieses Ereignis (und andere los Ereignisse auf <xref:System.Windows.ContentElement>) eine Maus "Service" sein (mit der Definition des Diensts bereitgestellt werden, indem die <xref:System.Windows.Input.Mouse> Klasse). Das Ereignis fügt den Komfort, überprüfen Sie die Maus Schaltflächenzuständen (linke Ecke, nach oben und unten) von der ursprünglichen Mausereignisse in Daten für das Ereignis nicht belegen. Erweiterte Szenarien, z. B. das Überprüfen von Zuständen von nicht standardmäßigen Schaltflächen, müssen Sie möglicherweise mit der [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] auf die <xref:System.Windows.Input.Mouse> -Klasse anstelle der für <xref:System.Windows.ContentElement>.  
  
> [!IMPORTANT]
>  Einige <xref:System.Windows.ContentElement> abgeleitete Klassen, die Control-ähnliches Verhalten, z. B. <xref:System.Windows.Documents.Hyperlink>, möglicherweise inhärente Klassenbehandlung für Mausereignisse-Schaltfläche. Die linke Maustaste ausgelöste Ereignis ist das wahrscheinlichste Ereignis Klassenbehandlung in einem Steuerelement aufweisen. Die Klassenbehandlung häufig kennzeichnet die zugrunde liegende <xref:System.Windows.Input.Mouse> Klassenereignis als behandelt. Nachdem das Ereignis als behandelt markiert ist, werden andere Instanzhandler, die diesem Element zugeordnet sind, nicht in der Regel ausgelöst. Andere Klasse oder Instanz Handler, die auf Elemente in der bubbling-Richtung zum Stamm in der Benutzeroberflächenautomatisierungs-Struktur angefügt werden, werden auch nicht in der Regel ausgelöst.  
  
 Können Sie beheben Sie das Problem, das in der vorherigen wichtig beschrieben wird und weiterhin <xref:System.Windows.ContentElement.MouseLeftButtonDown> Ereignisse für die linke Maustaste unten Ereignisse in einer abgeleiteten Klasse, die eine Klassenbehandlung mithilfe einer dieser Lösungen verfügt:  
  
-   Fügen Sie Handler für das <xref:System.Windows.ContentElement.PreviewMouseDown> -Ereignis, das nicht von den Steuerelementen als behandelt markiert ist. Beachten Sie, da dies eine Vorschauereignis ist, die Route am Stamm beginnt und auf das Steuerelement tunnelt.  
  
-   Registrieren Sie einen Handler für das Steuerelement prozeduralen durch Aufrufen von <xref:System.Windows.ContentElement.AddHandler%2A> und wählen Sie die Option für die Signatur, die es ermöglicht die Ereignishandler für Ereignisse überwacht werden soll, selbst wenn sie bereits in die gerouteten Ereignisdaten als behandelt markiert sind.  
  
<a name="routedEventInfo_MouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.MouseLeftButtonDownEvent>|  
|Routing-Strategie|Direkt|  
|delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn die linke Maustaste losgelassen wird, während sich der Mauszeiger über diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obwohl dies [Ereignisübersicht weitergeleitet](~/docs/framework/wpf/advanced/routed-events-overview.md) scheint eine bubbling-Route durch eine Elementstruktur, führen es tatsächlich ist eine direkte Routingereignis, das ausgelöst wird, und die Elementstruktur nach jedem erneut <xref:System.Windows.ContentElement>.  
  
 Dieses Ereignis ist eine der mehrere verwandte Ereignisse, die die Schaltflächen Einzelheiten einer zugrunde liegenden Bericht <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> Ereignis, das ein angefügtes Ereignis handelt, die von jedem Element ein Ereignisroute verarbeitet wird.  
  
 Die Argumente für dieses Ereignis verfügbar machen, die Argumente des zugrunde liegenden <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> Ereignis. Wenn das Ereignis als behandelt der Ereignisroute markiert ist, werden die Maustaste los spezifischen Ereignisse dennoch ausgelöst; Allerdings müssen Handler bestimmter Ereignisse an die Schaltflächen hinzugefügt werden, durch explizites Aufrufen <xref:System.Windows.ContentElement.AddHandler%2A>, mit der Option zum Behandeln von Ereignissen, die bereits als behandelt markiert werden, damit Listener des Ereignisses ist.  
  
 Konzeptionell kann dieses Ereignis (und andere los Ereignisse auf <xref:System.Windows.ContentElement>) eine Maus "Service" sein (mit der Definition des Diensts bereitgestellt werden, indem die <xref:System.Windows.Input.Mouse> Klasse). Das Ereignis fügt den Komfort, überprüfen Sie die Maus Schaltflächenzuständen (linke Ecke, nach oben und unten) von der ursprünglichen Mausereignisse in Daten für das Ereignis nicht belegen. Erweiterte Szenarien, z. B. das Überprüfen von Zuständen von nicht standardmäßigen Schaltflächen, müssen Sie möglicherweise mit der [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] auf die <xref:System.Windows.Input.Mouse> -Klasse anstelle der für <xref:System.Windows.ContentElement>.  
  
<a name="routedEventInfo_MouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.MouseLeftButtonUpEvent>|  
|Routing-Strategie|Direkt|  
|delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn der Mauszeiger bewegt wird, während er sich über diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.MouseMove> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.MouseMove> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
<a name="routedEventInfo_MouseMove"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.MouseMoveEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Das entsprechende Tunneling-Ereignis ist <xref:System.Windows.ContentElement.PreviewMouseMove>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnMouseMove%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseEnter" />
        <altmember cref="E:System.Windows.ContentElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="MouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.MouseMove" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn die rechte Maustaste gedrückt wird, während sich der Mauszeiger über diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obwohl dies [Ereignisübersicht weitergeleitet](~/docs/framework/wpf/advanced/routed-events-overview.md) scheint eine bubbling-Route durch eine Elementstruktur, führen es tatsächlich ist eine direkte Routingereignis, das ausgelöst wird, und die Elementstruktur nach jedem erneut <xref:System.Windows.ContentElement>.  
  
 Dieses Ereignis ist eine der mehrere verwandte Ereignisse, die die Schaltflächen Einzelheiten einer zugrunde liegenden Bericht <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> Ereignis, das ein angefügtes Ereignis handelt, die von jedem Element ein Ereignisroute verarbeitet wird.  
  
 Die Argumente für dieses Ereignis verfügbar machen, die Argumente des zugrunde liegenden <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> Ereignis. Wenn das Ereignis als behandelt der Ereignisroute markiert ist, werden die Maustaste los spezifischen Ereignisse dennoch ausgelöst; Allerdings müssen Handler bestimmter Ereignisse an die Schaltflächen hinzugefügt werden, durch explizites Aufrufen <xref:System.Windows.ContentElement.AddHandler%2A>, mit der Option zum Behandeln von Ereignissen, die bereits als behandelt markiert werden, damit Listener des Ereignisses ist.  
  
 Konzeptionell kann dieses Ereignis (und andere los Ereignisse auf <xref:System.Windows.ContentElement>) eine Maus "Service" sein (mit der Definition des Diensts bereitgestellt werden, indem die <xref:System.Windows.Input.Mouse> Klasse). Das Ereignis fügt den Komfort, überprüfen Sie die Maus Schaltflächenzuständen (linke Ecke, nach oben und unten) von der ursprünglichen Mausereignisse in Daten für das Ereignis nicht belegen. Erweiterte Szenarien, z. B. das Überprüfen von Zuständen von nicht standardmäßigen Schaltflächen, müssen Sie möglicherweise mit der [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] auf die <xref:System.Windows.Input.Mouse> -Klasse anstelle der für <xref:System.Windows.ContentElement>.  
  
 Mausereignisse rechten Schaltfläche weisen systemeigene Behandlung häufig in Anwendungsszenarien. Z. B. möglicherweise eine rechten Maustaste ein Kontextmenü angezeigt. Finden Sie unter [Übersicht über die ContextMenu](~/docs/framework/wpf/controls/contextmenu-overview.md).  
  
<a name="routedEventInfo_MouseRightButtonDown"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.MouseRightButtonDownEvent>|  
|Routing-Strategie|Direkt|  
|delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.MouseRightButtonDown" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn die rechte Maustaste losgelassen wird, während sich der Mauszeiger über diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obwohl dies [Ereignisübersicht weitergeleitet](~/docs/framework/wpf/advanced/routed-events-overview.md) scheint eine bubbling-Route durch eine Elementstruktur, führen es tatsächlich ist eine direkte Routingereignis, das ausgelöst wird, und die Elementstruktur nach jedem erneut <xref:System.Windows.ContentElement>.  
  
 Dieses Ereignis ist eine der mehrere verwandte Ereignisse, die die Schaltflächen Einzelheiten einer zugrunde liegenden Bericht <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> Ereignis, das ein angefügtes Ereignis handelt, die von jedem Element ein Ereignisroute verarbeitet wird.  
  
 Die Argumente für dieses Ereignis verfügbar machen, die Argumente des zugrunde liegenden <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> Ereignis. Wenn das Ereignis als behandelt der Ereignisroute markiert ist, werden die Maustaste los spezifischen Ereignisse dennoch ausgelöst; Allerdings müssen Handler bestimmter Ereignisse an die Schaltflächen hinzugefügt werden, durch explizites Aufrufen <xref:System.Windows.ContentElement.AddHandler%2A>, mit der Option zum Behandeln von Ereignissen, die bereits als behandelt markiert werden, damit Listener des Ereignisses ist.  
  
 Konzeptionell kann dieses Ereignis (und andere los Ereignisse auf <xref:System.Windows.ContentElement>) eine Maus "Service" sein (mit der Definition des Diensts bereitgestellt werden, indem die <xref:System.Windows.Input.Mouse> Klasse). Das Ereignis fügt den Komfort, überprüfen Sie die Maus Schaltflächenzuständen (linke Ecke, nach oben und unten) von der ursprünglichen Mausereignisse in Daten für das Ereignis nicht belegen. Erweiterte Szenarien, z. B. das Überprüfen von Zuständen von nicht standardmäßigen Schaltflächen, müssen Sie möglicherweise mit der [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] auf die <xref:System.Windows.Input.Mouse> -Klasse anstelle der für <xref:System.Windows.ContentElement>.  
  
<a name="routedEventInfo_MouseRightButtonUp"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.MouseRightButtonUpEvent>|  
|Routing-Strategie|Direkt|  
|delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.MouseRightButtonUp" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn eine Maustaste über diesem Element losgelassen wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.MouseUp> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.MouseUp> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
 Die <xref:System.Windows.ContentElement.MouseUp> Ereignis wird häufig zusammen mit entweder <xref:System.Windows.ContentElement.MouseLeftButtonUp> oder <xref:System.Windows.ContentElement.MouseRightButtonUp>, die für eine Version eines der beiden standard Maustasten entsprechen. <xref:System.Windows.ContentElement.MouseLeftButtonUp> und <xref:System.Windows.ContentElement.MouseRightButtonUp> sind auch Routingereignisse, aber sie sind direkte Routingereignisse und die entsprechende Schaltfläche-spezifische-Ereignis wird ausgelöst, wenn die <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> -Ereignis dieses Element auf der Ereignisroute erreicht. Finden Sie unter "Hinweise" für <xref:System.Windows.ContentElement.MouseLeftButtonUp> oder <xref:System.Windows.ContentElement.MouseRightButtonUp>.  
  
<a name="routedEventInfo_MouseUp"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.MouseUpEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Das entsprechende Tunneling-Ereignis ist <xref:System.Windows.ContentElement.PreviewMouseUp>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnMouseUp%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.MouseUp" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler MouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler MouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ MouseWheel;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn der Benutzer das Mausrad dreht, während sich der Mauszeiger über diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Fokus oder die Maus erfasst haben Vorrang vor, in dem der Mauszeiger befindet; aus diesem Grund erhalten Sie die <xref:System.Windows.ContentElement.MouseWheel> Ereignis von einem Element mit Fokus oder aufgezeichnet, der Mauszeiger möglicherweise nicht über ein anderes Element.  
  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.MouseWheel> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.MouseWheel> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
<a name="routedEventInfo_MouseWheel"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.MouseWheelEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   Das entsprechende Tunneling-Ereignis ist <xref:System.Windows.ContentElement.PreviewMouseWheel>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnMouseWheel%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseWheelEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.MouseWheel" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">Eine Durchlaufanforderung, die eine Eigenschaft enthält, die entweder einen Modus zum Durchlaufen in der vorliegenden Aktivierreihenfolge oder eine Richtung zum visuellen Verschieben angibt.</param>
        <summary>Versucht, den Fokus von diesem Element auf ein anderes Element zu verschieben. Die Richtung, in der der Fokus verschoben wird, wird durch eine Führungsrichtung angegeben, die innerhalb der Organisation des visuellen übergeordneten Elements für dieses Element interpretiert wird.</summary>
        <returns>
          <see langword="true" />, wenn der angeforderte Durchlauf ausgeführt wurde, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Stellen Sie sicher, dass Sie überprüfen, dass den Rückgabewert dieser Methode. Ein Rückgabewert von `false` kann zurückgegeben werden, wenn Durchlauf ausgeführt wird, in einen Tabstopp, die durch die Zusammensetzung eines Steuerelements definiert ist, und die Anforderung Durchlauf umschließen nicht angefordert.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt klassenspezifische <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />-Implementierungen für die [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]-Infrastruktur zurück.</summary>
        <returns>Die typspezifische <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />-Implementierung.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Die Implementierung dieser Methode wird in der Regel Aufruf des Konstruktors einer bestimmten <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> -Implementierung erstellt und als Rückgabewert zurückgegeben.  
  
 Alle <see cref="T:System.Windows.ContentElement" /> abgeleitete Klassen sollten diese Methode implementieren, um ihre eigenen spezifischen bieten <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> Implementierungen, um die [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] Infrastruktur. Ausführliche Informationen dazu, dieses Muster implementieren, finden Sie unter <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.DragEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.DragDrop.DragEnter" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.DragEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.DragDrop.DragLeave" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.DragEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.DragDrop.DragOver" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnDrop">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.DragEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.DragDrop.DragEnter" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.GiveFeedbackEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.DragDrop.GiveFeedback" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.RoutedEventArgs" />, das Ereignisdaten enthält. Diese Ereignisdaten müssen den Bezeichner für das <see cref="E:System.Windows.ContentElement.GotFocus" />-Ereignis enthalten.</param>
        <summary>Löst das <see cref="E:System.Windows.ContentElement.GotFocus" />-Routingereignis mithilfe der bereitgestellten Ereignisdaten aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode weist auch virtuell sein, eine Standardimplementierung auf, die das Ereignis auslöst.  
  
 Dies auf * methodenimplementierung dient zum Auslösen des Ereignisses, und diese dieselbe methodenimplementierung wird intern zum Auslösen des Ereignisses aufgerufen bei der <xref:System.Windows.ContentElement.IsFocused%2A> Eigenschaftswert ändert. Die <xref:System.Windows.ContentElement.OnGotFocus%2A> Implementierung unterscheidet sich von einem anderen [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] auf * Implementierungen, die nur eine einfache Möglichkeit, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen bieten.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie eine absichtliche und ungewöhnliche nicht den Fokusereignisse auslösen, müssen, stellen Sie sicher, dass Ihre Implementierung die basisimplementierung aufgerufen. Andernfalls die <see cref="E:System.Windows.ContentElement.GotFocus" /> Ereignis wird nicht ausgelöst, während der Benutzer normalerweise-Vorgänge, die normalerweise den Fokus auf dieses Element festgelegt. Wenn Sie nicht, dass das Element den Fokus erhalten kann sein beabsichtigen, Sie können verhindern, das Element den Fokus erhalten kann durch Festlegen von <see cref="P:System.Windows.ContentElement.Focusable" /> auf <see langword="false" />. Beachten Sie, dass standardmäßig eine <see cref="P:System.Windows.ContentElement.Focusable" /> ist nicht den Fokus erhalten kann, daher festlegen <see cref="P:System.Windows.ContentElement.Focusable" /> absichtlich möglicherweise nicht erforderlich.</para>
        </block>
        <altmember cref="P:System.Windows.ContentElement.Focusable" />
        <altmember cref="E:System.Windows.ContentElement.GotFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotMouseCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.MouseEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotStylusCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.StylusEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotTouchCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Input.TouchEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Stellt eine Klassenbehandlung für das <see cref="E:System.Windows.ContentElement.GotTouchCapture" />-Routingereignis bereit, das eintritt, wenn eine Berührung für dieses Element erfasst wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> Methode hat keine Standardimplementierung. Überschreiben Sie <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> in einer abgeleiteten Klasse zum Behandeln der <xref:System.Windows.ContentElement.GotTouchCapture> Ereignis. Achten Sie darauf, dass Sie der Basisklasse aufgerufen <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> Methode, damit die Basisklassen das Ereignis empfangen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes <see cref="E:System.Windows.ContentElement.IsKeyboardFocusedChanged" />-Ereignis für dieses Element ausgelöst wird. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser virtuellen Methode ausgelöst, wenn der Wert von der <xref:System.Windows.ContentElement.IsKeyboardFocused%2A> -Abhängigkeitseigenschaft. Die virtuelle Methode wird zuerst ausgelöst und kann die Daten für das Ereignis nach Bedarf bearbeiten. Die <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> Ereignis mit diesem gleichen Ereignisdateninstanz ausgelöst. Beachten Sie, dass die <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> Ereignis ist für ein Routingereignis nicht. Es kann nicht aus diesem Grund kennzeichnen, wie in der Klassenhandler behandelt.  
  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen. Sie können Basis entweder vor oder nach Ihrem besondere Behandlung, je nach Ihren Anforderungen aufgerufen werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird unmittelbar vor dem Auslösen des <see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" />-Ereignisses durch dieses Element aufgerufen. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser virtuellen Methode ausgelöst, wenn der Wert des der <xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> Abhängigkeitseigenschaft geändert wird. Die virtuelle Methode wird zuerst ausgelöst und kann die Daten für das Ereignis nach Bedarf bearbeiten. Die <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> Ereignis mit diesem gleichen Ereignisdateninstanz ausgelöst. Beachten Sie, dass die <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> Ereignis ist für ein Routingereignis nicht. Es kann nicht aus diesem Grund kennzeichnen, wie in der Klassenhandler behandelt.  
  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen. Sie können Basis entweder vor oder nach Ihrem besondere Behandlung, je nach Ihren Anforderungen aufgerufen werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes <see cref="E:System.Windows.ContentElement.IsMouseCapturedChanged" />-Ereignis für dieses Element ausgelöst wird. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser virtuellen Methode ausgelöst, wenn der Wert des der <xref:System.Windows.ContentElement.IsMouseCaptured%2A> Abhängigkeitseigenschaft geändert wird. Die virtuelle Methode wird zuerst ausgelöst und kann die Daten für das Ereignis nach Bedarf bearbeiten. Die <xref:System.Windows.ContentElement.IsMouseCapturedChanged> Ereignis mit diesem gleichen Ereignisdateninstanz ausgelöst. Beachten Sie, dass die <xref:System.Windows.ContentElement.IsMouseCapturedChanged> Ereignis ist für ein Routingereignis nicht. Es kann nicht aus diesem Grund kennzeichnen, wie in der Klassenhandler behandelt.  
  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen. Sie können Basis entweder vor oder nach Ihrem besondere Behandlung, je nach Ihren Anforderungen aufgerufen werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes <see cref="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" />-Ereignis für dieses Element ausgelöst wird. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Dieser virtuellen Methode ausgelöst, wenn der Wert des der <see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin" /> Abhängigkeitseigenschaft geändert wird. Die virtuelle Methode wird zuerst ausgelöst und kann die Daten für das Ereignis nach Bedarf bearbeiten. Die <see cref="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" /> Ereignis mit diesem gleichen Ereignisdateninstanz ausgelöst. Beachten Sie, dass das Ereignis ein Routingereignis nicht ist. Es kann nicht aus diesem Grund kennzeichnen, wie in der Klassenhandler behandelt.  
  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen. Sie können Basis entweder vor oder nach Ihrem besondere Behandlung, je nach Ihren Anforderungen aufgerufen werden.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes <see cref="E:System.Windows.ContentElement.IsMouseDirectlyOverChanged" />-Ereignis für dieses Element ausgelöst wird. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser virtuellen Methode ausgelöst, wenn der Wert des der <xref:System.Windows.ContentElement.IsMouseDirectlyOver%2A> Abhängigkeitseigenschaft geändert wird. Die virtuelle Methode wird zuerst ausgelöst und kann die Daten für das Ereignis nach Bedarf bearbeiten. Die <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> Ereignis mit diesem gleichen Ereignisdateninstanz ausgelöst. Beachten Sie, dass die <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> Ereignis ist für ein Routingereignis nicht. Es kann nicht aus diesem Grund kennzeichnen, wie in der Klassenhandler behandelt.  
  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen. Sie können Basis entweder vor oder nach Ihrem besondere Behandlung, je nach Ihren Anforderungen aufgerufen werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes <see cref="E:System.Windows.ContentElement.IsStylusCapturedChanged" />-Ereignis für dieses Element ausgelöst wird. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser virtuellen Methode ausgelöst, wenn der Wert des der <xref:System.Windows.ContentElement.IsStylusCaptured%2A> Abhängigkeitseigenschaft geändert wird. Die virtuelle Methode wird zuerst ausgelöst und kann die Daten für das Ereignis nach Bedarf bearbeiten. Die <xref:System.Windows.ContentElement.IsStylusCapturedChanged> Ereignis mit diesem gleichen Ereignisdateninstanz ausgelöst. Beachten Sie, dass das Ereignis ein Routingereignis nicht ist. Es kann nicht aus diesem Grund kennzeichnen, wie in der Klassenhandler behandelt.  
  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen. Sie können Basis entweder vor oder nach Ihrem besondere Behandlung, je nach Ihren Anforderungen aufgerufen werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes <see cref="E:System.Windows.ContentElement.IsStylusCaptureWithinChanged" />-Ereignis für dieses Element ausgelöst wird. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser virtuellen Methode ausgelöst, wenn der Wert des der <xref:System.Windows.ContentElement.IsStylusCaptureWithin%2A> Abhängigkeitseigenschaft geändert wird. Die virtuelle Methode wird zuerst ausgelöst und kann die Daten für das Ereignis nach Bedarf bearbeiten. Die <xref:System.Windows.ContentElement.IsStylusCaptureWithinChanged> Ereignis mit diesem gleichen Ereignisdateninstanz ausgelöst. Beachten Sie, dass das Ereignis ein Routingereignis nicht ist. Es kann nicht aus diesem Grund kennzeichnen, wie in der Klassenhandler behandelt.  
  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen. Sie können Basis entweder vor oder nach Ihrem besondere Behandlung, je nach Ihren Anforderungen aufgerufen werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes <see cref="E:System.Windows.ContentElement.IsStylusDirectlyOverChanged" />-Ereignis für dieses Element ausgelöst wird. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser virtuellen Methode ausgelöst, wenn der Wert des der <xref:System.Windows.ContentElement.IsStylusDirectlyOver%2A> Abhängigkeitseigenschaft geändert wird. Die virtuelle Methode wird zuerst ausgelöst und kann die Daten für das Ereignis nach Bedarf bearbeiten. Die <xref:System.Windows.ContentElement.IsStylusDirectlyOverChanged> Ereignis mit diesem gleichen Ereignisdateninstanz ausgelöst. Beachten Sie, dass das Ereignis ein Routingereignis nicht ist. Es kann nicht aus diesem Grund kennzeichnen, wie in der Klassenhandler behandelt.  
  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen. Sie können Basis entweder vor oder nach Ihrem besondere Behandlung, je nach Ihren Anforderungen aufgerufen werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.KeyEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Keyboard.KeyDown" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tastatureingaben werden von einem dedizierten Eingabe-Manager verarbeitet. Andere Programmierfunktionen, die Tastatureingaben, z. B. Eingabe- und Befehl Bindungen benötigen möglicherweise die Tastatureingabe behandeln, bevor es als eine allgemeine Tastatureingabe verfügbar gemacht wird. Wenn diese Eingabedateien Systemfunktionen markieren das Ereignis als behandelt, klicken Sie dann <xref:System.Windows.ContentElement.OnKeyDown%2A> wird nicht aufgerufen.  
  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.KeyEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Keyboard.KeyUp" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tastatureingaben werden von einem dedizierten Eingabe-Manager verarbeitet. Andere Programmierfunktionen, die Tastatureingaben, z. B. Eingabe- und Befehl Bindungen benötigen möglicherweise die Tastatureingabe behandeln, bevor es als eine allgemeine Tastatureingabe verfügbar gemacht wird. Wenn diese Eingabedateien Systemfunktionen markieren das Ereignis als behandelt, klicken Sie dann <xref:System.Windows.ContentElement.OnKeyUp%2A> wird nicht aufgerufen.  
  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.RoutedEventArgs" />, das Ereignisdaten enthält. Diese Ereignisdaten müssen den Bezeichner für das <see cref="E:System.Windows.ContentElement.LostFocus" />-Ereignis enthalten.</param>
        <summary>Löst das <see cref="E:System.Windows.ContentElement.LostFocus" />- Routingereignis mithilfe der bereitgestellten Ereignisdaten aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode weist auch virtuell sein, eine Standardimplementierung auf, die das Ereignis auslöst.  
  
 Dies auf * methodenimplementierung dient zum Auslösen des Ereignisses, und diese dieselbe methodenimplementierung wird intern zum Auslösen des Ereignisses aufgerufen bei der <xref:System.Windows.ContentElement.IsFocused%2A> Eigenschaftswert ändert. Diese Implementierung unterscheidet sich von einem anderen [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] auf * Implementierungen, die nur eine einfache Möglichkeit, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen bieten.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie eine absichtliche und ungewöhnliche nicht den Fokusereignisse auslösen, müssen, stellen Sie sicher, dass Ihre Implementierung die basisimplementierung aufgerufen. Andernfalls die <see cref="E:System.Windows.ContentElement.LostFocus" /> Ereignis wird nicht ausgelöst, während der Benutzer normalerweise-Vorgänge, die normalerweise den Fokus auf dieses Element festgelegt. Wenn Sie nicht, dass das Element den Fokus erhalten kann sein beabsichtigen, Sie können verhindern, das Element den Fokus erhalten kann durch Festlegen von <see cref="P:System.Windows.ContentElement.Focusable" /> auf <see langword="false" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Die Instanz von <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />, die die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnLostMouseCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Die Instanz von <see cref="T:System.Windows.Input.MouseEventArgs" />, die die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostStylusCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Die Instanz von <see cref="T:System.Windows.Input.StylusEventArgs" />, die die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostTouchCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Input.TouchEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Stellt Klassenbehandlung für das <see cref="E:System.Windows.ContentElement.LostTouchCapture" />-Routingereignis bereit, das auftritt, wenn in diesem Element die Fingereingabenerfassung verloren geht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> Methode hat keine Standardimplementierung. Überschreiben Sie <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> in einer abgeleiteten Klasse zum Behandeln der <xref:System.Windows.ContentElement.LostTouchCapture> Ereignis. Achten Sie darauf, dass Sie der Basisklasse aufgerufen <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> Methode, damit die Basisklassen das Ereignis empfangen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.MouseButtonEventArgs" />, das die Ereignisdaten enthält. Diese Ereignisdaten melden Details zur Maustaste, die gedrückt wurde, und zum behandelten Zustand.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Mouse.MouseDown" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Schaltfläche Mausaktionen werden auch von einem dedizierten Eingabe-Manager behandelt. Andere Programmierfunktionen, die Schaltfläche Mausaktionen, z. B. Eingabe abhängig ist, und jeder Befehl von Bindungen, möglicherweise Handler für die Aktion aufrufen, bevor es als eine allgemeine Schaltfläche Mausaktion verfügbar gemacht wird. Wenn Sie diese markieren Eingabedateien der <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> Ereignis als behandelt, <xref:System.Windows.ContentElement.OnMouseDown%2A> wird nicht aufgerufen.  
  
 Wenn Sie den Klassenhandler für diese verwenden, um das Ereignis als behandelt markiert werden, Sie möglicherweise Auswirkungen auf die folgenden Ereignisse: <xref:System.Windows.ContentElement.MouseLeftButtonDown> und <xref:System.Windows.ContentElement.MouseRightButtonDown>. Eines dieser Ereignisse kann ausgelöst werden, auf dem empfangenden Element beim <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> empfangen wird.  
  
 Wenn Sie dieses Ereignis in eine Klassenbehandlung als behandelt markiert haben, werden dennoch Unterereignisse ausgelöst. Sie kann jedoch zum behandelten Zustand in den Ereignisdaten übergeben werden. Wenn das Ereignis in der Klassenbehandlung behandelt wird, Instanzhandler für die Unterereignisse werden nicht aufgerufen, wenn Sie explizit verwenden <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> mit `handledEventsToo` `true` um Handler anfügen. Klassenhandler werden ebenfalls nicht aufgerufen, wenn diese Klassenhandler registriert wurden die <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> Signatur mit `handledEventsToo` `true`. Durch Verarbeiten <xref:System.Windows.ContentElement.OnMouseDown%2A>, Sie sind, dass die Klassenbehandlung für alle möglichen Aktionen mit gedrückter Gleichzeichen. Dieses Verhalten kann unerwünscht sein. daher vorsichtig, wenn Sie dieser virtuellen Methode verwenden, um die Ereignisse als behandelt markiert.  
  
 Jedes der direkten Schaltfläche-spezifische Ereignisse verfügt auch über ein virtuelles auf *-Methode. Berücksichtigen Sie, ob überschreiben diese Schaltfläche-spezifische Klassenhandler besser geeignet sein kann.  
  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseEnter(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseEnter (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseEnter(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.MouseEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes angefügtes <see cref="E:System.Windows.Input.Mouse.MouseEnter" />-Ereignis für dieses Element ausgelöst wird. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen. Sie können Basis entweder vor oder nach Ihrem besondere Behandlung, je nach Ihren Anforderungen aufgerufen werden.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis mit einer direkten routing-Strategie. Das Ereignis als behandelt markiert ist immer noch nützlich, damit verhindern den Standard-Handler (diejenigen, die keinen angeben `handledEventsToo`) aufgerufen wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseLeave(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseLeave (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseLeave(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.MouseEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes angefügtes <see cref="E:System.Windows.Input.Mouse.MouseLeave" />-Ereignis für dieses Element ausgelöst wird. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen. Sie können Basis entweder vor oder nach Ihrem besondere Behandlung, je nach Ihren Anforderungen aufgerufen werden.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis mit einer direkten routing-Strategie. Das Ereignis als behandelt markiert ist immer noch nützlich, damit verhindern den Standard-Handler (diejenigen, die keinen angeben `handledEventsToo`) aufgerufen wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.MouseButtonEventArgs" />, das die Ereignisdaten enthält. Die Ereignisdaten melden, dass die linke Maustaste gedrückt wurde.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes geroutetes <see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" />-Ereignis für dieses Element ausgelöst wird. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.ContentElement.MouseLeftButtonDown> Ereignis angezeigt wird, eine bubbling-Route zu folgen, durchläuft jedoch tatsächlich eine indirekte Möglichkeit. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> ist das zugrunde liegende Ereignis, das Blasendiagramm weitergeleitet wird, und jedes <xref:System.Windows.ContentElement> entlang des Ereignisses Route durchläuft das direkte Routingereignis auslösen <xref:System.Windows.ContentElement.MouseLeftButtonDown>. Obwohl Sie markieren können die <xref:System.Windows.ContentElement.MouseLeftButtonDown> Ereignis für dieses Element als behandelt, zum behandelte Zustand ist nicht Ereignisroute weitergegeben auf andere Elemente auf der Ereignisroute. Allerdings kann es sinnvoll sein, das Ereignis als behandelt, um zu verhindern, dass allgemeine Instanzhandler zu markieren (solche, die keine Berechnung angegeben `handledEventsToo`) aus aufgerufen wurde.  
  
 Die Standardimplementierung für allgemeine Maus Ereignisbehandlung in <xref:System.Windows.ContentElement> überwacht <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> und konvertiert ihn in ein entsprechendes lokales Ereignis. Wenn Sie diese Logik überschreiben möchten, müssen Sie eine abgeleitete Klasse erstellen. Registrieren Sie im statischen Konstruktor der abgeleiteten Klasse einen alternativen Klassenhandler für <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>. Die Behandlung von Verhalten der Maus kann nicht geändert werden <xref:System.Windows.ContentElement> durch Außerkraftsetzen von <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A>.  
  
 Alternativ können Sie diese Methode überschreiben, um Ereignisbehandlung für einen bestimmten Maus Status zu ändern. Egal, ob Sie die basisimplementierung aufgerufen werden, hängt von Ihrem Szenario ab. Standardbehandlung Eingabe für dieses Mausereignis auf den Vorgängerklassen, die auch zum Aufrufen erwarten Basis aufgerufen deaktiviert <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A>. Sie können z. B. Ableiten von <xref:System.Windows.Controls.Button> und überschreiben <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A> in die abgeleitete Klasse ohne Aufrufen der basisimplementierung; allerdings überschreiben dies deaktiviert den <xref:System.Windows.Controls.Primitives.ButtonBase.Click> Ereignis.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.MouseButtonEventArgs" />, das die Ereignisdaten enthält. Die Ereignisdaten melden, dass die linke Maustaste losgelassen wurde.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes <see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" />-Routingereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.ContentElement.MouseLeftButtonUp> Ereignis angezeigt wird, eine bubbling-Route zu folgen, durchläuft jedoch tatsächlich eine indirekte Möglichkeit. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> ist das zugrunde liegende Ereignis, das Blasendiagramm weitergeleitet wird, und jedes <xref:System.Windows.ContentElement> entlang des Ereignisses Route durchläuft das direkte Routingereignis auslösen <xref:System.Windows.ContentElement.MouseLeftButtonUp>. Obwohl Sie markieren können die <xref:System.Windows.ContentElement.MouseLeftButtonUp> Ereignis für dieses Element als behandelt, zum behandelte Zustand ist nicht Ereignisroute weitergegeben auf andere Elemente auf der Ereignisroute. Allerdings kann es sinnvoll sein, das Ereignis als behandelt, um zu verhindern, dass allgemeine Instanzhandler zu markieren (solche, die keine Berechnung angegeben `handledEventsToo`) aus aufgerufen wurde.  
  
 Die Standardimplementierung für allgemeine Maus Ereignisbehandlung in <xref:System.Windows.ContentElement> überwacht <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> und konvertiert ihn in ein entsprechendes lokales Ereignis. Wenn Sie diese Logik überschreiben möchten, müssen Sie eine abgeleitete Klasse erstellen. Registrieren Sie im statischen Konstruktor der abgeleiteten Klasse einen alternativen Klassenhandler für <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>. Die Behandlung von Verhalten der Maus kann nicht geändert werden <xref:System.Windows.ContentElement> durch Außerkraftsetzen von <xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.MouseEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Mouse.MouseMove" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.MouseButtonEventArgs" />, das die Ereignisdaten enthält. Die Ereignisdaten melden, dass die rechte Maustaste gedrückt wurde.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes <see cref="E:System.Windows.ContentElement.MouseRightButtonDown" />-Routingereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.ContentElement.MouseRightButtonDown> Ereignis angezeigt wird, eine bubbling-Route zu folgen, durchläuft jedoch tatsächlich eine indirekte Möglichkeit. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> ist das zugrunde liegende Ereignis, das Blasendiagramm weitergeleitet wird, und jedes <xref:System.Windows.ContentElement> entlang des Ereignisses Route durchläuft das direkte Routingereignis auslösen <xref:System.Windows.ContentElement.MouseRightButtonDown>. Obwohl Sie markieren können die <xref:System.Windows.ContentElement.MouseRightButtonDown> Ereignis für dieses Element als behandelt, zum behandelte Zustand ist nicht Ereignisroute weitergegeben auf andere Elemente auf der Ereignisroute. Allerdings kann es sinnvoll sein, das Ereignis als behandelt, um zu verhindern, dass allgemeine Instanzhandler zu markieren (solche, die keine Berechnung angegeben `handledEventsToo`) aus aufgerufen wurde.  
  
 Die Standardimplementierung für allgemeine Maus Ereignisbehandlung in <xref:System.Windows.ContentElement> überwacht <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> und konvertiert ihn in ein entsprechendes lokales Ereignis. Wenn Sie diese Logik überschreiben möchten, müssen Sie eine abgeleitete Klasse erstellen. Registrieren Sie im statischen Konstruktor der abgeleiteten Klasse einen alternativen Klassenhandler für <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>. Die Behandlung von Verhalten der Maus kann nicht geändert werden <xref:System.Windows.ContentElement> durch Außerkraftsetzen von <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A>.  
  
 Alternativ können Sie diese Methode überschreiben, um Ereignisbehandlung für einen bestimmten Maus Status zu ändern. Egal, ob Sie die basisimplementierung aufgerufen werden, hängt von Ihrem Szenario ab. Standardbehandlung Eingabe für dieses Mausereignis auf den Vorgängerklassen, die auch zum Aufrufen erwarten Basis aufgerufen deaktiviert <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A>. Sie können z. B. Ableiten von <xref:System.Windows.Controls.Control> und überschreiben <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A> in die abgeleitete Klasse, ohne dass Base aufgerufen; deaktiviert diese Außerkraftsetzung jedoch den Kontext im Menü Dienste auf steuern können, die Teil sind von der <xref:System.Windows.Controls.Control> Standardverhalten.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.MouseButtonEventArgs" />, das die Ereignisdaten enthält. Die Ereignisdaten melden, dass die rechte Maustaste losgelassen wurde.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes <see cref="E:System.Windows.ContentElement.MouseRightButtonUp" />-Routingereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.ContentElement.MouseRightButtonUp> Ereignis angezeigt wird, eine bubbling-Route zu folgen, durchläuft jedoch tatsächlich eine indirekte Möglichkeit. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> ist das zugrunde liegende Ereignis, das Blasendiagramm weitergeleitet wird, und jedes <xref:System.Windows.ContentElement> entlang des Ereignisses Route durchläuft das direkte Routingereignis auslösen <xref:System.Windows.ContentElement.MouseRightButtonUp>. Obwohl Sie markieren können die <xref:System.Windows.ContentElement.MouseRightButtonUp> Ereignis für dieses Element als behandelt, zum behandelte Zustand ist nicht Ereignisroute weitergegeben auf andere Elemente auf der Ereignisroute. Allerdings kann es sinnvoll sein, das Ereignis als behandelt, um zu verhindern, dass allgemeine Instanzhandler zu markieren (solche, die keine Berechnung angegeben `handledEventsToo`) aus aufgerufen wurde.  
  
 Die Standardimplementierung für allgemeine Maus Ereignisbehandlung in <xref:System.Windows.ContentElement> überwacht <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> und konvertiert ihn in ein entsprechendes lokales Ereignis. Wenn Sie diese Logik überschreiben möchten, müssen Sie eine abgeleitete Klasse erstellen. Registrieren Sie im statischen Konstruktor der abgeleiteten Klasse einen alternativen Klassenhandler für <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>. Die Behandlung von Verhalten der Maus kann nicht geändert werden <xref:System.Windows.ContentElement> durch Außerkraftsetzen von <xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.MouseButtonEventArgs" />, das die Ereignisdaten enthält. Die Ereignisdaten melden, dass die Maustaste losgelassen wurde.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes <see cref="E:System.Windows.Input.Mouse.MouseUp" />-Routingereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Schaltfläche Mausaktionen werden auch von einem dedizierten Eingabe-Manager behandelt. Andere Programmierfunktionen, die Schaltfläche Mausaktionen, z. B. Eingabe abhängig ist, und jeder Befehl von Bindungen, möglicherweise Handler für die Aktion aufrufen, bevor es als eine allgemeine Schaltfläche Mausaktion verfügbar gemacht wird. Wenn Sie diese markieren Eingabedateien der <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> Ereignis als behandelt, <xref:System.Windows.ContentElement.OnMouseUp%2A> wird nicht aufgerufen.  
  
 Wenn Sie den Klassenhandler für diese verwenden, um das Ereignis als behandelt markiert werden, Sie möglicherweise Auswirkungen auf die folgenden Ereignisse: <xref:System.Windows.ContentElement.MouseLeftButtonUp> und <xref:System.Windows.ContentElement.MouseRightButtonUp>. Eines dieser Ereignisse können für das empfangende Element ausgelöst werden beim <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> empfangen wird.  
  
 Wenn Sie dieses Ereignis in eine Klassenbehandlung als behandelt markiert haben, werden dennoch Unterereignisse ausgelöst. Sie kann jedoch zum behandelten Zustand in den Ereignisdaten übergeben werden. Wenn das Ereignis in der Klassenbehandlung behandelt wird, Instanzhandler für die Unterereignisse werden nicht aufgerufen, wenn Sie explizit verwenden <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> mit `handledEventsToo` `true` um Handler anfügen. Klassenhandler werden ebenfalls nicht aufgerufen, wenn diese Klassenhandler registriert wurden die <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> Signatur mit `handledEventsToo` `true`. Durch Verarbeiten <xref:System.Windows.ContentElement.OnMouseUp%2A>, Sie sind, dass die Klassenbehandlung für alle möglichen Aktionen Gleichzeichen. Dieses Verhalten kann unerwünscht sein. Daher vorsichtig, wenn Sie dieser virtuellen Methode verwenden, um die Ereignisse als behandelt markiert.  
  
 Jedes der direkten Schaltfläche-spezifische Ereignisse verfügt auch über ein virtuelles auf *-Methode. Berücksichtigen Sie, ob überschreiben diese Schaltfläche-spezifische Klassenhandler besser geeignet sein kann.  
  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.MouseWheelEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Mouse.MouseWheel" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.DragEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.DragDrop.PreviewDragEnter" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert. Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewDragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.DragEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.DragDrop.PreviewDragLeave" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert. Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewDragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragOver">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.DragEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.DragDrop.PreviewDragOver" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert. Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewDragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDrop">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.DragEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.DragDrop.PreviewDrop" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert. Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewDrop" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGiveFeedback">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.GiveFeedbackEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert. Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewGiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert. Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.KeyEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert. Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.KeyEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert. Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert. Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.MouseButtonEventArgs" />, das die Ereignisdaten enthält. Die Ereignisdaten melden, dass eine oder mehrere Maustasten gedrückt wurden.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes angefügtes <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" />-Routingereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Schaltfläche Mausaktionen werden auch von einem dedizierten Eingabe-Manager behandelt. Andere Programmierfunktionen, die Schaltfläche Mausaktionen, z. B. Eingabe abhängig ist, und jeder Befehl von Bindungen, möglicherweise Handler für die Aktion aufrufen, bevor es als eine allgemeine Schaltfläche Mausaktion verfügbar gemacht wird. Wenn Sie diese markieren Eingabedateien der <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> Ereignis als behandelt, <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A> wird nicht aufgerufen.  
  
 Wenn Sie den Klassenhandler für diese verwenden, um das Ereignis als behandelt markiert werden, Sie möglicherweise Auswirkungen auf die folgenden Ereignisse: <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> und <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>. Eines dieser Ereignisse kann ausgelöst werden, auf dem empfangenden Element beim <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> empfangen wird.  
  
 Wenn Sie dieses Ereignis in eine Klassenbehandlung als behandelt markiert haben, werden dennoch Unterereignisse ausgelöst. Sie kann jedoch zum behandelten Zustand in den Ereignisdaten übergeben werden. Wenn das Ereignis in der Klassenbehandlung behandelt wird, Instanzhandler für die Unterereignisse werden nicht aufgerufen, wenn Sie explizit verwenden <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> mit `handledEventsToo` `true` um Handler anfügen. Klassenhandler werden ebenfalls nicht aufgerufen, wenn diese Klassenhandler registriert wurden die <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> Signatur mit `handledEventsToo` `true`. Durch Verarbeiten <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A>, Sie sind, dass die Klassenbehandlung für alle möglichen Aktionen mit gedrückter Gleichzeichen. Dieses Verhalten kann unerwünscht sein. Daher vorsichtig, wenn Sie dieser virtuellen Methode verwenden, um die Ereignisse als behandelt markiert.  
  
 Jedes der direkten Schaltfläche-spezifische Ereignisse verfügt auch über ein virtuelles auf *-Methode. Berücksichtigen Sie, ob überschreiben diese Schaltfläche-spezifische Klassenhandler besser geeignet sein kann.  
  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert. Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.MouseButtonEventArgs" />, das die Ereignisdaten enthält. Die Ereignisdaten melden, dass die linke Maustaste gedrückt wurde.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" />-Routingereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> Ereignis angezeigt wird, eine Tunneling-Route zu folgen, durchläuft jedoch tatsächlich eine indirekte Möglichkeit. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> ist der zugrunde liegenden Ereignis, Tunnel weitergeleitet, und jede <xref:System.Windows.ContentElement> entlang des Ereignisses Route durchläuft das direkte Routingereignis auslösen <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown>. Obwohl Sie markieren können die <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> Ereignis für dieses Element als behandelt, zum behandelte Zustand ist nicht Ereignisroute weitergegeben auf andere Elemente auf der Ereignisroute. Allerdings kann es sinnvoll sein, das Ereignis als behandelt, um zu verhindern, dass allgemeine Instanzhandler zu markieren (solche, die keine Berechnung angegeben `handledEventsToo`) aus aufgerufen wurde.  
  
 Die Standardimplementierung für allgemeine Maus Ereignisbehandlung in <xref:System.Windows.ContentElement> überwacht <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> und konvertiert ihn in ein entsprechendes lokales Ereignis. Wenn Sie diese Logik überschreiben möchten, müssen Sie eine abgeleitete Klasse erstellen. Registrieren Sie im statischen Konstruktor der abgeleiteten Klasse einen alternativen Klassenhandler für <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>. Die Behandlung von Verhalten der Maus kann nicht geändert werden <xref:System.Windows.ContentElement> durch Außerkraftsetzen von <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A>.  
  
 Alternativ können Sie diese Methode überschreiben, um Ereignisbehandlung für einen bestimmten Maus Status zu ändern. Egal, ob Sie die basisimplementierung aufgerufen werden, hängt von Ihrem Szenario ab. Standardbehandlung Eingabe für dieses Mausereignis auf den Vorgängerklassen, die auch zum Aufrufen erwarten Basis aufgerufen deaktiviert <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A>. Sie können z. B. Ableiten von <xref:System.Windows.Controls.Button> und überschreiben <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A> in die abgeleitete Klasse ohne Aufrufen der basisimplementierung; allerdings überschreiben dies deaktiviert den <xref:System.Windows.Controls.Primitives.ButtonBase.Click> Ereignis.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.MouseButtonEventArgs" />, das die Ereignisdaten enthält. Die Ereignisdaten melden, dass die linke Maustaste losgelassen wurde.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" />-Routingereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> Ereignis angezeigt wird, eine Tunneling-Route zu folgen, durchläuft jedoch tatsächlich eine indirekte Möglichkeit. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> ist der zugrunde liegenden Ereignis, Tunnel weitergeleitet, und jede <xref:System.Windows.ContentElement> entlang des Ereignisses Route durchläuft das direkte Routingereignis auslösen <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp>. Obwohl Sie markieren können die <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> Ereignis für dieses Element als behandelt, zum behandelte Zustand ist nicht Ereignisroute weitergegeben auf andere Elemente auf der Ereignisroute. Allerdings kann es sinnvoll sein, das Ereignis als behandelt, um zu verhindern, dass allgemeine Instanzhandler zu markieren (solche, die keine Berechnung angegeben `handledEventsToo`) aus aufgerufen wurde.  
  
 Die Standardimplementierung für allgemeine Maus Ereignisbehandlung in <xref:System.Windows.ContentElement> überwacht <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> und konvertiert ihn in ein entsprechendes lokales Ereignis. Wenn Sie diese Logik überschreiben möchten, müssen Sie eine abgeleitete Klasse erstellen. Registrieren Sie im statischen Konstruktor der abgeleiteten Klasse einen alternativen Klassenhandler für <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>. Die Behandlung von Verhalten der Maus kann nicht geändert werden <xref:System.Windows.ContentElement> durch Außerkraftsetzen von <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.MouseEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert. Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.MouseButtonEventArgs" />, das die Ereignisdaten enthält. Die Ereignisdaten melden, dass die rechte Maustaste gedrückt wurde.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" />-Routingereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> Ereignis angezeigt wird, eine Tunneling-Route zu folgen, durchläuft jedoch tatsächlich eine indirekte Möglichkeit. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> ist der zugrunde liegenden Ereignis, Tunnel weitergeleitet, und jede <xref:System.Windows.ContentElement> entlang des Ereignisses Route durchläuft das direkte Routingereignis auslösen <xref:System.Windows.ContentElement.MouseRightButtonDown>. Obwohl Sie markieren können die <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> Ereignis für dieses Element als behandelt, zum behandelte Zustand ist nicht Ereignisroute weitergegeben auf andere Elemente auf der Ereignisroute. Allerdings kann es sinnvoll sein, das Ereignis als behandelt, um zu verhindern, dass allgemeine Instanzhandler zu markieren (solche, die keine Berechnung angegeben `handledEventsToo`) aus aufgerufen wurde.  
  
 Die Standardimplementierung für allgemeine Maus Ereignisbehandlung in <xref:System.Windows.ContentElement> überwacht <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> und konvertiert ihn in ein entsprechendes lokales Ereignis. Wenn Sie diese Logik überschreiben möchten, müssen Sie eine abgeleitete Klasse erstellen. Registrieren Sie im statischen Konstruktor der abgeleiteten Klasse einen alternativen Klassenhandler für <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>. Die Behandlung von Verhalten der Maus kann nicht geändert werden <xref:System.Windows.ContentElement> durch Außerkraftsetzen von <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A>.  
  
 Alternativ können Sie diese Methode überschreiben, um Ereignisbehandlung für einen bestimmten Maus Status zu ändern. Egal, ob Sie die basisimplementierung aufgerufen werden, hängt von Ihrem Szenario ab. Standardbehandlung Eingabe für dieses Mausereignis auf den Vorgängerklassen, die auch zum Aufrufen erwarten Basis aufgerufen deaktiviert <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A>. Sie können z. B. Ableiten von <xref:System.Windows.Controls.Control> und überschreiben <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A> in die abgeleitete Klasse, ohne dass Base aufgerufen; deaktiviert diese Außerkraftsetzung jedoch den Kontext im Menü Dienste auf steuern können, die Teil sind von der <xref:System.Windows.Controls.Control> Standardverhalten.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.MouseButtonEventArgs" />, das die Ereignisdaten enthält. Die Ereignisdaten melden, dass die rechte Maustaste losgelassen wurde.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" />-Routingereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> Ereignis angezeigt wird, eine Tunneling-Route zu folgen, durchläuft jedoch tatsächlich eine indirekte Möglichkeit. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> ist der zugrunde liegenden Ereignis, Tunnel weitergeleitet, und jede <xref:System.Windows.ContentElement> entlang des Ereignisses Route durchläuft das direkte Routingereignis auslösen <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>. Obwohl Sie markieren können die <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> Ereignis für dieses Element als behandelt, zum behandelte Zustand ist nicht Ereignisroute weitergegeben auf andere Elemente auf der Ereignisroute. Allerdings kann es sinnvoll sein, das Ereignis als behandelt, um zu verhindern, dass allgemeine Instanzhandler zu markieren (solche, die keine Berechnung angegeben `handledEventsToo`) aus aufgerufen wurde.  
  
 Die Standardimplementierung für allgemeine Maus Ereignisbehandlung in <xref:System.Windows.ContentElement> überwacht <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> und konvertiert ihn in ein entsprechendes lokales Ereignis. Wenn Sie diese Logik überschreiben möchten, müssen Sie eine abgeleitete Klasse erstellen. Registrieren Sie im statischen Konstruktor der abgeleiteten Klasse einen alternativen Klassenhandler für <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>. Die Behandlung von Verhalten der Maus kann nicht geändert werden <xref:System.Windows.ContentElement> durch Außerkraftsetzen von <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.MouseButtonEventArgs" />, das die Ereignisdaten enthält. Die Ereignisdaten melden, dass eine oder mehrere Maustasten losgelassen wurden.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Schaltfläche Mausaktionen werden auch von einem dedizierten Eingabe-Manager behandelt. Andere Programmierfunktionen, die Schaltfläche Mausaktionen, z. B. Eingabe abhängig ist, und jeder Befehl von Bindungen, möglicherweise Handler für die Aktion aufrufen, bevor es als eine allgemeine Schaltfläche Mausaktion verfügbar gemacht wird. Wenn Sie diese markieren Eingabedateien der <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> Ereignis als behandelt, <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A> wird nicht aufgerufen.  
  
 Wenn Sie den Klassenhandler für diese verwenden, um das Ereignis als behandelt markiert werden, Sie möglicherweise Auswirkungen auf die folgenden Ereignisse: <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> und <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>. Eines dieser Ereignisse können für das empfangende Element ausgelöst werden beim <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> empfangen wird.  
  
 Wenn Sie dieses Ereignis in eine Klassenbehandlung als behandelt markiert haben, werden dennoch Unterereignisse ausgelöst. Sie kann jedoch zum behandelten Zustand in den Ereignisdaten übergeben werden. Wenn das Ereignis in der Klassenbehandlung behandelt wird, Instanzhandler für die Unterereignisse werden nicht aufgerufen, wenn Sie explizit verwenden <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> mit `handledEventsToo` `true` um Handler anfügen. Klassenhandler werden ebenfalls nicht aufgerufen, wenn diese Klassenhandler registriert wurden die <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> Signatur mit `handledEventsToo` `true`. Durch Verarbeiten <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A>, Sie sind, dass die Klassenbehandlung für alle möglichen Aktionen Gleichzeichen. Dieses Verhalten kann unerwünscht sein. Daher vorsichtig, wenn Sie dieser virtuellen Methode verwenden, um die Ereignisse als behandelt markiert.  
  
 Jedes der direkten Schaltfläche-spezifische Ereignisse verfügt auch über ein virtuelles auf *-Methode. Berücksichtigen Sie, ob überschreiben diese Schaltfläche-spezifische Klassenhandler besser geeignet sein kann.  
  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseWheel">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.MouseWheelEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert. Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.QueryContinueDragEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert. Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewQueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.StylusButtonEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert. Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.StylusButtonEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert. Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.StylusDownEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert. Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.StylusEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert. Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.StylusEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert. Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.StylusEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert. Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.StylusEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert. Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert. Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.StylusEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert. Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTextInput">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.TextCompositionEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert. Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
        <altmember cref="E:System.Windows.ContentElement.PreviewTextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Input.TouchEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Stellt Klassenbehandlung für das <see cref="E:System.Windows.ContentElement.PreviewTouchDown" />-Routingereignis bereit, das auftritt, wenn eine Fingereingabe in diesem Element erfasst wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> Methode hat keine Standardimplementierung. Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> in einer abgeleiteten Klasse zum Behandeln der <xref:System.Windows.ContentElement.PreviewTouchDown> Ereignis. Achten Sie darauf, dass Sie der Basisklasse aufgerufen <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> Methode, damit die Basisklassen das Ereignis empfangen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Input.TouchEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Stellt Klassenbehandlung für das <see cref="E:System.Windows.ContentElement.PreviewTouchMove" />-Routingereignis bereit, das auftritt, wenn sich eine Fingereingabe innerhalb dieses Elements bewegt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> Methode hat keine Standardimplementierung. Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> in einer abgeleiteten Klasse zum Behandeln der <xref:System.Windows.ContentElement.PreviewTouchMove> Ereignis. Achten Sie darauf, dass Sie der Basisklasse aufgerufen <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> Methode, damit die Basisklassen das Ereignis empfangen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Input.TouchEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Stellt Klassenbehandlung für das <see cref="E:System.Windows.ContentElement.PreviewTouchUp" />-Routingereignis bereit, das auftritt, wenn eine Fingereingabe innerhalb dieses Elements freigegeben wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> Methode hat keine Standardimplementierung. Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> in einer abgeleiteten Klasse zum Behandeln der <xref:System.Windows.ContentElement.PreviewTouchUp> Ereignis. Achten Sie darauf, dass Sie der Basisklasse aufgerufen <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> Methode, damit die Basisklassen das Ereignis empfangen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected internal virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.QueryContinueDragEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.DragDrop.QueryContinueDrag" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.QueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnQueryCursor">
      <MemberSignature Language="C#" Value="protected internal virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnQueryCursor(class System.Windows.Input.QueryCursorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnQueryCursor (e As QueryCursorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnQueryCursor(System::Windows::Input::QueryCursorEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.QueryCursorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.QueryCursorEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Mouse.QueryCursor" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.QueryCursor" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.StylusButtonEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.StylusButtonEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.StylusDownEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Stylus.StylusDown" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusEnter(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusEnter (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusEnter(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.StylusEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes angefügtes <see cref="E:System.Windows.Input.Stylus.StylusEnter" />-Ereignis von diesem Element ausgelöst wird. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen. Sie können Basis entweder vor oder nach Ihrem besondere Behandlung, je nach Ihren Anforderungen aufgerufen werden.  
  
 Der Zweck dieser Methode ähnelt [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Ereignis als behandelt markiert ist immer noch nützlich für typische Instanzhandler verhindert (diejenigen, die keinen angeben `handledEventsToo`) aufgerufen wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInAirMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.StylusEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.StylusEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Stylus.StylusInRange" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusLeave(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusLeave (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusLeave(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.StylusEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes angefügtes <see cref="E:System.Windows.Input.Stylus.StylusLeave" />-Ereignis von diesem Element ausgelöst wird. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen. Sie können Basis entweder vor oder nach Ihrem besondere Behandlung, je nach Ihren Anforderungen aufgerufen werden.  
  
 Der Zweck dieser Methode ähnelt [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Ereignis als behandelt markiert ist immer noch nützlich für typische Instanzhandler verhindert (diejenigen, die keinen angeben `handledEventsToo`) aufgerufen wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.StylusEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Stylus.StylusMove" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.StylusEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.StylusEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.Stylus.StylusUp" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnTextInput">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Das <see cref="T:System.Windows.Input.TextCompositionEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" />-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht. Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode hat keine Standardimplementierung. Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.  
  
 Der Zweck dieser Methode ähnelt der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln. In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis. Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird. Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen. Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.  
  
 Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <xref:System.Windows.EventManager.RegisterClassHandler%2A>, abgeleitete Klassen von <xref:System.Windows.ContentElement> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird. Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.TextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnTouchDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Input.TouchEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Stellt Klassenbehandlung für das <see cref="E:System.Windows.ContentElement.TouchDown" />-Routingereignis bereit, das auftritt, wenn eine Fingereingabe innerhalb dieses Elements erfasst wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.ContentElement.OnTouchDown%2A> Methode hat keine Standardimplementierung. Überschreiben Sie <xref:System.Windows.ContentElement.OnTouchDown%2A> in einer abgeleiteten Klasse zum Behandeln der <xref:System.Windows.ContentElement.TouchDown> Ereignis. Achten Sie darauf, dass Sie der Basisklasse aufgerufen <xref:System.Windows.ContentElement.OnTouchDown%2A> Methode, damit die Basisklassen das Ereignis empfangen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchEnter(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchEnter (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchEnter(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Input.TouchEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Stellt Klassenbehandlung für das <see cref="E:System.Windows.ContentElement.TouchEnter" />-Routingereignis bereit, das auftritt, wenn eine Fingereingabe von außerhalb der Grenzen dieses Elements nach innen verschoben wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.ContentElement.OnTouchEnter%2A> Methode hat keine Standardimplementierung. Überschreiben Sie <xref:System.Windows.ContentElement.OnTouchEnter%2A> in einer abgeleiteten Klasse zum Behandeln der <xref:System.Windows.ContentElement.TouchEnter> Ereignis. Achten Sie darauf, dass Sie der Basisklasse aufgerufen <xref:System.Windows.ContentElement.OnTouchEnter%2A> Methode, damit die Basisklassen das Ereignis empfangen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchLeave(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchLeave (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchLeave(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Input.TouchEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Stellt Klassenbehandlung für das <see cref="E:System.Windows.ContentElement.TouchLeave" />-Routingereignis bereit, das auftritt, wenn eine Fingereingabe von innerhalb der Grenzen dieses Elements nach außen verschoben wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.ContentElement.OnTouchLeave%2A> Methode hat keine Standardimplementierung. Überschreiben Sie <xref:System.Windows.ContentElement.OnTouchLeave%2A> in einer abgeleiteten Klasse zum Behandeln der <xref:System.Windows.ContentElement.TouchLeave> Ereignis. Achten Sie darauf, dass Sie der Basisklasse aufgerufen <xref:System.Windows.ContentElement.OnTouchLeave%2A> Methode, damit die Basisklassen das Ereignis empfangen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Input.TouchEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Stellt Klassenbehandlung für das <see cref="E:System.Windows.ContentElement.TouchMove" />-Routingereignis bereit, das auftritt, wenn sich eine Fingereingabe innerhalb dieses Elements bewegt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.ContentElement.OnTouchMove%2A> Methode hat keine Standardimplementierung. Überschreiben Sie <xref:System.Windows.ContentElement.OnTouchMove%2A> in einer abgeleiteten Klasse zum Behandeln der <xref:System.Windows.ContentElement.TouchMove> Ereignis. Achten Sie darauf, dass Sie der Basisklasse aufgerufen <xref:System.Windows.ContentElement.OnTouchMove%2A> Methode, damit die Basisklassen das Ereignis empfangen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Input.TouchEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Stellt Klassenbehandlung für das <see cref="E:System.Windows.ContentElement.TouchUp" />-Routingereignis bereit, das auftritt, wenn eine Fingereingabe innerhalb dieses Elements freigegeben wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.ContentElement.OnTouchUp%2A> Methode hat keine Standardimplementierung. Überschreiben Sie <xref:System.Windows.ContentElement.OnTouchUp%2A> in einer abgeleiteten Klasse zum Behandeln der <xref:System.Windows.ContentElement.TouchUp> Ereignis. Achten Sie darauf, dass Sie der Basisklasse aufgerufen <xref:System.Windows.ContentElement.OnTouchUp%2A> Methode, damit die Basisklassen das Ereignis empfangen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction">Die Richtung des angeforderten Fokusdurchlaufs.</param>
        <summary>Gibt beim Überschreiben in einer abgeleiteten Klasse das Element zurück, das den Fokus für eine bestimmte Richtung des Fokusdurchlaufs empfängt, ohne dass der Fokus tatsächlich auf das betreffende Element verschoben wird.</summary>
        <returns>Das Element, das den Fokus erhält, wenn <see cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" /> tatsächlich aufgerufen wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die standardmäßige Implementierung dieser Methode in dieser Klasse unvollständig, und gibt immer `null`.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewDragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragEnter;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn das Eingabesystem ein zugrunde liegendes Drag-Ereignis mit diesem Element als Drag-Ziel meldet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.PreviewDragEnter> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.PreviewDragEnter> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
<a name="routedEventInfo_PreviewDragEnter"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.PreviewDragEnterEvent>|  
|Routing-Strategie|Tunneling|  
|delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Das entsprechende bubbling-Ereignis ist <xref:System.Windows.ContentElement.DragEnter>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewDragEnter%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewDragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.PreviewDragEnter" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewDragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragLeave;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn das Eingabesystem ein zugrunde liegendes Drag-Ereignis mit diesem Element als Drag-Quelle meldet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.PreviewDragLeave> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.PreviewDragLeave> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
<a name="routedEventInfo_PreviewDragLeave"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.PreviewDragLeaveEvent>|  
|Routing-Strategie|Tunneling|  
|delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Das entsprechende bubbling-Ereignis ist <xref:System.Windows.ContentElement.DragLeave>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewDragLeave%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewDragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.PreviewDragLeave" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewDragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragOver;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn das Eingabesystem ein zugrunde liegendes Drag-Ereignis mit diesem Element als potenzielles Drop-Ziel meldet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.PreviewDragOver> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.PreviewDragOver> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
<a name="routedEventInfo_PreviewDragOver"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.PreviewDragOverEvent>|  
|Routing-Strategie|Tunneling|  
|delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Das entsprechende bubbling-Ereignis ist <xref:System.Windows.ContentElement.DragOver>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewDragOver%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewDragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragOverEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.PreviewDragOver" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDrop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewDrop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDrop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDrop;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn das Eingabesystem ein zugrunde liegendes Drop-Ereignis meldet, das dieses Element als Drop-Ziel aufweist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.PreviewDrop> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.PreviewDrop> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
<a name="routedEventInfo_PreviewDrop"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.PreviewDropEvent>|  
|Routing-Strategie|Tunneling|  
|delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Das entsprechende bubbling-Ereignis ist <xref:System.Windows.ContentElement.Drop>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewDrop%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewDropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDropEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.PreviewDrop" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewGiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ PreviewGiveFeedback;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn ein Drag &amp; Drop-Vorgang gestartet wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.ContentElement.PreviewGiveFeedback> Ereignis ermöglicht die Quelle des Drag-Ereignis, um die Darstellung des Mauszeigers zu ändern, um dem Benutzer während eines Drag & Drop-Vorgangs ein visuelles Feedback.  
  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.PreviewGiveFeedback> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.PreviewGiveFeedback> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
<a name="routedEventInfo_PreviewGiveFeedback"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.PreviewGiveFeedbackEvent>|  
|Routing-Strategie|Tunneling|  
|delegate|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   Das entsprechende bubbling-Ereignis ist <xref:System.Windows.ContentElement.GiveFeedback>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewGiveFeedback%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewGiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGiveFeedbackEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.PreviewGiveFeedback" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewGotKeyboardFocus;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewGotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn sich der Fokus der Tastatur auf diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Da dieses Ereignis Tunnel verwendet, routing, das Element, das Fokus besitzt möglicherweise ein untergeordnetes Element anstatt des Elements, dem der Ereignishandler tatsächlich angefügt. Überprüfen Sie die <xref:System.Windows.RoutedEventArgs.Source%2A> in die Ereignisdaten an das aktuelle Element zu bestimmen, die Fokus besitzt.  
  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
<a name="routedEventInfo_PreviewGotKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent>|  
|Routing-Strategie|Tunneling|  
|delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   Das entsprechende bubbling-Ereignis ist <xref:System.Windows.ContentElement.GotKeyboardFocus>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewGotKeyboardFocus%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGotKeyboardFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn eine Taste gedrückt wird, während sich der Fokus der Tastatur auf diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Schlüsselverarbeitung interagiert mit anderen Plattformfunktionen, z. B. Befehle und Text Zusammensetzung. Die <xref:System.Windows.ContentElement.KeyDown> Ereignis ist eine technisch anspruchsvolle Texteingabeereignis, die nicht auf bestimmte Steuerelemente erwartungsgemäß Verhalten. Dies ist, da einige Steuerelemente verfügen über Steuerelement Compositing oder Klassenbehandlung, die eine auf höherer Ebene Version des Texts enthält Eingabe Behandlung und verknüpfte Ereignisse.  
  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.PreviewKeyDown> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.PreviewKeyDown> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
<a name="routedEventInfo_PreviewKeyDown"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.PreviewKeyDownEvent>|  
|Routing-Strategie|Tunneling|  
|delegate|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   Das entsprechende bubbling-Ereignis ist <xref:System.Windows.ContentElement.KeyDown>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewKeyDown%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewKeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.PreviewKeyDown" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewKeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn eine Taste losgelassen wird, während sich der Fokus der Tastatur auf diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Schlüsselverarbeitung interagiert mit anderen Plattformfunktionen, z. B. Befehle und Text Zusammensetzung. Die <xref:System.Windows.ContentElement.KeyUp> Ereignis ist eine technisch anspruchsvolle Texteingabeereignis, die nicht auf bestimmte Steuerelemente erwartungsgemäß Verhalten. Dies ist, da einige Steuerelemente verfügen über Steuerelement Compositing oder Klassenbehandlung, die eine auf höherer Ebene Version des Texts enthält Eingabe Behandlung und verknüpfte Ereignisse. Informationen entnehmen Sie der Dokumentation für einzelne Steuerelemente.  
  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.PreviewKeyUp> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.PreviewKeyUp> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
<a name="routedEventInfo_PreviewKeyUp"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.PreviewKeyUpEvent>|  
|Routing-Strategie|Tunneling|  
|delegate|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   Das entsprechende bubbling-Ereignis ist <xref:System.Windows.ContentElement.KeyUp>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewKeyUp%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewKeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.PreviewKeyUp" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewLostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewLostKeyboardFocus;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewLostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn sich der Fokus der Tastatur nicht mehr auf diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Da dieses Ereignis Tunnel verwendet, routing, das Element, das Fokus verloren hat möglicherweise ein untergeordnetes Element anstatt des Elements, dem der Ereignishandler tatsächlich angefügt. Überprüfen Sie die <xref:System.Windows.RoutedEventArgs.Source%2A> in die Ereignisdaten an das aktuelle Element zu bestimmen, die Fokus verloren hat.  
  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
<a name="routedEventInfo_PreviewLostKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent>|  
|Routing-Strategie|Tunneling|  
|delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   Das entsprechende bubbling-Ereignis ist <xref:System.Windows.ContentElement.LostKeyboardFocus>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewLostKeyboardFocus%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewLostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewLostKeyboardFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn eine Maustaste gedrückt wird, während sich der Mauszeiger über diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.PreviewMouseDown> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.PreviewMouseDown> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
 Die <xref:System.Windows.ContentElement.PreviewMouseDown> Ereignis wird häufig zusammen mit entweder <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> oder <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>, das Drücken einer der beiden standard Maustasten entsprechen. <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> und <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> sind auch Routingereignisse, aber sie sind direkte Routingereignisse und die entsprechende Schaltfläche-spezifische-Ereignis wird ausgelöst, wenn die <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> -Ereignis dieses Element auf der Ereignisroute erreicht. Finden Sie unter "Hinweise" für <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> oder <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>.  
  
<a name="routedEventInfo_PreviewMouseDown"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.PreviewMouseDownEvent>|  
|Routing-Strategie|Tunneling|  
|delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Das entsprechende bubbling-Ereignis ist <xref:System.Windows.ContentElement.MouseDown>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.PreviewMouseDown" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn die linke Maustaste gedrückt wird, während sich der Mauszeiger über diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obwohl dies [Ereignisübersicht weitergeleitet](~/docs/framework/wpf/advanced/routed-events-overview.md) scheint eine Tunneling-Route durch eine Elementstruktur, führen es tatsächlich ist eine direkte Routingereignis, das ausgelöst wird, und die Elementstruktur nach jedem erneut <xref:System.Windows.ContentElement>.  
  
 Dieses Ereignis ist eine der mehrere verwandte Ereignisse, die die Schaltflächen Einzelheiten einer zugrunde liegenden Bericht <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> Ereignis, das ein angefügtes Ereignis handelt, die von jedem Element ein Ereignisroute verarbeitet wird.  
  
 Die Argumente für dieses Ereignis verfügbar machen, die Argumente des zugrunde liegenden <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> Ereignis. Wenn das Ereignis als behandelt der Ereignisroute markiert ist, werden die Maustaste los spezifischen Ereignisse dennoch ausgelöst; Allerdings müssen Handler bestimmter Ereignisse an die Schaltflächen hinzugefügt werden, durch explizites Aufrufen <xref:System.Windows.ContentElement.AddHandler%2A>, mit der Option zum Behandeln von Ereignissen, die bereits als behandelt markiert werden, damit Listener des Ereignisses ist.  
  
 Konzeptionell kann dieses Ereignis (und andere los Ereignisse auf <xref:System.Windows.ContentElement>) eine Maus "Service" sein (mit der Definition des Diensts bereitgestellt werden, indem die <xref:System.Windows.Input.Mouse> Klasse). Das Ereignis fügt den Komfort, überprüfen Sie die Maus Schaltflächenzuständen (linke Ecke, nach oben und unten) von der ursprünglichen Mausereignisse in Daten für das Ereignis nicht belegen. Erweiterte Szenarien, z. B. das Überprüfen von Zuständen von nicht standardmäßigen Schaltflächen, müssen Sie möglicherweise mit der [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] auf die <xref:System.Windows.Input.Mouse> -Klasse anstelle der für <xref:System.Windows.ContentElement>.  
  
<a name="routedEventInfo_PreviewMouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent>|  
|Routing-Strategie|Direkt|  
|delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn die linke Maustaste losgelassen wird, während sich der Mauszeiger über diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obwohl dies [Ereignisübersicht weitergeleitet](~/docs/framework/wpf/advanced/routed-events-overview.md) scheint eine Tunneling-Route durch eine Elementstruktur, führen es tatsächlich ist eine direkte Routingereignis, das ausgelöst wird, und die Elementstruktur nach jedem erneut <xref:System.Windows.ContentElement>.  
  
 Dieses Ereignis ist eine der mehrere verwandte Ereignisse, die die Schaltflächen Einzelheiten einer zugrunde liegenden Bericht <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> Ereignis, das ein angefügtes Ereignis handelt, die von jedem Element ein Ereignisroute verarbeitet wird.  
  
 Die Argumente für dieses Ereignis verfügbar machen, die Argumente des zugrunde liegenden <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> Ereignis. Wenn das Ereignis als behandelt der Ereignisroute markiert ist, werden die Maustaste los spezifischen Ereignisse dennoch ausgelöst; Allerdings müssen Handler bestimmter Ereignisse an die Schaltflächen hinzugefügt werden, durch explizites Aufrufen <xref:System.Windows.ContentElement.AddHandler%2A>, mit der Option zum Behandeln von Ereignissen, die bereits als behandelt markiert werden, damit Listener des Ereignisses ist.  
  
 Konzeptionell kann dieses Ereignis (und andere los Ereignisse auf <xref:System.Windows.ContentElement>) eine Maus "Service" sein (mit der Definition des Diensts bereitgestellt werden, indem die <xref:System.Windows.Input.Mouse> Klasse). Das Ereignis fügt den Komfort, überprüfen Sie die Maus Schaltflächenzuständen (linke Ecke, nach oben und unten) von der ursprünglichen Mausereignisse in Daten für das Ereignis nicht belegen. Erweiterte Szenarien, z. B. das Überprüfen von Zuständen von nicht standardmäßigen Schaltflächen, müssen Sie möglicherweise mit der [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] auf die <xref:System.Windows.Input.Mouse> -Klasse anstelle der für <xref:System.Windows.ContentElement>.  
  
<a name="routedEventInfo_PreviewMouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent>|  
|Routing-Strategie|Direkt|  
|delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler PreviewMouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler PreviewMouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ PreviewMouseMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn der Mauszeiger bewegt wird, während er sich über diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis tritt auf, wenn der Mauszeiger in der Elementgrenzen weitergegeben werden und auch wenn der Mauszeiger bewegt wird während des Bestehens der immer noch innerhalb der Grenzen des Elements.  
  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.PreviewMouseMove> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.PreviewMouseMove> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
<a name="routedEventInfo_PreviewMouseMove"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.PreviewMouseMoveEvent>|  
|Routing-Strategie|Tunneling|  
|delegate|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Das entsprechende bubbling-Ereignis ist <xref:System.Windows.ContentElement.MouseMove>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewMouseMove%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.PreviewMouseMove" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn die rechte Maustaste gedrückt wird, während sich der Mauszeiger über diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obwohl dies [Ereignisübersicht weitergeleitet](~/docs/framework/wpf/advanced/routed-events-overview.md) scheint eine Tunneling-Route durch eine Elementstruktur, führen es tatsächlich ist eine direkte Routingereignis, das ausgelöst wird, und die Elementstruktur nach jedem erneut <xref:System.Windows.ContentElement>.  
  
 Dieses Ereignis ist eine der mehrere verwandte Ereignisse, die die Schaltflächen Einzelheiten einer zugrunde liegenden Bericht <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> Ereignis, das ein angefügtes Ereignis handelt, die von jedem Element ein Ereignisroute verarbeitet wird.  
  
 Die Argumente für dieses Ereignis verfügbar machen, die Argumente des zugrunde liegenden <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> Ereignis. Wenn das Ereignis als behandelt der Ereignisroute markiert ist, werden die Maustaste los spezifischen Ereignisse dennoch ausgelöst; Allerdings müssen Handler bestimmter Ereignisse an die Schaltflächen hinzugefügt werden, durch explizites Aufrufen <xref:System.Windows.ContentElement.AddHandler%2A>, mit der Option zum Behandeln von Ereignissen, die bereits als behandelt markiert werden, damit Listener des Ereignisses ist.  
  
 Konzeptionell kann dieses Ereignis (und andere los Ereignisse auf <xref:System.Windows.ContentElement>) eine Maus "Service" sein (mit der Definition des Diensts bereitgestellt werden, indem die <xref:System.Windows.Input.Mouse> Klasse). Das Ereignis fügt den Komfort, überprüfen Sie die Maus Schaltflächenzuständen (linke Ecke, nach oben und unten) von der ursprünglichen Mausereignisse in Daten für das Ereignis nicht belegen. Erweiterte Szenarien, z. B. das Überprüfen von Zuständen von nicht standardmäßigen Schaltflächen, müssen Sie möglicherweise mit der [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] auf die <xref:System.Windows.Input.Mouse> -Klasse anstelle der für <xref:System.Windows.ContentElement>.  
  
<a name="routedEventInfo_PreviewMouseRightButtonDown"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent>|  
|Routing-Strategie|Direkt|  
|delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn die rechte Maustaste losgelassen wird, während sich der Mauszeiger über diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obwohl dies [Ereignisübersicht weitergeleitet](~/docs/framework/wpf/advanced/routed-events-overview.md) scheint eine Tunneling-Route durch eine Elementstruktur, führen es tatsächlich ist eine direkte Routingereignis, das ausgelöst wird, und die Elementstruktur nach jedem erneut <xref:System.Windows.ContentElement>.  
  
 Dieses Ereignis ist eine der mehrere verwandte Ereignisse, die die Schaltflächen Einzelheiten einer zugrunde liegenden Bericht <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> Ereignis, das ein angefügtes Ereignis handelt, die von jedem Element ein Ereignisroute verarbeitet wird.  
  
 Die Argumente für dieses Ereignis verfügbar machen, die Argumente des zugrunde liegenden <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> Ereignis. Wenn das Ereignis als behandelt der Ereignisroute markiert ist, werden die Maustaste los spezifischen Ereignisse dennoch ausgelöst; Allerdings müssen Handler bestimmter Ereignisse an die Schaltflächen hinzugefügt werden, durch explizites Aufrufen <xref:System.Windows.ContentElement.AddHandler%2A>, mit der Option zum Behandeln von Ereignissen, die bereits als behandelt markiert werden, damit Listener des Ereignisses ist.  
  
 Konzeptionell kann dieses Ereignis (und andere los Ereignisse auf <xref:System.Windows.ContentElement>) eine Maus "Service" sein (mit der Definition des Diensts bereitgestellt werden, indem die <xref:System.Windows.Input.Mouse> Klasse). Das Ereignis fügt den Komfort, überprüfen Sie die Maus Schaltflächenzuständen (linke Ecke, nach oben und unten) von der ursprünglichen Mausereignisse in Daten für das Ereignis nicht belegen. Erweiterte Szenarien, z. B. das Überprüfen von Zuständen von nicht standardmäßigen Schaltflächen, müssen Sie möglicherweise mit der [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] auf die <xref:System.Windows.Input.Mouse> -Klasse anstelle der für <xref:System.Windows.ContentElement>.  
  
<a name="routedEventInfo_PreviewMouseRightButtonUp"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent>|  
|Routing-Strategie|Direkt|  
|delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn eine Maustaste losgelassen wird, während sich der Mauszeiger über diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.PreviewMouseUp> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.PreviewMouseUp> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
 Die <xref:System.Windows.ContentElement.PreviewMouseUp> Ereignis wird häufig zusammen mit entweder <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> oder <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>, das Drücken einer der beiden standard Maustasten entsprechen. <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> und <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> sind auch Routingereignisse, aber sie sind direkte Routingereignisse und die entsprechende Schaltfläche-spezifische-Ereignis wird ausgelöst, wenn die <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> -Ereignis dieses Element auf der Ereignisroute erreicht. Finden Sie unter "Hinweise" für <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> oder <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>.  
  
<a name="routedEventInfo_PreviewMouseUp"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.PreviewMouseUpEvent>|  
|Routing-Strategie|Tunneling|  
|delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Das entsprechende bubbling-Ereignis ist <xref:System.Windows.ContentElement.MouseUp>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.PreviewMouseUp" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ PreviewMouseWheel;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn der Benutzer das Mausrad dreht, während sich der Mauszeiger über diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Fokus oder die Maus erfasst haben Vorrang vor, in dem der Mauszeiger befindet; Deshalb, wenn Sie dieses Ereignis von einem Element fokussierte oder erfasste erhalten, möglicherweise der Mauszeiger über einem anderen Element nicht.  
  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.PreviewMouseMove> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.PreviewMouseMove> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
<a name="routedEventInfo_PreviewMouseWheel"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.PreviewMouseWheelEvent>|  
|Routing-Strategie|Tunneling|  
|delegate|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   Das entsprechende bubbling-Ereignis ist <xref:System.Windows.ContentElement.MouseWheel>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewMouseWheel%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseWheelEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.PreviewMouseWheel" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewQueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewQueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ PreviewQueryContinueDrag;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn sich der Status der Tastatur oder der Maustaste während eines Drag &amp; Drop-Vorgangs ändert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> Ereignis ermöglicht der Ziehquelle deklarieren, ob der Drag-and-Drop-Vorgang abgebrochen werden soll.  
  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
<a name="routedEventInfo_PreviewQueryContinueDrag"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.PreviewQueryContinueDragEvent>|  
|Routing-Strategie|Tunneling|  
|delegate|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   Das entsprechende bubbling-Ereignis ist <xref:System.Windows.ContentElement.QueryContinueDrag>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewQueryContinueDrag%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewQueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewQueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewQueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewQueryContinueDragEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.PreviewQueryContinueDrag" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn die Stifttaste gedrückt wird, während sich der Zeiger über diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.PreviewStylusButtonDown> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.PreviewStylusButtonDown> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
 Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein. Weitere Informationen finden Sie unter [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusButtonDown"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.PreviewStylusButtonDownEvent>|  
|Routing-Strategie|Tunneling|  
|delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   Das entsprechende bubbling-Ereignis ist <xref:System.Windows.ContentElement.StylusButtonDown>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewStylusButtonDown%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn die Stifttaste losgelassen wird, während sich der Zeiger über diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.PreviewStylusButtonUp> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.PreviewStylusButtonUp> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
 Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein. Weitere Informationen finden Sie unter [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusButtonUp"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.PreviewStylusButtonUpEvent>|  
|Routing-Strategie|Tunneling|  
|delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   Das entsprechende bubbling-Ereignis ist <xref:System.Windows.ContentElement.StylusButtonUp>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewStylusButtonUp%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler PreviewStylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ PreviewStylusDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn der Stift den Digitizer berührt, während dieser sich über diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.PreviewStylusDown> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.PreviewStylusDown> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
 Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein. Weitere Informationen finden Sie unter [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusDown"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.PreviewStylusDownEvent>|  
|Routing-Strategie|Tunneling|  
|delegate|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   Das entsprechende bubbling-Ereignis ist <xref:System.Windows.ContentElement.StylusDown>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewStylusDown%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.PreviewStylusDown" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInAirMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn der Stift über ein Element bewegt wird, ohne den Digitizer zu berühren.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.PreviewStylusInAirMove> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.PreviewStylusInAirMove> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
 Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein. Weitere Informationen finden Sie unter [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusInAirMove"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.PreviewStylusInAirMoveEvent>|  
|Routing-Strategie|Tunneling|  
|delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Das entsprechende bubbling-Ereignis ist <xref:System.Windows.ContentElement.StylusInAirMove>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewStylusInAirMove%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInAirMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInRange;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn sich der Tablettstift nah genug am Digitizer befindet, um erkannt zu werden, während er sich über diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.PreviewStylusInRange> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.PreviewStylusInRange> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
 Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein. Weitere Informationen finden Sie unter [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusInRange"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.PreviewStylusInRangeEvent>|  
|Routing-Strategie|Tunneling|  
|delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Das entsprechende bubbling-Ereignis ist <xref:System.Windows.ContentElement.StylusInRange>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewStylusInRange%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInRangeEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.PreviewStylusInRange" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn der Tablettstift bewegt wird, während er sich über dem Element befindet. Der Tablettstift muss während der Erkennung durch den Digitizer bewegt werden, damit dieses Ereignis ausgelöst wird, andernfalls wird stattdessen <see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" /> ausgelöst.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.PreviewStylusMove> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.PreviewStylusMove> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
 Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein. Weitere Informationen finden Sie unter [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusMove"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.PreviewStylusMoveEvent>|  
|Routing-Strategie|Tunneling|  
|delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Das entsprechende bubbling-Ereignis ist <xref:System.Windows.ContentElement.StylusMove>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewStylusMove%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.PreviewStylusMove" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusOutOfRange;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn sich der Stift zu weit vom Digitizer entfernt befindet, um erkannt zu werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.PreviewStylusOutOfRange> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.PreviewStylusOutOfRange> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
 Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein. Weitere Informationen finden Sie unter [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusOutOfRange"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent>|  
|Routing-Strategie|Tunneling|  
|delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Das entsprechende bubbling-Ereignis ist <xref:System.Windows.ContentElement.StylusOutOfRange>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewStylusOutOfRange%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusOutOfRangeEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.PreviewStylusOutOfRange" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ PreviewStylusSystemGesture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn ein Benutzer eine von mehreren Gesten ausführt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zu Gesten, finden Sie unter <xref:System.Windows.Input.SystemGesture>.  
  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.PreviewStylusSystemGesture> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.PreviewStylusSystemGesture> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
 Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein. Weitere Informationen finden Sie unter [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusSystemGesture"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.PreviewStylusSystemGestureEvent>|  
|Routing-Strategie|Tunneling|  
|delegate|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   Das entsprechende bubbling-Ereignis ist <xref:System.Windows.ContentElement.StylusSystemGesture>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewStylusSystemGesture%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusSystemGestureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.PreviewStylusSystemGesture" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn der Benutzer den Tablettstift vom Digitizer hebt, während er sich über diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.PreviewStylusDown> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.PreviewStylusDown> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
 Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein. Weitere Informationen finden Sie unter [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusUp"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.PreviewStylusUpEvent>|  
|Routing-Strategie|Tunneling|  
|delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Das entsprechende bubbling-Ereignis ist <xref:System.Windows.ContentElement.StylusUp>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewStylusUp%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.PreviewStylusUp" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler PreviewTextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewTextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ PreviewTextInput;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewTextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn dieses Element Text geräteunabhängig empfängt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.ContentElement.PreviewTextInput> Ereignis ermöglicht, eine Komponente oder Anwendung, die für die Texteingabe in einem geräteunabhängig empfängt überwachen. Die Tastatur ist das primäre Mittel <xref:System.Windows.ContentElement.PreviewTextInput>; Sprache, Handschrift und andere Eingabegeräte können jedoch auch generieren <xref:System.Windows.ContentElement.PreviewTextInput>.  
  
 Aufgrund von Tastenkombinationen – entweder in der Standardeinstellung Tastaturen oder über den Eingabemethoden-Editoren – mehrere wichtige Ereignisse können nur ein Text-Eingabeereignis auslösen.  
  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.PreviewTextInput> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.PreviewTextInput> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
<a name="routedEventInfo_PreviewTextInput"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.PreviewTextInputEvent>|  
|Routing-Strategie|Tunneling|  
|delegate|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   Das entsprechende bubbling-Ereignis ist <xref:System.Windows.ContentElement.TextInput>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewTextInput%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewTextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTextInputEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.PreviewTextInput" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewTouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn ein Finger den Bildschirm berührt und sich dieser über diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wird standardmäßig die <xref:System.Windows.ContentElement.PreviewTouchDown> und <xref:System.Windows.ContentElement.TouchDown> Ereignisse werden nicht ausgeführt, bis ein Finger den Bildschirm berührt und verschiebt. Einen Finger auf dem Bildschirm drücken und gedrückt halten, ohne diesen zu bewegen dadurch drücken Sie dann aus, und halten Sie Verhalten einer <xref:System.Windows.Input.Stylus>. Das Gedrückthalteverhalten ist gleichbedeutend mit der Maustaste.  
  
 Zu bewirken, dass die <xref:System.Windows.ContentElement.PreviewTouchDown> und <xref:System.Windows.ContentElement.TouchDown> Festlegen von Ereignissen, die als ein Finger den Bildschirm berührt die <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> angefügten Eigenschaft, um `false` für dieses Element.  
  
<a name="routedEventInfo_PreviewTouchDown"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.PreviewTouchDownEvent>|  
|Routing-Strategie|Tunneling|  
|delegate|Eine <xref:System.EventHandler%601> vom Typ <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Das entsprechende bubbling-Ereignis ist <xref:System.Windows.ContentElement.TouchDown>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewTouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.PreviewTouchDown" />-Routingereignis.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewTouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchMove;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn sich ein Finger auf dem Bildschirm bewegt, während sich der Finger über diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchMove"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.PreviewTouchMoveEvent>|  
|Routing-Strategie|Tunneling|  
|delegate|Eine <xref:System.EventHandler%601> vom Typ <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Das entsprechende bubbling-Ereignis ist <xref:System.Windows.ContentElement.TouchMove>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewTouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.PreviewTouchMove" />-Routingereignis.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewTouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn ein Finger vom Bildschirm genommen wird, während sich der Finger über diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchUp"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.PreviewTouchUpEvent>|  
|Routing-Strategie|Tunneling|  
|delegate|Eine <xref:System.EventHandler%601> vom Typ <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Das entsprechende bubbling-Ereignis ist <xref:System.Windows.ContentElement.TouchUp>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewTouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.PreviewTouchUp" />-Routingereignis.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.QueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ QueryContinueDrag;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn sich der Status der Tastatur oder der Maustaste während eines Drag &amp; Drop-Vorgangs ändert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.ContentElement.QueryContinueDrag> Ereignis ermöglicht die Quelle des Ziehvorgangs bestimmen, ob der Drag-and-Drop-Vorgang abgebrochen werden soll.  
  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.QueryContinueDrag> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.QueryContinueDrag> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
<a name="routedEventInfo_QueryContinueDrag"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.QueryContinueDragEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   Das entsprechende Tunneling-Ereignis ist <xref:System.Windows.ContentElement.PreviewQueryContinueDrag>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnQueryContinueDrag%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.QueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryContinueDragEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.QueryContinueDrag" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCursor">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.QueryCursorEventHandler QueryCursor;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.QueryCursorEventHandler QueryCursor" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.QueryCursor" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryCursor As QueryCursorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::QueryCursorEventHandler ^ QueryCursor;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.QueryCursorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn die Anzeige des Cursors angefordert wird. Dieses Ereignis wird immer dann für ein Element ausgelöst, wenn der Mauszeiger an eine neue Position bewegt wird, d  h., das Cursorobjekt muss möglicherweise in Abhängigkeit von seiner neuen Position geändert werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.QueryCursor> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.QueryCursor> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
 Der Cursor, die mit diesem Ereignisnamen verwiesen wird, ist nicht notwendigerweise der Textcursor (auch als Einfügemarke bezeichnet). Stattdessen wird der Cursor in diesem Kontext das Objekt, das die auf dem Bildschirm grafisch dargestellt, die im Zusammenhang mit mehreren möglichen Eingabe-bezogene Geräte oder Konzepte in Windows-Programmierung deklariert. Dieses Objekt wird dargestellt, indem die <xref:System.Windows.Input.Cursor> Klasse in WPF. Das WPF-Eingabesystem können Sie diesen Cursor zu ändern, wenn sie die auf dem Bildschirm Position des Mauszeigers darstellt. Sie können vordefinierte Werte aus der <xref:System.Windows.Input.Cursors> -Enumeration, oder Sie können einen benutzerdefinierten Cursor als Bilddatei deklarieren.  
  
 Überwacht die <xref:System.Windows.ContentElement.QueryCursor> Ereignis ist für eine effiziente Technik für die Verwaltung der Cursor nicht. Stattdessen sollten jedes Element mit einem eigenen Cursorverhalten definieren <xref:System.Windows.FrameworkContentElement.Cursor%2A> und <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>. Sie sollten nur auf verlassen <xref:System.Windows.ContentElement.QueryCursor> Wenn Sie die WPF-Frameworkebene Basiselemente nicht verwenden oder in außergewöhnlicher Umstände, in dem Definieren des Cursorverhaltens regelmäßig pro Element nicht Ihren Anforderungen entspricht. Weitere Informationen zum Implementieren von Cursorverhalten als Antwort auf <xref:System.Windows.ContentElement.QueryCursor>, finden Sie unter <xref:System.Windows.Input.QueryCursorEventHandler>.  
  
<a name="routedEventInfo_QueryCursor"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.QueryCursorEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|<xref:System.Windows.Input.QueryCursorEventHandler>|  
  
-   Es gibt keine definiertes entsprechendes Tunneling-Ereignis.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnQueryCursor%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="QueryCursorEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryCursorEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryCursorEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.QueryCursorEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryCursorEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryCursorEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.QueryCursor" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEvent">
      <MemberSignature Language="C#" Value="public void RaiseEvent (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseEvent(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseEvent (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RaiseEvent(System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RaiseEvent(System.Windows.RoutedEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Eine Instanz von <see cref="T:System.Windows.RoutedEventArgs" />, die die Ereignisdaten enthält und zudem das auszulösende Ereignis angibt.</param>
        <summary>Löst ein bestimmtes Routingereignis aus. Das auszulösende <see cref="T:System.Windows.RoutedEvent" /> wird in der <see cref="T:System.Windows.RoutedEventArgs" />-Instanz bestimmt, die als <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" />-Eigenschaft für diese Ereignisdaten bereitgestellt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `e` Parameter typisiert ist, als das allgemeine Basistyp für alle Routingereignisdaten; allerdings sollte die Ereignisdaten zugewiesen werden, als die spezifischste Ereignis-Datentyp, der für das Ereignis ausgelöst wird, verfügbar ist, da <xref:System.Windows.RoutedEventArgs> abgeleitete Klassen enthalten die tatsächliche Daten-Eigenschaften, die vorgesehen sind, für das spezifische Ereignis, wenn es ausgelöst wird.  
  
 <xref:System.Windows.RoutedEventArgs> ist nicht nur in die Eigenschaften des Ereignisses. Außerdem ermittelt es für die Routingereignis ausgelöst werden soll. Dieses Ereignis auslösen Muster und die Routingereignisdaten unterscheiden sich von [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] Ereignisse und Klassen, die in der Regel nur die Eigenschaften enthalten, die mit dem Ereignis verknüpft sind.  
  
   
  
## Examples  
 Im folgende Beispiel Ereignisdaten erstellt, fügt den Ereignisbezeichner an die Daten und verwendet dann die Ereignisdateninstanz ein benutzerdefiniertes Routingereignis ausgelöst werden soll.  
  
 [!code-csharp[ContentElementsSmorgasbord#RaiseEvent](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#raiseevent)]
 [!code-vb[ContentElementsSmorgasbord#RaiseEvent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#raiseevent)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAllTouchCaptures">
      <MemberSignature Language="C#" Value="public void ReleaseAllTouchCaptures ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseAllTouchCaptures() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ReleaseAllTouchCaptures" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseAllTouchCaptures ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseAllTouchCaptures();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt alle erfassten Fingereingabegeräte für das Element frei.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseMouseCapture">
      <MemberSignature Language="C#" Value="public void ReleaseMouseCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseMouseCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ReleaseMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseMouseCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseMouseCapture();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt die Erfassung von Mauseingaben frei, wenn für dieses Element die Erfassung festgelegt war.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn dieses Element die Sammlung nicht vorhanden war, hat das Aufrufen dieser Methode keine Auswirkung. Überprüfen Sie den Wert des <xref:System.Windows.ContentElement.IsMouseCaptured%2A> vor dem Aufrufen dieser Methode.  
  
   
  
## Examples  
 Die folgende Ereignishandler erfasst oder Mauseingaben aufzufangen entsprechend Maus Schaltflächenzuständen frei. Im Beispiel veranschaulicht die erfassten mausbewegungen für Alternative außer Bewegen des Mauszeigers Zwecke verwenden, die die [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].  
  
 [!code-csharp[ContentElementsSmorgasbord#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[ContentElementsSmorgasbord#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseStylusCapture">
      <MemberSignature Language="C#" Value="public void ReleaseStylusCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseStylusCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ReleaseStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseStylusCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseStylusCapture();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt das Erfassen der Eingaben von Tablettstiftgeräten frei, wenn für dieses Element die Erfassung festgelegt war.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn dieses Element die Sammlung nicht vorhanden war, hat das Aufrufen dieser Methode keine Auswirkung. Überprüfen Sie den Wert des <xref:System.Windows.ContentElement.IsStylusCaptured%2A> vor dem Aufrufen dieser Methode.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseTouchCapture">
      <MemberSignature Language="C#" Value="public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReleaseTouchCapture(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReleaseTouchCapture(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" />
      </Parameters>
      <Docs>
        <param name="touchDevice">Das freizugebende Gerät.</param>
        <summary>Versucht, das angegebene Fingereingabegerät von diesem Element freizugeben.</summary>
        <returns>
          <see langword="true" />, wenn das Fingereingabegerät freigegeben wurde, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="touchDevice" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Der Bezeichner des Routingereignisses, dem der Handler angefügt ist.</param>
        <param name="handler">Die spezifische Handlerimplementierung, die aus der Ereignishandlerauflistung dieses Elements entfernt werden soll.</param>
        <summary>Entfernt den angegebenen Routingereignishandler aus diesem Element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das häufigste Szenario für die Verwendung dieser [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] wird bei der Implementierung der [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] "Wrapper"-Ereignis, das bezieht sich auf ein benutzerdefiniertes Routingereignis, insbesondere beim Implementieren der "Remove"-Logik für Handler, an die [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] Ebene. Das folgenden Beispiel Abschnitt veranschaulicht dieses Szenario "Hinweise".  
  
 Beim Aufrufen dieser Methode hat keine Auswirkungen, gäbe es keine Handler registriert mit Kriterien, die die Eingabeparameter für den Methodenaufruf entsprechen.  
  
 Wenn mehr als ein Ereignishandler angefügt ist, die den abonnementkriterien, nur der erste Handler im Ereignisprotokoll Handler Store entfernt wird. Dieses Verhalten ist konsistent mit [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] Verhalten der `-=` Operator.  
  
 Weder `routedEvent` noch `handler` möglicherweise `null`. Bei dem Versuch, einen der Werte `null` wird eine Ausnahme ausgelöst.  
  
 Diese Methode ignoriert die `handledEventsToo` Parameterinformationen, das bereitgestellt wird, wenn der Handler wurde hinzugefügt, mit der <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> Signatur, die Handhabung von leerläufen bereits behandelt ermöglicht. Geben Sie entweder der Ereignishandler wird entfernt.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeCommandBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeCommandBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeCommandBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ShouldSerializeCommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeCommandBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeCommandBindings();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt zurück, ob in Serialisierungsprozessen der Inhalt der <see cref="P:System.Windows.ContentElement.CommandBindings" />-Eigenschaft für Instanzen dieser Klasse serialisiert werden soll.</summary>
        <returns>
          <see langword="true" />, wenn der <see cref="P:System.Windows.ContentElement.CommandBindings" />-Eigenschaftswert serialisiert werden soll, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Befehl zurück `true` Wenn <xref:System.Windows.ContentElement.CommandBindings%2A> lokal festgelegt ist.  
  
 Dies `ShouldSerialize` Methode wird bereitgestellt, da die <xref:System.Windows.UIElement.CommandBindings%2A> Eigenschaft verfügt nicht über einen einfachen Standardwert. Diese Methode gibt an, ob die-Eigenschaft ihren Standardwert geändert hat. Diese Methode wird in der Regel aufgerufen, wenn Sie entweder einen Designer oder entwickeln eigener Steuerelement einbinden einer <xref:System.Windows.UIElement>.  
  
 Weitere Informationen finden Sie unter [Definieren von Standardwerten mit der ShouldSerialize-Methode und die Methoden zurücksetzen](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeInputBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeInputBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeInputBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ShouldSerializeInputBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeInputBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeInputBindings();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt zurück, ob in Serialisierungsprozessen der Inhalt der <see cref="P:System.Windows.ContentElement.InputBindings" />-Eigenschaft für Instanzen dieser Klasse serialisiert werden soll.</summary>
        <returns>
          <see langword="true" />, wenn der <see cref="P:System.Windows.ContentElement.InputBindings" />-Eigenschaftswert serialisiert werden soll, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Befehl zurück `true` Wenn <xref:System.Windows.ContentElement.InputBindings%2A> lokal festgelegt ist.  
  
 Dies `ShouldSerialize` Methode wird bereitgestellt, da die <xref:System.Windows.UIElement.InputBindings%2A> Eigenschaft verfügt nicht über einen einfachen Standardwert. Diese Methode gibt an, ob die-Eigenschaft ihren Standardwert geändert hat. Diese Methode wird in der Regel aufgerufen, wenn Sie entweder einen Designer oder entwickeln eigener Steuerelement einbinden einer <xref:System.Windows.UIElement>.  
  
 Weitere Informationen finden Sie unter [Definieren von Standardwerten mit der ShouldSerialize-Methode und die Methoden zurücksetzen](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn die Stifttaste gedrückt wird, während sich der Zeiger über diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.StylusButtonDown> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.StylusButtonDown> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
 Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein. Weitere Informationen finden Sie unter [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusButtonDown"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.StylusButtonDownEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   Das entsprechende Tunneling-Ereignis ist <xref:System.Windows.ContentElement.PreviewStylusButtonDown>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnStylusButtonDown%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.StylusButtonDown" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn die Stifttaste losgelassen wird, während sich der Zeiger über diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.StylusButtonUp> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.StylusButtonUp> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
 Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein. Weitere Informationen finden Sie unter [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusButtonUp"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.StylusButtonUpEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   Das entsprechende Tunneling-Ereignis ist <xref:System.Windows.ContentElement.PreviewStylusButtonUp>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnStylusButtonUp%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.StylusButtonUp" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler StylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler StylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ StylusDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn der Stift den Digitizer berührt, während sich der Stift über diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.StylusDown> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.StylusDown> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
 Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein. Weitere Informationen finden Sie unter [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusDown"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.StylusDownEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   Das entsprechende Tunneling-Ereignis ist <xref:System.Windows.ContentElement.PreviewStylusDown>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnStylusDown%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.StylusDown" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusEnter As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusEnter;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn der Stift in den Bereich dieses Elements eintritt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.StylusEnter> ist eine [Ereignisübersicht weitergeleitet](~/docs/framework/wpf/advanced/routed-events-overview.md) , routing-Strategie für die direkte Ereignisbehandlung verwendet. Direkte Routingereignisse werden nicht auf einer Route ausgelöst. Stattdessen werden diese in demselben Element behandelt, in dem sie ausgelöst werden. Aktivieren sie jedoch andere Aspekte der Routingereignis-Verhalten, z. B. in Formaten-Ereignis ausgelöst.  
  
 Obwohl <xref:System.Windows.ContentElement.StylusEnter> verfolgt nach, wenn der Stift den Bereich eines Elements, das dieses Ereignis Weitere eintritt buchstäblich angibt, welches die <xref:System.Windows.ContentElement.IsStylusOver%2A> Eigenschaftswert geändert hat `false` auf `true` für dieses Element.  
  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.StylusEnter> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.StylusEnter> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
 Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein. Weitere Informationen finden Sie unter [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusEnter"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.StylusEnterEvent>|  
|Routing-Strategie|Direkt|  
|delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnStylusEnter%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.StylusEnter" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInAirMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn der Stift über ein Element bewegt wird, ohne den Digitizer zu berühren.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.StylusInAirMove> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.StylusInAirMove> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
 Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein. Weitere Informationen finden Sie unter [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusInAirMove"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.StylusInAirMoveEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Das entsprechende Tunneling-Ereignis ist <xref:System.Windows.ContentElement.PreviewStylusInAirMove>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnStylusInAirMove%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInAirMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.StylusInAirMove" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInRange;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn sich der Tablettstift nah genug am Digitizer befindet, um erkannt zu werden, während er sich über diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.StylusInRange> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.StylusInRange> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
 Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein. Weitere Informationen finden Sie unter [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusInRange"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.StylusInRangeEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Das entsprechende Tunneling-Ereignis ist <xref:System.Windows.ContentElement.PreviewStylusInRange>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnStylusInRange%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInRangeEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.StylusInRange" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusLeave As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusLeave;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn der Stift den Bereich des Elements verlässt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.StylusLeave> ist eine [Ereignisübersicht weitergeleitet](~/docs/framework/wpf/advanced/routed-events-overview.md) , routing-Strategie für die direkte Ereignisbehandlung verwendet. Direkte Routingereignisse werden nicht auf einer Route ausgelöst. Stattdessen werden diese in demselben Element behandelt, in dem sie ausgelöst werden. Aktivieren sie jedoch andere Aspekte der Routingereignis-Verhalten, z. B. in Formaten-Ereignis ausgelöst.  
  
 Obwohl <xref:System.Windows.ContentElement.StylusLeave> verfolgt nach, wenn der Stift den Bereich eines Elements, das dieses Ereignis mehr verlässt buchstäblich angibt, welches die <xref:System.Windows.ContentElement.IsStylusOver%2A> Eigenschaftswert geändert hat `true` auf `false` für dieses Element.  
  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.StylusLeave> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.StylusLeave> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
 Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein. Weitere Informationen finden Sie unter [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusLeave"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.StylusLeaveEvent>|  
|Routing-Strategie|Direkt|  
|delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnStylusLeave%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.StylusLeave" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn der Stift über das Element bewegt wird. Zum Auslösen dieses Ereignisses muss der Stift auf dem Digitizer bewegt werden. Andernfalls wird stattdessen <see cref="E:System.Windows.ContentElement.StylusInAirMove" /> ausgelöst.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.StylusMove> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.StylusMove> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
 Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein. Weitere Informationen finden Sie unter [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusMove"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.StylusMoveEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Das entsprechende Tunneling-Ereignis ist <xref:System.Windows.ContentElement.PreviewStylusMove>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnStylusMove%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.StylusMove" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusOutOfRange;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn der Stift zu weit vom Digitizer entfernt ist, um erkannt zu werden, während er sich über diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.StylusOutOfRange> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.StylusOutOfRange> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
 Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein. Weitere Informationen finden Sie unter [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusOutOfRange"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.StylusOutOfRangeEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Das entsprechende Tunneling-Ereignis ist <xref:System.Windows.ContentElement.PreviewStylusOutOfRange>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnStylusOutOfRange%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusOutOfRangeEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.StylusOutOfRange" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ StylusSystemGesture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn ein Benutzer eine von mehreren Gesten ausführt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zu Gesten, finden Sie unter <xref:System.Windows.Input.SystemGesture>.  
  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.StylusSystemGesture> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.StylusSystemGesture> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
 Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein. Weitere Informationen finden Sie unter [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusSystemGesture"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.StylusSystemGestureEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   Das entsprechende Tunneling-Ereignis ist <xref:System.Windows.ContentElement.PreviewStylusSystemGesture>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnStylusSystemGesture%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusSystemGestureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.StylusSystemGesture" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn ein Benutzer den Stift vom Digitizer hebt, während sich der Stift über diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.StylusUp> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.StylusUp> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
 Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein. Weitere Informationen finden Sie unter [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusUp"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.StylusUpEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Das entsprechende Tunneling-Ereignis ist <xref:System.Windows.ContentElement.PreviewStylusUp>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnStylusUp%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.StylusUp" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler TextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler TextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ TextInput;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.TextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn dieses Element Text geräteunabhängig empfängt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Dieses Ereignis möglicherweise bereits von der internen Implementierungen der zusammengesetzte Steuerelemente als behandelt markiert werden. Finden Sie unter folgenden angeführt.  
  
 Die <xref:System.Windows.ContentElement.TextInput> Ereignis bereits von der internen Implementierungen der zusammengesetzte Steuerelemente als behandelt markiert werden kann. Z. B. eine <xref:System.Windows.Controls.TextBox> ist ein zusammengesetztes Steuerelement, in dem die <xref:System.Windows.ContentElement.TextInput> Ereignis bereits als behandelt; innerhalb seiner Compositing markiert ist. Steuerelemente geschieht, weil das Steuerelement einige Arten von Eingaben, z. B. Pfeiltasten einstellungsproblem besondere Bedeutung für das Steuerelement zu interpretieren muss. Bei Verwendung von <xref:System.Windows.ContentElement.PreviewTextInput> des Ereignisses, in dem Sie Handler für die Texteingabe anfügen, können Sie bessere Ergebnisse erhalten. Diese Technik umgeht den meisten Fällen, in dem Steuerelement Zusammensetzung wurde bereits dieses Ereignis als behandelt markiert, und verhindert, dass den Ereignishandler empfängt das Ereignis auf der Ereignisroute.  
  
 Die <xref:System.Windows.ContentElement.TextInput> Ereignis ermöglicht, eine Komponente oder Anwendung, die für die Texteingabe in einem geräteunabhängig empfängt überwachen. Die Tastatur ist das primäre Mittel <xref:System.Windows.ContentElement.TextInput>, jedoch die Sprache, Handschrift und andere Eingabegeräte können auch die folgenden <xref:System.Windows.ContentElement.TextInput>.  
  
 Aufgrund von Tastenkombinationen – entweder in der Standardeinstellung Tastaturen oder über den Eingabemethoden-Editoren – mehrere Tastaturereignisse können nur ein Text-Eingabeereignis auslösen.  
  
 Dieses Ereignis erstellt einen Alias für die <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> angefügtes Ereignis für diese Klasse, damit <xref:System.Windows.ContentElement.TextInput> ist Teil der Klasse Member aufzulisten, wenn <xref:System.Windows.ContentElement> als einem Basiselement geerbt wird. Ereignishandler, die angefügt werden die <xref:System.Windows.ContentElement.TextInput> Ereignis an das zugrunde liegende angefügt sind <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.  
  
<a name="routedEventInfo_TextInput"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.TextInputEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   Das entsprechende Tunneling-Ereignis ist <xref:System.Windows.ContentElement.PreviewTextInput>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnTextInput%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TextInputEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.TextInput" />-Routingereignis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden. Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis. Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.  
  
 Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn ein Finger den Bildschirm berührt und sich dieser über diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wird standardmäßig die <xref:System.Windows.ContentElement.PreviewTouchDown> und <xref:System.Windows.ContentElement.TouchDown> Ereignisse werden nicht ausgeführt, bis ein Finger den Bildschirm berührt und verschiebt. Einen Finger auf dem Bildschirm drücken und gedrückt halten, ohne diesen zu bewegen dadurch drücken Sie dann aus, und halten Sie Verhalten einer <xref:System.Windows.Input.Stylus>. Das Gedrückthalteverhalten ist gleichbedeutend mit der Maustaste.  
  
 Zu bewirken, dass die <xref:System.Windows.ContentElement.PreviewTouchDown> und <xref:System.Windows.ContentElement.TouchDown> Festlegen von Ereignissen, die als ein Finger den Bildschirm berührt die <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> angefügten Eigenschaft, um `false` für dieses Element.  
  
<a name="routedEventInfo_TouchDown"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.TouchDownEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|Eine <xref:System.EventHandler%601> vom Typ <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Das entsprechende Tunneling-Ereignis ist <xref:System.Windows.ContentElement.PreviewTouchDown>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnTouchDown%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="TouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.TouchDown" />-Routingereignis.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnter">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchEnter As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchEnter;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn sich eine Fingereingabe in die Grenzen dieses Elements hineinbewegt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis wird immer dann ausgelöst, und zwar unabhängig davon, ob die Touch-Geräte für dieses Benutzeroberflächenelement erfasst wird.  
  
<a name="routedEventInfo_TouchEnter"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.TouchEnterEvent>|  
|Routing-Strategie|Direkt|  
|delegate|Eine <xref:System.EventHandler%601> vom Typ <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnTouchEnter%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.TouchEnter" />-Routingereignis.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCaptured">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.TouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCaptured As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCaptured { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft alle Fingereingabegeräte ab, die für dieses Element erfasst werden.</summary>
        <value>Eine Enumeration von <see cref="T:System.Windows.Input.TouchDevice" />-Objekten, die für dieses Element erfasst werden.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.TouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCapturedWithin As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCapturedWithin { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft alle Fingereingabegeräte ab, die für dieses Element oder seine untergeordneten Elemente in der visuellen Struktur erfasst werden.</summary>
        <value>Eine Enumeration von <see cref="T:System.Windows.Input.TouchDevice" />-Objekten, die für dieses Element oder seine untergeordneten Elemente in der visuellen Struktur erfasst werden.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.TouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesDirectlyOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesDirectlyOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft alle Fingereingabegeräte ab, die sich über diesem Element befinden.</summary>
        <value>Eine Enumeration von <see cref="T:System.Windows.Input.TouchDevice" />-Objekten, die sich über diesem Element befinden.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.TouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft alle Fingereingabegeräte ab, die sich über diesem Element oder seinen untergeordneten Elementen in der visuellen Struktur befinden.</summary>
        <value>Eine Enumeration von <see cref="T:System.Windows.Input.TouchDevice" />-Objekten, die sich über diesem Element oder seinen untergeordneten Elemente in der visuellen Struktur befinden.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeave">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchLeave As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchLeave;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn sich eine Fingereingabe aus den Grenzen dieses Elements herausbewegt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchLeave"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.TouchLeaveEvent>|  
|Routing-Strategie|Direkt|  
|delegate|Eine <xref:System.EventHandler%601> vom Typ <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnTouchLeave%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.TouchLeave" />-Routingereignis.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchMove;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn sich ein Finger auf dem Bildschirm bewegt, während sich der Finger über diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchMove"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.TouchMoveEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|Eine <xref:System.EventHandler%601> vom Typ <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Das entsprechende Tunneling-Ereignis ist <xref:System.Windows.ContentElement.PreviewTouchMove>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnTouchMove%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.TouchMove" />-Routingereignis.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn ein Finger vom Bildschirm genommen wird, während sich der Finger über diesem Element befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchUp"></a>   
## <a name="routed-event-information"></a>Informationen zum Routingereignis  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.ContentElement.TouchUpEvent>|  
|Routing-Strategie|Bubbling|  
|delegate|Eine <xref:System.EventHandler%601> vom Typ <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Das entsprechende Tunneling-Ereignis ist <xref:System.Windows.ContentElement.PreviewTouchUp>.  
  
-   Überschreiben Sie <xref:System.Windows.ContentElement.OnTouchUp%2A> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiziert das <see cref="E:System.Windows.ContentElement.TouchUp" />-Routingereignis.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
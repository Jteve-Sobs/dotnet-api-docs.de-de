<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ContentElement.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac53cec39524c57162a57591073e35fafea313c0d5d.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3cec39524c57162a57591073e35fafea313c0d5d</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.ContentElement">
          <source>Provides a WPF core-level base class for content elements.</source>
          <target state="translated">Stellt eine WPF-Hauptebenen-Basisklasse für Inhaltselemente bereit.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Windows.ContentElement">
          <source>Content elements are designed for flow-style presentation, using an intuitive markup-oriented layout model and a deliberately simple object model.</source>
          <target state="translated">Inhaltselemente sind auf die flüssige Präsentation ausgelegt, wobei ein intuitives, markuporientiertes Layoutmodell sowie ein vorsätzlich einfaches Objektmodell verwendet werden.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> defines the following common content characteristics:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> definiert die folgenden allgemeinen Inhaltseigenschaften:</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source>Input: All <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> derived classes provide support for basic input capture from keyboard, mouse, drag-and-drop operations, stylus controls, and accelerators.</source>
          <target state="translated">Eingabe: Alle <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> abgeleitete Klassen bieten Unterstützung für grundlegende Erfassung von Tastatur, Maus, Drag &amp; Drop-Vorgänge, Steuerelemente und Zugriffstasten Eingaben.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source>Focus: All <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> derived classes are potentially focusable.</source>
          <target state="translated">Fokus: Alle <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> abgeleitete Klassen sind möglicherweise den Fokus erhalten kann.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source>(However, the default focusable state for the <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> base class is <ph id="ph2">`false`</ph>.</source>
          <target state="translated">(Allerdings den Fokus erhalten kann Standardstatus für das <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> Basisklasse ist <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source>For details on how to make a <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> focusable, see <ph id="ph2">&lt;xref:System.Windows.ContentElement.Focusable%2A&gt;</ph>.) In addition, this class contains <ph id="ph3">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> that you can use for traversing the focus across related elements.</source>
          <target state="translated">Weitere Informationen zum Erstellen einer <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> den Fokus erhalten kann, finden Sie unter <ph id="ph2">&lt;xref:System.Windows.ContentElement.Focusable%2A&gt;</ph>.) Darüber hinaus diese Klasse enthält <ph id="ph3">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> , dass Sie zum Verschieben des Fokus auf zugehörige Elemente verwenden können.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source>Events: <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> includes events that are related to input and focus; it also includes events for changes in state.</source>
          <target state="translated">Ereignisse: <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> enthält Ereignisse im Zusammenhang mit der Eingabe und den Fokus; es enthält auch Ereignisse für Änderungen im Status.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source>In many cases, the <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> events are routed events.</source>
          <target state="translated">In vielen Fällen die <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> weitergeleitete Ereignisse können.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source>In some cases, routed events have both tunneling and bubbling routing strategies, raised as separate events in response to the same state or condition.</source>
          <target state="translated">In einigen Fällen weisen die Routingereignisse tunneling und bubbling routing Strategien, die als Reaktion auf das Bundesland oder der Bedingung separate Ereignisse ausgelöst.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source>Also, <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> defines <ph id="ph2">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> that can raise routed events and that can add or remove handlers to events.</source>
          <target state="translated">Darüber hinaus <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> definiert <ph id="ph2">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> auslösen können weitergeleitet werden, Ereignisse und, hinzufügen oder Entfernen von Ereignissen Handler.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> shares many common <ph id="ph2">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> with <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> weist viele derselben <ph id="ph2">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> mit <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source>These common <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> do not come from a shared class inheritance.</source>
          <target state="translated">Diese allgemeine <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> nicht von einer freigegebenen klassenvererbung stammen.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source>But they do share common naming, similar behavior, and similar internal implementation of <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> in each class.</source>
          <target state="translated">Jedoch sie allgemeine Benennung, ähnliches Verhalten und ähnliche interne Implementierung der <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> in jeder Klasse.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source>The similarity is because <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> are each classes that are an element base, although each has different intentions for its markup object model behavior.</source>
          <target state="translated">Die Ähnlichkeit ist, da <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> und <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> Klassen sind, die ein Element Basisentität sind zwar jeweils unterschiedliche Absichten für das Verhalten der Markup-Objektmodells.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source>In particular, <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> descends from <ph id="ph2">&lt;xref:System.Windows.Media.Visual&gt;</ph>, which provides the lower-level graphics support for rendering a <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> to a rectangular region within a composited window, whereas <ph id="ph4">&lt;xref:System.Windows.ContentElement&gt;</ph> defers rendering so that concepts more common to document scenarios, such as flow and wrapping, are more easily supported.</source>
          <target state="translated">Insbesondere <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> absteigend von <ph id="ph2">&lt;xref:System.Windows.Media.Visual&gt;</ph>, stellt die Grafiken auf niedrigerer Ebene zu unterstützen, für das Rendering einer <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> um einen rechteckigen Bereich innerhalb eines zusammengesetzten Fensters während <ph id="ph4">&lt;xref:System.Windows.ContentElement&gt;</ph> Rendering verzögert, damit weitere Konzepte Dokument-Szenarien, z. B. Fluss- und umbrechen gemeinsam sind leichter unterstützt.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source>These two related classes also implement the common interfaces <ph id="ph1">&lt;xref:System.Windows.IInputElement&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Media.Animation.IAnimatable&gt;</ph>.</source>
          <target state="translated">Diese beiden bezogene Klassen implementieren auch die gemeinsamen Schnittstellen <ph id="ph1">&lt;xref:System.Windows.IInputElement&gt;</ph> und <ph id="ph2">&lt;xref:System.Windows.Media.Animation.IAnimatable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> class does not yet define all aspects of a complete content element for flow-style presentation.</source>
          <target state="translated">Die <ph id="ph1">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> Klasse definiert keine noch alle Aspekte der vollständigen Inhaltselements für Präsentation.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.FrameworkContentElement" /&gt;</ph> is an immediately derived class of <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.FrameworkContentElement" /&gt;</ph> ist eine unmittelbar abgeleitete Klasse von <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.FrameworkContentElement" /&gt;</ph> includes a more complete set of additional members that support rendering a <ph id="ph2">&lt;see cref="T:System.Windows.FrameworkContentElement" /&gt;</ph> within a content host and using the WPF framework-level layout system.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.FrameworkContentElement" /&gt;</ph> enthält eine vollständige Reihe weiterer Member, die Renderingerweiterungen unterstützen ein <ph id="ph2">&lt;see cref="T:System.Windows.FrameworkContentElement" /&gt;</ph> innerhalb einer Inhaltshost und die WPF-Frameworkebene Layoutsystem verwenden.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> class.</source>
          <target state="translated">Initialisiert eine neue Instanz der <ph id="ph1">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>-Klasse.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="T:System.Windows.ContentElement">
          <source>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</source>
          <target state="translated">Fügt einen Routingereignishandler für ein bestimmtes Routingereignis hinzu, wobei der Handler der Handlerauflistung für das aktuelle Element hinzugefügt wird.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>An identifier for the routed event to be handled.</source>
          <target state="translated">Ein Bezeichner für das zu behandelnde Routingereignis.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>A reference to the handler implementation.</source>
          <target state="translated">Ein Verweis auf die Handlerimplementierung.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</source>
          <target state="translated">Fügt einen Routingereignishandler für ein bestimmtes Routingereignis hinzu, wobei der Handler der Handlerauflistung für das aktuelle Element hinzugefügt wird.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>You can add the same handler for the same event multiple times without raising an exception.</source>
          <target state="translated">Sie können den gleichen Handler für das gleiche Ereignis mehrmals hinzufügen, ohne eine Ausnahme auszulösen.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>However, the handler is actually invoked multiple times when the event is handled.</source>
          <target state="translated">Der Handler wird jedoch tatsächlich mehrmals aufgerufen, wenn das Ereignis behandelt wird.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</source>
          <target state="translated">Deshalb erwägen Sie, wie dieses Verhalten Nebeneffekte haben kann, die in Ihrem Handlerimplementierung berücksichtigt werden sollten.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>You typically use this method to provide the implementation of the "add" accessor for the <ph id="ph1">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph> event access pattern of a custom routed event.</source>
          <target state="translated">Mithilfe dieser Methode die Implementierung der "hinzufügen"-Accessor für die <ph id="ph1">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph> Ereignis Zugriffsmuster eines benutzerdefinierten Routingereignisses.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>An identifier for the.routed event to be handled.</source>
          <target state="translated">Ein Bezeichner für das zu behandelnde Routingereignis.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>A reference to the handler implementation.</source>
          <target state="translated">Ein Verweis auf die Handlerimplementierung.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to register the handler such that it is invoked even when the routed event is marked handled in its event data; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to register the handler with the default condition that it will not be invoked if the routed event is already marked handled.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn der Handler registriert werden soll, sodass er selbst dann aufgerufen wird, wenn das Routingereignis in den zugehörigen Ereignisdaten als behandelt markiert ist; <ph id="ph2">&lt;see langword="false" /&gt;</ph>, wenn der Handler mit der Standardbedingung registriert werden soll, dass er nicht aufgerufen wird, wenn das Routingereignis bereits als behandelt markiert ist.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Der Standardwert ist <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Do not routinely ask to rehandle a routed event.</source>
          <target state="translated">Legen Sie die Anforderung zum erneuten Behandeln eines Routingereignisses nicht gewohnheitsmäßig fest.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</source>
          <target state="translated">Fügt einen Routingereignishandler für ein bestimmtes Routingereignis hinzu, wobei der Handler der Handlerauflistung für das aktuelle Element hinzugefügt wird.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Specify <ph id="ph1">&lt;paramref name="handledEventsToo" /&gt;</ph> as <ph id="ph2">&lt;see langword="true" /&gt;</ph> to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route.</source>
          <target state="translated">Legen Sie <ph id="ph1">&lt;paramref name="handledEventsToo" /&gt;</ph> auf <ph id="ph2">&lt;see langword="true" /&gt;</ph> fest, damit der bereitgestellte Handler für ein Routingereignis aufgerufen wird, das bereits von einem anderen Element auf der Ereignisroute als behandelt markiert wurde.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Processing low-level input events in a practical way is a complex task.</source>
          <target state="translated">Die Verarbeitung von Eingabeereignissen auf niedriger Ebene in eine praktische Möglichkeit ist eine komplexe Aufgabe.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Many controls implement behavior where a certain event is marked as handled, and is replaced by another more intuitive event.</source>
          <target state="translated">Viele Steuerelemente implementieren Verhalten, in dem ein bestimmtes Ereignis als behandelt markiert ist, und wird durch ein anderes intuitiver Ereignis ersetzt.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Generally, a control will only mark a platform input event as handled if there is some design intention for doing so.</source>
          <target state="translated">Im Allgemeinen wird ein Steuerelement nur ein Eingabeereignis Plattform als behandelt markiert Wenn einige Entwurf Absicht dafür vorhanden ist.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>In certain scenarios, those design intentions might not be what your particular handling of the input event requires.</source>
          <target state="translated">In bestimmten Szenarien möglicherweise diesen Entwurf Absichten nicht was Ihre bestimmten Verarbeitung des Eingabeereignisses erforderlich ist.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>It is for these scenarios that registering handlers with <ph id="ph1">`handledEventsToo`</ph> as <ph id="ph2">`true`</ph> is appropriate.</source>
          <target state="translated">Es ist für die folgenden Szenarien, registrieren Handler mit <ph id="ph1">`handledEventsToo`</ph> als <ph id="ph2">`true`</ph> eignet.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>But you should not do this routinely.</source>
          <target state="translated">Aber Sie sollten Sie keine routinemäßig.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Invoking handlers in response to all events even if handled will complicate your own application event processing logic.</source>
          <target state="translated">Ereignishandler als Antwort auf alle Ereignisse aufrufen, selbst wenn behandelt wird ein eigene Anwendungsereignis Verarbeitungslogik erschweren.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>You may see a decrease in performance if the handler logic is substantial.</source>
          <target state="translated">Wenn die Handlerlogik eine erhebliche ist möglicherweise eine Abnahme der Leistung angezeigt.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>You should reserve the use of attaching handlers for already-handled events for situations where you have already discovered during the development process that certain controls are handling events that you still want to handle with application logic.</source>
          <target state="translated">Sie sollten die Verwendung der Handler für bereits verarbeitet Ereignisse für Situationen, in denen Sie bereits während des Entwicklungsprozesses ermittelt haben, die bestimmte Steuerelemente Ereignisse behandeln, die Sie weiterhin mit der Anwendungslogik behandeln möchten, Anfügen reservieren.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Another technique for avoiding the class handling behavior of certain event-control combinations is to use that event's preview alternative.</source>
          <target state="translated">Ein weiteres Verfahren zum Vermeiden von der Klasse, die bestimmte Kombinationen von Ereignis-Control-Standardverhalten der Fehlerbehandlung ist die Verwendung des Ereignisses Preview Alternative.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>For example, if <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> is marked handled by class handling, you might be able to add handlers for <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> instead.</source>
          <target state="translated">Z. B. wenn <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> markiert wird durch die Klassenbehandlung, können Sie möglicherweise hinzuzufügenden Handler für <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> stattdessen.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>You can add the same handler for the same event multiple times without raising an exception.</source>
          <target state="translated">Sie können den gleichen Handler für das gleiche Ereignis mehrmals hinzufügen, ohne eine Ausnahme auszulösen.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>However, the handler is actually invoked multiple times when the event is handled.</source>
          <target state="translated">Der Handler wird jedoch tatsächlich mehrmals aufgerufen, wenn das Ereignis behandelt wird.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</source>
          <target state="translated">Deshalb erwägen Sie, wie dieses Verhalten Nebeneffekte haben kann, die in Ihrem Handlerimplementierung berücksichtigt werden sollten.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>You typically use this method to provide the implementation of the "add" accessor for the <ph id="ph1">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph> event access pattern of a custom routed event.</source>
          <target state="translated">Mithilfe dieser Methode die Implementierung der "hinzufügen"-Accessor für die <ph id="ph1">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph> Ereignis Zugriffsmuster eines benutzerdefinierten Routingereignisses.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>The following example implements a handler invoked on the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph> event on a page that attaches a defined handler to one of the named elements on the page using <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Das folgende Beispiel implementiert einen Handler wird aufgerufen, auf die <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph> Ereignis auf einer Seite, die an eines der benannten Elemente auf der Seite mithilfe einen definierten Handler anfügt <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>This handler would be invoked even if another element along the route marked the shared event data as handled before reaching the handling element in the route.</source>
          <target state="translated">Dieser Handler wird aufgerufen werden, selbst wenn ein anderes Element entlang der Route, die gemeinsam genutzte Ereignisdaten als behandelt, die vor dem Erreichen der Behandlungselement in der Route gekennzeichnet.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
          <source>The event route that handlers are added to.</source>
          <target state="translated">Die Ereignisroute, der Handler hinzugefügt werden.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
          <source>The event data that is used to add the handlers.</source>
          <target state="translated">Die Ereignisdaten, mit denen die Handler hinzugefügt werden.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
          <source>This method uses the <ph id="ph1">&lt;see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /&gt;</ph> property of the arguments to create the handlers.</source>
          <target state="translated">Diese Methode verwendet die <ph id="ph1">&lt;see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /&gt;</ph>-Eigenschaft der Argumente, um die Handler zu erstellen.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
          <source>Adds handlers to the specified <ph id="ph1">&lt;see cref="T:System.Windows.EventRoute" /&gt;</ph> for the current <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> event handler collection.</source>
          <target state="translated">Fügt der angegebenen <ph id="ph1">&lt;see cref="T:System.Windows.EventRoute" /&gt;</ph> Handler für die aktuelle Auflistung von <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>-Ereignishandlern hinzu.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
          <source>Use this method for content host elements (regardless whether they implement <ph id="ph1">&lt;xref:System.Windows.IContentHost&gt;</ph>) in order to add handlers for the content host child elements to the host <ph id="ph2">&lt;xref:System.Windows.EventRoute&gt;</ph>.</source>
          <target state="translated">Verwenden Sie diese Methode für Inhaltshostelemente (unabhängig davon, ob sie implementieren <ph id="ph1">&lt;xref:System.Windows.IContentHost&gt;</ph>) um den Handler für den Inhaltshost untergeordnete Elemente an den Host hinzufügen <ph id="ph2">&lt;xref:System.Windows.EventRoute&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.AllowDrop">
          <source>Gets or sets a value that indicates whether this element can be used as the target of a drag-and-drop operation.</source>
          <target state="translated">Ruft einen Wert ab oder legt diesen fest, der anzeigt, ob dieses Element als Ziel eines Drag &amp; Drop-Vorgangs verwendet werden kann.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AllowDrop">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this element can be used as the target of a drag-and-drop operation; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn dieses Element als Ziel eines Drag &amp; Drop-Vorgangs verwendet werden kann, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AllowDrop">
          <source>The default value is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Der Standardwert ist <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AllowDrop">
          <source>Drag-and-drop operations are not enabled by default, and must be enabled deliberately by setting <ph id="ph1">&lt;xref:System.Windows.ContentElement.AllowDrop%2A&gt;</ph> to  <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Drag &amp; Drop-Vorgänge sind nicht standardmäßig aktiviert und muss absichtlich aktiviert werden, indem <ph id="ph1">&lt;xref:System.Windows.ContentElement.AllowDrop%2A&gt;</ph> auf <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AllowDrop">
          <source>Beyond this basic setting, drag-and-drop behavior is entirely implementation specific and is not defined by <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> or any other base element class.</source>
          <target state="translated">Über diese Einstellung "Grundlegend" Drag-and-Drop-Verhalten basiert vollständig auf implementierungsspezifisch und ist nicht definiert, indem <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> oder eine beliebige andere Basiselement-Klasse.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AllowDrop">
          <source>Certain controls, for example, <ph id="ph1">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph>, do have a default behavior, but no <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> derived classes have such a behavior.</source>
          <target state="translated">Bestimmte Steuerelemente, z. B. <ph id="ph1">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph>, verfügen über ein Standardverhalten, aber keine <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> abgeleitete Klassen haben solches Verhalten.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AllowDrop">
          <source>For more information on drag and drop, see <bpt id="p1">[</bpt>Drag and Drop Overview<ept id="p1">](~/docs/framework/wpf/advanced/drag-and-drop-overview.md)</ept>.</source>
          <target state="translated">Weitere Informationen zu Drag &amp; Drop, finden Sie unter <bpt id="p1">[</bpt>Drag- and -Drop Overview<ept id="p1">](~/docs/framework/wpf/advanced/drag-and-drop-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AllowDrop">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> overrides the metadata for this dependency property in its implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> überschreibt die Metadaten für diese Abhängigkeitseigenschaft in ihrer Implementierung.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AllowDrop">
          <source>Specifically, <ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> designates that this property allows property value inheritance (<ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;</ph> is <ph id="ph3">`true`</ph> in metadata).</source>
          <target state="translated">Insbesondere <ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> legt fest, dass diese Eigenschaft die Vererbung von Eigenschaftenwerten ermöglicht (<ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;</ph> ist <ph id="ph3">`true`</ph> in Metadaten).</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AllowDrop">
          <source>Property value inheritance in this context means that if there are child elements with no other value for <ph id="ph1">&lt;xref:System.Windows.ContentElement.AllowDrop%2A&gt;</ph> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a local value), then the value from that parent element is assigned to all unassigned child elements by the property system.</source>
          <target state="translated">Die Vererbung von Eigenschaftswerten in diesem Kontext bedeutet, dass, wenn kein anderer Wert für untergeordnete Elemente vorhanden sind <ph id="ph1">&lt;xref:System.Windows.ContentElement.AllowDrop%2A&gt;</ph> über die lokalen Werte oder Formate den Wert des nächsten übergeordneten Elements mit diesem Wert zugewiesen (erneut aus, entweder in Stilen, standardmäßig zugewiesen Werte, oder einen lokalen Wert), und klicken Sie dann alle nicht zugewiesenen untergeordneten Elemente vom Eigenschaftensystem der Wert aus diesem übergeordneten Element zugewiesen wird.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AllowDrop">
          <source>This means that you can specify whether to allow drop operations at the root element and then propagate the value to all <ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> child elements that have not specifically assigned it a value of <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Dies bedeutet, dass Sie angeben können, ob Drop-Vorgänge im Stammelement zulassen, und klicken Sie dann weitergeben des Werts für alle <ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> untergeordnete Elemente, die nicht ausdrücklich einen Wert zugewiesen haben <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AllowDrop">
          <source>Dependency Property Information</source>
          <target state="translated">Informationen zur Abhängigkeitseigenschaft</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AllowDrop">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AllowDrop">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">Metadaten-Eigenschaften festgelegt auf. <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AllowDrop">
          <source>None</source>
          <target state="translated">Keiner</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AllowDrop">
          <source>The following example sets <ph id="ph1">&lt;xref:System.Windows.ContentElement.AllowDrop%2A&gt;</ph> in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated">Im folgenden Beispiel wird <ph id="ph1">&lt;xref:System.Windows.ContentElement.AllowDrop%2A&gt;</ph> in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.AllowDropProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.AllowDrop" /&gt;</ph> dependency property.</source>
          <target state="translated">Bezeichnet die <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.AllowDrop" /&gt;</ph>-Abhängigkeitseigenschaft.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="T:System.Windows.ContentElement">
          <source>Applies an animation to a specified dependency property on this element.</source>
          <target state="translated">Wendet eine Animation auf eine angegebene Abhängigkeitseigenschaft für dieses Element an.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>The identifier for the property to animate.</source>
          <target state="translated">Der Bezeichner für die zu animierende Eigenschaft.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>The animation clock that controls and declares the animation.</source>
          <target state="translated">Die Animationsuhr, die die Animation steuert und deklariert.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>Applies an animation to a specified dependency property on this element.</source>
          <target state="translated">Wendet eine Animation auf eine angegebene Abhängigkeitseigenschaft für dieses Element an.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>Any existing animations are stopped and replaced with the new animation.</source>
          <target state="translated">Alle vorhandenen Animationen werden beendet und durch die neue Animation ersetzt.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>To remove an animation from a property, specify the identifier for that property as <ph id="ph1">`dp`</ph> and specify <ph id="ph2">`clock`</ph> as <ph id="ph3">`null`</ph>.</source>
          <target state="translated">Um eine Animation aus einer Eigenschaft zu entfernen, geben Sie den Bezeichner für diese Eigenschaft als <ph id="ph1">`dp`</ph> , und geben Sie <ph id="ph2">`clock`</ph> als <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>This removes the animation and the animated property is set to its base value.</source>
          <target state="translated">Dadurch wird die Animation entfernt, und auf den Basiswert die animierte Eigenschaft festgelegt ist.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>However, the originally associated animation clock is not stopped.</source>
          <target state="translated">Die ursprünglich zugeordnete Animationsuhr wird jedoch nicht beendet.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>Any other animations assigned to that clock will continue to run.</source>
          <target state="translated">Alle anderen dieser Uhr zugewiesenen Animationen werden weiterhin ausgeführt.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>The property to animate.</source>
          <target state="translated">Die zu animierende Eigenschaft.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>The animation clock that controls and declares the animation.</source>
          <target state="translated">Die Animationsuhr, die die Animation steuert und deklariert.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>A value of the enumeration.</source>
          <target state="translated">Ein Wert aus der Enumeration.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /&gt;</ph>, which will stop any existing animation and replace with the new one.</source>
          <target state="translated">Der Standardwert ist <ph id="ph1">&lt;see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /&gt;</ph>, womit jede vorhandene Animation beendet und durch die neue Animation ersetzt wird.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Applies an animation to a specified dependency property on this element, with the ability to specify what happens if the property already has a running animation.</source>
          <target state="translated">Wendet eine Animation auf eine angegebene Abhängigkeitseigenschaft für dieses Element an, wobei angegeben werden kann, was geschieht, wenn die Eigenschaft bereits eine laufende Animation aufweist.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>To remove an animation from a property, specify the identifier for that property as <ph id="ph1">`dp`</ph> and specify <ph id="ph2">`clock`</ph> as <ph id="ph3">`null`</ph>.</source>
          <target state="translated">Um eine Animation aus einer Eigenschaft zu entfernen, geben Sie den Bezeichner für diese Eigenschaft als <ph id="ph1">`dp`</ph> , und geben Sie <ph id="ph2">`clock`</ph> als <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>This removes the animation and the animated property is set to its base value.</source>
          <target state="translated">Dadurch wird die Animation entfernt, und auf den Basiswert die animierte Eigenschaft festgelegt ist.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>However, the originally associated animation clock is not stopped.</source>
          <target state="translated">Die ursprünglich zugeordnete Animationsuhr wird jedoch nicht beendet.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Any other animations assigned to that clock will continue to run.</source>
          <target state="translated">Alle anderen dieser Uhr zugewiesenen Animationen werden weiterhin ausgeführt.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.AreAnyTouchesCaptured">
          <source>Gets a value that indicates whether at least one touch is captured to this element.</source>
          <target state="translated">Ruft einen Wert ab, der angibt, ob mindestens ein Fingereingabegerät für dieses Element erfasst wird.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AreAnyTouchesCaptured">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if at least one touch is captured to this element; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn mindestens eine Fingereingabe für dieses Element erfasst wurde, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.AreAnyTouchesCapturedProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.AreAnyTouchesCaptured" /&gt;</ph> dependency property.</source>
          <target state="translated">Bezeichnet die <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.AreAnyTouchesCaptured" /&gt;</ph>-Abhängigkeitseigenschaft.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.AreAnyTouchesCapturedWithin">
          <source>Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.</source>
          <target state="translated">Ruft einen Wert ab, der angibt, ob mindestens ein Fingereingabegerät für dieses Element oder seine untergeordneten Elemente in der visuellen Struktur erfasst wird.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AreAnyTouchesCapturedWithin">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if at least one touch is captured to this element or any child elements in its visual tree; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn mindestens eine Fingereingabe für dieses Element oder seine untergeordneten Elemente in der visuellen Struktur erfasst wurde, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.AreAnyTouchesCapturedWithin" /&gt;</ph> dependency property.</source>
          <target state="translated">Bezeichnet die <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.AreAnyTouchesCapturedWithin" /&gt;</ph>-Abhängigkeitseigenschaft.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.AreAnyTouchesDirectlyOver">
          <source>Gets a value that indicates whether at least one touch is pressed over this element.</source>
          <target state="translated">Ruft einen Wert ab, der angibt, ob mindestens ein Fingereingabegerät über diesem Element gedrückt wurde.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AreAnyTouchesDirectlyOver">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if at least one touch is pressed over this element; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn mindestens eine Fingereingabe auf diesem Element registriert wurde, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.AreAnyTouchesDirectlyOver" /&gt;</ph> dependency property.</source>
          <target state="translated">Bezeichnet die <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.AreAnyTouchesDirectlyOver" /&gt;</ph>-Abhängigkeitseigenschaft.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.AreAnyTouchesOver">
          <source>Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree.</source>
          <target state="translated">Ruft einen Wert ab, der angibt, ob mindestens ein Fingereingabegerät auf diesem Element oder seinen untergeordneten Elementen in der visuellen Struktur gedrückt wurde.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AreAnyTouchesOver">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn mindestens eine Fingereingabe auf diesem Element oder den untergeordneten Elementen in der visuellen Struktur erfasst wurde, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.AreAnyTouchesOverProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.AreAnyTouchesOver" /&gt;</ph> dependency property.</source>
          <target state="translated">Bezeichnet die <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.AreAnyTouchesOver" /&gt;</ph>-Abhängigkeitseigenschaft.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="T:System.Windows.ContentElement">
          <source>Starts an animation for a specified animated property on this element.</source>
          <target state="translated">Startet eine Animation für eine angegebene animierte Eigenschaft dieses Elements.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>The property to animate, which is specified as a dependency property identifier.</source>
          <target state="translated">Die zu animierende Eigenschaft, die als Bezeichner einer Abhängigkeitseigenschaft angegeben wird.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>The timeline of the animation to start.</source>
          <target state="translated">Die Zeitachse der zu startenden Animation.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>Starts an animation for a specified animated property on this element.</source>
          <target state="translated">Startet eine Animation für eine angegebene animierte Eigenschaft dieses Elements.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.</source>
          <target state="translated">Wenn Sie überprüfen, ob eine Eigenschaft animiert wird, beachten Sie, dass die Animation wird gestartet, und berücksichtigt werden animiert wird, wenn der erste Frame hinter nicht animiert Ausgangspunkt gerendert wird.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;</ph> for <ph id="ph2">`animation`</ph> is <ph id="ph3">`null`</ph>, then any current animations are removed and the current value of the property is held.</source>
          <target state="translated">Wenn die <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;</ph> für <ph id="ph2">`animation`</ph> ist <ph id="ph3">`null`</ph>, klicken Sie dann alle aktuellen Animationen entfernt, und der aktuelle Wert der Eigenschaft aufrechterhalten wird.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>If the entire <ph id="ph1">`animation`</ph> value is <ph id="ph2">`null`</ph>, all animations are removed from the property and the property value reverts to its base value.</source>
          <target state="translated">Wenn die gesamte <ph id="ph1">`animation`</ph> Wert <ph id="ph2">`null`</ph>, werden alle Animationen aus der Eigenschaft entfernt, und der Eigenschaftswert wird auf den Basiswert zurückgesetzt.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>However, the originally associated animation timeline is not stopped.</source>
          <target state="translated">Die ursprünglich zugeordnete Animationszeitachse wird jedoch nicht beendet.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>Any other animations assigned to that timeline will continue to run.</source>
          <target state="translated">Alle anderen dieser Zeitachse zugewiesenen Animationen werden weiterhin ausgeführt.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>The property to animate, which is specified as the dependency property identifier.</source>
          <target state="translated">Die zu animierende Eigenschaft, die als Bezeichner einer Abhängigkeitseigenschaft angegeben wird.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>The timeline of the animation to be applied.</source>
          <target state="translated">Die Zeitachse der anzuwendenden Animation.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>A value of the enumeration that specifies how the new animation interacts with any current (running) animations that are already affecting the property value.</source>
          <target state="translated">Ein Wert der Enumeration, der angibt, wie die neue Animation mit aktuellen (ausgeführten) Animationen interagieren soll, die sich bereits auf den Eigenschaftswert auswirken.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Starts a specific animation for a specified animated property on this element, with the option of specifying what happens if the property already has a running animation.</source>
          <target state="translated">Startet eine spezifische Animation für eine bestimmte animierte Eigenschaft dieses Elements, wobei angegeben werden kann, welches Verhalten gelten soll, wenn die Eigenschaft bereits über eine ausgeführte Animation verfügt.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.</source>
          <target state="translated">Wenn Sie überprüfen, ob eine Eigenschaft animiert wird, beachten Sie, dass die Animation wird gestartet, und berücksichtigt werden animiert wird, wenn der erste Frame hinter nicht animiert Ausgangspunkt gerendert wird.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;</ph> for <ph id="ph2">`animation`</ph> is <ph id="ph3">`null`</ph>, then any current animations are removed and the current value of the property is held.</source>
          <target state="translated">Wenn die <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;</ph> für <ph id="ph2">`animation`</ph> ist <ph id="ph3">`null`</ph>, klicken Sie dann alle aktuellen Animationen entfernt, und der aktuelle Wert der Eigenschaft aufrechterhalten wird.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>If the entire <ph id="ph1">`animation`</ph> value is <ph id="ph2">`null`</ph>, all animations are removed from the property and the property value reverts to its base value.</source>
          <target state="translated">Wenn die gesamte <ph id="ph1">`animation`</ph> Wert <ph id="ph2">`null`</ph>, werden alle Animationen aus der Eigenschaft entfernt, und der Eigenschaftswert wird auf den Basiswert zurückgesetzt.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>However, the originally associated animation timeline is not stopped.</source>
          <target state="translated">Die ursprünglich zugeordnete Animationszeitachse wird jedoch nicht beendet.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Any other animations assigned to that timeline will continue to run.</source>
          <target state="translated">Alle anderen dieser Zeitachse zugewiesenen Animationen werden weiterhin ausgeführt.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.CaptureMouse">
          <source>Attempts to force capture of the mouse to this element.</source>
          <target state="translated">Versucht, die Mausaufzeichnung für dieses Element zu erzwingen.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.CaptureMouse">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the mouse is successfully captured; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn die Maus erfolgreich aufgezeichnet wird, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureMouse">
          <source>To be captured, an element must be enabled.</source>
          <target state="translated">Um erfasst werden, muss ein Element aktiviert sein.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureMouse">
          <source>Check whether <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsEnabled%2A&gt;</ph> is <ph id="ph2">`true`</ph> before you call <ph id="ph3">&lt;xref:System.Windows.ContentElement.CaptureMouse%2A&gt;</ph>.</source>
          <target state="translated">Überprüfen Sie, ob <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsEnabled%2A&gt;</ph> ist <ph id="ph2">`true`</ph> vor dem Aufruf <ph id="ph3">&lt;xref:System.Windows.ContentElement.CaptureMouse%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureMouse">
          <source>If calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.CaptureMouse%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, then <ph id="ph3">&lt;xref:System.Windows.ContentElement.IsMouseCaptured%2A&gt;</ph> is also <ph id="ph4">`true`</ph>.</source>
          <target state="translated">Wenn der Aufruf <ph id="ph1">&lt;xref:System.Windows.ContentElement.CaptureMouse%2A&gt;</ph> gibt <ph id="ph2">`true`</ph>, klicken Sie dann <ph id="ph3">&lt;xref:System.Windows.ContentElement.IsMouseCaptured%2A&gt;</ph> ist auch <ph id="ph4">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureMouse">
          <source>If calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.CaptureMouse%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, then the <ph id="ph3">&lt;xref:System.Windows.ContentElement.GotMouseCapture&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.ContentElement.IsMouseCapturedChanged&gt;</ph> events are raised, with <ph id="ph5">&lt;xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType&gt;</ph> in the event data reported as the element where the <ph id="ph6">&lt;xref:System.Windows.ContentElement.CaptureMouse%2A&gt;</ph> method is called.</source>
          <target state="translated">Beim Aufrufen <ph id="ph1">&lt;xref:System.Windows.ContentElement.CaptureMouse%2A&gt;</ph> gibt <ph id="ph2">`true`</ph>, die <ph id="ph3">&lt;xref:System.Windows.ContentElement.GotMouseCapture&gt;</ph> und <ph id="ph4">&lt;xref:System.Windows.ContentElement.IsMouseCapturedChanged&gt;</ph> Ereignisse ausgelöst werden, mit <ph id="ph5">&lt;xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType&gt;</ph> Daten in den Ereignisdaten gemeldet haben, als das Element, in dem die <ph id="ph6">&lt;xref:System.Windows.ContentElement.CaptureMouse%2A&gt;</ph> Methode wird aufgerufen.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureMouse">
          <source>If you force capture, you might interfere with existing captures—especially with captures that relate to drag-and-drop with the mouse.</source>
          <target state="translated">Wenn Sie die Aufzeichnung erzwingen, können Sie vorhandene Erfassungen beeinträchtigen, insbesondere bei Erfassungen, die mit Drag &amp; Drop mit der Maus in Zusammenhang stehen.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureMouse">
          <source>To clear mouse capture from all elements, call <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType&gt;</ph> with the <ph id="ph2">`element`</ph> parameter provided as <ph id="ph3">`null`</ph>.</source>
          <target state="translated">Rufen Sie zum Löschen von Mauseingaben aufzufangen aus allen Elementen <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType&gt;</ph> mit der <ph id="ph2">`element`</ph> -Parameter als <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureMouse">
          <source>The following example captures the mouse or releases capture, based on whether the mouse is already captured by the element.</source>
          <target state="translated">Im folgenden Beispiel erfasst die Maus oder frei Capture Grundlage, ob das Element bereits auf die Maus erfasst.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureMouse">
          <source>Note that this example casts the prospective capture target element to the <ph id="ph1">&lt;xref:System.Windows.IInputElement&gt;</ph> interface, and is thus initially calling the <ph id="ph2">&lt;xref:System.Windows.IInputElement.CaptureMouse%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Beachten Sie, dass in diesem Beispiel wird das Zielelement potenziellen Capture wandelt die <ph id="ph1">&lt;xref:System.Windows.IInputElement&gt;</ph> Schnittstelle, und ist daher ersten Aufrufen der <ph id="ph2">&lt;xref:System.Windows.IInputElement.CaptureMouse%2A?displayProperty=nameWithType&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureMouse">
          <source>Casting to <ph id="ph1">&lt;xref:System.Windows.IInputElement&gt;</ph> is a technique that is useful if you are unsure whether the element you want to have capture the mouse is a <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> or a <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">Umwandeln in <ph id="ph1">&lt;xref:System.Windows.IInputElement&gt;</ph> ist ein Verfahren, das ist nützlich, wenn Sie nicht sicher sind, ob das Element Capture sein sollen die Maus ist ein <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> oder ein <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureMouse">
          <source>The interface cast and the interface method call then calls the appropriate type-specific CaptureMouse implementation internally without requiring a trial cast to either <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">Schnittstellenumwandlung und die Schnittstellenmethode Aufruf wird dann der entsprechenden typspezifische CaptureMouse Implementierung intern ohne eine Testversion umgewandelt entweder <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> oder <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureMouse">
          <source>This same casting technique works for other members that <ph id="ph1">&lt;xref:System.Windows.IInputElement&gt;</ph> defines, for instance many of the input-related events, and other input-related methods.</source>
          <target state="translated">Umwandlung auf die gleiche Weise funktioniert auch für andere Member, die <ph id="ph1">&lt;xref:System.Windows.IInputElement&gt;</ph> definiert, z. B. häufig die Eingabe-bezogenen Ereignisse und die andere Eingabe bezogenen Methoden.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.CaptureStylus">
          <source>Attempts to force capture of the stylus to this element.</source>
          <target state="translated">Versucht, die Tablettstiftaufzeichnung für dieses Element zu erzwingen.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.CaptureStylus">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stylus is successfully captured; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn der Tablettstift erfolgreich aufgezeichnet wird, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureStylus">
          <source>The default implementation based on the underlying default stylus device always returns <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Gibt die standardmäßige Implementierung basierend auf dem zugrunde liegenden Tablettstift Standardgerät immer <ph id="ph1">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureStylus">
          <source>However, if you are extending the input devices that provide the device implementation for the input system, it is possible to create a system with an alternative stylus device implementation that might return different results.</source>
          <target state="translated">Wenn Sie die Eingabe Geräte, die die Geräte-Implementierung für der Eingabesystem bereitstellen erweitern, ist es jedoch möglich, ein System mit einer Implementierung der alternativen Tablettstift-Gerät zu erstellen, die möglicherweise andere Ergebnisse zurückgeben.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureStylus">
          <source>When an element captures the stylus, it receives stylus input even if the stylus is outside its bounds.</source>
          <target state="translated">Wenn ein Element die Stiftauswahl erhält, erhält sie Stifteingabe, selbst wenn der Tablettstift außerhalb seiner Grenzen befindet.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureStylus">
          <source>The stylus is typically captured only during drag-and-drop operations.</source>
          <target state="translated">Der Tablettstift wird in der Regel nur während der Drag-and-Drop-Vorgänge erfasst.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureStylus">
          <source>Calling this method calls an underlying static <ph id="ph1">&lt;xref:System.Windows.Input.Stylus&gt;</ph> method <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.Capture%2A&gt;</ph>.</source>
          <target state="translated">Beim Aufrufen dieser Methode ruft eine zugrunde liegende statische <ph id="ph1">&lt;xref:System.Windows.Input.Stylus&gt;</ph> Methode <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.Capture%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureStylus">
          <source>The actual capture behavior is implemented by the active stylus device implementation.</source>
          <target state="translated">Die tatsächlich verwendeten Verhalten wird von der aktiven Implementierung des Tablettstiftgeräts implementiert.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureStylus">
          <source>To be captured, an element must be enabled.</source>
          <target state="translated">Um erfasst werden, muss ein Element aktiviert sein.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureStylus">
          <source>Check whether <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsEnabled%2A&gt;</ph> is <ph id="ph2">`true`</ph> return before you call <ph id="ph3">&lt;xref:System.Windows.ContentElement.CaptureStylus%2A&gt;</ph>.</source>
          <target state="translated">Überprüfen Sie, ob <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsEnabled%2A&gt;</ph> ist <ph id="ph2">`true`</ph> vor dem Aufruf zurückgegeben <ph id="ph3">&lt;xref:System.Windows.ContentElement.CaptureStylus%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureStylus">
          <source>If calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.CaptureStylus%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Windows.ContentElement.IsStylusCaptured%2A&gt;</ph> is also <ph id="ph4">`true`</ph>.</source>
          <target state="translated">Wenn der Aufruf <ph id="ph1">&lt;xref:System.Windows.ContentElement.CaptureStylus%2A&gt;</ph> gibt <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Windows.ContentElement.IsStylusCaptured%2A&gt;</ph> ist auch <ph id="ph4">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)">
          <source>The device to capture.</source>
          <target state="translated">Das zu erfassende Gerät.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)">
          <source>Attempts to force capture of a touch to this element.</source>
          <target state="translated">Versucht, die Fingereingabe für dieses Element zu erzwingen.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified touch is captured to this element; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn die angegebene Fingereingabe für dieses Element erfasst wird, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement.CaptureTouch%2A&gt;</ph> will return <ph id="ph2">`false`</ph> if the <ph id="ph3">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> is currently captured to another element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.CaptureTouch%2A&gt;</ph> Gibt zurück, <ph id="ph2">`false`</ph> Wenn die <ph id="ph3">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> zurzeit zu einem anderen Element aufgezeichnet wird.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)">
          <source>If <ph id="ph1">&lt;xref:System.Windows.ContentElement.CaptureTouch%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, then the <ph id="ph3">&lt;xref:System.Windows.ContentElement.GotTouchCapture&gt;</ph> event is raised.</source>
          <target state="translated">Wenn <ph id="ph1">&lt;xref:System.Windows.ContentElement.CaptureTouch%2A&gt;</ph> gibt <ph id="ph2">`true`</ph>, und klicken Sie dann die <ph id="ph3">&lt;xref:System.Windows.ContentElement.GotTouchCapture&gt;</ph> Ereignis wird ausgelöst.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)">
          <source>To release capture of a single touch from this element, use the <ph id="ph1">&lt;xref:System.Windows.ContentElement.ReleaseTouchCapture%2A&gt;</ph> method and specify the touch device to release.</source>
          <target state="translated">Um die Erfassung einer einzelnen Fingereingabe aus diesem Element freizugeben, verwenden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.ReleaseTouchCapture%2A&gt;</ph> Methode, und geben Sie die Touch-Geräte freigeben.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)">
          <source>To release all touches from this element, use the <ph id="ph1">&lt;xref:System.Windows.ContentElement.ReleaseAllTouchCaptures%2A&gt;</ph> method.</source>
          <target state="translated">Um alle Fingereingaben für dieses Element freizugeben, verwenden Sie die <ph id="ph1">&lt;xref:System.Windows.ContentElement.ReleaseAllTouchCaptures%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)">
          <source><ph id="ph1">&lt;paramref name="touchDevice" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="touchDevice" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.CommandBindings">
          <source>Gets a collection of <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandBinding" /&gt;</ph> objects that are associated with this element.</source>
          <target state="translated">Ruft eine Auflistung von <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandBinding" /&gt;</ph>-Objekten ab, die mit diesem Element verknüpft sind.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.CommandBindings">
          <source>The collection of all <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandBinding" /&gt;</ph> objects.</source>
          <target state="translated">Die Auflistung aller <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandBinding" /&gt;</ph>-Objekte.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.CommandBindings">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> enables command handling of a specific command for this element and declares the linkage between a command, its events, and the handlers that are attached by this element.</source>
          <target state="translated">Ein <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> ermöglicht die befehlsverarbeitung eines bestimmten Befehls für dieses Element ist, und deklarieren Sie die Verknüpfung zwischen einem Befehl, der Ereignisse und die Ereignishandler, die von diesem Element zugeordnet sind.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.CommandBindings">
          <source>Another typical way to populate the <ph id="ph1">&lt;xref:System.Windows.ContentElement.CommandBindings%2A&gt;</ph> collection is to use <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> methods programmatically.</source>
          <target state="translated">Eine weitere Möglichkeit zum Auffüllen der <ph id="ph1">&lt;xref:System.Windows.ContentElement.CommandBindings%2A&gt;</ph> Auflistung ist die Verwendung <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> Methoden programmgesteuert.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.CommandBindings">
          <source>XAML Property Element Usage</source>
          <target state="translated">Verwendung von XAML-Eigenschaftenelementen</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.CommandBindings">
          <source>XAML Values</source>
          <target state="translated">XAML-Werte</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.CommandBindings">
          <source><bpt id="p1">*</bpt>oneOrMoreCommandBindings<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>oneOrMoreCommandBindings<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.CommandBindings">
          <source>One or more <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> elements.</source>
          <target state="translated">Eine oder mehrere <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> Elemente.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.CommandBindings">
          <source>Each of these should have a <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding.Command%2A&gt;</ph> attribute set to a known command, and attributes set for the <ph id="ph2">&lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.CommandBinding.Executed&gt;</ph> handler implementations.</source>
          <target state="translated">Jede dieser müssen eine <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding.Command%2A&gt;</ph> -Attribut auf einen bekannten Befehl festgelegt, und legen Sie die Attribute für die <ph id="ph2">&lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt;</ph> und <ph id="ph3">&lt;xref:System.Windows.Input.CommandBinding.Executed&gt;</ph> Handlerimplementierungen.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.CommandBindings">
          <source>For more information see <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.DragEnter">
          <source>Occurs when the input system reports an underlying drag event with this element as the drag target.</source>
          <target state="translated">Tritt auf, wenn das Eingabesystem ein zugrunde liegendes Drag-Ereignis mit diesem Element als Drag-Ziel meldet.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragEnter">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.DragEnter?displayProperty=nameWithType&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.DragEnter?displayProperty=nameWithType&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragEnter">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragEnter&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragEnter&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragEnter">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragEnter">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragEnter">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragEnter">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragEnter">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragEnter">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewDragEnter&gt;</ph>.</source>
          <target state="translated">Das entsprechende Tunneling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewDragEnter&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragEnter">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnDragEnter%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnDragEnter%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.DragEnterEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.DragEnter" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.DragEnter" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DragEnterEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DragEnterEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DragEnterEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DragEnterEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DragEnterEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.DragLeave">
          <source>Occurs when the input system reports an underlying drag event with this element as the drag origin.</source>
          <target state="translated">Tritt auf, wenn das Eingabesystem ein zugrunde liegendes Drag-Ereignis mit diesem Element als Drag-Quelle meldet.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragLeave">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType&gt;</ph> attached event for this class so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.DragLeave?displayProperty=nameWithType&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.DragLeave?displayProperty=nameWithType&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragLeave">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragLeave&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragLeave&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragLeave">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragLeave">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragLeave">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragLeave">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragLeave">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragLeave">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragLeave&gt;</ph>.</source>
          <target state="translated">Das entsprechende Tunneling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragLeave&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragLeave">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnDragLeave%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnDragLeave%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.DragLeaveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.DragLeave" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.DragLeave" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DragLeaveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DragLeaveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DragLeaveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DragLeaveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DragLeaveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.DragOver">
          <source>Occurs when the input system reports an underlying drag event with this element as the potential drop target.</source>
          <target state="translated">Tritt auf, wenn das Eingabesystem ein zugrunde liegendes Drag-Ereignis mit diesem Element als potenzielles Drop-Ziel meldet.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragOver">
          <source>This event occurs even if the drag originates in the element bounds.</source>
          <target state="translated">Dieses Ereignis tritt auf, auch wenn das Ziehen der Elementgrenzen stammen.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragOver">
          <source>If the drag starts outside the bounds and then moves inside, this event is also raised, as well as <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragEnter&gt;</ph> and related preview events.</source>
          <target state="translated">Wenn der Ziehvorgang gestartet wurde außerhalb des gültigen Bereichs und verschiebt dann, dieses Ereignis wird auch ausgelöst, als auch <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragEnter&gt;</ph> und Vorschauereignisse beziehen.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragOver">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType&gt;</ph> attached event for this class so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.DragOver?displayProperty=nameWithType&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.DragOver?displayProperty=nameWithType&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragOver">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragOver&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragOver&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragOver">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragOver">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragOver">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragOver">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragOver">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragOver">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragOver&gt;</ph>.</source>
          <target state="translated">Das entsprechende Tunneling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragOver&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragOver">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnDragOver%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnDragOver%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.DragOverEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.DragOver" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.DragOver" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DragOverEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DragOverEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DragOverEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DragOverEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DragOverEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.Drop">
          <source>Occurs when the input system reports an underlying drop event with this element as the drop target.</source>
          <target state="translated">Tritt auf, wenn das Eingabesystem ein zugrunde liegendes Drop-Ereignis meldet, das dieses Element als Drop-Ziel aufweist.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.Drop">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType&gt;</ph> attached event for this class so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.Drop?displayProperty=nameWithType&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.Drop?displayProperty=nameWithType&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.Drop">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.Drop&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.Drop&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.Drop">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.Drop">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.Drop">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.Drop">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.Drop">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.Drop">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewDrop&gt;</ph>.</source>
          <target state="translated">Das entsprechende Tunneling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewDrop&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.Drop">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnDrop%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnDrop%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.DropEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.Drop" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.Drop" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DropEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DropEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DropEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DropEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DropEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.Focus">
          <source>Attempts to set focus to this element.</source>
          <target state="translated">Versucht, den Fokus auf dieses Element festzulegen.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.Focus">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if keyboard focus could be set to this element; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if this method call did not force focus.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn der Tastaturfokus auf dieses Element festgelegt werden konnte, <ph id="ph2">&lt;see langword="false" /&gt;</ph>, wenn dieser Methodenaufruf keinen Fokus erzwungen hat.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.Focus">
          <source>To be focusable, <ph id="ph1">&lt;xref:System.Windows.ContentElement.Focusable%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.IsEnabled%2A&gt;</ph> must both be <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Um den Fokus erhalten kann, werden <ph id="ph1">&lt;xref:System.Windows.ContentElement.Focusable%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.Windows.ContentElement.IsEnabled%2A&gt;</ph> müssen sowohl <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.Focus">
          <source>Note that nearly all <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> derived classes are not <ph id="ph2">&lt;xref:System.Windows.ContentElement.Focusable%2A&gt;</ph> by default.</source>
          <target state="translated">Beachten Sie, dass fast alle <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> abgeleitete Klassen sind nicht <ph id="ph2">&lt;xref:System.Windows.ContentElement.Focusable%2A&gt;</ph> standardmäßig.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.Focus">
          <source>Even if an element is focusable and enabled, event handling within a specific tree, (such as for a composite control) might respond to the preview focus events by not allowing focus there, thus this method would return <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Auch wenn ein Element den Fokus erhalten kann, und aktiviert ist, Ereignisbehandlung in einer bestimmten Struktur ist, (z. B. für ein zusammengesetztes Steuerelement) wird, dass es den Fokus auf die Vorschau Fokusereignisse reagieren möglicherweise, daher diese Methode würde zurück <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.Focus">
          <source>Focus in general is governed by two separate concepts: keyboard focus and logical focus, which are not always identical.</source>
          <target state="translated">Fokus wird im Allgemeinen durch zwei separaten Konzepten gesteuert: den Tastaturfokus und den logischen Fokus, die nicht immer identisch sind.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.Focus">
          <source>This method sets the logical focus.</source>
          <target state="translated">Diese Methode setzt den logischen Fokus.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.Focus">
          <source>There is no programmatic means to set keyboard focus specifically; keyboard focus is determined by user input.</source>
          <target state="translated">Es ist keine programmgesteuerte Möglichkeit zum Festlegen des Tastaturfokus. über den Tastaturfokus wird durch die Benutzereingabe bestimmt.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.Focus">
          <source>For more information, see <bpt id="p1">[</bpt>Focus Overview<ept id="p1">](~/docs/framework/wpf/advanced/focus-overview.md)</ept> and <bpt id="p2">[</bpt>Input Overview<ept id="p2">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Focus Overview<ept id="p1">](~/docs/framework/wpf/advanced/focus-overview.md)</ept> und <bpt id="p2">[</bpt>Input Overview<ept id="p2">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.Focus">
          <source>If calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.Focus%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Windows.ContentElement.IsKeyboardFocused%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A&gt;</ph> are also <ph id="ph5">`true`</ph>.</source>
          <target state="translated">Wenn der Aufruf <ph id="ph1">&lt;xref:System.Windows.ContentElement.Focus%2A&gt;</ph> gibt <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Windows.ContentElement.IsKeyboardFocused%2A&gt;</ph> und <ph id="ph4">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A&gt;</ph> sind auch <ph id="ph5">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.Focus">
          <source>If the related properties are not already <ph id="ph1">`true`</ph>, when you call <ph id="ph2">&lt;xref:System.Windows.ContentElement.Focus%2A&gt;</ph>, one or more of the following events are raised in the following order: <ph id="ph3">&lt;xref:System.Windows.ContentElement.PreviewLostKeyboardFocus&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.ContentElement.PreviewGotKeyboardFocus&gt;</ph> (source is the new focus target), <ph id="ph5">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.ContentElement.LostKeyboardFocus&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt;</ph> (source is the new focus target).</source>
          <target state="translated">Wenn die verwandten Eigenschaften nicht bereits sind <ph id="ph1">`true`</ph>, beim Aufrufen von <ph id="ph2">&lt;xref:System.Windows.ContentElement.Focus%2A&gt;</ph>, eine oder mehrere der folgenden Ereignisse werden in der folgenden Reihenfolge ausgelöst: <ph id="ph3">&lt;xref:System.Windows.ContentElement.PreviewLostKeyboardFocus&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.ContentElement.PreviewGotKeyboardFocus&gt;</ph> (Quelle ist das neue Fokusziel), <ph id="ph5">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.ContentElement.LostKeyboardFocus&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt;</ph> (Quelle ist das neue Fokusziel).</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.Focus">
          <source>The following example is a page-loaded event handler that finds a specified named paragraph in the document and sets focus to it.</source>
          <target state="translated">Im folgenden Beispiel wird eine Seite geladen Ereignishandler, der ein angegebenes findet, mit dem Namen Absatz des Dokuments und legt den Fokus zu.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.Focus">
          <source>Paragraphs are not focusable by default; this particular paragraph had a style applied (not shown) that used a style <ph id="ph1">&lt;xref:System.Windows.Setter&gt;</ph> to make it focusable.</source>
          <target state="translated">Absätze sind nicht standardmäßig den Fokus erhalten. Diese bestimmten Absatzes hatte einen Stil angewendet (nicht gezeigt), verwendet einen Stil <ph id="ph1">&lt;xref:System.Windows.Setter&gt;</ph> zu erleichtern den Fokus erhalten kann.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.Focusable">
          <source>Gets or sets a value that indicates whether the element can receive focus.</source>
          <target state="translated">Ruft einen Wert ab bzw. legt einen Wert fest, der angibt, ob das Element den Fokus erhalten kann.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.Focusable">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element is focusable; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn das Element den Fokus erhalten kann, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.Focusable">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Der Standardwert ist <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.Focusable">
          <source>Only the focused element receives keyboard input.</source>
          <target state="translated">Nur die Fokuselement empfängt Tastatureingaben.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.Focusable">
          <source>Certain derived classes might override metadata for this dependency property such that the derived class is focusable by default.</source>
          <target state="translated">Bestimmte abgeleiteten Klassen können Metadaten für diese Abhängigkeitseigenschaft außer Kraft gesetzt, sodass die abgeleitete Klasse den Fokus erhalten kann, in der Standardeinstellung ist.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.Focusable">
          <source>When inherited by <ph id="ph1">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> or its derived classes, <ph id="ph2">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> overrides the metadata for this dependency property and redefines the default value of this property to be <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Wenn von geerbt <ph id="ph1">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> oder seinen abgeleiteten Klassen <ph id="ph2">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> überschreibt die Metadaten für diese Abhängigkeitseigenschaft und den Standardwert dieser Eigenschaft werden definiert <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.Focusable">
          <source>Dependency Property Information</source>
          <target state="translated">Informationen zur Abhängigkeitseigenschaft</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.Focusable">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.Focusable">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">Metadaten-Eigenschaften festgelegt auf. <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.Focusable">
          <source>None</source>
          <target state="translated">Keiner</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.Focusable">
          <source>The following example creates a style that makes a <ph id="ph1">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> focusable by default and gives it a visual behavior when it receives focus.</source>
          <target state="translated">Im folgenden Beispiel wird einen Stil erstellt, eine <ph id="ph1">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> den Fokus erhalten kann, in der Standardeinstellung und weist ihm ein visuelles Verhalten, wenn es den Fokus erhält.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.Focusable">
          <source>When you derive from <ph id="ph1">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>, consider whether you want your element to be focusable, because by default it will not be focusable.</source>
          <target state="translated">Beim Ableiten von <ph id="ph1">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>, überlegen Sie, ob das Element, den Fokus erhalten kann, da standardmäßig es den Fokus erhalten kann nicht verwendet werden soll.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.Focusable">
          <source>If you want your element to be focusable, override the metadata for this property in your derived class static constructor as follows:</source>
          <target state="translated">Wenn Sie das Element den Fokus erhalten kann sein soll, überschreiben Sie die Metadaten für diese Eigenschaft in den statischen Konstruktor der abgeleiteten Klasse wie folgt:</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.Focusable">
          <source>where <ph id="ph1">&lt;paramref name="myElement" /&gt;</ph> is the class name of the type that you are overriding the metadata value on.</source>
          <target state="translated">wobei <ph id="ph1">&lt;paramref name="myElement" /&gt;</ph> ist der Klassenname des Typs, die Sie auf den Metadatenwert überschreiben.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.FocusableChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.Focusable" /&gt;</ph> property changes.</source>
          <target state="translated">Tritt auf, wenn sich der Wert der <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.Focusable" /&gt;</ph>-Eigenschaft ändert.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.FocusableChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">Dieser Member ist ein <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> Ereignis, nicht für ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.FocusableProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.Focusable" /&gt;</ph> dependency property.</source>
          <target state="translated">Bezeichnet die <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.Focusable" /&gt;</ph>-Abhängigkeitseigenschaft.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)">
          <source>The.dependency property to check.</source>
          <target state="translated">Die zu überprüfende Abhängigkeitseigenschaft.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)">
          <source>Returns the base property value for the specified property on this element, disregarding any possible animated value from a running or stopped animation.</source>
          <target state="translated">Gibt den Wert der Basiseigenschaft für die angegebene Eigenschaft dieses Elements zurück, wobei alle möglichen animierten Werte aus einer ausgeführten oder beendeten Animation nicht berücksichtigt werden.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)">
          <source>The property value as if no animations are attached to the specified dependency property.</source>
          <target state="translated">Der Eigenschaftswert, bei dem keine Animationen an die angegebene Abhängigkeitseigenschaft angefügt sind.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)">
          <source>If no animations are attached to the property, then the <ph id="ph1">&lt;xref:System.Windows.ContentElement.GetAnimationBaseValue%2A&gt;</ph> return value is always identical to the <ph id="ph2">&lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;</ph> return value.</source>
          <target state="translated">Wenn keine Animationen an die Eigenschaft angefügt werden und dann die <ph id="ph1">&lt;xref:System.Windows.ContentElement.GetAnimationBaseValue%2A&gt;</ph> Rückgabewert ist immer identisch mit der <ph id="ph2">&lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;</ph> Rückgabewert.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)">
          <source>If there are animations attached, then all possible animation derived values including the start and stop values are ignored, and the property value is determined based on all other possible inputs.</source>
          <target state="translated">Wenn Animationen angefügt sind, klicken Sie dann alle möglichen abgeleiteten Animationswerte einschließlich Anfangs- und Stop-Werte werden ignoriert und den Wert der Eigenschaft wird basierend auf alle möglichen Eingaben bestimmt.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)">
          <source>For more information, see <bpt id="p1">[</bpt>Dependency Property Value Precedence<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Priorität von Abhängigkeitseigenschaftswerten<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.GetUIParentCore">
          <source>When overridden in a derived class, returns an alternative <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> parent for this element if no visual parent exists.</source>
          <target state="translated">Gibt beim Überschreiben in einer abgeleiteten Klasse ein alternatives übergeordnetes <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>-Element für dieses Element zurück, wenn kein visuelles übergeordnetes Element vorhanden ist.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.GetUIParentCore">
          <source>An object, if implementation of a derived class has an alternate parent connection to report.</source>
          <target state="translated">Ein Objekt, wenn die Implementierung einer abgeleiteten Klasse eine alternative übergeordnete Verbindung melden kann.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.GetUIParentCore">
          <source>The default virtual implementation of this method returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Gibt die standardmäßige virtuelle Implementierung dieser Methode <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.GetUIParentCore">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> provides a practical implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> Stellt eine praktische Implementierung.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.GetUIParentCore">
          <source>Alternative parents are used for event routing, in cases where an element creates an alternative parent structure so that its events are routed in a way that diverges from the standard pattern of routing up the visual tree to the standard parent, or downward in the preview routing strategy.</source>
          <target state="translated">Alternative übergeordnete Elemente werden verwendet, für das Ereignisrouting in Fällen, in dem ein Element eine alternative übergeordnete Struktur erstellt so, dass die Ereignisse weitergeleitet werden, mit denen aus die Standardmuster Routing aufwärts in der visuellen Struktur mit dem standard übergeordneten-Dienstkontos, oder nach unten in der routing-Strategie in der Vorschau anzeigen.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.GiveFeedback">
          <source>Occurs when the input system reports an underlying drag-and-drop event that involves this element.</source>
          <target state="translated">Tritt auf, wenn das Eingabesystem ein zugrunde liegendes Drag &amp; Drop-Ereignis meldet, das dieses Element betrifft.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GiveFeedback">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.GiveFeedback&gt;</ph> event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.GiveFeedback&gt;</ph> -Ereignisses kann die Quelle des Drag-Ereignis, um die Darstellung des Mauszeigers zu ändern, um dem Benutzer während eines Drag &amp; Drop-Vorgangs ein visuelles Feedback.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GiveFeedback">
          <source>The visual feedback reinforces that a drag-and-drop operation is in process.</source>
          <target state="translated">Visuelle Feedback darauf hingewiesen, dass es sich bei ein Drag &amp; Drop-Vorgang ausgeführt wird.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GiveFeedback">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType&gt;</ph> attached event for this class so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.GiveFeedback&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.GiveFeedback&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GiveFeedback">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.GiveFeedback&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.GiveFeedback&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GiveFeedback">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GiveFeedback">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GiveFeedback">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GiveFeedback">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GiveFeedback">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GiveFeedback">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewGiveFeedback&gt;</ph>.</source>
          <target state="translated">Das entsprechende Tunneling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewGiveFeedback&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GiveFeedback">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGiveFeedback%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGiveFeedback%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.GiveFeedbackEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GiveFeedback" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GiveFeedback" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GiveFeedbackEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GiveFeedbackEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GiveFeedbackEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GiveFeedbackEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GiveFeedbackEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.GotFocus">
          <source>Occurs when this element gets logical focus.</source>
          <target state="translated">Tritt auf, wenn dieses Element den logischen Fokus erhält.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotFocus">
          <source>Logical focus differs from keyboard focus if focus is deliberately forced by using a method call but the previous keyboard focus exists in a different scope.</source>
          <target state="translated">Der logische Fokus unterscheidet sich vom Tastaturfokus, wenn der Fokus absichtlich durch einen Methodenaufruf erzwungen wird, aber der vorherige Tastaturfokus in einem anderen Gültigkeitsbereich vorhanden ist.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotFocus">
          <source>In this scenario, keyboard focus remains where it is and the element where a <ph id="ph1">&lt;xref:System.Windows.ContentElement.Focus%2A&gt;</ph> method is called still gets logical focus.</source>
          <target state="translated">In diesem Fall über den Tastaturfokus bleibt, wo sie ist und das Element, in dem eine <ph id="ph1">&lt;xref:System.Windows.ContentElement.Focus%2A&gt;</ph> Methode wird immer noch ruft der logische Fokus aufgerufen.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotFocus">
          <source>A more precise interpretation of this event is that it is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsFocused%2A&gt;</ph> property of an element in the route is changed from <ph id="ph2">`false`</ph> to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Eine genauere Interpretation dieses Ereignisses ist, dass die It ausgelöst wird, wenn der Wert des der <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsFocused%2A&gt;</ph> Eigenschaft eines Elements in der Route von geändert wird <ph id="ph2">`false`</ph> auf <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotFocus">
          <source>Because this event uses bubbling routing, the element that receives focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">Da dieses Ereignis bubbling-routing verwendet, das Element, das Fokus erhält möglicherweise ein untergeordnetes Element anstatt des Elements, dem der Ereignishandler tatsächlich angefügt.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotFocus">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that gained focus.</source>
          <target state="translated">Überprüfen Sie die <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in die Ereignisdaten an das aktuelle Element zu bestimmen, die Fokus erhalten hat.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotFocus">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotFocus">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotFocus">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotFocus">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotFocus">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotFocus">
          <source>There is no corresponding tunneling event.</source>
          <target state="translated">Es ist keine entsprechende Tunneling-Ereignis.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotFocus">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotFocus%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotFocus%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.GotFocusEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotFocus" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotFocus" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotFocusEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotFocusEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotFocusEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotFocusEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotFocusEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.GotKeyboardFocus">
          <source>Occurs when the keyboard is focused on this element.</source>
          <target state="translated">Tritt auf, wenn sich der Fokus der Tastatur auf diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotKeyboardFocus">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt;</ph> is a similar event that tracks status changes in a property that maintains the focus state for an element; the <ph id="ph2">&lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt;</ph> event is raised in many of the same circumstances.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt;</ph> ist ein ähnliches Ereignis, das ändert sich in einer Eigenschaft nachverfolgt, die nach einem Element des Fokuszustands verwaltet. die <ph id="ph2">&lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt;</ph> Ereignis in vielen unter denselben Umständen ausgelöst wird.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotKeyboardFocus">
          <source>Because this event uses bubbling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">Da dieses Ereignis bubbling-routing verwendet, das Element, das Fokus besitzt möglicherweise ein untergeordnetes Element anstatt des Elements, dem der Ereignishandler tatsächlich angefügt.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotKeyboardFocus">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that has focus.</source>
          <target state="translated">Überprüfen Sie die <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in die Ereignisdaten an das aktuelle Element zu bestimmen, die Fokus besitzt.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotKeyboardFocus">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event for this class so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotKeyboardFocus">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotKeyboardFocus">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotKeyboardFocus">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotKeyboardFocus">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotKeyboardFocus">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotKeyboardFocus">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotKeyboardFocus">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewGotKeyboardFocus&gt;</ph>.</source>
          <target state="translated">Das entsprechende Tunneling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewGotKeyboardFocus&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotKeyboardFocus">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotKeyboardFocus%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotKeyboardFocus%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.GotKeyboardFocusEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotKeyboardFocus" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotKeyboardFocus" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotKeyboardFocusEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotKeyboardFocusEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotKeyboardFocusEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotKeyboardFocusEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotKeyboardFocusEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.GotMouseCapture">
          <source>Occurs when this element captures the mouse.</source>
          <target state="translated">Tritt auf, wenn dieses Element die Mausauswahl erhält.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotMouseCapture">
          <source>When an element captures the mouse, it receives mouse input even if the mouse pointer is outside its bounds.</source>
          <target state="translated">Wenn ein Element die Maus erfasst hat, erhält sie Mauseingaben, selbst wenn der Mauszeiger sich außerhalb der Begrenzungen ist.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotMouseCapture">
          <source>The mouse is typically captured only during drag-and-drop operations and remains captured until the drop action of the drag-and-drop operation occurs.</source>
          <target state="translated">Die Maus ist in der Regel nur während der Drag-and-Drop-Vorgänge erfasst und erfassten bleibt, bis die Drop-Aktion des Drag &amp; Drop-Vorgangs ausgeführt wird.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotMouseCapture">
          <source>Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">Da dieses Ereignis bubbling-routing verwendet, das Element, das erfasst wird möglicherweise ein untergeordnetes Element anstatt des Elements, dem der Ereignishandler tatsächlich angefügt.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotMouseCapture">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that has mouse capture.</source>
          <target state="translated">Überprüfen Sie die <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> im Ereignis erfassen von Daten an das aktuelle Element zu bestimmen, die Maus verfügt.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotMouseCapture">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType&gt;</ph> attached event for  this class so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.GotMouseCapture&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.GotMouseCapture&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotMouseCapture">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.GotMouseCapture&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.GotMouseCapture&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotMouseCapture">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotMouseCapture">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotMouseCapture">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotMouseCapture">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotMouseCapture">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotMouseCapture">
          <source>There is no defined corresponding tunneling event.</source>
          <target state="translated">Es gibt keine definiertes entsprechendes Tunneling-Ereignis.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotMouseCapture">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotMouseCapture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotMouseCapture%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.GotMouseCaptureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotMouseCapture" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotMouseCapture" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotMouseCaptureEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotMouseCaptureEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotMouseCaptureEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotMouseCaptureEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotMouseCaptureEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.GotStylusCapture">
          <source>Occurs when this element captures the stylus.</source>
          <target state="translated">Tritt auf, wenn dieses Element die Stiftauswahl erhält.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotStylusCapture">
          <source>When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</source>
          <target state="translated">Wenn ein Element die Stiftauswahl erhält, erhält sie Stifteingabe, selbst wenn der Mauszeiger sich außerhalb der Begrenzungen befindet.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotStylusCapture">
          <source>The stylus is typically captured only during drag-and-drop operations and retains capture until the drop action of the drag-and-drop operation occurs.</source>
          <target state="translated">Der Tablettstift in der Regel nur während der Drag-and-Drop-Vorgänge aufgezeichnet wird und behält die Aufzeichnung, bis die Drop-Aktion den Drag &amp; Drop-Vorgang auftritt.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotStylusCapture">
          <source>Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">Da dieses Ereignis bubbling-routing verwendet, das Element, das erfasst wird möglicherweise ein untergeordnetes Element anstatt des Elements, dem der Ereignishandler tatsächlich angefügt.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotStylusCapture">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that has capture.</source>
          <target state="translated">Überprüfen Sie die <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in die Ereignisdaten an das aktuelle Element zu bestimmen, die erfasst wird.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotStylusCapture">
          <source>This event creates an alias for the  attached event for this class so that <ph id="ph1">&lt;xref:System.Windows.ContentElement.GotStylusCapture&gt;</ph> is part of the class members list when <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für das angefügte Ereignis für diese Klasse, damit <ph id="ph1">&lt;xref:System.Windows.ContentElement.GotStylusCapture&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotStylusCapture">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.GotStylusCapture&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.GotStylusCapture&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotStylusCapture">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotStylusCapture">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotStylusCapture">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotStylusCapture">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotStylusCapture">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotStylusCapture">
          <source>There is no defined corresponding tunneling event.</source>
          <target state="translated">Es gibt keine definiertes entsprechendes Tunneling-Ereignis.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotStylusCapture">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotStylusCapture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotStylusCapture%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.GotStylusCaptureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotStylusCapture" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotStylusCapture" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotStylusCaptureEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotStylusCaptureEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotStylusCaptureEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotStylusCaptureEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotStylusCaptureEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.GotTouchCapture">
          <source>Occurs when a touch is captured to this element.</source>
          <target state="translated">Tritt ein, wenn eine Fingereingabe für dieses Element erfasst wird.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotTouchCapture">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotTouchCapture">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotTouchCapture">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotTouchCapture">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotTouchCapture">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotTouchCapture">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated">Eine <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> vom Typ <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotTouchCapture">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotTouchCapture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotTouchCapture%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.GotTouchCaptureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotTouchCapture" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotTouchCapture" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.HasAnimatedProperties">
          <source>Gets a value that indicates whether this element has any animated properties.</source>
          <target state="translated">Ruft einen Wert ab, der angibt, ob dieses Element über animierte Eigenschaften verfügt.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.HasAnimatedProperties">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this element has animations attached to any of its properties; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn Animationen an eine der Eigenschaften dieses Elements angefügt sind, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.HasAnimatedProperties">
          <source>This property returns <ph id="ph1">`true`</ph> either for persistent (unclocked, always-running) animations or for animations that have a specific timeline.</source>
          <target state="translated">Diese Eigenschaft gibt <ph id="ph1">`true`</ph> für permanente (nicht getaktete, immer ausgeführte) Animationen oder für Animationen, die einen bestimmten Zeitplan aufweisen.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.InputBindings">
          <source>Gets the collection of input bindings that are associated with this element.</source>
          <target state="translated">Ruft die Auflistung der Eingabebindungen ab, die diesem Element zugeordnet sind.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.InputBindings">
          <source>The collection of input bindings.</source>
          <target state="translated">Die Auflistung der Eingabebindungen.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.InputBindings">
          <source>Input bindings support the binding of commands to input devices.</source>
          <target state="translated">Eingabe Bindungen unterstützen die Bindung von Befehlen für die Eingabe von Geräten.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.InputBindings">
          <source>For example, <ph id="ph1">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> implements input bindings that include properties that are specific to mouse devices.</source>
          <target state="translated">Beispielsweise <ph id="ph1">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> implementiert Eingabe Bindungen, die Eigenschaften enthalten, die für Mausgeräte spezifisch sind.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.InputBindings">
          <source>The collection of input bindings includes both input bindings that pertain to the type and also input bindings that are declared on the instance.</source>
          <target state="translated">Die Auflistung der Eingabe Bindungen enthält sowohl Eingabe-Bindungen, die in den Typ zu beziehen, als auch Eingabe Bindungen, die auf der Instanz deklariert werden.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.InputBindings">
          <source>A related property, <ph id="ph1">&lt;xref:System.Windows.ContentElement.CommandBindings%2A&gt;</ph>, maintains a collection of command bindings.</source>
          <target state="translated">Eine verwandte Eigenschaft <ph id="ph1">&lt;xref:System.Windows.ContentElement.CommandBindings%2A&gt;</ph>, verwaltet eine Auflistung von befehlsbindungen.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.InputBindings">
          <source>These bindings differ from input bindings in that they represent the next level down of command processing - actions that are tied to known commands and class-specific handlers for them.</source>
          <target state="translated">Diese Bindungen unterscheiden sich von Eingabe Bindungen insofern, dass sie die nächste Ebene nach unten der befehlsverarbeitung - Aktionen darstellen, die auf bekannte Befehle und klassenspezifische Handler für diese gebunden sind.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.InputBindings">
          <source>XAML Property Element Usage</source>
          <target state="translated">Verwendung von XAML-Eigenschaftenelementen</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.InputBindings">
          <source>XAML Values</source>
          <target state="translated">XAML-Werte</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.InputBindings">
          <source><bpt id="p1">*</bpt>oneOrMoreInputBindings<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>oneOrMoreInputBindings<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.InputBindings">
          <source>One or more <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> elements (typically the <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> derived classes).</source>
          <target state="translated">Eine oder mehrere <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> Elemente (in der Regel die <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> oder <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> abgeleiteten Klassen).</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.InputBindings">
          <source>Each of these is expected to have a <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.Gesture%2A&gt;</ph> attribute set.</source>
          <target state="translated">Jedes davon wird erwartet eine <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.Gesture%2A&gt;</ph> -Attribut festgelegt ist.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.IsEnabled">
          <source>Gets or sets a value that indicates whether this element is enabled in the <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>.</source>
          <target state="translated">Ruft einen Wert ab, der angibt, ob dieses Element in der <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> aktiviert ist, oder legt diesen fest.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsEnabled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element is enabled; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn das Element aktiviert ist, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsEnabled">
          <source>The default value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Der Standardwert ist <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsEnabled">
          <source>Dependency Property Information</source>
          <target state="translated">Informationen zur Abhängigkeitseigenschaft</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsEnabled">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsEnabled">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">Metadaten-Eigenschaften festgelegt auf. <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsEnabled">
          <source>None</source>
          <target state="translated">Keiner</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsEnabled">
          <source>The following example creates a style that includes a property setter that gives an alternate visual behavior when a <ph id="ph1">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.ContentElement.IsEnabled%2A&gt;</ph> <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Das folgende Beispiel erstellt ein Format, das ein Eigenschaftensetter, die ein alternatives visuelles Verhalten bietet bei einer <ph id="ph1">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> festgelegt ist, um <ph id="ph2">&lt;xref:System.Windows.ContentElement.IsEnabled%2A&gt;</ph> <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.IsEnabledChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsEnabled" /&gt;</ph> property on this element changes.</source>
          <target state="translated">Tritt ein, wenn der Wert der <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsEnabled" /&gt;</ph>-Eigenschaft für dieses Element geändert wird.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.IsEnabledChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">Dieser Member ist ein <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> Ereignis, nicht für ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.IsEnabledCore">
          <source>Gets a value that becomes the return value of <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsEnabled" /&gt;</ph> in derived classes.</source>
          <target state="translated">Ruft einen Wert ab, der in abgeleiteten Klassen zum Rückgabewert von <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsEnabled" /&gt;</ph> wird.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsEnabledCore">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element is enabled; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn das Element aktiviert ist, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsEnabledCore">
          <source>The default implementation of this property caches the value and also calculates whether the parent element of this element is enabled.</source>
          <target state="translated">Die standardmäßige Implementierung dieser Eigenschaft den Wert zwischengespeichert und berechnet, ob das übergeordnete Element dieses Elements aktiviert ist.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsEnabledCore">
          <source>(If the parent is not enabled, the child element cannot be effectively enabled in practical <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>.) If you choose to override this implementation, make certain that you call the base implementation to preserve this behavior.</source>
          <target state="translated">(Wenn das übergeordnete Element nicht aktiviert ist, das untergeordnete Element kann nicht aktiviert werden, effektiv in praktische <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>.) Wenn Sie diese Implementierung überschreiben, stellen Sie sicher, dass Sie die grundlegende Implementierung, um dieses Verhalten beizubehalten aufrufen.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.IsEnabledProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsEnabled" /&gt;</ph> dependency property.</source>
          <target state="translated">Bezeichnet die <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsEnabled" /&gt;</ph>-Abhängigkeitseigenschaft.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.IsFocused">
          <source>Gets a value that determines whether this element has logical focus.</source>
          <target state="translated">Ruft einen Wert ab, der bestimmt, ob dieses Element den logischen Fokus hat.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsFocused">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this element has logical focus; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn dieses Element über den logischen Fokus verfügt, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsFocused">
          <source>Logical focus might differ from keyboard focus if an application has multiple focus divisions, such as between menu contents and the remainder of the application.</source>
          <target state="translated">Der logische Fokus unterscheiden sich vom Tastaturfokus, wenn eine Anwendung mehrere Abteilungen für den Fokus, z. B. zwischen Menüinhalt und den Rest der Anwendung.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsFocused">
          <source>In this scenario, keyboard focus can only be on one element of the application  UI, however, certain elements in other focus divisions might still retain logical focus.</source>
          <target state="translated">In diesem Fall über den Tastaturfokus kann nur für ein Element der Benutzeroberfläche der Anwendung vorhanden sein, jedoch möglicherweise bestimmte Elemente in anderen Abteilungen Fokus weiterhin den logischen Fokus beibehalten.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsFocused">
          <source>For more information on logical focus, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept> and <bpt id="p2">[</bpt>Focus Overview<ept id="p2">](~/docs/framework/wpf/advanced/focus-overview.md)</ept>.</source>
          <target state="translated">Weitere Informationen über den logischen Fokus finden Sie unter <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept> und <bpt id="p2">[</bpt>Focus Overview<ept id="p2">](~/docs/framework/wpf/advanced/focus-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsFocused">
          <source>Dependency Property Information</source>
          <target state="translated">Informationen zur Abhängigkeitseigenschaft</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsFocused">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsFocused">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">Metadaten-Eigenschaften festgelegt auf. <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsFocused">
          <source>None</source>
          <target state="translated">Keiner</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsFocused">
          <source>The following example creates a style that makes a <ph id="ph1">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> focusable by default and gives it a visual behavior when it receives focus.</source>
          <target state="translated">Im folgenden Beispiel wird einen Stil erstellt, eine <ph id="ph1">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> den Fokus erhalten kann, in der Standardeinstellung und weist ihm ein visuelles Verhalten, wenn es den Fokus erhält.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.IsFocusedProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsFocused" /&gt;</ph> dependency property.</source>
          <target state="translated">Bezeichnet die <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsFocused" /&gt;</ph>-Abhängigkeitseigenschaft.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.IsInputMethodEnabled">
          <source>Gets a value that indicates whether an input method system, such as an <ph id="ph1">[!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)]</ph>, is enabled for processing the input to this element.</source>
          <target state="translated">Ruft einen Wert ab, der angibt, ob ein Eingabemethodensystem (beispielsweise <ph id="ph1">[!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)]</ph>) für die Verarbeitung von Eingaben für dieses Element aktiviert ist.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsInputMethodEnabled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if an input method is active; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn eine Eingabemethode aktiv ist, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsInputMethodEnabled">
          <source>The default value of the underlying attached property is <ph id="ph1">&lt;see langword="true" /&gt;</ph>; however, this value is influenced by the state of input methods at runtime.</source>
          <target state="translated">Der Standardwert der zugrunde liegenden angefügten Eigenschaft ist <ph id="ph1">&lt;see langword="true" /&gt;</ph>, aber dieser Wert wird durch den Zustand der Eingabemethoden zur Laufzeit beeinflusst.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsInputMethodEnabled">
          <source>This property returns the value that is returned by the attached property <ph id="ph1">&lt;xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType&gt;</ph> for the currently enabled input methods (keyboard, speech, and other input devices).</source>
          <target state="translated">Diese Eigenschaft gibt den Wert, der durch die angefügte Eigenschaft zurückgegeben wird <ph id="ph1">&lt;xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType&gt;</ph> für die derzeit aktivierten Eingabemethoden (Tastatur, Sprache und andere Eingabegeräte).</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.IsKeyboardFocused">
          <source>Gets a value that indicates whether this element has keyboard focus.</source>
          <target state="translated">Ruft einen Wert ab, der angibt, ob dieses Element über den Tastaturfokus verfügt.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsKeyboardFocused">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this element has keyboard focus; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn dieses Element über den Tastaturfokus verfügt, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsKeyboardFocused">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Der Standardwert ist <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsKeyboardFocused">
          <source>Dependency Property Information</source>
          <target state="translated">Informationen zur Abhängigkeitseigenschaft</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsKeyboardFocused">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsKeyboardFocused">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">Metadaten-Eigenschaften festgelegt auf. <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsKeyboardFocused">
          <source>None</source>
          <target state="translated">Keiner</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.IsKeyboardFocusedChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsKeyboardFocused" /&gt;</ph> property changes on this element.</source>
          <target state="translated">Tritt ein, wenn der Wert der <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsKeyboardFocused" /&gt;</ph>-Eigenschaft für dieses Element geändert wird.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.IsKeyboardFocusedChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">Dieser Member ist ein <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> Ereignis, nicht für ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.IsKeyboardFocusedProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsKeyboardFocused" /&gt;</ph> dependency property.</source>
          <target state="translated">Bezeichnet die <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsKeyboardFocused" /&gt;</ph>-Abhängigkeitseigenschaft.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.IsKeyboardFocusWithin">
          <source>Gets a value that indicates whether keyboard focus is anywhere within the element or child elements.</source>
          <target state="translated">Ruft einen Wert ab, der angibt, ob sich der Tastaturfokus innerhalb des Elements oder seiner untergeordneten Elemente befindet.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsKeyboardFocusWithin">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if keyboard focus is on the element or its child elements; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn sich der Tastaturfokus auf dem Element oder seinen untergeordneten Elementen befindet, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsKeyboardFocusWithin">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Der Standardwert ist <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsKeyboardFocusWithin">
          <source>Changes to the value of this property typically raise the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt;</ph> event, unless a derived class has overridden <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged%2A&gt;</ph> to suppress the event.</source>
          <target state="translated">Änderungen des Werts dieser Eigenschaft in der Regel Auslösen der <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt;</ph> Ereignis außer eine abgeleitete Klasse außer Kraft gesetzt wurde <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged%2A&gt;</ph> um das Ereignis zu unterdrücken.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsKeyboardFocusWithin">
          <source>You do not set this property directly, but you can set the focus to the element by calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.Focus%2A&gt;</ph>, or by making a <ph id="ph2">&lt;xref:System.Windows.ContentElement.MoveFocus%2A&gt;</ph> request.</source>
          <target state="translated">Diese Eigenschaft wird nicht direkt festgelegt, aber Sie können den Fokus auf das Element festlegen, durch den Aufruf <ph id="ph1">&lt;xref:System.Windows.ContentElement.Focus%2A&gt;</ph>, oder durch Treffen einer <ph id="ph2">&lt;xref:System.Windows.ContentElement.MoveFocus%2A&gt;</ph> Anforderung.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsKeyboardFocusWithin">
          <source>Either of these method calls might change this property value.</source>
          <target state="translated">Beide Methoden rufen möglicherweise Wert dieser Eigenschaft geändert werden.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsKeyboardFocusWithin">
          <source>Dependency Property Information</source>
          <target state="translated">Informationen zur Abhängigkeitseigenschaft</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsKeyboardFocusWithin">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsKeyboardFocusWithin">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">Metadaten-Eigenschaften festgelegt auf. <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsKeyboardFocusWithin">
          <source>None</source>
          <target state="translated">Keiner</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" /&gt;</ph> property changes on this element.</source>
          <target state="translated">Tritt ein, wenn der Wert der <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" /&gt;</ph>-Eigenschaft für dieses Element geändert wird.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">Dieser Member ist ein <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> Ereignis, nicht für ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.IsKeyboardFocusWithinProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsKeyboardFocusWithin" /&gt;</ph> dependency property.</source>
          <target state="translated">Bezeichnet die <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsKeyboardFocusWithin" /&gt;</ph>-Abhängigkeitseigenschaft.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.IsMouseCaptured">
          <source>Gets a value that indicates whether the mouse is captured by this element.</source>
          <target state="translated">Ruft einen Wert ab, der angibt, ob die Maus von diesem Element aufgezeichnet wird.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseCaptured">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element has mouse capture; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn das Element Mauseingaben erfasst, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseCaptured">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Der Standardwert ist <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseCaptured">
          <source>Mouse capture state is related to in-process drag-and-drop operations.</source>
          <target state="translated">Maus Aufzeichnungsstatus bezieht sich auf prozessinternen Drag &amp; Drop-Vorgänge.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseCaptured">
          <source>Dependency Property Information</source>
          <target state="translated">Informationen zur Abhängigkeitseigenschaft</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseCaptured">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseCaptured">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">Metadaten-Eigenschaften festgelegt auf. <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseCaptured">
          <source>None</source>
          <target state="translated">Keiner</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseCaptured">
          <source>The following example turns the mouse capture state on or off based on whether the mouse is already captured by the element.</source>
          <target state="translated">Im folgenden Beispiel wird den Zustand der Maus Erfassung ein- oder ausschalten, abhängig davon, ob das Element bereits auf die Maus erfasst.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.IsMouseCapturedChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsMouseCaptured" /&gt;</ph> property changes on this element.</source>
          <target state="translated">Tritt ein, wenn der Wert der <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsMouseCaptured" /&gt;</ph>-Eigenschaft für dieses Element geändert wird.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.IsMouseCapturedChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">Dieser Member ist ein <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> Ereignis, nicht für ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.IsMouseCapturedProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsMouseCaptured" /&gt;</ph> dependency property.</source>
          <target state="translated">Bezeichnet die <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsMouseCaptured" /&gt;</ph>-Abhängigkeitseigenschaft.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.IsMouseCaptureWithin">
          <source>Gets a value that determines whether mouse capture is held by this element or by child elements in its element tree.</source>
          <target state="translated">Ruft einen Wert ab, der bestimmt, ob die Mausaufzeichnung in diesem Element oder in untergeordneten Elementen in seiner Elementstruktur enthalten ist.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseCaptureWithin">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this element or a contained element has mouse capture; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn für dieses Element oder ein enthaltenes Element die Erfassung von Mauseingaben festgelegt ist, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseCaptureWithin">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Der Standardwert ist <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseCaptureWithin">
          <source>Dependency Property Information</source>
          <target state="translated">Informationen zur Abhängigkeitseigenschaft</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseCaptureWithin">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseCaptureWithin">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">Metadaten-Eigenschaften festgelegt auf. <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseCaptureWithin">
          <source>None</source>
          <target state="translated">Keiner</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="F:System.Windows.ContentElement.IsMouseCaptureWithinProperty" /&gt;</ph> changes on this element.</source>
          <target state="translated">Tritt ein, wenn der Wert der <ph id="ph1">&lt;see cref="F:System.Windows.ContentElement.IsMouseCaptureWithinProperty" /&gt;</ph> für dieses Element geändert wird.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">Dieser Member ist ein <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> Ereignis, nicht für ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.IsMouseCaptureWithinProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin" /&gt;</ph> dependency property.</source>
          <target state="translated">Bezeichnet die <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin" /&gt;</ph>-Abhängigkeitseigenschaft.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.IsMouseDirectlyOver">
          <source>Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.</source>
          <target state="translated">Ruft einen Wert ab, der angibt, ob die Position des Mauszeigers den Treffertestergebnissen entspricht, für die die Elementzusammensetzung berücksichtigt wird.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseDirectlyOver">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the mouse pointer is over the same element result as a hit test; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Wenn der Mauszeiger über demselben Elementergebnis wie ein Treffertest befindet; andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseDirectlyOver">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Der Standardwert ist <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseDirectlyOver">
          <source>Unlike <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt;</ph>, this property is only <ph id="ph2">`true`</ph> if the mouse pointer is over the literal element—as it is for a hit test.</source>
          <target state="translated">Im Gegensatz zu <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt;</ph>, diese Eigenschaft ist nur <ph id="ph2">`true`</ph> , wenn der Mauszeiger über dem literalen Element ist – wie für einen Treffertest.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseDirectlyOver">
          <source>If the mouse pointer is instead over a child element, in particular over elements that are part of an element's deeper template and compositing, this property will be <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Wenn der Mauszeiger stattdessen über ein untergeordnetes Element ist, insbesondere über Elemente, die Teil eines Elements eine umfassendere Vorlage und Compositing, sind diese Eigenschaft werden <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseDirectlyOver">
          <source>Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.</source>
          <target state="translated">Wenn Sie wissen, wie ein Steuerelement zusammengesetzte ist (z. B. Sie verwenden diese Eigenschaft in einer benutzerdefinierten Steuerelementvorlage für ein Steuerelement, das Sie definieren), diese Eigenschaft möglicherweise unerwartete Ergebnisse zurückgeben.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseDirectlyOver">
          <source>For most scenarios where you are not authoring controls, use <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt;</ph> instead.</source>
          <target state="translated">Verwenden Sie für die meisten Szenarien, in denen Sie keine Steuerelemente erstellt werden, <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt;</ph> stattdessen.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseDirectlyOver">
          <source>If the mouse is captured by this element, and this property is <ph id="ph1">`true`</ph> at time of capture, this property will continue to return <ph id="ph2">`true`</ph> until mouse capture is lost and the pointer is not over its bounds.</source>
          <target state="translated">Wenn dieses Element die Maus erfasst und diese Eigenschaft ist <ph id="ph1">`true`</ph> Zeitpunkt der Erfassung weiterhin diese Eigenschaft zurückgeben <ph id="ph2">`true`</ph> bis Mauseingaben aufzufangen verloren gegangen ist und der Zeiger nicht über die Grenzen ist.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseDirectlyOver">
          <source>Dependency Property Information</source>
          <target state="translated">Informationen zur Abhängigkeitseigenschaft</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseDirectlyOver">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseDirectlyOver">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">Metadaten-Eigenschaften festgelegt auf. <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseDirectlyOver">
          <source>None</source>
          <target state="translated">Keiner</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.IsMouseDirectlyOverChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" /&gt;</ph> property changes on this element.</source>
          <target state="translated">Tritt ein, wenn der Wert der <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" /&gt;</ph>-Eigenschaft für dieses Element geändert wird.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.IsMouseDirectlyOverChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">Dieser Member ist ein <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> Ereignis, nicht für ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.IsMouseDirectlyOverProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" /&gt;</ph> dependency property.</source>
          <target state="translated">Bezeichnet die <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" /&gt;</ph>-Abhängigkeitseigenschaft.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.IsMouseOver">
          <source>Gets a value that indicates whether the mouse pointer is located over this element (including visual child elements, or its control compositing).</source>
          <target state="translated">Ruft einen Wert ab, der angibt, ob sich der Mauszeiger über diesem Element befindet (einschließlich visueller untergeordneter Elemente und der Elemente, aus denen sich ein Steuerelement zusammensetzt).</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseOver">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if mouse pointer is over the element or its child elements; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn sich der Mauszeiger über dem Element oder seinen untergeordneten Elementen befindet, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseOver">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Der Standardwert ist <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseOver">
          <source>Although an analogous "IsMouseOverChanged" event does not exist, several similar events do.</source>
          <target state="translated">Obwohl eine analoge "IsMouseOverChanged"-Ereignis nicht vorhanden ist, sind mehrere ähnliche Ereignisse auf.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseOver">
          <source>For example, you can use <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseEnter&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseMove&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged&gt;</ph>.</source>
          <target state="translated">Beispielsweise können Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseEnter&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseMove&gt;</ph>, und <ph id="ph3">&lt;xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseOver">
          <source>If this element captures the mouse, this property remains <ph id="ph1">`true`</ph> until mouse capture is lost and the mouse pointer leaves the element bounds.</source>
          <target state="translated">Wenn dieses Element die Maus erfasst hat, wird diese Eigenschaft bleibt <ph id="ph1">`true`</ph> bis Mauseingaben aufzufangen verloren gegangen ist und der Mauszeiger den Bereich der Grenzen des Elements verlässt.</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseOver">
          <source>Dependency Property Information</source>
          <target state="translated">Informationen zur Abhängigkeitseigenschaft</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseOver">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseOver">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">Metadaten-Eigenschaften festgelegt auf. <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseOver">
          <source>None</source>
          <target state="translated">Keiner</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseOver">
          <source>The following example creates a style that includes a property setter that gives an alternate visual behavior when a <ph id="ph1">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> reports <ph id="ph2">&lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt;</ph> <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Das folgende Beispiel erstellt ein Format, das ein Eigenschaftensetter, die ein alternatives visual Verhalten gibt bei einem <ph id="ph1">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> Berichte <ph id="ph2">&lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt;</ph> <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.IsMouseOverProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsMouseOver" /&gt;</ph> dependency property.</source>
          <target state="translated">Bezeichnet die <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsMouseOver" /&gt;</ph>-Abhängigkeitseigenschaft.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.IsStylusCaptured">
          <source>Gets a value that indicates whether the stylus is captured to this element.</source>
          <target state="translated">Ruft einen Wert ab, der angibt, ob der Tablettstift für dieses Element erfasst wird.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusCaptured">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element has stylus capture; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn das Element Tablettstifteingaben erfasst, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusCaptured">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Der Standardwert ist <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusCaptured">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein.</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusCaptured">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusCaptured">
          <source>Dependency Property Information</source>
          <target state="translated">Informationen zur Abhängigkeitseigenschaft</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusCaptured">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusCaptured">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">Metadaten-Eigenschaften festgelegt auf. <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusCaptured">
          <source>None</source>
          <target state="translated">Keiner</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.IsStylusCapturedChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsStylusCaptured" /&gt;</ph> property changes on this element.</source>
          <target state="translated">Tritt ein, wenn der Wert der <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsStylusCaptured" /&gt;</ph>-Eigenschaft für dieses Element geändert wird.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.IsStylusCapturedChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">Dieser Member ist ein <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> Ereignis, nicht für ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.IsStylusCapturedProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsStylusCaptured" /&gt;</ph> dependency property.</source>
          <target state="translated">Bezeichnet die <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsStylusCaptured" /&gt;</ph>-Abhängigkeitseigenschaft.</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.IsStylusCaptureWithin">
          <source>Gets a value that determines whether stylus capture is held by this element, including child elements and control compositing.</source>
          <target state="translated">Ruft einen Wert ab, der angibt, ob das Element einschließlich der untergeordneten Elemente und der Elemente, aus denen sich ein Steuerelement zusammensetzt, Tablettstifteingaben erfasst.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusCaptureWithin">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if stylus capture is held within this element; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn das Element Tablettstifteingaben erfasst, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusCaptureWithin">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusCaptureWithin">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusCaptureWithin">
          <source>Dependency Property Information</source>
          <target state="translated">Informationen zur Abhängigkeitseigenschaft</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusCaptureWithin">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusCaptureWithin">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">Metadaten-Eigenschaften festgelegt auf. <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusCaptureWithin">
          <source>None</source>
          <target state="translated">Keiner</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.IsStylusCaptureWithinChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" /&gt;</ph> property changes on this element.</source>
          <target state="translated">Tritt ein, wenn der Wert der <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" /&gt;</ph>-Eigenschaft für dieses Element geändert wird.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.IsStylusCaptureWithinChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">Dieser Member ist ein <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> Ereignis, nicht für ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.IsStylusCaptureWithinProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" /&gt;</ph> dependency property.</source>
          <target state="translated">Bezeichnet die <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" /&gt;</ph>-Abhängigkeitseigenschaft.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.IsStylusDirectlyOver">
          <source>Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.</source>
          <target state="translated">Ruft einen Wert ab, der angibt, ob die Position des Tablettstifts den Treffertestergebnissen entspricht, für die die Elementzusammensetzung berücksichtigt wird.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusDirectlyOver">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stylus is over the same element as a hit test; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn sich der Tablettstift über dem gleichen Element wie ein Treffertest befindet, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusDirectlyOver">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Der Standardwert ist <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusDirectlyOver">
          <source>Unlike <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusOver%2A&gt;</ph>, this property is only <ph id="ph2">`true`</ph> if the stylus is over the element.</source>
          <target state="translated">Im Gegensatz zu <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusOver%2A&gt;</ph>, diese Eigenschaft ist nur <ph id="ph2">`true`</ph> , wenn der Tablettstift über dem Element befindet.</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusDirectlyOver">
          <source>If the stylus is instead over a child element or over elements that are part of an element's deeper compositing, this property will be <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Wenn sich der Tablettstift stattdessen über ein untergeordnetes Element oder Elemente, die Teil einer tieferen elementzusammensetzung sind, wird diese Eigenschaft werden <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusDirectlyOver">
          <source>Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.</source>
          <target state="translated">Wenn Sie wissen, wie ein Steuerelement zusammengesetzte ist (z. B. Sie verwenden diese Eigenschaft in einer benutzerdefinierten Steuerelementvorlage für ein Steuerelement, das Sie definieren), diese Eigenschaft möglicherweise unerwartete Ergebnisse zurückgeben.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusDirectlyOver">
          <source>For most scenarios where you are not authoring controls, use <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusOver%2A&gt;</ph> instead.</source>
          <target state="translated">Verwenden Sie für die meisten Szenarien, in denen Sie keine Steuerelemente erstellt werden, <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusOver%2A&gt;</ph> stattdessen.</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusDirectlyOver">
          <source>If this element has stylus capture and this property is <ph id="ph1">`true`</ph> at the time of capture, this property remains <ph id="ph2">`true`</ph> until stylus capture is lost and the stylus is not over its bounds.</source>
          <target state="translated">Wenn dieses Element den Tablettstift hat und diese Eigenschaft ist <ph id="ph1">`true`</ph> zum Zeitpunkt der Erfassung, diese Eigenschaft bleibt <ph id="ph2">`true`</ph> bis Tablettstift verloren gegangen ist und der Stift nicht über die Grenzen ist.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusDirectlyOver">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusDirectlyOver">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusDirectlyOver">
          <source>Dependency Property Information</source>
          <target state="translated">Informationen zur Abhängigkeitseigenschaft</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusDirectlyOver">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusDirectlyOver">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">Metadaten-Eigenschaften festgelegt auf. <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusDirectlyOver">
          <source>None</source>
          <target state="translated">Keiner</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.IsStylusDirectlyOverChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" /&gt;</ph> property changes on this element.</source>
          <target state="translated">Tritt ein, wenn der Wert der <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" /&gt;</ph>-Eigenschaft für dieses Element geändert wird.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.IsStylusDirectlyOverChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">Dieser Member ist ein <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> Ereignis, nicht für ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.IsStylusDirectlyOverProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" /&gt;</ph> dependency property.</source>
          <target state="translated">Bezeichnet die <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" /&gt;</ph>-Abhängigkeitseigenschaft.</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.IsStylusOver">
          <source>Gets a value that indicates whether the stylus is located over this element (including visual child elements).</source>
          <target state="translated">Ruft einen Wert ab, der angibt, ob sich der Tablettstift über diesem Element (einschließlich untergeordneter visueller Elemente) befindet.</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusOver">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stylus is over the element or its child elements; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn sich der Tablettstift über dem Element oder seinen untergeordneten Elementen befindet, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusOver">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Der Standardwert ist <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusOver">
          <source>If this element has stylus capture, this property remains <ph id="ph1">`true`</ph> until stylus capture is lost and the pointer is out of its bounds.</source>
          <target state="translated">Wenn dieses Element die Stiftauswahl verfügt, wird diese Eigenschaft bleibt <ph id="ph1">`true`</ph> bis Tablettstift verloren gegangen ist und der Mauszeiger befindet sich außerhalb der Grenzen.</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusOver">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein.</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusOver">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusOver">
          <source>Dependency Property Information</source>
          <target state="translated">Informationen zur Abhängigkeitseigenschaft</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusOver">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusOver">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">Metadaten-Eigenschaften festgelegt auf. <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusOver">
          <source>None</source>
          <target state="translated">Keiner</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.IsStylusOverProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsStylusOver" /&gt;</ph> dependency property.</source>
          <target state="translated">Bezeichnet die <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsStylusOver" /&gt;</ph>-Abhängigkeitseigenschaft.</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.KeyDown">
          <source>Occurs when a key is pressed while focus is on this element.</source>
          <target state="translated">Tritt auf, wenn eine Taste gedrückt wird, während sich der Fokus auf diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyDown">
          <source>Key handling interacts with other platform features such as commanding and text composition.</source>
          <target state="translated">Schlüsselverarbeitung interagiert mit anderen Plattformfunktionen, z. B. Befehle und Text Zusammensetzung.</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyDown">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyDown&gt;</ph> event is a lower-level text input event that might not behave as expected on certain controls.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyDown&gt;</ph> Ereignis ist eine technisch anspruchsvolle Texteingabeereignis, die nicht auf bestimmte Steuerelemente erwartungsgemäß Verhalten.</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyDown">
          <source>This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</source>
          <target state="translated">Dies ist, da einige Steuerelemente verfügen über Steuerelement Compositing oder Klassenbehandlung, die eine auf höherer Ebene Version des Texts enthält Eingabe Behandlung und verknüpfte Ereignisse.</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyDown">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType&gt;</ph> attached event for this class so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.KeyDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.KeyDown&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyDown">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyDown&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyDown">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyDown">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyDown">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyDown">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyDown">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyDown">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewKeyDown&gt;</ph>.</source>
          <target state="translated">Das entsprechende Tunneling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewKeyDown&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnKeyDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnKeyDown%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.KeyDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.KeyDown" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.KeyDown" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.KeyDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.KeyDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.KeyDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.KeyDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.KeyDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.KeyUp">
          <source>Occurs when a key is released while focus is on this element.</source>
          <target state="translated">Tritt auf, wenn eine Taste losgelassen wird, während sich der Fokus auf diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyUp">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType&gt;</ph> attached event for this class so that  <ph id="ph2">&lt;xref:System.Windows.ContentElement.KeyUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.KeyUp&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyUp">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyUp&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyUp">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyUp">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyUp">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyUp">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyUp">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyUp">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewKeyUp&gt;</ph>.</source>
          <target state="translated">Das entsprechende Tunneling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewKeyUp&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnKeyUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnKeyUp%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.KeyUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.KeyUp" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.KeyUp" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.KeyUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.KeyUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.KeyUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.KeyUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.KeyUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.LostFocus">
          <source>Occurs when this element loses logical focus.</source>
          <target state="translated">Tritt auf, wenn dieses Element den logischen Fokus verliert.</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostFocus">
          <source>Logical focus differs from keyboard focus if focus is deliberately forced away by using a method call but the previous keyboard focus exists in a different scope.</source>
          <target state="translated">Der logische Fokus unterscheidet sich vom Tastaturfokus, wenn der Fokus absichtlich durch einen Methodenaufruf verloren wird, der vorherige Tastaturfokus jedoch in einem anderen Gültigkeitsbereich vorhanden ist.</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostFocus">
          <source>In this scenario, keyboard focus remains where it is, and the element where a <ph id="ph1">&lt;xref:System.Windows.ContentElement.Focus%2A&gt;</ph> method is called still gets logical focus.</source>
          <target state="translated">In diesem Szenario, Tastatur Fokus bleibt, wo sie ist, und das Element, in dem eine <ph id="ph1">&lt;xref:System.Windows.ContentElement.Focus%2A&gt;</ph> Methode wird immer noch ruft der logische Fokus aufgerufen.</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostFocus">
          <source>A more precise interpretation of this event is that it is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsFocused%2A&gt;</ph> property of an element in the route changes from <ph id="ph2">`true`</ph> to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Eine genauere Interpretation dieses Ereignisses ist, dass die It ausgelöst wird, wenn der Wert von der <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsFocused%2A&gt;</ph> Eigenschaft eines Elements in der Route ändert sich von <ph id="ph2">`true`</ph> auf <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostFocus">
          <source>Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">Da dieses Ereignis bubbling-routing verwendet, das Element, das Fokus verloren hat möglicherweise ein untergeordnetes Element anstatt des Elements, dem der Ereignishandler tatsächlich angefügt.</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostFocus">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that gained focus.</source>
          <target state="translated">Überprüfen Sie die <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in die Ereignisdaten an das aktuelle Element zu bestimmen, die Fokus erhalten hat.</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostFocus">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostFocus">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostFocus">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostFocus">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostFocus">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostFocus">
          <source>There is no corresponding tunneling event.</source>
          <target state="translated">Es ist keine entsprechende Tunneling-Ereignis.</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostFocus">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostFocus%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostFocus%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.LostFocusEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostFocus" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostFocus" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostFocusEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostFocusEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostFocusEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostFocusEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostFocusEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.LostKeyboardFocus">
          <source>Occurs when the keyboard is no longer focused on this element.</source>
          <target state="translated">Tritt auf, wenn sich der Fokus der Tastatur nicht mehr auf diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostKeyboardFocus">
          <source>Because this event uses bubbling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">Da dieses Ereignis bubbling-routing verwendet, das Element, das Fokus verloren hat möglicherweise ein untergeordnetes Element anstatt des Elements, dem der Ereignishandler tatsächlich angefügt.</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostKeyboardFocus">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that lost focus.</source>
          <target state="translated">Überprüfen Sie die <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in die Ereignisdaten an das aktuelle Element zu bestimmen, die Fokus verloren hat.</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostKeyboardFocus">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.LostKeyboardFocus&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.LostKeyboardFocus&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostKeyboardFocus">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.LostKeyboardFocus&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.LostKeyboardFocus&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostKeyboardFocus">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostKeyboardFocus">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostKeyboardFocus">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostKeyboardFocus">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostKeyboardFocus">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostKeyboardFocus">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewLostKeyboardFocus&gt;</ph>.</source>
          <target state="translated">Das entsprechende Tunneling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewLostKeyboardFocus&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostKeyboardFocus">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostKeyboardFocus%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostKeyboardFocus%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.LostKeyboardFocusEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostKeyboardFocus" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostKeyboardFocus" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostKeyboardFocusEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostKeyboardFocusEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostKeyboardFocusEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostKeyboardFocusEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostKeyboardFocusEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.LostMouseCapture">
          <source>Occurs when this element loses mouse capture.</source>
          <target state="translated">Tritt auf, wenn dieses Element die Mausauswahl verliert.</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostMouseCapture">
          <source>When an element captures the mouse, it receives mouse input even if the pointer is outside its bounds.</source>
          <target state="translated">Wenn ein Element die Maus erfasst hat, erhält sie Mauseingaben, selbst wenn der Zeiger sich außerhalb der Begrenzungen.</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostMouseCapture">
          <source>The mouse is typically captured only during drag-and-drop operations.</source>
          <target state="translated">Die Maus ist in der Regel nur während der Drag-and-Drop-Vorgänge erfasst.</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostMouseCapture">
          <source>Because this event uses bubbling routing, the element that loses capture might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">Da dieses Ereignis bubbling-routing verwendet, das Element, das die Erfassung verliert möglicherweise ein untergeordnetes Element anstatt des Elements, dem der Ereignishandler tatsächlich angefügt.</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostMouseCapture">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that lost capture.</source>
          <target state="translated">Überprüfen Sie die <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in die Ereignisdaten an das aktuelle Element zu bestimmen, die Erfassung verloren.</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostMouseCapture">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.LostMouseCapture&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.LostMouseCapture&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostMouseCapture">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.LostMouseCapture&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.LostMouseCapture&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostMouseCapture">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostMouseCapture">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostMouseCapture">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostMouseCapture">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostMouseCapture">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostMouseCapture">
          <source>There is no defined corresponding tunneling event.</source>
          <target state="translated">Es gibt keine definiertes entsprechendes Tunneling-Ereignis.</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostMouseCapture">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostMouseCapture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostMouseCapture%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.LostMouseCaptureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostMouseCapture" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostMouseCapture" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostMouseCaptureEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostMouseCaptureEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostMouseCaptureEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostMouseCaptureEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostMouseCaptureEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.LostStylusCapture">
          <source>Occurs when this element loses stylus capture.</source>
          <target state="translated">Tritt auf, wenn dieses Element die Stiftauswahl verliert.</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostStylusCapture">
          <source>When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</source>
          <target state="translated">Wenn ein Element die Stiftauswahl erhält, erhält sie Stifteingabe, selbst wenn der Mauszeiger sich außerhalb der Begrenzungen befindet.</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostStylusCapture">
          <source>The stylus is typically captured only during drag-and-drop operations.</source>
          <target state="translated">Der Tablettstift wird in der Regel nur während der Drag-and-Drop-Vorgänge erfasst.</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostStylusCapture">
          <source>Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">Da dieses Ereignis bubbling-routing verwendet, das Element, das Fokus verloren hat möglicherweise ein untergeordnetes Element anstatt des Elements, dem der Ereignishandler tatsächlich angefügt.</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostStylusCapture">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that lost focus.</source>
          <target state="translated">Überprüfen Sie die <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in die Ereignisdaten an das aktuelle Element zu bestimmen, die Fokus verloren hat.</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostStylusCapture">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.LostStylusCapture&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.LostStylusCapture&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostStylusCapture">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.LostStylusCapture&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.LostStylusCapture&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostStylusCapture">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostStylusCapture">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostStylusCapture">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostStylusCapture">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostStylusCapture">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostStylusCapture">
          <source>There is no defined corresponding tunneling event.</source>
          <target state="translated">Es gibt keine definiertes entsprechendes Tunneling-Ereignis.</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostStylusCapture">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostStylusCapture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostStylusCapture%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.LostStylusCaptureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostStylusCapture" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostStylusCapture" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostStylusCaptureEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostStylusCaptureEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostStylusCaptureEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostStylusCaptureEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostStylusCaptureEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.LostTouchCapture">
          <source>Occurs when this element loses a touch capture.</source>
          <target state="translated">Tritt ein, wenn dieses Element keine Fingereingaben mehr erfasst.</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostTouchCapture">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostTouchCapture">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostTouchCapture">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostTouchCapture">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostTouchCapture">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostTouchCapture">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated">Eine <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> vom Typ <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostTouchCapture">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostTouchCapture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostTouchCapture%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.LostTouchCaptureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostTouchCapture" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostTouchCapture" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.MouseDown">
          <source>Occurs when any mouse button is pressed while the pointer is over this element.</source>
          <target state="translated">Tritt auf, wenn eine Maustaste gedrückt wird, während sich der Mauszeiger über diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseDown&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseDown&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseDown&gt;</ph> event is often raised together with either <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph>, which correspond to a press of one of the two standard mouse buttons.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseDown&gt;</ph> Ereignis wird häufig zusammen mit entweder <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> oder <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph>, das Drücken einer der beiden standard Maustasten entsprechen.</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> event reaches this element along the event route.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> und <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph> sind auch Routingereignisse, aber sie sind direkte Routingereignisse und die entsprechende Schaltfläche-spezifische-Ereignis wird ausgelöst, wenn die <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> -Ereignis dieses Element auf der Ereignisroute erreicht.</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>See Remarks for <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph>.</source>
          <target state="translated">Finden Sie unter "Hinweise" für <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> oder <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>A few <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> derived classes that have control-like behavior, for example, <ph id="ph2">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph>, might have inherent class handling for mouse button events.</source>
          <target state="translated">Einige <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> abgeleitete Klassen, die Control-ähnliches Verhalten, z. B. <ph id="ph2">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph>, möglicherweise inhärente Klassenbehandlung für Mausereignisse-Schaltfläche.</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>The left mouse button down event is the most likely event to have class handling in a control.</source>
          <target state="translated">Die linke Maustaste ausgelöste Ereignis ist das wahrscheinlichste Ereignis Klassenbehandlung in einem Steuerelement aufweisen.</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>The class handling often marks the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class event as handled.</source>
          <target state="translated">Die Klassenbehandlung häufig kennzeichnet die zugrunde liegende <ph id="ph1">&lt;xref:System.Windows.Input.Mouse&gt;</ph> Klassenereignis als behandelt.</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</source>
          <target state="translated">Nachdem das Ereignis als behandelt markiert ist, werden andere Instanzhandler, die diesem Element zugeordnet sind, nicht in der Regel ausgelöst.</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</source>
          <target state="translated">Andere Klasse oder Instanz Handler, die auf Elemente in der bubbling-Richtung zum Stamm in der Benutzeroberflächenautomatisierungs-Struktur angefügt werden, werden auch nicht in der Regel ausgelöst.</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>You can resolve the issue that is outlined in the preceding Important and still receive <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseDown&gt;</ph> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</source>
          <target state="translated">Können Sie beheben Sie das Problem, das in der vorherigen wichtig beschrieben wird und weiterhin <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseDown&gt;</ph> Ereignisse für die linke Maustaste unten Ereignisse in einer abgeleiteten Klasse, die eine Klassenbehandlung mithilfe einer dieser Lösungen verfügt:</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>Attach handlers for the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph> event, which is not marked as handled by the controls.</source>
          <target state="translated">Fügen Sie Handler für das <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph> -Ereignis, das nicht von den Steuerelementen als behandelt markiert ist.</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</source>
          <target state="translated">Beachten Sie, da dies eine Vorschauereignis ist, die Route am Stamm beginnt und auf das Steuerelement tunnelt.</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>Register a handler on the control procedurally by calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</source>
          <target state="translated">Registrieren Sie einen Handler für das Steuerelement prozeduralen durch Aufrufen von <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph> und wählen Sie die Option für die Signatur, die es ermöglicht die Ereignishandler für Ereignisse überwacht werden soll, selbst wenn sie bereits in die gerouteten Ereignisdaten als behandelt markiert sind.</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph>.</source>
          <target state="translated">Das entsprechende Tunneling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseDown%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.MouseDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseDown" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseDown" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.MouseEnter">
          <source>Occurs when the mouse pointer enters the bounds of this element.</source>
          <target state="translated">Tritt auf, wenn der Mauszeiger in den Bereich dieses Elements eintritt.</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseEnter">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseEnter&gt;</ph> is a <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> that uses the direct event handling routing strategy.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseEnter&gt;</ph> ist eine <bpt id="p1">[</bpt>Ereignisübersicht weitergeleitet<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> , routing-Strategie für die direkte Ereignisbehandlung verwendet.</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseEnter">
          <source>Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</source>
          <target state="translated">Direkte Routingereignisse werden nicht auf einer Route ausgelöst. Stattdessen werden diese in demselben Element behandelt, in dem sie ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseEnter">
          <source>However, they do enable other aspects of routed event behavior, such as event triggers in styles.</source>
          <target state="translated">Aktivieren sie jedoch andere Aspekte der Routingereignis-Verhalten, z. B. in Formaten-Ereignis ausgelöst.</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseEnter">
          <source>Although <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseEnter&gt;</ph> tracks when the mouse pointer enters the bounds of an element, this event more literally reports that the <ph id="ph2">&lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt;</ph> property value has changed from <ph id="ph3">`false`</ph> to <ph id="ph4">`true`</ph> on this element.</source>
          <target state="translated">Obwohl <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseEnter&gt;</ph> verfolgt nach, wenn der Mauszeiger die Grenzen eines Elements dieses Weitere Ereignis eintritt buchstäblich angibt, welches die <ph id="ph2">&lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt;</ph> Eigenschaftswert geändert hat <ph id="ph3">`false`</ph> auf <ph id="ph4">`true`</ph> für dieses Element.</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseEnter">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseEnter&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseEnter&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseEnter">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseEnter&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseEnter&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseEnter">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseEnter">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseEnter">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseEnter">
          <source>Direct</source>
          <target state="translated">Direkt</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseEnter">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseEnter">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseEnter%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseEnter%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.MouseEnterEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseEnter" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseEnter" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseEnterEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseEnterEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseEnterEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseEnterEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseEnterEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.MouseLeave">
          <source>Occurs when the mouse pointer leaves the bounds of this element.</source>
          <target state="translated">Tritt auf, wenn der Mauszeiger den Bereich dieses Elements verlässt.</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeave">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeave&gt;</ph> is a <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> that uses the direct event handling routing strategy.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeave&gt;</ph> ist eine <bpt id="p1">[</bpt>Ereignisübersicht weitergeleitet<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> , routing-Strategie für die direkte Ereignisbehandlung verwendet.</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeave">
          <source>Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</source>
          <target state="translated">Direkte Routingereignisse werden nicht auf einer Route ausgelöst. Stattdessen werden diese in demselben Element behandelt, in dem sie ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeave">
          <source>However, they do enable other aspects of routed event behavior, such as event triggers in styles.</source>
          <target state="translated">Aktivieren sie jedoch andere Aspekte der Routingereignis-Verhalten, z. B. in Formaten-Ereignis ausgelöst.</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeave">
          <source>Although <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeave&gt;</ph> tracks when the mouse leaves an element, this event more literally reports that the <ph id="ph2">&lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt;</ph> property value has changed from <ph id="ph3">`true`</ph> to <ph id="ph4">`false`</ph> on this element.</source>
          <target state="translated">Obwohl <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeave&gt;</ph> verfolgt nach, wann die Maus ein Element, das dieses Ereignis verlässt buchstäblich angibt, welches die <ph id="ph2">&lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt;</ph> Eigenschaftswert geändert hat <ph id="ph3">`true`</ph> auf <ph id="ph4">`false`</ph> für dieses Element.</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeave">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseLeave&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseLeave&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeave">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeave&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeave&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeave">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeave">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeave">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeave">
          <source>Direct</source>
          <target state="translated">Direkt</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeave">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeave">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseLeave%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseLeave%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.MouseLeaveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseLeave" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseLeave" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseLeaveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseLeaveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseLeaveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseLeaveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseLeaveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>Occurs when the left mouse button is pressed while the mouse pointer is over this element.</source>
          <target state="translated">Tritt auf, wenn die linke Maustaste gedrückt wird, während sich der Mauszeiger über diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>Although this <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">Obwohl dies <bpt id="p1">[</bpt>Ereignisübersicht weitergeleitet<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> scheint eine bubbling-Route durch eine Elementstruktur, führen es tatsächlich ist eine direkte Routingereignis, das ausgelöst wird, und die Elementstruktur nach jedem erneut <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">Dieses Ereignis ist eine der mehrere verwandte Ereignisse, die die Schaltflächen Einzelheiten einer zugrunde liegenden Bericht <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> Ereignis, das ein angefügtes Ereignis handelt, die von jedem Element ein Ereignisroute verarbeitet wird.</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>The arguments of this event expose the arguments of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">Die Argumente für dieses Ereignis verfügbar machen, die Argumente des zugrunde liegenden <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> Ereignis.</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">Wenn das Ereignis als behandelt der Ereignisroute markiert ist, werden die Maustaste los spezifischen Ereignisse dennoch ausgelöst; Allerdings müssen Handler bestimmter Ereignisse an die Schaltflächen hinzugefügt werden, durch explizites Aufrufen <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, mit der Option zum Behandeln von Ereignissen, die bereits als behandelt markiert werden, damit Listener des Ereignisses ist.</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
          <target state="translated">Konzeptionell kann dieses Ereignis (und andere los Ereignisse auf <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) eine Maus "Service" sein (mit der Definition des Diensts bereitgestellt werden, indem die <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> Klasse).</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">Das Ereignis fügt den Komfort, überprüfen Sie die Maus Schaltflächenzuständen (linke Ecke, nach oben und unten) von der ursprünglichen Mausereignisse in Daten für das Ereignis nicht belegen.</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">Erweiterte Szenarien, z. B. das Überprüfen von Zuständen von nicht standardmäßigen Schaltflächen, müssen Sie möglicherweise mit der <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> auf die <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> -Klasse anstelle der für <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>A few <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> derived classes that have control-like behavior, for example, <ph id="ph2">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph>, might have inherent class handling for mouse button events.</source>
          <target state="translated">Einige <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> abgeleitete Klassen, die Control-ähnliches Verhalten, z. B. <ph id="ph2">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph>, möglicherweise inhärente Klassenbehandlung für Mausereignisse-Schaltfläche.</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>The left mouse button down event is the most likely event to have class handling in a control.</source>
          <target state="translated">Die linke Maustaste ausgelöste Ereignis ist das wahrscheinlichste Ereignis Klassenbehandlung in einem Steuerelement aufweisen.</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>The class handling often marks the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class event as handled.</source>
          <target state="translated">Die Klassenbehandlung häufig kennzeichnet die zugrunde liegende <ph id="ph1">&lt;xref:System.Windows.Input.Mouse&gt;</ph> Klassenereignis als behandelt.</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</source>
          <target state="translated">Nachdem das Ereignis als behandelt markiert ist, werden andere Instanzhandler, die diesem Element zugeordnet sind, nicht in der Regel ausgelöst.</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</source>
          <target state="translated">Andere Klasse oder Instanz Handler, die auf Elemente in der bubbling-Richtung zum Stamm in der Benutzeroberflächenautomatisierungs-Struktur angefügt werden, werden auch nicht in der Regel ausgelöst.</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>You can resolve the issue that is outlined in the preceding Important and still receive <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</source>
          <target state="translated">Können Sie beheben Sie das Problem, das in der vorherigen wichtig beschrieben wird und weiterhin <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> Ereignisse für die linke Maustaste unten Ereignisse in einer abgeleiteten Klasse, die eine Klassenbehandlung mithilfe einer dieser Lösungen verfügt:</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>Attach handlers for the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph> event, which is not marked as handled by the controls.</source>
          <target state="translated">Fügen Sie Handler für das <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph> -Ereignis, das nicht von den Steuerelementen als behandelt markiert ist.</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</source>
          <target state="translated">Beachten Sie, da dies eine Vorschauereignis ist, die Route am Stamm beginnt und auf das Steuerelement tunnelt.</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>Register a handler on the control procedurally by calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</source>
          <target state="translated">Registrieren Sie einen Handler für das Steuerelement prozeduralen durch Aufrufen von <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph> und wählen Sie die Option für die Signatur, die es ermöglicht die Ereignishandler für Ereignisse überwacht werden soll, selbst wenn sie bereits in die gerouteten Ereignisdaten als behandelt markiert sind.</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>Direct</source>
          <target state="translated">Direkt</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.MouseLeftButtonDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseLeftButtonDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseLeftButtonDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseLeftButtonDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseLeftButtonDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseLeftButtonDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.MouseLeftButtonUp">
          <source>Occurs when the left mouse button is released while the mouse pointer is over this element.</source>
          <target state="translated">Tritt auf, wenn die linke Maustaste losgelassen wird, während sich der Mauszeiger über diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonUp">
          <source>Although this <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">Obwohl dies <bpt id="p1">[</bpt>Ereignisübersicht weitergeleitet<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> scheint eine bubbling-Route durch eine Elementstruktur, führen es tatsächlich ist eine direkte Routingereignis, das ausgelöst wird, und die Elementstruktur nach jedem erneut <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonUp">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">Dieses Ereignis ist eine der mehrere verwandte Ereignisse, die die Schaltflächen Einzelheiten einer zugrunde liegenden Bericht <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> Ereignis, das ein angefügtes Ereignis handelt, die von jedem Element ein Ereignisroute verarbeitet wird.</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonUp">
          <source>The arguments of this event expose the arguments of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">Die Argumente für dieses Ereignis verfügbar machen, die Argumente des zugrunde liegenden <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> Ereignis.</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonUp">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">Wenn das Ereignis als behandelt der Ereignisroute markiert ist, werden die Maustaste los spezifischen Ereignisse dennoch ausgelöst; Allerdings müssen Handler bestimmter Ereignisse an die Schaltflächen hinzugefügt werden, durch explizites Aufrufen <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, mit der Option zum Behandeln von Ereignissen, die bereits als behandelt markiert werden, damit Listener des Ereignisses ist.</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonUp">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
          <target state="translated">Konzeptionell kann dieses Ereignis (und andere los Ereignisse auf <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) eine Maus "Service" sein (mit der Definition des Diensts bereitgestellt werden, indem die <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> Klasse).</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonUp">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">Das Ereignis fügt den Komfort, überprüfen Sie die Maus Schaltflächenzuständen (linke Ecke, nach oben und unten) von der ursprünglichen Mausereignisse in Daten für das Ereignis nicht belegen.</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonUp">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">Erweiterte Szenarien, z. B. das Überprüfen von Zuständen von nicht standardmäßigen Schaltflächen, müssen Sie möglicherweise mit der <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> auf die <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> -Klasse anstelle der für <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonUp">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonUp">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonUp">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonUp">
          <source>Direct</source>
          <target state="translated">Direkt</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonUp">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.MouseLeftButtonUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseLeftButtonUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseLeftButtonUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseLeftButtonUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseLeftButtonUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseLeftButtonUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.MouseMove">
          <source>Occurs when the mouse pointer moves while over this element.</source>
          <target state="translated">Tritt auf, wenn der Mauszeiger bewegt wird, während er sich über diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseMove">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseMove&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseMove">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseMove&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseMove">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseMove">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseMove">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseMove">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseMove">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseMove">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;</ph>.</source>
          <target state="translated">Das entsprechende Tunneling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseMove">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseMove%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.MouseMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseMove" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseMove" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseMoveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseMoveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseMoveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseMoveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseMoveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>Occurs when the right mouse button is pressed while the mouse pointer is over this element.</source>
          <target state="translated">Tritt auf, wenn die rechte Maustaste gedrückt wird, während sich der Mauszeiger über diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>Although this <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">Obwohl dies <bpt id="p1">[</bpt>Ereignisübersicht weitergeleitet<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> scheint eine bubbling-Route durch eine Elementstruktur, führen es tatsächlich ist eine direkte Routingereignis, das ausgelöst wird, und die Elementstruktur nach jedem erneut <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">Dieses Ereignis ist eine der mehrere verwandte Ereignisse, die die Schaltflächen Einzelheiten einer zugrunde liegenden Bericht <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> Ereignis, das ein angefügtes Ereignis handelt, die von jedem Element ein Ereignisroute verarbeitet wird.</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>The arguments of this event expose the arguments of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">Die Argumente für dieses Ereignis verfügbar machen, die Argumente des zugrunde liegenden <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> Ereignis.</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">Wenn das Ereignis als behandelt der Ereignisroute markiert ist, werden die Maustaste los spezifischen Ereignisse dennoch ausgelöst; Allerdings müssen Handler bestimmter Ereignisse an die Schaltflächen hinzugefügt werden, durch explizites Aufrufen <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, mit der Option zum Behandeln von Ereignissen, die bereits als behandelt markiert werden, damit Listener des Ereignisses ist.</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
          <target state="translated">Konzeptionell kann dieses Ereignis (und andere los Ereignisse auf <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) eine Maus "Service" sein (mit der Definition des Diensts bereitgestellt werden, indem die <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> Klasse).</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">Das Ereignis fügt den Komfort, überprüfen Sie die Maus Schaltflächenzuständen (linke Ecke, nach oben und unten) von der ursprünglichen Mausereignisse in Daten für das Ereignis nicht belegen.</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">Erweiterte Szenarien, z. B. das Überprüfen von Zuständen von nicht standardmäßigen Schaltflächen, müssen Sie möglicherweise mit der <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> auf die <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> -Klasse anstelle der für <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>Right button mouse events frequently have native handling in application scenarios.</source>
          <target state="translated">Mausereignisse rechten Schaltfläche weisen systemeigene Behandlung häufig in Anwendungsszenarien.</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>For instance, a right mouse button down might display a context menu.</source>
          <target state="translated">Z. B. möglicherweise eine rechten Maustaste ein Kontextmenü angezeigt.</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>See <bpt id="p1">[</bpt>ContextMenu Overview<ept id="p1">](~/docs/framework/wpf/controls/contextmenu-overview.md)</ept>.</source>
          <target state="translated">Finden Sie unter <bpt id="p1">[</bpt>Übersicht über die ContextMenu<ept id="p1">](~/docs/framework/wpf/controls/contextmenu-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>Direct</source>
          <target state="translated">Direkt</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.MouseRightButtonDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseRightButtonDown" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseRightButtonDown" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseRightButtonDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseRightButtonDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseRightButtonDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseRightButtonDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseRightButtonDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.MouseRightButtonUp">
          <source>Occurs when the right mouse button is released while the mouse pointer is over this element.</source>
          <target state="translated">Tritt auf, wenn die rechte Maustaste losgelassen wird, während sich der Mauszeiger über diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonUp">
          <source>Although this <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">Obwohl dies <bpt id="p1">[</bpt>Ereignisübersicht weitergeleitet<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> scheint eine bubbling-Route durch eine Elementstruktur, führen es tatsächlich ist eine direkte Routingereignis, das ausgelöst wird, und die Elementstruktur nach jedem erneut <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonUp">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">Dieses Ereignis ist eine der mehrere verwandte Ereignisse, die die Schaltflächen Einzelheiten einer zugrunde liegenden Bericht <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> Ereignis, das ein angefügtes Ereignis handelt, die von jedem Element ein Ereignisroute verarbeitet wird.</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonUp">
          <source>The arguments of this event expose the arguments of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">Die Argumente für dieses Ereignis verfügbar machen, die Argumente des zugrunde liegenden <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> Ereignis.</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonUp">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">Wenn das Ereignis als behandelt der Ereignisroute markiert ist, werden die Maustaste los spezifischen Ereignisse dennoch ausgelöst; Allerdings müssen Handler bestimmter Ereignisse an die Schaltflächen hinzugefügt werden, durch explizites Aufrufen <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, mit der Option zum Behandeln von Ereignissen, die bereits als behandelt markiert werden, damit Listener des Ereignisses ist.</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonUp">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
          <target state="translated">Konzeptionell kann dieses Ereignis (und andere los Ereignisse auf <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) eine Maus "Service" sein (mit der Definition des Diensts bereitgestellt werden, indem die <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> Klasse).</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonUp">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">Das Ereignis fügt den Komfort, überprüfen Sie die Maus Schaltflächenzuständen (linke Ecke, nach oben und unten) von der ursprünglichen Mausereignisse in Daten für das Ereignis nicht belegen.</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonUp">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">Erweiterte Szenarien, z. B. das Überprüfen von Zuständen von nicht standardmäßigen Schaltflächen, müssen Sie möglicherweise mit der <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> auf die <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> -Klasse anstelle der für <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonUp">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonUp">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonUp">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonUp">
          <source>Direct</source>
          <target state="translated">Direkt</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonUp">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.MouseRightButtonUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseRightButtonUp" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseRightButtonUp" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseRightButtonUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseRightButtonUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseRightButtonUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseRightButtonUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseRightButtonUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.MouseUp">
          <source>Occurs when any mouse button is released over this element.</source>
          <target state="translated">Tritt auf, wenn eine Maustaste über diesem Element losgelassen wird.</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseUp">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseUp&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseUp">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseUp&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseUp">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseUp&gt;</ph> event is often raised together with either <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph>, which correspond to a release of one of the two standard mouse buttons.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseUp&gt;</ph> Ereignis wird häufig zusammen mit entweder <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> oder <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph>, die für eine Version eines der beiden standard Maustasten entsprechen.</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseUp">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> event reaches this element along the event route.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> und <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph> sind auch Routingereignisse, aber sie sind direkte Routingereignisse und die entsprechende Schaltfläche-spezifische-Ereignis wird ausgelöst, wenn die <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> -Ereignis dieses Element auf der Ereignisroute erreicht.</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseUp">
          <source>See Remarks for <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph>.</source>
          <target state="translated">Finden Sie unter "Hinweise" für <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> oder <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseUp">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseUp">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseUp">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseUp">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseUp">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseUp">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseUp&gt;</ph>.</source>
          <target state="translated">Das entsprechende Tunneling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseUp&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseUp%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.MouseUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseUp" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseUp" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.MouseWheel">
          <source>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</source>
          <target state="translated">Tritt auf, wenn der Benutzer das Mausrad dreht, während sich der Mauszeiger über diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseWheel">
          <source>Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive the <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseWheel&gt;</ph> event from a focused or captured element, the mouse pointer might actually be over another element.</source>
          <target state="translated">Fokus oder die Maus erfasst haben Vorrang vor, in dem der Mauszeiger befindet; aus diesem Grund erhalten Sie die <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseWheel&gt;</ph> Ereignis von einem Element mit Fokus oder aufgezeichnet, der Mauszeiger möglicherweise nicht über ein anderes Element.</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseWheel">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseWheel&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseWheel&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseWheel">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseWheel&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseWheel&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseWheel">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseWheel">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseWheel">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseWheel">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseWheel">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseWheel">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseWheel&gt;</ph>.</source>
          <target state="translated">Das entsprechende Tunneling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseWheel&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseWheel">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseWheel%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseWheel%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.MouseWheelEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseWheel" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseWheel" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseWheelEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseWheelEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseWheelEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseWheelEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseWheelEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.</source>
          <target state="translated">Eine Durchlaufanforderung, die eine Eigenschaft enthält, die entweder einen Modus zum Durchlaufen in der vorliegenden Aktivierreihenfolge oder eine Richtung zum visuellen Verschieben angibt.</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>Attempts to move focus from this element to another element.</source>
          <target state="translated">Versucht, den Fokus von diesem Element auf ein anderes Element zu verschieben.</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element.</source>
          <target state="translated">Die Richtung, in der der Fokus verschoben wird, wird durch eine Führungsrichtung angegeben, die innerhalb der Organisation des visuellen übergeordneten Elements für dieses Element interpretiert wird.</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the requested traversal was performed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn der angeforderte Durchlauf ausgeführt wurde, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>Make sure you check the return value of this method.</source>
          <target state="translated">Stellen Sie sicher, dass Sie überprüfen, dass den Rückgabewert dieser Methode.</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>A return value of <ph id="ph1">`false`</ph> might be returned if the traversal runs into a tab stop that is defined by a control's composition, and the traversal request did not request to wrap.</source>
          <target state="translated">Ein Rückgabewert von <ph id="ph1">`false`</ph> kann zurückgegeben werden, wenn Durchlauf ausgeführt wird, in einen Tabstopp, die durch die Zusammensetzung eines Steuerelements definiert ist, und die Anforderung Durchlauf umschließen nicht angefordert.</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnCreateAutomationPeer">
          <source>Returns class-specific <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph> implementations for the <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> infrastructure.</source>
          <target state="translated">Gibt klassenspezifische <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph>-Implementierungen für die <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph>-Infrastruktur zurück.</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnCreateAutomationPeer">
          <source>The type-specific <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph> implementation.</source>
          <target state="translated">Die typspezifische <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph>-Implementierung.</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnCreateAutomationPeer">
          <source>The implementation of this method is typically to call the constructor of a specific <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph> implementation, and return it as the return value.</source>
          <target state="translated">Die Implementierung dieser Methode wird in der Regel Aufruf des Konstruktors einer bestimmten <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph> -Implementierung erstellt und als Rückgabewert zurückgegeben.</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnCreateAutomationPeer">
          <source>All <ph id="ph1">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> derived classes should implement this method in order to provide their own specific <ph id="ph2">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph> implementations to the <ph id="ph3">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> infrastructure.</source>
          <target state="translated">Alle <ph id="ph1">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> abgeleitete Klassen sollten diese Methode implementieren, um ihre eigenen spezifischen bieten <ph id="ph2">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph> Implementierungen, um die <ph id="ph3">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> Infrastruktur.</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnCreateAutomationPeer">
          <source>For details on implementing this pattern, see <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph>.</source>
          <target state="translated">Ausführliche Informationen dazu, dieses Muster implementieren, finden Sie unter <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.DragEnter" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.DragEnter" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.DragLeave" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.DragLeave" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.DragOver" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.DragOver" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.DragEnter" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.DragEnter" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.GiveFeedbackEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.GiveFeedbackEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.GiveFeedback" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.GiveFeedback" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph> that contains event data.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph>, das Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>This event data must contain the identifier for the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotFocus" /&gt;</ph> event.</source>
          <target state="translated">Diese Ereignisdaten müssen den Bezeichner für das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotFocus" /&gt;</ph>-Ereignis enthalten.</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotFocus" /&gt;</ph> routed event by using the event data provided.</source>
          <target state="translated">Löst das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotFocus" /&gt;</ph>-Routingereignis mithilfe der bereitgestellten Ereignisdaten aus.</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>This method, although virtual, does have a default implementation that raises the event.</source>
          <target state="translated">Diese Methode weist auch virtuell sein, eine Standardimplementierung auf, die das Ereignis auslöst.</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsFocused%2A&gt;</ph> property value changes.</source>
          <target state="translated">Dies auf * methodenimplementierung dient zum Auslösen des Ereignisses, und diese dieselbe methodenimplementierung wird intern zum Auslösen des Ereignisses aufgerufen bei der <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsFocused%2A&gt;</ph> Eigenschaftswert ändert.</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotFocus%2A&gt;</ph> implementation differs from some other <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> On* implementations, which only provide a convenient way to add class handling for that event.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotFocus%2A&gt;</ph> Implementierung unterscheidet sich von einem anderen <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> auf * Implementierungen, die nur eine einfache Möglichkeit, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen bieten.</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>Unless you have a deliberate and unusual need to not raise the focus events, make sure that your implementation calls the base implementation.</source>
          <target state="translated">Wenn Sie eine absichtliche und ungewöhnliche nicht den Fokusereignisse auslösen, müssen, stellen Sie sicher, dass Ihre Implementierung die basisimplementierung aufgerufen.</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>Otherwise, the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotFocus" /&gt;</ph> event is not raised during typical user operations that ordinarily set focus to this element.</source>
          <target state="translated">Andernfalls die <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotFocus" /&gt;</ph> Ereignis wird nicht ausgelöst, während der Benutzer normalerweise-Vorgänge, die normalerweise den Fokus auf dieses Element festgelegt.</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>If you do not intend your element to be focusable, you can prevent the element from being focusable by setting <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.Focusable" /&gt;</ph> to <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Wenn Sie nicht, dass das Element den Fokus erhalten kann sein beabsichtigen, Sie können verhindern, das Element den Fokus erhalten kann durch Festlegen von <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.Focusable" /&gt;</ph> auf <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>Note that by default a <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.Focusable" /&gt;</ph> is not focusable, therefore setting <ph id="ph2">&lt;see cref="P:System.Windows.ContentElement.Focusable" /&gt;</ph> deliberately might not be necessary.</source>
          <target state="translated">Beachten Sie, dass standardmäßig eine <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.Focusable" /&gt;</ph> ist nicht den Fokus erhalten kann, daher festlegen <ph id="ph2">&lt;see cref="P:System.Windows.ContentElement.Focusable" /&gt;</ph> absichtlich möglicherweise nicht erforderlich.</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotTouchCapture" /&gt;</ph> routed event that occurs when a touch is captured to this element.</source>
          <target state="translated">Stellt eine Klassenbehandlung für das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotTouchCapture" /&gt;</ph>-Routingereignis bereit, das eintritt, wenn eine Berührung für dieses Element erfasst wird.</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotTouchCapture%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotTouchCapture%2A&gt;</ph> Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotTouchCapture%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.ContentElement.GotTouchCapture&gt;</ph> event.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotTouchCapture%2A&gt;</ph> in einer abgeleiteten Klasse zum Behandeln der <ph id="ph2">&lt;xref:System.Windows.ContentElement.GotTouchCapture&gt;</ph> Ereignis.</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotTouchCapture%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">Achten Sie darauf, dass Sie der Basisklasse aufgerufen <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotTouchCapture%2A&gt;</ph> Methode, damit die Basisklassen das Ereignis empfangen.</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsKeyboardFocusedChanged" /&gt;</ph> event is raised on this element.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsKeyboardFocusedChanged" /&gt;</ph>-Ereignis für dieses Element ausgelöst wird.</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocused%2A&gt;</ph> dependency property changes.</source>
          <target state="translated">Dieser virtuellen Methode ausgelöst, wenn der Wert von der <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocused%2A&gt;</ph> -Abhängigkeitseigenschaft.</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">Die virtuelle Methode wird zuerst ausgelöst und kann die Daten für das Ereignis nach Bedarf bearbeiten.</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt;</ph> event is raised with that same event data instance.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt;</ph> Ereignis mit diesem gleichen Ereignisdateninstanz ausgelöst.</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Notice that the  <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt;</ph> event is not a routed event.</source>
          <target state="translated">Beachten Sie, dass die <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt;</ph> Ereignis ist für ein Routingereignis nicht.</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">Es kann nicht aus diesem Grund kennzeichnen, wie in der Klassenhandler behandelt.</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">Sie können Basis entweder vor oder nach Ihrem besondere Behandlung, je nach Ihren Anforderungen aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked just before the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" /&gt;</ph> event is raised by this element.</source>
          <target state="translated">Wird unmittelbar vor dem Auslösen des <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" /&gt;</ph>-Ereignisses durch dieses Element aufgerufen.</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A&gt;</ph> dependency property changes its value.</source>
          <target state="translated">Dieser virtuellen Methode ausgelöst, wenn der Wert des der <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A&gt;</ph> Abhängigkeitseigenschaft geändert wird.</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">Die virtuelle Methode wird zuerst ausgelöst und kann die Daten für das Ereignis nach Bedarf bearbeiten.</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt;</ph> event is raised with that same event data instance.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt;</ph> Ereignis mit diesem gleichen Ereignisdateninstanz ausgelöst.</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Notice that the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt;</ph> event is not a routed event.</source>
          <target state="translated">Beachten Sie, dass die <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt;</ph> Ereignis ist für ein Routingereignis nicht.</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">Es kann nicht aus diesem Grund kennzeichnen, wie in der Klassenhandler behandelt.</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">Sie können Basis entweder vor oder nach Ihrem besondere Behandlung, je nach Ihren Anforderungen aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsMouseCapturedChanged" /&gt;</ph> event is raised on this element.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsMouseCapturedChanged" /&gt;</ph>-Ereignis für dieses Element ausgelöst wird.</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseCaptured%2A&gt;</ph> dependency property changes its value.</source>
          <target state="translated">Dieser virtuellen Methode ausgelöst, wenn der Wert des der <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseCaptured%2A&gt;</ph> Abhängigkeitseigenschaft geändert wird.</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">Die virtuelle Methode wird zuerst ausgelöst und kann die Daten für das Ereignis nach Bedarf bearbeiten.</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseCapturedChanged&gt;</ph> event is raised with that same event data instance.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseCapturedChanged&gt;</ph> Ereignis mit diesem gleichen Ereignisdateninstanz ausgelöst.</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Notice that the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseCapturedChanged&gt;</ph> event is not a routed event.</source>
          <target state="translated">Beachten Sie, dass die <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseCapturedChanged&gt;</ph> Ereignis ist für ein Routingereignis nicht.</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">Es kann nicht aus diesem Grund kennzeichnen, wie in der Klassenhandler behandelt.</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">Sie können Basis entweder vor oder nach Ihrem besondere Behandlung, je nach Ihren Anforderungen aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" /&gt;</ph> event is raised on this element.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" /&gt;</ph>-Ereignis für dieses Element ausgelöst wird.</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin" /&gt;</ph> dependency property changes its value.</source>
          <target state="translated">Dieser virtuellen Methode ausgelöst, wenn der Wert des der <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin" /&gt;</ph> Abhängigkeitseigenschaft geändert wird.</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">Die virtuelle Methode wird zuerst ausgelöst und kann die Daten für das Ereignis nach Bedarf bearbeiten.</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Then the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" /&gt;</ph> event is raised with that same event data instance.</source>
          <target state="translated">Die <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" /&gt;</ph> Ereignis mit diesem gleichen Ereignisdateninstanz ausgelöst.</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Notice that the event is not a routed event; Therefore,  you cannot mark it as handled in the class handler.</source>
          <target state="translated">Beachten Sie, dass das Ereignis ein Routingereignis nicht ist. Es kann nicht aus diesem Grund kennzeichnen, wie in der Klassenhandler behandelt.</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">Sie können Basis entweder vor oder nach Ihrem besondere Behandlung, je nach Ihren Anforderungen aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsMouseDirectlyOverChanged" /&gt;</ph> event is raised on this element.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsMouseDirectlyOverChanged" /&gt;</ph>-Ereignis für dieses Element ausgelöst wird.</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseDirectlyOver%2A&gt;</ph> dependency property changes its value.</source>
          <target state="translated">Dieser virtuellen Methode ausgelöst, wenn der Wert des der <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseDirectlyOver%2A&gt;</ph> Abhängigkeitseigenschaft geändert wird.</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">Die virtuelle Methode wird zuerst ausgelöst und kann die Daten für das Ereignis nach Bedarf bearbeiten.</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged&gt;</ph> event is raised with that same event data instance.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged&gt;</ph> Ereignis mit diesem gleichen Ereignisdateninstanz ausgelöst.</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Notice that the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged&gt;</ph> event is not a routed event.</source>
          <target state="translated">Beachten Sie, dass die <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged&gt;</ph> Ereignis ist für ein Routingereignis nicht.</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">Es kann nicht aus diesem Grund kennzeichnen, wie in der Klassenhandler behandelt.</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">Sie können Basis entweder vor oder nach Ihrem besondere Behandlung, je nach Ihren Anforderungen aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsStylusCapturedChanged" /&gt;</ph> event is raised on this element.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsStylusCapturedChanged" /&gt;</ph>-Ereignis für dieses Element ausgelöst wird.</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusCaptured%2A&gt;</ph> dependency property changes its value.</source>
          <target state="translated">Dieser virtuellen Methode ausgelöst, wenn der Wert des der <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusCaptured%2A&gt;</ph> Abhängigkeitseigenschaft geändert wird.</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">Die virtuelle Methode wird zuerst ausgelöst und kann die Daten für das Ereignis nach Bedarf bearbeiten.</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusCapturedChanged&gt;</ph> event is raised with that same event data instance.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusCapturedChanged&gt;</ph> Ereignis mit diesem gleichen Ereignisdateninstanz ausgelöst.</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Notice that the event is not a routed event.</source>
          <target state="translated">Beachten Sie, dass das Ereignis ein Routingereignis nicht ist.</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">Es kann nicht aus diesem Grund kennzeichnen, wie in der Klassenhandler behandelt.</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">Sie können Basis entweder vor oder nach Ihrem besondere Behandlung, je nach Ihren Anforderungen aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsStylusCaptureWithinChanged" /&gt;</ph> event is raised on this element.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsStylusCaptureWithinChanged" /&gt;</ph>-Ereignis für dieses Element ausgelöst wird.</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusCaptureWithin%2A&gt;</ph> dependency property changes its value.</source>
          <target state="translated">Dieser virtuellen Methode ausgelöst, wenn der Wert des der <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusCaptureWithin%2A&gt;</ph> Abhängigkeitseigenschaft geändert wird.</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">Die virtuelle Methode wird zuerst ausgelöst und kann die Daten für das Ereignis nach Bedarf bearbeiten.</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusCaptureWithinChanged&gt;</ph> event is raised with that same event data instance.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusCaptureWithinChanged&gt;</ph> Ereignis mit diesem gleichen Ereignisdateninstanz ausgelöst.</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Notice that the event is not a routed event.</source>
          <target state="translated">Beachten Sie, dass das Ereignis ein Routingereignis nicht ist.</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">Es kann nicht aus diesem Grund kennzeichnen, wie in der Klassenhandler behandelt.</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">Sie können Basis entweder vor oder nach Ihrem besondere Behandlung, je nach Ihren Anforderungen aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsStylusDirectlyOverChanged" /&gt;</ph> event is raised on this element.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsStylusDirectlyOverChanged" /&gt;</ph>-Ereignis für dieses Element ausgelöst wird.</target>       </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusDirectlyOver%2A&gt;</ph> dependency property changes its value.</source>
          <target state="translated">Dieser virtuellen Methode ausgelöst, wenn der Wert des der <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusDirectlyOver%2A&gt;</ph> Abhängigkeitseigenschaft geändert wird.</target>       </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">Die virtuelle Methode wird zuerst ausgelöst und kann die Daten für das Ereignis nach Bedarf bearbeiten.</target>       </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusDirectlyOverChanged&gt;</ph> event is raised with that same event data instance.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusDirectlyOverChanged&gt;</ph> Ereignis mit diesem gleichen Ereignisdateninstanz ausgelöst.</target>       </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Notice that the event is not a routed event.</source>
          <target state="translated">Beachten Sie, dass das Ereignis ein Routingereignis nicht ist.</target>       </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Therefore you cannot mark it as handled in the class handler.</source>
          <target state="translated">Es kann nicht aus diesem Grund kennzeichnen, wie in der Klassenhandler behandelt.</target>       </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">Sie können Basis entweder vor oder nach Ihrem besondere Behandlung, je nach Ihren Anforderungen aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyDown" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyDown" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Keystrokes are handled by a dedicated input manager.</source>
          <target state="translated">Tastatureingaben werden von einem dedizierten Eingabe-Manager verarbeitet.</target>       </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.</source>
          <target state="translated">Andere Programmierfunktionen, die Tastatureingaben, z. B. Eingabe- und Befehl Bindungen benötigen möglicherweise die Tastatureingabe behandeln, bevor es als eine allgemeine Tastatureingabe verfügbar gemacht wird.</target>       </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>If these input system features mark the event as handled, then <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnKeyDown%2A&gt;</ph> is not invoked.</source>
          <target state="translated">Wenn diese Eingabedateien Systemfunktionen markieren das Ereignis als behandelt, klicken Sie dann <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnKeyDown%2A&gt;</ph> wird nicht aufgerufen.</target>       </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyUp" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyUp" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Keystrokes are handled by a dedicated input manager.</source>
          <target state="translated">Tastatureingaben werden von einem dedizierten Eingabe-Manager verarbeitet.</target>       </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.</source>
          <target state="translated">Andere Programmierfunktionen, die Tastatureingaben, z. B. Eingabe- und Befehl Bindungen benötigen möglicherweise die Tastatureingabe behandeln, bevor es als eine allgemeine Tastatureingabe verfügbar gemacht wird.</target>       </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>If these input system features mark the event as handled, then <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnKeyUp%2A&gt;</ph> is not invoked.</source>
          <target state="translated">Wenn diese Eingabedateien Systemfunktionen markieren das Ereignis als behandelt, klicken Sie dann <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnKeyUp%2A&gt;</ph> wird nicht aufgerufen.</target>       </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph> that contains event data.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph>, das Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>This event data must contain the identifier for the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostFocus" /&gt;</ph> event.</source>
          <target state="translated">Diese Ereignisdaten müssen den Bezeichner für das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostFocus" /&gt;</ph>-Ereignis enthalten.</target>       </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostFocus" /&gt;</ph> routed event by using the event data that is provided.</source>
          <target state="translated">Löst das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostFocus" /&gt;</ph>- Routingereignis mithilfe der bereitgestellten Ereignisdaten aus.</target>       </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>This method, although virtual, does have a default implementation that raises the event.</source>
          <target state="translated">Diese Methode weist auch virtuell sein, eine Standardimplementierung auf, die das Ereignis auslöst.</target>       </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsFocused%2A&gt;</ph> property value changes.</source>
          <target state="translated">Dies auf * methodenimplementierung dient zum Auslösen des Ereignisses, und diese dieselbe methodenimplementierung wird intern zum Auslösen des Ereignisses aufgerufen bei der <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsFocused%2A&gt;</ph> Eigenschaftswert ändert.</target>       </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>This implementation differs from some other <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> On* implementations, which only provide a convenient way to add class handling for that event.</source>
          <target state="translated">Diese Implementierung unterscheidet sich von einem anderen <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> auf * Implementierungen, die nur eine einfache Möglichkeit, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen bieten.</target>       </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>Unless you have a deliberate and unusual need to not raise the focus events, make sure that your implementation calls the base implementation.</source>
          <target state="translated">Wenn Sie eine absichtliche und ungewöhnliche nicht den Fokusereignisse auslösen, müssen, stellen Sie sicher, dass Ihre Implementierung die basisimplementierung aufgerufen.</target>       </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>Otherwise, the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostFocus" /&gt;</ph> event is not raised during typical user operations that ordinarily set focus to this element.</source>
          <target state="translated">Andernfalls die <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostFocus" /&gt;</ph> Ereignis wird nicht ausgelöst, während der Benutzer normalerweise-Vorgänge, die normalerweise den Fokus auf dieses Element festgelegt.</target>       </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>If you do not intend your element to be focusable, you can prevent the element from being focusable by setting <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.Focusable" /&gt;</ph> to <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Wenn Sie nicht, dass das Element den Fokus erhalten kann sein beabsichtigen, Sie können verhindern, das Element den Fokus erhalten kann durch Festlegen von <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.Focusable" /&gt;</ph> auf <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /&gt;</ph> that contains event data.</source>
          <target state="translated">Die Instanz von <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /&gt;</ph>, die die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph> that contains event data.</source>
          <target state="translated">Die Instanz von <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph>, die die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains event data.</source>
          <target state="translated">Die Instanz von <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>, die die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostTouchCapture" /&gt;</ph> routed event that occurs when this element loses a touch capture.</source>
          <target state="translated">Stellt Klassenbehandlung für das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostTouchCapture" /&gt;</ph>-Routingereignis bereit, das auftritt, wenn in diesem Element die Fingereingabenerfassung verloren geht.</target>       </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostTouchCapture%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostTouchCapture%2A&gt;</ph> Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostTouchCapture%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.ContentElement.LostTouchCapture&gt;</ph> event.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostTouchCapture%2A&gt;</ph> in einer abgeleiteten Klasse zum Behandeln der <ph id="ph2">&lt;xref:System.Windows.ContentElement.LostTouchCapture&gt;</ph> Ereignis.</target>       </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostTouchCapture%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">Achten Sie darauf, dass Sie der Basisklasse aufgerufen <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostTouchCapture%2A&gt;</ph> Methode, damit die Basisklassen das Ereignis empfangen.</target>       </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>This event data reports details about the mouse button that was pressed and the handled state.</source>
          <target state="translated">Diese Ereignisdaten melden Details zur Maustaste, die gedrückt wurde, und zum behandelten Zustand.</target>       </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseDown" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseDown" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Mouse button actions are also handled by a dedicated input manager.</source>
          <target state="translated">Schaltfläche Mausaktionen werden auch von einem dedizierten Eingabe-Manager behandelt.</target>       </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</source>
          <target state="translated">Andere Programmierfunktionen, die Schaltfläche Mausaktionen, z. B. Eingabe abhängig ist, und jeder Befehl von Bindungen, möglicherweise Handler für die Aktion aufrufen, bevor es als eine allgemeine Schaltfläche Mausaktion verfügbar gemacht wird.</target>       </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If these input system features mark the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> event as handled, <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseDown%2A&gt;</ph> is not invoked.</source>
          <target state="translated">Wenn Sie diese markieren Eingabedateien der <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> Ereignis als behandelt, <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseDown%2A&gt;</ph> wird nicht aufgerufen.</target>       </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you use this class handler to mark the event as handled, you potentially impact the following events: <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph>.</source>
          <target state="translated">Wenn Sie den Klassenhandler für diese verwenden, um das Ereignis als behandelt markiert werden, Sie möglicherweise Auswirkungen auf die folgenden Ereignisse: <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> und <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Either of these events may be raised on the receiving element when <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> is received.</source>
          <target state="translated">Eines dieser Ereignisse kann ausgelöst werden, auf dem empfangenden Element beim <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> empfangen wird.</target>       </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</source>
          <target state="translated">Wenn Sie dieses Ereignis in eine Klassenbehandlung als behandelt markiert haben, werden dennoch Unterereignisse ausgelöst. Sie kann jedoch zum behandelten Zustand in den Ereignisdaten übergeben werden.</target>       </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph> in order to attach handlers.</source>
          <target state="translated">Wenn das Ereignis in der Klassenbehandlung behandelt wird, Instanzhandler für die Unterereignisse werden nicht aufgerufen, wenn Sie explizit verwenden <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> mit <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph> um Handler anfügen.</target>       </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Class handlers also are not invoked unless those class handlers were registered with the <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Klassenhandler werden ebenfalls nicht aufgerufen, wenn diese Klassenhandler registriert wurden die <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> Signatur mit <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>By handling <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseDown%2A&gt;</ph>, you are implying that your class handling accounted for all possible mouse button down actions.</source>
          <target state="translated">Durch Verarbeiten <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseDown%2A&gt;</ph>, Sie sind, dass die Klassenbehandlung für alle möglichen Aktionen mit gedrückter Gleichzeichen.</target>       </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>This behavior might be unwanted; therefore, use caution when you use this virtual method to mark events as handled.</source>
          <target state="translated">Dieses Verhalten kann unerwünscht sein. daher vorsichtig, wenn Sie dieser virtuellen Methode verwenden, um die Ereignisse als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.</source>
          <target state="translated">Jedes der direkten Schaltfläche-spezifische Ereignisse verfügt auch über ein virtuelles auf *-Methode. Berücksichtigen Sie, ob überschreiben diese Schaltfläche-spezifische Klassenhandler besser geeignet sein kann.</target>       </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseEnter" /&gt;</ph> attached event is raised on this element.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseEnter" /&gt;</ph>-Ereignis für dieses Element ausgelöst wird.</target>       </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">Sie können Basis entweder vor oder nach Ihrem besondere Behandlung, je nach Ihren Anforderungen aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>In this case the matching event is a routed event, with a direct routing strategy.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis mit einer direkten routing-Strategie.</target>       </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">Das Ereignis als behandelt markiert ist immer noch nützlich, damit verhindern den Standard-Handler (diejenigen, die keinen angeben <ph id="ph1">`handledEventsToo`</ph>) aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseLeave" /&gt;</ph> attached event is raised on this element.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseLeave" /&gt;</ph>-Ereignis für dieses Element ausgelöst wird.</target>       </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">Sie können Basis entweder vor oder nach Ihrem besondere Behandlung, je nach Ihren Anforderungen aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>In this case the matching event is a routed event, with a direct routing strategy.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis mit einer direkten routing-Strategie.</target>       </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">Das Ereignis als behandelt markiert ist immer noch nützlich, damit verhindern den Standard-Handler (diejenigen, die keinen angeben <ph id="ph1">`handledEventsToo`</ph>) aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the left mouse button was pressed.</source>
          <target state="translated">Die Ereignisdaten melden, dass die linke Maustaste gedrückt wurde.</target>       </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" /&gt;</ph> routed event is raised on this element.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes geroutetes <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" /&gt;</ph>-Ereignis für dieses Element ausgelöst wird.</target>       </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> event appears to travel a bubbling route but actually travels in an indirect way.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> Ereignis angezeigt wird, eine bubbling-Route zu folgen, durchläuft jedoch tatsächlich eine indirekte Möglichkeit.</target>       </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> is the underlying event that is bubble routed, and each <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> ist das zugrunde liegende Ereignis, das Blasendiagramm weitergeleitet wird, und jedes <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> entlang des Ereignisses Route durchläuft das direkte Routingereignis auslösen <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">Obwohl Sie markieren können die <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> Ereignis für dieses Element als behandelt, zum behandelte Zustand ist nicht Ereignisroute weitergegeben auf andere Elemente auf der Ereignisroute.</target>       </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">Allerdings kann es sinnvoll sein, das Ereignis als behandelt, um zu verhindern, dass allgemeine Instanzhandler zu markieren (solche, die keine Berechnung angegeben <ph id="ph1">`handledEventsToo`</ph>) aus aufgerufen wurde.</target>       </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> and converts it to an appropriate local event.</source>
          <target state="translated">Die Standardimplementierung für allgemeine Maus Ereignisbehandlung in <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> überwacht <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> und konvertiert ihn in ein entsprechendes lokales Ereignis.</target>       </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">Wenn Sie diese Logik überschreiben möchten, müssen Sie eine abgeleitete Klasse erstellen.</target>       </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Registrieren Sie im statischen Konstruktor der abgeleiteten Klasse einen alternativen Klassenhandler für <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A&gt;</ph>.</source>
          <target state="translated">Die Behandlung von Verhalten der Maus kann nicht geändert werden <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> durch Außerkraftsetzen von <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Alternatively, you can override this method in order to change event handling for a specific mouse state.</source>
          <target state="translated">Alternativ können Sie diese Methode überschreiben, um Ereignisbehandlung für einen bestimmten Maus Status zu ändern.</target>       </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Whether you choose to call the base implementation depends on your scenario.</source>
          <target state="translated">Egal, ob Sie die basisimplementierung aufgerufen werden, hängt von Ihrem Szenario ab.</target>       </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A&gt;</ph>.</source>
          <target state="translated">Standardbehandlung Eingabe für dieses Mausereignis auf den Vorgängerklassen, die auch zum Aufrufen erwarten Basis aufgerufen deaktiviert <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>For example, you can derive from <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> and override <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A&gt;</ph> in your derived class without calling the base implementation; however, this override disables the <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event.</source>
          <target state="translated">Sie können z. B. Ableiten von <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> und überschreiben <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A&gt;</ph> in die abgeleitete Klasse ohne Aufrufen der basisimplementierung; allerdings überschreiben dies deaktiviert den <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> Ereignis.</target>       </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the left mouse button was released.</source>
          <target state="translated">Die Ereignisdaten melden, dass die linke Maustaste losgelassen wurde.</target>       </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" /&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" /&gt;</ph>-Routingereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> event appears to travel a bubbling route but actually travels in an indirect way.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> Ereignis angezeigt wird, eine bubbling-Route zu folgen, durchläuft jedoch tatsächlich eine indirekte Möglichkeit.</target>       </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> is the underlying event that is bubble routed, and each <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> ist das zugrunde liegende Ereignis, das Blasendiagramm weitergeleitet wird, und jedes <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> entlang des Ereignisses Route durchläuft das direkte Routingereignis auslösen <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">Obwohl Sie markieren können die <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> Ereignis für dieses Element als behandelt, zum behandelte Zustand ist nicht Ereignisroute weitergegeben auf andere Elemente auf der Ereignisroute.</target>       </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">Allerdings kann es sinnvoll sein, das Ereignis als behandelt, um zu verhindern, dass allgemeine Instanzhandler zu markieren (solche, die keine Berechnung angegeben <ph id="ph1">`handledEventsToo`</ph>) aus aufgerufen wurde.</target>       </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> and converts it to an appropriate local event.</source>
          <target state="translated">Die Standardimplementierung für allgemeine Maus Ereignisbehandlung in <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> überwacht <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> und konvertiert ihn in ein entsprechendes lokales Ereignis.</target>       </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">Wenn Sie diese Logik überschreiben möchten, müssen Sie eine abgeleitete Klasse erstellen.</target>       </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Registrieren Sie im statischen Konstruktor der abgeleiteten Klasse einen alternativen Klassenhandler für <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A&gt;</ph>.</source>
          <target state="translated">Die Behandlung von Verhalten der Maus kann nicht geändert werden <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> durch Außerkraftsetzen von <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseMove" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseMove" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the right mouse button was pressed.</source>
          <target state="translated">Die Ereignisdaten melden, dass die rechte Maustaste gedrückt wurde.</target>       </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseRightButtonDown" /&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseRightButtonDown" /&gt;</ph>-Routingereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph> event appears to travel a bubbling route but actually travels in an indirect way.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph> Ereignis angezeigt wird, eine bubbling-Route zu folgen, durchläuft jedoch tatsächlich eine indirekte Möglichkeit.</target>       </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> is the underlying event that is bubble routed, and each <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> ist das zugrunde liegende Ereignis, das Blasendiagramm weitergeleitet wird, und jedes <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> entlang des Ereignisses Route durchläuft das direkte Routingereignis auslösen <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">Obwohl Sie markieren können die <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph> Ereignis für dieses Element als behandelt, zum behandelte Zustand ist nicht Ereignisroute weitergegeben auf andere Elemente auf der Ereignisroute.</target>       </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">Allerdings kann es sinnvoll sein, das Ereignis als behandelt, um zu verhindern, dass allgemeine Instanzhandler zu markieren (solche, die keine Berechnung angegeben <ph id="ph1">`handledEventsToo`</ph>) aus aufgerufen wurde.</target>       </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> and converts it to an appropriate local event.</source>
          <target state="translated">Die Standardimplementierung für allgemeine Maus Ereignisbehandlung in <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> überwacht <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> und konvertiert ihn in ein entsprechendes lokales Ereignis.</target>       </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">Wenn Sie diese Logik überschreiben möchten, müssen Sie eine abgeleitete Klasse erstellen.</target>       </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Registrieren Sie im statischen Konstruktor der abgeleiteten Klasse einen alternativen Klassenhandler für <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A&gt;</ph>.</source>
          <target state="translated">Die Behandlung von Verhalten der Maus kann nicht geändert werden <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> durch Außerkraftsetzen von <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Alternatively, you can override this method in order to change event handling for a specific mouse state.</source>
          <target state="translated">Alternativ können Sie diese Methode überschreiben, um Ereignisbehandlung für einen bestimmten Maus Status zu ändern.</target>       </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Whether you choose to call the base implementation depends on your scenario.</source>
          <target state="translated">Egal, ob Sie die basisimplementierung aufgerufen werden, hängt von Ihrem Szenario ab.</target>       </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A&gt;</ph>.</source>
          <target state="translated">Standardbehandlung Eingabe für dieses Mausereignis auf den Vorgängerklassen, die auch zum Aufrufen erwarten Basis aufgerufen deaktiviert <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>For example, you can derive from <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> and override <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A&gt;</ph> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <ph id="ph3">&lt;xref:System.Windows.Controls.Control&gt;</ph> default behavior.</source>
          <target state="translated">Sie können z. B. Ableiten von <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> und überschreiben <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A&gt;</ph> in die abgeleitete Klasse, ohne dass Base aufgerufen; deaktiviert diese Außerkraftsetzung jedoch den Kontext im Menü Dienste auf steuern können, die Teil sind von der <ph id="ph3">&lt;xref:System.Windows.Controls.Control&gt;</ph> Standardverhalten.</target>       </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the right mouse button was released.</source>
          <target state="translated">Die Ereignisdaten melden, dass die rechte Maustaste losgelassen wurde.</target>       </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseRightButtonUp" /&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseRightButtonUp" /&gt;</ph>-Routingereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph> event appears to travel a bubbling route but actually travels in an indirect way.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph> Ereignis angezeigt wird, eine bubbling-Route zu folgen, durchläuft jedoch tatsächlich eine indirekte Möglichkeit.</target>       </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> is the underlying event that is bubble routed, and each <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> ist das zugrunde liegende Ereignis, das Blasendiagramm weitergeleitet wird, und jedes <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> entlang des Ereignisses Route durchläuft das direkte Routingereignis auslösen <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">Obwohl Sie markieren können die <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph> Ereignis für dieses Element als behandelt, zum behandelte Zustand ist nicht Ereignisroute weitergegeben auf andere Elemente auf der Ereignisroute.</target>       </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">Allerdings kann es sinnvoll sein, das Ereignis als behandelt, um zu verhindern, dass allgemeine Instanzhandler zu markieren (solche, die keine Berechnung angegeben <ph id="ph1">`handledEventsToo`</ph>) aus aufgerufen wurde.</target>       </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> and converts it to an appropriate local event.</source>
          <target state="translated">Die Standardimplementierung für allgemeine Maus Ereignisbehandlung in <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> überwacht <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> und konvertiert ihn in ein entsprechendes lokales Ereignis.</target>       </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">Wenn Sie diese Logik überschreiben möchten, müssen Sie eine abgeleitete Klasse erstellen.</target>       </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Registrieren Sie im statischen Konstruktor der abgeleiteten Klasse einen alternativen Klassenhandler für <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A&gt;</ph>.</source>
          <target state="translated">Die Behandlung von Verhalten der Maus kann nicht geändert werden <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> durch Außerkraftsetzen von <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the mouse button was released.</source>
          <target state="translated">Die Ereignisdaten melden, dass die Maustaste losgelassen wurde.</target>       </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseUp" /&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseUp" /&gt;</ph>-Routingereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Mouse button actions are also handled by a dedicated input manager.</source>
          <target state="translated">Schaltfläche Mausaktionen werden auch von einem dedizierten Eingabe-Manager behandelt.</target>       </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</source>
          <target state="translated">Andere Programmierfunktionen, die Schaltfläche Mausaktionen, z. B. Eingabe abhängig ist, und jeder Befehl von Bindungen, möglicherweise Handler für die Aktion aufrufen, bevor es als eine allgemeine Schaltfläche Mausaktion verfügbar gemacht wird.</target>       </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If these input system features mark the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> event as handled, <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseUp%2A&gt;</ph> is not invoked.</source>
          <target state="translated">Wenn Sie diese markieren Eingabedateien der <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> Ereignis als behandelt, <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseUp%2A&gt;</ph> wird nicht aufgerufen.</target>       </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you use this class handler to mark the event as handled, you potentially impact the following events: <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph>.</source>
          <target state="translated">Wenn Sie den Klassenhandler für diese verwenden, um das Ereignis als behandelt markiert werden, Sie möglicherweise Auswirkungen auf die folgenden Ereignisse: <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> und <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Either of these events might be raised on the receiving element when <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> is received.</source>
          <target state="translated">Eines dieser Ereignisse können für das empfangende Element ausgelöst werden beim <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> empfangen wird.</target>       </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</source>
          <target state="translated">Wenn Sie dieses Ereignis in eine Klassenbehandlung als behandelt markiert haben, werden dennoch Unterereignisse ausgelöst. Sie kann jedoch zum behandelten Zustand in den Ereignisdaten übergeben werden.</target>       </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph> in order to attach handlers.</source>
          <target state="translated">Wenn das Ereignis in der Klassenbehandlung behandelt wird, Instanzhandler für die Unterereignisse werden nicht aufgerufen, wenn Sie explizit verwenden <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> mit <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph> um Handler anfügen.</target>       </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Class handlers also are not invoked unless those class handlers were registered with the <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Klassenhandler werden ebenfalls nicht aufgerufen, wenn diese Klassenhandler registriert wurden die <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> Signatur mit <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>By handling <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseUp%2A&gt;</ph>, you are implying that your class handling accounted for all possible mouse button up actions.</source>
          <target state="translated">Durch Verarbeiten <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseUp%2A&gt;</ph>, Sie sind, dass die Klassenbehandlung für alle möglichen Aktionen Gleichzeichen.</target>       </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</source>
          <target state="translated">Dieses Verhalten kann unerwünscht sein. Daher vorsichtig, wenn Sie dieser virtuellen Methode verwenden, um die Ereignisse als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.</source>
          <target state="translated">Jedes der direkten Schaltfläche-spezifische Ereignisse verfügt auch über ein virtuelles auf *-Methode. Berücksichtigen Sie, ob überschreiben diese Schaltfläche-spezifische Klassenhandler besser geeignet sein kann.</target>       </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseWheelEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseWheelEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseWheel" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseWheel" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewDragEnter" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewDragEnter" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewDragLeave" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewDragLeave" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewDragOver" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewDragOver" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewDrop" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewDrop" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.GiveFeedbackEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.GiveFeedbackEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that one or more mouse buttons were pressed.</source>
          <target state="translated">Die Ereignisdaten melden, dass eine oder mehrere Maustasten gedrückt wurden.</target>       </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /&gt;</ph> attached routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /&gt;</ph>-Routingereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Mouse button actions are also handled by a dedicated input manager.</source>
          <target state="translated">Schaltfläche Mausaktionen werden auch von einem dedizierten Eingabe-Manager behandelt.</target>       </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</source>
          <target state="translated">Andere Programmierfunktionen, die Schaltfläche Mausaktionen, z. B. Eingabe abhängig ist, und jeder Befehl von Bindungen, möglicherweise Handler für die Aktion aufrufen, bevor es als eine allgemeine Schaltfläche Mausaktion verfügbar gemacht wird.</target>       </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If these input system features mark the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> event as handled, <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseDown%2A&gt;</ph> is not invoked.</source>
          <target state="translated">Wenn Sie diese markieren Eingabedateien der <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> Ereignis als behandelt, <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseDown%2A&gt;</ph> wird nicht aufgerufen.</target>       </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you use this class handler to mark the event as handled, you potentially impact the following events: <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph>.</source>
          <target state="translated">Wenn Sie den Klassenhandler für diese verwenden, um das Ereignis als behandelt markiert werden, Sie möglicherweise Auswirkungen auf die folgenden Ereignisse: <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> und <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Either of these events may be raised on the receiving element when <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> is received.</source>
          <target state="translated">Eines dieser Ereignisse kann ausgelöst werden, auf dem empfangenden Element beim <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> empfangen wird.</target>       </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</source>
          <target state="translated">Wenn Sie dieses Ereignis in eine Klassenbehandlung als behandelt markiert haben, werden dennoch Unterereignisse ausgelöst. Sie kann jedoch zum behandelten Zustand in den Ereignisdaten übergeben werden.</target>       </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph> in order to attach handlers.</source>
          <target state="translated">Wenn das Ereignis in der Klassenbehandlung behandelt wird, Instanzhandler für die Unterereignisse werden nicht aufgerufen, wenn Sie explizit verwenden <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> mit <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph> um Handler anfügen.</target>       </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Class handlers also are not invoked unless those class handlers were registered with the <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Klassenhandler werden ebenfalls nicht aufgerufen, wenn diese Klassenhandler registriert wurden die <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> Signatur mit <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>By handling <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseDown%2A&gt;</ph>, you are implying that your class handling accounted for all possible mouse button down actions.</source>
          <target state="translated">Durch Verarbeiten <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseDown%2A&gt;</ph>, Sie sind, dass die Klassenbehandlung für alle möglichen Aktionen mit gedrückter Gleichzeichen.</target>       </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</source>
          <target state="translated">Dieses Verhalten kann unerwünscht sein. Daher vorsichtig, wenn Sie dieser virtuellen Methode verwenden, um die Ereignisse als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.</source>
          <target state="translated">Jedes der direkten Schaltfläche-spezifische Ereignisse verfügt auch über ein virtuelles auf *-Methode. Berücksichtigen Sie, ob überschreiben diese Schaltfläche-spezifische Klassenhandler besser geeignet sein kann.</target>       </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1551" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1552" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1554" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1555" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the left mouse button was pressed.</source>
          <target state="translated">Die Ereignisdaten melden, dass die linke Maustaste gedrückt wurde.</target>       </trans-unit>
        <trans-unit id="1556" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" /&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" /&gt;</ph>-Routingereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1557" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> event appears to travel a tunneling route but actually travels in an indirect way.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> Ereignis angezeigt wird, eine Tunneling-Route zu folgen, durchläuft jedoch tatsächlich eine indirekte Möglichkeit.</target>       </trans-unit>
        <trans-unit id="1559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> is the underlying event that is tunnel routed, and each <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> ist der zugrunde liegenden Ereignis, Tunnel weitergeleitet, und jede <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> entlang des Ereignisses Route durchläuft das direkte Routingereignis auslösen <ph id="ph3">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">Obwohl Sie markieren können die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> Ereignis für dieses Element als behandelt, zum behandelte Zustand ist nicht Ereignisroute weitergegeben auf andere Elemente auf der Ereignisroute.</target>       </trans-unit>
        <trans-unit id="1561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">Allerdings kann es sinnvoll sein, das Ereignis als behandelt, um zu verhindern, dass allgemeine Instanzhandler zu markieren (solche, die keine Berechnung angegeben <ph id="ph1">`handledEventsToo`</ph>) aus aufgerufen wurde.</target>       </trans-unit>
        <trans-unit id="1562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> and converts it to an appropriate local event.</source>
          <target state="translated">Die Standardimplementierung für allgemeine Maus Ereignisbehandlung in <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> überwacht <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> und konvertiert ihn in ein entsprechendes lokales Ereignis.</target>       </trans-unit>
        <trans-unit id="1563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">Wenn Sie diese Logik überschreiben möchten, müssen Sie eine abgeleitete Klasse erstellen.</target>       </trans-unit>
        <trans-unit id="1564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Registrieren Sie im statischen Konstruktor der abgeleiteten Klasse einen alternativen Klassenhandler für <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph>.</source>
          <target state="translated">Die Behandlung von Verhalten der Maus kann nicht geändert werden <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> durch Außerkraftsetzen von <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Alternatively, you can override this method in order to change event handling for a specific mouse state.</source>
          <target state="translated">Alternativ können Sie diese Methode überschreiben, um Ereignisbehandlung für einen bestimmten Maus Status zu ändern.</target>       </trans-unit>
        <trans-unit id="1567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Whether you choose to call the base implementation depends on your scenario.</source>
          <target state="translated">Egal, ob Sie die basisimplementierung aufgerufen werden, hängt von Ihrem Szenario ab.</target>       </trans-unit>
        <trans-unit id="1568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph>.</source>
          <target state="translated">Standardbehandlung Eingabe für dieses Mausereignis auf den Vorgängerklassen, die auch zum Aufrufen erwarten Basis aufgerufen deaktiviert <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>For example, you can derive from <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> and override <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph> in your derived class without calling the base implementation; however, this override disables the <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event.</source>
          <target state="translated">Sie können z. B. Ableiten von <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> und überschreiben <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph> in die abgeleitete Klasse ohne Aufrufen der basisimplementierung; allerdings überschreiben dies deaktiviert den <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> Ereignis.</target>       </trans-unit>
        <trans-unit id="1570" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1571" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the left mouse button was released.</source>
          <target state="translated">Die Ereignisdaten melden, dass die linke Maustaste losgelassen wurde.</target>       </trans-unit>
        <trans-unit id="1572" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" /&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" /&gt;</ph>-Routingereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1573" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> event appears to travel a tunneling route but actually travels in an indirect way.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> Ereignis angezeigt wird, eine Tunneling-Route zu folgen, durchläuft jedoch tatsächlich eine indirekte Möglichkeit.</target>       </trans-unit>
        <trans-unit id="1575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> is the underlying event that is tunnel routed, and each <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> ist der zugrunde liegenden Ereignis, Tunnel weitergeleitet, und jede <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> entlang des Ereignisses Route durchläuft das direkte Routingereignis auslösen <ph id="ph3">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">Obwohl Sie markieren können die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> Ereignis für dieses Element als behandelt, zum behandelte Zustand ist nicht Ereignisroute weitergegeben auf andere Elemente auf der Ereignisroute.</target>       </trans-unit>
        <trans-unit id="1577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">Allerdings kann es sinnvoll sein, das Ereignis als behandelt, um zu verhindern, dass allgemeine Instanzhandler zu markieren (solche, die keine Berechnung angegeben <ph id="ph1">`handledEventsToo`</ph>) aus aufgerufen wurde.</target>       </trans-unit>
        <trans-unit id="1578" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> and converts it to an appropriate local event.</source>
          <target state="translated">Die Standardimplementierung für allgemeine Maus Ereignisbehandlung in <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> überwacht <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> und konvertiert ihn in ein entsprechendes lokales Ereignis.</target>       </trans-unit>
        <trans-unit id="1579" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">Wenn Sie diese Logik überschreiben möchten, müssen Sie eine abgeleitete Klasse erstellen.</target>       </trans-unit>
        <trans-unit id="1580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Registrieren Sie im statischen Konstruktor der abgeleiteten Klasse einen alternativen Klassenhandler für <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1581" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A&gt;</ph>.</source>
          <target state="translated">Die Behandlung von Verhalten der Maus kann nicht geändert werden <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> durch Außerkraftsetzen von <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1582" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1583" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1584" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1586" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1588" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1590" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1595" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1596" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the right mouse button was pressed.</source>
          <target state="translated">Die Ereignisdaten melden, dass die rechte Maustaste gedrückt wurde.</target>       </trans-unit>
        <trans-unit id="1597" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" /&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" /&gt;</ph>-Routingereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1598" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph> event appears to travel a tunneling route but actually travels in an indirect way.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph> Ereignis angezeigt wird, eine Tunneling-Route zu folgen, durchläuft jedoch tatsächlich eine indirekte Möglichkeit.</target>       </trans-unit>
        <trans-unit id="1600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> is the underlying event that is tunnel routed, and each <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> ist der zugrunde liegenden Ereignis, Tunnel weitergeleitet, und jede <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> entlang des Ereignisses Route durchläuft das direkte Routingereignis auslösen <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">Obwohl Sie markieren können die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph> Ereignis für dieses Element als behandelt, zum behandelte Zustand ist nicht Ereignisroute weitergegeben auf andere Elemente auf der Ereignisroute.</target>       </trans-unit>
        <trans-unit id="1602" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">Allerdings kann es sinnvoll sein, das Ereignis als behandelt, um zu verhindern, dass allgemeine Instanzhandler zu markieren (solche, die keine Berechnung angegeben <ph id="ph1">`handledEventsToo`</ph>) aus aufgerufen wurde.</target>       </trans-unit>
        <trans-unit id="1603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> and converts it to an appropriate local event.</source>
          <target state="translated">Die Standardimplementierung für allgemeine Maus Ereignisbehandlung in <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> überwacht <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> und konvertiert ihn in ein entsprechendes lokales Ereignis.</target>       </trans-unit>
        <trans-unit id="1604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">Wenn Sie diese Logik überschreiben möchten, müssen Sie eine abgeleitete Klasse erstellen.</target>       </trans-unit>
        <trans-unit id="1605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Registrieren Sie im statischen Konstruktor der abgeleiteten Klasse einen alternativen Klassenhandler für <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1606" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A&gt;</ph>.</source>
          <target state="translated">Die Behandlung von Verhalten der Maus kann nicht geändert werden <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> durch Außerkraftsetzen von <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Alternatively, you can override this method in order to change event handling for a specific mouse state.</source>
          <target state="translated">Alternativ können Sie diese Methode überschreiben, um Ereignisbehandlung für einen bestimmten Maus Status zu ändern.</target>       </trans-unit>
        <trans-unit id="1608" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Whether you choose to call the base implementation depends on your scenario.</source>
          <target state="translated">Egal, ob Sie die basisimplementierung aufgerufen werden, hängt von Ihrem Szenario ab.</target>       </trans-unit>
        <trans-unit id="1609" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A&gt;</ph>.</source>
          <target state="translated">Standardbehandlung Eingabe für dieses Mausereignis auf den Vorgängerklassen, die auch zum Aufrufen erwarten Basis aufgerufen deaktiviert <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1610" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>For example, you can derive from <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> and override <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A&gt;</ph> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <ph id="ph3">&lt;xref:System.Windows.Controls.Control&gt;</ph> default behavior.</source>
          <target state="translated">Sie können z. B. Ableiten von <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> und überschreiben <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A&gt;</ph> in die abgeleitete Klasse, ohne dass Base aufgerufen; deaktiviert diese Außerkraftsetzung jedoch den Kontext im Menü Dienste auf steuern können, die Teil sind von der <ph id="ph3">&lt;xref:System.Windows.Controls.Control&gt;</ph> Standardverhalten.</target>       </trans-unit>
        <trans-unit id="1611" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1612" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the right mouse button was released.</source>
          <target state="translated">Die Ereignisdaten melden, dass die rechte Maustaste losgelassen wurde.</target>       </trans-unit>
        <trans-unit id="1613" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" /&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" /&gt;</ph>-Routingereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1614" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1615" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph> event appears to travel a tunneling route but actually travels in an indirect way.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph> Ereignis angezeigt wird, eine Tunneling-Route zu folgen, durchläuft jedoch tatsächlich eine indirekte Möglichkeit.</target>       </trans-unit>
        <trans-unit id="1616" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> is the underlying event that is tunnel routed, and each <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> ist der zugrunde liegenden Ereignis, Tunnel weitergeleitet, und jede <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> entlang des Ereignisses Route durchläuft das direkte Routingereignis auslösen <ph id="ph3">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">Obwohl Sie markieren können die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph> Ereignis für dieses Element als behandelt, zum behandelte Zustand ist nicht Ereignisroute weitergegeben auf andere Elemente auf der Ereignisroute.</target>       </trans-unit>
        <trans-unit id="1618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">Allerdings kann es sinnvoll sein, das Ereignis als behandelt, um zu verhindern, dass allgemeine Instanzhandler zu markieren (solche, die keine Berechnung angegeben <ph id="ph1">`handledEventsToo`</ph>) aus aufgerufen wurde.</target>       </trans-unit>
        <trans-unit id="1619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> and converts it to an appropriate local event.</source>
          <target state="translated">Die Standardimplementierung für allgemeine Maus Ereignisbehandlung in <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> überwacht <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> und konvertiert ihn in ein entsprechendes lokales Ereignis.</target>       </trans-unit>
        <trans-unit id="1620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">Wenn Sie diese Logik überschreiben möchten, müssen Sie eine abgeleitete Klasse erstellen.</target>       </trans-unit>
        <trans-unit id="1621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Registrieren Sie im statischen Konstruktor der abgeleiteten Klasse einen alternativen Klassenhandler für <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1622" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A&gt;</ph>.</source>
          <target state="translated">Die Behandlung von Verhalten der Maus kann nicht geändert werden <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> durch Außerkraftsetzen von <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1623" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1624" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that one or more mouse buttons were released.</source>
          <target state="translated">Die Ereignisdaten melden, dass eine oder mehrere Maustasten losgelassen wurden.</target>       </trans-unit>
        <trans-unit id="1625" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1626" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1627" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Mouse button actions are also handled by a dedicated input manager.</source>
          <target state="translated">Schaltfläche Mausaktionen werden auch von einem dedizierten Eingabe-Manager behandelt.</target>       </trans-unit>
        <trans-unit id="1628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</source>
          <target state="translated">Andere Programmierfunktionen, die Schaltfläche Mausaktionen, z. B. Eingabe abhängig ist, und jeder Befehl von Bindungen, möglicherweise Handler für die Aktion aufrufen, bevor es als eine allgemeine Schaltfläche Mausaktion verfügbar gemacht wird.</target>       </trans-unit>
        <trans-unit id="1629" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If these input system features mark the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> event as handled, <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseUp%2A&gt;</ph> is not invoked.</source>
          <target state="translated">Wenn Sie diese markieren Eingabedateien der <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> Ereignis als behandelt, <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseUp%2A&gt;</ph> wird nicht aufgerufen.</target>       </trans-unit>
        <trans-unit id="1630" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you use this class handler to mark the event as handled, you potentially impact the following events: <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph>.</source>
          <target state="translated">Wenn Sie den Klassenhandler für diese verwenden, um das Ereignis als behandelt markiert werden, Sie möglicherweise Auswirkungen auf die folgenden Ereignisse: <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> und <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1631" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Either of these events might be raised on the receiving element when <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> is received.</source>
          <target state="translated">Eines dieser Ereignisse können für das empfangende Element ausgelöst werden beim <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> empfangen wird.</target>       </trans-unit>
        <trans-unit id="1632" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</source>
          <target state="translated">Wenn Sie dieses Ereignis in eine Klassenbehandlung als behandelt markiert haben, werden dennoch Unterereignisse ausgelöst. Sie kann jedoch zum behandelten Zustand in den Ereignisdaten übergeben werden.</target>       </trans-unit>
        <trans-unit id="1633" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph> in order to attach handlers.</source>
          <target state="translated">Wenn das Ereignis in der Klassenbehandlung behandelt wird, Instanzhandler für die Unterereignisse werden nicht aufgerufen, wenn Sie explizit verwenden <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> mit <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph> um Handler anfügen.</target>       </trans-unit>
        <trans-unit id="1634" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Class handlers also are not invoked unless those class handlers were registered with the <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Klassenhandler werden ebenfalls nicht aufgerufen, wenn diese Klassenhandler registriert wurden die <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> Signatur mit <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="1635" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>By handling <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseUp%2A&gt;</ph>, you are implying that your class handling accounted for all possible mouse button up actions.</source>
          <target state="translated">Durch Verarbeiten <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseUp%2A&gt;</ph>, Sie sind, dass die Klassenbehandlung für alle möglichen Aktionen Gleichzeichen.</target>       </trans-unit>
        <trans-unit id="1636" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</source>
          <target state="translated">Dieses Verhalten kann unerwünscht sein. Daher vorsichtig, wenn Sie dieser virtuellen Methode verwenden, um die Ereignisse als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1637" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.</source>
          <target state="translated">Jedes der direkten Schaltfläche-spezifische Ereignisse verfügt auch über ein virtuelles auf *-Methode. Berücksichtigen Sie, ob überschreiben diese Schaltfläche-spezifische Klassenhandler besser geeignet sein kann.</target>       </trans-unit>
        <trans-unit id="1638" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1639" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1640" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1641" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1642" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1643" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1644" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1645" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1646" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1647" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseWheelEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseWheelEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1648" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1649" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1650" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1652" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1653" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1654" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1655" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1656" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1657" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1658" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1660" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.QueryContinueDragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.QueryContinueDragEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1661" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1662" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1663" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1664" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1665" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1669" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1670" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1671" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1672" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1673" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusButtonEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1674" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1675" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1676" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1677" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1678" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1679" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1680" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1681" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1682" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1683" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1684" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1686" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusButtonEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1687" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1688" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1690" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1691" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1692" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1693" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1694" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1695" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1696" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1697" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1698" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1699" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusDownEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusDownEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1700" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1701" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1702" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1703" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1704" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1705" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1708" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1709" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1710" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1711" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1712" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1713" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1714" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1715" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1716" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1717" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1718" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1719" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1720" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1721" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1722" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1723" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1724" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1725" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1726" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1727" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1728" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1729" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1730" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1731" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1732" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1733" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1734" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1735" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1736" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1737" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1738" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1739" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1740" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1741" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1742" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1743" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1744" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1745" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1746" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1747" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1748" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1749" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1751" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1752" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1753" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1754" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1755" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1756" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1757" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1758" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1759" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1760" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1761" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1762" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1763" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1764" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1765" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1766" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1767" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1768" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1769" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1770" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1771" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1772" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1773" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1774" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1775" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1776" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1777" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1778" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1779" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1780" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1781" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1782" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1783" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1784" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1785" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1786" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1787" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1788" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1789" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1790" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.TextCompositionEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.TextCompositionEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1791" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1792" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1793" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1794" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1795" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1796" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1797" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1798" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1799" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1800" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1801" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1802" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">Ein weiteres Szenario, das speziell für die Preview-Ereignisse werden kennzeichnen behandelt, sodass die übereinstimmenden bubbling Klassenhandler nicht aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1803" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1804" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewTouchDown" /&gt;</ph> routed event that occurs when a touch presses this element.</source>
          <target state="translated">Stellt Klassenbehandlung für das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewTouchDown" /&gt;</ph>-Routingereignis bereit, das auftritt, wenn eine Fingereingabe in diesem Element erfasst wird.</target>       </trans-unit>
        <trans-unit id="1805" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchDown%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchDown%2A&gt;</ph> Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1806" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchDown%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph> event.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchDown%2A&gt;</ph> in einer abgeleiteten Klasse zum Behandeln der <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph> Ereignis.</target>       </trans-unit>
        <trans-unit id="1807" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchDown%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">Achten Sie darauf, dass Sie der Basisklasse aufgerufen <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchDown%2A&gt;</ph> Methode, damit die Basisklassen das Ereignis empfangen.</target>       </trans-unit>
        <trans-unit id="1808" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1809" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewTouchMove" /&gt;</ph> routed event that occurs when a touch moves while inside this element.</source>
          <target state="translated">Stellt Klassenbehandlung für das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewTouchMove" /&gt;</ph>-Routingereignis bereit, das auftritt, wenn sich eine Fingereingabe innerhalb dieses Elements bewegt.</target>       </trans-unit>
        <trans-unit id="1810" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchMove%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchMove%2A&gt;</ph> Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1811" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchMove%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewTouchMove&gt;</ph> event.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchMove%2A&gt;</ph> in einer abgeleiteten Klasse zum Behandeln der <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewTouchMove&gt;</ph> Ereignis.</target>       </trans-unit>
        <trans-unit id="1812" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchMove%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">Achten Sie darauf, dass Sie der Basisklasse aufgerufen <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchMove%2A&gt;</ph> Methode, damit die Basisklassen das Ereignis empfangen.</target>       </trans-unit>
        <trans-unit id="1813" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1814" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewTouchUp" /&gt;</ph> routed event that occurs when a touch is released inside this element.</source>
          <target state="translated">Stellt Klassenbehandlung für das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewTouchUp" /&gt;</ph>-Routingereignis bereit, das auftritt, wenn eine Fingereingabe innerhalb dieses Elements freigegeben wird.</target>       </trans-unit>
        <trans-unit id="1815" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchUp%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchUp%2A&gt;</ph> Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1816" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchUp%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewTouchUp&gt;</ph> event.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchUp%2A&gt;</ph> in einer abgeleiteten Klasse zum Behandeln der <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewTouchUp&gt;</ph> Ereignis.</target>       </trans-unit>
        <trans-unit id="1817" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchUp%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">Achten Sie darauf, dass Sie der Basisklasse aufgerufen <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchUp%2A&gt;</ph> Methode, damit die Basisklassen das Ereignis empfangen.</target>       </trans-unit>
        <trans-unit id="1818" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.QueryContinueDragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.QueryContinueDragEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1819" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.QueryContinueDrag" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.QueryContinueDrag" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1820" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1821" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1822" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1823" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1824" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1825" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1826" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1827" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1828" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1829" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1830" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.QueryCursorEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.QueryCursorEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1831" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.QueryCursor" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.QueryCursor" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1832" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1833" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1834" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1835" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1836" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1837" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1838" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1839" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1840" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1841" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1842" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusButtonEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1843" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1844" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1845" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1846" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1847" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1848" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1849" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1850" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1851" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1852" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1853" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1854" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusButtonEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1855" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1856" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1857" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1858" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1859" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1860" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1861" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1862" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1863" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1864" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1865" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1866" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusDownEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusDownEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1867" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusDown" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusDown" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1868" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1869" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1870" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1871" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1872" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1873" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1874" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1875" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1876" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1877" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1878" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1879" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusEnter" /&gt;</ph> attached event is raised by this element.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusEnter" /&gt;</ph>-Ereignis von diesem Element ausgelöst wird.</target>       </trans-unit>
        <trans-unit id="1880" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1882" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1883" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">Sie können Basis entweder vor oder nach Ihrem besondere Behandlung, je nach Ihren Anforderungen aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1884" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1885" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1886" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">Das Ereignis als behandelt markiert ist immer noch nützlich für typische Instanzhandler verhindert (diejenigen, die keinen angeben <ph id="ph1">`handledEventsToo`</ph>) aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1887" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1888" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1889" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1890" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1891" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1892" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1893" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1894" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1895" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1896" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1897" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1898" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1899" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1900" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusInRange" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusInRange" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1901" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1902" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1903" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1904" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1905" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1906" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1907" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1908" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1909" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1910" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1911" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1912" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusLeave" /&gt;</ph> attached event is raised by this element.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusLeave" /&gt;</ph>-Ereignis von diesem Element ausgelöst wird.</target>       </trans-unit>
        <trans-unit id="1913" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1914" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1915" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1916" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">Sie können Basis entweder vor oder nach Ihrem besondere Behandlung, je nach Ihren Anforderungen aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="1917" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1918" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1919" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">Das Ereignis als behandelt markiert ist immer noch nützlich für typische Instanzhandler verhindert (diejenigen, die keinen angeben <ph id="ph1">`handledEventsToo`</ph>) aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1920" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1921" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusMove" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusMove" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1922" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1923" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1924" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1925" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1926" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1927" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1928" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1929" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1930" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1931" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1932" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1933" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1934" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1935" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1936" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1937" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1938" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1939" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1940" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1941" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1942" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1943" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1944" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1945" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1946" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1947" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1948" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1949" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1950" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1951" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1952" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1953" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1954" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1955" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1956" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1957" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusUp" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusUp" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1958" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1959" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1960" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1961" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1962" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1963" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1964" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1965" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1966" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1967" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1968" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.TextCompositionEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Windows.Input.TextCompositionEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1969" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">Wird aufgerufen, wenn ein nicht behandeltes, angefügtes <ph id="ph1">&lt;see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /&gt;</ph>-Ereignis beim Durchlauf ein von dieser Klasse abgeleitetes Element erreicht.</target>       </trans-unit>
        <trans-unit id="1970" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">Implementieren Sie diese Methode, um eine Klassenbehandlung für dieses Ereignis hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="1971" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">Diese Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1972" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">Da eine Zwischenklasse in der Vererbung diese Methode implementiert wird kann, wird empfohlen, dass Sie in Ihrer Implementierung die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="1973" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">Der Zweck dieser Methode ähnelt der <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> -Ereignismuster auf * Methoden: Diese Methode bietet die Möglichkeit, das übereinstimmende Ereignis von abgeleiteten Klassen durch die Einrichtung von eines Klassenhandler statt einem Instanzhandler behandeln.</target>       </trans-unit>
        <trans-unit id="1974" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">In diesem Fall wird das übereinstimmende Ereignis ein Routingereignis.</target>       </trans-unit>
        <trans-unit id="1975" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">Das Implementierungsmuster der On * Methoden unterscheidet sich für Routingereignisse, da ein Routingereignis von einem untergeordneten Element ausgelöst werden kann, die nicht unbedingt das Element, mit das Handler aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1976" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">Daher muss Ihre Implementierung die Datenquelleneigenschaften der Ereignisdaten zu untersuchen.</target>       </trans-unit>
        <trans-unit id="1977" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">Sie sollten nicht versuchen, auf das Ereignis in den meisten Fällen ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="1978" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">Durch diese Methode überschreiben oder durch Registrieren mit Klassenhandler <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, abgeleitete Klassen von <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> können Ereignishandlermethoden private Klasse aufrufen, wenn das Ereignis auf der Ereignisroute empfangen wird.</target>       </trans-unit>
        <trans-unit id="1979" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">Ein Szenario, in dem Klassenbehandlung geeignet ist, wird zum Bearbeiten von Daten für das Ereignis und das Routingereignis als behandelt markiert.</target>       </trans-unit>
        <trans-unit id="1980" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1981" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchDown" /&gt;</ph> routed event that occurs when a touch presses inside this element.</source>
          <target state="translated">Stellt Klassenbehandlung für das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchDown" /&gt;</ph>-Routingereignis bereit, das auftritt, wenn eine Fingereingabe innerhalb dieses Elements erfasst wird.</target>       </trans-unit>
        <trans-unit id="1982" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchDown%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchDown%2A&gt;</ph> Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1983" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchDown%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph> event.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchDown%2A&gt;</ph> in einer abgeleiteten Klasse zum Behandeln der <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph> Ereignis.</target>       </trans-unit>
        <trans-unit id="1984" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchDown%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">Achten Sie darauf, dass Sie der Basisklasse aufgerufen <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchDown%2A&gt;</ph> Methode, damit die Basisklassen das Ereignis empfangen.</target>       </trans-unit>
        <trans-unit id="1985" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1986" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchEnter" /&gt;</ph> routed event that occurs when a touch moves from outside to inside the bounds of this element.</source>
          <target state="translated">Stellt Klassenbehandlung für das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchEnter" /&gt;</ph>-Routingereignis bereit, das auftritt, wenn eine Fingereingabe von außerhalb der Grenzen dieses Elements nach innen verschoben wird.</target>       </trans-unit>
        <trans-unit id="1987" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchEnter%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchEnter%2A&gt;</ph> Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1988" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchEnter%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchEnter&gt;</ph> event.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchEnter%2A&gt;</ph> in einer abgeleiteten Klasse zum Behandeln der <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchEnter&gt;</ph> Ereignis.</target>       </trans-unit>
        <trans-unit id="1989" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchEnter%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">Achten Sie darauf, dass Sie der Basisklasse aufgerufen <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchEnter%2A&gt;</ph> Methode, damit die Basisklassen das Ereignis empfangen.</target>       </trans-unit>
        <trans-unit id="1990" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1991" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchLeave" /&gt;</ph> routed event that occurs when a touch moves from inside to outside the bounds of this element.</source>
          <target state="translated">Stellt Klassenbehandlung für das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchLeave" /&gt;</ph>-Routingereignis bereit, das auftritt, wenn eine Fingereingabe von innerhalb der Grenzen dieses Elements nach außen verschoben wird.</target>       </trans-unit>
        <trans-unit id="1992" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchLeave%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchLeave%2A&gt;</ph> Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1993" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchLeave%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchLeave&gt;</ph> event.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchLeave%2A&gt;</ph> in einer abgeleiteten Klasse zum Behandeln der <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchLeave&gt;</ph> Ereignis.</target>       </trans-unit>
        <trans-unit id="1994" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchLeave%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">Achten Sie darauf, dass Sie der Basisklasse aufgerufen <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchLeave%2A&gt;</ph> Methode, damit die Basisklassen das Ereignis empfangen.</target>       </trans-unit>
        <trans-unit id="1995" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="1996" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchMove" /&gt;</ph> routed event that occurs when a touch moves while inside this element.</source>
          <target state="translated">Stellt Klassenbehandlung für das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchMove" /&gt;</ph>-Routingereignis bereit, das auftritt, wenn sich eine Fingereingabe innerhalb dieses Elements bewegt.</target>       </trans-unit>
        <trans-unit id="1997" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchMove%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchMove%2A&gt;</ph> Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="1998" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchMove%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchMove&gt;</ph> event.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchMove%2A&gt;</ph> in einer abgeleiteten Klasse zum Behandeln der <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchMove&gt;</ph> Ereignis.</target>       </trans-unit>
        <trans-unit id="1999" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchMove%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">Achten Sie darauf, dass Sie der Basisklasse aufgerufen <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchMove%2A&gt;</ph> Methode, damit die Basisklassen das Ereignis empfangen.</target>       </trans-unit>
        <trans-unit id="2000" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="2001" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchUp" /&gt;</ph> routed event that occurs when a touch is released inside this element.</source>
          <target state="translated">Stellt Klassenbehandlung für das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchUp" /&gt;</ph>-Routingereignis bereit, das auftritt, wenn eine Fingereingabe innerhalb dieses Elements freigegeben wird.</target>       </trans-unit>
        <trans-unit id="2002" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchUp%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchUp%2A&gt;</ph> Methode hat keine Standardimplementierung.</target>       </trans-unit>
        <trans-unit id="2003" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchUp%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchUp&gt;</ph> event.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchUp%2A&gt;</ph> in einer abgeleiteten Klasse zum Behandeln der <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchUp&gt;</ph> Ereignis.</target>       </trans-unit>
        <trans-unit id="2004" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchUp%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">Achten Sie darauf, dass Sie der Basisklasse aufgerufen <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchUp%2A&gt;</ph> Methode, damit die Basisklassen das Ereignis empfangen.</target>       </trans-unit>
        <trans-unit id="2005" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>The direction of the requested focus traversal.</source>
          <target state="translated">Die Richtung des angeforderten Fokusdurchlaufs.</target>       </trans-unit>
        <trans-unit id="2006" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.</source>
          <target state="translated">Gibt beim Überschreiben in einer abgeleiteten Klasse das Element zurück, das den Fokus für eine bestimmte Richtung des Fokusdurchlaufs empfängt, ohne dass der Fokus tatsächlich auf das betreffende Element verschoben wird.</target>       </trans-unit>
        <trans-unit id="2007" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>The element that would have received focus if <ph id="ph1">&lt;see cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" /&gt;</ph> were actually invoked.</source>
          <target state="translated">Das Element, das den Fokus erhält, wenn <ph id="ph1">&lt;see cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" /&gt;</ph> tatsächlich aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="2008" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>The default implementation of this method in this class is incomplete and always returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Die standardmäßige Implementierung dieser Methode in dieser Klasse unvollständig, und gibt immer <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="2009" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewDragEnter">
          <source>Occurs when the input system reports an underlying drag event with this element as the drag target.</source>
          <target state="translated">Tritt auf, wenn das Eingabesystem ein zugrunde liegendes Drag-Ereignis mit diesem Element als Drag-Ziel meldet.</target>       </trans-unit>
        <trans-unit id="2010" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragEnter">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewDragEnter&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewDragEnter&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2011" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragEnter">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewDragEnter&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewDragEnter&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2012" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragEnter">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2013" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragEnter">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2014" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragEnter">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2015" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragEnter">
          <source>Tunneling</source>
          <target state="translated">Tunneling</target>       </trans-unit>
        <trans-unit id="2016" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragEnter">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2017" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragEnter">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragEnter&gt;</ph>.</source>
          <target state="translated">Das entsprechende bubbling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragEnter&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2018" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragEnter">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewDragEnter%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewDragEnter%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2019" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewDragEnterEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewDragEnter" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewDragEnter" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2020" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDragEnterEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2021" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDragEnterEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2022" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDragEnterEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2023" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDragEnterEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2024" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDragEnterEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2025" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewDragLeave">
          <source>Occurs when the input system reports an underlying drag event with this element as the drag origin.</source>
          <target state="translated">Tritt auf, wenn das Eingabesystem ein zugrunde liegendes Drag-Ereignis mit diesem Element als Drag-Quelle meldet.</target>       </trans-unit>
        <trans-unit id="2026" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragLeave">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewDragLeave&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewDragLeave&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2027" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragLeave">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewDragLeave&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewDragLeave&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2028" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragLeave">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2029" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragLeave">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2030" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragLeave">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2031" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragLeave">
          <source>Tunneling</source>
          <target state="translated">Tunneling</target>       </trans-unit>
        <trans-unit id="2032" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragLeave">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2033" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragLeave">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragLeave&gt;</ph>.</source>
          <target state="translated">Das entsprechende bubbling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragLeave&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2034" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragLeave">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewDragLeave%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewDragLeave%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2035" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewDragLeaveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewDragLeave" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewDragLeave" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2036" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDragLeaveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2037" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDragLeaveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2038" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDragLeaveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2039" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDragLeaveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2040" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDragLeaveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2041" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewDragOver">
          <source>Occurs when the input system reports an underlying drag event with this element as the potential drop target.</source>
          <target state="translated">Tritt auf, wenn das Eingabesystem ein zugrunde liegendes Drag-Ereignis mit diesem Element als potenzielles Drop-Ziel meldet.</target>       </trans-unit>
        <trans-unit id="2042" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragOver">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewDragOver&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewDragOver&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2043" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragOver">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewDragOver&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewDragOver&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2044" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragOver">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2045" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragOver">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2046" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragOver">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2047" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragOver">
          <source>Tunneling</source>
          <target state="translated">Tunneling</target>       </trans-unit>
        <trans-unit id="2048" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragOver">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2049" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragOver">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragOver&gt;</ph>.</source>
          <target state="translated">Das entsprechende bubbling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragOver&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2050" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragOver">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewDragOver%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewDragOver%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2051" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewDragOverEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewDragOver" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewDragOver" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2052" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDragOverEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2053" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDragOverEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2054" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDragOverEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2055" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDragOverEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2056" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDragOverEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2057" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewDrop">
          <source>Occurs when the input system reports an underlying drop event with this element as the drop target.</source>
          <target state="translated">Tritt auf, wenn das Eingabesystem ein zugrunde liegendes Drop-Ereignis meldet, das dieses Element als Drop-Ziel aufweist.</target>       </trans-unit>
        <trans-unit id="2058" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDrop">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewDrop&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewDrop&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2059" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDrop">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewDrop&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewDrop&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2060" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDrop">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2061" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDrop">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2062" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDrop">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2063" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDrop">
          <source>Tunneling</source>
          <target state="translated">Tunneling</target>       </trans-unit>
        <trans-unit id="2064" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDrop">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2065" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDrop">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.Drop&gt;</ph>.</source>
          <target state="translated">Das entsprechende bubbling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.Drop&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2066" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDrop">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewDrop%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewDrop%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2067" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewDropEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewDrop" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewDrop" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2068" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDropEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2069" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDropEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2070" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDropEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2071" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDropEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2072" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDropEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2073" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewGiveFeedback">
          <source>Occurs when a drag-and-drop operation is started.</source>
          <target state="translated">Tritt auf, wenn ein Drag &amp; Drop-Vorgang gestartet wird.</target>       </trans-unit>
        <trans-unit id="2074" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGiveFeedback">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewGiveFeedback&gt;</ph> event enables the source of a drag event to modify the appearance of the mouse pointer, in order to give the user visual feedback during a drag-and-drop operation.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewGiveFeedback&gt;</ph> Ereignis ermöglicht die Quelle des Drag-Ereignis, um die Darstellung des Mauszeigers zu ändern, um dem Benutzer während eines Drag &amp; Drop-Vorgangs ein visuelles Feedback.</target>       </trans-unit>
        <trans-unit id="2075" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGiveFeedback">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewGiveFeedback&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewGiveFeedback&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2076" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGiveFeedback">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewGiveFeedback&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewGiveFeedback&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2077" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGiveFeedback">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2078" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGiveFeedback">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2079" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGiveFeedback">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2080" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGiveFeedback">
          <source>Tunneling</source>
          <target state="translated">Tunneling</target>       </trans-unit>
        <trans-unit id="2081" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGiveFeedback">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2082" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGiveFeedback">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.GiveFeedback&gt;</ph>.</source>
          <target state="translated">Das entsprechende bubbling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.GiveFeedback&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2083" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGiveFeedback">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewGiveFeedback%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewGiveFeedback%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2084" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewGiveFeedbackEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewGiveFeedback" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewGiveFeedback" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2085" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewGiveFeedbackEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2086" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewGiveFeedbackEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2087" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewGiveFeedbackEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2088" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewGiveFeedbackEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2089" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewGiveFeedbackEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2090" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewGotKeyboardFocus">
          <source>Occurs when the keyboard is focused on this element.</source>
          <target state="translated">Tritt auf, wenn sich der Fokus der Tastatur auf diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="2091" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGotKeyboardFocus">
          <source>Because this event uses tunneling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">Da dieses Ereignis Tunnel verwendet, routing, das Element, das Fokus besitzt möglicherweise ein untergeordnetes Element anstatt des Elements, dem der Ereignishandler tatsächlich angefügt.</target>       </trans-unit>
        <trans-unit id="2092" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGotKeyboardFocus">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that has focus.</source>
          <target state="translated">Überprüfen Sie die <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in die Ereignisdaten an das aktuelle Element zu bestimmen, die Fokus besitzt.</target>       </trans-unit>
        <trans-unit id="2093" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGotKeyboardFocus">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewGotKeyboardFocus&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewGotKeyboardFocus&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2094" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGotKeyboardFocus">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewGotKeyboardFocus&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewGotKeyboardFocus&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2095" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGotKeyboardFocus">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2096" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGotKeyboardFocus">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2097" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGotKeyboardFocus">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2098" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGotKeyboardFocus">
          <source>Tunneling</source>
          <target state="translated">Tunneling</target>       </trans-unit>
        <trans-unit id="2099" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGotKeyboardFocus">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2100" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGotKeyboardFocus">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt;</ph>.</source>
          <target state="translated">Das entsprechende bubbling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2101" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGotKeyboardFocus">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewGotKeyboardFocus%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewGotKeyboardFocus%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2102" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2103" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2104" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2105" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2106" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2107" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2108" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewKeyDown">
          <source>Occurs when a key is pressed while the keyboard is focused on this element.</source>
          <target state="translated">Tritt auf, wenn eine Taste gedrückt wird, während sich der Fokus der Tastatur auf diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="2109" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyDown">
          <source>Key handling interacts with other platform features such as commanding and text composition.</source>
          <target state="translated">Schlüsselverarbeitung interagiert mit anderen Plattformfunktionen, z. B. Befehle und Text Zusammensetzung.</target>       </trans-unit>
        <trans-unit id="2110" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyDown">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyDown&gt;</ph> event is a lower-level text input event that might not behave as expected on certain controls.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyDown&gt;</ph> Ereignis ist eine technisch anspruchsvolle Texteingabeereignis, die nicht auf bestimmte Steuerelemente erwartungsgemäß Verhalten.</target>       </trans-unit>
        <trans-unit id="2111" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyDown">
          <source>This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</source>
          <target state="translated">Dies ist, da einige Steuerelemente verfügen über Steuerelement Compositing oder Klassenbehandlung, die eine auf höherer Ebene Version des Texts enthält Eingabe Behandlung und verknüpfte Ereignisse.</target>       </trans-unit>
        <trans-unit id="2112" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyDown">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewKeyDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewKeyDown&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2113" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyDown">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewKeyDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewKeyDown&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2114" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyDown">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2115" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyDown">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2116" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyDown">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2117" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyDown">
          <source>Tunneling</source>
          <target state="translated">Tunneling</target>       </trans-unit>
        <trans-unit id="2118" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyDown">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2119" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyDown">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyDown&gt;</ph>.</source>
          <target state="translated">Das entsprechende bubbling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyDown&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2120" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewKeyDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewKeyDown%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2121" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewKeyDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewKeyDown" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewKeyDown" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2122" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewKeyDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2123" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewKeyDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2124" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewKeyDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2125" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewKeyDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2126" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewKeyDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2127" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewKeyUp">
          <source>Occurs when a key is released while the keyboard is focused on this element.</source>
          <target state="translated">Tritt auf, wenn eine Taste losgelassen wird, während sich der Fokus der Tastatur auf diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="2128" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyUp">
          <source>Key handling interacts with other platform features such as commanding and text composition.</source>
          <target state="translated">Schlüsselverarbeitung interagiert mit anderen Plattformfunktionen, z. B. Befehle und Text Zusammensetzung.</target>       </trans-unit>
        <trans-unit id="2129" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyUp">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyUp&gt;</ph> event is a lower-level text input event that might not behave as expected on certain controls.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyUp&gt;</ph> Ereignis ist eine technisch anspruchsvolle Texteingabeereignis, die nicht auf bestimmte Steuerelemente erwartungsgemäß Verhalten.</target>       </trans-unit>
        <trans-unit id="2130" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyUp">
          <source>This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</source>
          <target state="translated">Dies ist, da einige Steuerelemente verfügen über Steuerelement Compositing oder Klassenbehandlung, die eine auf höherer Ebene Version des Texts enthält Eingabe Behandlung und verknüpfte Ereignisse.</target>       </trans-unit>
        <trans-unit id="2131" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyUp">
          <source>For details, check the documentation for individual controls.</source>
          <target state="translated">Informationen entnehmen Sie der Dokumentation für einzelne Steuerelemente.</target>       </trans-unit>
        <trans-unit id="2132" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyUp">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewKeyUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewKeyUp&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2133" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyUp">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewKeyUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewKeyUp&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2134" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyUp">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2135" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyUp">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2136" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyUp">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2137" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyUp">
          <source>Tunneling</source>
          <target state="translated">Tunneling</target>       </trans-unit>
        <trans-unit id="2138" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyUp">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2139" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyUp">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyUp&gt;</ph>.</source>
          <target state="translated">Das entsprechende bubbling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyUp&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2140" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewKeyUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewKeyUp%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2141" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewKeyUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewKeyUp" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewKeyUp" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2142" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewKeyUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2143" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewKeyUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2144" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewKeyUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2145" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewKeyUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2146" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewKeyUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2147" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewLostKeyboardFocus">
          <source>Occurs when the keyboard is no longer focused on this element.</source>
          <target state="translated">Tritt auf, wenn sich der Fokus der Tastatur nicht mehr auf diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="2148" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewLostKeyboardFocus">
          <source>Because this event uses tunneling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">Da dieses Ereignis Tunnel verwendet, routing, das Element, das Fokus verloren hat möglicherweise ein untergeordnetes Element anstatt des Elements, dem der Ereignishandler tatsächlich angefügt.</target>       </trans-unit>
        <trans-unit id="2149" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewLostKeyboardFocus">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that lost focus.</source>
          <target state="translated">Überprüfen Sie die <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in die Ereignisdaten an das aktuelle Element zu bestimmen, die Fokus verloren hat.</target>       </trans-unit>
        <trans-unit id="2150" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewLostKeyboardFocus">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewLostKeyboardFocus&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewLostKeyboardFocus&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2151" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewLostKeyboardFocus">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewLostKeyboardFocus&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewLostKeyboardFocus&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2152" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewLostKeyboardFocus">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2153" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewLostKeyboardFocus">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2154" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewLostKeyboardFocus">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2155" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewLostKeyboardFocus">
          <source>Tunneling</source>
          <target state="translated">Tunneling</target>       </trans-unit>
        <trans-unit id="2156" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewLostKeyboardFocus">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2157" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewLostKeyboardFocus">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.LostKeyboardFocus&gt;</ph>.</source>
          <target state="translated">Das entsprechende bubbling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.LostKeyboardFocus&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2158" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewLostKeyboardFocus">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewLostKeyboardFocus%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewLostKeyboardFocus%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2159" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2160" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2161" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2162" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2163" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2164" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2165" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewMouseDown">
          <source>Occurs when any mouse button is pressed while the pointer is over this element.</source>
          <target state="translated">Tritt auf, wenn eine Maustaste gedrückt wird, während sich der Mauszeiger über diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="2166" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseDown">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2167" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseDown">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2168" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseDown">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph> event is often raised together with either <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph>, which correspond to a press of one of the two standard mouse buttons.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph> Ereignis wird häufig zusammen mit entweder <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> oder <ph id="ph3">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph>, das Drücken einer der beiden standard Maustasten entsprechen.</target>       </trans-unit>
        <trans-unit id="2169" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseDown">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> event reaches this element along the event route.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> und <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph> sind auch Routingereignisse, aber sie sind direkte Routingereignisse und die entsprechende Schaltfläche-spezifische-Ereignis wird ausgelöst, wenn die <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> -Ereignis dieses Element auf der Ereignisroute erreicht.</target>       </trans-unit>
        <trans-unit id="2170" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseDown">
          <source>See Remarks for <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph>.</source>
          <target state="translated">Finden Sie unter "Hinweise" für <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> oder <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2171" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseDown">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2172" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseDown">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2173" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseDown">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2174" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseDown">
          <source>Tunneling</source>
          <target state="translated">Tunneling</target>       </trans-unit>
        <trans-unit id="2175" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseDown">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2176" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseDown">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseDown&gt;</ph>.</source>
          <target state="translated">Das entsprechende bubbling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseDown&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2177" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseDown%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2178" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewMouseDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseDown" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseDown" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2179" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2180" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2181" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2182" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2183" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2184" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown">
          <source>Occurs when the left mouse button is pressed while the mouse pointer is over this element.</source>
          <target state="translated">Tritt auf, wenn die linke Maustaste gedrückt wird, während sich der Mauszeiger über diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="2185" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown">
          <source>Although this <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">Obwohl dies <bpt id="p1">[</bpt>Ereignisübersicht weitergeleitet<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> scheint eine Tunneling-Route durch eine Elementstruktur, führen es tatsächlich ist eine direkte Routingereignis, das ausgelöst wird, und die Elementstruktur nach jedem erneut <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2186" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">Dieses Ereignis ist eine der mehrere verwandte Ereignisse, die die Schaltflächen Einzelheiten einer zugrunde liegenden Bericht <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> Ereignis, das ein angefügtes Ereignis handelt, die von jedem Element ein Ereignisroute verarbeitet wird.</target>       </trans-unit>
        <trans-unit id="2187" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown">
          <source>The arguments of this event expose the arguments of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">Die Argumente für dieses Ereignis verfügbar machen, die Argumente des zugrunde liegenden <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> Ereignis.</target>       </trans-unit>
        <trans-unit id="2188" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">Wenn das Ereignis als behandelt der Ereignisroute markiert ist, werden die Maustaste los spezifischen Ereignisse dennoch ausgelöst; Allerdings müssen Handler bestimmter Ereignisse an die Schaltflächen hinzugefügt werden, durch explizites Aufrufen <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, mit der Option zum Behandeln von Ereignissen, die bereits als behandelt markiert werden, damit Listener des Ereignisses ist.</target>       </trans-unit>
        <trans-unit id="2189" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
          <target state="translated">Konzeptionell kann dieses Ereignis (und andere los Ereignisse auf <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) eine Maus "Service" sein (mit der Definition des Diensts bereitgestellt werden, indem die <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> Klasse).</target>       </trans-unit>
        <trans-unit id="2190" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">Das Ereignis fügt den Komfort, überprüfen Sie die Maus Schaltflächenzuständen (linke Ecke, nach oben und unten) von der ursprünglichen Mausereignisse in Daten für das Ereignis nicht belegen.</target>       </trans-unit>
        <trans-unit id="2191" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">Erweiterte Szenarien, z. B. das Überprüfen von Zuständen von nicht standardmäßigen Schaltflächen, müssen Sie möglicherweise mit der <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> auf die <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> -Klasse anstelle der für <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2192" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2193" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2194" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2195" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown">
          <source>Direct</source>
          <target state="translated">Direkt</target>       </trans-unit>
        <trans-unit id="2196" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2197" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2198" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2199" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2200" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2201" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2202" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2203" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2204" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp">
          <source>Occurs when the left mouse button is released while the mouse pointer is over this element.</source>
          <target state="translated">Tritt auf, wenn die linke Maustaste losgelassen wird, während sich der Mauszeiger über diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="2205" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp">
          <source>Although this <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">Obwohl dies <bpt id="p1">[</bpt>Ereignisübersicht weitergeleitet<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> scheint eine Tunneling-Route durch eine Elementstruktur, führen es tatsächlich ist eine direkte Routingereignis, das ausgelöst wird, und die Elementstruktur nach jedem erneut <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2206" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">Dieses Ereignis ist eine der mehrere verwandte Ereignisse, die die Schaltflächen Einzelheiten einer zugrunde liegenden Bericht <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> Ereignis, das ein angefügtes Ereignis handelt, die von jedem Element ein Ereignisroute verarbeitet wird.</target>       </trans-unit>
        <trans-unit id="2207" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp">
          <source>The arguments of this event expose the arguments of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">Die Argumente für dieses Ereignis verfügbar machen, die Argumente des zugrunde liegenden <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> Ereignis.</target>       </trans-unit>
        <trans-unit id="2208" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">Wenn das Ereignis als behandelt der Ereignisroute markiert ist, werden die Maustaste los spezifischen Ereignisse dennoch ausgelöst; Allerdings müssen Handler bestimmter Ereignisse an die Schaltflächen hinzugefügt werden, durch explizites Aufrufen <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, mit der Option zum Behandeln von Ereignissen, die bereits als behandelt markiert werden, damit Listener des Ereignisses ist.</target>       </trans-unit>
        <trans-unit id="2209" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
          <target state="translated">Konzeptionell kann dieses Ereignis (und andere los Ereignisse auf <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) eine Maus "Service" sein (mit der Definition des Diensts bereitgestellt werden, indem die <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> Klasse).</target>       </trans-unit>
        <trans-unit id="2210" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">Das Ereignis fügt den Komfort, überprüfen Sie die Maus Schaltflächenzuständen (linke Ecke, nach oben und unten) von der ursprünglichen Mausereignisse in Daten für das Ereignis nicht belegen.</target>       </trans-unit>
        <trans-unit id="2211" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">Erweiterte Szenarien, z. B. das Überprüfen von Zuständen von nicht standardmäßigen Schaltflächen, müssen Sie möglicherweise mit der <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> auf die <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> -Klasse anstelle der für <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2212" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2213" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2214" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2215" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp">
          <source>Direct</source>
          <target state="translated">Direkt</target>       </trans-unit>
        <trans-unit id="2216" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2217" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2218" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2219" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2220" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2221" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2222" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2223" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2224" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewMouseMove">
          <source>Occurs when the mouse pointer moves while the mouse pointer is over this element.</source>
          <target state="translated">Tritt auf, wenn der Mauszeiger bewegt wird, während er sich über diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="2225" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseMove">
          <source>This event occurs both when the mouse pointer first enters into the element bounds, and also when the mouse pointer moves while still remaining within the element bounds.</source>
          <target state="translated">Dieses Ereignis tritt auf, wenn der Mauszeiger in der Elementgrenzen weitergegeben werden und auch wenn der Mauszeiger bewegt wird während des Bestehens der immer noch innerhalb der Grenzen des Elements.</target>       </trans-unit>
        <trans-unit id="2226" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseMove">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2227" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseMove">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2228" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseMove">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2229" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseMove">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2230" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseMove">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2231" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseMove">
          <source>Tunneling</source>
          <target state="translated">Tunneling</target>       </trans-unit>
        <trans-unit id="2232" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseMove">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2233" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseMove">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseMove&gt;</ph>.</source>
          <target state="translated">Das entsprechende bubbling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseMove&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2234" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseMove">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseMove%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2235" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewMouseMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseMove" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseMove" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2236" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseMoveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2237" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseMoveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2238" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseMoveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2239" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseMoveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2240" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseMoveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2241" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonDown">
          <source>Occurs when the right mouse button is pressed while the mouse pointer is over this element.</source>
          <target state="translated">Tritt auf, wenn die rechte Maustaste gedrückt wird, während sich der Mauszeiger über diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="2242" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonDown">
          <source>Although this <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">Obwohl dies <bpt id="p1">[</bpt>Ereignisübersicht weitergeleitet<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> scheint eine Tunneling-Route durch eine Elementstruktur, führen es tatsächlich ist eine direkte Routingereignis, das ausgelöst wird, und die Elementstruktur nach jedem erneut <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2243" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonDown">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">Dieses Ereignis ist eine der mehrere verwandte Ereignisse, die die Schaltflächen Einzelheiten einer zugrunde liegenden Bericht <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> Ereignis, das ein angefügtes Ereignis handelt, die von jedem Element ein Ereignisroute verarbeitet wird.</target>       </trans-unit>
        <trans-unit id="2244" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonDown">
          <source>The arguments of this event expose the arguments of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">Die Argumente für dieses Ereignis verfügbar machen, die Argumente des zugrunde liegenden <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> Ereignis.</target>       </trans-unit>
        <trans-unit id="2245" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonDown">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">Wenn das Ereignis als behandelt der Ereignisroute markiert ist, werden die Maustaste los spezifischen Ereignisse dennoch ausgelöst; Allerdings müssen Handler bestimmter Ereignisse an die Schaltflächen hinzugefügt werden, durch explizites Aufrufen <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, mit der Option zum Behandeln von Ereignissen, die bereits als behandelt markiert werden, damit Listener des Ereignisses ist.</target>       </trans-unit>
        <trans-unit id="2246" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonDown">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
          <target state="translated">Konzeptionell kann dieses Ereignis (und andere los Ereignisse auf <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) eine Maus "Service" sein (mit der Definition des Diensts bereitgestellt werden, indem die <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> Klasse).</target>       </trans-unit>
        <trans-unit id="2247" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonDown">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">Das Ereignis fügt den Komfort, überprüfen Sie die Maus Schaltflächenzuständen (linke Ecke, nach oben und unten) von der ursprünglichen Mausereignisse in Daten für das Ereignis nicht belegen.</target>       </trans-unit>
        <trans-unit id="2248" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonDown">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">Erweiterte Szenarien, z. B. das Überprüfen von Zuständen von nicht standardmäßigen Schaltflächen, müssen Sie möglicherweise mit der <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> auf die <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> -Klasse anstelle der für <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2249" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonDown">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2250" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonDown">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2251" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonDown">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2252" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonDown">
          <source>Direct</source>
          <target state="translated">Direkt</target>       </trans-unit>
        <trans-unit id="2253" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonDown">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2254" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2255" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2256" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2257" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2258" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2259" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2260" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2261" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonUp">
          <source>Occurs when the right mouse button is released while the mouse pointer is over this element.</source>
          <target state="translated">Tritt auf, wenn die rechte Maustaste losgelassen wird, während sich der Mauszeiger über diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="2262" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonUp">
          <source>Although this <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">Obwohl dies <bpt id="p1">[</bpt>Ereignisübersicht weitergeleitet<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> scheint eine Tunneling-Route durch eine Elementstruktur, führen es tatsächlich ist eine direkte Routingereignis, das ausgelöst wird, und die Elementstruktur nach jedem erneut <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2263" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonUp">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">Dieses Ereignis ist eine der mehrere verwandte Ereignisse, die die Schaltflächen Einzelheiten einer zugrunde liegenden Bericht <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> Ereignis, das ein angefügtes Ereignis handelt, die von jedem Element ein Ereignisroute verarbeitet wird.</target>       </trans-unit>
        <trans-unit id="2264" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonUp">
          <source>The arguments of this event expose the arguments of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">Die Argumente für dieses Ereignis verfügbar machen, die Argumente des zugrunde liegenden <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> Ereignis.</target>       </trans-unit>
        <trans-unit id="2265" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonUp">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">Wenn das Ereignis als behandelt der Ereignisroute markiert ist, werden die Maustaste los spezifischen Ereignisse dennoch ausgelöst; Allerdings müssen Handler bestimmter Ereignisse an die Schaltflächen hinzugefügt werden, durch explizites Aufrufen <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, mit der Option zum Behandeln von Ereignissen, die bereits als behandelt markiert werden, damit Listener des Ereignisses ist.</target>       </trans-unit>
        <trans-unit id="2266" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonUp">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
          <target state="translated">Konzeptionell kann dieses Ereignis (und andere los Ereignisse auf <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) eine Maus "Service" sein (mit der Definition des Diensts bereitgestellt werden, indem die <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> Klasse).</target>       </trans-unit>
        <trans-unit id="2267" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonUp">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">Das Ereignis fügt den Komfort, überprüfen Sie die Maus Schaltflächenzuständen (linke Ecke, nach oben und unten) von der ursprünglichen Mausereignisse in Daten für das Ereignis nicht belegen.</target>       </trans-unit>
        <trans-unit id="2268" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonUp">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">Erweiterte Szenarien, z. B. das Überprüfen von Zuständen von nicht standardmäßigen Schaltflächen, müssen Sie möglicherweise mit der <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> auf die <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> -Klasse anstelle der für <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2269" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonUp">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2270" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonUp">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2271" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonUp">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2272" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonUp">
          <source>Direct</source>
          <target state="translated">Direkt</target>       </trans-unit>
        <trans-unit id="2273" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonUp">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2274" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2275" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2276" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2277" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2278" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2279" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2280" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2281" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewMouseUp">
          <source>Occurs when any mouse button is released while the mouse pointer is over this element.</source>
          <target state="translated">Tritt auf, wenn eine Maustaste losgelassen wird, während sich der Mauszeiger über diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="2282" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseUp">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseUp&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2283" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseUp">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseUp&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2284" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseUp">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseUp&gt;</ph> event is often raised together with either <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph>, which correspond to a press of one of the two standard mouse buttons.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseUp&gt;</ph> Ereignis wird häufig zusammen mit entweder <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> oder <ph id="ph3">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph>, das Drücken einer der beiden standard Maustasten entsprechen.</target>       </trans-unit>
        <trans-unit id="2285" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseUp">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> event reaches this element along the event route.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> und <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph> sind auch Routingereignisse, aber sie sind direkte Routingereignisse und die entsprechende Schaltfläche-spezifische-Ereignis wird ausgelöst, wenn die <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> -Ereignis dieses Element auf der Ereignisroute erreicht.</target>       </trans-unit>
        <trans-unit id="2286" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseUp">
          <source>See Remarks for <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph>.</source>
          <target state="translated">Finden Sie unter "Hinweise" für <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> oder <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2287" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseUp">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2288" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseUp">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2289" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseUp">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2290" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseUp">
          <source>Tunneling</source>
          <target state="translated">Tunneling</target>       </trans-unit>
        <trans-unit id="2291" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseUp">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2292" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseUp">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseUp&gt;</ph>.</source>
          <target state="translated">Das entsprechende bubbling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseUp&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2293" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseUp%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2294" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewMouseUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseUp" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseUp" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2295" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2296" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2297" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2298" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2299" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2300" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewMouseWheel">
          <source>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</source>
          <target state="translated">Tritt auf, wenn der Benutzer das Mausrad dreht, während sich der Mauszeiger über diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="2301" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseWheel">
          <source>Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive this event from a focused or captured element, the mouse pointer might actually be over another element.</source>
          <target state="translated">Fokus oder die Maus erfasst haben Vorrang vor, in dem der Mauszeiger befindet; Deshalb, wenn Sie dieses Ereignis von einem Element fokussierte oder erfasste erhalten, möglicherweise der Mauszeiger über einem anderen Element nicht.</target>       </trans-unit>
        <trans-unit id="2302" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseWheel">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2303" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseWheel">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2304" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseWheel">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2305" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseWheel">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2306" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseWheel">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2307" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseWheel">
          <source>Tunneling</source>
          <target state="translated">Tunneling</target>       </trans-unit>
        <trans-unit id="2308" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseWheel">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2309" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseWheel">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseWheel&gt;</ph>.</source>
          <target state="translated">Das entsprechende bubbling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseWheel&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2310" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseWheel">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseWheel%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseWheel%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2311" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewMouseWheelEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseWheel" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseWheel" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2312" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseWheelEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2313" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseWheelEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2314" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseWheelEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2315" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseWheelEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2316" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseWheelEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2317" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewQueryContinueDrag">
          <source>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</source>
          <target state="translated">Tritt auf, wenn sich der Status der Tastatur oder der Maustaste während eines Drag &amp; Drop-Vorgangs ändert.</target>       </trans-unit>
        <trans-unit id="2318" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewQueryContinueDrag">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewQueryContinueDrag&gt;</ph> event enables the drag source to declare whether the drag-and-drop operation should be canceled.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewQueryContinueDrag&gt;</ph> Ereignis ermöglicht der Ziehquelle deklarieren, ob der Drag-and-Drop-Vorgang abgebrochen werden soll.</target>       </trans-unit>
        <trans-unit id="2319" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewQueryContinueDrag">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewQueryContinueDrag&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewQueryContinueDrag&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2320" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewQueryContinueDrag">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewQueryContinueDrag&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewQueryContinueDrag&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2321" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewQueryContinueDrag">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2322" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewQueryContinueDrag">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2323" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewQueryContinueDrag">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2324" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewQueryContinueDrag">
          <source>Tunneling</source>
          <target state="translated">Tunneling</target>       </trans-unit>
        <trans-unit id="2325" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewQueryContinueDrag">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2326" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewQueryContinueDrag">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryContinueDrag&gt;</ph>.</source>
          <target state="translated">Das entsprechende bubbling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryContinueDrag&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2327" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewQueryContinueDrag">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewQueryContinueDrag%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewQueryContinueDrag%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2328" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewQueryContinueDragEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewQueryContinueDrag" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewQueryContinueDrag" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2329" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewQueryContinueDragEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2330" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewQueryContinueDragEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2331" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewQueryContinueDragEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2332" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewQueryContinueDragEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2333" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewQueryContinueDragEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2334" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewStylusButtonDown">
          <source>Occurs when the stylus button is pressed while the pointer is over this element.</source>
          <target state="translated">Tritt auf, wenn die Stifttaste gedrückt wird, während sich der Zeiger über diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="2335" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonDown">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonDown&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2336" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonDown">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonDown&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2337" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonDown">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein.</target>       </trans-unit>
        <trans-unit id="2338" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonDown">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="2339" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonDown">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2340" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonDown">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2341" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonDown">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2342" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonDown">
          <source>Tunneling</source>
          <target state="translated">Tunneling</target>       </trans-unit>
        <trans-unit id="2343" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonDown">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2344" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonDown">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusButtonDown&gt;</ph>.</source>
          <target state="translated">Das entsprechende bubbling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusButtonDown&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2345" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusButtonDown%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2346" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewStylusButtonDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2347" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusButtonDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2348" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusButtonDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2349" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusButtonDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2350" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusButtonDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2351" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusButtonDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2352" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewStylusButtonUp">
          <source>Occurs when the stylus button is released while the pointer is over this element.</source>
          <target state="translated">Tritt auf, wenn die Stifttaste losgelassen wird, während sich der Zeiger über diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="2353" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonUp">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonUp&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2354" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonUp">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonUp&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2355" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonUp">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein.</target>       </trans-unit>
        <trans-unit id="2356" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonUp">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="2357" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonUp">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2358" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonUp">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2359" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonUp">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2360" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonUp">
          <source>Tunneling</source>
          <target state="translated">Tunneling</target>       </trans-unit>
        <trans-unit id="2361" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonUp">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2362" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonUp">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusButtonUp&gt;</ph>.</source>
          <target state="translated">Das entsprechende bubbling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusButtonUp&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2363" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusButtonUp%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2364" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewStylusButtonUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2365" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusButtonUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2366" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusButtonUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2367" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusButtonUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2368" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusButtonUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2369" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusButtonUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2370" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewStylusDown">
          <source>Occurs when the stylus touches the digitizer while it is over this element.</source>
          <target state="translated">Tritt auf, wenn der Stift den Digitizer berührt, während dieser sich über diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="2371" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusDown">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2372" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusDown">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2373" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusDown">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein.</target>       </trans-unit>
        <trans-unit id="2374" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusDown">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="2375" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusDown">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2376" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusDown">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2377" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusDown">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2378" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusDown">
          <source>Tunneling</source>
          <target state="translated">Tunneling</target>       </trans-unit>
        <trans-unit id="2379" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusDown">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2380" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusDown">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusDown&gt;</ph>.</source>
          <target state="translated">Das entsprechende bubbling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusDown&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2381" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusDown%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2382" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewStylusDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusDown" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusDown" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2383" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2384" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2385" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2386" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2387" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2388" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewStylusInAirMove">
          <source>Occurs when the stylus moves over an element without actually touching the digitizer.</source>
          <target state="translated">Tritt auf, wenn der Stift über ein Element bewegt wird, ohne den Digitizer zu berühren.</target>       </trans-unit>
        <trans-unit id="2389" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInAirMove">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusInAirMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusInAirMove&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2390" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInAirMove">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusInAirMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusInAirMove&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2391" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInAirMove">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein.</target>       </trans-unit>
        <trans-unit id="2392" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInAirMove">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="2393" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInAirMove">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2394" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInAirMove">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2395" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInAirMove">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2396" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInAirMove">
          <source>Tunneling</source>
          <target state="translated">Tunneling</target>       </trans-unit>
        <trans-unit id="2397" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInAirMove">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2398" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInAirMove">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusInAirMove&gt;</ph>.</source>
          <target state="translated">Das entsprechende bubbling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusInAirMove&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2399" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInAirMove">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusInAirMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusInAirMove%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2400" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewStylusInAirMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2401" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusInAirMoveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2402" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusInAirMoveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2403" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusInAirMoveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2404" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusInAirMoveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2405" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusInAirMoveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2406" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewStylusInRange">
          <source>Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</source>
          <target state="translated">Tritt auf, wenn sich der Tablettstift nah genug am Digitizer befindet, um erkannt zu werden, während er sich über diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="2407" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInRange">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusInRange&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusInRange&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2408" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInRange">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusInRange&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusInRange&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2409" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInRange">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein.</target>       </trans-unit>
        <trans-unit id="2410" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInRange">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="2411" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInRange">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2412" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInRange">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2413" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInRange">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2414" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInRange">
          <source>Tunneling</source>
          <target state="translated">Tunneling</target>       </trans-unit>
        <trans-unit id="2415" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInRange">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2416" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInRange">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusInRange&gt;</ph>.</source>
          <target state="translated">Das entsprechende bubbling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusInRange&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2417" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInRange">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusInRange%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusInRange%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2418" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewStylusInRangeEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusInRange" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusInRange" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2419" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusInRangeEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2420" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusInRangeEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2421" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusInRangeEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2422" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusInRangeEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2423" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusInRangeEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2424" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewStylusMove">
          <source>Occurs when the stylus moves while over the element.</source>
          <target state="translated">Tritt auf, wenn der Tablettstift bewegt wird, während er sich über dem Element befindet.</target>       </trans-unit>
        <trans-unit id="2425" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewStylusMove">
          <source>The stylus must move while being detected by the  digitizer  to raise this event, otherwise, <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" /&gt;</ph> is raised instead.</source>
          <target state="translated">Der Tablettstift muss während der Erkennung durch den Digitizer bewegt werden, damit dieses Ereignis ausgelöst wird, andernfalls wird stattdessen <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" /&gt;</ph> ausgelöst.</target>       </trans-unit>
        <trans-unit id="2426" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusMove">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusMove&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2427" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusMove">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusMove&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2428" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusMove">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein.</target>       </trans-unit>
        <trans-unit id="2429" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusMove">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="2430" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusMove">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2431" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusMove">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2432" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusMove">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2433" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusMove">
          <source>Tunneling</source>
          <target state="translated">Tunneling</target>       </trans-unit>
        <trans-unit id="2434" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusMove">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2435" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusMove">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusMove&gt;</ph>.</source>
          <target state="translated">Das entsprechende bubbling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusMove&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2436" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusMove">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusMove%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2437" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewStylusMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusMove" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusMove" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2438" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusMoveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2439" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusMoveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2440" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusMoveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2441" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusMoveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2442" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusMoveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2443" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewStylusOutOfRange">
          <source>Occurs when the stylus is too far from the digitizer to be detected.</source>
          <target state="translated">Tritt auf, wenn sich der Stift zu weit vom Digitizer entfernt befindet, um erkannt zu werden.</target>       </trans-unit>
        <trans-unit id="2444" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusOutOfRange">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusOutOfRange&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusOutOfRange&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2445" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusOutOfRange">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusOutOfRange&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusOutOfRange&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2446" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusOutOfRange">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein.</target>       </trans-unit>
        <trans-unit id="2447" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusOutOfRange">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="2448" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusOutOfRange">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2449" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusOutOfRange">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2450" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusOutOfRange">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2451" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusOutOfRange">
          <source>Tunneling</source>
          <target state="translated">Tunneling</target>       </trans-unit>
        <trans-unit id="2452" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusOutOfRange">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2453" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusOutOfRange">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusOutOfRange&gt;</ph>.</source>
          <target state="translated">Das entsprechende bubbling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusOutOfRange&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2454" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusOutOfRange">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusOutOfRange%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusOutOfRange%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2455" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusOutOfRange" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusOutOfRange" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2456" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2457" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2458" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2459" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2460" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2461" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewStylusSystemGesture">
          <source>Occurs when a user performs one of several stylus gestures.</source>
          <target state="translated">Tritt auf, wenn ein Benutzer eine von mehreren Gesten ausführt.</target>       </trans-unit>
        <trans-unit id="2462" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusSystemGesture">
          <source>For information about stylus gestures, see <ph id="ph1">&lt;xref:System.Windows.Input.SystemGesture&gt;</ph>.</source>
          <target state="translated">Weitere Informationen zu Gesten, finden Sie unter <ph id="ph1">&lt;xref:System.Windows.Input.SystemGesture&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2463" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusSystemGesture">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusSystemGesture&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusSystemGesture&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2464" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusSystemGesture">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusSystemGesture&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusSystemGesture&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2465" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusSystemGesture">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein.</target>       </trans-unit>
        <trans-unit id="2466" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusSystemGesture">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="2467" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusSystemGesture">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2468" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusSystemGesture">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2469" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusSystemGesture">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2470" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusSystemGesture">
          <source>Tunneling</source>
          <target state="translated">Tunneling</target>       </trans-unit>
        <trans-unit id="2471" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusSystemGesture">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2472" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusSystemGesture">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusSystemGesture&gt;</ph>.</source>
          <target state="translated">Das entsprechende bubbling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusSystemGesture&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2473" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusSystemGesture">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusSystemGesture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusSystemGesture%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2474" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewStylusSystemGestureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusSystemGesture" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusSystemGesture" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2475" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusSystemGestureEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2476" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusSystemGestureEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2477" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusSystemGestureEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2478" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusSystemGestureEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2479" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusSystemGestureEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2480" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewStylusUp">
          <source>Occurs when the user raises the stylus off the digitizer while the stylus is over this element.</source>
          <target state="translated">Tritt auf, wenn der Benutzer den Tablettstift vom Digitizer hebt, während er sich über diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="2481" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusUp">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2482" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusUp">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2483" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusUp">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein.</target>       </trans-unit>
        <trans-unit id="2484" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusUp">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="2485" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusUp">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2486" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusUp">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2487" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusUp">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2488" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusUp">
          <source>Tunneling</source>
          <target state="translated">Tunneling</target>       </trans-unit>
        <trans-unit id="2489" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusUp">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2490" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusUp">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusUp&gt;</ph>.</source>
          <target state="translated">Das entsprechende bubbling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusUp&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2491" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusUp%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2492" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewStylusUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusUp" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusUp" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2493" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2494" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2495" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2496" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2497" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2498" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewTextInput">
          <source>Occurs when this element gets text in a device-independent manner.</source>
          <target state="translated">Tritt auf, wenn dieses Element Text geräteunabhängig empfängt.</target>       </trans-unit>
        <trans-unit id="2499" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTextInput">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph> event allows a component or application to listen for text input in a device-independent manner.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph> Ereignis ermöglicht, eine Komponente oder Anwendung, die für die Texteingabe in einem geräteunabhängig empfängt überwachen.</target>       </trans-unit>
        <trans-unit id="2500" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTextInput">
          <source>The keyboard is the primary means of <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph>; but speech, handwriting, and other input devices can also generate <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph>.</source>
          <target state="translated">Die Tastatur ist das primäre Mittel <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph>; Sprache, Handschrift und andere Eingabegeräte können jedoch auch generieren <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2501" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTextInput">
          <source>Because of key combinations—either in default keyboards or through input method editors—multiple key events may raise just one text input event.</source>
          <target state="translated">Aufgrund von Tastenkombinationen – entweder in der Standardeinstellung Tastaturen oder über den Eingabemethoden-Editoren – mehrere wichtige Ereignisse können nur ein Text-Eingabeereignis auslösen.</target>       </trans-unit>
        <trans-unit id="2502" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTextInput">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2503" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTextInput">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2504" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTextInput">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2505" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTextInput">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2506" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTextInput">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2507" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTextInput">
          <source>Tunneling</source>
          <target state="translated">Tunneling</target>       </trans-unit>
        <trans-unit id="2508" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTextInput">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2509" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTextInput">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph>.</source>
          <target state="translated">Das entsprechende bubbling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2510" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTextInput">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTextInput%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTextInput%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2511" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewTextInputEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewTextInput" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewTextInput" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2512" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewTextInputEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2513" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewTextInputEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2514" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewTextInputEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2515" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewTextInputEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2516" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewTextInputEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2517" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewTouchDown">
          <source>Occurs when a finger touches the screen while the finger is over this element.</source>
          <target state="translated">Tritt auf, wenn ein Finger den Bildschirm berührt und sich dieser über diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="2518" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchDown">
          <source>By default, the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph> events do not occur until a finger touches the screen and moves.</source>
          <target state="translated">Wird standardmäßig die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph> und <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph> Ereignisse werden nicht ausgeführt, bis ein Finger den Bildschirm berührt und verschiebt.</target>       </trans-unit>
        <trans-unit id="2519" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchDown">
          <source>Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <ph id="ph1">&lt;xref:System.Windows.Input.Stylus&gt;</ph>.</source>
          <target state="translated">Einen Finger auf dem Bildschirm drücken und gedrückt halten, ohne diesen zu bewegen dadurch drücken Sie dann aus, und halten Sie Verhalten einer <ph id="ph1">&lt;xref:System.Windows.Input.Stylus&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2520" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchDown">
          <source>The press and hold behavior is equivalent to a mouse right-click.</source>
          <target state="translated">Das Gedrückthalteverhalten ist gleichbedeutend mit der Maustaste.</target>       </trans-unit>
        <trans-unit id="2521" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchDown">
          <source>To cause the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph> events to occur as soon as a finger touches the screen, set the <ph id="ph3">&lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType&gt;</ph> attached property to <ph id="ph4">`false`</ph> for this element.</source>
          <target state="translated">Zu bewirken, dass die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph> und <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph> Festlegen von Ereignissen, die als ein Finger den Bildschirm berührt die <ph id="ph3">&lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType&gt;</ph> angefügten Eigenschaft, um <ph id="ph4">`false`</ph> für dieses Element.</target>       </trans-unit>
        <trans-unit id="2522" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchDown">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2523" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchDown">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2524" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchDown">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2525" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchDown">
          <source>Tunneling</source>
          <target state="translated">Tunneling</target>       </trans-unit>
        <trans-unit id="2526" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchDown">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2527" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchDown">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated">Eine <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> vom Typ <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2528" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchDown">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph>.</source>
          <target state="translated">Das entsprechende bubbling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2529" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchDown%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2530" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewTouchDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewTouchDown" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewTouchDown" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2531" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewTouchMove">
          <source>Occurs when a finger moves on the screen while the finger is over this element.</source>
          <target state="translated">Tritt auf, wenn sich ein Finger auf dem Bildschirm bewegt, während sich der Finger über diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="2532" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchMove">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2533" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchMove">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2534" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchMove">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2535" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchMove">
          <source>Tunneling</source>
          <target state="translated">Tunneling</target>       </trans-unit>
        <trans-unit id="2536" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchMove">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2537" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchMove">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated">Eine <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> vom Typ <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2538" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchMove">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.TouchMove&gt;</ph>.</source>
          <target state="translated">Das entsprechende bubbling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.TouchMove&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2539" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchMove">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchMove%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2540" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewTouchMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewTouchMove" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewTouchMove" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2541" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewTouchUp">
          <source>Occurs when a finger is raised off of the screen while the finger is over this element.</source>
          <target state="translated">Tritt auf, wenn ein Finger vom Bildschirm genommen wird, während sich der Finger über diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="2542" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchUp">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2543" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchUp">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2544" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchUp">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2545" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchUp">
          <source>Tunneling</source>
          <target state="translated">Tunneling</target>       </trans-unit>
        <trans-unit id="2546" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchUp">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2547" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchUp">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated">Eine <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> vom Typ <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2548" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchUp">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.TouchUp&gt;</ph>.</source>
          <target state="translated">Das entsprechende bubbling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.TouchUp&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2549" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchUp%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2550" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewTouchUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewTouchUp" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewTouchUp" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2551" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.QueryContinueDrag">
          <source>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</source>
          <target state="translated">Tritt auf, wenn sich der Status der Tastatur oder der Maustaste während eines Drag &amp; Drop-Vorgangs ändert.</target>       </trans-unit>
        <trans-unit id="2552" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryContinueDrag">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryContinueDrag&gt;</ph> event enables the drag source to determine whether the drag-and-drop operation should be canceled.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryContinueDrag&gt;</ph> Ereignis ermöglicht die Quelle des Ziehvorgangs bestimmen, ob der Drag-and-Drop-Vorgang abgebrochen werden soll.</target>       </trans-unit>
        <trans-unit id="2553" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryContinueDrag">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.QueryContinueDrag&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.QueryContinueDrag&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2554" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryContinueDrag">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryContinueDrag&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryContinueDrag&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2555" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryContinueDrag">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2556" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryContinueDrag">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2557" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryContinueDrag">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2558" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryContinueDrag">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="2559" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryContinueDrag">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2560" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryContinueDrag">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewQueryContinueDrag&gt;</ph>.</source>
          <target state="translated">Das entsprechende Tunneling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewQueryContinueDrag&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2561" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryContinueDrag">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnQueryContinueDrag%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnQueryContinueDrag%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2562" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.QueryContinueDragEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.QueryContinueDrag" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.QueryContinueDrag" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2563" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.QueryContinueDragEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2564" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.QueryContinueDragEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2565" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.QueryContinueDragEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2566" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.QueryContinueDragEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2567" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.QueryContinueDragEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2568" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>Occurs when the cursor is requested to display.</source>
          <target state="translated">Tritt auf, wenn die Anzeige des Cursors angefordert wird.</target>       </trans-unit>
        <trans-unit id="2569" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position.</source>
          <target state="translated">Dieses Ereignis wird immer dann für ein Element ausgelöst, wenn der Mauszeiger an eine neue Position bewegt wird, d  h., das Cursorobjekt muss möglicherweise in Abhängigkeit von seiner neuen Position geändert werden.</target>       </trans-unit>
        <trans-unit id="2570" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.QueryCursor&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.QueryCursor&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2571" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryCursor&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryCursor&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2572" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>The cursor being referred to by this event name is not necessarily the text cursor (sometimes known as the insertion point).</source>
          <target state="translated">Der Cursor, die mit diesem Ereignisnamen verwiesen wird, ist nicht notwendigerweise der Textcursor (auch als Einfügemarke bezeichnet).</target>       </trans-unit>
        <trans-unit id="2573" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>Instead, the cursor in this context is the object that declares the onscreen graphical display related to several possible input-related devices or concepts in <ph id="ph1">[!INCLUDE[TLA2#tla_win](~/includes/tla2sharptla-win-md.md)]</ph> programming.</source>
          <target state="translated">Der Cursor in diesem Kontext wird stattdessen das Objekt, das die auf dem Bildschirm grafisch dargestellt, die im Zusammenhang mit mehreren möglichen Eingabe-bezogene Geräte oder Konzepte in deklariert <ph id="ph1">[!INCLUDE[TLA2#tla_win](~/includes/tla2sharptla-win-md.md)]</ph> programmieren.</target>       </trans-unit>
        <trans-unit id="2574" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>That object is represented by the <ph id="ph1">&lt;xref:System.Windows.Input.Cursor&gt;</ph> class in <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>.</source>
          <target state="translated">Dieses Objekt wird dargestellt, indem die <ph id="ph1">&lt;xref:System.Windows.Input.Cursor&gt;</ph> in Klasse <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="2575" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> input system enables you to change this cursor when it represents the onscreen position of the mouse pointer.</source>
          <target state="translated">Die <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> Eingabesystem ermöglicht es Ihnen, die diesen Cursor zu ändern, wenn sie die auf dem Bildschirm Position des Mauszeigers darstellt.</target>       </trans-unit>
        <trans-unit id="2576" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>You can use predefined values from the <ph id="ph1">&lt;xref:System.Windows.Input.Cursors&gt;</ph> enumeration, or you can declare a custom cursor as an image file.</source>
          <target state="translated">Sie können vordefinierte Werte aus der <ph id="ph1">&lt;xref:System.Windows.Input.Cursors&gt;</ph> -Enumeration, oder Sie können einen benutzerdefinierten Cursor als Bilddatei deklarieren.</target>       </trans-unit>
        <trans-unit id="2577" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>Listening for the <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryCursor&gt;</ph> event is not an efficient technique for cursor management.</source>
          <target state="translated">Überwacht die <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryCursor&gt;</ph> Ereignis ist für eine effiziente Technik für die Verwaltung der Cursor nicht.</target>       </trans-unit>
        <trans-unit id="2578" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>Instead, each element should define its own cursor behavior with <ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement.Cursor%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement.ForceCursor%2A&gt;</ph>.</source>
          <target state="translated">Stattdessen sollten jedes Element mit einem eigenen Cursorverhalten definieren <ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement.Cursor%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement.ForceCursor%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2579" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>You should only rely on <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryCursor&gt;</ph> if you are not using the WPF framework-level base elements, or in extraordinary circumstances where defining cursor behavior on a per-element basis does not meet your needs.</source>
          <target state="translated">Sie sollten nur auf verlassen <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryCursor&gt;</ph> Wenn Sie die WPF-Frameworkebene Basiselemente nicht verwenden oder in außergewöhnlicher Umstände, in dem Definieren des Cursorverhaltens regelmäßig pro Element nicht Ihren Anforderungen entspricht.</target>       </trans-unit>
        <trans-unit id="2580" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>For more information on implementing cursor behavior in response to <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryCursor&gt;</ph>, see <ph id="ph2">&lt;xref:System.Windows.Input.QueryCursorEventHandler&gt;</ph>.</source>
          <target state="translated">Weitere Informationen zum Implementieren von Cursorverhalten als Antwort auf <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryCursor&gt;</ph>, finden Sie unter <ph id="ph2">&lt;xref:System.Windows.Input.QueryCursorEventHandler&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2581" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2582" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2583" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2584" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="2585" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2586" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>There is no defined corresponding tunneling event.</source>
          <target state="translated">Es gibt keine definiertes entsprechendes Tunneling-Ereignis.</target>       </trans-unit>
        <trans-unit id="2587" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnQueryCursor%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnQueryCursor%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2588" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.QueryCursorEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.QueryCursor" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.QueryCursor" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2589" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.QueryCursorEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2590" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.QueryCursorEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2591" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.QueryCursorEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2592" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.QueryCursorEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2593" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.QueryCursorEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2594" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph> that contains the event data and also identifies the event to raise.</source>
          <target state="translated">Eine Instanz von <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph>, die die Ereignisdaten enthält und zudem das auszulösende Ereignis angibt.</target>       </trans-unit>
        <trans-unit id="2595" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)">
          <source>Raises a specific routed event.</source>
          <target state="translated">Löst ein bestimmtes Routingereignis aus.</target>       </trans-unit>
        <trans-unit id="2596" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEvent" /&gt;</ph> to be raised is identified within the <ph id="ph2">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph> instance that is provided (as the <ph id="ph3">&lt;see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /&gt;</ph> property of that event data).</source>
          <target state="translated">Das auszulösende <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEvent" /&gt;</ph> wird in der <ph id="ph2">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph>-Instanz bestimmt, die als <ph id="ph3">&lt;see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /&gt;</ph>-Eigenschaft für diese Ereignisdaten bereitgestellt wird.</target>       </trans-unit>
        <trans-unit id="2597" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)">
          <source>The <ph id="ph1">`e`</ph> parameter is typed as the common base type for all routed event data; however, the event data should be given as the most specific event data type that is available for the event being raised, because <ph id="ph2">&lt;xref:System.Windows.RoutedEventArgs&gt;</ph> derived classes contain the actual specific data properties that are intended for the specific event when it is raised.</source>
          <target state="translated">Die <ph id="ph1">`e`</ph> Parameter typisiert ist, als das allgemeine Basistyp für alle Routingereignisdaten; allerdings sollte die Ereignisdaten zugewiesen werden, als die spezifischste Ereignis-Datentyp, der für das Ereignis ausgelöst wird, verfügbar ist, da <ph id="ph2">&lt;xref:System.Windows.RoutedEventArgs&gt;</ph> abgeleitete Klassen enthalten die tatsächliche Daten-Eigenschaften, die vorgesehen sind, für das spezifische Ereignis, wenn es ausgelöst wird.</target>       </trans-unit>
        <trans-unit id="2598" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs&gt;</ph> is not just the state properties for the event; it also identifies which routed event to raise.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs&gt;</ph> ist nicht nur in die Eigenschaften des Ereignisses. Außerdem ermittelt es für die Routingereignis ausgelöst werden soll.</target>       </trans-unit>
        <trans-unit id="2599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)">
          <source>This event-raising pattern and the routed event data both differ from <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> events and data classes, which typically just contain properties that are related to the event.</source>
          <target state="translated">Dieses Ereignis auslösen Muster und die Routingereignisdaten unterscheiden sich von <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> Ereignisse und Klassen, die in der Regel nur die Eigenschaften enthalten, die mit dem Ereignis verknüpft sind.</target>       </trans-unit>
        <trans-unit id="2600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)">
          <source>The following example creates event data, appends the event identifier to the data, and then uses the event data instance to raise a custom routed event.</source>
          <target state="translated">Im folgende Beispiel Ereignisdaten erstellt, fügt den Ereignisbezeichner an die Daten und verwendet dann die Ereignisdateninstanz ein benutzerdefiniertes Routingereignis ausgelöst werden soll.</target>       </trans-unit>
        <trans-unit id="2601" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ReleaseAllTouchCaptures">
          <source>Releases all captured touch devices from this element.</source>
          <target state="translated">Gibt alle erfassten Fingereingabegeräte für das Element frei.</target>       </trans-unit>
        <trans-unit id="2602" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ReleaseMouseCapture">
          <source>Releases the mouse capture, if this element held the capture.</source>
          <target state="translated">Gibt die Erfassung von Mauseingaben frei, wenn für dieses Element die Erfassung festgelegt war.</target>       </trans-unit>
        <trans-unit id="2603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ReleaseMouseCapture">
          <source>If this element did not hold the capture, calling this method has no effect.</source>
          <target state="translated">Wenn dieses Element die Sammlung nicht vorhanden war, hat das Aufrufen dieser Methode keine Auswirkung.</target>       </trans-unit>
        <trans-unit id="2604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ReleaseMouseCapture">
          <source>Consider checking the value of <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseCaptured%2A&gt;</ph> before you call this method.</source>
          <target state="translated">Überprüfen Sie den Wert des <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseCaptured%2A&gt;</ph> vor dem Aufrufen dieser Methode.</target>       </trans-unit>
        <trans-unit id="2605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ReleaseMouseCapture">
          <source>The following handler captures or releases mouse capture according to mouse button states.</source>
          <target state="translated">Die folgende Ereignishandler erfasst oder Mauseingaben aufzufangen entsprechend Maus Schaltflächenzuständen frei.</target>       </trans-unit>
        <trans-unit id="2606" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ReleaseMouseCapture">
          <source>The example shows how to use captured mouse movement for alternative purposes other than moving the mouse pointer in the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph>.</source>
          <target state="translated">Im Beispiel veranschaulicht die erfassten mausbewegungen für Alternative außer Bewegen des Mauszeigers Zwecke verwenden, die die <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="2607" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ReleaseStylusCapture">
          <source>Releases the stylus device capture, if this element held the capture.</source>
          <target state="translated">Gibt das Erfassen der Eingaben von Tablettstiftgeräten frei, wenn für dieses Element die Erfassung festgelegt war.</target>       </trans-unit>
        <trans-unit id="2608" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ReleaseStylusCapture">
          <source>If this element did not hold the capture, calling this method has no effect.</source>
          <target state="translated">Wenn dieses Element die Sammlung nicht vorhanden war, hat das Aufrufen dieser Methode keine Auswirkung.</target>       </trans-unit>
        <trans-unit id="2609" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ReleaseStylusCapture">
          <source>Consider checking the value of <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusCaptured%2A&gt;</ph> before you call this method.</source>
          <target state="translated">Überprüfen Sie den Wert des <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusCaptured%2A&gt;</ph> vor dem Aufrufen dieser Methode.</target>       </trans-unit>
        <trans-unit id="2610" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)">
          <source>The device to release.</source>
          <target state="translated">Das freizugebende Gerät.</target>       </trans-unit>
        <trans-unit id="2611" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)">
          <source>Attempts to release the specified touch device from this element.</source>
          <target state="translated">Versucht, das angegebene Fingereingabegerät von diesem Element freizugeben.</target>       </trans-unit>
        <trans-unit id="2612" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the touch device is released; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn das Fingereingabegerät freigegeben wurde, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2613" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)">
          <source><ph id="ph1">&lt;paramref name="touchDevice" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="touchDevice" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2614" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>The identifier of the.routed event for which the handler is attached.</source>
          <target state="translated">Der Bezeichner des Routingereignisses, dem der Handler angefügt ist.</target>       </trans-unit>
        <trans-unit id="2615" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>The specific handler implementation to remove from the event handler collection on this element.</source>
          <target state="translated">Die spezifische Handlerimplementierung, die aus der Ereignishandlerauflistung dieses Elements entfernt werden soll.</target>       </trans-unit>
        <trans-unit id="2616" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>Removes the specified routed event handler from this element.</source>
          <target state="translated">Entfernt den angegebenen Routingereignishandler aus diesem Element.</target>       </trans-unit>
        <trans-unit id="2617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>The most common scenario for using this <ph id="ph1">[!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)]</ph> is when you implement the <ph id="ph2">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> "wrapper" event that is associated with a custom routed event, specifically when you implement the "remove" logic for handlers at the <ph id="ph3">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> level.</source>
          <target state="translated">Das häufigste Szenario für die Verwendung dieser <ph id="ph1">[!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)]</ph> wird bei der Implementierung der <ph id="ph2">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> "Wrapper"-Ereignis, das bezieht sich auf ein benutzerdefiniertes Routingereignis, insbesondere beim Implementieren der "Remove"-Logik für Handler, an die <ph id="ph3">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> Ebene.</target>       </trans-unit>
        <trans-unit id="2618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>The example that follows this remarks section illustrates this scenario.</source>
          <target state="translated">Das folgenden Beispiel Abschnitt veranschaulicht dieses Szenario "Hinweise".</target>       </trans-unit>
        <trans-unit id="2619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>Calling this method has no effect if there were no handlers registered with criteria that match the input parameters for the method call.</source>
          <target state="translated">Beim Aufrufen dieser Methode hat keine Auswirkungen, gäbe es keine Handler registriert mit Kriterien, die die Eingabeparameter für den Methodenaufruf entsprechen.</target>       </trans-unit>
        <trans-unit id="2620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>If more than one handler is attached that matched the criteria, only the first handler in the event handler store is removed.</source>
          <target state="translated">Wenn mehr als ein Ereignishandler angefügt ist, die den abonnementkriterien, nur der erste Handler im Ereignisprotokoll Handler Store entfernt wird.</target>       </trans-unit>
        <trans-unit id="2621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>This behavior is consistent with <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> behavior of the <ph id="ph2">`-=`</ph> operator.</source>
          <target state="translated">Dieses Verhalten ist konsistent mit <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> Verhalten der <ph id="ph2">`-=`</ph> Operator.</target>       </trans-unit>
        <trans-unit id="2622" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>Neither <ph id="ph1">`routedEvent`</ph> nor <ph id="ph2">`handler`</ph> may be <ph id="ph3">`null`</ph>.</source>
          <target state="translated">Weder <ph id="ph1">`routedEvent`</ph> noch <ph id="ph2">`handler`</ph> möglicherweise <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="2623" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>Attempting to provide either value as <ph id="ph1">`null`</ph> will raise an exception.</source>
          <target state="translated">Bei dem Versuch, einen der Werte <ph id="ph1">`null`</ph> wird eine Ausnahme ausgelöst.</target>       </trans-unit>
        <trans-unit id="2624" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>This method ignores the <ph id="ph1">`handledEventsToo`</ph> parameter information, which is provided if the handler was first added with the <ph id="ph2">&lt;xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature that enables handling of already-handled events.</source>
          <target state="translated">Diese Methode ignoriert die <ph id="ph1">`handledEventsToo`</ph> Parameterinformationen, das bereitgestellt wird, wenn der Handler wurde hinzugefügt, mit der <ph id="ph2">&lt;xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> Signatur, die Handhabung von leerläufen bereits behandelt ermöglicht.</target>       </trans-unit>
        <trans-unit id="2625" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>Either type of handler is removed.</source>
          <target state="translated">Geben Sie entweder der Ereignishandler wird entfernt.</target>       </trans-unit>
        <trans-unit id="2626" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ShouldSerializeCommandBindings">
          <source>Returns whether serialization processes should serialize the contents of the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.CommandBindings" /&gt;</ph> property on instances of this class.</source>
          <target state="translated">Gibt zurück, ob in Serialisierungsprozessen der Inhalt der <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.CommandBindings" /&gt;</ph>-Eigenschaft für Instanzen dieser Klasse serialisiert werden soll.</target>       </trans-unit>
        <trans-unit id="2627" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ShouldSerializeCommandBindings">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="P:System.Windows.ContentElement.CommandBindings" /&gt;</ph> property value should be serialized; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn der <ph id="ph2">&lt;see cref="P:System.Windows.ContentElement.CommandBindings" /&gt;</ph>-Eigenschaftswert serialisiert werden soll, andernfalls <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ShouldSerializeCommandBindings">
          <source>This will return <ph id="ph1">`true`</ph> if <ph id="ph2">&lt;xref:System.Windows.ContentElement.CommandBindings%2A&gt;</ph> is locally set.</source>
          <target state="translated">Dieser Befehl zurück <ph id="ph1">`true`</ph> Wenn <ph id="ph2">&lt;xref:System.Windows.ContentElement.CommandBindings%2A&gt;</ph> lokal festgelegt ist.</target>       </trans-unit>
        <trans-unit id="2629" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ShouldSerializeCommandBindings">
          <source>This <ph id="ph1">`ShouldSerialize`</ph> method is provided because the <ph id="ph2">&lt;xref:System.Windows.UIElement.CommandBindings%2A&gt;</ph> property does not have a simple default value.</source>
          <target state="translated">Dies <ph id="ph1">`ShouldSerialize`</ph> Methode wird bereitgestellt, da die <ph id="ph2">&lt;xref:System.Windows.UIElement.CommandBindings%2A&gt;</ph> Eigenschaft verfügt nicht über einen einfachen Standardwert.</target>       </trans-unit>
        <trans-unit id="2630" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ShouldSerializeCommandBindings">
          <source>This method indicates whether the property has changed from its default value.</source>
          <target state="translated">Diese Methode gibt an, ob die-Eigenschaft ihren Standardwert geändert hat.</target>       </trans-unit>
        <trans-unit id="2631" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ShouldSerializeCommandBindings">
          <source>You typically invoke this method if you are either developing a designer or developing your own control incorporating a <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">Diese Methode wird in der Regel aufgerufen, wenn Sie entweder einen Designer oder entwickeln eigener Steuerelement einbinden einer <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2632" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ShouldSerializeCommandBindings">
          <source>For more information, see <bpt id="p1">[</bpt>Defining Default Values with the ShouldSerialize and Reset Methods<ept id="p1">](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Definieren von Standardwerten mit der ShouldSerialize-Methode und die Methoden zurücksetzen<ept id="p1">](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)</ept>.</target>       </trans-unit>
        <trans-unit id="2633" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ShouldSerializeInputBindings">
          <source>Returns whether serialization processes should serialize the contents of the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.InputBindings" /&gt;</ph> property on instances of this class.</source>
          <target state="translated">Gibt zurück, ob in Serialisierungsprozessen der Inhalt der <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.InputBindings" /&gt;</ph>-Eigenschaft für Instanzen dieser Klasse serialisiert werden soll.</target>       </trans-unit>
        <trans-unit id="2634" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ShouldSerializeInputBindings">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="P:System.Windows.ContentElement.InputBindings" /&gt;</ph> property value should be serialized; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn der <ph id="ph2">&lt;see cref="P:System.Windows.ContentElement.InputBindings" /&gt;</ph>-Eigenschaftswert serialisiert werden soll, andernfalls <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2635" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ShouldSerializeInputBindings">
          <source>This will return <ph id="ph1">`true`</ph> if <ph id="ph2">&lt;xref:System.Windows.ContentElement.InputBindings%2A&gt;</ph> is locally set.</source>
          <target state="translated">Dieser Befehl zurück <ph id="ph1">`true`</ph> Wenn <ph id="ph2">&lt;xref:System.Windows.ContentElement.InputBindings%2A&gt;</ph> lokal festgelegt ist.</target>       </trans-unit>
        <trans-unit id="2636" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ShouldSerializeInputBindings">
          <source>This <ph id="ph1">`ShouldSerialize`</ph> method is provided because the <ph id="ph2">&lt;xref:System.Windows.UIElement.InputBindings%2A&gt;</ph> property does not have a simple default value.</source>
          <target state="translated">Dies <ph id="ph1">`ShouldSerialize`</ph> Methode wird bereitgestellt, da die <ph id="ph2">&lt;xref:System.Windows.UIElement.InputBindings%2A&gt;</ph> Eigenschaft verfügt nicht über einen einfachen Standardwert.</target>       </trans-unit>
        <trans-unit id="2637" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ShouldSerializeInputBindings">
          <source>This method indicates whether the property has changed from its default value.</source>
          <target state="translated">Diese Methode gibt an, ob die-Eigenschaft ihren Standardwert geändert hat.</target>       </trans-unit>
        <trans-unit id="2638" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ShouldSerializeInputBindings">
          <source>You typically invoke this method if you are either developing a designer or developing your own control incorporating a <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">Diese Methode wird in der Regel aufgerufen, wenn Sie entweder einen Designer oder entwickeln eigener Steuerelement einbinden einer <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2639" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ShouldSerializeInputBindings">
          <source>For more information, see <bpt id="p1">[</bpt>Defining Default Values with the ShouldSerialize and Reset Methods<ept id="p1">](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Definieren von Standardwerten mit der ShouldSerialize-Methode und die Methoden zurücksetzen<ept id="p1">](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)</ept>.</target>       </trans-unit>
        <trans-unit id="2640" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.StylusButtonDown">
          <source>Occurs when the stylus button is pressed while the pointer is over this element.</source>
          <target state="translated">Tritt auf, wenn die Stifttaste gedrückt wird, während sich der Zeiger über diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="2641" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonDown">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusButtonDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusButtonDown&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2642" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonDown">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusButtonDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusButtonDown&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2643" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonDown">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein.</target>       </trans-unit>
        <trans-unit id="2644" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonDown">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="2645" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonDown">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2646" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonDown">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2647" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonDown">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2648" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonDown">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="2649" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonDown">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2650" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonDown">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonDown&gt;</ph>.</source>
          <target state="translated">Das entsprechende Tunneling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonDown&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2651" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusButtonDown%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2652" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.StylusButtonDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusButtonDown" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusButtonDown" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2653" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusButtonDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2654" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusButtonDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2655" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusButtonDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2656" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusButtonDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2657" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusButtonDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2658" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.StylusButtonUp">
          <source>Occurs when the stylus button is released while the pointer is over this element.</source>
          <target state="translated">Tritt auf, wenn die Stifttaste losgelassen wird, während sich der Zeiger über diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="2659" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonUp">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusButtonUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusButtonUp&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2660" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonUp">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusButtonUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusButtonUp&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2661" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonUp">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein.</target>       </trans-unit>
        <trans-unit id="2662" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonUp">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="2663" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonUp">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2664" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonUp">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2665" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonUp">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2666" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonUp">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="2667" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonUp">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2668" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonUp">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonUp&gt;</ph>.</source>
          <target state="translated">Das entsprechende Tunneling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonUp&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2669" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusButtonUp%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2670" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.StylusButtonUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusButtonUp" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusButtonUp" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2671" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusButtonUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2672" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusButtonUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2673" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusButtonUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2674" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusButtonUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2675" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusButtonUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2676" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.StylusDown">
          <source>Occurs when the stylus touches the digitizer while the stylus is over this element.</source>
          <target state="translated">Tritt auf, wenn der Stift den Digitizer berührt, während sich der Stift über diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="2677" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusDown">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusDown&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2678" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusDown">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusDown&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2679" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusDown">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein.</target>       </trans-unit>
        <trans-unit id="2680" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusDown">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="2681" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusDown">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2682" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusDown">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2683" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusDown">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2684" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusDown">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="2685" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusDown">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2686" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusDown">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;</ph>.</source>
          <target state="translated">Das entsprechende Tunneling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2687" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusDown%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2688" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.StylusDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusDown" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusDown" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2689" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2690" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2691" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2692" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2693" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2694" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.StylusEnter">
          <source>Occurs when the stylus enters the bounds of this element.</source>
          <target state="translated">Tritt auf, wenn der Stift in den Bereich dieses Elements eintritt.</target>       </trans-unit>
        <trans-unit id="2695" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusEnter">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusEnter&gt;</ph> is a <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> that uses the direct event handling routing strategy.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusEnter&gt;</ph> ist eine <bpt id="p1">[</bpt>Ereignisübersicht weitergeleitet<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> , routing-Strategie für die direkte Ereignisbehandlung verwendet.</target>       </trans-unit>
        <trans-unit id="2696" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusEnter">
          <source>Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</source>
          <target state="translated">Direkte Routingereignisse werden nicht auf einer Route ausgelöst. Stattdessen werden diese in demselben Element behandelt, in dem sie ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="2697" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusEnter">
          <source>However, they do enable other aspects of routed event behavior, such as event triggers in styles.</source>
          <target state="translated">Aktivieren sie jedoch andere Aspekte der Routingereignis-Verhalten, z. B. in Formaten-Ereignis ausgelöst.</target>       </trans-unit>
        <trans-unit id="2698" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusEnter">
          <source>Although <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusEnter&gt;</ph> tracks when the stylus enters the bounds of an element, this event more literally reports that the <ph id="ph2">&lt;xref:System.Windows.ContentElement.IsStylusOver%2A&gt;</ph> property value has changed from <ph id="ph3">`false`</ph> to <ph id="ph4">`true`</ph> on this element.</source>
          <target state="translated">Obwohl <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusEnter&gt;</ph> verfolgt nach, wenn der Stift den Bereich eines Elements, das dieses Ereignis Weitere eintritt buchstäblich angibt, welches die <ph id="ph2">&lt;xref:System.Windows.ContentElement.IsStylusOver%2A&gt;</ph> Eigenschaftswert geändert hat <ph id="ph3">`false`</ph> auf <ph id="ph4">`true`</ph> für dieses Element.</target>       </trans-unit>
        <trans-unit id="2699" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusEnter">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusEnter&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusEnter&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2700" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusEnter">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusEnter&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusEnter&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2701" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusEnter">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein.</target>       </trans-unit>
        <trans-unit id="2702" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusEnter">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="2703" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusEnter">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2704" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusEnter">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2705" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusEnter">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2706" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusEnter">
          <source>Direct</source>
          <target state="translated">Direkt</target>       </trans-unit>
        <trans-unit id="2707" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusEnter">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2708" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusEnter">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusEnter%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusEnter%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2709" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.StylusEnterEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusEnter" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusEnter" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2710" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusEnterEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2711" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusEnterEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2712" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusEnterEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2713" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusEnterEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2714" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusEnterEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2715" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.StylusInAirMove">
          <source>Occurs when the stylus moves over an element without actually touching the digitizer.</source>
          <target state="translated">Tritt auf, wenn der Stift über ein Element bewegt wird, ohne den Digitizer zu berühren.</target>       </trans-unit>
        <trans-unit id="2716" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInAirMove">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusInAirMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusInAirMove&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2717" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInAirMove">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusInAirMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusInAirMove&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2718" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInAirMove">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein.</target>       </trans-unit>
        <trans-unit id="2719" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInAirMove">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="2720" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInAirMove">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2721" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInAirMove">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2722" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInAirMove">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2723" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInAirMove">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="2724" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInAirMove">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2725" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInAirMove">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusInAirMove&gt;</ph>.</source>
          <target state="translated">Das entsprechende Tunneling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusInAirMove&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2726" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInAirMove">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusInAirMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusInAirMove%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2727" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.StylusInAirMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusInAirMove" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusInAirMove" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2728" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusInAirMoveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2729" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusInAirMoveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2730" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusInAirMoveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2731" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusInAirMoveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2732" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusInAirMoveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2733" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.StylusInRange">
          <source>Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</source>
          <target state="translated">Tritt auf, wenn sich der Tablettstift nah genug am Digitizer befindet, um erkannt zu werden, während er sich über diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="2734" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInRange">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusInRange&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusInRange&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2735" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInRange">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusInRange&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusInRange&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2736" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInRange">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein.</target>       </trans-unit>
        <trans-unit id="2737" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInRange">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="2738" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInRange">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2739" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInRange">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2740" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInRange">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2741" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInRange">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="2742" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInRange">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2743" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInRange">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusInRange&gt;</ph>.</source>
          <target state="translated">Das entsprechende Tunneling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusInRange&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2744" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInRange">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusInRange%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusInRange%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2745" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.StylusInRangeEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusInRange" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusInRange" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2746" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusInRangeEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2747" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusInRangeEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2748" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusInRangeEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2749" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusInRangeEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2750" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusInRangeEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2751" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.StylusLeave">
          <source>Occurs when the stylus leaves the bounds of the element.</source>
          <target state="translated">Tritt auf, wenn der Stift den Bereich des Elements verlässt.</target>       </trans-unit>
        <trans-unit id="2752" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusLeave">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusLeave&gt;</ph> is a <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> that uses the direct event handling routing strategy.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusLeave&gt;</ph> ist eine <bpt id="p1">[</bpt>Ereignisübersicht weitergeleitet<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> , routing-Strategie für die direkte Ereignisbehandlung verwendet.</target>       </trans-unit>
        <trans-unit id="2753" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusLeave">
          <source>Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</source>
          <target state="translated">Direkte Routingereignisse werden nicht auf einer Route ausgelöst. Stattdessen werden diese in demselben Element behandelt, in dem sie ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="2754" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusLeave">
          <source>However, they do enable other aspects of routed event behavior, such as event triggers in styles.</source>
          <target state="translated">Aktivieren sie jedoch andere Aspekte der Routingereignis-Verhalten, z. B. in Formaten-Ereignis ausgelöst.</target>       </trans-unit>
        <trans-unit id="2755" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusLeave">
          <source>Although <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusLeave&gt;</ph> tracks when the stylus leaves the bounds of an element, this event more literally reports that the <ph id="ph2">&lt;xref:System.Windows.ContentElement.IsStylusOver%2A&gt;</ph> property value has changed from <ph id="ph3">`true`</ph> to <ph id="ph4">`false`</ph> on this element.</source>
          <target state="translated">Obwohl <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusLeave&gt;</ph> verfolgt nach, wenn der Stift den Bereich eines Elements, das dieses Ereignis mehr verlässt buchstäblich angibt, welches die <ph id="ph2">&lt;xref:System.Windows.ContentElement.IsStylusOver%2A&gt;</ph> Eigenschaftswert geändert hat <ph id="ph3">`true`</ph> auf <ph id="ph4">`false`</ph> für dieses Element.</target>       </trans-unit>
        <trans-unit id="2756" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusLeave">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusLeave&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusLeave&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2757" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusLeave">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusLeave&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusLeave&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2758" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusLeave">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein.</target>       </trans-unit>
        <trans-unit id="2759" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusLeave">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="2760" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusLeave">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2761" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusLeave">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2762" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusLeave">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2763" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusLeave">
          <source>Direct</source>
          <target state="translated">Direkt</target>       </trans-unit>
        <trans-unit id="2764" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusLeave">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2765" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusLeave">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusLeave%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusLeave%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2766" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.StylusLeaveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusLeave" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusLeave" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2767" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusLeaveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2768" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusLeaveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2769" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusLeaveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2770" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusLeaveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2771" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusLeaveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2772" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.StylusMove">
          <source>Occurs when the stylus moves over this element.</source>
          <target state="translated">Tritt auf, wenn der Stift über das Element bewegt wird.</target>       </trans-unit>
        <trans-unit id="2773" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.StylusMove">
          <source>The stylus must move while on the digitizer to raise this event.</source>
          <target state="translated">Zum Auslösen dieses Ereignisses muss der Stift auf dem Digitizer bewegt werden.</target>       </trans-unit>
        <trans-unit id="2774" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.StylusMove">
          <source>Otherwise, <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusInAirMove" /&gt;</ph> is raised instead.</source>
          <target state="translated">Andernfalls wird stattdessen <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusInAirMove" /&gt;</ph> ausgelöst.</target>       </trans-unit>
        <trans-unit id="2775" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusMove">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusMove&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2776" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusMove">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusMove&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2777" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusMove">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein.</target>       </trans-unit>
        <trans-unit id="2778" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusMove">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="2779" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusMove">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2780" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusMove">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2781" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusMove">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2782" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusMove">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="2783" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusMove">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2784" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusMove">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusMove&gt;</ph>.</source>
          <target state="translated">Das entsprechende Tunneling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusMove&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2785" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusMove">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusMove%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2786" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.StylusMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusMove" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusMove" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2787" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusMoveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2788" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusMoveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2789" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusMoveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2790" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusMoveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2791" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusMoveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2792" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.StylusOutOfRange">
          <source>Occurs when the stylus is too far from the digitizer to be detected, while over this element.</source>
          <target state="translated">Tritt auf, wenn der Stift zu weit vom Digitizer entfernt ist, um erkannt zu werden, während er sich über diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="2793" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusOutOfRange">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusOutOfRange&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusOutOfRange&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2794" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusOutOfRange">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusOutOfRange&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusOutOfRange&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2795" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusOutOfRange">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein.</target>       </trans-unit>
        <trans-unit id="2796" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusOutOfRange">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="2797" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusOutOfRange">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2798" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusOutOfRange">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2799" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusOutOfRange">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2800" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusOutOfRange">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="2801" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusOutOfRange">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2802" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusOutOfRange">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusOutOfRange&gt;</ph>.</source>
          <target state="translated">Das entsprechende Tunneling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusOutOfRange&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2803" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusOutOfRange">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusOutOfRange%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusOutOfRange%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2804" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.StylusOutOfRangeEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusOutOfRange" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusOutOfRange" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2805" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusOutOfRangeEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2806" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusOutOfRangeEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2807" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusOutOfRangeEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2808" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusOutOfRangeEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2809" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusOutOfRangeEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2810" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.StylusSystemGesture">
          <source>Occurs when a user performs one of several stylus gestures.</source>
          <target state="translated">Tritt auf, wenn ein Benutzer eine von mehreren Gesten ausführt.</target>       </trans-unit>
        <trans-unit id="2811" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusSystemGesture">
          <source>For more information about stylus gestures, see <ph id="ph1">&lt;xref:System.Windows.Input.SystemGesture&gt;</ph>.</source>
          <target state="translated">Weitere Informationen zu Gesten, finden Sie unter <ph id="ph1">&lt;xref:System.Windows.Input.SystemGesture&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2812" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusSystemGesture">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusSystemGesture&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusSystemGesture&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2813" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusSystemGesture">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusSystemGesture&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusSystemGesture&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2814" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusSystemGesture">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein.</target>       </trans-unit>
        <trans-unit id="2815" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusSystemGesture">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="2816" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusSystemGesture">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2817" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusSystemGesture">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2818" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusSystemGesture">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2819" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusSystemGesture">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="2820" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusSystemGesture">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2821" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusSystemGesture">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusSystemGesture&gt;</ph>.</source>
          <target state="translated">Das entsprechende Tunneling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusSystemGesture&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2822" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusSystemGesture">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusSystemGesture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusSystemGesture%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2823" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.StylusSystemGestureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusSystemGesture" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusSystemGesture" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2824" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusSystemGestureEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2825" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusSystemGestureEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2826" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusSystemGestureEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2827" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusSystemGestureEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2828" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusSystemGestureEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2829" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.StylusUp">
          <source>Occurs when the user raises the stylus off the digitizer while it is over this element.</source>
          <target state="translated">Tritt auf, wenn ein Benutzer den Stift vom Digitizer hebt, während sich der Stift über diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="2830" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusUp">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusUp&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2831" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusUp">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusUp&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2832" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusUp">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">Touch, Maus und Tablettstifteingabe, die in einer bestimmten Beziehung vorhanden sein.</target>       </trans-unit>
        <trans-unit id="2833" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusUp">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="2834" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusUp">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2835" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusUp">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2836" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusUp">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2837" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusUp">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="2838" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusUp">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2839" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusUp">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusUp&gt;</ph>.</source>
          <target state="translated">Das entsprechende Tunneling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusUp&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2840" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusUp%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2841" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.StylusUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusUp" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusUp" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2842" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2843" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2844" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2845" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2846" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2847" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.TextInput">
          <source>Occurs when this element gets text in a device-independent manner.</source>
          <target state="translated">Tritt auf, wenn dieses Element Text geräteunabhängig empfängt.</target>       </trans-unit>
        <trans-unit id="2848" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>This event might already be marked as handled by the internal implementations of composited controls.</source>
          <target state="translated">Dieses Ereignis möglicherweise bereits von der internen Implementierungen der zusammengesetzte Steuerelemente als behandelt markiert werden.</target>       </trans-unit>
        <trans-unit id="2849" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>See Remark below.</source>
          <target state="translated">Finden Sie unter folgenden angeführt.</target>       </trans-unit>
        <trans-unit id="2850" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph> event may already be marked as handled by the internal implementations of composited controls.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph> Ereignis bereits von der internen Implementierungen der zusammengesetzte Steuerelemente als behandelt markiert werden kann.</target>       </trans-unit>
        <trans-unit id="2851" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>For example, a <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> is a composited control where the <ph id="ph2">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph> event is already marked as handled; within its compositing.</source>
          <target state="translated">Z. B. eine <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> ist ein zusammengesetztes Steuerelement, in dem die <ph id="ph2">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph> Ereignis bereits als behandelt; innerhalb seiner Compositing markiert ist.</target>       </trans-unit>
        <trans-unit id="2852" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>Controls do this because the control needs to interpret some types of input, such as arrow keys, as having special meaning to that control.</source>
          <target state="translated">Steuerelemente geschieht, weil das Steuerelement einige Arten von Eingaben, z. B. Pfeiltasten einstellungsproblem besondere Bedeutung für das Steuerelement zu interpretieren muss.</target>       </trans-unit>
        <trans-unit id="2853" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>If you use <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph> as the event where you attach handlers for text input, you may receive better results.</source>
          <target state="translated">Bei Verwendung von <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph> des Ereignisses, in dem Sie Handler für die Texteingabe anfügen, können Sie bessere Ergebnisse erhalten.</target>       </trans-unit>
        <trans-unit id="2854" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>This technique circumvents most cases where control composition has already marked this event as handled and prevents your handler from receiving the event along the event route.</source>
          <target state="translated">Diese Technik umgeht den meisten Fällen, in dem Steuerelement Zusammensetzung wurde bereits dieses Ereignis als behandelt markiert, und verhindert, dass den Ereignishandler empfängt das Ereignis auf der Ereignisroute.</target>       </trans-unit>
        <trans-unit id="2855" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph> event allows a component or application to listen for text input in a device-independent manner.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph> Ereignis ermöglicht, eine Komponente oder Anwendung, die für die Texteingabe in einem geräteunabhängig empfängt überwachen.</target>       </trans-unit>
        <trans-unit id="2856" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>The keyboard is the primary means of <ph id="ph1">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph>, but speech, handwriting, and other input devices can also raise <ph id="ph2">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph>.</source>
          <target state="translated">Die Tastatur ist das primäre Mittel <ph id="ph1">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph>, jedoch die Sprache, Handschrift und andere Eingabegeräte können auch die folgenden <ph id="ph2">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2857" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>Because of key combinations—either in default keyboards or through input method editors—multiple key events might raise just one text input event.</source>
          <target state="translated">Aufgrund von Tastenkombinationen – entweder in der Standardeinstellung Tastaturen oder über den Eingabemethoden-Editoren – mehrere Tastaturereignisse können nur ein Text-Eingabeereignis auslösen.</target>       </trans-unit>
        <trans-unit id="2858" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">Dieses Ereignis erstellt einen Alias für die <ph id="ph1">&lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis für diese Klasse, damit <ph id="ph2">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph> ist Teil der Klasse Member aufzulisten, wenn <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> als einem Basiselement geerbt wird.</target>       </trans-unit>
        <trans-unit id="2859" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">Ereignishandler, die angefügt werden die <ph id="ph1">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph> Ereignis an das zugrunde liegende angefügt sind <ph id="ph2">&lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType&gt;</ph> angefügtes Ereignis und die gleichen Ereignisdateninstanz empfangen.</target>       </trans-unit>
        <trans-unit id="2860" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2861" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2862" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2863" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="2864" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2865" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph>.</source>
          <target state="translated">Das entsprechende Tunneling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2866" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTextInput%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTextInput%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2867" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.TextInputEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TextInput" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TextInput" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2868" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.TextInputEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">Bezeichner für Routingereignisse werden erstellt, wenn Routingereignisse registriert werden.</target>       </trans-unit>
        <trans-unit id="2869" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.TextInputEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">Ein solcher Bezeichner enthält einen kennzeichnenden Namen, den Besitzertyp, den Handlertyp, die Routingstrategie und die Hilfsprogrammmethode zum Hinzufügen von Besitzern für das Ereignis.</target>       </trans-unit>
        <trans-unit id="2870" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.TextInputEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">Sie können diese Bezeichner dazu verwenden, Klassenhandler hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="2871" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.TextInputEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Registrieren von Routingereignissen finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2872" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.TextInputEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen über das Hinzufügen von Klassenhandlern anhand von Routingereignisbezeichnern finden Sie unter <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2873" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.TouchDown">
          <source>Occurs when a finger touches the screen while the finger is over this element.</source>
          <target state="translated">Tritt auf, wenn ein Finger den Bildschirm berührt und sich dieser über diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="2874" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchDown">
          <source>By default, the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph> events do not occur until a finger touches the screen and moves.</source>
          <target state="translated">Wird standardmäßig die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph> und <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph> Ereignisse werden nicht ausgeführt, bis ein Finger den Bildschirm berührt und verschiebt.</target>       </trans-unit>
        <trans-unit id="2875" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchDown">
          <source>Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <ph id="ph1">&lt;xref:System.Windows.Input.Stylus&gt;</ph>.</source>
          <target state="translated">Einen Finger auf dem Bildschirm drücken und gedrückt halten, ohne diesen zu bewegen dadurch drücken Sie dann aus, und halten Sie Verhalten einer <ph id="ph1">&lt;xref:System.Windows.Input.Stylus&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2876" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchDown">
          <source>The press and hold behavior is equivalent to a mouse right-click.</source>
          <target state="translated">Das Gedrückthalteverhalten ist gleichbedeutend mit der Maustaste.</target>       </trans-unit>
        <trans-unit id="2877" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchDown">
          <source>To cause the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph> events to occur as soon as a finger touches the screen, set the <ph id="ph3">&lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType&gt;</ph> attached property to <ph id="ph4">`false`</ph> for this element.</source>
          <target state="translated">Zu bewirken, dass die <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph> und <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph> Festlegen von Ereignissen, die als ein Finger den Bildschirm berührt die <ph id="ph3">&lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType&gt;</ph> angefügten Eigenschaft, um <ph id="ph4">`false`</ph> für dieses Element.</target>       </trans-unit>
        <trans-unit id="2878" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchDown">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2879" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchDown">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2880" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchDown">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2881" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchDown">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="2882" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchDown">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2883" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchDown">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated">Eine <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> vom Typ <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2884" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchDown">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph>.</source>
          <target state="translated">Das entsprechende Tunneling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2885" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchDown%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2886" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.TouchDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchDown" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchDown" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2887" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.TouchEnter">
          <source>Occurs when a touch moves from outside to inside the bounds of this element.</source>
          <target state="translated">Tritt ein, wenn sich eine Fingereingabe in die Grenzen dieses Elements hineinbewegt.</target>       </trans-unit>
        <trans-unit id="2888" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchEnter">
          <source>This event is always raised, whether or not the touch device is captured to this UI element.</source>
          <target state="translated">Dieses Ereignis wird immer dann ausgelöst, und zwar unabhängig davon, ob die Touch-Geräte für dieses Benutzeroberflächenelement erfasst wird.</target>       </trans-unit>
        <trans-unit id="2889" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchEnter">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2890" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchEnter">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2891" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchEnter">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2892" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchEnter">
          <source>Direct</source>
          <target state="translated">Direkt</target>       </trans-unit>
        <trans-unit id="2893" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchEnter">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2894" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchEnter">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated">Eine <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> vom Typ <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2895" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchEnter">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchEnter%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchEnter%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2896" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.TouchEnterEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchEnter" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchEnter" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2897" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.TouchesCaptured">
          <source>Gets all touch devices that are captured to this element.</source>
          <target state="translated">Ruft alle Fingereingabegeräte ab, die für dieses Element erfasst werden.</target>       </trans-unit>
        <trans-unit id="2898" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.TouchesCaptured">
          <source>An enumeration of <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchDevice" /&gt;</ph> objects that are captured to this element.</source>
          <target state="translated">Eine Enumeration von <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchDevice" /&gt;</ph>-Objekten, die für dieses Element erfasst werden.</target>       </trans-unit>
        <trans-unit id="2899" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.TouchesCapturedWithin">
          <source>Gets all touch devices that are captured to this element or any child elements in its visual tree.</source>
          <target state="translated">Ruft alle Fingereingabegeräte ab, die für dieses Element oder seine untergeordneten Elemente in der visuellen Struktur erfasst werden.</target>       </trans-unit>
        <trans-unit id="2900" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.TouchesCapturedWithin">
          <source>An enumeration of <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchDevice" /&gt;</ph> objects that are captured to this element or any child elements in its visual tree.</source>
          <target state="translated">Eine Enumeration von <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchDevice" /&gt;</ph>-Objekten, die für dieses Element oder seine untergeordneten Elemente in der visuellen Struktur erfasst werden.</target>       </trans-unit>
        <trans-unit id="2901" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.TouchesDirectlyOver">
          <source>Gets all touch devices that are over this element.</source>
          <target state="translated">Ruft alle Fingereingabegeräte ab, die sich über diesem Element befinden.</target>       </trans-unit>
        <trans-unit id="2902" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.TouchesDirectlyOver">
          <source>An enumeration of <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchDevice" /&gt;</ph> objects that are over this element.</source>
          <target state="translated">Eine Enumeration von <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchDevice" /&gt;</ph>-Objekten, die sich über diesem Element befinden.</target>       </trans-unit>
        <trans-unit id="2903" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.TouchesOver">
          <source>Gets all touch devices that are over this element or any child elements in its visual tree.</source>
          <target state="translated">Ruft alle Fingereingabegeräte ab, die sich über diesem Element oder seinen untergeordneten Elementen in der visuellen Struktur befinden.</target>       </trans-unit>
        <trans-unit id="2904" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.TouchesOver">
          <source>An enumeration of <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchDevice" /&gt;</ph> objects that are over this element or any child elements in its visual tree.</source>
          <target state="translated">Eine Enumeration von <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchDevice" /&gt;</ph>-Objekten, die sich über diesem Element oder seinen untergeordneten Elemente in der visuellen Struktur befinden.</target>       </trans-unit>
        <trans-unit id="2905" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.TouchLeave">
          <source>Occurs when a touch moves from inside to outside the bounds of this element.</source>
          <target state="translated">Tritt ein, wenn sich eine Fingereingabe aus den Grenzen dieses Elements herausbewegt.</target>       </trans-unit>
        <trans-unit id="2906" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchLeave">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2907" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchLeave">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2908" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchLeave">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2909" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchLeave">
          <source>Direct</source>
          <target state="translated">Direkt</target>       </trans-unit>
        <trans-unit id="2910" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchLeave">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2911" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchLeave">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated">Eine <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> vom Typ <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2912" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchLeave">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchLeave%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchLeave%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2913" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.TouchLeaveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchLeave" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchLeave" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2914" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.TouchMove">
          <source>Occurs when a finger moves on the screen while the finger is over this element.</source>
          <target state="translated">Tritt auf, wenn sich ein Finger auf dem Bildschirm bewegt, während sich der Finger über diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="2915" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchMove">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2916" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchMove">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2917" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchMove">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2918" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchMove">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="2919" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchMove">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2920" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchMove">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated">Eine <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> vom Typ <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2921" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchMove">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchMove&gt;</ph>.</source>
          <target state="translated">Das entsprechende Tunneling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchMove&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2922" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchMove">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchMove%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2923" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.TouchMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchMove" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchMove" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
        <trans-unit id="2924" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.TouchUp">
          <source>Occurs when a finger is raised off of the screen while the finger is over this element.</source>
          <target state="translated">Tritt auf, wenn ein Finger vom Bildschirm genommen wird, während sich der Finger über diesem Element befindet.</target>       </trans-unit>
        <trans-unit id="2925" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchUp">
          <source>Routed Event Information</source>
          <target state="translated">Informationen zum Routingereignis</target>       </trans-unit>
        <trans-unit id="2926" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchUp">
          <source>Identifier field</source>
          <target state="translated">Bezeichnerfeld</target>       </trans-unit>
        <trans-unit id="2927" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchUp">
          <source>Routing strategy</source>
          <target state="translated">Routing-Strategie</target>       </trans-unit>
        <trans-unit id="2928" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchUp">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>       </trans-unit>
        <trans-unit id="2929" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchUp">
          <source>Delegate</source>
          <target state="translated">delegate</target>       </trans-unit>
        <trans-unit id="2930" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchUp">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated">Eine <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> vom Typ <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2931" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchUp">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchUp&gt;</ph>.</source>
          <target state="translated">Das entsprechende Tunneling-Ereignis ist <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchUp&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2932" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchUp%2A&gt;</ph> um eine Klassenbehandlung für dieses Ereignis in abgeleiteten Klassen zu implementieren.</target>       </trans-unit>
        <trans-unit id="2933" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.TouchUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchUp" /&gt;</ph> routed event.</source>
          <target state="translated">Identifiziert das <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchUp" /&gt;</ph>-Routingereignis.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
<Type Name="DependencyPropertyKey" FullName="System.Windows.DependencyPropertyKey">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9a12e407bc5345e416145c390f8fcd6f8262c445" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30676974" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DependencyPropertyKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyPropertyKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyKey" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyPropertyKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyPropertyKey sealed" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="c3781-101">Stellt einen Bezeichner für eine Abhängigkeitseigenschaft für den beschränkten Schreibzugriff auf eine schreibgeschützte Abhängigkeitseigenschaft bereit.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c3781-101">Provides a dependency property identifier for limited write access to a read-only dependency property.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3781-102"><xref:System.Windows.DependencyPropertyKey> -Instanzen werden als Rückgabewert einer Abhängigkeit Eigenschaft Registrierung Aufrufs mit den Methoden abgerufen <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> oder <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span><span class="sxs-lookup"><span data-stu-id="c3781-102"><xref:System.Windows.DependencyPropertyKey> instances are obtained as the return value of a dependency property registration call using the methods <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> or <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span></span>  
  
 <span data-ttu-id="c3781-103">Die Typen, die eine Abhängigkeitseigenschaft registrieren können die <xref:System.Windows.DependencyPropertyKey> Aufrufe <xref:System.Windows.DependencyObject.SetValue%2A> und <xref:System.Windows.DependencyObject.ClearValue%2A> passen Sie den Wert der Eigenschaft, die als Teil der Klassenlogik.</span><span class="sxs-lookup"><span data-stu-id="c3781-103">The types that register a dependency property can use the <xref:System.Windows.DependencyPropertyKey> in calls to <xref:System.Windows.DependencyObject.SetValue%2A> and <xref:System.Windows.DependencyObject.ClearValue%2A> that adjust the property's value as part of class logic.</span></span> <span data-ttu-id="c3781-104">Wenn die Zugriffsebene des Schlüssels erlaubt, können verwandte Klassen den Schlüssel und die Abhängigkeitseigenschaft auch.</span><span class="sxs-lookup"><span data-stu-id="c3781-104">If permitted by the access level of the key, related classes can use the key and the dependency property also.</span></span> <span data-ttu-id="c3781-105">Beispielsweise können Sie den Schlüssel als interne deklarieren, und andere Typen innerhalb derselben Assembly können auch festlegen, der Abhängigkeitseigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c3781-105">For instance, you can declare the key as internal, and other types within the same assembly can also set that dependency property.</span></span>  
  
 <span data-ttu-id="c3781-106">Die <xref:System.Windows.DependencyPropertyKey> zurückgegeben von schreibgeschützten Abhängigkeitseigenschaft eigenschaftsregistrierung sollten nicht öffentlich gemacht werden, da durch den Schlüssel die Eigenschaft festgelegt werden, also dem Zeitpunkt der Registrierung als eine schreibgeschützte Abhängigkeitseigenschaft angeben kann.</span><span class="sxs-lookup"><span data-stu-id="c3781-106">The <xref:System.Windows.DependencyPropertyKey> returned by read-only dependency property registration should not be made public, because exposing the key makes the property settable, thus defeating the point of registering it as a read-only dependency property.</span></span> <span data-ttu-id="c3781-107">Darüber hinaus den Schlüssel bewirkt, dass ein Konflikt zwischen den verfügbaren Abhängigkeit Eigenschaft Verhalten und die zugehörige [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] Eigenschaft Wrapperimplementierungen, die fehlerhafte-Klassenentwurf ist.</span><span class="sxs-lookup"><span data-stu-id="c3781-107">Also, exposing the key causes a mismatch between the available dependency property behaviors and its [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] property wrapper implementations, which is bad class design.</span></span>  
  
 <span data-ttu-id="c3781-108">Anstatt den Schlüssel selbst verfügbar gemacht werden, Sie sollten stattdessen verfügbar machen die <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> Wert, der die <xref:System.Windows.DependencyPropertyKey> als eine `public static readonly` <xref:System.Windows.DependencyProperty> für Ihre Klasse.</span><span class="sxs-lookup"><span data-stu-id="c3781-108">Instead of exposing the key itself, you should instead expose the <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> value of the <xref:System.Windows.DependencyPropertyKey> as a `public static readonly`<xref:System.Windows.DependencyProperty> on your class.</span></span> <span data-ttu-id="c3781-109">Dadurch wird die Eigenschaft Bezeichner für eine gültige Abhängigkeitseigenschaft für bestimmte Eigenschaft Systemvorgänge z. B. das Durchzählen lokal festgelegten Werte zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="c3781-109">This enables the property to return a valid dependency property identifier for certain property system operations such as enumerating locally set values.</span></span> <span data-ttu-id="c3781-110">Der Bezeichner, die erhaltenen müssen jedoch nicht alle Funktionen von einer <xref:System.Windows.DependencyProperty> für viele Eigenschaft Systemvorgänge.</span><span class="sxs-lookup"><span data-stu-id="c3781-110">However, the identifier thus obtained does not have the full capabilities of a <xref:System.Windows.DependencyProperty> for many property system operations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3781-111">Das folgende Beispiel registriert eine schreibgeschützte Abhängigkeitseigenschaft und verwendet auch den Schlüssel für zwei Zwecke in anderen Klassenmembern: Implementieren des Get "Wrappers" und als Bezeichner für einen geschützten Bestimmung-Vorgang, der den Wert fest, anhand von Berechnungen der anderen Eigenschaftswerte.</span><span class="sxs-lookup"><span data-stu-id="c3781-111">The following example registers a read-only dependency property, and also uses the key for two purposes in other class members: implementing the get "wrapper", and as the identifier for a protected determination operation that sets the value based on calculations of other property values.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName="DependencyProperty">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty DependencyProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty DependencyProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyProperty As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ DependencyProperty { System::Windows::DependencyProperty ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c3781-112">Ruft den Bezeichner einer Abhängigkeitseigenschaft ab, der diesem Bezeichner einer spezialisierten schreibgeschützten Abhängigkeitseigenschaft zugeordnet ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3781-112">Gets the dependency property identifier associated with this specialized read-only dependency property identifier.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c3781-113">Der relevante Bezeichner einer Abhängigkeitseigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3781-113">The relevant dependency property identifier.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3781-114">Die <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> -Wert ermöglicht eine schreibgeschützte Eigenschaft Bezeichner gemeinsame Eigenschaft Systemvorgänge unter Verwendung der gleichen Schnittstellen auch verwendet für Lese-/ Schreibzugriff Abhängigkeitseigenschaften teilnehmen.</span><span class="sxs-lookup"><span data-stu-id="c3781-114">The <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> value enables a read-only property's identifier to participate in common property system operations using some of the same interfaces as used for read-write dependency properties.</span></span>  
  
 <span data-ttu-id="c3781-115">Um den Get-Accessor für eine schreibgeschützte Abhängigkeitseigenschaft zu implementieren, sollten Sie erstellen und verfügbar machen eine <xref:System.Windows.DependencyProperty> Bezeichner für Ihre Klasse.</span><span class="sxs-lookup"><span data-stu-id="c3781-115">In order to implement the get property accessor for a read-only dependency property, you should create and expose a <xref:System.Windows.DependencyProperty> identifier on your class.</span></span> <span data-ttu-id="c3781-116">Bei diesem Verfahren werden zwei Ziele verfolgt:</span><span class="sxs-lookup"><span data-stu-id="c3781-116">This serves two purposes:</span></span>  
  
-   <span data-ttu-id="c3781-117">Die eigene Klasse erfordert die <xref:System.Windows.DependencyProperty> Bezeichner, um die Get-Zugriffsmethode für den Eigenschaftenwrapper zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="c3781-117">Your own class needs the <xref:System.Windows.DependencyProperty> identifier in order to implement the get accessor for the property wrapper.</span></span> <span data-ttu-id="c3781-118">Verwenden Sie die <xref:System.Windows.DependencyProperty> als Parameter für die <xref:System.Windows.DependencyObject.GetValue%2A> -Aufruf, der "Get"-Zugriffsmethode implementiert.</span><span class="sxs-lookup"><span data-stu-id="c3781-118">You use the <xref:System.Windows.DependencyProperty> as a parameter for the <xref:System.Windows.DependencyObject.GetValue%2A> call that implements the get accessor.</span></span>  
  
-   <span data-ttu-id="c3781-119"><xref:System.Windows.DependencyProperty> Bezeichner die Abhängigkeitseigenschaft im Eigenschaftensystem verfügbar machen, sodass andere Methoden, die abhängig von Metadaten in ein Standardformat darauf zugreifen können.</span><span class="sxs-lookup"><span data-stu-id="c3781-119"><xref:System.Windows.DependencyProperty> identifiers expose your dependency property to the property system such that other methods that rely on metadata can access it in a standard form.</span></span> <span data-ttu-id="c3781-120">Für die Instanz, wenn Sie aufgerufen <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> auf einigen <xref:System.Windows.DependencyObject> und erhalten Sie einer Enumeration der lokal festgelegten Eigenschaften (Werte und Bezeichner) den Bezeichner für eine schreibgeschützte Abhängigkeitseigenschaft wäre zurückgegebene Ihrer <xref:System.Windows.DependencyProperty> anstelle der Schlüssel-Wert.</span><span class="sxs-lookup"><span data-stu-id="c3781-120">For instance, if you called <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> on some <xref:System.Windows.DependencyObject> and obtained an enumeration of locally set properties (values and identifiers) the identifier returned for a read-only dependency property would be your <xref:System.Windows.DependencyProperty> value rather than the key.</span></span> <span data-ttu-id="c3781-121">Nicht verfügbar machen eine <xref:System.Windows.DependencyProperty> Bezeichner nicht erhöht die Sicherheit der schreibgeschützten Abhängigkeitseigenschaft, vereinfacht nur Vorgänge, die die Eigenschaft umständlicher für nachfolgende abgeleitete Klassen und Klasseninstanzen betreffen.</span><span class="sxs-lookup"><span data-stu-id="c3781-121">Not exposing a <xref:System.Windows.DependencyProperty> identifier does not increase the security of your read-only dependency property in any way, it just makes operations that involve your property more awkward both for subsequent derived classes and class instances.</span></span>  
  
 <span data-ttu-id="c3781-122">Verfügbarmachen der <xref:System.Windows.DependencyProperty> -Bezeichner für die Klasse, rufen Sie <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> direkt für den Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="c3781-122">To expose the  <xref:System.Windows.DependencyProperty> identifier on your class, you call <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> directly on your key.</span></span> <span data-ttu-id="c3781-123">Verwenden Sie diesen Wert zum Erstellen einer `public static readonly` <xref:System.Windows.DependencyProperty> Bezeichner auf die Klasse, die entspricht der <xref:System.Windows.DependencyPropertyKey>.</span><span class="sxs-lookup"><span data-stu-id="c3781-123">Use this value to create a `public static readonly`<xref:System.Windows.DependencyProperty> identifier on the class, which parallels the <xref:System.Windows.DependencyPropertyKey>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3781-124">Im folgenden Beispiel wird <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> verfügbar machen die <xref:System.Windows.DependencyProperty> Bezeichner (`AquariumGraphicProperty`) für die `AquariumGraphic` schreibgeschützte Abhängigkeitseigenschaft für eine Klasse.</span><span class="sxs-lookup"><span data-stu-id="c3781-124">The following example calls <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> to expose the <xref:System.Windows.DependencyProperty> identifier (`AquariumGraphicProperty`) for the `AquariumGraphic` read-only dependency property on a class.</span></span> <span data-ttu-id="c3781-125">Das Beispiel zeigt auch die <xref:System.Windows.DependencyPropertyKey> (als interner Member) und die Get-Zugriffsmethode für `AquariumGraphic`.</span><span class="sxs-lookup"><span data-stu-id="c3781-125">The example also shows the <xref:System.Windows.DependencyPropertyKey> creation (as an internal member) and the get accessor for `AquariumGraphic`.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType">
          <span data-ttu-id="c3781-126">Der Typ, für den diese Abhängigkeitseigenschaft vorhanden ist, sowie die Metadaten müssen überschrieben werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3781-126">The type on which this dependency property exists and metadata should be overridden.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="c3781-127">Für diesen Typ angegebene Metadaten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3781-127">Metadata supplied for this type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c3781-128">Überschreibt die Metadaten einer schreibgeschützten Abhängigkeitseigenschaft, die durch diesen Bezeichner einer Abhängigkeitseigenschaft dargestellt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3781-128">Overrides the metadata of a read-only dependency property that is represented by this dependency property identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3781-129">Überschreiben die Metadaten für eine schreibgeschützte Abhängigkeitseigenschaft erfolgt aus ähnlichen Gründen wie beim Überschreiben von Metadaten für eine Abhängigkeitseigenschaft mit Lese-/ Schreibzugriff und sind für den Zugriff auf die wichtigsten Ebene eingeschränkt, da in den Metadaten angegebene Verhaltensweisen das Set-Verhalten (die ändern können DEFAULT-Wert, z. B.).</span><span class="sxs-lookup"><span data-stu-id="c3781-129">Overriding metadata on a read-only dependency property is done for similar reasons as overriding metadata on a read-write dependency property, and is restricted to access at the key level because behaviors specified in the metadata can change the set behavior (the default value, for instance).</span></span>  
  
 <span data-ttu-id="c3781-130">Wie mit Lese-/ Schreibzugriff Abhängigkeitseigenschaften, überschreiben die Metadaten für eine schreibgeschützte Abhängigkeitseigenschaft nur vor der Eigenschaft verwendet platziert wird, von dem Eigenschaftensystem erfolgen soll (Dies entspricht dem Zeitpunkt, bestimmte Instanzen von Objekten, das Registrieren der Eigenschaft instanziiert werden).</span><span class="sxs-lookup"><span data-stu-id="c3781-130">As with read-write dependency properties, overriding metadata on a read-only dependency property should only be done prior to that property being placed in use by the property system (this equates to the time that specific instances of objects that register the property are instantiated).</span></span> <span data-ttu-id="c3781-131">Aufrufe von <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> sollte nur ausgeführt werden, in den statischen Konstruktoren des Typs, der sich selbst als der `forType` Parameter dieser Methode oder eine gleichwertige Initialisierung für diese Klasse.</span><span class="sxs-lookup"><span data-stu-id="c3781-131">Calls to <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or equivalent initialization for that class.</span></span>  
  
 <span data-ttu-id="c3781-132">Diese Methode leitet effektiv an die <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> -Methode auf und übergibt die <xref:System.Windows.DependencyPropertyKey> Instanz entsprechend den Key-Parameter.</span><span class="sxs-lookup"><span data-stu-id="c3781-132">This method effectively forwards to the <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> method, passing the <xref:System.Windows.DependencyPropertyKey> instance as the key parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3781-133">Im folgende Beispiel werden die Metadaten für eine vorhandene schreibgeschützte Abhängigkeitseigenschaft, die eine Klasse erbt überschrieben.</span><span class="sxs-lookup"><span data-stu-id="c3781-133">The following example overrides metadata for an existing read-only dependency property that a class inherits.</span></span> <span data-ttu-id="c3781-134">In diesem Fall wurde das Szenario-Ziel einen Rückruf zum Wert hinzufügen, den die Basiseigenschaft Metadaten nicht vorhanden wäre.</span><span class="sxs-lookup"><span data-stu-id="c3781-134">In this case, the scenario goal was to add a coerce value callback that the base property metadata did not have.</span></span> <span data-ttu-id="c3781-135">Sie können auch Metadaten überschreiben, für keines der anderen Gründe, aus denen das Überschreiben von Metadaten in der Regel ist die entsprechende (Standardwert ändern hinzufügen <xref:System.Windows.FrameworkPropertyMetadataOptions> Werte usw..)</span><span class="sxs-lookup"><span data-stu-id="c3781-135">You could also override metadata for any of the other reasons that overriding metadata is typically appropriate (changing default value, adding <xref:System.Windows.FrameworkPropertyMetadataOptions> values, etc.)</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODPOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodpoverride)]
 [!code-vb[WPFAquariumSln#RODPOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodpoverride)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c3781-136">Versuchte Überschreibung von Metadaten für eine Abhängigkeitseigenschaft mit Schreib- und Leseberechtigungen (kann nicht mit dieser Signatur ausgeführt werden).</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3781-136">Attempted metadata override on a read-write dependency property (cannot be done using this signature).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c3781-137">Metadaten wurden für die Eigenschaft bereits festgelegt, da sie im bereitgestellten Typ bereits vorhanden sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3781-137">Metadata was already established for the property as it exists on the provided type.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.DependencyProperty" />
        <altmember cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="DependencyPropertyKey" FullName="System.Windows.DependencyPropertyKey">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3cd6fbb925314b32cf6f09ce204f5374db64928c" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39765179" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DependencyPropertyKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyPropertyKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyKey" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyPropertyKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyPropertyKey sealed" />
  <TypeSignature Language="F#" Value="type DependencyPropertyKey = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt einen Bezeichner für eine Abhängigkeitseigenschaft für den beschränkten Schreibzugriff auf eine schreibgeschützte Abhängigkeitseigenschaft bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.DependencyPropertyKey> -Instanzen werden abgerufen, als Rückgabewert einer Eigenschaft-Registrierungsaufrufs auf, die mit den Methoden der <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> oder <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.  
  
 Die Typen, die eine Abhängigkeitseigenschaft registrieren können die <xref:System.Windows.DependencyPropertyKey> Aufrufe <xref:System.Windows.DependencyObject.SetValue%2A> und <xref:System.Windows.DependencyObject.ClearValue%2A> , die den Wert der Eigenschaft als Teil der Klassenlogik anzupassen. Wenn von der Zugriffsebene des Schlüssels zulässig, können verwandte Klassen der Schlüssel und die Abhängigkeitseigenschaft auch. Beispielsweise können Sie den Schlüssel als interne deklarieren, und andere Typen innerhalb derselben Assembly können auch die Abhängigkeitseigenschaft festlegen.  
  
 Die <xref:System.Windows.DependencyPropertyKey> zurückgegeben von schreibgeschützten Abhängigkeitseigenschaft Registrierung sollte nicht öffentlich gemacht werden, da den Schlüssel die Eigenschaft festgelegt werden macht, daher Vereitelung zum Zeitpunkt des als schreibgeschützte Abhängigkeitseigenschaft registrieren. Darüber hinaus den Schlüssel bewirkt, dass ein Konflikt zwischen den verfügbaren Abhängigkeit Eigenschaft Verhalten und die zugehörige [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] Eigenschaft Wrapper-Implementierungen, die ungültige Klassenentwurf ist.  
  
 Statt den Schlüssel selbst verfügbar zu machen, Sie sollten stattdessen verfügbar machen die <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> Wert, der die <xref:System.Windows.DependencyPropertyKey> als eine `public static readonly` <xref:System.Windows.DependencyProperty> in Ihrer Klasse auf. Dadurch können die Eigenschaft, die einen gültigen Bezeichner für bestimmte Operationen des Eigenschaftensystems z. B. das Durchzählen lokal festgelegte Werte zurückgegeben. Der Bezeichner, daher erhalten verfügt jedoch nicht über den vollständigen Funktionsumfang von einer <xref:System.Windows.DependencyProperty> für viele Operationen des Eigenschaftensystems.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine schreibgeschützte Abhängigkeitseigenschaft registriert und verwendet auch den Schlüssel für zwei Zwecke in dem andere Klassenmember: Implementierung der Get "Wrapper" und als Bezeichner für einen geschützten Bestimmung-Vorgang, der den Wert fest, basierend auf Berechnungen andere Eigenschaftswerte.  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName="DependencyProperty">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty DependencyProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty DependencyProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyProperty As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ DependencyProperty { System::Windows::DependencyProperty ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyProperty : System.Windows.DependencyProperty" Usage="System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Bezeichner einer Abhängigkeitseigenschaft ab, der diesem Bezeichner einer spezialisierten schreibgeschützten Abhängigkeitseigenschaft zugeordnet ist.</summary>
        <value>Der relevante Bezeichner einer Abhängigkeitseigenschaft.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> -Wert ermöglicht eine schreibgeschützte Eigenschaft Bezeichner Teilnahme an allgemeinen Operationen des Eigenschaftensystems unter Verwendung der gleichen Schnittstellen auch verwendet für Abhängigkeitseigenschaften mit Lese-/ Schreibzugriff.  
  
 Um den Get-Accessor für eine schreibgeschützte Abhängigkeitseigenschaft implementieren, sollten Sie erstellen und Bereitstellen einer <xref:System.Windows.DependencyProperty> -Bezeichner für die Klasse. Bei diesem Verfahren werden zwei Ziele verfolgt:  
  
-   Die eigene Klasse erfordert die <xref:System.Windows.DependencyProperty> Bezeichner, um den Get-Accessor für den Eigenschaftenwrapper zu implementieren. Sie verwenden die <xref:System.Windows.DependencyProperty> als Parameter für die <xref:System.Windows.DependencyObject.GetValue%2A> -Aufruf, den Get-Accessor implementiert.  
  
-   <xref:System.Windows.DependencyProperty> Bezeichner Ihre Abhängigkeitseigenschaft im Eigenschaftensystem verfügbar machen, sodass andere Methoden, die Metadaten benötigen es in einem Standardformat zugreifen können. Z. B. bei einem Aufruf <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> auf einigen <xref:System.Windows.DependencyObject> , sondern lokal festgelegte Eigenschaften ("Werte" und "Bezeichner") einer Enumeration den Bezeichner für eine schreibgeschützte Abhängigkeitseigenschaft wäre zurückgegebene Ihre <xref:System.Windows.DependencyProperty> Wert anstelle des Schlüssels. Nicht verfügbar machen eine <xref:System.Windows.DependencyProperty> Bezeichner nicht erhöht die Sicherheit in irgendeiner Weise Ihre schreibgeschützte Abhängigkeitseigenschaft, so kann Vorgänge, die die Eigenschaft, die sowohl für die folgenden abgeleiteten Klassen und Klasseninstanzen umständlicher betreffen.  
  
 Um verfügbar zu machen die <xref:System.Windows.DependencyProperty> -Bezeichner für die Klasse, rufen Sie <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> direkt für den Schlüssel. Verwenden Sie diesen Wert zum Erstellen einer `public static readonly` <xref:System.Windows.DependencyProperty> Bezeichner für die Klasse, die gleicht der <xref:System.Windows.DependencyPropertyKey>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> verfügbar machen die <xref:System.Windows.DependencyProperty> Bezeichner (`AquariumGraphicProperty`) für die `AquariumGraphic` schreibgeschützte Abhängigkeitseigenschaft auf einer Klasse. Das Beispiel zeigt auch die <xref:System.Windows.DependencyPropertyKey> (als interner Member) und die Get-Accessor für `AquariumGraphic`.  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata -&gt; unit" Usage="dependencyPropertyKey.OverrideMetadata (forType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType">Der Typ, für den diese Abhängigkeitseigenschaft vorhanden ist, sowie die Metadaten müssen überschrieben werden.</param>
        <param name="typeMetadata">Für diesen Typ angegebene Metadaten.</param>
        <summary>Überschreibt die Metadaten einer schreibgeschützten Abhängigkeitseigenschaft, die durch diesen Bezeichner einer Abhängigkeitseigenschaft dargestellt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Überschreiben von Metadaten für eine schreibgeschützte Abhängigkeitseigenschaft erfolgt aus ähnlichen Gründen als das Überschreiben von Metadaten für eine Abhängigkeitseigenschaft mit Lese-/ Schreibzugriff und sind für den Zugriff auf Ebene der Schlüssel beschränkt, da in den Metadaten angegebene Verhalten auf das Set-Verhalten (die ändern können DEFAULT-Wert, z. B.).  
  
 Wie mit Lese-/ Schreibzugriff Abhängigkeitseigenschaften Überschreiben von Metadaten für eine schreibgeschützte Abhängigkeitseigenschaft nur vor dieser Eigenschaft verwendet vom Eigenschaftensystem erfolgen soll (Dies entspricht der Zeit, dass bestimmte Instanzen von Objekten, die Registrierung der Eigenschaft werden instanziiert). Aufrufe von <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> sollte nur ausgeführt werden, in den statischen Konstruktoren des Typs, der sich selbst als die `forType` Parameter dieser Methode oder eine gleichwertige Initialisierung für diese Klasse.  
  
 Diese Methode leitet effektiv an die <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> Methode auf und übergibt die <xref:System.Windows.DependencyPropertyKey> Instanz als den Key-Parameter.  
  
   
  
## Examples  
 Im folgende Beispiel überschreibt die Metadaten für eine vorhandene schreibgeschützte Abhängigkeitseigenschaft, die eine Klasse erbt. In diesem Fall wurde das Szenario-Ziel einen Coerce-Wert-Rückruf hinzufügen, den keine Metadaten für die Basis ein. Sie können auch Metadaten überschreiben, für die weitere Gründe, die in der Regel das Überschreiben von Metadaten ist geeignete (Standardwert ändern hinzufügen <xref:System.Windows.FrameworkPropertyMetadataOptions> Werte usw..)  
  
 [!code-csharp[WPFAquariumSln#RODPOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodpoverride)]
 [!code-vb[WPFAquariumSln#RODPOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodpoverride)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Versuchte Überschreibung von Metadaten für eine Abhängigkeitseigenschaft mit Schreib- und Leseberechtigungen (kann nicht mit dieser Signatur ausgeführt werden).</exception>
        <exception cref="T:System.ArgumentException">Metadaten wurden für die Eigenschaft bereits festgelegt, da sie im bereitgestellten Typ bereits vorhanden sind.</exception>
        <altmember cref="T:System.Windows.DependencyProperty" />
        <altmember cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      </Docs>
    </Member>
  </Members>
</Type>
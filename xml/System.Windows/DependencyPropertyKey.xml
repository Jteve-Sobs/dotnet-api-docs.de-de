<Type Name="DependencyPropertyKey" FullName="System.Windows.DependencyPropertyKey">
  <Metadata><Meta Name="ms.openlocfilehash" Value="61f0be29cf151e08d249cb070c9ffec96ecb1f41" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69434712" /></Metadata><TypeSignature Language="C#" Value="public sealed class DependencyPropertyKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyPropertyKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyKey" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyPropertyKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyPropertyKey sealed" />
  <TypeSignature Language="F#" Value="type DependencyPropertyKey = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt einen Bezeichner für eine Abhängigkeitseigenschaft für den beschränkten Schreibzugriff auf eine schreibgeschützte Abhängigkeitseigenschaft bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.DependencyPropertyKey>-Instanzen werden als Rückgabewert eines Registrierungs Aufrufs für die Abhängigkeits Eigenschaft <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> mithilfe <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>der-Methoden oder abgerufen.  
  
 Die Typen, die eine Abhängigkeits Eigenschaft registrieren, <xref:System.Windows.DependencyPropertyKey> können den in <xref:System.Windows.DependencyObject.SetValue%2A> aufrufen <xref:System.Windows.DependencyObject.ClearValue%2A> von und verwenden, die den Wert der Eigenschaft als Teil der Klassen Logik anpassen. Wenn Sie von der Zugriffsebene des Schlüssels zugelassen werden, können verwandte Klassen auch den Schlüssel und die Abhängigkeits Eigenschaft verwenden. Beispielsweise können Sie den Schlüssel als intern deklarieren, und andere Typen in derselben Assembly können auch diese Abhängigkeits Eigenschaft festlegen.  
  
 Die <xref:System.Windows.DependencyPropertyKey> von der schreibgeschützten Abhängigkeits Eigenschafts Registrierung zurückgegebene sollte nicht öffentlich gemacht werden, da durch das verfügbar machen des Schlüssels die Eigenschaft festgelegt werden kann, wodurch der Zeitpunkt der Registrierung als schreibgeschützte Abhängigkeits Eigenschaft besiegt wird. Außerdem verursacht das verfügbar machen des Schlüssels einen Konflikt zwischen dem verfügbaren Verhalten der Abhängigkeits [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] Eigenschaft und den zugehörigen Wrapper Implementierungen der Eigenschaften, was ein ungültiges Klassen Design ist.  
  
 Anstatt den Schlüssel <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> selbst verfügbar <xref:System.Windows.DependencyProperty> zu machen, sollten Sie stattdessen den Wert <xref:System.Windows.DependencyPropertyKey> von als `public static readonly` in der Klasse verfügbar machen. Dadurch kann die-Eigenschaft einen gültigen Bezeichner für die Abhängigkeits Eigenschaft für bestimmte Eigenschafts System Vorgänge zurückgeben, z. b. das Auflisten von lokal festgelegten Werten Der Bezeichner, der somit abgerufen wurde, verfügt jedoch nicht über die <xref:System.Windows.DependencyProperty> vollständigen Funktionen von für viele Eigenschaften System Vorgänge.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine schreibgeschützte Abhängigkeits Eigenschaft registriert, und der Schlüssel wird in anderen Klassenmembern für zwei Zwecke verwendet: Implementieren von Get "Wrapper" und als Bezeichner für eine geschützte Bestimmung, die den Wert auf der Grundlage von Berechnungen festlegt. von anderen Eigenschafts Werten.  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName="DependencyProperty">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty DependencyProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty DependencyProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyProperty As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ DependencyProperty { System::Windows::DependencyProperty ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyProperty : System.Windows.DependencyProperty" Usage="System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Bezeichner einer Abhängigkeitseigenschaft ab, der diesem Bezeichner einer spezialisierten schreibgeschützten Abhängigkeitseigenschaft zugeordnet ist.</summary>
        <value>Der relevante Bezeichner einer Abhängigkeitseigenschaft.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> -Wert ermöglicht, dass der Bezeichner einer schreibgeschützten Eigenschaft an allgemeinen Eigenschafts System Vorgängen teilnimmt, indem einige der gleichen Schnittstellen verwendet werden, die für Abhängigkeits Eigenschaften mit Lese-/Schreibzugriff  
  
 Um den Get-Eigenschafts Accessor für eine schreibgeschützte Abhängigkeits Eigenschaft zu implementieren, sollten Sie einen <xref:System.Windows.DependencyProperty> Bezeichner für die Klasse erstellen und verfügbar machen. Bei diesem Verfahren werden zwei Ziele verfolgt:  
  
-   Ihre eigene Klasse benötigt den <xref:System.Windows.DependencyProperty> Bezeichner, um den Get-Accessor für den Eigenschafts Wrapper zu implementieren. Verwenden <xref:System.Windows.DependencyProperty> Sie als Parameter für den <xref:System.Windows.DependencyObject.GetValue%2A> -Befehl, der den Get-Accessor implementiert.  
  
-   <xref:System.Windows.DependencyProperty>Bezeichner machen Ihre Abhängigkeits Eigenschaft für das Eigenschaften System verfügbar, sodass andere Methoden, die auf Metadaten basieren, in einem Standardformular darauf zugreifen können. Wenn Sie beispielsweise für einige <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> <xref:System.Windows.DependencyObject> aufgerufen und eine Enumeration von lokal festgelegten Eigenschaften (Werte und Bezeichnern) abgerufen haben, ist der für eine schreibgeschützte <xref:System.Windows.DependencyProperty> Abhängigkeits Eigenschaft zurückgegebene Bezeichner der Wert und nicht der Schlüssel. Wenn Sie einen <xref:System.Windows.DependencyProperty> Bezeichner nicht verfügbar machen, erhöht sich die Sicherheit der schreibgeschützten Abhängigkeits Eigenschaft in keiner Weise. es werden nur Vorgänge, die ihre Eigenschaft einbeziehen, für nachfolgende abgeleitete Klassen und Klassen Instanzen etwas schwieriger.  
  
 Um den Bezeichner für die <xref:System.Windows.DependencyProperty> Klasse verfügbar zu machen, müssen Sie direkt auf Ihren Schlüssel aufzurufen. <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> Verwenden Sie diesen Wert, um `public static readonly` einen <xref:System.Windows.DependencyProperty> Bezeichner für die-Klasse zu <xref:System.Windows.DependencyPropertyKey>erstellen, die dem entspricht.  
  
   
  
## Examples  
 Im folgenden <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> Beispiel wird aufgerufen, um <xref:System.Windows.DependencyProperty> den Bezeichner (`AquariumGraphicProperty`) `AquariumGraphic` für die schreibgeschützte Abhängigkeits Eigenschaft einer Klasse verfügbar zu machen. Das Beispiel zeigt auch die <xref:System.Windows.DependencyPropertyKey> Erstellung (als internes Element) und den Get-Accessor für `AquariumGraphic`.  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata -&gt; unit" Usage="dependencyPropertyKey.OverrideMetadata (forType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType">Der Typ, für den diese Abhängigkeitseigenschaft vorhanden ist, sowie die Metadaten müssen überschrieben werden.</param>
        <param name="typeMetadata">Für diesen Typ angegebene Metadaten.</param>
        <summary>Überschreibt die Metadaten einer schreibgeschützten Abhängigkeitseigenschaft, die durch diesen Bezeichner einer Abhängigkeitseigenschaft dargestellt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Überschreiben von Metadaten für eine schreibgeschützte Abhängigkeits Eigenschaft erfolgt aus ähnlichen Gründen wie das Überschreiben von Metadaten für eine Abhängigkeits Eigenschaft mit Lese-/Schreibzugriff und ist auf den Zugriff auf der Schlüssel Ebene beschränkt, da das in den Metadaten angegebene Verhalten das festgelegte Verhalten ändern kann (das der Standardwert ist beispielsweise).  
  
 Wie bei Abhängigkeits Eigenschaften mit Lese-/Schreibzugriff sollte das Überschreiben von Metadaten für eine schreibgeschützte Abhängigkeits Eigenschaft nur erfolgen, bevor diese Eigenschaft vom Eigenschaften System verwendet wird (Dies entspricht der Zeit, in der bestimmte Instanzen von Objekten, die die die Eigenschaft wird instanziiert). Aufrufe von `forType` sollten nur innerhalb der statischen Konstruktoren des Typs ausgeführt werden, der sich selbst als Parameter dieser Methode bereitstellt, oder für die entsprechende Initialisierung dieser Klasse. <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>  
  
 Diese Methode leitet effektiv an die <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> -Methode weiter und <xref:System.Windows.DependencyPropertyKey> übergibt die-Instanz als Schlüsselparameter.  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Metadaten für eine vorhandene schreibgeschützte Abhängigkeits Eigenschaft, die von einer Klasse geerbt wird, überschrieben. In diesem Fall bestand das Ziel des Szenarios darin, einen coerce-Wert Rückruf hinzuzufügen, den die Metadaten der Basis Eigenschaft nicht enthielten. Sie können Metadaten auch aus anderen Gründen überschreiben, in denen das Überschreiben von Metadaten in der Regel angemessen ist ( <xref:System.Windows.FrameworkPropertyMetadataOptions> Ändern des Standardwerts, Hinzufügen von Werten usw.).  
  
 [!code-csharp[WPFAquariumSln#RODPOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodpoverride)]
 [!code-vb[WPFAquariumSln#RODPOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodpoverride)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Versuchte Überschreibung von Metadaten für eine Abhängigkeitseigenschaft mit Schreib- und Leseberechtigungen (kann nicht mit dieser Signatur ausgeführt werden).</exception>
        <exception cref="T:System.ArgumentException">Metadaten wurden für die Eigenschaft bereits festgelegt, da sie im bereitgestellten Typ bereits vorhanden sind.</exception>
        <altmember cref="T:System.Windows.DependencyProperty" />
        <altmember cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      </Docs>
    </Member>
  </Members>
</Type>

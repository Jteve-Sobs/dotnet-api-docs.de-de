<Type Name="WeakEventManager" FullName="System.Windows.WeakEventManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e7a44b791800ff544c7087f3aa44377d7008c985" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36455800" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class WeakEventManager : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract WeakEventManager extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.WeakEventManager" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WeakEventManager&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class WeakEventManager abstract : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type WeakEventManager = class&#xA;    inherit DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="309cc-101">Provides a base class for the event manager that is used in the *weak event pattern*.</span>
      <span class="sxs-lookup">
        <span data-stu-id="309cc-101">Provides a base class for the event manager that is used in the *weak event pattern*.</span>
      </span>
      <span data-ttu-id="309cc-102">The manager adds and removes listeners for events (or callbacks) that also use the pattern.</span>
      <span class="sxs-lookup">
        <span data-stu-id="309cc-102">The manager adds and removes listeners for events (or callbacks) that also use the pattern.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="309cc-103">Sie verwenden das schwacher Ereignismuster in der Regel auf, wenn die Ereignisquelle eine Objektlebensdauer besitzt, die unabhängig von der Ereignislistener ist.</span><span class="sxs-lookup"><span data-stu-id="309cc-103">You typically use the weak event pattern when the event source has an object lifetime that is independent of the event listeners.</span></span> <span data-ttu-id="309cc-104">Mit dem zentralen Ereignis verteilen die Möglichkeit, eine <xref:System.Windows.WeakEventManager> können Sie den Listener-Handler werden vom Garbage Collector gesammelt, selbst wenn das Quellobjekt weiterhin besteht.</span><span class="sxs-lookup"><span data-stu-id="309cc-104">Using the central event dispatching capability of a <xref:System.Windows.WeakEventManager> allows the listener's handlers to be garbage collected even if the source object persists.</span></span> <span data-ttu-id="309cc-105">Im Gegensatz dazu, eine reguläre Ereignis ereigniseinbindung mithilfe der `+=` Operator bewirkt, dass die Quelle des potenziell nicht verbundene einen Verweis auf die Listener enthalten.</span><span class="sxs-lookup"><span data-stu-id="309cc-105">By contrast, a regular event hookup using the `+=` operator causes the potentially disconnected source to hold a reference to the listeners.</span></span> <span data-ttu-id="309cc-106">Dadurch wird verhindert, dass den Empfänger Garbage collection rechtzeitig verarbeitet werden.</span><span class="sxs-lookup"><span data-stu-id="309cc-106">This prevents the receiver from being garbage collected in a timely fashion.</span></span>  
  
 <span data-ttu-id="309cc-107">Eine allgemeine Situation, in denen die Lebensdauer Beziehungen zwischen Datenquellen und die Listener verwenden soll, das schwacher Ereignismuster ist die Behandlung von Update-Ereignisse, die aus datenbindungen stammen.</span><span class="sxs-lookup"><span data-stu-id="309cc-107">One common situation where the lifetime relationships between sources and listeners should use of the weak event pattern is the handling of update events coming from data bindings.</span></span>  
  
 <span data-ttu-id="309cc-108">Das schwacher Ereignismuster kann auch für Rückrufe und regelmäßigem Ereignis verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="309cc-108">The weak event pattern can also be used for callbacks and regular events.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="309cc-109">
        <para>Ein Beispiel eines benutzerdefinierten <see cref="T:System.Windows.WeakEventManager" />, finden Sie unter [schwache Ereignis Patterns](~/docs/framework/wpf/advanced/weak-event-patterns.md).</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="309cc-109">
          <para>For an example of a custom <see cref="T:System.Windows.WeakEventManager" />, see [Weak Event Patterns](~/docs/framework/wpf/advanced/weak-event-patterns.md).</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WeakEventManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WeakEventManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="309cc-110">Initializes base class values when it is used as the initializer by the constructor of a derived class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-110">Initializes base class values when it is used as the initializer by the constructor of a derived class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliverEvent">
      <MemberSignature Language="C#" Value="protected void DeliverEvent (object sender, EventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEvent(object sender, class System.EventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub DeliverEvent (sender As Object, args As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void DeliverEvent(System::Object ^ sender, EventArgs ^ args);" />
      <MemberSignature Language="F#" Value="member this.DeliverEvent : obj * EventArgs -&gt; unit" Usage="weakEventManager.DeliverEvent (sender, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">
          <span data-ttu-id="309cc-111">The object on which the event is being handled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-111">The object on which the event is being handled.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="309cc-112">An <see cref="T:System.EventArgs" /> that contains the event data for the event to deliver.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-112">An <see cref="T:System.EventArgs" /> that contains the event data for the event to deliver.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="309cc-113">Delivers the event being managed to each listener.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-113">Delivers the event being managed to each listener.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="309cc-114">Rufen Sie die <xref:System.Windows.WeakEventManager.DeliverEvent%2A> Methode innerhalb der Ereignishandler, die hinzugefügt oder entfernt werden, indem Sie die <xref:System.Windows.WeakEventManager.StartListening%2A> und <xref:System.Windows.WeakEventManager.StopListening%2A> Implementierungen von Unterklassen.</span><span class="sxs-lookup"><span data-stu-id="309cc-114">Call the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method from within the event handlers that are added or removed by the <xref:System.Windows.WeakEventManager.StartListening%2A> and <xref:System.Windows.WeakEventManager.StopListening%2A> implementations of subclasses.</span></span>  
  
 <span data-ttu-id="309cc-115">Beim Aufrufen der <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> Methode in Ihrer `AddListener` Implementierung einer Klasse, die Liste der Listener, die das Ereignis empfangen wird in einer zugrunde liegenden Auflistung beibehalten.</span><span class="sxs-lookup"><span data-stu-id="309cc-115">If you call the <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> method in your `AddListener` implementation of your class, the list of listeners receiving the event is kept in an underlying collection.</span></span> <span data-ttu-id="309cc-116">(`AddListener` ist nicht Teil einer Schnittstelle oder Klasse Vertrag.</span><span class="sxs-lookup"><span data-stu-id="309cc-116">(`AddListener` is not part of an interface or class contract.</span></span> <span data-ttu-id="309cc-117">`AddListener` vorgeschlagene Name für die Methode von der Managerklasse, die aufgerufen wird <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> und schwacher Ereignismuster-Listener für das Ereignis hinzugefügt.)</span><span class="sxs-lookup"><span data-stu-id="309cc-117">`AddListener` is the suggested name for the method of your manager class that calls <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and adds weak event pattern listeners for the event.)</span></span>  
  
 <span data-ttu-id="309cc-118"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> eine einzelne Liste hinzugefügt Listener.</span><span class="sxs-lookup"><span data-stu-id="309cc-118"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> adds listeners to a single list.</span></span> <span data-ttu-id="309cc-119">Wenn die Manager-Implementierung mehr als eine Liste von Listenern pro Ereignis verwaltet, verwenden Sie nicht <xref:System.Windows.WeakEventManager.DeliverEvent%2A> oder <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span><span class="sxs-lookup"><span data-stu-id="309cc-119">If your manager implementation maintains more than one list of listeners per event, do not use <xref:System.Windows.WeakEventManager.DeliverEvent%2A> or <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span></span> <span data-ttu-id="309cc-120">Ihre Implementierung sollte erstellen Sie stattdessen einen eigenen <xref:System.Windows.WeakEventManager.ListenerList> Instanzen `AddListener` sollte die entsprechende Liste Listener hinzu, und Ereignisse sollten durch Aufrufen der entsprechenden Listener Liste übermittelt werden <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span><span class="sxs-lookup"><span data-stu-id="309cc-120">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `AddListener` should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="DeliverEventToList">
      <MemberSignature Language="C#" Value="protected void DeliverEventToList (object sender, EventArgs args, System.Windows.WeakEventManager.ListenerList list);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEventToList(object sender, class System.EventArgs args, class System.Windows.WeakEventManager/ListenerList list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub DeliverEventToList (sender As Object, args As EventArgs, list As WeakEventManager.ListenerList)" />
      <MemberSignature Language="F#" Value="member this.DeliverEventToList : obj * EventArgs * System.Windows.WeakEventManager.ListenerList -&gt; unit" Usage="weakEventManager.DeliverEventToList (sender, args, list)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
        <Parameter Name="list" Type="System.Windows.WeakEventManager+ListenerList" />
      </Parameters>
      <Docs>
        <param name="sender">
          <span data-ttu-id="309cc-121">The object on which the event is being handled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-121">The object on which the event is being handled.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="309cc-122">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-122">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <param name="list">
          <span data-ttu-id="309cc-123">The provided <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-123">The provided <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="309cc-124">Delivers the event being managed to each listener in the provided list.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-124">Delivers the event being managed to each listener in the provided list.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="309cc-125">Diese Methode ist erforderlich, wenn die Manager-Implementierung verwaltet separate Listener Listen auf Grundlage der Informationen, die Daten für das Ereignis aufgezeichnet wird.</span><span class="sxs-lookup"><span data-stu-id="309cc-125">This method is necessary if your manager implementation maintains separate listeners lists based on information that is captured in the event data.</span></span> <span data-ttu-id="309cc-126">Wenn Sie dieses erweiterte Verfahren verwenden, müssen Sie erstellen und verwalten Sie separaten Listen als Teil der Manager-Implementierung, und müssen Sie eine Möglichkeit zum Hinzufügen von Listenern an eine bestimmte Liste angeben.</span><span class="sxs-lookup"><span data-stu-id="309cc-126">If you use this advanced technique, you must create and maintain the separate lists as part of your manager implementation, and you must provide a way to add listeners to a specific list.</span></span> <span data-ttu-id="309cc-127">Ihre Handlerimplementierung, das den raw-Ereignis überwacht, muss die Bedingung reagieren, die Sie verwenden, um die Listen zu unterscheiden, und übermitteln das Ereignis nur für die entsprechende Liste oder Listen.</span><span class="sxs-lookup"><span data-stu-id="309cc-127">Your handler implementation that listens to the raw event must act upon the condition that you use to differentiate the lists, and deliver the event only to the appropriate list or lists.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentManager">
      <MemberSignature Language="C#" Value="protected static System.Windows.WeakEventManager GetCurrentManager (Type managerType);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Windows.WeakEventManager GetCurrentManager(class System.Type managerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetCurrentManager (managerType As Type) As WeakEventManager" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Windows::WeakEventManager ^ GetCurrentManager(Type ^ managerType);" />
      <MemberSignature Language="F#" Value="static member GetCurrentManager : Type -&gt; System.Windows.WeakEventManager" Usage="System.Windows.WeakEventManager.GetCurrentManager managerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managerType">
          <span data-ttu-id="309cc-128">The type to obtain the <see cref="T:System.Windows.WeakEventManager" /> for.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-128">The type to obtain the <see cref="T:System.Windows.WeakEventManager" /> for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="309cc-129">Returns the <see cref="T:System.Windows.WeakEventManager" /> implementation that is used for the provided type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-129">Returns the <see cref="T:System.Windows.WeakEventManager" /> implementation that is used for the provided type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="309cc-130">The matching <see cref="T:System.Windows.WeakEventManager" /> implementation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-130">The matching <see cref="T:System.Windows.WeakEventManager" /> implementation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="309cc-131"><xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> Implementierungen rufen Sie diese Methode, die mit ihren übergebene `managerType`.</span><span class="sxs-lookup"><span data-stu-id="309cc-131"><xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implementations call this method using their passed `managerType`.</span></span> <span data-ttu-id="309cc-132">Das zurückgegebene <xref:System.Windows.WeakEventManager> wird dann als das Unterscheidungsmerkmal, der bestimmt, welches Ereignis empfangen wurde, und welche privaten Klassenhandler aufzurufenden verwendet.</span><span class="sxs-lookup"><span data-stu-id="309cc-132">The returned <xref:System.Windows.WeakEventManager> is then used as the differentiator that determines which event was received, and which private class handler to invoke.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="protected object this[object source] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Protected Property Item(source As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ source); void set(System::Object ^ source, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : obj with get, set" Usage="System.Windows.WeakEventManager.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="309cc-133">The zero-based index of the requested source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-133">The zero-based index of the requested source.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="309cc-134">Gets or sets the data being stored for the specified source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-134">Gets or sets the data being stored for the specified source.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="309cc-135">Daten, die vom Manager für diese Quelle gespeichert werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-135">Data being stored by the manager for this source.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="309cc-136">Abgeleitete Klassen können Daten- und zum Speichern in dieser Indexer auswählen.</span><span class="sxs-lookup"><span data-stu-id="309cc-136">Derived classes can choose what data and type to store in this indexer.</span></span> <span data-ttu-id="309cc-137">Dies ist in der Regel implementiert, als ein <xref:System.Windows.WeakEventManager.ListenerList>, dies ist eine Liste der schwachen Verweise auf den Listener.</span><span class="sxs-lookup"><span data-stu-id="309cc-137">Typically this is implemented as a <xref:System.Windows.WeakEventManager.ListenerList>, which is a list of weak references to listeners.</span></span> <span data-ttu-id="309cc-138">Sie müssen nur zum Ändern dieses Typs, wenn die <xref:System.Windows.WeakEventManager.ListenerList> darf nicht die erforderliche Informationen enthalten.</span><span class="sxs-lookup"><span data-stu-id="309cc-138">You would only have to change this type if the <xref:System.Windows.WeakEventManager.ListenerList> type cannot contain your required information.</span></span> <span data-ttu-id="309cc-139">Wenn also Sie überschreiben müssen die <xref:System.Windows.WeakEventManager.Purge%2A> Methode, damit alle Cleanup des zugrunde liegenden Typs ordnungsgemäß ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="309cc-139">If so, you will have to override the <xref:System.Windows.WeakEventManager.Purge%2A> method so that all cleanup of the underlying type is performed correctly.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="NewListenerList">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.WeakEventManager.ListenerList NewListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.WeakEventManager/ListenerList NewListenerList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.NewListenerList" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function NewListenerList () As WeakEventManager.ListenerList" />
      <MemberSignature Language="F#" Value="abstract member NewListenerList : unit -&gt; System.Windows.WeakEventManager.ListenerList&#xA;override this.NewListenerList : unit -&gt; System.Windows.WeakEventManager.ListenerList" Usage="weakEventManager.NewListenerList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="309cc-140">Returns a new object to contain listeners to an event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-140">Returns a new object to contain listeners to an event.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="309cc-141">A new object to contain listeners to an event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-141">A new object to contain listeners to an event.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedAddHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedAddHandler (source As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedAddHandler(System::Object ^ source, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.ProtectedAddHandler : obj * Delegate -&gt; unit" Usage="weakEventManager.ProtectedAddHandler (source, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="309cc-142">The source object that the handler delegate subscribes to.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-142">The source object that the handler delegate subscribes to.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="309cc-143">The delegate that handles the event that is raised by <c>source</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-143">The delegate that handles the event that is raised by <c>source</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="309cc-144">Adds the specified delegate as an event handler of the specified source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-144">Adds the specified delegate as an event handler of the specified source.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddListener">
      <MemberSignature Language="C#" Value="protected void ProtectedAddListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedAddListener (source As Object, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedAddListener(System::Object ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.ProtectedAddListener : obj * System.Windows.IWeakEventListener -&gt; unit" Usage="weakEventManager.ProtectedAddListener (source, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="309cc-145">The source to attach listeners to.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-145">The source to attach listeners to.</span>
          </span>
        </param>
        <param name="listener">
          <span data-ttu-id="309cc-146">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-146">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="309cc-147">Adds the provided listener to the provided source for the event being managed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-147">Adds the provided listener to the provided source for the event being managed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="309cc-148">Rufen Sie diese Methode in dieser Managerklasse `AddListener` Methoden auf <xref:System.Windows.WeakEventManager> Implementierungen.</span><span class="sxs-lookup"><span data-stu-id="309cc-148">Call this method within your manager class `AddListener` methods on <xref:System.Windows.WeakEventManager> implementations.</span></span> <span data-ttu-id="309cc-149">`AddListener` der empfohlene Name ist für die statische Methode, die Sie für die Managerklasse, um andere Klassen zum Hinzufügen eines Listeners für das schwacher Ereignismuster ermöglichen definieren.</span><span class="sxs-lookup"><span data-stu-id="309cc-149">`AddListener` is the suggested name for the static method you define on your manager class to enable other classes to add a listener for your weak event pattern.</span></span> <span data-ttu-id="309cc-150">`AddListener` sollten zwei Parameter annehmen: die `source` , der Listener angefügt wird, und die `listener` Instanz.</span><span class="sxs-lookup"><span data-stu-id="309cc-150">`AddListener` should take two parameters: the `source` where the listener is attached, and the `listener` instance.</span></span> <span data-ttu-id="309cc-151">Für Ihre `AddListener` -Implementierung, rufen die <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> -Methode für den aktuellen-Manager und übergeben Sie dieselben beiden Parameter.</span><span class="sxs-lookup"><span data-stu-id="309cc-151">For your `AddListener` implementation, call the <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> method on the current manager and pass the same two parameters.</span></span>  
  
 <span data-ttu-id="309cc-152">Wenn die Liste der Listener zuvor leer war, wurde <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> Aufrufe der <xref:System.Windows.WeakEventManager.StartListening%2A> Methode intern, die Ihre spezifischen angerufen <xref:System.Windows.WeakEventManager.StartListening%2A> über Polymorphismus überschreiben.</span><span class="sxs-lookup"><span data-stu-id="309cc-152">If the list of listeners was previously empty, <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> calls the <xref:System.Windows.WeakEventManager.StartListening%2A> method internally, which will call your specific <xref:System.Windows.WeakEventManager.StartListening%2A> override through polymorphism.</span></span>  
  
 <span data-ttu-id="309cc-153"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> fügt Listener zu einer einzelnen internen <xref:System.Windows.WeakEventManager.ListenerList> pro `source`.</span><span class="sxs-lookup"><span data-stu-id="309cc-153"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> adds listeners to a single internal <xref:System.Windows.WeakEventManager.ListenerList> per `source`.</span></span> <span data-ttu-id="309cc-154">Wenn die Manager-Implementierung mehr als eine Liste der Listener für jede Kombination der Ereignisquelle beibehält, verwenden Sie nicht <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span><span class="sxs-lookup"><span data-stu-id="309cc-154">If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span></span> <span data-ttu-id="309cc-155">Ihre Implementierung sollte erstellen Sie stattdessen einen eigenen <xref:System.Windows.WeakEventManager.ListenerList> Instanzen, `AddListener` sollte die entsprechende Liste Listener hinzu, und Ereignisse sollten die Liste der entsprechenden Listener übermittelt werden, durch den Aufruf der <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> Ereignisses statt auf die <xref:System.Windows.WeakEventManager.DeliverEvent%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="309cc-155">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `AddListener` should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling the <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> event instead of the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedRemoveHandler (source As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedRemoveHandler(System::Object ^ source, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.ProtectedRemoveHandler : obj * Delegate -&gt; unit" Usage="weakEventManager.ProtectedRemoveHandler (source, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="309cc-156">The source to remove the handler from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-156">The source to remove the handler from.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="309cc-157">The delegate to remove from <c>source</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-157">The delegate to remove from <c>source</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="309cc-158">Removes the previously added handler from the specified source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-158">Removes the previously added handler from the specified source.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveListener">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedRemoveListener (source As Object, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedRemoveListener(System::Object ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.ProtectedRemoveListener : obj * System.Windows.IWeakEventListener -&gt; unit" Usage="weakEventManager.ProtectedRemoveListener (source, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="309cc-159">The source to remove listeners from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-159">The source to remove listeners from.</span>
          </span>
        </param>
        <param name="listener">
          <span data-ttu-id="309cc-160">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-160">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="309cc-161">Removes a previously added listener from the provided source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-161">Removes a previously added listener from the provided source.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="309cc-162">Rufen Sie diese Methode in dieser Managerklasse `RemoveListener` Methoden auf <xref:System.Windows.WeakEventManager> Implementierungen.</span><span class="sxs-lookup"><span data-stu-id="309cc-162">Call this method within your manager class `RemoveListener` methods on <xref:System.Windows.WeakEventManager> implementations.</span></span> <span data-ttu-id="309cc-163">`RemoveListener` der empfohlene Name ist für die statische Methode, die Sie für die Managerklasse, um andere Klassen Entfernen eines Listeners für das schwacher Ereignismuster ermöglichen definieren.</span><span class="sxs-lookup"><span data-stu-id="309cc-163">`RemoveListener` is the suggested name for the static method you define on your manager class to enable other classes to remove a listener for your weak event pattern.</span></span> <span data-ttu-id="309cc-164">`RemoveListener` sollten zwei Parameter annehmen: die `source` , der Listener entfernt wird, und die `listener` Klasse.</span><span class="sxs-lookup"><span data-stu-id="309cc-164">`RemoveListener` should take two parameters: the `source` where the listener is removed, and the `listener` class.</span></span> <span data-ttu-id="309cc-165">Für Ihre `RemoveListener` -Implementierung, rufen die <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> -Methode für den aktuellen-Manager und übergeben Sie dieselben beiden Parameter.</span><span class="sxs-lookup"><span data-stu-id="309cc-165">For your `RemoveListener` implementation, call the <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> method on the current manager and pass the same two parameters.</span></span>  
  
 <span data-ttu-id="309cc-166">Wenn ein Aufruf von <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> den letzten Listener in der Liste entfernt <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> Aufrufe der <xref:System.Windows.WeakEventManager.StopListening%2A> Methode intern, die Ihre spezifischen angerufen <xref:System.Windows.WeakEventManager.StopListening%2A> über Polymorphismus überschreiben.</span><span class="sxs-lookup"><span data-stu-id="309cc-166">If a call to <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> removes the last listener in the list, <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> calls the <xref:System.Windows.WeakEventManager.StopListening%2A> method internally, which will call your specific <xref:System.Windows.WeakEventManager.StopListening%2A> override through polymorphism.</span></span>  
  
 <span data-ttu-id="309cc-167"><xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> entfernt Listener aus einer einzelnen internen <xref:System.Windows.WeakEventManager.ListenerList> pro `source`.</span><span class="sxs-lookup"><span data-stu-id="309cc-167"><xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> removes listeners from a single internal <xref:System.Windows.WeakEventManager.ListenerList> per `source`.</span></span> <span data-ttu-id="309cc-168">Wenn die Manager-Implementierung mehr als eine Liste der Listener für jede Kombination der Ereignisquelle beibehält, verwenden Sie nicht <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>.</span><span class="sxs-lookup"><span data-stu-id="309cc-168">If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>.</span></span> <span data-ttu-id="309cc-169">Die Implementierung sollten erstellen Sie stattdessen einen eigenen <xref:System.Windows.WeakEventManager.ListenerList> Instanzen, `RemoveListener` sollten Listener aus der entsprechenden Liste entfernen, und Ereignisse sollten die Liste der entsprechenden Listener übermittelt werden, durch den Aufruf der <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> -Methode anstelle der <xref:System.Windows.WeakEventManager.DeliverEvent%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="309cc-169">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `RemoveListener` should remove listeners from the appropriate list, and events should be delivered to the appropriate listener list by calling the <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> method instead of the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="protected virtual bool Purge (object source, object data, bool purgeAll);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool Purge(object source, object data, bool purgeAll) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Purge (source As Object, data As Object, purgeAll As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool Purge(System::Object ^ source, System::Object ^ data, bool purgeAll);" />
      <MemberSignature Language="F#" Value="abstract member Purge : obj * obj * bool -&gt; bool&#xA;override this.Purge : obj * obj * bool -&gt; bool" Usage="weakEventManager.Purge (source, data, purgeAll)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="purgeAll" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="309cc-170">The source for events being listened to.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-170">The source for events being listened to.</span>
          </span>
        </param>
        <param name="data">
          <span data-ttu-id="309cc-171">The data to check.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-171">The data to check.</span>
          </span>
          <span data-ttu-id="309cc-172">This object is expected to be a <see cref="T:System.Windows.WeakEventManager.ListenerList" /> implementation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-172">This object is expected to be a <see cref="T:System.Windows.WeakEventManager.ListenerList" /> implementation.</span>
          </span>
        </param>
        <param name="purgeAll">
          <span data-ttu-id="309cc-173">
            <see langword="true" /> to stop listening to <c>source</c>, and completely remove all entries from <c>data</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-173">
              <see langword="true" /> to stop listening to <c>source</c>, and completely remove all entries from <c>data</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="309cc-174">Removes inactive listener entries from the data list for the provided source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-174">Removes inactive listener entries from the data list for the provided source.</span>
          </span>
          <span data-ttu-id="309cc-175">Returns <see langword="true" /> if some entries were actually removed from the list.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-175">Returns <see langword="true" /> if some entries were actually removed from the list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="309cc-176">
            <see langword="true" /> if some entries were actually removed; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-176">
              <see langword="true" /> if some entries were actually removed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="309cc-177">Die <xref:System.Windows.WeakEventManager.Purge%2A> Methode verfügt über eine Standardimplementierung, die alle Einträge entfernt werden, wenn Daten einer <xref:System.Windows.WeakEventManager.ListenerList>.</span><span class="sxs-lookup"><span data-stu-id="309cc-177">The <xref:System.Windows.WeakEventManager.Purge%2A> method has a default implementation that will remove all entries when data is a <xref:System.Windows.WeakEventManager.ListenerList>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="309cc-178">
            <para>Wenn die zugrunde liegende Typ der <see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /> ist etwas anders als <see cref="T:System.Windows.WeakEventManager.ListenerList" />, oder enthält Daten, die außerhalb einer <see cref="T:System.Windows.WeakEventManager.ListenerList" />, müssen Sie überschreiben die <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> Methode. Die Außerkraftsetzung sollten Aufräum-Verhalten für die Liste der alternativen Elemente angeben. Im Allgemeinen sollte die Außerkraftsetzung Verhalten bereitzustellen, ohne die basisimplementierung aufrufen. Wenn eine bestimmte <see cref="T:System.Windows.WeakEventManager.ListenerList" /> weiterhin benötigt Clearing Aufruf <see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" />.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-178">
              <para>If the underlying type for the <see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /> is something other than <see cref="T:System.Windows.WeakEventManager.ListenerList" />, or contains data beyond a <see cref="T:System.Windows.WeakEventManager.ListenerList" />, you must override the <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> method. The override should provide purge behavior for the alternate type items list. Generally, the override should provide behavior without calling the base implementation. If a specific <see cref="T:System.Windows.WeakEventManager.ListenerList" /> still needs clearing, call <see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" />.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="ReadLock">
      <MemberSignature Language="C#" Value="protected IDisposable ReadLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable ReadLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ReadLock" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ReadLock As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IDisposable ^ ReadLock { IDisposable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadLock : IDisposable" Usage="System.Windows.WeakEventManager.ReadLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="309cc-179">Establishes a read-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-179">Establishes a read-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="309cc-180">Ein Objekt, das zum Einrichten einer Sperre für die Tabelle Datenmember und dann verworfen werden, ordnungsgemäß mit einer <see langword="using" /> erstellen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-180">An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <see langword="using" /> construct.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="309cc-181">In abgeleiteten Klassen Abfragen, die in enthaltenen Tabelle <xref:System.Windows.WeakEventManager.Item%2A> sollten treten immer innerhalb einer `using (ReadLock) { ... }` -Klausel, mit Ausnahme von Abfragen, die bereits in eine Schreibsperre sind.</span><span class="sxs-lookup"><span data-stu-id="309cc-181">In derived classes, queries to the table contained in <xref:System.Windows.WeakEventManager.Item%2A> should always occur within a `using (ReadLock) { ... }` clause, except for queries that are already within a write lock.</span></span> <span data-ttu-id="309cc-182">Diese Abfragen möglicherweise erforderlich, wenn Ihre Klasse eine komplexere unterstützt `AddListener` Implementierung, die weitere Daten über hinaus erfordert die `source` und die `listener`, und verwendet die <xref:System.Windows.WeakEventManager.Item%2A> Auflistung zum Speichern der zusätzlichen Informationen.</span><span class="sxs-lookup"><span data-stu-id="309cc-182">These queries may be necessary if your class supports a more sophisticated `AddListener` implementation that requires more data beyond the `source` and the `listener`, and uses the <xref:System.Windows.WeakEventManager.Item%2A> collection to store the extra information.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.WriteLock" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="protected void Remove (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void Remove(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub Remove (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void Remove(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="member this.Remove : obj -&gt; unit" Usage="weakEventManager.Remove source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="309cc-183">The source to remove listener information for.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-183">The source to remove listener information for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="309cc-184">Removes all listeners for the specified source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-184">Removes all listeners for the specified source.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ScheduleCleanup">
      <MemberSignature Language="C#" Value="protected void ScheduleCleanup ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ScheduleCleanup() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ScheduleCleanup" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ScheduleCleanup ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ScheduleCleanup();" />
      <MemberSignature Language="F#" Value="member this.ScheduleCleanup : unit -&gt; unit" Usage="weakEventManager.ScheduleCleanup " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="309cc-185">Requests that a purge of unused entries in the underlying listener list be performed on a lower priority thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-185">Requests that a purge of unused entries in the underlying listener list be performed on a lower priority thread.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="309cc-186">Aufrufen der <xref:System.Windows.WeakEventManager.ScheduleCleanup%2A> Methode ist vergleichbar mit einem Aufruf der <xref:System.Windows.WeakEventManager.Purge%2A> -Methode für den aktuellen-Manager-Liste niedrigeren Threadpriorität mit der `purgeAll` Parametersatz auf `false`.</span><span class="sxs-lookup"><span data-stu-id="309cc-186">Calling the <xref:System.Windows.WeakEventManager.ScheduleCleanup%2A> method is similar to calling the <xref:System.Windows.WeakEventManager.Purge%2A> method on the current manager's list, at lower thread priority, with the `purgeAll` parameter set to `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="SetCurrentManager">
      <MemberSignature Language="C#" Value="protected static void SetCurrentManager (Type managerType, System.Windows.WeakEventManager manager);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void SetCurrentManager(class System.Type managerType, class System.Windows.WeakEventManager manager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub SetCurrentManager (managerType As Type, manager As WeakEventManager)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void SetCurrentManager(Type ^ managerType, System::Windows::WeakEventManager ^ manager);" />
      <MemberSignature Language="F#" Value="static member SetCurrentManager : Type * System.Windows.WeakEventManager -&gt; unit" Usage="System.Windows.WeakEventManager.SetCurrentManager (managerType, manager)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="manager" Type="System.Windows.WeakEventManager" />
      </Parameters>
      <Docs>
        <param name="managerType">
          <span data-ttu-id="309cc-187">The type to set the new event manager.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-187">The type to set the new event manager.</span>
          </span>
        </param>
        <param name="manager">
          <span data-ttu-id="309cc-188">The new event manager.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-188">The new event manager.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="309cc-189">Sets the current manager for the specified manager type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-189">Sets the current manager for the specified manager type.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="309cc-190">Rufen Sie die <xref:System.Windows.WeakEventManager.SetCurrentManager%2A> einen Manager initialisiert werden, wenn diese Methode ist erforderlich, durch den Aufruf von Ihrer `CurrentManager` Eigenschaft auf einen <xref:System.Windows.WeakEventManager> Implementierung.</span><span class="sxs-lookup"><span data-stu-id="309cc-190">Call the <xref:System.Windows.WeakEventManager.SetCurrentManager%2A> method to initialize a manager, if that is required by a call to your `CurrentManager` property on a <xref:System.Windows.WeakEventManager> implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="protected abstract void StartListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StartListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub StartListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void StartListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="abstract member StartListening : obj -&gt; unit" Usage="weakEventManager.StartListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="309cc-191">The source to begin listening on.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-191">The source to begin listening on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="309cc-192">When overridden in a derived class, starts listening for the event being managed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-192">When overridden in a derived class, starts listening for the event being managed.</span>
          </span>
          <span data-ttu-id="309cc-193">After the <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> method is first called, the manager should be in the state of calling <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> or <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> whenever the relevant event from the provided source is handled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-193">After the <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> method is first called, the manager should be in the state of calling <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> or <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> whenever the relevant event from the provided source is handled.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="309cc-194">
            <para>
              <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> Außerkraftsetzungen sollte einen Handler hinzuzufügen, auf das bereitgestellte <paramref name="source" />. Der Handler wird vom Manager selbst deklariert. Der Klassenhandler nicht öffentlich sein muss, und sollte nur als Reaktion auf das verwaltete Ereignis aufgerufen werden. Der Klassenhandler aufrufen sollten die <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> Methode oder die <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> Methode entsprechend.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-194">
              <para>
                <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> overrides should add a handler to the provided <paramref name="source" />. The handler is declared by the manager itself. The class handler should not be public, and it should only be called in response to the event being managed. The class handler should call the <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> method or the <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> method appropriately.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="protected abstract void StopListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StopListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StopListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub StopListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void StopListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="abstract member StopListening : obj -&gt; unit" Usage="weakEventManager.StopListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="309cc-195">The source to stop listening on.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-195">The source to stop listening on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="309cc-196">When overridden in a derived class, stops listening on the provided source for the event being managed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-196">When overridden in a derived class, stops listening on the provided source for the event being managed.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="309cc-197">
            <para>
              <see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /> Implementierungen sollten den Klassenhandler entfernen, durch Hinzufügen der <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> Methode. Entfernen einen Listener sollten die Liste der Listener nicht deaktivieren. Stattdessen sollten sie nur die Klassenhandler (vielleicht vorübergehend) trennen. Andere Methoden zur Verfügung, für das Löschen der gesamten Liste, z. B. die <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> Methode mit der <paramref name="purgeAll" /> Parametersatz auf <see langword="true" />.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-197">
              <para>
                <see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /> implementations should remove the class handler as added by the <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> method. Removing a listener should not clear the listener list. Instead, it should only disconnect the class handler (perhaps temporarily). Other methods are available for clearing the entire list, such as the <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> method with the <paramref name="purgeAll" /> parameter set to <see langword="true" />.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLock">
      <MemberSignature Language="C#" Value="protected IDisposable WriteLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable WriteLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.WriteLock" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property WriteLock As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IDisposable ^ WriteLock { IDisposable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WriteLock : IDisposable" Usage="System.Windows.WeakEventManager.WriteLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="309cc-198">Establishes a write-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-198">Establishes a write-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="309cc-199">Ein Objekt, das zum Einrichten einer Sperre für die Tabelle Datenmember und dann verworfen werden, ordnungsgemäß mit einer <see langword="using" /> erstellen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309cc-199">An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <see langword="using" /> construct.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="309cc-200">In abgeleiteten Klassen sollten alle Änderungen an der zugrunde liegenden Datentabelle treten innerhalb einer `using (WriteLock) { ... }` Klausel.</span><span class="sxs-lookup"><span data-stu-id="309cc-200">In derived classes, all modifications to the underlying data table should occur within a `using (WriteLock) { ... }` clause.</span></span> <span data-ttu-id="309cc-201">Diese Änderungen ist möglicherweise erforderlich, wenn Ihre Klasse eine komplexere unterstützt `AddListener` Implementierung, die über mehr Daten benötigt die `source` und `listener`, und verwendet die <xref:System.Windows.WeakEventManager.Item%2A> Auflistung zum Speichern der zusätzlichen Informationen.</span><span class="sxs-lookup"><span data-stu-id="309cc-201">These modifications may be necessary if your class supports a more sophisticated `AddListener` implementation that requires more data beyond the `source` and the `listener`, and uses the <xref:System.Windows.WeakEventManager.Item%2A> collection to store the extra information.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.ReadLock" />
      </Docs>
    </Member>
  </Members>
</Type>
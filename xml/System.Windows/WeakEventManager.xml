<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="WeakEventManager.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5ac94cdae430bda3a59a21292d13f613f0012919d.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac94cdae430bda3a59a21292d13f613f0012919d</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.WeakEventManager">
          <source>Provides a base class for the event manager that is used in the <bpt id="p1">*</bpt>weak event pattern<ept id="p1">*</ept>.</source>
          <target state="translated">Stellt eine Basisklasse für den Ereignis-Manager bereit, der im <bpt id="p1">*</bpt>Muster für schwache Ereignisse<ept id="p1">*</ept> verwendet wird.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Windows.WeakEventManager">
          <source>The manager adds and removes listeners for events (or callbacks) that also use the pattern.</source>
          <target state="translated">Der Manager fügt Listener hinzu oder entfernt diese für Ereignisse (oder Rückrufe), die ebenfalls dieses Muster verwenden.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>You typically use the weak event pattern when the event source has an object lifetime that is independent of the event listeners.</source>
          <target state="translated">Sie verwenden das schwacher Ereignismuster in der Regel auf, wenn die Ereignisquelle eine Objektlebensdauer besitzt, die unabhängig von der Ereignislistener ist.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>Using the central event dispatching capability of a <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> allows the listener's handlers to be garbage collected even if the source object persists.</source>
          <target state="translated">Mit dem zentralen Ereignis verteilen die Möglichkeit, eine <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> können Sie den Listener-Handler werden vom Garbage Collector gesammelt, selbst wenn das Quellobjekt weiterhin besteht.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>By contrast, a regular event hookup using the <ph id="ph1">`+=`</ph> operator causes the potentially disconnected source to hold a reference to the listeners.</source>
          <target state="translated">Im Gegensatz dazu, eine reguläre Ereignis ereigniseinbindung mithilfe der <ph id="ph1">`+=`</ph> Operator bewirkt, dass die Quelle des potenziell nicht verbundene einen Verweis auf die Listener enthalten.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>This prevents the receiver from being garbage collected in a timely fashion.</source>
          <target state="translated">Dadurch wird verhindert, dass den Empfänger Garbage collection rechtzeitig verarbeitet werden.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>One common situation where the lifetime relationships between sources and listeners should use of the weak event pattern is the handling of update events coming from data bindings.</source>
          <target state="translated">Eine allgemeine Situation, in denen die Lebensdauer Beziehungen zwischen Datenquellen und die Listener verwenden soll, das schwacher Ereignismuster ist die Behandlung von Update-Ereignisse, die aus datenbindungen stammen.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>The weak event pattern can also be used for callbacks and regular events.</source>
          <target state="translated">Das schwacher Ereignismuster kann auch für Rückrufe und regelmäßigem Ereignis verwendet werden.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>For an example of a custom <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>, see <bpt id="p1">[</bpt>Weak Event Patterns<ept id="p1">](~/docs/framework/wpf/advanced/weak-event-patterns.md)</ept>.</source>
          <target state="translated">Ein Beispiel eines benutzerdefinierten <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>, finden Sie unter <bpt id="p1">[</bpt>schwacher Ereignismuster<ept id="p1">](~/docs/framework/wpf/advanced/weak-event-patterns.md)</ept>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.#ctor">
          <source>Initializes base class values when it is used as the initializer by the constructor of a derived class.</source>
          <target state="translated">Initialisiert als Initialisierer innerhalb des Konstruktors einer abgeleiteten Klasse die Basisklassenwerte.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>The object on which the event is being handled.</source>
          <target state="translated">Das Objekt, für das das Ereignis behandelt wird.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data for the event to deliver.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>, das die vom Ereignis zu liefernden Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>Delivers the event being managed to each listener.</source>
          <target state="translated">Übermittelt das verwaltete Ereignis an alle Listener.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>Call the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> method from within the event handlers that are added or removed by the <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;</ph> implementations of subclasses.</source>
          <target state="translated">Rufen Sie die <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> Methode innerhalb der Ereignishandler, die hinzugefügt oder entfernt werden, indem Sie die <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;</ph> und <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;</ph> Implementierungen von Unterklassen.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>If you call the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> method in your <ph id="ph2">`AddListener`</ph> implementation of your class, the list of listeners receiving the event is kept in an underlying collection.</source>
          <target state="translated">Beim Aufrufen der <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> Methode in Ihrer <ph id="ph2">`AddListener`</ph> Implementierung einer Klasse, die Liste der Listener, die das Ereignis empfangen wird in einer zugrunde liegenden Auflistung beibehalten.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>(<ph id="ph1">`AddListener`</ph> is not part of an interface or class contract.</source>
          <target state="translated">(<ph id="ph1">`AddListener`</ph> ist nicht Teil einer Schnittstelle oder Klasse Vertrag.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source><ph id="ph1">`AddListener`</ph> is the suggested name for the method of your manager class that calls <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> and adds weak event pattern listeners for the event.)</source>
          <target state="translated"><ph id="ph1">`AddListener`</ph> vorgeschlagene Name für die Methode von der Managerklasse, die aufgerufen wird <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> und schwacher Ereignismuster-Listener für das Ereignis hinzugefügt.)</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> adds listeners to a single list.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> eine einzelne Liste hinzugefügt Listener.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>If your manager implementation maintains more than one list of listeners per event, do not use <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph>.</source>
          <target state="translated">Wenn die Manager-Implementierung mehr als eine Liste von Listenern pro Ereignis verwaltet, verwenden Sie nicht <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> oder <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>Instead, your implementation should create its own <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> instances, <ph id="ph2">`AddListener`</ph> should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph>.</source>
          <target state="translated">Ihre Implementierung sollte erstellen Sie stattdessen einen eigenen <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> Instanzen <ph id="ph2">`AddListener`</ph> sollte die entsprechende Liste Listener hinzu, und Ereignisse sollten durch Aufrufen der entsprechenden Listener Liste übermittelt werden <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>The object on which the event is being handled.</source>
          <target state="translated">Das Objekt, für das das Ereignis behandelt wird.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>, das die Ereignisdaten enthält.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>The provided <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated">Die bereitgestellte <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>Delivers the event being managed to each listener in the provided list.</source>
          <target state="translated">Übermittelt das verwaltete Ereignis an jeden Listener in der bereitgestellten Liste.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>This method is necessary if your manager implementation maintains separate listeners lists based on information that is captured in the event data.</source>
          <target state="translated">Diese Methode ist erforderlich, wenn die Manager-Implementierung verwaltet separate Listener Listen auf Grundlage der Informationen, die Daten für das Ereignis aufgezeichnet wird.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>If you use this advanced technique, you must create and maintain the separate lists as part of your manager implementation, and you must provide a way to add listeners to a specific list.</source>
          <target state="translated">Wenn Sie dieses erweiterte Verfahren verwenden, müssen Sie erstellen und verwalten Sie separaten Listen als Teil der Manager-Implementierung, und müssen Sie eine Möglichkeit zum Hinzufügen von Listenern an eine bestimmte Liste angeben.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>Your handler implementation that listens to the raw event must act upon the condition that you use to differentiate the lists, and deliver the event only to the appropriate list or lists.</source>
          <target state="translated">Ihre Handlerimplementierung, das den raw-Ereignis überwacht, muss die Bedingung reagieren, die Sie verwenden, um die Listen zu unterscheiden, und übermitteln das Ereignis nur für die entsprechende Liste oder Listen.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
          <source>The type to obtain the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> for.</source>
          <target state="translated">Der Typ, für den der <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> abgerufen werden sollen.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> implementation that is used for the provided type.</source>
          <target state="translated">Gibt die <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>-Implementierung zurück, die für den bereitgestellten Typ verwendet wird.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
          <source>The matching <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> implementation.</source>
          <target state="translated">Die übereinstimmende <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>-Implementierung.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
          <source><ph id="ph1">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph> implementations call this method using their passed <ph id="ph2">`managerType`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph> Implementierungen rufen Sie diese Methode, die mit ihren übergebene <ph id="ph2">`managerType`</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
          <source>The returned <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> is then used as the differentiator that determines which event was received, and which private class handler to invoke.</source>
          <target state="translated">Das zurückgegebene <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> wird dann als das Unterscheidungsmerkmal, der bestimmt, welches Ereignis empfangen wurde, und welche privaten Klassenhandler aufzurufenden verwendet.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>The zero-based index of the requested source.</source>
          <target state="translated">Der nullbasierte Index der angeforderten Quelle.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>Gets or sets the data being stored for the specified source.</source>
          <target state="translated">Ruft die Daten ab, die für die angegebene Quelle gespeichert werden, oder legt diese fest.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>Data being stored by the manager for this source.</source>
          <target state="translated">Daten, die vom Manager für diese Quelle gespeichert werden.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>Derived classes can choose what data and type to store in this indexer.</source>
          <target state="translated">Abgeleitete Klassen können Daten- und zum Speichern in dieser Indexer auswählen.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>Typically this is implemented as a <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>, which is a list of weak references to listeners.</source>
          <target state="translated">Dies ist in der Regel implementiert, als ein <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>, dies ist eine Liste der schwachen Verweise auf den Listener.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>You would only have to change this type if the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> type cannot contain your required information.</source>
          <target state="translated">Sie müssen nur zum Ändern dieses Typs, wenn die <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> darf nicht die erforderliche Informationen enthalten.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>If so, you will have to override the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;</ph> method so that all cleanup of the underlying type is performed correctly.</source>
          <target state="translated">Wenn also Sie überschreiben müssen die <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;</ph> Methode, damit alle Cleanup des zugrunde liegenden Typs ordnungsgemäß ausgeführt wird.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.NewListenerList">
          <source>Returns a new object to contain listeners to an event.</source>
          <target state="translated">Gibt ein neues Objekt zurück, mit dem Listener zu einem Ereignis hinzugefügt werden.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.NewListenerList">
          <source>A new object to contain listeners to an event.</source>
          <target state="translated">Ein neues Objekt, mit dem Listener zu einem Ereignis hinzugefügt werden.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)">
          <source>The source object that the handler delegate subscribes to.</source>
          <target state="translated">Das Quellobjekt, das der Handlerdelegat abonniert.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)">
          <source>The delegate that handles the event that is raised by <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Delegat, der das Ereignis behandelt, das von <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept> ausgelöst wird.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)">
          <source>Adds the specified delegate as an event handler of the specified source.</source>
          <target state="translated">Fügt den angegebenen Delegaten als Ereignishandler der angegebenen Quelle hinzu.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>The source to attach listeners to.</source>
          <target state="translated">Die Quelle, an die Listener angefügt werden.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>The listening class (which must implement <ph id="ph1">&lt;see cref="T:System.Windows.IWeakEventListener" /&gt;</ph>).</source>
          <target state="translated">Die Überwachungsklasse (diese muss <ph id="ph1">&lt;see cref="T:System.Windows.IWeakEventListener" /&gt;</ph> implementieren).</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>Adds the provided listener to the provided source for the event being managed.</source>
          <target state="translated">Fügt den bereitgestellten Listener der bereitgestellten Quelle für das verwaltete Ereignis hinzu.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>Call this method within your manager class <ph id="ph1">`AddListener`</ph> methods on <ph id="ph2">&lt;xref:System.Windows.WeakEventManager&gt;</ph> implementations.</source>
          <target state="translated">Rufen Sie diese Methode in dieser Managerklasse <ph id="ph1">`AddListener`</ph> Methoden auf <ph id="ph2">&lt;xref:System.Windows.WeakEventManager&gt;</ph> Implementierungen.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source><ph id="ph1">`AddListener`</ph> is the suggested name for the static method you define on your manager class to enable other classes to add a listener for your weak event pattern.</source>
          <target state="translated"><ph id="ph1">`AddListener`</ph> der empfohlene Name ist für die statische Methode, die Sie für die Managerklasse, um andere Klassen zum Hinzufügen eines Listeners für das schwacher Ereignismuster ermöglichen definieren.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source><ph id="ph1">`AddListener`</ph> should take two parameters: the <ph id="ph2">`source`</ph> where the listener is attached, and the <ph id="ph3">`listener`</ph> instance.</source>
          <target state="translated"><ph id="ph1">`AddListener`</ph> sollten zwei Parameter annehmen: die <ph id="ph2">`source`</ph> , der Listener angefügt wird, und die <ph id="ph3">`listener`</ph> Instanz.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>For your <ph id="ph1">`AddListener`</ph> implementation, call the <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> method on the current manager and pass the same two parameters.</source>
          <target state="translated">Für Ihre <ph id="ph1">`AddListener`</ph> -Implementierung, rufen die <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> -Methode für den aktuellen-Manager und übergeben Sie dieselben beiden Parameter.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>If the list of listeners was previously empty, <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> calls the <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;</ph> method internally, which will call your specific <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;</ph> override through polymorphism.</source>
          <target state="translated">Wenn die Liste der Listener zuvor leer war, wurde <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> Aufrufe der <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;</ph> Methode intern, die Ihre spezifischen angerufen <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;</ph> über Polymorphismus überschreiben.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source><ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> adds listeners to a single internal <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> per <ph id="ph3">`source`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> fügt Listener zu einer einzelnen internen <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> pro <ph id="ph3">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph>.</source>
          <target state="translated">Wenn die Manager-Implementierung mehr als eine Liste der Listener für jede Kombination der Ereignisquelle beibehält, verwenden Sie nicht <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>Instead, your implementation should create its own <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> instances, <ph id="ph2">`AddListener`</ph> should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling the <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph> event instead of the <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> method.</source>
          <target state="translated">Ihre Implementierung sollte erstellen Sie stattdessen einen eigenen <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> Instanzen, <ph id="ph2">`AddListener`</ph> sollte die entsprechende Liste Listener hinzu, und Ereignisse sollten die Liste der entsprechenden Listener übermittelt werden, durch den Aufruf der <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph> Ereignisses statt auf die <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)">
          <source>The source to remove the handler from.</source>
          <target state="translated">Der Handler, der aus der Quelle entfernt werden soll.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)">
          <source>The delegate to remove from <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der vo <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept> zu entfernende Delegat.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)">
          <source>Removes the previously added handler from the specified source.</source>
          <target state="translated">Entfernt den zuvor hinzugefügten Handler aus der angegebenen Quelle.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>The source to remove listeners from.</source>
          <target state="translated">Die Quelle, aus der Listener entfernt werden sollen.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>The listening class (which must implement <ph id="ph1">&lt;see cref="T:System.Windows.IWeakEventListener" /&gt;</ph>).</source>
          <target state="translated">Die Überwachungsklasse (diese muss <ph id="ph1">&lt;see cref="T:System.Windows.IWeakEventListener" /&gt;</ph> implementieren).</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>Removes a previously added listener from the provided source.</source>
          <target state="translated">Entfernt einen zuvor hinzugefügten Listener aus der bereitgestellten Quelle.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>Call this method within your manager class <ph id="ph1">`RemoveListener`</ph> methods on <ph id="ph2">&lt;xref:System.Windows.WeakEventManager&gt;</ph> implementations.</source>
          <target state="translated">Rufen Sie diese Methode in dieser Managerklasse <ph id="ph1">`RemoveListener`</ph> Methoden auf <ph id="ph2">&lt;xref:System.Windows.WeakEventManager&gt;</ph> Implementierungen.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source><ph id="ph1">`RemoveListener`</ph> is the suggested name for the static method you define on your manager class to enable other classes to remove a listener for your weak event pattern.</source>
          <target state="translated"><ph id="ph1">`RemoveListener`</ph> der empfohlene Name ist für die statische Methode, die Sie für die Managerklasse, um andere Klassen Entfernen eines Listeners für das schwacher Ereignismuster ermöglichen definieren.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source><ph id="ph1">`RemoveListener`</ph> should take two parameters: the <ph id="ph2">`source`</ph> where the listener is removed, and the <ph id="ph3">`listener`</ph> class.</source>
          <target state="translated"><ph id="ph1">`RemoveListener`</ph> sollten zwei Parameter annehmen: die <ph id="ph2">`source`</ph> , der Listener entfernt wird, und die <ph id="ph3">`listener`</ph> Klasse.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>For your <ph id="ph1">`RemoveListener`</ph> implementation, call the <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> method on the current manager and pass the same two parameters.</source>
          <target state="translated">Für Ihre <ph id="ph1">`RemoveListener`</ph> -Implementierung, rufen die <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> -Methode für den aktuellen-Manager und übergeben Sie dieselben beiden Parameter.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>If a call to <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> removes the last listener in the list, <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> calls the <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;</ph> method internally, which will call your specific <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;</ph> override through polymorphism.</source>
          <target state="translated">Wenn ein Aufruf von <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> den letzten Listener in der Liste entfernt <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> Aufrufe der <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;</ph> Methode intern, die Ihre spezifischen angerufen <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;</ph> über Polymorphismus überschreiben.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source><ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> removes listeners from a single internal <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> per <ph id="ph3">`source`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> entfernt Listener aus einer einzelnen internen <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> pro <ph id="ph3">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph>.</source>
          <target state="translated">Wenn die Manager-Implementierung mehr als eine Liste der Listener für jede Kombination der Ereignisquelle beibehält, verwenden Sie nicht <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>Instead, your implementation should create its own <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> instances, <ph id="ph2">`RemoveListener`</ph> should remove listeners from the appropriate list, and events should be delivered to the appropriate listener list by calling the <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph> method instead of the <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> method.</source>
          <target state="translated">Die Implementierung sollten erstellen Sie stattdessen einen eigenen <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> Instanzen, <ph id="ph2">`RemoveListener`</ph> sollten Listener aus der entsprechenden Liste entfernen, und Ereignisse sollten die Liste der entsprechenden Listener übermittelt werden, durch den Aufruf der <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph> -Methode anstelle der <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>The source for events being listened to.</source>
          <target state="translated">Die Quelle für Ereignisse, auf die gelauscht wird.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>The data to check.</source>
          <target state="translated">Die zu prüfenden Daten.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>This object is expected to be a <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> implementation.</source>
          <target state="translated">Bei diesem Objekt wird erwartet, dass es sich um eine <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>-Implementierung handelt.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to stop listening to <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>, and completely remove all entries from <bpt id="p2">&lt;c&gt;</bpt>data<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, um das Lauschen auf <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept> zu beenden und alle Einträge aus <bpt id="p2">&lt;c&gt;</bpt>data<ept id="p2">&lt;/c&gt;</ept> zu entfernen.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>Removes inactive listener entries from the data list for the provided source.</source>
          <target state="translated">Entfernt inaktive Listenereinträge aus der Datenliste für die bereitgestellte Quelle.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>Returns <ph id="ph1">&lt;see langword="true" /&gt;</ph> if some entries were actually removed from the list.</source>
          <target state="translated">Gibt <ph id="ph1">&lt;see langword="true" /&gt;</ph> zurück, wenn tatsächlich Einträge aus der Liste entfernt wurden.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if some entries were actually removed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn tatsächlich Einträge entfernt wurden, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;</ph> method has a default implementation that will remove all entries when data is a <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;</ph> Methode verfügt über eine Standardimplementierung, die alle Einträge entfernt werden, wenn Daten einer <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>If the underlying type for the <ph id="ph1">&lt;see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /&gt;</ph> is something other than <ph id="ph2">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>, or contains data beyond a <ph id="ph3">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>, you must override the <ph id="ph4">&lt;see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /&gt;</ph> method.</source>
          <target state="translated">Wenn die zugrunde liegende Typ der <ph id="ph1">&lt;see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /&gt;</ph> ist etwas anders als <ph id="ph2">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>, oder enthält Daten, die außerhalb einer <ph id="ph3">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>, müssen Sie überschreiben die <ph id="ph4">&lt;see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>The override should provide purge behavior for the alternate type items list.</source>
          <target state="translated">Die Außerkraftsetzung sollten Aufräum-Verhalten für die Liste der alternativen Elemente angeben.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>Generally, the override should provide behavior without calling the base implementation.</source>
          <target state="translated">Im Allgemeinen sollte die Außerkraftsetzung Verhalten bereitzustellen, ohne die basisimplementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>If a specific <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> still needs clearing, call <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" /&gt;</ph>.</source>
          <target state="translated">Wenn eine bestimmte <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> weiterhin benötigt Clearing Aufruf <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.ReadLock">
          <source>Establishes a read-lock on the underlying data table, and returns an <ph id="ph1">&lt;see cref="T:System.IDisposable" /&gt;</ph>.</source>
          <target state="translated">Richtet auf der zugrunde liegenden Datentabelle eine Lesesperre ein und gibt ein <ph id="ph1">&lt;see cref="T:System.IDisposable" /&gt;</ph> zurück.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.ReadLock">
          <source>An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <ph id="ph1">&lt;see langword="using" /&gt;</ph> construct.</source>
          <target state="translated">Ein Objekt, das zum Einrichten einer Sperre für die Datentabellenmember verwendet werden kann und anschließend ordnungsgemäß mit einem <ph id="ph1">&lt;see langword="using" /&gt;</ph>-Konstrukt freigegeben wird.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.ReadLock">
          <source>In derived classes, queries to the table contained in <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;</ph> should always occur within a <ph id="ph2">`using (ReadLock) { ... }`</ph> clause, except for queries that are already within a write lock.</source>
          <target state="translated">In abgeleiteten Klassen Abfragen, die in enthaltenen Tabelle <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;</ph> sollten treten immer innerhalb einer <ph id="ph2">`using (ReadLock) { ... }`</ph> -Klausel, mit Ausnahme von Abfragen, die bereits in eine Schreibsperre sind.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.ReadLock">
          <source>These queries may be necessary if your class supports a more sophisticated <ph id="ph1">`AddListener`</ph> implementation that requires more data beyond the <ph id="ph2">`source`</ph> and the <ph id="ph3">`listener`</ph>, and uses the <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;</ph> collection to store the extra information.</source>
          <target state="translated">Diese Abfragen möglicherweise erforderlich, wenn Ihre Klasse eine komplexere unterstützt <ph id="ph1">`AddListener`</ph> Implementierung, die weitere Daten über hinaus erfordert die <ph id="ph2">`source`</ph> und die <ph id="ph3">`listener`</ph>, und verwendet die <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;</ph> Auflistung zum Speichern der zusätzlichen Informationen.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Remove(System.Object)">
          <source>The source to remove listener information for.</source>
          <target state="translated">Die Quelle, für die Listenerinformationen entfernt werden sollen.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Remove(System.Object)">
          <source>Removes all listeners for the specified source.</source>
          <target state="translated">Entfernt alle Listener für die angegebene Quelle.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ScheduleCleanup">
          <source>Requests that a purge of unused entries in the underlying listener list be performed on a lower priority thread.</source>
          <target state="translated">Fordert an, dass das Löschen nicht verwendeter Einträge aus der zugrunde liegenden Liste der Listener in einem Thread mit niedrigerer Priorität ausgeführt wird.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ScheduleCleanup">
          <source>Calling the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ScheduleCleanup%2A&gt;</ph> method is similar to calling the <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;</ph> method on the current manager's list, at lower thread priority, with the <ph id="ph3">`purgeAll`</ph> parameter set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated">Aufrufen der <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ScheduleCleanup%2A&gt;</ph> Methode ist vergleichbar mit einem Aufruf der <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;</ph> -Methode für den aktuellen-Manager-Liste niedrigeren Threadpriorität mit der <ph id="ph3">`purgeAll`</ph> Parametersatz auf <ph id="ph4">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)">
          <source>The type to set the new event manager.</source>
          <target state="translated">Der Typ, auf den der neue Ereignis-Manager festgelegt werden soll.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)">
          <source>The new event manager.</source>
          <target state="translated">Der neue Ereignis-Manager.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)">
          <source>Sets the current manager for the specified manager type.</source>
          <target state="translated">Legt den aktuellen Manager für den angegebenen Managertyp fest.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)">
          <source>Call the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.SetCurrentManager%2A&gt;</ph> method to initialize a manager, if that is required by a call to your <ph id="ph2">`CurrentManager`</ph> property on a <ph id="ph3">&lt;xref:System.Windows.WeakEventManager&gt;</ph> implementation.</source>
          <target state="translated">Rufen Sie die <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.SetCurrentManager%2A&gt;</ph> einen Manager initialisiert werden, wenn diese Methode ist erforderlich, durch den Aufruf von Ihrer <ph id="ph2">`CurrentManager`</ph> Eigenschaft auf einen <ph id="ph3">&lt;xref:System.Windows.WeakEventManager&gt;</ph> Implementierung.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source>The source to begin listening on.</source>
          <target state="translated">Die Quelle, die überwacht werden soll.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source>When overridden in a derived class, starts listening for the event being managed.</source>
          <target state="translated">Startet beim Überschreiben in einer abgeleiteten Klasse die Überwachung des verwalteten Ereignisses.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source>After the <ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /&gt;</ph> method is first called, the manager should be in the state of calling <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /&gt;</ph> or <ph id="ph3">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /&gt;</ph> whenever the relevant event from the provided source is handled.</source>
          <target state="translated">Nach dem ersten Aufruf der <ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /&gt;</ph>-Methode muss der Manager bereit sein für einen Aufruf von <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /&gt;</ph> oder <ph id="ph3">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /&gt;</ph>, sobald das relevante Ereignis aus der bereitgestellten Quelle behandelt werden muss.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /&gt;</ph> overrides should add a handler to the provided <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /&gt;</ph> Außerkraftsetzungen sollte einen Handler hinzuzufügen, auf das bereitgestellte <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source>The handler is declared by the manager itself.</source>
          <target state="translated">Der Handler wird vom Manager selbst deklariert.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source>The class handler should not be public, and it should only be called in response to the event being managed.</source>
          <target state="translated">Der Klassenhandler nicht öffentlich sein muss, und sollte nur als Reaktion auf das verwaltete Ereignis aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source>The class handler should call the <ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /&gt;</ph> method or the <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /&gt;</ph> method appropriately.</source>
          <target state="translated">Der Klassenhandler aufrufen sollten die <ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /&gt;</ph> Methode oder die <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /&gt;</ph> Methode entsprechend.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.StopListening(System.Object)">
          <source>The source to stop listening on.</source>
          <target state="translated">Die Quelle, deren Überwachung beendet werden soll.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.StopListening(System.Object)">
          <source>When overridden in a derived class, stops listening on the provided source for the event being managed.</source>
          <target state="translated">Stoppt beim Überschreiben in einer abgeleiteten Klasse die Überwachung der bereitgestellten Quelle für das verwaltete Ereignis.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StopListening(System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /&gt;</ph> implementations should remove the class handler as added by the <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /&gt;</ph> Implementierungen sollten den Klassenhandler entfernen, durch Hinzufügen der <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StopListening(System.Object)">
          <source>Removing a listener should not clear the listener list.</source>
          <target state="translated">Entfernen einen Listener sollten die Liste der Listener nicht deaktivieren.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StopListening(System.Object)">
          <source>Instead, it should only disconnect the class handler (perhaps temporarily).</source>
          <target state="translated">Stattdessen sollten sie nur die Klassenhandler (vielleicht vorübergehend) trennen.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StopListening(System.Object)">
          <source>Other methods are available for clearing the entire list, such as the <ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /&gt;</ph> method with the <ph id="ph2">&lt;paramref name="purgeAll" /&gt;</ph> parameter set to <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Andere Methoden zur Verfügung, für das Löschen der gesamten Liste, z. B. die <ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /&gt;</ph> Methode mit der <ph id="ph2">&lt;paramref name="purgeAll" /&gt;</ph> Parametersatz auf <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.WriteLock">
          <source>Establishes a write-lock on the underlying data table, and returns an <ph id="ph1">&lt;see cref="T:System.IDisposable" /&gt;</ph>.</source>
          <target state="translated">Richtet auf der zugrunde liegenden Datentabelle eine Schreibsperre ein und gibt ein <ph id="ph1">&lt;see cref="T:System.IDisposable" /&gt;</ph> zurück.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.WriteLock">
          <source>An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <ph id="ph1">&lt;see langword="using" /&gt;</ph> construct.</source>
          <target state="translated">Ein Objekt, das zum Einrichten einer Sperre für die Datentabellenmember verwendet werden kann und anschließend ordnungsgemäß mit einem <ph id="ph1">&lt;see langword="using" /&gt;</ph>-Konstrukt freigegeben wird.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.WriteLock">
          <source>In derived classes, all modifications to the underlying data table should occur within a <ph id="ph1">`using (WriteLock) { ... }`</ph> clause.</source>
          <target state="translated">In abgeleiteten Klassen sollten alle Änderungen an der zugrunde liegenden Datentabelle treten innerhalb einer <ph id="ph1">`using (WriteLock) { ... }`</ph> Klausel.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.WriteLock">
          <source>These modifications may be necessary if your class supports a more sophisticated <ph id="ph1">`AddListener`</ph> implementation that requires more data beyond the <ph id="ph2">`source`</ph> and the <ph id="ph3">`listener`</ph>, and uses the <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;</ph> collection to store the extra information.</source>
          <target state="translated">Diese Änderungen ist möglicherweise erforderlich, wenn Ihre Klasse eine komplexere unterstützt <ph id="ph1">`AddListener`</ph> Implementierung, die über mehr Daten benötigt die <ph id="ph2">`source`</ph> und <ph id="ph3">`listener`</ph>, und verwendet die <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;</ph> Auflistung zum Speichern der zusätzlichen Informationen.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
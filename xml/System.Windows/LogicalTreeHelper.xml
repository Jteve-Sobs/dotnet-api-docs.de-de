<Type Name="LogicalTreeHelper" FullName="System.Windows.LogicalTreeHelper">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fa987173cae01f0349100bb7794a8a3344944595" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83883760" /></Metadata><TypeSignature Language="C#" Value="public static class LogicalTreeHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LogicalTreeHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.LogicalTreeHelper" />
  <TypeSignature Language="VB.NET" Value="Public Class LogicalTreeHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogicalTreeHelper abstract sealed" />
  <TypeSignature Language="F#" Value="type LogicalTreeHelper = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt statische Hilfsmethoden zum Abfragen von Objekten in der logischen Struktur bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.LogicalTreeHelper>-Klasse stellt Methoden bereit, die Sie verwenden können, um untergeordnete Auflistungen von Objekten oder bestimmte Objekte innerhalb von untergeordneten Knoten der logischen Struktur zurückzugeben. Die meisten Objektstruktur Vorgänge, die Sie normalerweise ausführen, werden jedoch auch durch ähnliche Methoden oder Eigenschaften in <xref:System.Windows.FrameworkElement> oder <xref:System.Windows.FrameworkContentElement>verfügbar gemacht. Führen Sie z. B. folgende Schritte aus:  
  
-   Anstatt die statische <xref:System.Windows.LogicalTreeHelper.GetChildren%2A>-Methode Aufrufs, die einen Enumerator für die logischen untergeordneten Objekte zurückgibt, verwenden Sie die dedizierte Auflistung, die im Inhalts Modell für dieses Objekt verfügbar gemacht wird. Fast alle Objekte, die ein Inhalts Modell unterstützen, machen einige Eigenschaften verfügbar, die die Auflistung von untergeordneten Objekten enthalten, und bieten Sammlungs Schnittstellen Unterstützung direkt in dieser Auflistung.  
  
-   Anstatt die statische <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> Methode aufzurufen, um ein untergeordnetes Objekt durch Angabe des Namens abzurufen, rufen Sie die <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType>-oder <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType>-Methode für bestimmte Objekte auf.  
  
 <xref:System.Windows.LogicalTreeHelper> ist besonders nützlich für Analyse Szenarios, in denen Sie die logische Struktur rekursiv auf mehreren Ebenen nach oben oder unten übertragen und einen konsistenten Ansatz zum Untersuchen der verschiedenen übergeordneten oder untergeordneten Objekte verwenden möchten. In diesem Fall werden Sie möglicherweise auf eine Mischung aus Inhalts Modellen zugreifen, und die Verwendung der mehr Inhalts modellspezifischen APIs wäre zu komplex.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public static void BringIntoView (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BringIntoView(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub BringIntoView (current As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void BringIntoView(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member BringIntoView : System.Windows.DependencyObject -&gt; unit" Usage="System.Windows.LogicalTreeHelper.BringIntoView current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">Das Benutzeroberflächenelement, das angezeigt werden soll.</param>
        <summary>Versucht, das angeforderte Benutzeroberflächenelement anzuzeigen, und löst das <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" />-Ereignis für das Ziel aus, um die Ergebnisse zu melden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es ist in der Regel bequemer, die Instanzmethoden <xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=nameWithType> oder <xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=nameWithType> anstelle dieser statischen hilfsprogrammmethode aufzurufen. Das Verhalten der Instanzmethoden entspricht dem Verhalten der statischen Methode.  
  
 Auch wenn es sich bei dem bereitgestellten `current` UI-Element um eine <xref:System.Windows.FrameworkContentElement>handelt, ist das resultierende Ereignis immer noch dasselbe <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=nameWithType> Ereignis, wobei die Ursprungs <xref:System.Windows.FrameworkContentElement> durch Überprüfen der Ereignisdaten des Ereignisses identifiziert werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.RequestBringIntoView" />
      </Docs>
    </Member>
    <Member MemberName="FindLogicalNode">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject FindLogicalNode (System.Windows.DependencyObject logicalTreeNode, string elementName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject FindLogicalNode(class System.Windows.DependencyObject logicalTreeNode, string elementName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindLogicalNode (logicalTreeNode As DependencyObject, elementName As String) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyObject ^ FindLogicalNode(System::Windows::DependencyObject ^ logicalTreeNode, System::String ^ elementName);" />
      <MemberSignature Language="F#" Value="static member FindLogicalNode : System.Windows.DependencyObject * string -&gt; System.Windows.DependencyObject" Usage="System.Windows.LogicalTreeHelper.FindLogicalNode (logicalTreeNode, elementName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logicalTreeNode" Type="System.Windows.DependencyObject" />
        <Parameter Name="elementName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logicalTreeNode">Das Objekt, bei dem die Suche begonnen werden soll. Bei diesem Objekt muss es sich um ein <see cref="T:System.Windows.FrameworkElement" /> oder um ein <see cref="T:System.Windows.FrameworkContentElement" /> handeln.</param>
        <param name="elementName">Der Name des zu suchenden -Objekts.</param>
        <summary>Versucht, ein Objekt mit dem angegebenen Namen zu suchen und zurückzugeben. Die Suche startet beim angegebenen Objekt und wird in den untergeordneten Knoten der logischen Struktur fortgesetzt.</summary>
        <returns>Das Objekt mit dem entsprechenden Namen, falls ein solches Element gefunden wird. Gibt <see langword="null" /> zurück, wenn kein entsprechender Name in der Struktur gefunden wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Methoden <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType> und <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> sind sehr ähnlich wie <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>, funktionieren jedoch mit einer anderen Logik:  
  
-   Die Suchrichtung für <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> ist für untergeordnete Objekte (unten in der Struktur). die Suchrichtung für die `FindName` Methoden erfolgt in Bezug auf übergeordnete Objekte (oben in der Struktur).  
  
-   Die `FindName` Methoden unterliegen dem Konzept eines XAML-Namescope. Mit `FindName` Sie sicherstellen, dass nur ein Objekt dieses Namens vorhanden ist, da XAML-Namescopes die Eindeutigkeit erzwingen. Im Gegensatz dazu ignoriert <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> XAML-Namescope und kann während der Suche die XAML-Namescope-Grenzen überschreiten. Daher gibt es keine Garantie für die Eindeutigkeit des `elementName` namens, wenn Grenzen überschritten werden. Weitere Informationen zu XAML-Namescopes finden Sie unter [WPF-XAML-Namescopes](/dotnet/framework/wpf/advanced/wpf-xaml-namescopes).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChildren">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt die Auflistung der unmittelbar untergeordneten Objekte des angegebenen Objekts durch Verarbeiten der logischen Struktur zurück.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As DependencyObject) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.DependencyObject -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">Das Objekt, ab dem die Verarbeitung der logischen Struktur beginnen soll. Es wird erwartet, dass dieses Objekt entweder ein <see cref="T:System.Windows.FrameworkElement" /> oder ein <see cref="T:System.Windows.FrameworkContentElement" /> ist.</param>
        <summary>Gibt die Auflistung der unmittelbaren untergeordneten Objekte des angegebenen Objekts zurück, indem die logische Struktur verarbeitet wird.</summary>
        <returns>Die aufzählbare Auflistung der unmittelbaren untergeordneten Objekte aus der logischen Struktur des angegebenen Objekts.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Signatur und Hilfsmethode, wenn Sie nicht sicher sind, ob `current` ein <xref:System.Windows.FrameworkElement> oder <xref:System.Windows.FrameworkContentElement> ist, und dass Sie auch nicht sicher sind, ob die Klasse des Objekts eine eigene Inhalts Modell Auflistung unterstützt. Wenn Sie den Typ des Objekts ermitteln können, das abgefragt werden soll, überprüfen Sie die jeweilige Inhalts Eigenschaft, die für diesen Typ bereits vorhanden ist. Wenn Sie z. b. wissen, dass es sich bei dem Objekt, das Sie Abfragen, um einen <xref:System.Windows.Controls.ItemsControl>handelt, überprüfen Sie die Eigenschaft <xref:System.Windows.Controls.ItemsControl.Items%2A>, um eine stark typisierte Auflistung zu erhalten, die Unterstützung für die Sammlungs Schnittstelle hat und wahrscheinlich nützlicher als ein Enumerator ist  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkContentElement current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.FrameworkContentElement current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As FrameworkContentElement) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::FrameworkContentElement ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.FrameworkContentElement -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="current">Das Objekt, ab dem die Verarbeitung der logischen Struktur beginnen soll.</param>
        <summary>Gibt die Auflistung der unmittelbaren untergeordneten Objekte des angegebenen <see cref="T:System.Windows.FrameworkContentElement" /> zurück, indem die logische Struktur verarbeitet wird.</summary>
        <returns>Die aufzählbare Auflistung der unmittelbar untergeordneten Objekte beginnend mit <paramref name="current" /> in der logischen Struktur.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkElement current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.FrameworkElement current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As FrameworkElement) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::FrameworkElement ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.FrameworkElement -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="current">Das Objekt, ab dem die Verarbeitung der logischen Struktur beginnen soll.</param>
        <summary>Gibt die Auflistung der unmittelbaren untergeordneten Objekte des angegebenen <see cref="T:System.Windows.FrameworkElement" /> zurück, indem die logische Struktur verarbeitet wird.</summary>
        <returns>Die aufzählbare Auflistung der unmittelbar untergeordneten Objekte beginnend mit <paramref name="current" /> in der logischen Struktur.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParent">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject GetParent (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject GetParent(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetParent (current As DependencyObject) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyObject ^ GetParent(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member GetParent : System.Windows.DependencyObject -&gt; System.Windows.DependencyObject" Usage="System.Windows.LogicalTreeHelper.GetParent current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">Das Objekt, für das das übergeordnete Objekt gesucht werden soll. Hierbei wird ein <see cref="T:System.Windows.FrameworkElement" /> oder ein <see cref="T:System.Windows.FrameworkContentElement" /> erwartet.</param>
        <summary>Gibt das übergeordnete Objekt des angegebenen Objekts durch Verarbeiten der logischen Struktur zurück.</summary>
        <returns>Das angeforderte übergeordnete Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei dieser Methode handelt es sich lediglich um einen Wrapper, der die entsprechende Typversion (<xref:System.Windows.FrameworkElement> oder <xref:System.Windows.FrameworkContentElement>) der <xref:System.Windows.FrameworkElement.Parent%2A?displayProperty=nameWithType>-oder <xref:System.Windows.FrameworkContentElement.Parent%2A?displayProperty=nameWithType>-Eigenschaft abruft. Wenn Sie den `current` Typ nicht ermitteln können, sollten Sie stattdessen die entsprechenden Instanzeigenschaften überprüfen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

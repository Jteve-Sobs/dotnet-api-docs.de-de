<Type Name="LiteralEncoder" FullName="System.Reflection.Metadata.Ecma335.LiteralEncoder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9db4fcb513e3159af9c19147fa7bcd49bd1c9b2b" /><Meta Name="ms.sourcegitcommit" Value="394eb46af92ad32373cd2c7855b688846886ed40" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="11/23/2019" /><Meta Name="ms.locfileid" Value="74424785" /></Metadata><TypeSignature Language="C#" Value="public struct LiteralEncoder" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit LiteralEncoder extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Metadata.Ecma335.LiteralEncoder" />
  <TypeSignature Language="VB.NET" Value="Public Structure LiteralEncoder" />
  <TypeSignature Language="C++ CLI" Value="public value class LiteralEncoder" />
  <TypeSignature Language="F#" Value="type LiteralEncoder = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Metadata</AssemblyName>
    <AssemblyVersion>1.4.1.0</AssemblyVersion>
    <AssemblyVersion>1.4.2.0</AssemblyVersion>
    <AssemblyVersion>1.4.3.0</AssemblyVersion>
    <AssemblyVersion>1.4.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f7f90-101">Stellt Methoden zum Codieren von Literalen bereit.</span><span class="sxs-lookup"><span data-stu-id="f7f90-101">Provides methods for encoding literals.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LiteralEncoder (System.Reflection.Metadata.BlobBuilder builder);" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.Metadata.BlobBuilder builder) cil managed" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.LiteralEncoder.#ctor(System.Reflection.Metadata.BlobBuilder)" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As BlobBuilder)" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LiteralEncoder(System::Reflection::Metadata::BlobBuilder ^ builder);" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="F#" Value="new System.Reflection.Metadata.Ecma335.LiteralEncoder : System.Reflection.Metadata.BlobBuilder -&gt; System.Reflection.Metadata.Ecma335.LiteralEncoder" Usage="new System.Reflection.Metadata.Ecma335.LiteralEncoder builder" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Reflection.Metadata.BlobBuilder" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="builder"><span data-ttu-id="f7f90-102">Erstellt eine neue Instanz der <see cref="T:System.Reflection.Metadata.Ecma335.LiteralEncoder" />-Klasse mit dem angegebenen Blob-Generator.</span><span class="sxs-lookup"><span data-stu-id="f7f90-102">Creates a new instance of the <see cref="T:System.Reflection.Metadata.Ecma335.LiteralEncoder" /> class with the specified blob builder.</span></span></param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Builder">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.BlobBuilder Builder { get; }" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Metadata.BlobBuilder Builder" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Metadata.Ecma335.LiteralEncoder.Builder" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Builder As BlobBuilder" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Metadata::BlobBuilder ^ Builder { System::Reflection::Metadata::BlobBuilder ^ get(); };" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="F#" Value="member this.Builder : System.Reflection.Metadata.BlobBuilder" Usage="System.Reflection.Metadata.Ecma335.LiteralEncoder.Builder" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.BlobBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scalar">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.Ecma335.ScalarEncoder Scalar ();" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.Metadata.Ecma335.ScalarEncoder Scalar() cil managed" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.LiteralEncoder.Scalar" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function Scalar () As ScalarEncoder" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Metadata::Ecma335::ScalarEncoder Scalar();" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="F#" Value="member this.Scalar : unit -&gt; System.Reflection.Metadata.Ecma335.ScalarEncoder" Usage="literalEncoder.Scalar " FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.Ecma335.ScalarEncoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f7f90-103">Gibt den Encoder zur√ºck, der zum Codieren des Literalwerts verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="f7f90-103">Returns the encoder used to encode the literal value.</span></span></summary>
        <returns><span data-ttu-id="f7f90-104">Der Encoder des Literalwerts.</span><span class="sxs-lookup"><span data-stu-id="f7f90-104">The encoder of the literal value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TaggedScalar">
      <MemberSignature Language="C#" Value="public void TaggedScalar (Action&lt;System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder&gt; type, Action&lt;System.Reflection.Metadata.Ecma335.ScalarEncoder&gt; scalar);" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TaggedScalar(class System.Action`1&lt;valuetype System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder&gt; type, class System.Action`1&lt;valuetype System.Reflection.Metadata.Ecma335.ScalarEncoder&gt; scalar) cil managed" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.LiteralEncoder.TaggedScalar(System.Action{System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder},System.Action{System.Reflection.Metadata.Ecma335.ScalarEncoder})" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub TaggedScalar (type As Action(Of CustomAttributeElementTypeEncoder), scalar As Action(Of ScalarEncoder))" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TaggedScalar(Action&lt;System::Reflection::Metadata::Ecma335::CustomAttributeElementTypeEncoder&gt; ^ type, Action&lt;System::Reflection::Metadata::Ecma335::ScalarEncoder&gt; ^ scalar);" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="F#" Value="member this.TaggedScalar : Action&lt;System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder&gt; * Action&lt;System.Reflection.Metadata.Ecma335.ScalarEncoder&gt; -&gt; unit" Usage="literalEncoder.TaggedScalar (type, scalar)" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Action&lt;System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder&gt;" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="scalar" Type="System.Action&lt;System.Reflection.Metadata.Ecma335.ScalarEncoder&gt;" Index="1" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="f7f90-105">Ein Delegat, der verwendet wird, um den Typ des Literals zu codieren.</span><span class="sxs-lookup"><span data-stu-id="f7f90-105">A delegate used to encode the type of the literal.</span></span> <span data-ttu-id="f7f90-106">Wird von dieser Methode zuerst aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="f7f90-106">Called first by this method.</span></span></param>
        <param name="scalar"><span data-ttu-id="f7f90-107">Ein Delegat, der verwendet wird, um den Wert des Literals zu codieren.</span><span class="sxs-lookup"><span data-stu-id="f7f90-107">A delegate used to encode the value of the literal.</span></span> <span data-ttu-id="f7f90-108">Wird von dieser Methode als zweites aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="f7f90-108">Called second by this method.</span></span></param>
        <summary><span data-ttu-id="f7f90-109">Codiert den Typ und den Wert eines Literals mithilfe der angegebenen Delegaten.</span><span class="sxs-lookup"><span data-stu-id="f7f90-109">Encodes the type and the value of a literal using the specified delegates.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TaggedScalar">
      <MemberSignature Language="C#" Value="public void TaggedScalar (out System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder type, out System.Reflection.Metadata.Ecma335.ScalarEncoder scalar);" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TaggedScalar([out] valuetype System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder&amp; type, [out] valuetype System.Reflection.Metadata.Ecma335.ScalarEncoder&amp; scalar) cil managed" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.LiteralEncoder.TaggedScalar(System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder@,System.Reflection.Metadata.Ecma335.ScalarEncoder@)" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub TaggedScalar (ByRef type As CustomAttributeElementTypeEncoder, ByRef scalar As ScalarEncoder)" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TaggedScalar([Runtime::InteropServices::Out] System::Reflection::Metadata::Ecma335::CustomAttributeElementTypeEncoder % type, [Runtime::InteropServices::Out] System::Reflection::Metadata::Ecma335::ScalarEncoder % scalar);" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="F#" Value="member this.TaggedScalar : CustomAttributeElementTypeEncoder * ScalarEncoder -&gt; unit" Usage="literalEncoder.TaggedScalar (type, scalar)" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder" RefType="out" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="scalar" Type="System.Reflection.Metadata.Ecma335.ScalarEncoder" RefType="out" Index="1" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="f7f90-110">Nach Ausf√ºhrung dieser Methode ein benutzerdefinierter Attributelementtyp-Encoder, der verwendet wird, um den Typ des Literals zu codieren.</span><span class="sxs-lookup"><span data-stu-id="f7f90-110">When this method returns, a custom attribute element type encoder used to encode the type of the literal.</span></span></param>
        <param name="scalar"><span data-ttu-id="f7f90-111">Nach Ausf√ºhrung dieser Methode ein codierter Skalarwert, der verwendet wird, um den Wert des Literals zu codieren.</span><span class="sxs-lookup"><span data-stu-id="f7f90-111">When this method returns, a scalar encoded used to encode the value of the literal.</span></span></param>
        <summary><span data-ttu-id="f7f90-112">Gibt ein Encoderpaar zur√ºck, das zum Codieren des Typs und des Werts eines Literals in der Reihenfolge verwendet werden muss, in der sie in der Parameterliste stehen.</span><span class="sxs-lookup"><span data-stu-id="f7f90-112">Returns a pair of encoders that must be used to encode the type and value of a literal in the order they appear in the parameter list.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TaggedVector">
      <MemberSignature Language="C#" Value="public void TaggedVector (Action&lt;System.Reflection.Metadata.Ecma335.CustomAttributeArrayTypeEncoder&gt; arrayType, Action&lt;System.Reflection.Metadata.Ecma335.VectorEncoder&gt; vector);" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TaggedVector(class System.Action`1&lt;valuetype System.Reflection.Metadata.Ecma335.CustomAttributeArrayTypeEncoder&gt; arrayType, class System.Action`1&lt;valuetype System.Reflection.Metadata.Ecma335.VectorEncoder&gt; vector) cil managed" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.LiteralEncoder.TaggedVector(System.Action{System.Reflection.Metadata.Ecma335.CustomAttributeArrayTypeEncoder},System.Action{System.Reflection.Metadata.Ecma335.VectorEncoder})" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub TaggedVector (arrayType As Action(Of CustomAttributeArrayTypeEncoder), vector As Action(Of VectorEncoder))" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TaggedVector(Action&lt;System::Reflection::Metadata::Ecma335::CustomAttributeArrayTypeEncoder&gt; ^ arrayType, Action&lt;System::Reflection::Metadata::Ecma335::VectorEncoder&gt; ^ vector);" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="F#" Value="member this.TaggedVector : Action&lt;System.Reflection.Metadata.Ecma335.CustomAttributeArrayTypeEncoder&gt; * Action&lt;System.Reflection.Metadata.Ecma335.VectorEncoder&gt; -&gt; unit" Usage="literalEncoder.TaggedVector (arrayType, vector)" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arrayType" Type="System.Action&lt;System.Reflection.Metadata.Ecma335.CustomAttributeArrayTypeEncoder&gt;" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="vector" Type="System.Action&lt;System.Reflection.Metadata.Ecma335.VectorEncoder&gt;" Index="1" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="arrayType"><span data-ttu-id="f7f90-113">Ein Delegat, der verwendet wird, um den Typ des Vektors zu codieren.</span><span class="sxs-lookup"><span data-stu-id="f7f90-113">A delegate used to encode the type of the vector.</span></span> <span data-ttu-id="f7f90-114">Wird von dieser Methode zuerst aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="f7f90-114">Called first by this method.</span></span></param>
        <param name="vector"><span data-ttu-id="f7f90-115">Ein Delegat, der verwendet wird, um die Elemente des Vektors zu codieren.</span><span class="sxs-lookup"><span data-stu-id="f7f90-115">A delegate used to encode the items of the vector.</span></span> <span data-ttu-id="f7f90-116">Wird von dieser Methode als zweites aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="f7f90-116">Called second by this method.</span></span></param>
        <summary><span data-ttu-id="f7f90-117">Codiert den Typ und die Elemente eines Vektors mithilfe der angegebenen Delegaten.</span><span class="sxs-lookup"><span data-stu-id="f7f90-117">Encodes the type and the items of a vector literal using the specified delegates.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TaggedVector">
      <MemberSignature Language="C#" Value="public void TaggedVector (out System.Reflection.Metadata.Ecma335.CustomAttributeArrayTypeEncoder arrayType, out System.Reflection.Metadata.Ecma335.VectorEncoder vector);" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TaggedVector([out] valuetype System.Reflection.Metadata.Ecma335.CustomAttributeArrayTypeEncoder&amp; arrayType, [out] valuetype System.Reflection.Metadata.Ecma335.VectorEncoder&amp; vector) cil managed" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.LiteralEncoder.TaggedVector(System.Reflection.Metadata.Ecma335.CustomAttributeArrayTypeEncoder@,System.Reflection.Metadata.Ecma335.VectorEncoder@)" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub TaggedVector (ByRef arrayType As CustomAttributeArrayTypeEncoder, ByRef vector As VectorEncoder)" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TaggedVector([Runtime::InteropServices::Out] System::Reflection::Metadata::Ecma335::CustomAttributeArrayTypeEncoder % arrayType, [Runtime::InteropServices::Out] System::Reflection::Metadata::Ecma335::VectorEncoder % vector);" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="F#" Value="member this.TaggedVector : CustomAttributeArrayTypeEncoder * VectorEncoder -&gt; unit" Usage="literalEncoder.TaggedVector (arrayType, vector)" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arrayType" Type="System.Reflection.Metadata.Ecma335.CustomAttributeArrayTypeEncoder" RefType="out" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="vector" Type="System.Reflection.Metadata.Ecma335.VectorEncoder" RefType="out" Index="1" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="arrayType"><span data-ttu-id="f7f90-118">Nach Ausf√ºhrung dieser Methode ein benutzerdefinierter Attributarraytyp-Encoder, der verwendet wird, um den Typ des Vektors zu codieren.</span><span class="sxs-lookup"><span data-stu-id="f7f90-118">When this method returns, a custom attribute array type encoder used to encode the type of the vector.</span></span></param>
        <param name="vector"><span data-ttu-id="f7f90-119">Nach Ausf√ºhrung dieser Methode ein codierter Vektor, der verwendet wird, um die Elemente des Vektors zu codieren.</span><span class="sxs-lookup"><span data-stu-id="f7f90-119">When this method returns, a vector encoder used to encode the items of the vector.</span></span></param>
        <summary><span data-ttu-id="f7f90-120">Gibt ein Encoderpaar zur√ºck, das zum Codieren des Typs und der Elemente eines Vektorliterals in der Reihenfolge verwendet werden muss, in der sie in der Parameterliste stehen.</span><span class="sxs-lookup"><span data-stu-id="f7f90-120">Returns a pair of encoders that must be used to encode the type and the items of a vector literal in the order they appear in the parameter list.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Vector">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.Ecma335.VectorEncoder Vector ();" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.Metadata.Ecma335.VectorEncoder Vector() cil managed" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.LiteralEncoder.Vector" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function Vector () As VectorEncoder" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Metadata::Ecma335::VectorEncoder Vector();" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="F#" Value="member this.Vector : unit -&gt; System.Reflection.Metadata.Ecma335.VectorEncoder" Usage="literalEncoder.Vector " FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.Ecma335.VectorEncoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f7f90-121">Ruft einen Vektorencoder ab, der zum Codieren der Elemente eines Vektors verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="f7f90-121">Gets a vector encoder used to encode the items of a vector.</span></span></summary>
        <returns><span data-ttu-id="f7f90-122">Ein Vektorencoder, der zum Codieren der Elemente eines Vektors verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="f7f90-122">A vector encoder used to encode the items of a vector.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="NamedArgumentsEncoder" FullName="System.Reflection.Metadata.Ecma335.NamedArgumentsEncoder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4ea92d3355ca3ddf1195c3c63f5f586691c19c83" /><Meta Name="ms.sourcegitcommit" Value="99247877c0ae3f6b8619b55f52be0419280a6aa5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/27/2020" /><Meta Name="ms.locfileid" Value="88952159" /></Metadata><TypeSignature Language="C#" Value="public struct NamedArgumentsEncoder" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit NamedArgumentsEncoder extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Metadata.Ecma335.NamedArgumentsEncoder" />
  <TypeSignature Language="VB.NET" Value="Public Structure NamedArgumentsEncoder" />
  <TypeSignature Language="C++ CLI" Value="public value class NamedArgumentsEncoder" />
  <TypeSignature Language="F#" Value="type NamedArgumentsEncoder = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Metadata</AssemblyName>
    <AssemblyVersion>1.4.1.0</AssemblyVersion>
    <AssemblyVersion>1.4.2.0</AssemblyVersion>
    <AssemblyVersion>1.4.3.0</AssemblyVersion>
    <AssemblyVersion>1.4.4.0</AssemblyVersion>
    <AssemblyVersion>1.4.5.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NamedArgumentsEncoder (System.Reflection.Metadata.BlobBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.Metadata.BlobBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.NamedArgumentsEncoder.#ctor(System.Reflection.Metadata.BlobBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As BlobBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NamedArgumentsEncoder(System::Reflection::Metadata::BlobBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Metadata.Ecma335.NamedArgumentsEncoder : System.Reflection.Metadata.BlobBuilder -&gt; System.Reflection.Metadata.Ecma335.NamedArgumentsEncoder" Usage="new System.Reflection.Metadata.Ecma335.NamedArgumentsEncoder builder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Reflection.Metadata.BlobBuilder" />
      </Parameters>
      <Docs>
        <param name="builder"><span data-ttu-id="83feb-101">Ein Generator zum Codieren des benannten Arguments.</span><span class="sxs-lookup"><span data-stu-id="83feb-101">A builder for encoding the named argument.</span></span></param>
        <summary><span data-ttu-id="83feb-102">Initialisiert eine neue Instanz der <see cref="T:System.Reflection.Metadata.Ecma335.NamedArgumentsEncoder" />-Struktur.</span><span class="sxs-lookup"><span data-stu-id="83feb-102">Initializes a new instance of the <see cref="T:System.Reflection.Metadata.Ecma335.NamedArgumentsEncoder" /> structure.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddArgument">
      <MemberSignature Language="C#" Value="public void AddArgument (bool isField, Action&lt;System.Reflection.Metadata.Ecma335.NamedArgumentTypeEncoder&gt; type, Action&lt;System.Reflection.Metadata.Ecma335.NameEncoder&gt; name, Action&lt;System.Reflection.Metadata.Ecma335.LiteralEncoder&gt; literal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddArgument(bool isField, class System.Action`1&lt;valuetype System.Reflection.Metadata.Ecma335.NamedArgumentTypeEncoder&gt; type, class System.Action`1&lt;valuetype System.Reflection.Metadata.Ecma335.NameEncoder&gt; name, class System.Action`1&lt;valuetype System.Reflection.Metadata.Ecma335.LiteralEncoder&gt; literal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.NamedArgumentsEncoder.AddArgument(System.Boolean,System.Action{System.Reflection.Metadata.Ecma335.NamedArgumentTypeEncoder},System.Action{System.Reflection.Metadata.Ecma335.NameEncoder},System.Action{System.Reflection.Metadata.Ecma335.LiteralEncoder})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddArgument (isField As Boolean, type As Action(Of NamedArgumentTypeEncoder), name As Action(Of NameEncoder), literal As Action(Of LiteralEncoder))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddArgument(bool isField, Action&lt;System::Reflection::Metadata::Ecma335::NamedArgumentTypeEncoder&gt; ^ type, Action&lt;System::Reflection::Metadata::Ecma335::NameEncoder&gt; ^ name, Action&lt;System::Reflection::Metadata::Ecma335::LiteralEncoder&gt; ^ literal);" />
      <MemberSignature Language="F#" Value="member this.AddArgument : bool * Action&lt;System.Reflection.Metadata.Ecma335.NamedArgumentTypeEncoder&gt; * Action&lt;System.Reflection.Metadata.Ecma335.NameEncoder&gt; * Action&lt;System.Reflection.Metadata.Ecma335.LiteralEncoder&gt; -&gt; unit" Usage="namedArgumentsEncoder.AddArgument (isField, type, name, literal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isField" Type="System.Boolean" />
        <Parameter Name="type" Type="System.Action&lt;System.Reflection.Metadata.Ecma335.NamedArgumentTypeEncoder&gt;" />
        <Parameter Name="name" Type="System.Action&lt;System.Reflection.Metadata.Ecma335.NameEncoder&gt;" />
        <Parameter Name="literal" Type="System.Action&lt;System.Reflection.Metadata.Ecma335.LiteralEncoder&gt;" />
      </Parameters>
      <Docs>
        <param name="isField"><span data-ttu-id="83feb-103"><see langword="true" />, um ein Feld zu codieren, <see langword="false" />, um eine Eigenschaft zu codieren.</span><span class="sxs-lookup"><span data-stu-id="83feb-103"><see langword="true" /> to encode a field, <see langword="false" /> to encode a property.</span></span></param>
        <param name="type"><span data-ttu-id="83feb-104">Die Methode, die zuerst aufgerufen werden soll, um den Typ des Arguments zu codieren.</span><span class="sxs-lookup"><span data-stu-id="83feb-104">The method to call first to encode the type of the argument.</span></span></param>
        <param name="name"><span data-ttu-id="83feb-105">Die Methode, die als Zweites aufgerufen werden soll, um den Namen des Felds oder der Eigenschaft zu codieren.</span><span class="sxs-lookup"><span data-stu-id="83feb-105">The method to call second to encode the name of the field or property.</span></span></param>
        <param name="literal"><span data-ttu-id="83feb-106">Die Methode, die als Drittes aufgerufen werden soll, um den Literalwert des Arguments zu codieren.</span><span class="sxs-lookup"><span data-stu-id="83feb-106">The method to call third to encode the literal value of the argument.</span></span></param>
        <summary><span data-ttu-id="83feb-107">Codiert ein benanntes Argument (ein Feld oder eine Eigenschaft).</span><span class="sxs-lookup"><span data-stu-id="83feb-107">Encodes a named argument (a field or property).</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="83feb-108"><paramref name="type" />, <paramref name="name" /> oder <paramref name="literal" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="83feb-108"><paramref name="type" />, <paramref name="name" /> or <paramref name="literal" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddArgument">
      <MemberSignature Language="C#" Value="public void AddArgument (bool isField, out System.Reflection.Metadata.Ecma335.NamedArgumentTypeEncoder type, out System.Reflection.Metadata.Ecma335.NameEncoder name, out System.Reflection.Metadata.Ecma335.LiteralEncoder literal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddArgument(bool isField, [out] valuetype System.Reflection.Metadata.Ecma335.NamedArgumentTypeEncoder&amp; type, [out] valuetype System.Reflection.Metadata.Ecma335.NameEncoder&amp; name, [out] valuetype System.Reflection.Metadata.Ecma335.LiteralEncoder&amp; literal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.NamedArgumentsEncoder.AddArgument(System.Boolean,System.Reflection.Metadata.Ecma335.NamedArgumentTypeEncoder@,System.Reflection.Metadata.Ecma335.NameEncoder@,System.Reflection.Metadata.Ecma335.LiteralEncoder@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddArgument (isField As Boolean, ByRef type As NamedArgumentTypeEncoder, ByRef name As NameEncoder, ByRef literal As LiteralEncoder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddArgument(bool isField, [Runtime::InteropServices::Out] System::Reflection::Metadata::Ecma335::NamedArgumentTypeEncoder % type, [Runtime::InteropServices::Out] System::Reflection::Metadata::Ecma335::NameEncoder % name, [Runtime::InteropServices::Out] System::Reflection::Metadata::Ecma335::LiteralEncoder % literal);" />
      <MemberSignature Language="F#" Value="member this.AddArgument : bool * NamedArgumentTypeEncoder * NameEncoder * LiteralEncoder -&gt; unit" Usage="namedArgumentsEncoder.AddArgument (isField, type, name, literal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isField" Type="System.Boolean" />
        <Parameter Name="type" Type="System.Reflection.Metadata.Ecma335.NamedArgumentTypeEncoder" RefType="out" />
        <Parameter Name="name" Type="System.Reflection.Metadata.Ecma335.NameEncoder" RefType="out" />
        <Parameter Name="literal" Type="System.Reflection.Metadata.Ecma335.LiteralEncoder" RefType="out" />
      </Parameters>
      <Docs>
        <param name="isField"><span data-ttu-id="83feb-109"><see langword="true" />, um ein Feld zu codieren, <see langword="false" />, um eine Eigenschaft zu codieren.</span><span class="sxs-lookup"><span data-stu-id="83feb-109"><see langword="true" /> to encode a field, <see langword="false" /> to encode a property.</span></span></param>
        <param name="type"><span data-ttu-id="83feb-110">Die Methode, die zuerst aufgerufen werden soll, um den Typ des Arguments zu codieren.</span><span class="sxs-lookup"><span data-stu-id="83feb-110">The method to call first to encode the type of the argument.</span></span></param>
        <param name="name"><span data-ttu-id="83feb-111">Die Methode, die als Zweites aufgerufen werden soll, um den Namen des Felds oder der Eigenschaft zu codieren.</span><span class="sxs-lookup"><span data-stu-id="83feb-111">The method to call second to encode the name of the field or property.</span></span></param>
        <param name="literal"><span data-ttu-id="83feb-112">Die Methode, die als Drittes aufgerufen werden soll, um den Literalwert des Arguments zu codieren.</span><span class="sxs-lookup"><span data-stu-id="83feb-112">The method to call third to encode the literal value of the argument.</span></span></param>
        <summary><span data-ttu-id="83feb-113">Codiert ein benanntes Argument (ein Feld oder eine Eigenschaft) und gibt drei Encoder zurück, die in der Reihenfolge verwendet werden müssen, in der sie in der Parameterliste angezeigt werden.</span><span class="sxs-lookup"><span data-stu-id="83feb-113">Encodes a named argument (a field or property) and returns three encoders that must be used in the order they appear in the parameter list.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Builder">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.BlobBuilder Builder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Metadata.BlobBuilder Builder" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Metadata.Ecma335.NamedArgumentsEncoder.Builder" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Builder As BlobBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Metadata::BlobBuilder ^ Builder { System::Reflection::Metadata::BlobBuilder ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Builder : System.Reflection.Metadata.BlobBuilder" Usage="System.Reflection.Metadata.Ecma335.NamedArgumentsEncoder.Builder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.BlobBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

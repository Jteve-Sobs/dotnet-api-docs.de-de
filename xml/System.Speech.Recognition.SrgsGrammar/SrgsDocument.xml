<Type Name="SrgsDocument" FullName="System.Speech.Recognition.SrgsGrammar.SrgsDocument">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f1b92b86311af2b15be60e4acdc7447f95b9af8f" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86827174" /></Metadata><TypeSignature Language="C#" Value="public class SrgsDocument" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SrgsDocument extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
  <TypeSignature Language="VB.NET" Value="Public Class SrgsDocument" />
  <TypeSignature Language="C++ CLI" Value="public ref class SrgsDocument" />
  <TypeSignature Language="F#" Value="type SrgsDocument = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definiert ein Entwurfszeitobjekt, das verwendet wird, um stark typisierte Ablaufgrammatiken zu erstellen, die der <see href="https://www.w3.org/TR/speech-grammar/">Spracherkennungs-Grammatik-Spezifikation (SRGS), Version 1.0</see>, entsprechen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können eine leere <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> -Instanz erstellen und eine Grammatik erstellen, indem Sie Instanzen von Klassen hinzufügen, die SRGS-Elemente darstellen, z <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> . b <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> .,,, <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef> , <xref:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag> und <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> . Sie können auch eine <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> Instanz aus einer vorhandenen SRGS-kompatiblen XML-Grammatik Datei, einer Instanz von <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> oder einer Instanz von erstellen <xref:System.Speech.Recognition.GrammarBuilder> .  
  
 Nachdem das <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> Objekt erstellt wurde, kann es in ein- <xref:System.Speech.Recognition.Grammar> Objekt geladen oder von kompiliert werden <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler> , sodass es von einem-Objekt gelesen werden kann <xref:System.Speech.Recognition.Grammar> .  
  
 Weitere Informationen und Beispiele finden [Sie unter Erstellen von Grammatiken mithilfe von SrgsGrammar](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361680(v%3doffice.14)) im [Programmier Handbuch für die System Sprache .NET Framework](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361625(v%3doffice.14)) .  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361680(v%3doffice.14)">Erstellen von Grammatiken mithilfe von SrgsGrammar</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mithilfe der Konstruktoren für die- <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> Klasse können Sie eine Instanz von <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> aus einem- <xref:System.Speech.Recognition.GrammarBuilder> ,-oder- <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> <xref:System.Xml.XmlReader> Objekt aus einer Zeichenfolge erstellen, die den Pfad zu einer Grammatik im XML-Format enthält, oder Sie können eine leere Instanz von initiieren <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> .  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor erstellt eine leere- <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> Instanz. Fügen Sie zum Erstellen einer Grammatik innerhalb einer leeren <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> -Instanz Instanzen von Klassen hinzu, die SRGS-Elemente darstellen, z <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> . b <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef> .,, <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> und <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> .  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> -Objekt erstellt und dann eine öffentliche Regel mit dem Namen erstellt `winnerRule` . Anschließend wird ein erstellt <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> , der aus der Zeichenfolge "A Nation, die den World Cup hat:", und dieses Element wird der- <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A> Eigenschaft der Regel hinzugefügt. Im Beispiel werden dann zwei weitere Regeln ( `ruleEurope` und `ruleSAmerica` ) erstellt, bei denen es sich um ein Objekt handelt, <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> das drei- <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> Objekte enthält. Danach wird ein anderes <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> Objekt erstellt, das <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef> -Objekte enthält, die auf `ruleEurope` und verweisen `ruleSAmerica` . Das neue- <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> Objekt wird dann der- <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A> Eigenschaft von hinzugefügt `winnerRule` . Anschließend werden der-Eigenschaft von alle drei Regeln ( `winnerRule` , `ruleEurope` und `ruleSAmerica` ) hinzugefügt <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules%2A> <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> . Schließlich werden die drei Regeln in eine binäre Darstellung der Grammatik kompiliert.  
  
```csharp  
public void WorldSoccerWinners ()  
{  
  
  // Create an SrgsDocument, create a new rule  
  // and set its scope to public.  
  SrgsDocument document = new SrgsDocument();  
  SrgsRule winnerRule = new SrgsRule("WorldCupWinner");  
  winnerRule.Scope = SrgsRuleScope.Public;  
  
  // Add the introduction.  
  winnerRule.Elements.Add(new SrgsItem("A nation that has won the World Cup is: "));  
  
  // Create the rule for the European nations.  
  SrgsOneOf oneOfEurope = new SrgsOneOf(new SrgsItem[] {new SrgsItem("England"),   
    new SrgsItem("France"), new SrgsItem("Germany"), new SrgsItem("Italy")});  
  SrgsRule ruleEurope = (new SrgsRule("EuropeanNations", new SrgsElement[] {oneOfEurope}));  
  
  // Create the rule for the South American nations.  
  SrgsOneOf oneOfSAmerica = new SrgsOneOf(new SrgsItem[] {new SrgsItem("Argentina"),   
    new SrgsItem("Brazil"), new SrgsItem("Uruguay")});  
  SrgsRule ruleSAmerica = (new SrgsRule("SouthAmericanNations", new SrgsElement[] {oneOfSAmerica}));  
  
  // Add references to winnerRule for ruleEurope and ruleSAmerica.  
  winnerRule.Elements.Add(new SrgsOneOf(new SrgsItem[] {(new SrgsItem   
    (new SrgsRuleRef(ruleEurope))), new SrgsItem(new SrgsRuleRef(ruleSAmerica))}));  
  
  // Add all the rules to the document and make winnerRule   
  // the root rule of the document.  
  document.Rules.Add(new SrgsRule[] {winnerRule, ruleEurope, ruleSAmerica});  
  document.Root = winnerRule;  
  
  String fileName = Path.GetTempFileName();  
  using (FileStream stream = new FileStream(fileName, FileMode.Create))   
  {   
  
    // Compile the grammar to a binary format.  
    SrgsGrammarCompiler.Compile(document, stream);   
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument (System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument(System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SrgsGrammar.SrgsDocument : System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.SrgsGrammar.SrgsDocument" Usage="new System.Speech.Recognition.SrgsGrammar.SrgsDocument builder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder">Das <see cref="T:System.Speech.Recognition.GrammarBuilder" />-Objekt, das zum Erstellen der <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />-Instanz verwendet wird.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />-Klasse mit einem <see cref="T:System.Speech.Recognition.GrammarBuilder" />-Objekt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird eine Grammatik in einer- <xref:System.Speech.Recognition.GrammarBuilder> Instanz mithilfe von- <xref:System.Speech.Recognition.Choices> Objekten erstellt. Anschließend wird ein <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> aus dem- <xref:System.Speech.Recognition.GrammarBuilder> Objekt erstellt.  
  
```csharp  
GrammarBuilder builder = null;  
  
// Create new Choices objects and add countries/regions, and create GrammarBuilder objects.  
Choices choicesEurope = new Choices(new string[] { "England", "France", "Germany", "Italy" });  
GrammarBuilder europe = new GrammarBuilder(choicesEurope);  
  
Choices choicesSAmerica = new Choices(new string[] { "Argentina", "Brazil", "Uruguay" });  
GrammarBuilder sAmerica = new GrammarBuilder(choicesSAmerica);  
  
Choices worldCupWinnerChoices = new Choices(new GrammarBuilder[] {choicesEurope, choicesSAmerica});  
  
// Create new GrammarBuilder from a Choices object.  
builder = new GrammarBuilder(worldCupWinnerChoices);  
  
// Create an SrgsDocument object from a GrammarBuilder object.  
SrgsDocument document = new SrgsDocument(builder);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="builder" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument (System.Speech.Recognition.SrgsGrammar.SrgsRule grammarRootRule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsRule grammarRootRule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (grammarRootRule As SrgsRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument(System::Speech::Recognition::SrgsGrammar::SrgsRule ^ grammarRootRule);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SrgsGrammar.SrgsDocument : System.Speech.Recognition.SrgsGrammar.SrgsRule -&gt; System.Speech.Recognition.SrgsGrammar.SrgsDocument" Usage="new System.Speech.Recognition.SrgsGrammar.SrgsDocument grammarRootRule" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="grammarRootRule" Type="System.Speech.Recognition.SrgsGrammar.SrgsRule" />
      </Parameters>
      <Docs>
        <param name="grammarRootRule">Die <see langword="root rule" /> im <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />-Objekt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />-Klasse und gibt ein <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRule" />-Objekt an, das die Stammregel der Grammatik sein soll.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor fügt die angegebene Regel dem <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection> des- <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> Objekts hinzu und legt ihn als die <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root%2A> Regel für die Grammatik fest.  
  
   
  
## Examples  
 Im folgenden Beispiel werden zwei Regeln ( `chooseCities` und `destCities` ) erstellt, um die Ursprungs-und Zielstädte für einen Flug auszuwählen. Im Beispiel wird die- <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> Instanz mit der- `chooseCities` Regel als Argument initialisiert. Im Beispiel wird der Inhalt der Regel Sammlung und der Name der Stamm Regel in die Konsole geschrieben.  
  
```csharp  
// Create a rule that contains a list of destination cities.  
SrgsRule destCities = new SrgsRule("Destination");  
SrgsOneOf toCities = new SrgsOneOf(new string[] { "New York", "Seattle", "Denver" });  
destCities.Add(toCities);  
  
// Create a list of origin cities and supporting phrases.  
SrgsOneOf fromCities = new SrgsOneOf(new SrgsItem[] {   
  new SrgsItem("Dallas"), new SrgsItem("Miami"), new SrgsItem("Chicago") });  
SrgsItem intro = new SrgsItem("I want to fly from");  
SrgsItem to = new SrgsItem("to");  
  
// Create the root rule of the grammar, and assemble the components.  
SrgsRule chooseCities = new SrgsRule("Trip");  
chooseCities.Add(intro);  
chooseCities.Add(fromCities);  
chooseCities.Add(to);  
chooseCities.Add(new SrgsRuleRef(destCities));  
  
// Create the SrgsDocument and specify the root rule to add.  
SrgsDocument bookFlight = new SrgsDocument(chooseCities);  
  
// Add the rule for the destination cities to the document's rule collection.  
bookFlight.Rules.Add(new SrgsRule[] { destCities });  
  
// Display the contents of the Rules collection and the name of the root rule.  
foreach (SrgsRule rule in bookFlight.Rules)  
{  
  Console.WriteLine("Rule " + rule.Id + " is in the rules collection");  
}  
Console.WriteLine("Root Rule " + bookFlight.Root.Id);  
  
// Create a Grammar object and load it to the recognizer.  
Grammar g = new Grammar(bookFlight);  
g.Name = ("City Chooser");  
recognizer.LoadGrammarAsync(g);  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="grammarRootRule" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SrgsGrammar.SrgsDocument : string -&gt; System.Speech.Recognition.SrgsGrammar.SrgsDocument" Usage="new System.Speech.Recognition.SrgsGrammar.SrgsDocument path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Der Speicherort der SRGS XML-Datei.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />-Klasse, die den Speicherort des XML-Dokuments angibt, das verwendet wird, um die <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />-Instanz auszufüllen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird eine neue <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> aus der Datei mit dem Namen "srgsDocumentFile.xml" erstellt.  
  
```csharp  
string srgsDocumentFile = Path.Combine(Path.GetTempPath(), "srgsDocumentFile.xml");  
SrgsDocument document = null;  
  
if (File.Exists(srgsDocumentFile))  
   document = new SrgsDocument(srgsDocumentFile);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> ist eine leere Zeichenfolge.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument (System.Xml.XmlReader srgsGrammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlReader srgsGrammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (srgsGrammar As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument(System::Xml::XmlReader ^ srgsGrammar);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SrgsGrammar.SrgsDocument : System.Xml.XmlReader -&gt; System.Speech.Recognition.SrgsGrammar.SrgsDocument" Usage="new System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsGrammar" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="srgsGrammar" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="srgsGrammar">Das <see cref="T:System.Xml.XmlReader" />-Objekt, das mit der <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />-XML-Instanz erstellt wurde.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />-Klasse von einer Instanz von <see cref="T:System.Xml.XmlReader" />, die eine XML-Format-Grammatikdatei referenziert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird eine neue Instanz von <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> aus einer Instanz von erstellt, die auf <xref:System.Xml.XmlReader> die Datei "srgsDocumentFile.xml" verweist.  
  
```csharp  
string srgsDocumentFile = Path.Combine(Path.GetTempPath(), "srgsDocumentFile.xml");  
SrgsDocument document = null;  
  
if (File.Exists(srgsDocumentFile))  
{  
  XmlReader reader = XmlReader.Create(srgsDocumentFile);  
  document = new SrgsDocument(reader);  
  reader.Close();  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="srgsGrammar" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AssemblyReferences">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;string&gt; AssemblyReferences { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;string&gt; AssemblyReferences" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.AssemblyReferences" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AssemblyReferences As Collection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ AssemblyReferences { System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyReferences : System.Collections.ObjectModel.Collection&lt;string&gt;" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.AssemblyReferences" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Assemblyverweisinformationen für die <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />-Instanz ab.</summary>
        <value>Die Eigenschaft <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.AssemblyReferences" /> gibt eine Zeichenfolgenauflistung zurück, die eine Liste der Assemblyverweise enthält.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CodeBehind">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;string&gt; CodeBehind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;string&gt; CodeBehind" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.CodeBehind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CodeBehind As Collection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ CodeBehind { System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeBehind : System.Collections.ObjectModel.Collection&lt;string&gt;" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.CodeBehind" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die CodeBehind-Informationen für die <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />-Instanz ab.</summary>
        <value>Die Eigenschaft <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.CodeBehind" /> gibt eine Zeichenfolgenauflistung zurück, die eine Liste der Code-Behind-Dokumente enthält.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture" />
      <MemberSignature Language="VB.NET" Value="Public Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Culture : System.Globalization.CultureInfo with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Kulturinformationen für die <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />-Instanz ab oder legt diese fest.</summary>
        <value>Ein <see cref="T:System.Globalization.CultureInfo" />-Objekt, das die aktuellen Kulturinformationen für <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Microsoft Windows und die System. Speech-API akzeptieren alle gültigen sprach Ländercodes. Um die Spracherkennung mithilfe der in der-Eigenschaft angegebenen Sprache durchzuführen <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture%2A> , muss eine sprach Erkennungs-Engine installiert werden, die diesen Sprachen-Ländercode unterstützt. Die Spracherkennungs-Engines, die mit Microsoft Windows 7 ausgeliefert wurden, funktionieren mit den folgenden Programmiersprachen.  
  
-   en-GB. Walisisch (Großbritannien)  
  
-   en-US. Englisch (USA)  
  
-   de-de. Deutsch (Deutschland)  
  
-   es-es. Spanisch (Spanien)  
  
-   fr-fr. Französisch (Frankreich)  
  
-   ja-JP. Japanisch (Japan)  
  
-   zh-cn. Chinesisch (China)  
  
-   zh-tw. Chinesisch (Taiwan)  
  
 Sprachcodes mit zwei Buchstaben, z. b. "en", "fr" oder "es", sind ebenfalls zulässig.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert, der <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture" /> zugewiesen wird, ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Der Wert, der <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture" /> zugewiesen wird, ist <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Debug">
      <MemberSignature Language="C#" Value="public bool Debug { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Debug" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Debug" />
      <MemberSignature Language="VB.NET" Value="Public Property Debug As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Debug { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Debug : bool with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Debug" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder bestimmt, ob Zeilennummern zu den Inlineskripten hinzugefügt werden.</summary>
        <value>Die <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Debug" />-Eigenschaft gibt <see langword="true" /> zurück, wenn Zeilennummern für Debugzwecke hinzugefügt werden sollen. Andernfalls gibt die Eigenschaft <see langword="false" /> zurück.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportNamespaces">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;string&gt; ImportNamespaces { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;string&gt; ImportNamespaces" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.ImportNamespaces" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ImportNamespaces As Collection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ ImportNamespaces { System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ImportNamespaces : System.Collections.ObjectModel.Collection&lt;string&gt;" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.ImportNamespaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die zugehörigen Namespaces für die aktuelle <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />-Instanz ab.</summary>
        <value>Die Eigenschaft <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.ImportNamespaces" /> gibt eine Zeichenfolgenauflistung zurück, die eine Liste der zugehörigen Namespaces in der <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />-Instanz enthält.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public string Language { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Language" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Language" />
      <MemberSignature Language="VB.NET" Value="Public Property Language As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Language { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Language : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Language" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Programmiersprache, welche für Inline-Code in der <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />-Klasse verwendet wird ab oder legt diese fest.</summary>
        <value>Die Eigenschaft <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Language" /> gibt die Programmiersprache zurück, auf die <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> momentan festgelegt ist.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Mode" />
      <MemberSignature Language="VB.NET" Value="Public Property Mode As SrgsGrammarMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SrgsGrammar::SrgsGrammarMode Mode { System::Speech::Recognition::SrgsGrammar::SrgsGrammarMode get(); void set(System::Speech::Recognition::SrgsGrammar::SrgsGrammarMode value); };" />
      <MemberSignature Language="F#" Value="member this.Mode : System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Modus für die <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />-Klasse ab oder legt diesen fest.</summary>
        <value>Der Erkennungsmodus für das <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die- <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Mode%2A> Eigenschaft gibt einen Member von zurück <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode> , der den Typ der Eingabe bestimmt, der von erwartet wird <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> . Die beiden möglichen Werte sind `Voice` für die Spracheingabe und `Dtmf` für die Eingabe von Dual-Ton-DTMF-Tönen, die häufig mit einem Telefon verknüpft sind.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode" />
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namespace der <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />-Klasse ab oder legt diesen fest.</summary>
        <value>Die <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Namespace" />-Eigenschaft gibt den Namespace für das aktuelle <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> zurück.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PhoneticAlphabet">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet PhoneticAlphabet { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet PhoneticAlphabet" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet" />
      <MemberSignature Language="VB.NET" Value="Public Property PhoneticAlphabet As SrgsPhoneticAlphabet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SrgsGrammar::SrgsPhoneticAlphabet PhoneticAlphabet { System::Speech::Recognition::SrgsGrammar::SrgsPhoneticAlphabet get(); void set(System::Speech::Recognition::SrgsGrammar::SrgsPhoneticAlphabet value); };" />
      <MemberSignature Language="F#" Value="member this.PhoneticAlphabet : System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das phonetische Alphabet der <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />-Klasse ab oder legt dieses fest.</summary>
        <value>Gibt das phonetische Alphabet zurück, das verwendet werden muss, um benutzerdefinierte Aussprachen im <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" />-Objekt anzugeben.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Phonetische Alphabete bestehen aus Telefonen, die aus Buchstaben, Zahlen oder Zeichen bestehen, manchmal in Kombination. Jedes Phon beschreibt einen eindeutigen Sprachklang. Dies steht im Gegensatz zum lateinischen Alphabet, bei dem jeder Buchstabe mehrere gesprochene Sounds darstellen kann. Überlegen Sie die unterschiedliche Aussprache des Buchstabens „C“ in den Städtenamen „Coburg“ und „Celle“ oder die unterschiedliche Aussprache der Buchstabenkombination „ch“ in den Wörtern „ich“ und „ach“.  
  
 In System. Speech können Sie eine beliebige von drei phonetischen Alphabete verwenden, um benutzerdefinierte pronationen anzugeben: internationale Telefon Alphabet (IPA), Universal Phone Set (UPS) oder den SAPI-telefonsatz. Das angegebene phonetische Alphabet bestimmt, welcher Telefon Satz verwendet wird, um Inline-pronationen für-Objekte zu definieren <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> . Die in angegebenen Telefone <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> müssen mit dem in angegebenen phonetischen Alphabet identisch sein <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet%2A> .  
  
 Weitere Informationen finden Sie unter [Lexicons und phonetische Alphabets](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh378335(v%3doffice.14)) .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Root">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SrgsGrammar.SrgsRule Root { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.SrgsGrammar.SrgsRule Root" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root" />
      <MemberSignature Language="VB.NET" Value="Public Property Root As SrgsRule" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SrgsGrammar::SrgsRule ^ Root { System::Speech::Recognition::SrgsGrammar::SrgsRule ^ get(); void set(System::Speech::Recognition::SrgsGrammar::SrgsRule ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Root : System.Speech.Recognition.SrgsGrammar.SrgsRule with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SrgsGrammar.SrgsRule</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Stammregel der <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />-Klasse ab oder legt diese fest.</summary>
        <value>Gibt die Regel zurück, die als Stammregel des <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> festgelegt ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> Objekt muss bereits im Dokument vorhanden sein <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection> , bevor es auf die Stamm **Regel**festgelegt werden kann.  
  
 Sie können auch die Stamm Regel für ein <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> Objekt festlegen, indem Sie ein- <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> Objekt als Argument für den <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> Konstruktor verwenden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine Regel mit dem Namen erstellt `winnerRule` und dann ein-Objekt mit dem <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> Namen erstellt `document` . Im Beispiel wird dann die- <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection.Add%2A> Methode aufgerufen, um die Regel dem Dokument hinzuzufügen. Schließlich wird in diesem Beispiel die-Eigenschaft des Dokuments <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root%2A> auf `winnerRule` festgelegt, sodass Sie `root rule` für die durch das-Objekt definierte Grammatik festgelegt wird <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> .  
  
```csharp  
SrgsRule winnerRule = new SrgsRule("WorldCupWinner");  
winnerRule.Scope = SrgsRuleScope.Public;  
  
SrgsDocument document = new SrgsDocument();  
  
document.Rules.Add(winnerRule);  
document.Root = winnerRule;   
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRule" />
      </Docs>
    </Member>
    <Member MemberName="Rules">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection Rules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection Rules" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Rules As SrgsRulesCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SrgsGrammar::SrgsRulesCollection ^ Rules { System::Speech::Recognition::SrgsGrammar::SrgsRulesCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Rules : System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Auflistung der Regeln ab, die momentan für die <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />-Klasse definiert sind.</summary>
        <value>Gibt die Regeln zurück, die für das <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />-Objekt definiert werden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können- <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> Objekte hinzufügen, <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection> indem Sie die- <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection.Add%2A> Methode für die- <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules%2A> Eigenschaft verwenden. Wenn Sie ein Objekt initialisieren <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> und ein <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> Objekt als-Argument angeben, <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> wird der automatisch dem <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection> für das hinzugefügt <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> .  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine Grammatik erstellt, die den Begriff "ein Land, das den World Cup gewonnen hat", gefolgt vom Namen eines Landes bzw. einer Region, das den World Cup gewonnen hat, erkennt. Im Beispiel wird ein <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> -Objekt erstellt, und anschließend wird eine öffentliche Regel mit dem Namen erstellt `winnerRule` . Nachdem Sie der Regel eine Zeichenfolge hinzugefügt `winnerRule` haben, erstellt das Beispiel zwei weitere Regeln ( `ruleEurope` und `ruleSAmerica` ), die jeweils eine Liste der Länder/Regionen enthalten. Mit der- <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection.Add%2A> Methode werden im Beispiel alle drei Regeln ( `winnerRule` , `ruleEurope` und `ruleSAmerica` ) der- <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules%2A> Eigenschaft des <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> hinzugefügt.  
  
```csharp  
public void WorldSoccerWinners ()  
{  
  
  // Create an SrgsDocument, create a new rule  
  // and set its scope to public.  
  SrgsDocument document = new SrgsDocument();  
  SrgsRule winnerRule = new SrgsRule("WorldCupWinner");  
  winnerRule.Scope = SrgsRuleScope.Public;  
  
  // Add the introduction.  
  winnerRule.Elements.Add(new SrgsItem("A nation that has won the World Cup is: "));  
  
  // Create the rule for the European nations.  
  SrgsOneOf oneOfEurope = new SrgsOneOf(new SrgsItem[] {new SrgsItem("England"),   
    new SrgsItem("France"), new SrgsItem("Germany"), new SrgsItem("Italy")});  
  SrgsRule ruleEurope = (new SrgsRule("EuropeanNations", new SrgsElement[] {oneOfEurope}));  
  
  // Create the rule for the South American nations.  
  SrgsOneOf oneOfSAmerica = new SrgsOneOf(new SrgsItem[] {new SrgsItem("Argentina"),   
    new SrgsItem("Brazil"), new SrgsItem("Uruguay")});  
  SrgsRule ruleSAmerica = (new SrgsRule("SouthAmericanNations", new SrgsElement[] {oneOfSAmerica}));  
  
  // Add references to winnerRule for ruleEurope and ruleSAmerica.  
  winnerRule.Elements.Add(new SrgsOneOf(new SrgsItem[] {(new SrgsItem   
    (new SrgsRuleRef(ruleEurope))), new SrgsItem(new SrgsRuleRef(ruleSAmerica))}));  
  
  // Add all the rules to the document and make winnerRule   
  // the root rule of the document.  
  document.Rules.Add(new SrgsRule[] {winnerRule, ruleEurope, ruleSAmerica});  
  document.Root = winnerRule;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection" />
      </Docs>
    </Member>
    <Member MemberName="Script">
      <MemberSignature Language="C#" Value="public string Script { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Script" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script" />
      <MemberSignature Language="VB.NET" Value="Public Property Script As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Script { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Script : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die .NET-Skripterstellungssprache ab oder legt diese fest für die <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />-Klasse.</summary>
        <value>Die <see langword="Script" />-Eigenschaft gibt die aktuelle .NET-Skriptsprache für die <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />-Klasse zurück.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Diese Eigenschaft ist veraltet. Die Verwendung wird nicht mehr empfohlen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Es wurde versucht, <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script" /> auf NULL festzulegen.</exception>
        <exception cref="T:System.ArgumentException">Es wird versucht, die <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script" />-Eigenschaft auf eine leere Zeichenfolge festzulegen.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteSrgs">
      <MemberSignature Language="C#" Value="public void WriteSrgs (System.Xml.XmlWriter srgsGrammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteSrgs(class System.Xml.XmlWriter srgsGrammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.WriteSrgs(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteSrgs (srgsGrammar As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteSrgs(System::Xml::XmlWriter ^ srgsGrammar);" />
      <MemberSignature Language="F#" Value="member this.WriteSrgs : System.Xml.XmlWriter -&gt; unit" Usage="srgsDocument.WriteSrgs srgsGrammar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="srgsGrammar" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="srgsGrammar">Der <see cref="T:System.Xml.XmlWriter" />, der zum Schreiben der <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />-Instanz verwendet wird.</param>
        <summary>Schreibt den Inhalt des <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />-Objekts in eine Grammatikdatei im XML-Format, die der [Spracherkennungs-Grammatik-Spezifikation (SRGS), Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201761) entspricht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> -Objekt erstellt, und anschließend wird eine öffentliche Regel mit dem Namen erstellt `winnerRule` . Anschließend wird ein erstellt <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> , der aus der Zeichenfolge "A Nation, die den World Cup hat:", und dieses Element wird der- <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A> Eigenschaft der Regel hinzugefügt. Im Beispiel werden dann zwei weitere Regeln ( `ruleEurope` und `ruleSAmerica` ) erstellt, bei denen es sich um ein Objekt handelt, <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> das drei- <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> Objekte enthält. Danach wird ein anderes <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> Objekt erstellt, das <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef> -Objekte enthält, die auf `ruleEurope` und verweisen `ruleSAmerica` . Das neue- <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> Objekt wird dann der- <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A> Eigenschaft von hinzugefügt `winnerRule` . Anschließend werden alle drei Regeln ( `winnerRule` , `ruleEurope` und `ruleSAmerica` ) der-Eigenschaft des hinzugefügt <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules%2A> <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> . Schließlich erstellt das Beispiel eine leere XML-Datei und eine Instanz von <xref:System.Xml.XmlWriter> .  Die- <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.WriteSrgs%2A> Methode verwendet die- <xref:System.Xml.XmlWriter> Instanz, um den Inhalt der <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> in die XML-Datei zu schreiben.  
  
```csharp  
public void WorldSoccerWinners ()  
{  
  
  // Create an SrgsDocument, create a new rule  
  // and set its scope to public.  
  SrgsDocument document = new SrgsDocument();  
  SrgsRule winnerRule = new SrgsRule("WorldCupWinner");  
  winnerRule.Scope = SrgsRuleScope.Public;  
  
  // Add the introduction.  
  winnerRule.Elements.Add(new SrgsItem("A nation that has won the World Cup is: "));  
  
  // Create the rule for the European nations.  
  SrgsOneOf oneOfEurope = new SrgsOneOf(new SrgsItem[] {new SrgsItem("England"),   
    new SrgsItem("France"), new SrgsItem("Germany"), new SrgsItem("Italy")});  
  SrgsRule ruleEurope = (new SrgsRule("EuropeanNations", new SrgsElement[] {oneOfEurope}));  
  
  // Create the rule for the South American nations.  
  SrgsOneOf oneOfSAmerica = new SrgsOneOf(new SrgsItem[] {new SrgsItem("Argentina"),   
    new SrgsItem("Brazil"), new SrgsItem("Uruguay")});  
  SrgsRule ruleSAmerica = (new SrgsRule("SouthAmericanNations", new SrgsElement[] {oneOfSAmerica}));  
  
  // Add references to winnerRule for ruleEurope and ruleSAmerica.  
  winnerRule.Elements.Add(new SrgsOneOf(new SrgsItem[] {(new SrgsItem   
    (new SrgsRuleRef(ruleEurope))), new SrgsItem(new SrgsRuleRef(ruleSAmerica))}));  
  
  // Add all the rules to the document and make winnerRule   
  // the root rule of the document.  
  document.Rules.Add(new SrgsRule[] {winnerRule, ruleEurope, ruleSAmerica});  
  document.Root = winnerRule;  
  
  // Create a string object with the path to the file to use.  
  string srgsDocumentFile = Path.Combine(Path.GetTempPath(), "srgsDocumentFile.xml");  
  
  // Create an XmlWriter object and pass the file path.  
  XmlWriter writer = XmlWriter.Create(srgsDocumentFile);  
  
  // Write the contents of the XmlWriter object to an SRGS-compatible XML file.  
  document.WriteSrgs(writer);  
  writer.Close();  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="srgsGrammar" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="XmlBase">
      <MemberSignature Language="C#" Value="public Uri XmlBase { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri XmlBase" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlBase As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ XmlBase { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlBase : Uri with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Basis-URI der <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />-Klasse ab oder legt diesen fest.</summary>
        <value>Die aktuelle Basis-URI von <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase%2A> die-Eigenschaft ruft einen Wert ab, mit dem relative URIs in einem-Objekt aufgelöst werden <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> . Angenommen, der Wert für <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase%2A> ist `http://www.contoso.com/` , und der <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> enthält einen relativen Regel Verweis auf ein anderes Dokument, z `SrgsRuleRef("ExternalGrammar.grxml")` . b.. Dadurch wird der folgende absolute Pfad zum externen Dokument erstellt: `http://www.contoso.com/ExternalGrammar.grxml` .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

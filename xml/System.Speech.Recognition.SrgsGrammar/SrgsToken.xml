<Type Name="SrgsToken" FullName="System.Speech.Recognition.SrgsGrammar.SrgsToken">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5d0525f7aec4eab02be807b6114596360a7291d4" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37610732" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SrgsToken : System.Speech.Recognition.SrgsGrammar.SrgsElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SrgsToken extends System.Speech.Recognition.SrgsGrammar.SrgsElement" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" />
  <TypeSignature Language="VB.NET" Value="Public Class SrgsToken&#xA;Inherits SrgsElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class SrgsToken : System::Speech::Recognition::SrgsGrammar::SrgsElement" />
  <TypeSignature Language="F#" Value="type SrgsToken = class&#xA;    inherit SrgsElement" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Recognition.SrgsGrammar.SrgsElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{DebuggerDisplayString ()}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt ein Wort oder einen kurzen Ausdruck dar, die erkannt werden können.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit den Elementen der <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> -Klasse, können Sie drei Formen eines Worts angeben: die <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display%2A> Form der <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> Formular und einem benutzerdefinierten <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> für das Wort.  
  
 Wenn mehrere Wörter in einem einzelnen gespeichert sind <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> Objekt ist, wird jede wird als ein anderes Token behandelt, intern und im Ergebnis.  
  
 Diese Klasse stellt die `token` Element durch das World Wide Web Consortium (W3C) definierten [Speech Recognition Grammar Specification (SRGS), Version 1.0.](http://go.microsoft.com/fwlink/?LinkId=201761). Informationen zu den SRGS `token` Element- und Details zu der Unterstützung von "System.Speech", finden Sie unter [token-Element](http://msdn.microsoft.com/library/3a9e8d64-7bd4-4188-a6f4-dbf28ea71632).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsToken (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsToken.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsToken(System::String ^ text);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SrgsGrammar.SrgsToken : string -&gt; System.Speech.Recognition.SrgsGrammar.SrgsToken" Usage="new System.Speech.Recognition.SrgsGrammar.SrgsToken text" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Der Text der neuen <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" />-Klasseninstanz.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" />-Klasse und gibt den zu erkennenden Text an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Erstellt eine <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> Objekt, dessen <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> Eigenschaftensatz wird anfänglich auf den Wert des der `text` Parameter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="text" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="text" /> ist leer.</exception>
      </Docs>
    </Member>
    <Member MemberName="Display">
      <MemberSignature Language="C#" Value="public string Display { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Display" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display" />
      <MemberSignature Language="VB.NET" Value="Public Property Display As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Display { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Display : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsToken.Display" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzeigeform des auszusprechenden Texts ab oder oder legt diese fest.</summary>
        <value>Eine Darstellung des Tokens, wie es angezeigt werden soll.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obwohl sie in der Regel den gleichen Wert darstellen der <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display%2A> Form unterscheidet sich möglicherweise die <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> bilden nach einem Wort oder einen Ausdruck in eine <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken>. Z. B. möglicherweise die Anzeigeform ein Akronym, z. B. "USA", während der Text, der gesprochen werden, und klicken Sie auf die die <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> gilt, ist "Vereinigte Staaten von Amerika".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Es wird versucht, <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display" /> auf <see langword="null" /> festzulegen.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Es wird versucht, <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display" /> eine leere Zeichenfolge zuzuweisen.</exception>
      </Docs>
    </Member>
    <Member MemberName="Pronunciation">
      <MemberSignature Language="C#" Value="public string Pronunciation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pronunciation" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation" />
      <MemberSignature Language="VB.NET" Value="Public Property Pronunciation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pronunciation { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Pronunciation : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeichenfolge ab, bzw. legt sie fest, welche die Aussprache für den Token definiert.</summary>
        <value>Gibt eine Zeichenfolge zurück, die Phone des Lautalphabets enthält, das in <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet" /> angegeben wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Smartphones sind Buchstaben oder Symbole, die beschreiben, die Sounds aus der Sprache. "System.Speech" unterstützt drei phonetischen Alphabete für die Angabe von benutzerdefinierten Aussprache: dem universellen Sprachlautsatz (UPS), die Phone des Speech-API (SAPI) und dem internationalen Lautalphabet (IPA). Die Telefone, die im angegebenen <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> übereinstimmen, dass das phonetische Alphabet in angegebenen <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet%2A>. Finden Sie unter [Lexika und phonetischen Alphabete](http://msdn.microsoft.com/library/435e3c6f-6834-4e5a-b0f6-c17b2275dc51) für Weitere Informationen.  
  
 Die Telefone, die im angegebenen <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> anzugeben wie der Inhalt des <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> für erfolgreiche Erkennung ausgesprochen werden sollte.  Die spracherkennungs-Engine verwendet die Aussprache, die im angegebenen <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> entsprechend der Spracheingabe und gibt die Zeichenfolge enthaltenen <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> in das Erkennungsergebnis.  
  
 Wenn die Telefone nicht durch Leerzeichen getrennt sind, oder die angegebene Zeichenfolge eine unbekannte Phone enthält, die erkennungs-Engine nicht als eine gültige Aussprache der das Wort, das durch die angegebene Aussprache erkennt <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A>.  
  
 Aussprache, die im angegebenen <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> haben Vorrang vor der Aussprache in Lexika im Zusammenhang mit einer Grammatik oder einer erkennungs-Engine angegeben. Darüber hinaus die Aussprache, die in der <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> Eigenschaft gilt nur für die einzelnen Vorkommen des Worts oder Ausdrucks enthalten <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A>.  
  
   
  
## Examples  
 Die Grammatik in das folgende Beispiel enthält Jargon Wörter sowie eine ungewöhnlich, dass Word: "Whatchamacallit". Hinzufügen einer benutzerdefinierten, Inline Aussprache mithilfe der <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> Eigenschaft der <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> Klasse kann die Genauigkeit der Erkennung für das Wort "Whatchamacallit" als auch für die gesamte Nachricht, die sie enthält verbessern. Im Beispiel wird die Smartphones aus dem Microsoft universellen Sprachlautsatz (UPS) zum Definieren der benutzerdefinierten Aussprache verwendet.  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Speech.Recognition.SrgsGrammar;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an instance of the in-process recognizer.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Build the SrgsOneOf objects with alternative choices for the slang phrase.  
        SrgsOneOf gimme = new SrgsOneOf(  
          new string[] { "give me", "gimme", "hand me", "ha'me" });  
        SrgsOneOf the = new SrgsOneOf(new string[] { "the", "duh" });  
  
        // Build the one-of element that contains the pronunciation.  
        SrgsItem thing = new SrgsItem("thingamajig");  
        SrgsItem whatcha = new SrgsItem();  
        SrgsToken callit = new SrgsToken("whatchamacallit");  
        callit.Pronunciation = "W AE T CH AE M AE K AA L IH T";  
        whatcha.Add(callit);  
        SrgsOneOf what = new SrgsOneOf(new SrgsItem[] {thing, whatcha});  
  
        // Create the rule from the SrgsOneOf objects.  
        SrgsRule slangRule = new SrgsRule("slang", gimme, the, what);  
  
        // Build an SrgsDocument object from the rule and set the phonetic alphabet.  
        SrgsDocument tokenPron = new SrgsDocument(slangRule);  
        tokenPron.PhoneticAlphabet = SrgsPhoneticAlphabet.Ups;  
  
        // Create a Grammar object from the SrgsDocument and load it to the recognizer.  
        Grammar g_Slang = new Grammar(tokenPron);  
        g_Slang.Name = ("Slang Pronunciation");  
        recognizer.LoadGrammarAsync(g_Slang);  
  
        // Configure recognizer input.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Attach a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Start asynchronous recognition.  
        recognizer.RecognizeAsync();  
        Console.WriteLine("Starting asynchronous recognition...");  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized phrase: " + e.Result.Text);  
      Console.WriteLine("Confidence: " + e.Result.Confidence);  
      Console.WriteLine("  Word summary: ");  
      foreach (RecognizedWordUnit word in e.Result.Words)  
      {  
        Console.WriteLine(  
          "    Lexical form ({1})" +  
          " Pronunciation ({0})" +  
          " Confidence ({2})",  
          word.Pronunciation, word.LexicalForm, word.Confidence);  
      }  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Es wird versucht, <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation" /> auf <see langword="null" /> festzulegen.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Es wird versucht, <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation" /> eine leere Zeichenfolge zuzuweisen.</exception>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text" />
      <MemberSignature Language="VB.NET" Value="Public Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsToken.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezieht oder bestimmt die geschriebene Form des Worts, das gesprochene werden soll.</summary>
        <value>Der Text innerhalb der <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" />-Klasseninstanz.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obwohl sie in der Regel den gleichen Wert darstellen der <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> Form unterscheidet sich möglicherweise die <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display%2A> bilden nach einem Wort oder einen Ausdruck in eine <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken>. Z. B. die <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display%2A> Formular handelt es sich möglicherweise um ein Akronym, z. B. "USA", während der Text, der gesprochen werden, und klicken Sie auf die die <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> gilt, ist "Vereinigte Staaten von Amerika".  
  
 Der Standardwert für die <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> Eigenschaft ist eine leere Zeichenfolge: "".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Es wird versucht, <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text" /> auf <see langword="null" /> festzulegen.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Es wird versucht, <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text" /> eine leere Zeichenfolge zuzuweisen.</exception>
        <exception cref="T:System.ArgumentException">Ein wird versucht, eine Zeichenfolge zuzuweisen, die ein Anführungszeichen (") zu <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text" /> enthält.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
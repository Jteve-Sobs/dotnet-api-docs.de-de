<Type Name="SrgsToken" FullName="System.Speech.Recognition.SrgsGrammar.SrgsToken">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c4945f97f2a17466627b2661501ab004397d3953" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69146140" /></Metadata><TypeSignature Language="C#" Value="public class SrgsToken : System.Speech.Recognition.SrgsGrammar.SrgsElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SrgsToken extends System.Speech.Recognition.SrgsGrammar.SrgsElement" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" />
  <TypeSignature Language="VB.NET" Value="Public Class SrgsToken&#xA;Inherits SrgsElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class SrgsToken : System::Speech::Recognition::SrgsGrammar::SrgsElement" />
  <TypeSignature Language="F#" Value="type SrgsToken = class&#xA;    inherit SrgsElement" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Recognition.SrgsGrammar.SrgsElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{DebuggerDisplayString ()}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt ein Wort oder einen kurzen Ausdruck dar, die erkannt werden können.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mithilfe <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> der Member der-Klasse können Sie drei Formen eines Worts angeben: das <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display%2A> Formular, das <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> Formular und ein benutzerdefiniertes <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> für das Wort.  
  
 Wenn mehrere Wörter in einem einzelnen <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> Objekt gespeichert werden, werden beide intern und im Ergebnis als anderes Token behandelt.  
  
 Diese Klasse stellt das `token` Element dar, das durch die [sprach Erkennungs Grammatik-Spezifikation (SRGS), Version 1,0](https://go.microsoft.com/fwlink/?LinkId=201761), von World Wide Web Consortium (W3C) definiert wird. Weitere Informationen über das SRGS `token` -Element und Details zur Unterstützung durch System. Speech finden Sie unter [Token-Element](https://msdn.microsoft.com/library/3a9e8d64-7bd4-4188-a6f4-dbf28ea71632).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsToken (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsToken.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsToken(System::String ^ text);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SrgsGrammar.SrgsToken : string -&gt; System.Speech.Recognition.SrgsGrammar.SrgsToken" Usage="new System.Speech.Recognition.SrgsGrammar.SrgsToken text" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Der Text der neuen <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" />-Klasseninstanz.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" />-Klasse und gibt den zu erkennenden Text an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Erstellt ein <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> -Objekt ,dessen<xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> -Eigenschaft anfänglich auf den Wert des- Parametersfestgelegtwird.`text`  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="text" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="text" /> ist leer.</exception>
      </Docs>
    </Member>
    <Member MemberName="Display">
      <MemberSignature Language="C#" Value="public string Display { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Display" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display" />
      <MemberSignature Language="VB.NET" Value="Public Property Display As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Display { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Display : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsToken.Display" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzeigeform des auszusprechenden Texts ab oder oder legt diese fest.</summary>
        <value>Eine Darstellung des Tokens, wie es angezeigt werden soll.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obwohl Sie in der Regel denselben Wert darstellen, <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display%2A> kann sich das Formular von dem <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> Formular für ein Wort oder einen Ausdruck in <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken>einem unterscheiden. Das Anzeige Formular kann z. b. ein Akronym sein, z. b. "USA", während der Text, der gesprochen wird und <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> für den das gilt, "USA of America" ist.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Es wird versucht, <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display" /> auf <see langword="null" /> festzulegen.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Es wird versucht, <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display" /> eine leere Zeichenfolge zuzuweisen.</exception>
      </Docs>
    </Member>
    <Member MemberName="Pronunciation">
      <MemberSignature Language="C#" Value="public string Pronunciation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pronunciation" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation" />
      <MemberSignature Language="VB.NET" Value="Public Property Pronunciation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pronunciation { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Pronunciation : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeichenfolge ab, bzw. legt sie fest, welche die Aussprache für den Token definiert.</summary>
        <value>Gibt eine Zeichenfolge zurück, die Phone des Lautalphabets enthält, das in <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet" /> angegeben wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Smartphones sind Buchstaben oder Symbole, die die Klänge der Sprache beschreiben. System. Speech unterstützt drei phonetische Alphabete zum Angeben benutzerdefinierter Ausdrücke: den Universal Phone Set (UPS), den sprach Satz der Sprach-API (SAPI) und das internationale phonetische Alphabet (IPA). Die in <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> angegebenen Telefone müssen mit dem in <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet%2A>angegebenen phonetischen Alphabet identisch sein. Weitere Informationen finden Sie unter [Lexicons und phonetische Alphabets](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh378335(v%3doffice.14)) .  
  
 Die in angegebenen Telefone <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> geben an, wie der <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> Inhalt von für eine erfolgreiche Erkennung ausgesprochen werden soll.  Die Spracherkennungs-Engine verwendet die in <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> angegebene Aussprache, um die Spracheingabe abzugleichen, und gibt die Zeichenfolge zurück, die <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> im Erkennungs Ergebnis enthalten ist.  
  
 Wenn die Telefone nicht durch <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A>Leerzeichen getrennt sind oder die angegebene Zeichenfolge ein unbekanntes Telefon enthält, erkennt die Erkennungs-Engine die angegebene Aussprache nicht als gültige Aussprache des Worts, das in enthalten ist.  
  
 Die in <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> angegebenen Ausdrücke haben Vorrang vor den in lexikonen angegebenen voreingaben, die einer Grammatik oder einer Erkennungs-Engine zugeordnet sind. Außerdem gilt die Aussprache in der <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> -Eigenschaft nur für das einmalige Vorkommen des Worts oder Ausdrucks, das in <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A>enthalten ist.  
  
   
  
## Examples  
 Die Grammatik im folgenden Beispiel enthält die Wort Vorlagen und weist auch ein ungewöhnliches Wort auf: "whatchamacallit". Durch das Hinzufügen einer benutzerdefinierten Inline <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> Aussprache mithilfe der <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> -Eigenschaft der-Klasse kann die Genauigkeit der Erkennung für das Wort "whatchamacallit" sowie für den gesamten Ausdruck, in dem er enthalten ist, verbessert werden. Das Beispiel verwendet Telefone aus dem Microsoft Universal Phone Set (UPS), um die benutzerdefinierten Ausdrücke zu definieren.  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Speech.Recognition.SrgsGrammar;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an instance of the in-process recognizer.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Build the SrgsOneOf objects with alternative choices for the slang phrase.  
        SrgsOneOf gimme = new SrgsOneOf(  
          new string[] { "give me", "gimme", "hand me", "ha'me" });  
        SrgsOneOf the = new SrgsOneOf(new string[] { "the", "duh" });  
  
        // Build the one-of element that contains the pronunciation.  
        SrgsItem thing = new SrgsItem("thingamajig");  
        SrgsItem whatcha = new SrgsItem();  
        SrgsToken callit = new SrgsToken("whatchamacallit");  
        callit.Pronunciation = "W AE T CH AE M AE K AA L IH T";  
        whatcha.Add(callit);  
        SrgsOneOf what = new SrgsOneOf(new SrgsItem[] {thing, whatcha});  
  
        // Create the rule from the SrgsOneOf objects.  
        SrgsRule slangRule = new SrgsRule("slang", gimme, the, what);  
  
        // Build an SrgsDocument object from the rule and set the phonetic alphabet.  
        SrgsDocument tokenPron = new SrgsDocument(slangRule);  
        tokenPron.PhoneticAlphabet = SrgsPhoneticAlphabet.Ups;  
  
        // Create a Grammar object from the SrgsDocument and load it to the recognizer.  
        Grammar g_Slang = new Grammar(tokenPron);  
        g_Slang.Name = ("Slang Pronunciation");  
        recognizer.LoadGrammarAsync(g_Slang);  
  
        // Configure recognizer input.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Attach a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Start asynchronous recognition.  
        recognizer.RecognizeAsync();  
        Console.WriteLine("Starting asynchronous recognition...");  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized phrase: " + e.Result.Text);  
      Console.WriteLine("Confidence: " + e.Result.Confidence);  
      Console.WriteLine("  Word summary: ");  
      foreach (RecognizedWordUnit word in e.Result.Words)  
      {  
        Console.WriteLine(  
          "    Lexical form ({1})" +  
          " Pronunciation ({0})" +  
          " Confidence ({2})",  
          word.Pronunciation, word.LexicalForm, word.Confidence);  
      }  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Es wird versucht, <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation" /> auf <see langword="null" /> festzulegen.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Es wird versucht, <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation" /> eine leere Zeichenfolge zuzuweisen.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh378335(v%3doffice.14)">Lexicons und phonetische Alphabets</related>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text" />
      <MemberSignature Language="VB.NET" Value="Public Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsToken.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezieht oder bestimmt die geschriebene Form des Worts, das gesprochene werden soll.</summary>
        <value>Der Text innerhalb der <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" />-Klasseninstanz.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obwohl Sie in der Regel denselben Wert darstellen, <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> kann sich das Formular von dem <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display%2A> Formular für ein Wort oder einen Ausdruck in <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken>einem unterscheiden. Das <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display%2A> Formular kann z. b. ein Akronym sein, z. b. "USA", während der Text, der gesprochen wird und <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> für den das gilt, "USA of America" ist.  
  
 Der Standardwert für die <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> -Eigenschaft ist eine leere Zeichenfolge: "".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Es wird versucht, <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text" /> auf <see langword="null" /> festzulegen.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Es wird versucht, <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text" /> eine leere Zeichenfolge zuzuweisen.</exception>
        <exception cref="T:System.ArgumentException">Ein wird versucht, eine Zeichenfolge zuzuweisen, die ein Anführungszeichen (") zu <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text" /> enthält.</exception>
      </Docs>
    </Member>
  </Members>
</Type>

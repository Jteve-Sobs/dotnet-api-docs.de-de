<Type Name="IMultipleResults" FullName="System.Data.Linq.IMultipleResults">
  <Metadata><Meta Name="ms.openlocfilehash" Value="09451467f87a8f5495492619cd4e8b7b033e069a" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="69128145" /></Metadata><TypeSignature Language="C#" Value="public interface IMultipleResults : IDisposable, System.Data.Linq.IFunctionResult" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMultipleResults implements class System.Data.Linq.IFunctionResult, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.IMultipleResults" />
  <TypeSignature Language="VB.NET" Value="Public Interface IMultipleResults&#xA;Implements IDisposable, IFunctionResult" />
  <TypeSignature Language="C++ CLI" Value="public interface class IMultipleResults : IDisposable, System::Data::Linq::IFunctionResult" />
  <TypeSignature Language="F#" Value="type IMultipleResults = interface&#xA;    interface IFunctionResult&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.Linq.IFunctionResult</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Stellt die Ergebnisse von zugeordneten Funktionen oder Abfragen mit variablen Rückgabesequenzen dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im folgenden SQL-Codebeispiel hängt die Ergebnisform von der Eingabe ab (`shape =1` oder `shape = 2`). Die Reihenfolge, in der Projektionen zurückgegeben werden, ist nicht definiert.  
  
   
  
## Examples  
  
```  
CREATE PROCEDURE VariableResultShapes(@shape int)  
AS  
if(@shape = 1)  
    select CustomerID, ContactTitle, CompanyName from customers  
else if(@shape = 2)  
    select OrderID, ShipName from orders  
```  
  
 [!code-csharp[DLinqSprox#4](~/samples/snippets/csharp/VS_Snippets_Data/DLinqSprox/cs/northwind-sprox.cs#4)]
 [!code-vb[DLinqSprox#4](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqSprox/vb/northwind-sprox.vb#4)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetResult&lt;TElement&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;TElement&gt; GetResult&lt;TElement&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;!!TElement&gt; GetResult&lt;TElement&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.IMultipleResults.GetResult``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetResult(Of TElement) () As IEnumerable(Of TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TElement&gt;&#xA; System::Collections::Generic::IEnumerable&lt;TElement&gt; ^ GetResult();" />
      <MemberSignature Language="F#" Value="abstract member GetResult : unit -&gt; seq&lt;'Element&gt;" Usage="iMultipleResults.GetResult " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TElement">Der Typ der Sequenz, die zurückgegeben werden soll.</typeparam>
        <summary>Ruft das nächste Ergebnis als Sequenz eines angegebenen Typs ab.</summary>
        <returns>Eine Enumeration zum Durchlaufen der Ergebnisse.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um die gespeicherte Prozedur auszuführen, wird in etwa der folgende Code verwendet.  
  
> [!NOTE]
>  Sie müssen mithilfe Ihrer Kenntnisse über die gespeicherte Prozedur das <xref:System.Data.Linq.IMultipleResults.GetResult%2A>-Muster verwenden, um einen Enumerator mit dem richtigen Typ zu erhalten.  
  
   
  
## Examples  
 [!code-csharp[DLinqSprox#5](~/samples/snippets/csharp/VS_Snippets_Data/DLinqSprox/cs/Program.cs#5)]
 [!code-vb[DLinqSprox#5](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqSprox/vb/Module1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

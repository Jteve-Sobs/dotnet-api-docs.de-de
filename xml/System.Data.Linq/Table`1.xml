<Type Name="Table&lt;TEntity&gt;" FullName="System.Data.Linq.Table&lt;TEntity&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8f2e2c57717f41b8415d2d08b9d484756b3b8509" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Table&lt;TEntity&gt; : System.Collections.Generic.IEnumerable&lt;TEntity&gt;, System.ComponentModel.IListSource, System.Data.Linq.ITable, System.Linq.IQueryable&lt;TEntity&gt;, System.Linq.IQueryProvider where TEntity : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Table`1&lt;class TEntity&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt;, class System.Collections.IEnumerable, class System.ComponentModel.IListSource, class System.Data.Linq.ITable, class System.Linq.IQueryable, class System.Linq.IQueryable`1&lt;!TEntity&gt;, class System.Linq.IQueryProvider" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.Table`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Table(Of TEntity)&#xA;Implements IEnumerable(Of TEntity), IListSource, IQueryable(Of TEntity), IQueryProvider, ITable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TEntity&gt;&#xA; where TEntity : classpublic ref class Table sealed : System::Collections::Generic::IEnumerable&lt;TEntity&gt;, System::ComponentModel::IListSource, System::Data::Linq::ITable, System::Linq::IQueryable&lt;TEntity&gt;, System::Linq::IQueryProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Data.Linq.ITable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TEntity">
      <span data-ttu-id="e47d3-101">Der Typ der Daten in der Tabelle.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e47d3-101">The type of the data in the table.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="e47d3-102">Stellt eine Tabelle für einen bestimmten Typ in der zugrunde liegenden Datenbank dar.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e47d3-102">Represents a table for a particular type in the underlying database.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-103">Diese Klasse ermöglicht das Ausführen von Abfragen mit der Tabelle hinzufügen, entfernen und Objekte anzufügen.</span><span class="sxs-lookup"><span data-stu-id="e47d3-103">This class enables you to query over the table and add, remove, and attach objects.</span></span>  
  
 <span data-ttu-id="e47d3-104">Eine Anwendung zugreifen kann eine <xref:System.Data.Linq.Table%601> -Instanz über <xref:System.Data.Linq.DataContext.GetTable%2A> oder indem Sie eine stark typisierte Eigenschaft für den stark typisierten <xref:System.Data.Linq.DataContext>.</span><span class="sxs-lookup"><span data-stu-id="e47d3-104">An application can access a <xref:System.Data.Linq.Table%601> instance via <xref:System.Data.Linq.DataContext.GetTable%2A> or by using a strongly typed property for the strongly typed <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="e47d3-105">Wenn der Designer ein DataContext-Objekt generiert, generiert es also Eigenschaften, um die Darstellung der einzelnen Tabellen.</span><span class="sxs-lookup"><span data-stu-id="e47d3-105">That is, when the designer generates a DataContext object, it generates properties to represent each Table.</span></span> <span data-ttu-id="e47d3-106">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="e47d3-106">For example:</span></span>  
  
```  
[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SignOffTool")]  
public partial class DataClasses1DataContext : System.Data.Linq.DataContext {  
   public System.Data.Linq.Table<User> Users {  
      get {  
         return this.GetTable<User>();  
      }  
   }  
}  
```  
  
 <span data-ttu-id="e47d3-107">Für diesen stark typisierten DataContext erreichen Sie die abzurufende Eigenschaft Benutzer `Table<User>`.</span><span class="sxs-lookup"><span data-stu-id="e47d3-107">For this strongly typed DataContext, you can access the Users property to get `Table<User>`.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e47d3-108">Fügt eine Entität an den <see cref="T:System.Data.Linq.DataContext" /> an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-108">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-109">Verwenden der `Attach` Methoden mit Entitäten, die in einem erstellt wurden <xref:System.Data.Linq.DataContext>in einem Client serialisiert und deserialisiert dann zurück (mit der Absicht an, führen Sie ein Update oder Löschvorgang).</span><span class="sxs-lookup"><span data-stu-id="e47d3-109">Use the `Attach` methods with entities that have been created in one <xref:System.Data.Linq.DataContext>, serialized to a client, and then deserialized back (with the intention to perform an update or delete operation).</span></span> <span data-ttu-id="e47d3-110">Weitere Informationen finden Sie unter [Datenabruf und CUD-Operationen in N-Tier-Anwendungen (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="e47d3-110">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="e47d3-111">Sie sollten nicht versuchen, `Attach` eine Entität, die nicht über die Serialisierung getrennt wurde.</span><span class="sxs-lookup"><span data-stu-id="e47d3-111">Do not try to `Attach` an entity that has not been detached through serialization.</span></span> <span data-ttu-id="e47d3-112">Entitäten, die nicht serialisiert wurden verwalten weiterhin Zuordnungen mit verzögerten ladenprogrammen, die unerwartete Ergebnisse verursachen können, wenn die Entität von einem zweiten Datenkontext nachverfolgt wird.</span><span class="sxs-lookup"><span data-stu-id="e47d3-112">Entities that have not been serialized still maintain associations with deferred loaders that can cause unexpected results if the entity becomes tracked by a second data context.</span></span>  
  
 <span data-ttu-id="e47d3-113">Wenn eine neue Entität angehängt wird, verzögerte Ladeprogramme für alle untergeordneten Sammlungen (z. B. `EntitySet` Auflistungen von Entitäten aus verknüpften Tabellen) initialisiert werden.</span><span class="sxs-lookup"><span data-stu-id="e47d3-113">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="e47d3-114">Wenn <xref:System.Data.Linq.DataContext.SubmitChanges%2A> aufgerufen wird, werden Mitglieder von untergeordneten Sammlungen abgelegt sind ein `Unmodified` Zustand.</span><span class="sxs-lookup"><span data-stu-id="e47d3-114">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="e47d3-115">Sie müssen explizit aufrufen, um Mitglied einer untergeordneten Sammlung zu aktualisieren, `Attach` und diese Entität angeben.</span><span class="sxs-lookup"><span data-stu-id="e47d3-115">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="e47d3-116">`Attach` Fügt alle Entitäten im Objektdiagramm des angegebenen Objekts.</span><span class="sxs-lookup"><span data-stu-id="e47d3-116">`Attach` attaches all entities in the object graph of the provided object.</span></span> <span data-ttu-id="e47d3-117">Um beispielsweise den folgenden C#-Code:</span><span class="sxs-lookup"><span data-stu-id="e47d3-117">For example, the following C# code:</span></span>  
  
```  
using (SampleDataContext db = new SampleDataContext()) {  
    Employee employee = new Employee { employeeId = 1 };  
  
    Master master = new Master();  
    master.Employee = employee;  
  
    Child child = new Child();  
    child.Employee = employee;  
  
    db.Employees.Attach(employee);  
  
    master.Child = child;  
  
    db.Masters.InsertOnSubmit(master);  
  
    db.SubmitChanges();  
}  
  
```  
  
 <span data-ttu-id="e47d3-118">Wird von der entsprechende Visual Basic-Code:</span><span class="sxs-lookup"><span data-stu-id="e47d3-118">The equivalent Visual Basic code is:</span></span>  
  
```  
Using db As New SampleDataContext()    Dim employee As New Employee With { .employeeId = 1 }  
  
    Dim master As New Master()  
    master.Employee = employee  
  
    Dim child As New Child()  
    child.Employee = employee  
  
    db.Employees.Attach(employee)  
  
    master.Child = child  
  
    db.Masters.InsertOnSubmit(master)  
  
    db.SubmitChanges()  
  
End Using  
```  
  
 <span data-ttu-id="e47d3-119">Aufrufen von `Attach` auf `Employee` fügt Mitarbeiter Master und untergeordnetes Element, da die `Employee` hat Beziehungen zu Master und untergeordneten.</span><span class="sxs-lookup"><span data-stu-id="e47d3-119">Calling `Attach` on `Employee` attaches employee, master, and child, because the `Employee` has relationships to both master and child.</span></span> <span data-ttu-id="e47d3-120">Sie müssen explizit aufrufen, `InsertOnSubmit` zur Änderung des Zustands von angefügt zu eingefügt.</span><span class="sxs-lookup"><span data-stu-id="e47d3-120">You must explicitly call `InsertOnSubmit` to change the state from attached to inserted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.Attach(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="e47d3-121">Die ursprünglichen Werte der Entität, die angefügt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-121">The original values of the entity to be attached.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e47d3-122">Fügt eine getrennte Entität einem neuen <see cref="T:System.Data.Linq.DataContext" /> an, wenn ursprüngliche Werte für Prüfungen der vollständigen Parallelität benötigt werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-122">Attaches a disconnected or "detached" entity to a new <see cref="T:System.Data.Linq.DataContext" /> when original values are required for optimistic concurrency checks.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-123">Verwenden der `Attach` Methoden mit Entitäten, die in einem erstellt wurden <xref:System.Data.Linq.DataContext>in einem Client serialisiert und deserialisiert dann zurück, um eine Aktualisierung auszuführen oder Löschvorgang.</span><span class="sxs-lookup"><span data-stu-id="e47d3-123">Use the `Attach` methods with entities that have been created in one <xref:System.Data.Linq.DataContext>, serialized to a client, and then deserialized back to perform an update or delete operation.</span></span> <span data-ttu-id="e47d3-124">Da die neue <xref:System.Data.Linq.DataContext> hat keine Möglichkeit, der durch das Nachverfolgen, was die ursprünglichen Werte für eine Entität getrennt wurde, der Client ist dafür verantwortlich, diese Werte bereitstellen.</span><span class="sxs-lookup"><span data-stu-id="e47d3-124">Because the new <xref:System.Data.Linq.DataContext> has no way of tracking what the original values were for a disconnected entity, the client is responsible for supplying those values.</span></span> <span data-ttu-id="e47d3-125">In dieser Version von <xref:System.Data.Linq.Table%601.Attach%2A>, wird davon ausgegangen, dass die Entität in den ursprünglichen Wert Zustand befinden.</span><span class="sxs-lookup"><span data-stu-id="e47d3-125">In this version of <xref:System.Data.Linq.Table%601.Attach%2A>, the entity is assumed to be in its original value state.</span></span> <span data-ttu-id="e47d3-126">Nach dem Aufrufen dieser Methode können Sie dann ihre Felder, z. B. mit zusätzlichen Daten, die vom Client gesendete aktualisieren.</span><span class="sxs-lookup"><span data-stu-id="e47d3-126">After calling this method, you can then update its fields, for example with additional data sent from the client.</span></span>  
  
 <span data-ttu-id="e47d3-127">Wenn eine neue Entität angehängt wird, verzögerte Ladeprogramme für alle untergeordneten Sammlungen (z. B. `EntitySet` Auflistungen von Entitäten aus verknüpften Tabellen) initialisiert werden.</span><span class="sxs-lookup"><span data-stu-id="e47d3-127">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="e47d3-128">Wenn <xref:System.Data.Linq.DataContext.SubmitChanges%2A> aufgerufen wird, werden Mitglieder von untergeordneten Sammlungen abgelegt sind ein `Unmodified` Zustand.</span><span class="sxs-lookup"><span data-stu-id="e47d3-128">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="e47d3-129">Sie müssen explizit aufrufen, um Mitglied einer untergeordneten Sammlung zu aktualisieren, `Attach` und diese Entität angeben.</span><span class="sxs-lookup"><span data-stu-id="e47d3-129">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="e47d3-130">Weitere Informationen finden Sie unter [Datenabruf und CUD-Operationen in N-Tier-Anwendungen (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="e47d3-130">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="e47d3-131">Sie sollten nicht versuchen, `Attach` eine Entität, die nicht über die Serialisierung getrennt wurde.</span><span class="sxs-lookup"><span data-stu-id="e47d3-131">Do not try to `Attach` an entity that has not been detached through serialization.</span></span> <span data-ttu-id="e47d3-132">Entitäten, die nicht serialisiert wurden verwalten weiterhin Zuordnungen mit verzögerten ladenprogrammen, die unerwartete Ergebnisse verursachen können, wenn die Entität von einem zweiten Datenkontext nachverfolgt wird.</span><span class="sxs-lookup"><span data-stu-id="e47d3-132">Entities that have not been serialized still maintain associations with deferred loaders that can cause unexpected results if the entity becomes tracked by a second data context.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.Attach(`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity, asModified As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity, bool asModified);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="e47d3-133">Die Entität, die angefügt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-133">The entity to be attached.</span>
          </span>
        </param>
        <param name="asModified">
          <span data-ttu-id="e47d3-134">
            <see langword="true" />, um die Entität als geändert anzufügen; <see langword="false" />, um die Entität als nicht geändert anzufügen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-134">
              <see langword="true" /> to attach the entity as modified; <see langword="false" /> to attach the entity as unmodified.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e47d3-135">Fügt eine Entität im veränderten oder unveränderten Zustand an den <see cref="T:System.Data.Linq.DataContext" /> an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-135">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-136">Wenn Anfügen *veränderten*, die Entität muss entweder Mitglied Version deklarieren oder müssen nicht in Konflikt updateüberprüfung einbezogen.</span><span class="sxs-lookup"><span data-stu-id="e47d3-136">If attaching *as modified*, the entity must either declare a version member or must not participate in update conflict checking.</span></span> <span data-ttu-id="e47d3-137">Wenn eine neue Entität angehängt wird, verzögerte Ladeprogramme für alle untergeordneten Sammlungen (z. B. `EntitySet` Auflistungen von Entitäten aus verknüpften Tabellen) initialisiert werden.</span><span class="sxs-lookup"><span data-stu-id="e47d3-137">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="e47d3-138">Wenn <xref:System.Data.Linq.DataContext.SubmitChanges%2A> aufgerufen wird, werden Mitglieder von untergeordneten Sammlungen abgelegt sind ein `Unmodified` Zustand.</span><span class="sxs-lookup"><span data-stu-id="e47d3-138">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="e47d3-139">Sie müssen explizit aufrufen, um Mitglied einer untergeordneten Sammlung zu aktualisieren, `Attach` und diese Entität angeben.</span><span class="sxs-lookup"><span data-stu-id="e47d3-139">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity, TEntity original);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity, !TEntity original) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.Attach(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity, original As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity, TEntity original);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
        <Parameter Name="original" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="e47d3-140">Die Entität, die angefügt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-140">The entity to be attached.</span>
          </span>
        </param>
        <param name="original">
          <span data-ttu-id="e47d3-141">Eine Instanz des gleichen Entitätstyps mit Datenmembern, die die ursprünglichen Werte enthalten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-141">An instance of the same entity type with data members that contain the original values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e47d3-142">Fügt eine Entität im veränderten oder unveränderten Zustand an den <see cref="T:System.Data.Linq.DataContext" /> an, indem sowohl die Entität als auch ihr ursprünglicher Zustand angegeben werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-142">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state by specifying both the entity and its original state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-143">Im folgenden Beispiel die `Customer` -Objekt bereits ordnungsgemäß konfiguriert ist.</span><span class="sxs-lookup"><span data-stu-id="e47d3-143">In the following example, the `Customer` object is already correctly configured.</span></span> <span data-ttu-id="e47d3-144">Sie können Aufrufen `Attach` ohne die Updates wiedergeben.</span><span class="sxs-lookup"><span data-stu-id="e47d3-144">You can call `Attach` without having to replay the updates.</span></span>  
  
 <span data-ttu-id="e47d3-145">Wenn eine neue Entität angehängt wird, verzögerte Ladeprogramme für alle untergeordneten Sammlungen (z. B. `EntitySet` Auflistungen von Entitäten aus verknüpften Tabellen) initialisiert werden.</span><span class="sxs-lookup"><span data-stu-id="e47d3-145">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="e47d3-146">Wenn <xref:System.Data.Linq.DataContext.SubmitChanges%2A> aufgerufen wird, werden Mitglieder von untergeordneten Sammlungen abgelegt sind ein `Unmodified` Zustand.</span><span class="sxs-lookup"><span data-stu-id="e47d3-146">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="e47d3-147">Sie müssen explizit aufrufen, um Mitglied einer untergeordneten Sammlung zu aktualisieren, `Attach` und diese Entität angeben.</span><span class="sxs-lookup"><span data-stu-id="e47d3-147">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
   
  
## Examples  
 [!code-csharp[DLinqNTier#4](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#4)]
 [!code-vb[DLinqNTier#4](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AttachAll&lt;TSubEntity&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e47d3-148">Fügt alle Entitäten einer Auflistung im veränderten oder unveränderten Zustand an den <see cref="T:System.Data.Linq.DataContext" /> an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-148">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-149">Wenn anfügen geändert wurde, wird die Entität muss entweder Mitglied Version deklarieren oder muss nicht in Konflikt updateüberprüfung einbezogen.</span><span class="sxs-lookup"><span data-stu-id="e47d3-149">If attaching as modified, the entity must either declare a version member or must not participate in update conflict checking.</span></span>  
  
 <span data-ttu-id="e47d3-150">Wenn eine neue Entität angehängt wird, verzögerte Ladeprogramme für alle untergeordneten Sammlungen (z. B. `EntitySet` Auflistungen von Entitäten aus verknüpften Tabellen) initialisiert werden.</span><span class="sxs-lookup"><span data-stu-id="e47d3-150">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="e47d3-151">Wenn <xref:System.Data.Linq.DataContext.SubmitChanges%2A> aufgerufen wird, werden Mitglieder von untergeordneten Sammlungen abgelegt sind ein `Unmodified` Zustand.</span><span class="sxs-lookup"><span data-stu-id="e47d3-151">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="e47d3-152">Sie müssen explizit aufrufen, um Mitglied einer untergeordneten Sammlung zu aktualisieren, `Attach` und diese Entität angeben.</span><span class="sxs-lookup"><span data-stu-id="e47d3-152">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="e47d3-153">Weitere Informationen finden Sie unter [Datenabruf und CUD-Operationen in N-Tier-Anwendungen (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="e47d3-153">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AttachAll&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void AttachAll&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachAll&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachAll(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void AttachAll(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity">
          <span data-ttu-id="e47d3-154">Der Typ der anzufügenden Entitäten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-154">The type of entities to attach.</span>
          </span>
        </typeparam>
        <param name="entities">
          <span data-ttu-id="e47d3-155">Die Auflistung von Entitäten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-155">The collection of entities.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e47d3-156">Fügt alle Entitäten einer Auflistung im veränderten oder unveränderten Zustand an den <see cref="T:System.Data.Linq.DataContext" /> an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-156">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-157">Diese Methode fügt alle Entitäten einer Auflistung in ein neues <xref:System.Data.Linq.DataContext>.</span><span class="sxs-lookup"><span data-stu-id="e47d3-157">This method attaches all entities of a collection to a new <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="e47d3-158">Wenn eine neue Entität angehängt wird, verzögerte Ladeprogramme für alle untergeordneten Sammlungen (z. B. `EntitySet` Auflistungen von Entitäten aus verknüpften Tabellen) initialisiert werden.</span><span class="sxs-lookup"><span data-stu-id="e47d3-158">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="e47d3-159">Wenn <xref:System.Data.Linq.DataContext.SubmitChanges%2A> aufgerufen wird, werden Mitglieder von untergeordneten Sammlungen abgelegt sind ein `Unmodified` Zustand.</span><span class="sxs-lookup"><span data-stu-id="e47d3-159">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="e47d3-160">Sie müssen explizit aufrufen, um Mitglied einer untergeordneten Sammlung zu aktualisieren, `Attach` und diese Entität angeben.</span><span class="sxs-lookup"><span data-stu-id="e47d3-160">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="e47d3-161">Weitere Informationen finden Sie unter [Datenabruf und CUD-Operationen in N-Tier-Anwendungen (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="e47d3-161">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachAll&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void AttachAll&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities, bool asModified) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachAll&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachAll(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity), asModified As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void AttachAll(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities, bool asModified);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity">
          <span data-ttu-id="e47d3-162">Der Typ der anzufügenden Entitäten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-162">The type of entities to attach.</span>
          </span>
        </typeparam>
        <param name="entities">
          <span data-ttu-id="e47d3-163">Die Auflistung von Entitäten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-163">The collection of entities.</span>
          </span>
        </param>
        <param name="asModified">
          <span data-ttu-id="e47d3-164">
            <see langword="true" />, wenn das Objekt über einen timestamp-Member oder RowVersion-Member verfügt, <see langword="false" />, wenn ursprüngliche Werte für die Prüfung auf vollständige Parallelität verwendet werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-164">
              <see langword="true" /> if the object has a timestamp or RowVersion member; <see langword="false" /> if original values are being used for the optimistic concurrency check.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e47d3-165">Fügt alle Entitäten einer Auflistung im veränderten oder unveränderten Zustand an den <see cref="T:System.Data.Linq.DataContext" /> an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-165">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-166">Diese Methode fügt alle Entitäten einer Auflistung an der <xref:System.Data.Linq.DataContext> entweder in einer *geändert* oder *unveränderte* Zustand.</span><span class="sxs-lookup"><span data-stu-id="e47d3-166">This method attaches all entities of a collection to the <xref:System.Data.Linq.DataContext> in either a *modified* or *unmodified* state.</span></span> <span data-ttu-id="e47d3-167">Wenn anfügen geändert wurde, wird die Entität muss entweder Mitglied Version deklarieren oder muss nicht in Konflikt updateüberprüfung einbezogen.</span><span class="sxs-lookup"><span data-stu-id="e47d3-167">If attaching as modified, the entity must either declare a version member or must not participate in update conflict checking.</span></span> <span data-ttu-id="e47d3-168">Wenn als unverändert angefügt wurde, wird davon ausgegangen, dass die Entität den ursprünglichen Wert darstellen.</span><span class="sxs-lookup"><span data-stu-id="e47d3-168">If attaching as unmodified, the entity is assumed to represent the original value.</span></span> <span data-ttu-id="e47d3-169">Nach dem Aufrufen dieser Methode können die Felder der Entität mit anderen Informationen aus dem Client vor geändert werden <xref:System.Data.Linq.DataContext.SubmitChanges%2A> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="e47d3-169">After calling this method, the entity's fields can be modified with other information from the client before <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span> <span data-ttu-id="e47d3-170">Weitere Informationen finden Sie unter [Datenabruf und CUD-Operationen in N-Tier-Anwendungen (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="e47d3-170">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="e47d3-171">Wenn eine neue Entität angehängt wird, verzögerte Ladeprogramme für alle untergeordneten Sammlungen (z. B. `EntitySet` Auflistungen von Entitäten aus verknüpften Tabellen) initialisiert werden.</span><span class="sxs-lookup"><span data-stu-id="e47d3-171">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="e47d3-172">Wenn <xref:System.Data.Linq.DataContext.SubmitChanges%2A> aufgerufen wird, werden Mitglieder von untergeordneten Sammlungen abgelegt sind ein `Unmodified` Zustand.</span><span class="sxs-lookup"><span data-stu-id="e47d3-172">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="e47d3-173">Sie müssen explizit aufrufen, um Mitglied einer untergeordneten Sammlung zu aktualisieren, `Attach` und diese Entität angeben.</span><span class="sxs-lookup"><span data-stu-id="e47d3-173">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e47d3-174">Das folgende Beispiel zeigt, wie Sie aktualisieren einen `Order` auf einem anderen Objekt <xref:System.Data.Linq.DataContext> Instanz.</span><span class="sxs-lookup"><span data-stu-id="e47d3-174">The following example shows how you can update an `Order` object on a different <xref:System.Data.Linq.DataContext> instance.</span></span> <span data-ttu-id="e47d3-175">Im Beispiel wird davon ausgegangen, dass Sie eine Verbindung mit einer Datenbank besteht und eine [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] Datei dafür (in diesem Fall wird der Northwind-Beispieldatenbank).</span><span class="sxs-lookup"><span data-stu-id="e47d3-175">The example assumes that you have a connection to a database and have made a [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] file for it (in this case, the Northwind sample database).</span></span>  
  
 [!code-csharp[DLinqNTier#1](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#1)]
 [!code-vb[DLinqNTier#1](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#1)]  
  
 <span data-ttu-id="e47d3-176">Im folgenden Beispiel ein Entitätsobjekt angefügt werden verfügt über eine foreign Key-Beziehung mit einem anderen Objekt und im Cache gespeichert, aber nicht angefügt.</span><span class="sxs-lookup"><span data-stu-id="e47d3-176">In the following example, an entity object to be attached has a foreign key relation with another object and is stored in the cache but not attached.</span></span> <span data-ttu-id="e47d3-177">Beim Aufruf <xref:System.Data.Linq.DataContext.SubmitChanges%2A>, `ChangeProcessor` Fügt eine `Insert` Vorgang für die foreign Key-Objekte.</span><span class="sxs-lookup"><span data-stu-id="e47d3-177">When you call <xref:System.Data.Linq.DataContext.SubmitChanges%2A>, the `ChangeProcessor` adds an `Insert` operation for all the foreign key objects.</span></span> <span data-ttu-id="e47d3-178">Dies ist ein Nebeneffekt, wenn eine Entitätsinstanz erneut verwendet ein anderes ist <xref:System.Data.Linq.DataContext> Instanz.</span><span class="sxs-lookup"><span data-stu-id="e47d3-178">This is a side-effect when an entity instance is re-used in a different <xref:System.Data.Linq.DataContext> instance.</span></span> <span data-ttu-id="e47d3-179">Aus diesem Grund [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] erneute Verwendung von Objekten nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="e47d3-179">For this reason, [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] does not support re-use of objects.</span></span>  
  
 [!code-csharp[DlinqNTier#7](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#7)]
 [!code-vb[DlinqNTier#7](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#7)]  
  
 <span data-ttu-id="e47d3-180">Das folgende Beispiel zeigt ein Szenario, in der Kunde A verfügt über alle Aufträge abgebrochen, und Kunden B hat den Besitz von ihnen übernommen.</span><span class="sxs-lookup"><span data-stu-id="e47d3-180">The following example shows a scenario in which Customer A has canceled all orders and Customer B has taken ownership of them.</span></span> <span data-ttu-id="e47d3-181">Sie können alle Aufträge des Kunden ein gleichzeitig anfügen.</span><span class="sxs-lookup"><span data-stu-id="e47d3-181">You can attach all orders of Customer A at the same time.</span></span>  
  
 [!code-csharp[DlinqNTier#3](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#3)]
 [!code-vb[DlinqNTier#3](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public System.Data.Linq.DataContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Linq.DataContext Context" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.Context" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Context As DataContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Linq::DataContext ^ Context { System::Data::Linq::DataContext ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.DataContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e47d3-182">Ruft den <see cref="T:System.Data.Linq.DataContext" /> ab, der zum Abrufen der <see cref="T:System.Data.Linq.Table`1" /> verwendet wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-182">Gets the <see cref="T:System.Data.Linq.DataContext" /> that has been used to retrieve this <see cref="T:System.Data.Linq.Table`1" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e47d3-183">Der Datenkontext, der verwendet wurde, um diese Tabelle abzurufen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-183">The data context that has been used to retrieve this table.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAllOnSubmit&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void DeleteAllOnSubmit&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteAllOnSubmit&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.DeleteAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteAllOnSubmit(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void DeleteAllOnSubmit(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity">
          <span data-ttu-id="e47d3-184">Der Typ der zu löschenden Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-184">The type of the elements to delete.</span>
          </span>
        </typeparam>
        <param name="entities">
          <span data-ttu-id="e47d3-185">Die zu löschenden Entitäten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-185">The entities to delete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e47d3-186">Ändert den Zustand aller Entitäten in der Auflistung in <see langword="pending delete" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-186">Puts all entities from the collection into a <see langword="pending delete" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-187">Verschwinden die Entitäten, die mit dieser Methode in der ausstehenden abgelegt werden nicht aus den Abfrageergebnissen, bis <xref:System.Data.Linq.DataContext.SubmitChanges%2A> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="e47d3-187">Entities that are put into the pending delete state with this method do not disappear from query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span> <span data-ttu-id="e47d3-188">Getrennte Entitäten müssen angefügt werden, bevor sie gelöscht werden können.</span><span class="sxs-lookup"><span data-stu-id="e47d3-188">Disconnected entities must be attached before they can be deleted.</span></span> <span data-ttu-id="e47d3-189">Weitere Informationen finden Sie unter [Datenabruf und CUD-Operationen in N-Tier-Anwendungen (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="e47d3-189">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="e47d3-190">Der folgende C#-Codeausschnitt zeigt eine Verwendung für diese Methode:</span><span class="sxs-lookup"><span data-stu-id="e47d3-190">The following C# snippet shows one use for this method:</span></span>  
  
```  
IEnumerable<Customer> customersWithoutOrders = (from c in db.Customers  
   where c.Orders.Count == 0  
   select c).ToList();  
  
db.Customers.DeleteAllOnSubmit(customersWithoutOrders);  
db.SubmitChanges();  
```  
  
 <span data-ttu-id="e47d3-191">In Visual Basic:</span><span class="sxs-lookup"><span data-stu-id="e47d3-191">In Visual Basic:</span></span>  
  
```  
Dim customersWithoutOrders As IEnumerable(Of Customer) = (From c In db.Customers _   
    Where c.Orders.Count = 0 _   
    Select c).ToList()  
  
db.Customers.DeleteAllOnSubmit(customersWithoutOrders)  
db.SubmitChanges()  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteOnSubmit">
      <MemberSignature Language="C#" Value="public void DeleteOnSubmit (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteOnSubmit(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.DeleteOnSubmit(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteOnSubmit (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteOnSubmit(TEntity entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="e47d3-192">Die Entität, die gelöscht werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-192">The entity to be deleted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e47d3-193">Ändert den Zustand einer Entität aus dieser Tabelle in <see langword="pending delete" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-193">Puts an entity from this table into a <see langword="pending delete" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-194">Die entfernte Entität nicht aus den Abfrageergebnissen erst nach dem ausgeblendet <xref:System.Data.Linq.DataContext.SubmitChanges%2A> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="e47d3-194">The removed entity does not disappear from the query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span> <span data-ttu-id="e47d3-195">Getrennte Entitäten müssen zuerst angefügt werden, bevor sie gelöscht werden können.</span><span class="sxs-lookup"><span data-stu-id="e47d3-195">Disconnected entities must first be attached before they can be deleted.</span></span> <span data-ttu-id="e47d3-196">Weitere Informationen finden Sie unter [Datenabruf und CUD-Operationen in N-Tier-Anwendungen (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="e47d3-196">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e47d3-197">Kaskadierte Löschvorgänge werden von [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] nicht unterstützt bzw. erkannt.</span><span class="sxs-lookup"><span data-stu-id="e47d3-197">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] does not support or recognize cascade-delete operations.</span></span> <span data-ttu-id="e47d3-198">Wenn eine Zeile in einer Tabelle zu löschen, die Einschränkungen gelten sollen, müssen Sie entweder die `ON DELETE CASCADE` -Regel in der foreign Key-Einschränkung in der Datenbank, oder verwenden Sie eigenen Code zunächst die untergeordneten Objekte löschen, die verhindern, dass das übergeordnete Objekt gelöscht werden.</span><span class="sxs-lookup"><span data-stu-id="e47d3-198">If you want to delete a row in a table that has constraints against it, you must either set the `ON DELETE CASCADE` rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted.</span></span> <span data-ttu-id="e47d3-199">Andernfalls wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="e47d3-199">Otherwise, an exception is thrown.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Table#3](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.table/cs/program.cs#3)]
 [!code-vb[System.Data.Linq.Table#3](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.table/vb/module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;TEntity&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerator`1&lt;!TEntity&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerator&lt;TEntity&gt; ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e47d3-200">Ruft einen Enumerator ab, der die Auflistung durchläuft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-200">Gets an enumerator that iterates through the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e47d3-201">Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-201">An enumerator that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModifiedMembers">
      <MemberSignature Language="C#" Value="public System.Data.Linq.ModifiedMemberInfo[] GetModifiedMembers (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.Linq.ModifiedMemberInfo[] GetModifiedMembers(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetModifiedMembers(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetModifiedMembers (entity As TEntity) As ModifiedMemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::Linq::ModifiedMemberInfo&gt; ^ GetModifiedMembers(TEntity entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.ModifiedMemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="e47d3-202">Die Entität, aus der das Array abgerufen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-202">The entity from which to get the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e47d3-203">Gibt ein Array von geänderten Membern mit den aktuellen und den ursprünglichen Werten zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-203">Returns an array of modified members that contain their current and original values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e47d3-204">Ein Array von geänderten Membern mit den aktuellen und den ursprünglichen Werten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-204">An array of modified members that contain their current and original values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNewBindingList">
      <MemberSignature Language="C#" Value="public System.ComponentModel.IBindingList GetNewBindingList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.IBindingList GetNewBindingList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetNewBindingList" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNewBindingList () As IBindingList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::IBindingList ^ GetNewBindingList();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IBindingList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e47d3-205">Erstellt eine neue Liste zum Binden an eine Datenquelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-205">Creates a new list for binding to a data source.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e47d3-206">Eine neue <see cref="T:System.ComponentModel.IBindingList" /> zum Binden an eine Datenquelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-206">A new <see cref="T:System.ComponentModel.IBindingList" /> for binding to a data source.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-207">Die zurückgegebene Liste unterstützt Standardvorgänge wie Hinzufügungen, löschungen, einfügungen und Updates, aber speichert müssen explizit vom Programmierer verwaltet werden.</span><span class="sxs-lookup"><span data-stu-id="e47d3-207">The returned list supports standard operations, such as additions, deletions, insertions, and updates, but saves must be explicitly managed by the programmer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOriginalEntityState">
      <MemberSignature Language="C#" Value="public TEntity GetOriginalEntityState (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TEntity GetOriginalEntityState(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetOriginalEntityState(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOriginalEntityState (entity As TEntity) As TEntity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TEntity GetOriginalEntityState(TEntity entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="e47d3-208">Die Entität, deren ursprünglicher Zustand zurückgegeben werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-208">The entity whose original state is to be returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e47d3-209">Gibt eine <see cref="T:System.Data.Linq.Table`1" />-Instanz zurück, die den ursprünglichen Zustand der Entität enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-209">Returns a <see cref="T:System.Data.Linq.Table`1" /> instance that contains the original state of the entity.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e47d3-210">Eine <see cref="T:System.Data.Linq.Table`1" />-Instanz, die den ursprünglichen Zustand der Entität enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-210">A <see cref="T:System.Data.Linq.Table`1" /> instance that contains the original state of the entity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-211">Diese Methode gibt den ursprünglichen Zustand der Entität zurück, da entweder erstellt oder mit dem aktuellen angefügt wurde <xref:System.Data.Linq.DataContext>.</span><span class="sxs-lookup"><span data-stu-id="e47d3-211">This method returns the original state of an entity since it was either created or attached to the current <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="e47d3-212">Muss der originalen Zustand einer Entität, die serialisiert und deserialisiert wurde von einem unabhängigen Nachverfolgungsmechanismus bereitgestellt und angegeben wird, wenn die Entität an einen neuen angefügt ist <xref:System.Data.Linq.DataContext>.</span><span class="sxs-lookup"><span data-stu-id="e47d3-212">The original state of an entity that has been serialized and deserialized must be provided by an independent tracking mechanism and supplied when the entity is attached to a new <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="e47d3-213">Weitere Informationen finden Sie unter [Datenabruf und CUD-Operationen in N-Tier-Anwendungen (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="e47d3-213">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAllOnSubmit&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void InsertAllOnSubmit&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertAllOnSubmit&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.InsertAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAllOnSubmit(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void InsertAllOnSubmit(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity">
          <span data-ttu-id="e47d3-214">Der Typ der einzufügenden Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-214">The type of the elements to insert.</span>
          </span>
        </typeparam>
        <param name="entities">
          <span data-ttu-id="e47d3-215">Die Entitäten, die hinzugefügt werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-215">The entities to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e47d3-216">Fügt dem <see cref="T:System.Data.Linq.DataContext" /> alle Entitäten einer Auflistung im Zustand <see langword="pending insert" /> hinzu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-216">Adds all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in a <see langword="pending insert" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-217">Die hinzugefügten Entitäten werden nicht in den Abfrageergebnissen erst nach dem <xref:System.Data.Linq.DataContext.SubmitChanges%2A> aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="e47d3-217">The added entities will not be in query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> has been called.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertOnSubmit">
      <MemberSignature Language="C#" Value="public void InsertOnSubmit (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertOnSubmit(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.InsertOnSubmit(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertOnSubmit (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertOnSubmit(TEntity entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="e47d3-218">Die Entität, die hinzugefügt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-218">The entity to be added.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e47d3-219">Fügt dieser <see cref="T:System.Data.Linq.Table`1" /> eine Entität mit dem Status <see langword="pending insert" /> hinzu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-219">Adds an entity in a <see langword="pending insert" /> state to this <see cref="T:System.Data.Linq.Table`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-220">Die hinzugefügte Entität wird nicht in den Abfrageergebnissen angezeigt, aus dieser Tabelle erst nach <xref:System.Data.Linq.DataContext.SubmitChanges%2A> aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="e47d3-220">The added entity will not appear in query results from this table until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> has been called.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Table#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.table/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.Table#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.table/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.Linq.ITable.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e47d3-221">Ruft einen Wert ab, der angibt, ob der in dieser <see cref="T:System.Data.Linq.Table`1" />-Instanz enthaltene Entitätstyp über einen Primärschlüssel verfügt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-221">Gets a value that indicates whether the type of the entities contained in this <see cref="T:System.Data.Linq.Table`1" /> instance has a primary key.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e47d3-222">
            <see langword="true" />, wenn der Entitätstyp nicht über einen Primärschlüssel verfügt, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-222">
              <see langword="true" /> if the entity type does not have a primary key; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;TEntity&gt; IEnumerable&lt;TEntity&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!TEntity&gt; System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Collections#Generic#IEnumerable&lt;TEntity&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of TEntity) Implements IEnumerable(Of TEntity).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;TEntity&gt; ^ System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;TEntity&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e47d3-223">Gibt einen Enumerator zurück, der die Auflistung durchläuft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-223">Returns an enumerator that iterates through the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e47d3-224">Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-224">An enumerator that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e47d3-225">Gibt einen Enumerator zurück, der die Auflistung durchläuft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-225">Returns an enumerator that iterates through the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e47d3-226">Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-226">An enumerator that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-227">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="e47d3-227">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e47d3-228">Er kann nur verwendet werden, wenn die <xref:System.Data.Linq.Table%601>-Instanz in eine <xref:System.Collections.Generic.IEnumerable%601>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="e47d3-228">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System.ComponentModel.IListSource.ContainsListCollection { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e47d3-229">Ruft einen Wert ab, der angibt, ob die Auflistung eine Auflistung von <see cref="T:System.Collections.IList" />-Objekten ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-229">Gets a value that indicates whether the collection is a collection of <see cref="T:System.Collections.IList" /> objects.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e47d3-230">
            <see langword="true" />, wenn die Auflistung eine Auflistung von <see cref="T:System.Collections.IList" />-Objekten ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-230">
              <see langword="true" /> if the collection is a collection of <see cref="T:System.Collections.IList" /> objects; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-231">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="e47d3-231">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e47d3-232">Er kann nur verwendet werden, wenn die <xref:System.Data.Linq.Table%601>-Instanz in eine <xref:System.ComponentModel.IListSource>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="e47d3-232">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e47d3-233">Gibt eine <see cref="T:System.Collections.IList" /> zurück, die an eine Datenquelle eines Objekts gebunden werden kann, das selbst keine <see cref="T:System.Collections.IList" /> implementiert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-233">Returns an <see cref="T:System.Collections.IList" /> that can be bound to a data source from an object that does not implement an <see cref="T:System.Collections.IList" /> itself.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e47d3-234">Eine <see cref="T:System.Collections.IList" />, die an eine Datenquelle gebunden werden kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-234">An <see cref="T:System.Collections.IList" /> that can be bound to a data source.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-235">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="e47d3-235">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e47d3-236">Er kann nur verwendet werden, wenn die <xref:System.Data.Linq.Table%601>-Instanz in eine <xref:System.ComponentModel.IListSource>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="e47d3-236">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="System.Data.Linq.ITable.Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e47d3-237">Hiermit können deserialisierte Entitäten einer neuen Instanz eines <see cref="T:System.Data.Linq.DataContext" /> zugeordnet werden, damit sie in der Datenbank aktualisiert oder gelöscht werden können.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-237">Allows deserialized entities to be associated with a new instance of a <see cref="T:System.Data.Linq.DataContext" /> so that they can be updated or deleted from the database.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="System.Data.Linq.ITable.Attach">
      <MemberSignature Language="C#" Value="void ITable.Attach (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.Attach(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object) Implements ITable.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.Attach(System::Object ^ entity) = System::Data::Linq::ITable::Attach;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.Attach(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="e47d3-238">Die Entität, die angefügt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-238">The entity to be attached.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e47d3-239">Fügt dem <see cref="T:System.Data.Linq.DataContext" /> eine unveränderte Entität hinzu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-239">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in an unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-240">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="e47d3-240">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e47d3-241">Er kann nur verwendet werden, wenn die <xref:System.Data.Linq.Table%601>-Instanz in eine <xref:System.Data.Linq.ITable>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="e47d3-241">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.Attach">
      <MemberSignature Language="C#" Value="void ITable.Attach (object entity, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.Attach(object entity, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object, asModified As Boolean) Implements ITable.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.Attach(System::Object ^ entity, bool asModified) = System::Data::Linq::ITable::Attach;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.Attach(System.Object,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="e47d3-242">Die Entität, die angefügt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-242">The entity to be attached.</span>
          </span>
        </param>
        <param name="asModified">
          <span data-ttu-id="e47d3-243">
            <see langword="true" />, um die Entität als geändert anzufügen; <see langword="false" />, um die Entität als nicht geändert anzufügen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-243">
              <see langword="true" /> to attach the entity as modified; <see langword="false" /> to attached the entity as unmodified.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e47d3-244">Fügt alle Entitäten einer Auflistung im veränderten oder unveränderten Zustand an den <see cref="T:System.Data.Linq.DataContext" /> an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-244">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-245">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="e47d3-245">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e47d3-246">Er kann nur verwendet werden, wenn die <xref:System.Data.Linq.Table%601>-Instanz in eine <xref:System.Data.Linq.ITable>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="e47d3-246">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.Attach">
      <MemberSignature Language="C#" Value="void ITable.Attach (object entity, object original);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.Attach(object entity, object original) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object, original As Object) Implements ITable.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.Attach(System::Object ^ entity, System::Object ^ original) = System::Data::Linq::ITable::Attach;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.Attach(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="original" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="e47d3-247">Die Entität, die angefügt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-247">The entity to be attached.</span>
          </span>
        </param>
        <param name="original">
          <span data-ttu-id="e47d3-248">Eine Instanz des gleichen Entitätstyps mit Datenmembern, die die ursprünglichen Werte enthalten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-248">An instance of the same entity type with data members that contain the original values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e47d3-249">Fügt eine Entität im veränderten oder unveränderten Zustand an den <see cref="T:System.Data.Linq.DataContext" /> an, indem sowohl die Entität als auch ihr ursprünglicher Zustand angegeben werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-249">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state by specifying both the entity and its original state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-250">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="e47d3-250">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e47d3-251">Er kann nur verwendet werden, wenn die <xref:System.Data.Linq.Table%601>-Instanz in eine <xref:System.Data.Linq.ITable>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="e47d3-251">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="System.Data.Linq.ITable.AttachAll">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e47d3-252">Fügt alle Entitäten einer Auflistung im veränderten oder unveränderten Zustand an den <see cref="T:System.Data.Linq.DataContext" /> an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-252">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="System.Data.Linq.ITable.AttachAll">
      <MemberSignature Language="C#" Value="void ITable.AttachAll (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.AttachAll(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Sub AttachAll (entities As IEnumerable) Implements ITable.AttachAll" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.AttachAll(System::Collections::IEnumerable ^ entities) = System::Data::Linq::ITable::AttachAll;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities">
          <span data-ttu-id="e47d3-253">Die Auflistung von Entitäten, die angehängt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-253">The collection of entities to be attached.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e47d3-254">Fügt alle Entitäten einer Auflistung im veränderten oder unveränderten Zustand an den <see cref="T:System.Data.Linq.DataContext" /> an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-254">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-255">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="e47d3-255">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e47d3-256">Er kann nur verwendet werden, wenn die <xref:System.Data.Linq.Table%601>-Instanz in eine <xref:System.Data.Linq.ITable>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="e47d3-256">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.AttachAll">
      <MemberSignature Language="C#" Value="void ITable.AttachAll (System.Collections.IEnumerable entities, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.AttachAll(class System.Collections.IEnumerable entities, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Sub AttachAll (entities As IEnumerable, asModified As Boolean) Implements ITable.AttachAll" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.AttachAll(System::Collections::IEnumerable ^ entities, bool asModified) = System::Data::Linq::ITable::AttachAll;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entities">
          <span data-ttu-id="e47d3-257">Die Auflistung von Entitäten, die angehängt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-257">The collection of entities to be attched.</span>
          </span>
        </param>
        <param name="asModified">
          <span data-ttu-id="e47d3-258">
            <see langword="true" />, um die Entitäten als geändert anzufügen; <see langword="false" />, um die Entitäten als nicht geändert anzufügen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-258">
              <see langword="true" /> to attach the entities as modified; <see langword="false" /> to attach the entities as unmodified.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e47d3-259">Fügt alle Entitäten einer Auflistung im veränderten oder unveränderten Zustand an den <see cref="T:System.Data.Linq.DataContext" /> an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-259">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-260">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="e47d3-260">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e47d3-261">Er kann nur verwendet werden, wenn die <xref:System.Data.Linq.Table%601>-Instanz in eine <xref:System.Data.Linq.ITable>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="e47d3-261">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.DeleteAllOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.DeleteAllOnSubmit (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.DeleteAllOnSubmit(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteAllOnSubmit(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Sub DeleteAllOnSubmit (entities As IEnumerable) Implements ITable.DeleteAllOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.DeleteAllOnSubmit(System::Collections::IEnumerable ^ entities) = System::Data::Linq::ITable::DeleteAllOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.DeleteAllOnSubmit(System.Collections.IEnumerable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities">
          <span data-ttu-id="e47d3-262">Die Entitäten, die entfernt werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-262">The entities being removed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e47d3-263">Ändert den Zustand aller Entitäten in der Auflistung in <see langword="pending delete" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-263">Puts all entities from the collection into a <see langword="pending delete" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-264">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="e47d3-264">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e47d3-265">Er kann nur verwendet werden, wenn die <xref:System.Data.Linq.Table%601>-Instanz in eine <xref:System.Data.Linq.ITable>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="e47d3-265">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.DeleteOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.DeleteOnSubmit (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.DeleteOnSubmit(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteOnSubmit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub DeleteOnSubmit (entity As Object) Implements ITable.DeleteOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.DeleteOnSubmit(System::Object ^ entity) = System::Data::Linq::ITable::DeleteOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.DeleteOnSubmit(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="e47d3-266">Die Entität, die entfernt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-266">The entity to be removed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e47d3-267">Ändert den Zustand einer Entität aus dieser Tabelle in <see langword="pending delete" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-267">Puts an entity from this table into a <see langword="pending delete" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-268">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="e47d3-268">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e47d3-269">Er kann nur verwendet werden, wenn die <xref:System.Data.Linq.Table%601>-Instanz in eine <xref:System.Data.Linq.ITable>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="e47d3-269">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e47d3-270">Kaskadierte Löschvorgänge werden von [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] nicht unterstützt bzw. erkannt.</span><span class="sxs-lookup"><span data-stu-id="e47d3-270">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] does not support or recognize cascade-delete operations.</span></span> <span data-ttu-id="e47d3-271">Wenn eine Zeile in einer Tabelle zu löschen, die Einschränkungen gelten sollen, müssen Sie entweder die `ON DELETE CASCADE` -Regel in der foreign Key-Einschränkung in der Datenbank, oder verwenden Sie eigenen Code zunächst die untergeordneten Objekte löschen, die verhindern, dass das übergeordnete Objekt gelöscht werden.</span><span class="sxs-lookup"><span data-stu-id="e47d3-271">If you want to delete a row in a table that has constraints against it, you must either set the `ON DELETE CASCADE` rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted.</span></span> <span data-ttu-id="e47d3-272">Andernfalls wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="e47d3-272">Otherwise, an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.GetModifiedMembers">
      <MemberSignature Language="C#" Value="System.Data.Linq.ModifiedMemberInfo[] ITable.GetModifiedMembers (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Data.Linq.ModifiedMemberInfo[] System.Data.Linq.ITable.GetModifiedMembers(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetModifiedMembers(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetModifiedMembers (entity As Object) As ModifiedMemberInfo() Implements ITable.GetModifiedMembers" />
      <MemberSignature Language="C++ CLI" Value=" virtual cli::array &lt;System::Data::Linq::ModifiedMemberInfo&gt; ^ System.Data.Linq.ITable.GetModifiedMembers(System::Object ^ entity) = System::Data::Linq::ITable::GetModifiedMembers;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.GetModifiedMembers(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("NOT IMPLEMENTED YET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Linq.ModifiedMemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="e47d3-273">Die Entität, aus der die geänderten Member abgerufen werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-273">The entity from which to obtain the modified members.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e47d3-274">Gibt ein Array von geänderten Membern mit den aktuellen und den ursprünglichen Werten zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-274">Returns an array of modified members that contain their current and original values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e47d3-275">Ein Array von geänderten Membern.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-275">An array of modified members.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-276">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="e47d3-276">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e47d3-277">Er kann nur verwendet werden, wenn die <xref:System.Data.Linq.Table%601>-Instanz in eine <xref:System.Data.Linq.ITable>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="e47d3-277">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.GetOriginalEntityState">
      <MemberSignature Language="C#" Value="object ITable.GetOriginalEntityState (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Data.Linq.ITable.GetOriginalEntityState(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetOriginalEntityState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetOriginalEntityState (entity As Object) As Object Implements ITable.GetOriginalEntityState" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Data.Linq.ITable.GetOriginalEntityState(System::Object ^ entity) = System::Data::Linq::ITable::GetOriginalEntityState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("NOT IMPLEMENTED YET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="e47d3-278">Die Entität, auf deren ursprünglichen Zustand zugegriffen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-278">The entity whose original state is to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e47d3-279">Ruft ursprüngliche Werte einer angegebenen Entität ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-279">Retrieves original values of a given entity.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e47d3-280">Eine Kopie der ursprünglichen Entität.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-280">A copy of the original entity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-281">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="e47d3-281">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e47d3-282">Er kann nur verwendet werden, wenn die <xref:System.Data.Linq.Table%601>-Instanz in eine <xref:System.Data.Linq.ITable>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="e47d3-282">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.InsertAllOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.InsertAllOnSubmit (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.InsertAllOnSubmit(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertAllOnSubmit(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Sub InsertAllOnSubmit (entities As IEnumerable) Implements ITable.InsertAllOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.InsertAllOnSubmit(System::Collections::IEnumerable ^ entities) = System::Data::Linq::ITable::InsertAllOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.InsertAllOnSubmit(System.Collections.IEnumerable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities">
          <span data-ttu-id="e47d3-283">Die Auflistung von Entitäten, die hinzugefügt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-283">The collection of entities to be added.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e47d3-284">Fügt dem <see cref="T:System.Data.Linq.DataContext" /> alle Entitäten einer Sammlung im Zustand <see langword="pending insert" /> hinzu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-284">Adds all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in an <see langword="pending insert" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-285">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="e47d3-285">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e47d3-286">Er kann nur verwendet werden, wenn die <xref:System.Data.Linq.Table%601>-Instanz in eine <xref:System.Data.Linq.ITable>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="e47d3-286">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.InsertOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.InsertOnSubmit (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.InsertOnSubmit(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertOnSubmit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub InsertOnSubmit (entity As Object) Implements ITable.InsertOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.InsertOnSubmit(System::Object ^ entity) = System::Data::Linq::ITable::InsertOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.InsertOnSubmit(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="e47d3-287">Die Entität, die hinzugefügt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-287">The entity to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e47d3-288">Fügt der Tabelle eine Entität mit dem Status <see langword="pending insert" /> hinzu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-288">Adds an entity in a <see langword="pending insert" /> state to this table.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-289">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="e47d3-289">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e47d3-290">Er kann nur verwendet werden, wenn die <xref:System.Data.Linq.Table%601>-Instanz in eine <xref:System.Data.Linq.ITable>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="e47d3-290">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.ElementType">
      <MemberSignature Language="C#" Value="Type System.Linq.IQueryable.ElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type System.Linq.IQueryable.ElementType" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#Linq#IQueryable#ElementType" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ElementType As Type Implements IQueryable.ElementType" />
      <MemberSignature Language="C++ CLI" Value="property Type ^ System.Linq.IQueryable.ElementType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e47d3-291">Ruft den Typ der Element(e) ab, die zurückgegeben werden, wenn die Ausdrucksbaumstruktur ausgeführt wird, die diesem Objekt zugeordnet ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-291">Gets the type of the element(s) that are returned when the expression tree associated with this object is executed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e47d3-292">Der Typ der Element(e), die zurückgegeben werden, wenn die Ausdrucksbaumstruktur ausgeführt wird, die diesem Objekt zugeordnet ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-292">The type of the element(s) that are returned when the expression tree associated with this object is executed.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-293">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="e47d3-293">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e47d3-294">Er kann nur verwendet werden, wenn die <xref:System.Data.Linq.Table%601>-Instanz in eine <xref:System.Linq.IQueryable>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="e47d3-294">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.Expression">
      <MemberSignature Language="C#" Value="System.Linq.Expressions.Expression System.Linq.IQueryable.Expression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression System.Linq.IQueryable.Expression" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Expression" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Expression As Expression Implements IQueryable.Expression" />
      <MemberSignature Language="C++ CLI" Value="property System::Linq::Expressions::Expression ^ System.Linq.IQueryable.Expression { System::Linq::Expressions::Expression ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e47d3-295">Ruft die Ausdrucksbaumstruktur ab, die mit dieser Instanz von <see cref="T:System.Linq.IQueryable" /> verknüpft ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-295">Gets the expression tree that is associated with this instance of <see cref="T:System.Linq.IQueryable" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e47d3-296">Die <see cref="T:System.Linq.Expressions.Expression" />, die mit dieser Instanz von <see cref="T:System.Linq.IQueryable" /> verknüpft ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-296">The <see cref="T:System.Linq.Expressions.Expression" /> that is associated with this instance of <see cref="T:System.Linq.IQueryable" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-297">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="e47d3-297">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e47d3-298">Er kann nur verwendet werden, wenn die <xref:System.Data.Linq.Table%601>-Instanz in eine <xref:System.Linq.IQueryable>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="e47d3-298">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.Provider">
      <MemberSignature Language="C#" Value="System.Linq.IQueryProvider System.Linq.IQueryable.Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.IQueryProvider System.Linq.IQueryable.Provider" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Provider" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Provider As IQueryProvider Implements IQueryable.Provider" />
      <MemberSignature Language="C++ CLI" Value="property System::Linq::IQueryProvider ^ System.Linq.IQueryable.Provider { System::Linq::IQueryProvider ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e47d3-299">Ruft den Abfrageanbieter ab, der dieser Datenquelle zugeordnet ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-299">Gets the query provider that is associated with this data source.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e47d3-300">Der <see cref="T:System.Linq.IQueryProvider" />, der dieser Datenquelle zugeordnet ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-300">The <see cref="T:System.Linq.IQueryProvider" /> that is associated with this data source.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-301">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="e47d3-301">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e47d3-302">Er kann nur verwendet werden, wenn die <xref:System.Data.Linq.Table%601>-Instanz in eine <xref:System.Linq.IQueryable>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="e47d3-302">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.CreateQuery">
      <MemberSignature Language="C#" Value="System.Linq.IQueryable IQueryProvider.CreateQuery (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Linq.IQueryable System.Linq.IQueryProvider.CreateQuery(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Linq::IQueryable ^ System.Linq.IQueryProvider.CreateQuery(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::CreateQuery;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="e47d3-303">Der Abfrageausdruck, aus dem die Evaluierung ausgeführt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-303">The query expression from which the evaluation is performed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e47d3-304">Konstruiert ein <see cref="T:System.Linq.IQueryable" />-Objekt, das die Abfrage auswerten kann, die von einer angegebenen Ausdrucksbaumstruktur dargestellt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-304">Constructs an <see cref="T:System.Linq.IQueryable" /> object that can evaluate the query represented by a specified expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e47d3-305">Ein <see cref="T:System.Linq.IQueryable" />-Objekt, das die Abfrage auswerten kann, die von der angegebenen Ausdrucksbaumstruktur dargestellt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-305">An <see cref="T:System.Linq.IQueryable" /> that can evaluate the query represented by the specified expression tree.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-306">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="e47d3-306">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e47d3-307">Er kann nur verwendet werden, wenn die <xref:System.Data.Linq.Table%601>-Instanz in eine <xref:System.Linq.IQueryProvider>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="e47d3-307">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.CreateQuery&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="System.Linq.IQueryable&lt;TResult&gt; IQueryProvider.CreateQuery&lt;TResult&gt; (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;!!TResult&gt; System.Linq.IQueryProvider.CreateQuery&lt;TResult&gt;(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA; virtual System::Linq::IQueryable&lt;TResult&gt; ^ System.Linq.IQueryProvider.CreateQuery(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::CreateQuery;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="e47d3-308">Der Typ der Daten in der Tabelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-308">The type of the data in the table.</span>
          </span>
        </typeparam>
        <param name="expression">
          <span data-ttu-id="e47d3-309">Der Abfrageausdruck, aus dem die Evaluierung ausgeführt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-309">The query expression from which the evaluation is performed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e47d3-310">Konstruiert ein <see cref="T:System.Linq.IQueryable`1" />-Objekt, das die Abfrage auswerten kann, die von einer angegebenen Ausdrucksbaumstruktur dargestellt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-310">Constructs an <see cref="T:System.Linq.IQueryable`1" /> object that can evaluate the query represented by a specified expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e47d3-311">Ein <see cref="T:System.Linq.IQueryable`1" />-Objekt, das die Abfrage auswerten kann, die von der angegebenen Ausdrucksbaumstruktur dargestellt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-311">An <see cref="T:System.Linq.IQueryable`1" /> that can evaluate the query represented by the specified expression tree.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-312">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="e47d3-312">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e47d3-313">Er kann nur verwendet werden, wenn die <xref:System.Data.Linq.Table%601>-Instanz in eine <xref:System.Linq.IQueryProvider>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="e47d3-313">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.Execute">
      <MemberSignature Language="C#" Value="object IQueryProvider.Execute (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Linq.IQueryProvider.Execute(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Linq.IQueryProvider.Execute(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::Execute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="e47d3-314">Der Abfrageausdruck, der ausgeführt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-314">The query expression to execute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e47d3-315">Führt die Abfrage aus, die von einer angegebenen Ausdrucksbaumstruktur dargestellt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-315">Executes the query represented by a specified expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e47d3-316">Der Wert, der aus der Ausführung der angegebenen Abfrage resultiert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-316">The value that results from executing the specified query.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-317">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="e47d3-317">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e47d3-318">Er kann nur verwendet werden, wenn die <xref:System.Data.Linq.Table%601>-Instanz in eine <xref:System.Linq.IQueryProvider>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="e47d3-318">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.Execute&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="TResult IQueryProvider.Execute&lt;TResult&gt; (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance !!TResult System.Linq.IQueryProvider.Execute&lt;TResult&gt;(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA; virtual TResult System.Linq.IQueryProvider.Execute(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::Execute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="e47d3-319">Der Typ der Daten in der Tabelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-319">The type of the data in the table.</span>
          </span>
        </typeparam>
        <param name="expression">
          <span data-ttu-id="e47d3-320">Der Abfrageausdruck, der ausgeführt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-320">The query expression to execute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e47d3-321">Führt die stark typisierte Abfrage aus, die von einer angegebenen Ausdrucksbaumstruktur dargestellt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-321">Executes the strongly-typed query represented by a specified expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e47d3-322">Der Wert, der aus der Ausführung der angegebenen Abfrage resultiert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-322">The value that results from executing the specified query.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e47d3-323">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="e47d3-323">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e47d3-324">Er kann nur verwendet werden, wenn die <xref:System.Data.Linq.Table%601>-Instanz in eine <xref:System.Linq.IQueryProvider>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="e47d3-324">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e47d3-325">Gibt eine Zeichenfolge zurück, die die Tabelle darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-325">Returns a string that represents the table.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e47d3-326">Eine Zeichenfolgendarstellung der Tabelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e47d3-326">A string representation of the table.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
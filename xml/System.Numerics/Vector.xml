<Type Name="Vector" FullName="System.Numerics.Vector">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c9af6087b3d6585cb53e742baec2f1732677b5d4" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36548143" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Vector" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Vector extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Numerics.Vector" />
  <TypeSignature Language="VB.NET" Value="Public Class Vector" />
  <TypeSignature Language="C++ CLI" Value="public ref class Vector abstract sealed" />
  <TypeSignature Language="F#" Value="type Vector = class" />
  <AssemblyInfo>
    <AssemblyName>System.Numerics.Vectors</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>4.1.3.0</AssemblyVersion>
    <AssemblyVersion>4.1.4.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="b4f1c-101">Stellt eine Auflistung statischer Hilfsmethoden zum Erstellen, Bearbeiten, Kombinieren und Konvertieren generischer Vektoren bereit.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b4f1c-101">Provides a collection of static convenience methods for creating, manipulating, combining, and converting generic vectors.</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Abs&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Abs&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Abs&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Abs``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs(Of T As Structure) (value As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Abs(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member Abs : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; (requires 'T : struct)" Usage="System.Numerics.Vector.Abs value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-102">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-102">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-103">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-103">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="b4f1c-104">Der Quellvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-104">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-105">Gibt einen neuen Vektor zurück, dessen Elemente die absoluten Werte der Elemente des angegebenen Vektors sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-105">Returns a new vector whose elements are the absolute values of the given vector's elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-106">Der Absolutwertvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-106">The absolute value vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Add&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Add&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Add``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Add(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member Add : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; (requires 'T : struct)" Usage="System.Numerics.Vector.Add (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-107">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-107">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-108">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-108">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="b4f1c-109">Der erste Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-109">The first vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-110">Der zweite Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-110">The second vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-111">Gibt einen neuen Vektor zurück, dessen Werte der Summe der einzelnen Elementpaare aus zwei angegebenen Vektoren entsprechen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-111">Returns a new vector whose values are the sum of each pair of elements from two given vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-112">Der Summenvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-112">The summed vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AndNot&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; AndNot&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; AndNot&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.AndNot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndNot(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; AndNot(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member AndNot : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; (requires 'T : struct)" Usage="System.Numerics.Vector.AndNot (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-113">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-113">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-114">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-114">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="b4f1c-115">Der erste Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-115">The first vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-116">Der zweite Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-116">The second vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-117">Gibt einen neuen Vektor zurück, indem für jedes Paar entsprechender Elemente in zwei Vektoren eine bitweise "Und nicht"-Operation durchgeführt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-117">Returns a new vector by performing a bitwise And Not operation on each pair of corresponding elements in two vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-118">Der Ergebnisvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-118">The resulting vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsVectorByte&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;byte&gt; AsVectorByte&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;unsigned int8&gt; AsVectorByte&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.AsVectorByte``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsVectorByte(Of T As Structure) (value As Vector(Of T)) As Vector(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;System::Byte&gt; AsVectorByte(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member AsVectorByte : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;byte&gt; (requires 'T : struct)" Usage="System.Numerics.Vector.AsVectorByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-119">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-119">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-120">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-120">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="b4f1c-121">Der Quellvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-121">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-122">Interpretiert die Bits eines angegebenen Vektors in die eines Vektors von Bytes ohne Vorzeichen um.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-122">Reinterprets the bits of a specified vector into those of a vector of unsigned bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-123">Der neu interpretierte Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-123">The reinterpreted vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsVectorDouble&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;double&gt; AsVectorDouble&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;float64&gt; AsVectorDouble&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.AsVectorDouble``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsVectorDouble(Of T As Structure) (value As Vector(Of T)) As Vector(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;double&gt; AsVectorDouble(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member AsVectorDouble : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;double&gt; (requires 'T : struct)" Usage="System.Numerics.Vector.AsVectorDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-124">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-124">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-125">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-125">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="b4f1c-126">Der Quellvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-126">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-127">Interpretiert die Bits eines angegebenen Vektors in die eines Vektors mit Gleitkomma und doppelter Genauigkeit um.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-127">Reinterprets the bits of a specified vector into those of a double-precision floating-point vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-128">Der neu interpretierte Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-128">The reinterpreted vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsVectorInt16&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;short&gt; AsVectorInt16&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int16&gt; AsVectorInt16&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.AsVectorInt16``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsVectorInt16(Of T As Structure) (value As Vector(Of T)) As Vector(Of Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;short&gt; AsVectorInt16(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member AsVectorInt16 : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;int16&gt; (requires 'T : struct)" Usage="System.Numerics.Vector.AsVectorInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int16&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-129">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-129">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-130">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-130">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="b4f1c-131">Der Quellvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-131">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-132">Interpretiert die Bits eines angegebenen Vektors in die eines Vektors von ganzen 16-Bit-Zahlen um.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-132">Reinterprets the bits of a specified vector into those of a vector of 16-bit integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-133">Der neu interpretierte Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-133">The reinterpreted vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsVectorInt32&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; AsVectorInt32&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; AsVectorInt32&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.AsVectorInt32``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsVectorInt32(Of T As Structure) (value As Vector(Of T)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;int&gt; AsVectorInt32(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member AsVectorInt32 : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;int&gt; (requires 'T : struct)" Usage="System.Numerics.Vector.AsVectorInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-134">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-134">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-135">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-135">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="b4f1c-136">Der Quellvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-136">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-137">Interpretiert die Bits eines angegebenen Vektors in die eines Vektors von ganzen Zahlen um.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-137">Reinterprets the bits of a specified vector into those of a vector of integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-138">Der neu interpretierte Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-138">The reinterpreted vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsVectorInt64&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; AsVectorInt64&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; AsVectorInt64&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.AsVectorInt64``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsVectorInt64(Of T As Structure) (value As Vector(Of T)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;long&gt; AsVectorInt64(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member AsVectorInt64 : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;int64&gt; (requires 'T : struct)" Usage="System.Numerics.Vector.AsVectorInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-139">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-139">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-140">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-140">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="b4f1c-141">Der Quellvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-141">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-142">Interpretiert die Bits eines angegebenen Vektors in die eines Vektors von langen ganzen Zahlen um.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-142">Reinterprets the bits of a specified vector into those of a vector of long integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-143">Der neu interpretierte Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-143">The reinterpreted vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsVectorSByte&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;sbyte&gt; AsVectorSByte&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int8&gt; AsVectorSByte&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.AsVectorSByte``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsVectorSByte(Of T As Structure) (value As Vector(Of T)) As Vector(Of SByte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;System::SByte&gt; AsVectorSByte(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member AsVectorSByte : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;sbyte&gt; (requires 'T : struct)" Usage="System.Numerics.Vector.AsVectorSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.SByte&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-144">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-144">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-145">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-145">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="b4f1c-146">Der Quellvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-146">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-147">Interpretiert die Bits eines angegebenen Vektors in die eines Vektors von Bytes mit Vorzeichen um.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-147">Reinterprets the bits of a specified vector into those of a vector of signed bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-148">Der neu interpretierte Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-148">The reinterpreted vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsVectorSingle&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;float&gt; AsVectorSingle&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;float32&gt; AsVectorSingle&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.AsVectorSingle``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsVectorSingle(Of T As Structure) (value As Vector(Of T)) As Vector(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;float&gt; AsVectorSingle(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member AsVectorSingle : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;single&gt; (requires 'T : struct)" Usage="System.Numerics.Vector.AsVectorSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-149">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-149">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-150">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-150">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="b4f1c-151">Der Quellvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-151">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-152">Interpretiert die Bits eines angegebenen Vektors in die eines Vektors mit Gleitkomma und einfacher Genauigkeit um.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-152">Reinterprets the bits of a specified vector into those of a single-precision floating-point vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-153">Der neu interpretierte Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-153">The reinterpreted vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsVectorUInt16&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;ushort&gt; AsVectorUInt16&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;unsigned int16&gt; AsVectorUInt16&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.AsVectorUInt16``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsVectorUInt16(Of T As Structure) (value As Vector(Of T)) As Vector(Of UShort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;System::UInt16&gt; AsVectorUInt16(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member AsVectorUInt16 : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;uint16&gt; (requires 'T : struct)" Usage="System.Numerics.Vector.AsVectorUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.UInt16&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-154">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-154">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-155">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-155">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="b4f1c-156">Der Quellvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-156">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-157">Interpretiert die Bits eines angegebenen Vektors in die eines Vektors von ganzen 16-Bit-Zahlen ohne Vorzeichen um.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-157">Reinterprets the bits of a specified vector into those of a vector of unsigned 16-bit integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-158">Der neu interpretierte Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-158">The reinterpreted vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsVectorUInt32&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;uint&gt; AsVectorUInt32&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;unsigned int32&gt; AsVectorUInt32&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.AsVectorUInt32``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsVectorUInt32(Of T As Structure) (value As Vector(Of T)) As Vector(Of UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;System::UInt32&gt; AsVectorUInt32(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member AsVectorUInt32 : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;uint32&gt; (requires 'T : struct)" Usage="System.Numerics.Vector.AsVectorUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.UInt32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-159">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-159">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-160">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-160">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="b4f1c-161">Der Quellvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-161">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-162">Interpretiert die Bits eines angegebenen Vektors in die eines Vektors von ganzen Zahlen ohne Vorzeichen um.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-162">Reinterprets the bits of a specified vector into those of a vector of unsigned integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-163">Der neu interpretierte Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-163">The reinterpreted vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsVectorUInt64&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;ulong&gt; AsVectorUInt64&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;unsigned int64&gt; AsVectorUInt64&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.AsVectorUInt64``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsVectorUInt64(Of T As Structure) (value As Vector(Of T)) As Vector(Of ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;System::UInt64&gt; AsVectorUInt64(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member AsVectorUInt64 : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;uint64&gt; (requires 'T : struct)" Usage="System.Numerics.Vector.AsVectorUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.UInt64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-164">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-164">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-165">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-165">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="b4f1c-166">Der Quellvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-166">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-167">Interpretiert die Bits eines angegebenen Vektors in die eines Vektors von langen ganzen Zahlen ohne Vorzeichen um.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-167">Reinterprets the bits of a specified vector into those of a vector of unsigned long integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-168">Der neu interpretierte Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-168">The reinterpreted vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitwiseAnd&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; BitwiseAnd&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; BitwiseAnd&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.BitwiseAnd``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BitwiseAnd(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; BitwiseAnd(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member BitwiseAnd : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; (requires 'T : struct)" Usage="System.Numerics.Vector.BitwiseAnd (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-169">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-169">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-170">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-170">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="b4f1c-171">Der erste Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-171">The first vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-172">Der zweite Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-172">The second vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-173">Gibt einen neuen Vektor zurück, indem für jedes Elementpaar in zwei Vektoren eine bitweise <see langword="And" />-Operation durchgeführt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-173">Returns a new vector by performing a bitwise <see langword="And" /> operation on each pair of elements in two vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-174">Der Ergebnisvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-174">The resulting vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitwiseOr&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; BitwiseOr&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; BitwiseOr&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.BitwiseOr``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BitwiseOr(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; BitwiseOr(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member BitwiseOr : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; (requires 'T : struct)" Usage="System.Numerics.Vector.BitwiseOr (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-175">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-175">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-176">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-176">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="b4f1c-177">Der erste Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-177">The first vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-178">Der zweite Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-178">The second vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-179">Gibt einen neuen Vektor zurück, indem für jedes Elementpaar in zwei Vektoren eine bitweise <see langword="Or" />-Operation durchgeführt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-179">Returns a new vector by performing a bitwise <see langword="Or" /> operation on each pair of elements in two vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-180">Der Ergebnisvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-180">The resulting vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConditionalSelect">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;float&gt; ConditionalSelect (System.Numerics.Vector&lt;int&gt; condition, System.Numerics.Vector&lt;float&gt; left, System.Numerics.Vector&lt;float&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;float32&gt; ConditionalSelect(valuetype System.Numerics.Vector`1&lt;int32&gt; condition, valuetype System.Numerics.Vector`1&lt;float32&gt; left, valuetype System.Numerics.Vector`1&lt;float32&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConditionalSelect (condition As Vector(Of Integer), left As Vector(Of Single), right As Vector(Of Single)) As Vector(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;float&gt; ConditionalSelect(System::Numerics::Vector&lt;int&gt; condition, System::Numerics::Vector&lt;float&gt; left, System::Numerics::Vector&lt;float&gt; right);" />
      <MemberSignature Language="F#" Value="static member ConditionalSelect : System.Numerics.Vector&lt;int&gt; * System.Numerics.Vector&lt;single&gt; * System.Numerics.Vector&lt;single&gt; -&gt; System.Numerics.Vector&lt;single&gt;" Usage="System.Numerics.Vector.ConditionalSelect (condition, left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Single&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Single&gt;" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="b4f1c-181">Der zum Steuern der Auswahl verwendete integrale Maskierungsvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-181">The integral mask vector used to drive selection.</span>
          </span>
        </param>
        <param name="left">
          <span data-ttu-id="b4f1c-182">Der erste Quellvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-182">The first source vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-183">Der zweite Quellvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-183">The second source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-184">Erstellt einen neuen Vektor mit einfacher Genauigkeit mit Elementen, die zwischen zwei angegebenen Quellvektoren mit einfacher Genauigkeit basierend auf einem integralen Maskierungsvektor ausgewählt wurden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-184">Creates a new single-precision vector with elements selected between two specified single-precision source vectors based on an integral mask vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-185">Der neue Vektor mit Elementen, die basierend auf der Maske ausgewählt wurden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-185">The new vector with elements selected based on the mask.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConditionalSelect">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;double&gt; ConditionalSelect (System.Numerics.Vector&lt;long&gt; condition, System.Numerics.Vector&lt;double&gt; left, System.Numerics.Vector&lt;double&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;float64&gt; ConditionalSelect(valuetype System.Numerics.Vector`1&lt;int64&gt; condition, valuetype System.Numerics.Vector`1&lt;float64&gt; left, valuetype System.Numerics.Vector`1&lt;float64&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConditionalSelect (condition As Vector(Of Long), left As Vector(Of Double), right As Vector(Of Double)) As Vector(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;double&gt; ConditionalSelect(System::Numerics::Vector&lt;long&gt; condition, System::Numerics::Vector&lt;double&gt; left, System::Numerics::Vector&lt;double&gt; right);" />
      <MemberSignature Language="F#" Value="static member ConditionalSelect : System.Numerics.Vector&lt;int64&gt; * System.Numerics.Vector&lt;double&gt; * System.Numerics.Vector&lt;double&gt; -&gt; System.Numerics.Vector&lt;double&gt;" Usage="System.Numerics.Vector.ConditionalSelect (condition, left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Double&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="b4f1c-186">Der zum Steuern der Auswahl verwendete integrale Maskierungsvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-186">The integral mask vector used to drive selection.</span>
          </span>
        </param>
        <param name="left">
          <span data-ttu-id="b4f1c-187">Der erste Quellvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-187">The first source vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-188">Der zweite Quellvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-188">The second source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-189">Erstellt einen neuen Vektor mit doppelter Genauigkeit mit Elementen, die zwischen zwei angegebenen Quellvektoren mit doppelter Genauigkeit basierend auf einem integralen Maskierungsvektor ausgewählt wurden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-189">Creates a new double-precision vector with elements selected between two specified double-precision source vectors based on an integral mask vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-190">Der neue Vektor mit Elementen, die basierend auf der Maske ausgewählt wurden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-190">The new vector with elements selected based on the mask.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConditionalSelect&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; ConditionalSelect&lt;T&gt; (System.Numerics.Vector&lt;T&gt; condition, System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; ConditionalSelect&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; condition, valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.ConditionalSelect``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConditionalSelect(Of T As Structure) (condition As Vector(Of T), left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; ConditionalSelect(System::Numerics::Vector&lt;T&gt; condition, System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member ConditionalSelect : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; (requires 'T : struct)" Usage="System.Numerics.Vector.ConditionalSelect (condition, left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="condition" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-191">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-191">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-192">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-192">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="condition">
          <span data-ttu-id="b4f1c-193">Der zum Steuern der Auswahl verwendete integrale Maskierungsvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-193">The integral mask vector used to drive selection.</span>
          </span>
        </param>
        <param name="left">
          <span data-ttu-id="b4f1c-194">Der erste Quellvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-194">The first source vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-195">Der zweite Quellvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-195">The second source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-196">Erstellt einen neuen Vektor eines angegebenen Typs mit Elementen, die zwischen zwei angegebenen Quellvektoren desselben Typs basierend auf einem integralen Maskierungsvektor ausgewählt wurden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-196">Creates a new vector of a specified type with elements selected between two specified source vectors of the same type based on an integral mask vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-197">Der neue Vektor mit Elementen, die basierend auf der Maske ausgewählt wurden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-197">The new vector with elements selected based on the mask.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToDouble">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;double&gt; ConvertToDouble (System.Numerics.Vector&lt;long&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;float64&gt; ConvertToDouble(valuetype System.Numerics.Vector`1&lt;int64&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToDouble (value As Vector(Of Long)) As Vector(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;double&gt; ConvertToDouble(System::Numerics::Vector&lt;long&gt; value);" />
      <MemberSignature Language="F#" Value="static member ConvertToDouble : System.Numerics.Vector&lt;int64&gt; -&gt; System.Numerics.Vector&lt;double&gt;" Usage="System.Numerics.Vector.ConvertToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToDouble">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;double&gt; ConvertToDouble (System.Numerics.Vector&lt;ulong&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;float64&gt; ConvertToDouble(valuetype System.Numerics.Vector`1&lt;unsigned int64&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.UInt64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToDouble (value As Vector(Of ULong)) As Vector(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;double&gt; ConvertToDouble(System::Numerics::Vector&lt;System::UInt64&gt; value);" />
      <MemberSignature Language="F#" Value="static member ConvertToDouble : System.Numerics.Vector&lt;uint64&gt; -&gt; System.Numerics.Vector&lt;double&gt;" Usage="System.Numerics.Vector.ConvertToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;System.UInt64&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToInt32">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; ConvertToInt32 (System.Numerics.Vector&lt;float&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; ConvertToInt32(valuetype System.Numerics.Vector`1&lt;float32&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.ConvertToInt32(System.Numerics.Vector{System.Single})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToInt32 (value As Vector(Of Single)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; ConvertToInt32(System::Numerics::Vector&lt;float&gt; value);" />
      <MemberSignature Language="F#" Value="static member ConvertToInt32 : System.Numerics.Vector&lt;single&gt; -&gt; System.Numerics.Vector&lt;int&gt;" Usage="System.Numerics.Vector.ConvertToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;System.Single&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToInt64">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; ConvertToInt64 (System.Numerics.Vector&lt;double&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; ConvertToInt64(valuetype System.Numerics.Vector`1&lt;float64&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.ConvertToInt64(System.Numerics.Vector{System.Double})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToInt64 (value As Vector(Of Double)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;long&gt; ConvertToInt64(System::Numerics::Vector&lt;double&gt; value);" />
      <MemberSignature Language="F#" Value="static member ConvertToInt64 : System.Numerics.Vector&lt;double&gt; -&gt; System.Numerics.Vector&lt;int64&gt;" Usage="System.Numerics.Vector.ConvertToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToSingle">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;float&gt; ConvertToSingle (System.Numerics.Vector&lt;int&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;float32&gt; ConvertToSingle(valuetype System.Numerics.Vector`1&lt;int32&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToSingle (value As Vector(Of Integer)) As Vector(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;float&gt; ConvertToSingle(System::Numerics::Vector&lt;int&gt; value);" />
      <MemberSignature Language="F#" Value="static member ConvertToSingle : System.Numerics.Vector&lt;int&gt; -&gt; System.Numerics.Vector&lt;single&gt;" Usage="System.Numerics.Vector.ConvertToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToSingle">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;float&gt; ConvertToSingle (System.Numerics.Vector&lt;uint&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;float32&gt; ConvertToSingle(valuetype System.Numerics.Vector`1&lt;unsigned int32&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.UInt32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToSingle (value As Vector(Of UInteger)) As Vector(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;float&gt; ConvertToSingle(System::Numerics::Vector&lt;System::UInt32&gt; value);" />
      <MemberSignature Language="F#" Value="static member ConvertToSingle : System.Numerics.Vector&lt;uint32&gt; -&gt; System.Numerics.Vector&lt;single&gt;" Usage="System.Numerics.Vector.ConvertToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;System.UInt32&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToUInt32">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;uint&gt; ConvertToUInt32 (System.Numerics.Vector&lt;float&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;unsigned int32&gt; ConvertToUInt32(valuetype System.Numerics.Vector`1&lt;float32&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.ConvertToUInt32(System.Numerics.Vector{System.Single})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToUInt32 (value As Vector(Of Single)) As Vector(Of UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;System::UInt32&gt; ConvertToUInt32(System::Numerics::Vector&lt;float&gt; value);" />
      <MemberSignature Language="F#" Value="static member ConvertToUInt32 : System.Numerics.Vector&lt;single&gt; -&gt; System.Numerics.Vector&lt;uint32&gt;" Usage="System.Numerics.Vector.ConvertToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.UInt32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;System.Single&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToUInt64">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;ulong&gt; ConvertToUInt64 (System.Numerics.Vector&lt;double&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;unsigned int64&gt; ConvertToUInt64(valuetype System.Numerics.Vector`1&lt;float64&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.ConvertToUInt64(System.Numerics.Vector{System.Double})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToUInt64 (value As Vector(Of Double)) As Vector(Of ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;System::UInt64&gt; ConvertToUInt64(System::Numerics::Vector&lt;double&gt; value);" />
      <MemberSignature Language="F#" Value="static member ConvertToUInt64 : System.Numerics.Vector&lt;double&gt; -&gt; System.Numerics.Vector&lt;uint64&gt;" Usage="System.Numerics.Vector.ConvertToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.UInt64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Divide&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Divide&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Divide``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Divide(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Divide(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member Divide : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; (requires 'T : struct)" Usage="System.Numerics.Vector.Divide (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-198">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-198">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-199">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-199">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="b4f1c-200">Der erste Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-200">The first vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-201">Der zweite Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-201">The second vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-202">Gibt einen neuen Vektor zurück, dessen Werte sich aus der Division der Elemente des ersten Vektors durch die entsprechenden Elemente im zweiten Vektor ergeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-202">Returns a new vector whose values are the result of dividing the first vector's elements by the corresponding elements in the second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-203">Der geteilte Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-203">The divided vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dot&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Dot&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Dot&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Dot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dot(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static T Dot(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member Dot : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; 'T (requires 'T : struct)" Usage="System.Numerics.Vector.Dot (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-204">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-204">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-205">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-205">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="b4f1c-206">Der erste Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-206">The first vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-207">Der zweite Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-207">The second vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-208">Gibt das Skalarprodukt zweier Vektoren zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-208">Returns the dot product of two vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-209">Das Skalarprodukt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-209">The dot product.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; Equals (System.Numerics.Vector&lt;double&gt; left, System.Numerics.Vector&lt;double&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; Equals(valuetype System.Numerics.Vector`1&lt;float64&gt; left, valuetype System.Numerics.Vector`1&lt;float64&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (left As Vector(Of Double), right As Vector(Of Double)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;long&gt; Equals(System::Numerics::Vector&lt;double&gt; left, System::Numerics::Vector&lt;double&gt; right);" />
      <MemberSignature Language="F#" Value="static member Equals : System.Numerics.Vector&lt;double&gt; * System.Numerics.Vector&lt;double&gt; -&gt; System.Numerics.Vector&lt;int64&gt;" Usage="System.Numerics.Vector.Equals (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Double&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="b4f1c-210">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-210">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-211">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-211">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-212">Gibt einen neuen integralen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in zwei angegebenen Vektoren mit doppelter Genauigkeit gleich sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-212">Returns a new integral vector whose elements signal whether the elements in two specified double-precision vectors are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-213">Der resultierende integrale Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-213">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; Equals (System.Numerics.Vector&lt;int&gt; left, System.Numerics.Vector&lt;int&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; Equals(valuetype System.Numerics.Vector`1&lt;int32&gt; left, valuetype System.Numerics.Vector`1&lt;int32&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (left As Vector(Of Integer), right As Vector(Of Integer)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; Equals(System::Numerics::Vector&lt;int&gt; left, System::Numerics::Vector&lt;int&gt; right);" />
      <MemberSignature Language="F#" Value="static member Equals : System.Numerics.Vector&lt;int&gt; * System.Numerics.Vector&lt;int&gt; -&gt; System.Numerics.Vector&lt;int&gt;" Usage="System.Numerics.Vector.Equals (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="b4f1c-214">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-214">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-215">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-215">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-216">Gibt einen neuen integralen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in zwei angegebenen integralen Vektoren gleich sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-216">Returns a new integral vector whose elements signal whether the elements in two specified integral vectors are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-217">Der resultierende integrale Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-217">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; Equals (System.Numerics.Vector&lt;long&gt; left, System.Numerics.Vector&lt;long&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; Equals(valuetype System.Numerics.Vector`1&lt;int64&gt; left, valuetype System.Numerics.Vector`1&lt;int64&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (left As Vector(Of Long), right As Vector(Of Long)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;long&gt; Equals(System::Numerics::Vector&lt;long&gt; left, System::Numerics::Vector&lt;long&gt; right);" />
      <MemberSignature Language="F#" Value="static member Equals : System.Numerics.Vector&lt;int64&gt; * System.Numerics.Vector&lt;int64&gt; -&gt; System.Numerics.Vector&lt;int64&gt;" Usage="System.Numerics.Vector.Equals (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="b4f1c-218">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-218">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-219">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-219">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-220">Gibt einen neuen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in zwei angegebenen langen ganzzahligen Vektoren gleich sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-220">Returns a new vector whose elements signal whether the elements in two specified long integer vectors are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-221">Der resultierende lange ganzzahlige Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-221">The resulting long integer vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; Equals (System.Numerics.Vector&lt;float&gt; left, System.Numerics.Vector&lt;float&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; Equals(valuetype System.Numerics.Vector`1&lt;float32&gt; left, valuetype System.Numerics.Vector`1&lt;float32&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (left As Vector(Of Single), right As Vector(Of Single)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; Equals(System::Numerics::Vector&lt;float&gt; left, System::Numerics::Vector&lt;float&gt; right);" />
      <MemberSignature Language="F#" Value="static member Equals : System.Numerics.Vector&lt;single&gt; * System.Numerics.Vector&lt;single&gt; -&gt; System.Numerics.Vector&lt;int&gt;" Usage="System.Numerics.Vector.Equals (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Single&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Single&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="b4f1c-222">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-222">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-223">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-223">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-224">Gibt einen neuen integralen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in zwei angegebenen Vektoren mit einfacher Genauigkeit gleich sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-224">Returns a new integral vector whose elements signal whether the elements in two specified single-precision vectors are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-225">Der resultierende integrale Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-225">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Equals&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Equals&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Equals``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Equals(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member Equals : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; (requires 'T : struct)" Usage="System.Numerics.Vector.Equals (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-226">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-226">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-227">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-227">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="b4f1c-228">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-228">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-229">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-229">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-230">Gibt einen neuen Vektor eines angegebenen Typs zurück, dessen Elemente darauf hinweisen, ob die Elemente in zwei angegebenen Vektoren desselben Typs gleich sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-230">Returns a new vector of a specified type whose elements signal whether the elements in two specified vectors of the same type are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-231">Der Ergebnisvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-231">The resulting vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EqualsAll&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool EqualsAll&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool EqualsAll&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.EqualsAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EqualsAll(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool EqualsAll(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member EqualsAll : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; bool (requires 'T : struct)" Usage="System.Numerics.Vector.EqualsAll (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-232">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-232">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-233">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-233">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="b4f1c-234">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-234">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-235">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-235">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-236">Gibt einen Wert zurück, der angibt, ob jedes Elementpaar in den angegebenen Vektoren gleich ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-236">Returns a value that indicates whether each pair of elements in the given vectors is equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-237">
            <see langword="true" />, wenn alle Elemente in <paramref name="left" /> und <paramref name="right" /> sind gleich sind, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-237">
              <see langword="true" /> if all elements in <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EqualsAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool EqualsAny&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool EqualsAny&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.EqualsAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EqualsAny(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool EqualsAny(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member EqualsAny : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; bool (requires 'T : struct)" Usage="System.Numerics.Vector.EqualsAny (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-238">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-238">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-239">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-239">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="b4f1c-240">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-240">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-241">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-241">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-242">Gibt einen Wert zurück, der angibt, ob jedes einzelne Elementpaar in den angegebenen Vektoren gleich ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-242">Returns a value that indicates whether any single pair of elements in the given vectors is equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-243">
            <see langword="true" />, wenn ein beliebiges Elementpaar in <paramref name="left" /> und <paramref name="right" /> gleich ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-243">
              <see langword="true" /> if any element pair in <paramref name="left" /> and <paramref name="right" /> is equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; GreaterThan (System.Numerics.Vector&lt;double&gt; left, System.Numerics.Vector&lt;double&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; GreaterThan(valuetype System.Numerics.Vector`1&lt;float64&gt; left, valuetype System.Numerics.Vector`1&lt;float64&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThan (left As Vector(Of Double), right As Vector(Of Double)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;long&gt; GreaterThan(System::Numerics::Vector&lt;double&gt; left, System::Numerics::Vector&lt;double&gt; right);" />
      <MemberSignature Language="F#" Value="static member GreaterThan : System.Numerics.Vector&lt;double&gt; * System.Numerics.Vector&lt;double&gt; -&gt; System.Numerics.Vector&lt;int64&gt;" Usage="System.Numerics.Vector.GreaterThan (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Double&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="b4f1c-244">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-244">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-245">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-245">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-246">Gibt einen neuen integralen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem Vektor mit Gleitkomma und doppelter Genauigkeit größer sind als die entsprechenden Elemente in einem zweiten Vektor mit Gleitkomma und doppelter Genauigkeit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-246">Returns a new integral vector whose elements signal whether the elements in one double-precision floating-point vector are greater than their corresponding elements in a second double-precision floating-point vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-247">Der resultierende integrale Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-247">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; GreaterThan (System.Numerics.Vector&lt;int&gt; left, System.Numerics.Vector&lt;int&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; GreaterThan(valuetype System.Numerics.Vector`1&lt;int32&gt; left, valuetype System.Numerics.Vector`1&lt;int32&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThan (left As Vector(Of Integer), right As Vector(Of Integer)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; GreaterThan(System::Numerics::Vector&lt;int&gt; left, System::Numerics::Vector&lt;int&gt; right);" />
      <MemberSignature Language="F#" Value="static member GreaterThan : System.Numerics.Vector&lt;int&gt; * System.Numerics.Vector&lt;int&gt; -&gt; System.Numerics.Vector&lt;int&gt;" Usage="System.Numerics.Vector.GreaterThan (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="b4f1c-248">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-248">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-249">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-249">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-250">Gibt einen neuen integralen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem integralen Vektor größer sind als die entsprechenden Elemente in einem zweiten integralen Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-250">Returns a new integral vector whose elements signal whether the elements in one integral vector are greater than their corresponding elements in a second integral vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-251">Der resultierende integrale Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-251">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; GreaterThan (System.Numerics.Vector&lt;long&gt; left, System.Numerics.Vector&lt;long&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; GreaterThan(valuetype System.Numerics.Vector`1&lt;int64&gt; left, valuetype System.Numerics.Vector`1&lt;int64&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThan (left As Vector(Of Long), right As Vector(Of Long)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;long&gt; GreaterThan(System::Numerics::Vector&lt;long&gt; left, System::Numerics::Vector&lt;long&gt; right);" />
      <MemberSignature Language="F#" Value="static member GreaterThan : System.Numerics.Vector&lt;int64&gt; * System.Numerics.Vector&lt;int64&gt; -&gt; System.Numerics.Vector&lt;int64&gt;" Usage="System.Numerics.Vector.GreaterThan (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="b4f1c-252">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-252">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-253">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-253">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-254">Gibt einen neuen langen ganzzahligen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem langen ganzzahligen Vektor größer sind als die entsprechenden Elemente in einem zweiten langen ganzzahligen Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-254">Returns a new long integer vector whose elements signal whether the elements in one long integer vector are greater than their corresponding elements in a second long integer vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-255">Der resultierende lange ganzzahlige Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-255">The resulting long integer vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; GreaterThan (System.Numerics.Vector&lt;float&gt; left, System.Numerics.Vector&lt;float&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; GreaterThan(valuetype System.Numerics.Vector`1&lt;float32&gt; left, valuetype System.Numerics.Vector`1&lt;float32&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThan (left As Vector(Of Single), right As Vector(Of Single)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; GreaterThan(System::Numerics::Vector&lt;float&gt; left, System::Numerics::Vector&lt;float&gt; right);" />
      <MemberSignature Language="F#" Value="static member GreaterThan : System.Numerics.Vector&lt;single&gt; * System.Numerics.Vector&lt;single&gt; -&gt; System.Numerics.Vector&lt;int&gt;" Usage="System.Numerics.Vector.GreaterThan (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Single&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Single&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="b4f1c-256">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-256">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-257">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-257">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-258">Gibt einen neuen integralen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem Vektor mit Gleitkomma und einfacher Genauigkeit größer sind als die entsprechenden Elemente in einem zweiten Vektor mit Gleitkomma und einfacher Genauigkeit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-258">Returns a new integral vector whose elements signal whether the elements in one single-precision floating-point vector are greater than their corresponding elements in a second single-precision floating-point vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-259">Der resultierende integrale Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-259">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; GreaterThan&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; GreaterThan&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThan(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; GreaterThan(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member GreaterThan : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; (requires 'T : struct)" Usage="System.Numerics.Vector.GreaterThan (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-260">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-260">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-261">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-261">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="b4f1c-262">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-262">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-263">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-263">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-264">Gibt einen neuen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem Vektor eines angegebenen Typs größer sind als die entsprechenden Elemente im zweiten Vektor desselben Typs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-264">Returns a new vector whose elements signal whether the elements in one vector of a specified type are greater than their corresponding elements in the second vector of the same time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-265">Der Ergebnisvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-265">The resulting vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanAll&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool GreaterThanAll&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GreaterThanAll&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanAll(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool GreaterThanAll(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member GreaterThanAll : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; bool (requires 'T : struct)" Usage="System.Numerics.Vector.GreaterThanAll (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-266">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-266">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-267">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-267">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="b4f1c-268">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-268">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-269">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-269">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-270">Gibt einen Wert zurück, der angibt, ob alle Elemente im ersten Vektor größer sind als die entsprechenden Elemente im zweiten Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-270">Returns a value that indicates whether all elements in the first vector are greater than the corresponding elements in the second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-271">
            <see langword="true" />, wenn alle Elemente in <paramref name="left" /> größer sind als die entsprechenden Elemente in <paramref name="right" />; andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-271">
              <see langword="true" /> if all elements in <paramref name="left" /> are greater than the corresponding elements in <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool GreaterThanAny&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GreaterThanAny&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanAny(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool GreaterThanAny(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member GreaterThanAny : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; bool (requires 'T : struct)" Usage="System.Numerics.Vector.GreaterThanAny (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-272">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-272">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-273">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-273">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="b4f1c-274">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-274">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-275">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-275">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-276">Gibt einen Wert zurück, der angibt, ob ein beliebiges Element im ersten Vektor größer ist als das entsprechende Element im zweiten Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-276">Returns a value that indicates whether any element in the first vector is greater than the corresponding element in the second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-277">
            <see langword="true" />, wenn ein Element in <paramref name="left" /> größer ist als das entsprechende Element in <paramref name="right" />; andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-277">
              <see langword="true" /> if any element in <paramref name="left" /> is greater than the corresponding element in <paramref name="right" />; otherwise,  <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; GreaterThanOrEqual (System.Numerics.Vector&lt;double&gt; left, System.Numerics.Vector&lt;double&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; GreaterThanOrEqual(valuetype System.Numerics.Vector`1&lt;float64&gt; left, valuetype System.Numerics.Vector`1&lt;float64&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqual (left As Vector(Of Double), right As Vector(Of Double)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;long&gt; GreaterThanOrEqual(System::Numerics::Vector&lt;double&gt; left, System::Numerics::Vector&lt;double&gt; right);" />
      <MemberSignature Language="F#" Value="static member GreaterThanOrEqual : System.Numerics.Vector&lt;double&gt; * System.Numerics.Vector&lt;double&gt; -&gt; System.Numerics.Vector&lt;int64&gt;" Usage="System.Numerics.Vector.GreaterThanOrEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Double&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="b4f1c-278">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-278">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-279">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-279">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-280">Gibt einen neuen integralen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem Vektor größer oder gleich den entsprechenden Elementen im zweiten Vektor mit Gleitkomma und doppelter Genauigkeit sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-280">Returns a new integral vector whose elements signal whether the elements in one vector are greater than or equal to their corresponding elements in the second double-precision floating-point vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-281">Der resultierende integrale Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-281">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; GreaterThanOrEqual (System.Numerics.Vector&lt;int&gt; left, System.Numerics.Vector&lt;int&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; GreaterThanOrEqual(valuetype System.Numerics.Vector`1&lt;int32&gt; left, valuetype System.Numerics.Vector`1&lt;int32&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqual (left As Vector(Of Integer), right As Vector(Of Integer)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; GreaterThanOrEqual(System::Numerics::Vector&lt;int&gt; left, System::Numerics::Vector&lt;int&gt; right);" />
      <MemberSignature Language="F#" Value="static member GreaterThanOrEqual : System.Numerics.Vector&lt;int&gt; * System.Numerics.Vector&lt;int&gt; -&gt; System.Numerics.Vector&lt;int&gt;" Usage="System.Numerics.Vector.GreaterThanOrEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="b4f1c-282">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-282">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-283">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-283">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-284">Gibt einen neuen integralen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem integralen Vektor größer oder gleich den entsprechenden Elementen im zweiten integralen Vektor sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-284">Returns a new integral vector whose elements signal whether the elements in one integral vector are greater than or equal to their corresponding elements in the second integral vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-285">Der resultierende integrale Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-285">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; GreaterThanOrEqual (System.Numerics.Vector&lt;long&gt; left, System.Numerics.Vector&lt;long&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; GreaterThanOrEqual(valuetype System.Numerics.Vector`1&lt;int64&gt; left, valuetype System.Numerics.Vector`1&lt;int64&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqual (left As Vector(Of Long), right As Vector(Of Long)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;long&gt; GreaterThanOrEqual(System::Numerics::Vector&lt;long&gt; left, System::Numerics::Vector&lt;long&gt; right);" />
      <MemberSignature Language="F#" Value="static member GreaterThanOrEqual : System.Numerics.Vector&lt;int64&gt; * System.Numerics.Vector&lt;int64&gt; -&gt; System.Numerics.Vector&lt;int64&gt;" Usage="System.Numerics.Vector.GreaterThanOrEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="b4f1c-286">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-286">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-287">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-287">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-288">Gibt einen neuen langen ganzzahligen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem langen ganzzahligen Vektor größer oder gleich den entsprechenden Elementen in einem zweiten langen ganzzahligen Vektor sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-288">Returns a new long integer vector whose elements signal whether the elements in one long integer vector are greater than or equal to their corresponding elements in the second long integer vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-289">Der resultierende lange ganzzahlige Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-289">The resulting long integer vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; GreaterThanOrEqual (System.Numerics.Vector&lt;float&gt; left, System.Numerics.Vector&lt;float&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; GreaterThanOrEqual(valuetype System.Numerics.Vector`1&lt;float32&gt; left, valuetype System.Numerics.Vector`1&lt;float32&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqual (left As Vector(Of Single), right As Vector(Of Single)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; GreaterThanOrEqual(System::Numerics::Vector&lt;float&gt; left, System::Numerics::Vector&lt;float&gt; right);" />
      <MemberSignature Language="F#" Value="static member GreaterThanOrEqual : System.Numerics.Vector&lt;single&gt; * System.Numerics.Vector&lt;single&gt; -&gt; System.Numerics.Vector&lt;int&gt;" Usage="System.Numerics.Vector.GreaterThanOrEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Single&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Single&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="b4f1c-290">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-290">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-291">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-291">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-292">Gibt einen neuen integralen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem Vektor größer oder gleich den entsprechenden Elementen im zweiten Vektor mit Gleitkomma und einfacher Genauigkeit sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-292">Returns a new integral vector whose elements signal whether the elements in one vector are greater than or equal to their corresponding elements in the single-precision floating-point second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-293">Der resultierende integrale Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-293">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqual&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; GreaterThanOrEqual&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; GreaterThanOrEqual&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqual(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; GreaterThanOrEqual(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member GreaterThanOrEqual : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; (requires 'T : struct)" Usage="System.Numerics.Vector.GreaterThanOrEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-294">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-294">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-295">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-295">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="b4f1c-296">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-296">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-297">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-297">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-298">Gibt einen neuen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem Vektor eines angegebenen Typs größer oder gleich den entsprechenden Elementen im zweiten Vektor desselben Typs sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-298">Returns a new vector whose elements signal whether the elements in one vector of a specified type are greater than or equal to their corresponding elements in the second vector of the same type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-299">Der Ergebnisvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-299">The resulting vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqualAll&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool GreaterThanOrEqualAll&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GreaterThanOrEqualAll&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqualAll(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool GreaterThanOrEqualAll(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member GreaterThanOrEqualAll : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; bool (requires 'T : struct)" Usage="System.Numerics.Vector.GreaterThanOrEqualAll (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-300">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-300">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-301">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-301">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="b4f1c-302">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-302">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-303">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-303">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-304">Gibt einen Wert zurück, der angibt, ob alle Elemente im ersten Vektor größer oder gleich allen entsprechenden Elementen im zweiten Vektor sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-304">Returns a value that indicates whether all elements in the first vector are greater than or equal to all the corresponding elements in the second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-305">
            <see langword="true" />, wenn alle Elemente in <paramref name="left" /> größer oder gleich den entsprechenden Elementen in <paramref name="right" /> sind; andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-305">
              <see langword="true" /> if all elements in <paramref name="left" /> are greater than or equal to the corresponding elements in <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqualAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool GreaterThanOrEqualAny&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GreaterThanOrEqualAny&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqualAny(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool GreaterThanOrEqualAny(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member GreaterThanOrEqualAny : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; bool (requires 'T : struct)" Usage="System.Numerics.Vector.GreaterThanOrEqualAny (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-306">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-306">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-307">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-307">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="b4f1c-308">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-308">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-309">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-309">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-310">Gibt einen Wert zurück, der angibt, ob ein beliebiges Element im ersten Vektor größer oder gleich dem entsprechenden Element im zweiten Vektor ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-310">Returns a value that indicates whether any element in the first vector is greater than or equal to the corresponding element in the second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-311">
            <see langword="true" />, wenn ein Element in <paramref name="left" /> größer oder gleich dem entsprechenden Element in <paramref name="right" /> ist; andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-311">
              <see langword="true" /> if any element in <paramref name="left" /> is greater than or equal to the corresponding element in <paramref name="right" />; otherwise,  <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHardwareAccelerated">
      <MemberSignature Language="C#" Value="public static bool IsHardwareAccelerated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsHardwareAccelerated" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Vector.IsHardwareAccelerated" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsHardwareAccelerated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsHardwareAccelerated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHardwareAccelerated : bool" Usage="System.Numerics.Vector.IsHardwareAccelerated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b4f1c-312">Ruft einen Wert ab, der angibt, ob die Vektoroperationen einer Hardwarebeschleunigung durch systeminterne JIT-Unterstützung unterliegen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-312">Gets a value that indicates whether vector operations are subject to hardware acceleration through JIT intrinsic support.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b4f1c-313">
            <see langword="true" />, wenn Vektoroperationen der Hardwarebeschleunigung unterliegen; andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-313">
              <see langword="true" /> if vector operations are subject to hardware acceleration; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4f1c-314">Vektoroperationen unterliegen die Hardwarebeschleunigung auf Systemen, die einzelne Anweisung, Anweisungen für mehrere Data (SIMD) unterstützen, und der RyiJIT Just-in-Time-Compiler wird verwendet, um verwalteten Code zu kompilieren.</span><span class="sxs-lookup"><span data-stu-id="b4f1c-314">Vector operations are subject to hardware acceleration on systems that support Single Instruction, Multiple Data (SIMD) instructions and the RyiJIT just-in-time compiler is used to compile managed code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; LessThan (System.Numerics.Vector&lt;double&gt; left, System.Numerics.Vector&lt;double&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; LessThan(valuetype System.Numerics.Vector`1&lt;float64&gt; left, valuetype System.Numerics.Vector`1&lt;float64&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThan (left As Vector(Of Double), right As Vector(Of Double)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;long&gt; LessThan(System::Numerics::Vector&lt;double&gt; left, System::Numerics::Vector&lt;double&gt; right);" />
      <MemberSignature Language="F#" Value="static member LessThan : System.Numerics.Vector&lt;double&gt; * System.Numerics.Vector&lt;double&gt; -&gt; System.Numerics.Vector&lt;int64&gt;" Usage="System.Numerics.Vector.LessThan (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Double&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="b4f1c-315">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-315">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-316">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-316">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-317">Gibt einen neuen integralen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem Vektor mit Gleitkomma und doppelter Genauigkeit kleiner sind als die entsprechenden Elemente in einem zweiten Vektor mit Gleitkomma und doppelter Genauigkeit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-317">Returns a new integral vector whose elements signal whether the elements in one double-precision floating-point vector are less than their corresponding elements in a second double-precision floating-point vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-318">Der resultierende integrale Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-318">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; LessThan (System.Numerics.Vector&lt;int&gt; left, System.Numerics.Vector&lt;int&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; LessThan(valuetype System.Numerics.Vector`1&lt;int32&gt; left, valuetype System.Numerics.Vector`1&lt;int32&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThan (left As Vector(Of Integer), right As Vector(Of Integer)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; LessThan(System::Numerics::Vector&lt;int&gt; left, System::Numerics::Vector&lt;int&gt; right);" />
      <MemberSignature Language="F#" Value="static member LessThan : System.Numerics.Vector&lt;int&gt; * System.Numerics.Vector&lt;int&gt; -&gt; System.Numerics.Vector&lt;int&gt;" Usage="System.Numerics.Vector.LessThan (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="b4f1c-319">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-319">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-320">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-320">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-321">Gibt einen neuen integralen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem integralen Vektor kleiner sind als die entsprechenden Elemente in einem zweiten integralen Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-321">Returns a new integral vector whose elements signal whether the elements in one integral vector are less than their corresponding elements in a second integral vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-322">Der resultierende integrale Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-322">The resulting integral vector</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; LessThan (System.Numerics.Vector&lt;long&gt; left, System.Numerics.Vector&lt;long&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; LessThan(valuetype System.Numerics.Vector`1&lt;int64&gt; left, valuetype System.Numerics.Vector`1&lt;int64&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThan (left As Vector(Of Long), right As Vector(Of Long)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;long&gt; LessThan(System::Numerics::Vector&lt;long&gt; left, System::Numerics::Vector&lt;long&gt; right);" />
      <MemberSignature Language="F#" Value="static member LessThan : System.Numerics.Vector&lt;int64&gt; * System.Numerics.Vector&lt;int64&gt; -&gt; System.Numerics.Vector&lt;int64&gt;" Usage="System.Numerics.Vector.LessThan (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="b4f1c-323">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-323">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-324">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-324">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-325">Gibt einen neuen langen ganzzahligen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem langen ganzzahligen Vektor kleiner sind als die entsprechenden Elemente in einem zweiten langen ganzzahligen Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-325">Returns a new long integer vector whose elements signal whether the elements in one long integer vector are less than their corresponding elements in a second long integer vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-326">Der resultierende lange ganzzahlige Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-326">The resulting long integer vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; LessThan (System.Numerics.Vector&lt;float&gt; left, System.Numerics.Vector&lt;float&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; LessThan(valuetype System.Numerics.Vector`1&lt;float32&gt; left, valuetype System.Numerics.Vector`1&lt;float32&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThan (left As Vector(Of Single), right As Vector(Of Single)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; LessThan(System::Numerics::Vector&lt;float&gt; left, System::Numerics::Vector&lt;float&gt; right);" />
      <MemberSignature Language="F#" Value="static member LessThan : System.Numerics.Vector&lt;single&gt; * System.Numerics.Vector&lt;single&gt; -&gt; System.Numerics.Vector&lt;int&gt;" Usage="System.Numerics.Vector.LessThan (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Single&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Single&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="b4f1c-327">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-327">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-328">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-328">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-329">Gibt einen neuen integralen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem Vektor mit einfacher Genauigkeit kleiner sind als die entsprechenden Elemente in einem zweiten Vektor mit einfacher Genauigkeit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-329">Returns a new integral vector whose elements signal whether the elements in one single-precision vector are less than their corresponding elements in a second single-precision vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-330">Der resultierende integrale Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-330">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; LessThan&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; LessThan&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThan(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; LessThan(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member LessThan : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; (requires 'T : struct)" Usage="System.Numerics.Vector.LessThan (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-331">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-331">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-332">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-332">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="b4f1c-333">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-333">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-334">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-334">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-335">Gibt einen neuen Vektor eines angegebenen Typs zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem Vektor kleiner sind als die entsprechenden Elemente im zweiten Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-335">Returns a new vector of a specified type whose elements signal whether the elements in one vector are less than their corresponding elements in the second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-336">Der Ergebnisvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-336">The resulting vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanAll&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool LessThanAll&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool LessThanAll&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanAll(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool LessThanAll(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member LessThanAll : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; bool (requires 'T : struct)" Usage="System.Numerics.Vector.LessThanAll (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-337">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-337">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-338">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-338">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="b4f1c-339">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-339">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-340">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-340">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-341">Gibt einen Wert zurück, der angibt, ob alle Elemente im ersten Vektor kleiner sind als die entsprechenden Elemente im zweiten Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-341">Returns a value that indicates whether all of the elements in the first vector are less than their corresponding elements in the second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-342">
            <see langword="true" />, wenn alle Elemente in <paramref name="left" /> kleiner sind als die entsprechenden Elemente in <paramref name="right" />; andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-342">
              <see langword="true" /> if all of the elements in <paramref name="left" /> are less than the corresponding elements in <paramref name="right" />; otherwise,  <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool LessThanAny&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool LessThanAny&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanAny(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool LessThanAny(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member LessThanAny : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; bool (requires 'T : struct)" Usage="System.Numerics.Vector.LessThanAny (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-343">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-343">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-344">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-344">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="b4f1c-345">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-345">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-346">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-346">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-347">Gibt einen Wert zurück, der angibt, ob ein beliebiges Element im ersten Vektor kleiner ist als das entsprechende Element im zweiten Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-347">Returns a value that indicates whether any element in the first vector is less than the corresponding element in the second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-348">
            <see langword="true" />, wenn ein Element in <paramref name="left" /> kleiner ist als das entsprechende Element in <paramref name="right" />; andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-348">
              <see langword="true" /> if any element in <paramref name="left" /> is less than the corresponding element in <paramref name="right" />; otherwise,  <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; LessThanOrEqual (System.Numerics.Vector&lt;double&gt; left, System.Numerics.Vector&lt;double&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; LessThanOrEqual(valuetype System.Numerics.Vector`1&lt;float64&gt; left, valuetype System.Numerics.Vector`1&lt;float64&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqual (left As Vector(Of Double), right As Vector(Of Double)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;long&gt; LessThanOrEqual(System::Numerics::Vector&lt;double&gt; left, System::Numerics::Vector&lt;double&gt; right);" />
      <MemberSignature Language="F#" Value="static member LessThanOrEqual : System.Numerics.Vector&lt;double&gt; * System.Numerics.Vector&lt;double&gt; -&gt; System.Numerics.Vector&lt;int64&gt;" Usage="System.Numerics.Vector.LessThanOrEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Double&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="b4f1c-349">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-349">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-350">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-350">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-351">Gibt einen neuen integralen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem Vektor mit Gleitkomma und doppelter Genauigkeit kleiner oder gleich den entsprechenden Elementen in einem zweiten Vektor mit Gleitkomma und doppelter Genauigkeit sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-351">Returns a new integral vector whose elements signal whether the elements in one double-precision floating-point vector are less than or equal to their corresponding elements in a second double-precision floating-point vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-352">Der resultierende integrale Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-352">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; LessThanOrEqual (System.Numerics.Vector&lt;int&gt; left, System.Numerics.Vector&lt;int&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; LessThanOrEqual(valuetype System.Numerics.Vector`1&lt;int32&gt; left, valuetype System.Numerics.Vector`1&lt;int32&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqual (left As Vector(Of Integer), right As Vector(Of Integer)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; LessThanOrEqual(System::Numerics::Vector&lt;int&gt; left, System::Numerics::Vector&lt;int&gt; right);" />
      <MemberSignature Language="F#" Value="static member LessThanOrEqual : System.Numerics.Vector&lt;int&gt; * System.Numerics.Vector&lt;int&gt; -&gt; System.Numerics.Vector&lt;int&gt;" Usage="System.Numerics.Vector.LessThanOrEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="b4f1c-353">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-353">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-354">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-354">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-355">Gibt einen neuen integralen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem integralen Vektor kleiner oder gleich den entsprechenden Elementen in einem zweiten integralen Vektor sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-355">Returns a new integral vector whose elements signal whether the elements in one integral vector are less than or equal to their corresponding elements in a second integral vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-356">Der resultierende integrale Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-356">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; LessThanOrEqual (System.Numerics.Vector&lt;long&gt; left, System.Numerics.Vector&lt;long&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; LessThanOrEqual(valuetype System.Numerics.Vector`1&lt;int64&gt; left, valuetype System.Numerics.Vector`1&lt;int64&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqual (left As Vector(Of Long), right As Vector(Of Long)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;long&gt; LessThanOrEqual(System::Numerics::Vector&lt;long&gt; left, System::Numerics::Vector&lt;long&gt; right);" />
      <MemberSignature Language="F#" Value="static member LessThanOrEqual : System.Numerics.Vector&lt;int64&gt; * System.Numerics.Vector&lt;int64&gt; -&gt; System.Numerics.Vector&lt;int64&gt;" Usage="System.Numerics.Vector.LessThanOrEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="b4f1c-357">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-357">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-358">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-358">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-359">Gibt einen neuen langen ganzzahligen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem langen ganzzahligen Vektor kleiner oder gleich den entsprechenden Elementen in einem zweiten langen ganzzahligen Vektor sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-359">Returns a new long integer vector whose elements signal whether the elements in one long integer vector are less or equal to their corresponding elements in a second long integer vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-360">Der resultierende lange ganzzahlige Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-360">The resulting long integer vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; LessThanOrEqual (System.Numerics.Vector&lt;float&gt; left, System.Numerics.Vector&lt;float&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; LessThanOrEqual(valuetype System.Numerics.Vector`1&lt;float32&gt; left, valuetype System.Numerics.Vector`1&lt;float32&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqual (left As Vector(Of Single), right As Vector(Of Single)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; LessThanOrEqual(System::Numerics::Vector&lt;float&gt; left, System::Numerics::Vector&lt;float&gt; right);" />
      <MemberSignature Language="F#" Value="static member LessThanOrEqual : System.Numerics.Vector&lt;single&gt; * System.Numerics.Vector&lt;single&gt; -&gt; System.Numerics.Vector&lt;int&gt;" Usage="System.Numerics.Vector.LessThanOrEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Single&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Single&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="b4f1c-361">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-361">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-362">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-362">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-363">Gibt einen neuen integralen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem Vektor mit Gleitkomma und einfacher Genauigkeit kleiner oder gleich den entsprechenden Elementen in einem zweiten Vektor mit Gleitkomma und einfacher Genauigkeit sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-363">Returns a new integral vector whose elements signal whether the elements in one single-precision floating-point vector are less than or equal to their corresponding elements in a second single-precision floating-point vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-364">Der resultierende integrale Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-364">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqual&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; LessThanOrEqual&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; LessThanOrEqual&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqual(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; LessThanOrEqual(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member LessThanOrEqual : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; (requires 'T : struct)" Usage="System.Numerics.Vector.LessThanOrEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-365">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-365">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-366">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-366">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="b4f1c-367">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-367">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-368">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-368">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-369">Gibt einen neuen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem Vektor kleiner oder gleich den entsprechenden Elementen im zweiten Vektor sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-369">Returns a new vector whose elements signal whether the elements in one vector are less than or equal to their corresponding elements in the second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-370">Der Ergebnisvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-370">The resulting vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqualAll&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool LessThanOrEqualAll&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool LessThanOrEqualAll&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqualAll(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool LessThanOrEqualAll(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member LessThanOrEqualAll : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; bool (requires 'T : struct)" Usage="System.Numerics.Vector.LessThanOrEqualAll (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-371">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-371">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-372">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-372">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="b4f1c-373">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-373">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-374">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-374">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-375">Gibt einen Wert zurück, der angibt, ob alle Elemente im ersten Vektor kleiner oder gleich den entsprechenden Elementen im zweiten Vektor sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-375">Returns a value that indicates whether all elements in the first vector are less than or equal to their corresponding elements in the second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-376">
            <see langword="true" />, wenn alle Elemente in <paramref name="left" /> kleiner oder gleich den entsprechenden Elementen in <paramref name="right" /> sind; andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-376">
              <see langword="true" /> if all of the elements in <paramref name="left" /> are less than or equal to the corresponding elements in <paramref name="right" />; otherwise,  <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqualAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool LessThanOrEqualAny&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool LessThanOrEqualAny&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqualAny(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool LessThanOrEqualAny(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member LessThanOrEqualAny : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; bool (requires 'T : struct)" Usage="System.Numerics.Vector.LessThanOrEqualAny (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-377">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-377">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-378">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-378">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="b4f1c-379">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-379">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-380">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-380">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-381">Gibt einen Wert zurück, der angibt, ob ein beliebiges Element im ersten Vektor kleiner oder gleich dem entsprechenden Element im zweiten Vektor ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-381">Returns a value that indicates whether any element in the first vector is less than or equal to the corresponding element in the second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-382">
            <see langword="true" />, wenn ein Element in <paramref name="left" /> kleiner oder gleich dem entsprechenden Element in <paramref name="right" /> ist; andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-382">
              <see langword="true" /> if any element in <paramref name="left" /> is less than or equal to the corresponding element in <paramref name="right" />; otherwise,  <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Max&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Max&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Max``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Max(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member Max : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; (requires 'T : struct)" Usage="System.Numerics.Vector.Max (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-383">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-383">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-384">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-384">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="b4f1c-385">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-385">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-386">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-386">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-387">Gibt einen neuen Vektor zurück, dessen Elemente dem Höchstwert der einzelnen Elementpaare in den beiden angegebenen Vektoren entsprechen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-387">Returns a new vector whose elements are the maximum of each pair of elements in the two given vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-388">Der maximale Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-388">The maximum vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Min&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Min&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Min``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Min(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member Min : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; (requires 'T : struct)" Usage="System.Numerics.Vector.Min (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-389">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-389">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-390">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-390">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="b4f1c-391">Der erste zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-391">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-392">Der zweite zu vergleichende Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-392">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-393">Gibt einen neuen Vektor zurück, dessen Elemente dem Mindestwert der einzelnen Elementpaare in den beiden angegebenen Vektoren entsprechen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-393">Returns a new vector whose elements are the minimum of each pair of elements in the two given vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-394">Der minimale Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-394">The minimum vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Multiply&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Multiply&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Multiply(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; (requires 'T : struct)" Usage="System.Numerics.Vector.Multiply (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-395">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-395">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-396">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-396">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="b4f1c-397">Der erste Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-397">The first vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-398">Der zweite Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-398">The second vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-399">Gibt einen neuen Vektor zurück, dessen Werte dem Produkt der einzelnen Elementpaare in zwei angegebenen Vektoren entsprechen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-399">Returns a new vector whose values are the product of each pair of elements in two specified vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-400">Der Produktvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-400">The product vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Multiply&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, T right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Multiply&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, !!T right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply(Of T As Structure) (left As Vector(Of T), right As T) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Multiply(System::Numerics::Vector&lt;T&gt; left, T right);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * 'T -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; (requires 'T : struct)" Usage="System.Numerics.Vector.Multiply (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-401">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-401">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-402">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-402">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="b4f1c-403">Der Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-403">The vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-404">Der Skalarwert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-404">The scalar value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-405">Gibt einen neuen Vektor zurück, dessen Werte den jeweils mit einem Skalarwert multiplizierten Werten eines angegebenen Vektors entsprechen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-405">Returns a new vector whose values are the values of a specified vector each multiplied by a scalar value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-406">Der skalierte Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-406">The scaled vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Multiply&lt;T&gt; (T left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Multiply&lt;struct .ctor (class System.ValueType) T&gt;(!!T left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Multiply``1(``0,System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply(Of T As Structure) (left As T, right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Multiply(T left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member Multiply : 'T * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; (requires 'T : struct)" Usage="System.Numerics.Vector.Multiply (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="T" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-407">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-407">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-408">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-408">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="b4f1c-409">Der Skalarwert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-409">The scalar value.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-410">Der Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-410">The vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-411">Gibt einen neuen Vektor zurück, dessen Werte sich aus der Multiplikation eines Skalarwerts mit jedem der Werte eines angegebenen Vektors ergeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-411">Returns a new vector whose values are a scalar value multiplied by each of the values of a specified vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-412">Der skalierte Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-412">The scaled vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Narrow">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;float&gt; Narrow (System.Numerics.Vector&lt;double&gt; source1, System.Numerics.Vector&lt;double&gt; source2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;float32&gt; Narrow(valuetype System.Numerics.Vector`1&lt;float64&gt; source1, valuetype System.Numerics.Vector`1&lt;float64&gt; source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Narrow (source1 As Vector(Of Double), source2 As Vector(Of Double)) As Vector(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;float&gt; Narrow(System::Numerics::Vector&lt;double&gt; source1, System::Numerics::Vector&lt;double&gt; source2);" />
      <MemberSignature Language="F#" Value="static member Narrow : System.Numerics.Vector&lt;double&gt; * System.Numerics.Vector&lt;double&gt; -&gt; System.Numerics.Vector&lt;single&gt;" Usage="System.Numerics.Vector.Narrow (source1, source2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source1" Type="System.Numerics.Vector&lt;System.Double&gt;" />
        <Parameter Name="source2" Type="System.Numerics.Vector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="source1">To be added.</param>
        <param name="source2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Narrow">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;sbyte&gt; Narrow (System.Numerics.Vector&lt;short&gt; source1, System.Numerics.Vector&lt;short&gt; source2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int8&gt; Narrow(valuetype System.Numerics.Vector`1&lt;int16&gt; source1, valuetype System.Numerics.Vector`1&lt;int16&gt; source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int16})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Narrow (source1 As Vector(Of Short), source2 As Vector(Of Short)) As Vector(Of SByte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;System::SByte&gt; Narrow(System::Numerics::Vector&lt;short&gt; source1, System::Numerics::Vector&lt;short&gt; source2);" />
      <MemberSignature Language="F#" Value="static member Narrow : System.Numerics.Vector&lt;int16&gt; * System.Numerics.Vector&lt;int16&gt; -&gt; System.Numerics.Vector&lt;sbyte&gt;" Usage="System.Numerics.Vector.Narrow (source1, source2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.SByte&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source1" Type="System.Numerics.Vector&lt;System.Int16&gt;" />
        <Parameter Name="source2" Type="System.Numerics.Vector&lt;System.Int16&gt;" />
      </Parameters>
      <Docs>
        <param name="source1">To be added.</param>
        <param name="source2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Narrow">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;short&gt; Narrow (System.Numerics.Vector&lt;int&gt; source1, System.Numerics.Vector&lt;int&gt; source2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int16&gt; Narrow(valuetype System.Numerics.Vector`1&lt;int32&gt; source1, valuetype System.Numerics.Vector`1&lt;int32&gt; source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Narrow (source1 As Vector(Of Integer), source2 As Vector(Of Integer)) As Vector(Of Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;short&gt; Narrow(System::Numerics::Vector&lt;int&gt; source1, System::Numerics::Vector&lt;int&gt; source2);" />
      <MemberSignature Language="F#" Value="static member Narrow : System.Numerics.Vector&lt;int&gt; * System.Numerics.Vector&lt;int&gt; -&gt; System.Numerics.Vector&lt;int16&gt;" Usage="System.Numerics.Vector.Narrow (source1, source2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int16&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source1" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
        <Parameter Name="source2" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="source1">To be added.</param>
        <param name="source2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Narrow">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; Narrow (System.Numerics.Vector&lt;long&gt; source1, System.Numerics.Vector&lt;long&gt; source2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; Narrow(valuetype System.Numerics.Vector`1&lt;int64&gt; source1, valuetype System.Numerics.Vector`1&lt;int64&gt; source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Narrow (source1 As Vector(Of Long), source2 As Vector(Of Long)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; Narrow(System::Numerics::Vector&lt;long&gt; source1, System::Numerics::Vector&lt;long&gt; source2);" />
      <MemberSignature Language="F#" Value="static member Narrow : System.Numerics.Vector&lt;int64&gt; * System.Numerics.Vector&lt;int64&gt; -&gt; System.Numerics.Vector&lt;int&gt;" Usage="System.Numerics.Vector.Narrow (source1, source2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source1" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
        <Parameter Name="source2" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="source1">To be added.</param>
        <param name="source2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Narrow">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;byte&gt; Narrow (System.Numerics.Vector&lt;ushort&gt; source1, System.Numerics.Vector&lt;ushort&gt; source2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;unsigned int8&gt; Narrow(valuetype System.Numerics.Vector`1&lt;unsigned int16&gt; source1, valuetype System.Numerics.Vector`1&lt;unsigned int16&gt; source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt16})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Narrow (source1 As Vector(Of UShort), source2 As Vector(Of UShort)) As Vector(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;System::Byte&gt; Narrow(System::Numerics::Vector&lt;System::UInt16&gt; source1, System::Numerics::Vector&lt;System::UInt16&gt; source2);" />
      <MemberSignature Language="F#" Value="static member Narrow : System.Numerics.Vector&lt;uint16&gt; * System.Numerics.Vector&lt;uint16&gt; -&gt; System.Numerics.Vector&lt;byte&gt;" Usage="System.Numerics.Vector.Narrow (source1, source2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source1" Type="System.Numerics.Vector&lt;System.UInt16&gt;" />
        <Parameter Name="source2" Type="System.Numerics.Vector&lt;System.UInt16&gt;" />
      </Parameters>
      <Docs>
        <param name="source1">To be added.</param>
        <param name="source2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Narrow">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;ushort&gt; Narrow (System.Numerics.Vector&lt;uint&gt; source1, System.Numerics.Vector&lt;uint&gt; source2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;unsigned int16&gt; Narrow(valuetype System.Numerics.Vector`1&lt;unsigned int32&gt; source1, valuetype System.Numerics.Vector`1&lt;unsigned int32&gt; source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Narrow (source1 As Vector(Of UInteger), source2 As Vector(Of UInteger)) As Vector(Of UShort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;System::UInt16&gt; Narrow(System::Numerics::Vector&lt;System::UInt32&gt; source1, System::Numerics::Vector&lt;System::UInt32&gt; source2);" />
      <MemberSignature Language="F#" Value="static member Narrow : System.Numerics.Vector&lt;uint32&gt; * System.Numerics.Vector&lt;uint32&gt; -&gt; System.Numerics.Vector&lt;uint16&gt;" Usage="System.Numerics.Vector.Narrow (source1, source2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.UInt16&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source1" Type="System.Numerics.Vector&lt;System.UInt32&gt;" />
        <Parameter Name="source2" Type="System.Numerics.Vector&lt;System.UInt32&gt;" />
      </Parameters>
      <Docs>
        <param name="source1">To be added.</param>
        <param name="source2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Narrow">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;uint&gt; Narrow (System.Numerics.Vector&lt;ulong&gt; source1, System.Numerics.Vector&lt;ulong&gt; source2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;unsigned int32&gt; Narrow(valuetype System.Numerics.Vector`1&lt;unsigned int64&gt; source1, valuetype System.Numerics.Vector`1&lt;unsigned int64&gt; source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt64},System.Numerics.Vector{System.UInt64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Narrow (source1 As Vector(Of ULong), source2 As Vector(Of ULong)) As Vector(Of UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;System::UInt32&gt; Narrow(System::Numerics::Vector&lt;System::UInt64&gt; source1, System::Numerics::Vector&lt;System::UInt64&gt; source2);" />
      <MemberSignature Language="F#" Value="static member Narrow : System.Numerics.Vector&lt;uint64&gt; * System.Numerics.Vector&lt;uint64&gt; -&gt; System.Numerics.Vector&lt;uint32&gt;" Usage="System.Numerics.Vector.Narrow (source1, source2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.UInt32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source1" Type="System.Numerics.Vector&lt;System.UInt64&gt;" />
        <Parameter Name="source2" Type="System.Numerics.Vector&lt;System.UInt64&gt;" />
      </Parameters>
      <Docs>
        <param name="source1">To be added.</param>
        <param name="source2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Negate&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Negate&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Negate&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Negate``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Negate(Of T As Structure) (value As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Negate(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member Negate : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; (requires 'T : struct)" Usage="System.Numerics.Vector.Negate value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-413">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-413">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-414">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-414">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="b4f1c-415">Der Quellvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-415">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-416">Gibt einen neuen Vektor zurück, dessen Elemente die Negation des entsprechenden Elements im angegebenen Vektor sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-416">Returns a new vector whose elements are the negation of the corresponding element in the specified vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-417">Der negierte Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-417">The negated vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnesComplement&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; OnesComplement&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; OnesComplement&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.OnesComplement``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OnesComplement(Of T As Structure) (value As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; OnesComplement(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member OnesComplement : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; (requires 'T : struct)" Usage="System.Numerics.Vector.OnesComplement value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-418">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-418">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-419">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-419">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="b4f1c-420">Der Quellvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-420">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-421">Gibt einen neuen Vektor zurück, dessen Elemente sich aus dem Einerkomplement der Elemente eines angegebenen Vektors ergeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-421">Returns a new vector whose elements are obtained by taking the one's complement of a specified vector's elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-422">Der Ergebnisvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-422">The resulting vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SquareRoot&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; SquareRoot&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; SquareRoot&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.SquareRoot``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SquareRoot(Of T As Structure) (value As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; SquareRoot(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member SquareRoot : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; (requires 'T : struct)" Usage="System.Numerics.Vector.SquareRoot value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-423">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-423">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-424">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-424">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="b4f1c-425">Der Quellvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-425">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-426">Gibt einen neuen Vektor zurück, dessen Elemente die Quadratwurzeln der Elemente eines angegebenen Vektors sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-426">Returns a new vector whose elements are the square roots of a specified vector's elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-427">Der Quadratwurzelvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-427">The square root vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Subtract&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Subtract&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Subtract``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Subtract(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member Subtract : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; (requires 'T : struct)" Usage="System.Numerics.Vector.Subtract (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-428">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-428">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-429">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-429">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="b4f1c-430">Der erste Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-430">The first vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-431">Der zweite Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-431">The second vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-432">Gibt einen neuen Vektor zurück, dessen Werte sich aus der Differenz zwischen den Elementen im zweiten Vektor und den entsprechenden Elementen im ersten Vektor ergeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-432">Returns a new vector whose values are the difference between the elements in the second vector and their corresponding elements in the first vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-433">Der Differenzvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-433">The difference vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Widen">
      <MemberSignature Language="C#" Value="public static void Widen (System.Numerics.Vector&lt;byte&gt; source, out System.Numerics.Vector&lt;ushort&gt; dest1, out System.Numerics.Vector&lt;ushort&gt; dest2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Widen(valuetype System.Numerics.Vector`1&lt;unsigned int8&gt; source, [out] valuetype System.Numerics.Vector`1&lt;unsigned int16&gt;&amp; dest1, [out] valuetype System.Numerics.Vector`1&lt;unsigned int16&gt;&amp; dest2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Byte},System.Numerics.Vector{System.UInt16}@,System.Numerics.Vector{System.UInt16}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Widen (source As Vector(Of Byte), ByRef dest1 As Vector(Of UShort), ByRef dest2 As Vector(Of UShort))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Widen(System::Numerics::Vector&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;System::UInt16&gt; % dest1, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;System::UInt16&gt; % dest2);" />
      <MemberSignature Language="F#" Value="static member Widen : System.Numerics.Vector&lt;byte&gt; *  *  -&gt; unit" Usage="System.Numerics.Vector.Widen (source, dest1, dest2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Numerics.Vector&lt;System.Byte&gt;" />
        <Parameter Name="dest1" Type="System.Numerics.Vector&lt;System.UInt16&gt;&amp;" RefType="out" />
        <Parameter Name="dest2" Type="System.Numerics.Vector&lt;System.UInt16&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="dest1">To be added.</param>
        <param name="dest2">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Widen">
      <MemberSignature Language="C#" Value="public static void Widen (System.Numerics.Vector&lt;short&gt; source, out System.Numerics.Vector&lt;int&gt; dest1, out System.Numerics.Vector&lt;int&gt; dest2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Widen(valuetype System.Numerics.Vector`1&lt;int16&gt; source, [out] valuetype System.Numerics.Vector`1&lt;int32&gt;&amp; dest1, [out] valuetype System.Numerics.Vector`1&lt;int32&gt;&amp; dest2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int32}@,System.Numerics.Vector{System.Int32}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Widen (source As Vector(Of Short), ByRef dest1 As Vector(Of Integer), ByRef dest2 As Vector(Of Integer))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Widen(System::Numerics::Vector&lt;short&gt; source, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;int&gt; % dest1, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;int&gt; % dest2);" />
      <MemberSignature Language="F#" Value="static member Widen : System.Numerics.Vector&lt;int16&gt; *  *  -&gt; unit" Usage="System.Numerics.Vector.Widen (source, dest1, dest2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Numerics.Vector&lt;System.Int16&gt;" />
        <Parameter Name="dest1" Type="System.Numerics.Vector&lt;System.Int32&gt;&amp;" RefType="out" />
        <Parameter Name="dest2" Type="System.Numerics.Vector&lt;System.Int32&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="dest1">To be added.</param>
        <param name="dest2">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Widen">
      <MemberSignature Language="C#" Value="public static void Widen (System.Numerics.Vector&lt;int&gt; source, out System.Numerics.Vector&lt;long&gt; dest1, out System.Numerics.Vector&lt;long&gt; dest2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Widen(valuetype System.Numerics.Vector`1&lt;int32&gt; source, [out] valuetype System.Numerics.Vector`1&lt;int64&gt;&amp; dest1, [out] valuetype System.Numerics.Vector`1&lt;int64&gt;&amp; dest2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int64}@,System.Numerics.Vector{System.Int64}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Widen (source As Vector(Of Integer), ByRef dest1 As Vector(Of Long), ByRef dest2 As Vector(Of Long))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Widen(System::Numerics::Vector&lt;int&gt; source, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;long&gt; % dest1, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;long&gt; % dest2);" />
      <MemberSignature Language="F#" Value="static member Widen : System.Numerics.Vector&lt;int&gt; *  *  -&gt; unit" Usage="System.Numerics.Vector.Widen (source, dest1, dest2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
        <Parameter Name="dest1" Type="System.Numerics.Vector&lt;System.Int64&gt;&amp;" RefType="out" />
        <Parameter Name="dest2" Type="System.Numerics.Vector&lt;System.Int64&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="dest1">To be added.</param>
        <param name="dest2">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Widen">
      <MemberSignature Language="C#" Value="public static void Widen (System.Numerics.Vector&lt;sbyte&gt; source, out System.Numerics.Vector&lt;short&gt; dest1, out System.Numerics.Vector&lt;short&gt; dest2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Widen(valuetype System.Numerics.Vector`1&lt;int8&gt; source, [out] valuetype System.Numerics.Vector`1&lt;int16&gt;&amp; dest1, [out] valuetype System.Numerics.Vector`1&lt;int16&gt;&amp; dest2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.SByte},System.Numerics.Vector{System.Int16}@,System.Numerics.Vector{System.Int16}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Widen (source As Vector(Of SByte), ByRef dest1 As Vector(Of Short), ByRef dest2 As Vector(Of Short))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Widen(System::Numerics::Vector&lt;System::SByte&gt; source, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;short&gt; % dest1, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;short&gt; % dest2);" />
      <MemberSignature Language="F#" Value="static member Widen : System.Numerics.Vector&lt;sbyte&gt; *  *  -&gt; unit" Usage="System.Numerics.Vector.Widen (source, dest1, dest2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Numerics.Vector&lt;System.SByte&gt;" />
        <Parameter Name="dest1" Type="System.Numerics.Vector&lt;System.Int16&gt;&amp;" RefType="out" />
        <Parameter Name="dest2" Type="System.Numerics.Vector&lt;System.Int16&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="dest1">To be added.</param>
        <param name="dest2">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Widen">
      <MemberSignature Language="C#" Value="public static void Widen (System.Numerics.Vector&lt;float&gt; source, out System.Numerics.Vector&lt;double&gt; dest1, out System.Numerics.Vector&lt;double&gt; dest2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Widen(valuetype System.Numerics.Vector`1&lt;float32&gt; source, [out] valuetype System.Numerics.Vector`1&lt;float64&gt;&amp; dest1, [out] valuetype System.Numerics.Vector`1&lt;float64&gt;&amp; dest2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Double}@,System.Numerics.Vector{System.Double}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Widen (source As Vector(Of Single), ByRef dest1 As Vector(Of Double), ByRef dest2 As Vector(Of Double))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Widen(System::Numerics::Vector&lt;float&gt; source, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;double&gt; % dest1, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;double&gt; % dest2);" />
      <MemberSignature Language="F#" Value="static member Widen : System.Numerics.Vector&lt;single&gt; *  *  -&gt; unit" Usage="System.Numerics.Vector.Widen (source, dest1, dest2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Numerics.Vector&lt;System.Single&gt;" />
        <Parameter Name="dest1" Type="System.Numerics.Vector&lt;System.Double&gt;&amp;" RefType="out" />
        <Parameter Name="dest2" Type="System.Numerics.Vector&lt;System.Double&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="dest1">To be added.</param>
        <param name="dest2">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Widen">
      <MemberSignature Language="C#" Value="public static void Widen (System.Numerics.Vector&lt;ushort&gt; source, out System.Numerics.Vector&lt;uint&gt; dest1, out System.Numerics.Vector&lt;uint&gt; dest2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Widen(valuetype System.Numerics.Vector`1&lt;unsigned int16&gt; source, [out] valuetype System.Numerics.Vector`1&lt;unsigned int32&gt;&amp; dest1, [out] valuetype System.Numerics.Vector`1&lt;unsigned int32&gt;&amp; dest2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt32}@,System.Numerics.Vector{System.UInt32}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Widen (source As Vector(Of UShort), ByRef dest1 As Vector(Of UInteger), ByRef dest2 As Vector(Of UInteger))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Widen(System::Numerics::Vector&lt;System::UInt16&gt; source, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;System::UInt32&gt; % dest1, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;System::UInt32&gt; % dest2);" />
      <MemberSignature Language="F#" Value="static member Widen : System.Numerics.Vector&lt;uint16&gt; *  *  -&gt; unit" Usage="System.Numerics.Vector.Widen (source, dest1, dest2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Numerics.Vector&lt;System.UInt16&gt;" />
        <Parameter Name="dest1" Type="System.Numerics.Vector&lt;System.UInt32&gt;&amp;" RefType="out" />
        <Parameter Name="dest2" Type="System.Numerics.Vector&lt;System.UInt32&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="dest1">To be added.</param>
        <param name="dest2">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Widen">
      <MemberSignature Language="C#" Value="public static void Widen (System.Numerics.Vector&lt;uint&gt; source, out System.Numerics.Vector&lt;ulong&gt; dest1, out System.Numerics.Vector&lt;ulong&gt; dest2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Widen(valuetype System.Numerics.Vector`1&lt;unsigned int32&gt; source, [out] valuetype System.Numerics.Vector`1&lt;unsigned int64&gt;&amp; dest1, [out] valuetype System.Numerics.Vector`1&lt;unsigned int64&gt;&amp; dest2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt64}@,System.Numerics.Vector{System.UInt64}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Widen (source As Vector(Of UInteger), ByRef dest1 As Vector(Of ULong), ByRef dest2 As Vector(Of ULong))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Widen(System::Numerics::Vector&lt;System::UInt32&gt; source, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;System::UInt64&gt; % dest1, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;System::UInt64&gt; % dest2);" />
      <MemberSignature Language="F#" Value="static member Widen : System.Numerics.Vector&lt;uint32&gt; *  *  -&gt; unit" Usage="System.Numerics.Vector.Widen (source, dest1, dest2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Numerics.Vector&lt;System.UInt32&gt;" />
        <Parameter Name="dest1" Type="System.Numerics.Vector&lt;System.UInt64&gt;&amp;" RefType="out" />
        <Parameter Name="dest2" Type="System.Numerics.Vector&lt;System.UInt64&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="dest1">To be added.</param>
        <param name="dest2">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Xor&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Xor&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Xor&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Xor``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Xor(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Xor(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member Xor : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; (requires 'T : struct)" Usage="System.Numerics.Vector.Xor (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b4f1c-434">Der Vektortyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-434">The vector type.</span>
          </span>
          <span data-ttu-id="b4f1c-435">
            <c>T</c> kann alle primitiven numerischen Typen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-435">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="b4f1c-436">Der erste Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-436">The first vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="b4f1c-437">Der zweite Vektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-437">The second vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4f1c-438">Gibt einen neuen Vektor zurück, indem für jedes Elementpaar in zwei Vektoren eine bitweise exklusive Oder-Operation (<see langword="XOr" />) durchgeführt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-438">Returns a new vector by performing a bitwise exclusive Or (<see langword="XOr" />) operation on each pair of elements in two vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4f1c-439">Der Ergebnisvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4f1c-439">The resulting vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
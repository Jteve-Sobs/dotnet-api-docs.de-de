<Type Name="Cursor" FullName="System.Windows.Forms.DataVisualization.Charting.Cursor">
  <Metadata><Meta Name="ms.openlocfilehash" Value="67e4fd12db024bf9957bf29c13b8e0f68113c4a7" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73397581" /></Metadata><TypeSignature Language="C#" Value="public class Cursor : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Cursor extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.DataVisualization.Charting.Cursor" />
  <TypeSignature Language="VB.NET" Value="Public Class Cursor&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Cursor : IDisposable" />
  <TypeSignature Language="F#" Value="type Cursor = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Enabled")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt eine horizontale oder vertikale Linie dar, die eine Position auf einer Achse definiert.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Cursor ist eine horizontale oder vertikale Linie, die eine Position auf einer Achse definiert. Eine Bereichsauswahl ist ein Bereich entlang einer Achse, der durch eine Anfangs-und Endposition definiert wird, und wird mit einer semitransparenten Farbe angezeigt.  
  
 Cursor und Bereichsauswahl werden von der <xref:System.Windows.Forms.DataVisualization.Charting.Cursor>-Klasse implementiert, die als <xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.CursorX%2A>-und <xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.CursorY%2A>-Eigenschaften des <xref:System.Windows.Forms.DataVisualization.Charting.ChartArea>-Objekts verfügbar gemacht wird. Das <xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.CursorX%2A>-Objekt ist für die X-Achse eines Diagramm Bereichs und das <xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.CursorY%2A>-Objekt für die Y-Achse. Die <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.AxisType%2A>-Eigenschaft dieser Objekte bestimmt, ob die zugeordnete Achse primär oder sekundär ist.  
  
 Die einzigen Cursor-und Bereichsauswahl Funktionen, die außerhalb der <xref:System.Windows.Forms.DataVisualization.Charting.Cursor>-Klasse gefunden werden, sind die Ereignisse im Zusammenhang mit der Cursor-und Bereichsauswahl, die sich im Stamm <xref:System.Windows.Forms.DataVisualization.Charting.Chart>-Objekt befinden.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Cursor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.Cursor.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Cursor();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.DataVisualization.Charting.Cursor" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoScroll">
      <MemberSignature Language="C#" Value="public bool AutoScroll { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoScroll" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Cursor.AutoScroll" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoScroll As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoScroll { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoScroll : bool with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Cursor.AutoScroll" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein Flag ab, das bestimmt, ob ein Bildlauf auftritt, wenn eine Bereichsauswahloperation jenseits einer Begrenzung des Diagrammbereichs erweitert wird, oder legt es fest.</summary>
        <value><see langword="true" />, wenn ein automatischer Bildlauf durch die Datenansicht durchgeführt werden kann; andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn in einer Datenansicht nicht alle Datenpunkte in einer gezeichnungs Reihe angezeigt werden und ein Bereich vom Benutzer ausgewählt wird, tritt der automatische Bildlauf der Ansicht auf, wenn diese Eigenschaft `true` und die Maus ist. der Cursor wird daher außerhalb der Diagramm Bereichs Grenze verschoben.  
  
 Ein Bildlauf wird nur entlang einer Achse durchzuführen, wenn weitere Daten verfügbar sind, die angezeigt werden können.  
  
 Eine Datenansicht, in der nicht alle Daten angezeigt werden, ergibt sich in der Regel, wenn der Endbenutzer in eine Teilmenge der Daten zoomt. Sichten und Zoom werden durch die <xref:System.Windows.Forms.DataVisualization.Charting.AxisScaleView>-Klasse implementiert.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AxisType">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.AxisType AxisType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataVisualization.Charting.AxisType AxisType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Cursor.AxisType" />
      <MemberSignature Language="VB.NET" Value="Public Property AxisType As AxisType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataVisualization::Charting::AxisType AxisType { System::Windows::Forms::DataVisualization::Charting::AxisType get(); void set(System::Windows::Forms::DataVisualization::Charting::AxisType value); };" />
      <MemberSignature Language="F#" Value="member this.AxisType : System.Windows.Forms.DataVisualization.Charting.AxisType with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Cursor.AxisType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.AxisType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Typ der Achse ab, an die der Cursor angefügt wird, oder legt ihn fest.</summary>
        <value>Ein <see cref="T:System.Windows.Forms.DataVisualization.Charting.AxisType" />-Enumerationswert, der darstellt, ob die Achse an die primäre oder sekundäre Achse angefügt wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es gibt zwei Sätze von Achsen: Primär und sekundär. Primäre Achsen für alle Diagramme außer den Balkendiagrammen befinden sich am unteren Rand (primäre X-Achse) und linken Rand (primäre Y-Achse) des Diagramm Bereichs.  
  
 Die sekundären Achsen befinden sich am rechten Rand (sekundäre X-Achse) und am oberen Rand (sekundäre Y-Achse) der Diagrammbereich.  
  
> [!NOTE]
>  Wenn alle Reihen, die in einer Diagrammbereich gezeichnet werden, nur eine Achse verwenden (z. b. die primäre x-Achse), hat die Festlegung dieser Eigenschaft auf einen von der Reihe nicht verwendeten achttyp (in diesem Fall die sekundäre x-Achse) keine Auswirkung. der Cursor wird automatisch an die einzige Achse angefügt, die zum Zeichnen der Reihe verwendet wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt die von der <see cref="T:System.Windows.Forms.DataVisualization.Charting.Cursor" />-Klasse verwendeten Ressourcen frei.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.Cursor.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="cursor.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Führt anwendungsspezifische Aufgaben aus, mit denen nicht verwaltete Ressourcen freigegeben oder zurückgesetzt werden.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.Cursor.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="cursor.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" />, um sowohl nicht verwaltete als auch verwaltete Ressourcen freizugeben, <see langword="false" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</param>
        <summary>Gibt nicht verwaltete und optional verwaltete Ressourcen frei.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public double Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Cursor.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Interval { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : double with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Cursor.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Cursorintervall ab oder legt es fest.</summary>
        <value>Das Cursorintervall.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.Interval%2A>-Eigenschaft bestimmt, wie oft und wo ein Cursor von einem Endbenutzer gezeichnet werden kann, und wo die Anfangs-und Endpunkte einer Bereichsauswahl gezeichnet werden können. Ein Wert von 0 (null), der der Standardwert ist, bedeutet, dass ein Cursor oder eine Bereichsauswahl an beliebiger Stelle innerhalb eines Diagramm Bereichs gezeichnet werden kann. Ein Wert ungleich 0 (null) gibt an, dass der Cursor oder die Anfangs-und/oder Endpunkte eines ausgewählten Bereichs nur im angegebenen Intervall gezeichnet werden, wenn er durch eine Benutzerinteraktion festgelegt wird.  
  
 Die Maßeinheit wird durch die <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalType%2A>-Eigenschaft bestimmt.  
  
 Diese Eigenschaft kann auch in Verbindung mit der <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalOffset%2A>-Eigenschaft verwendet werden, die es Ihnen ermöglicht, einen Offset aus dem angegebenen Intervall anzugeben. Um beispielsweise zuzulassen, dass ein Cursor nur jeden Samstag angezeigt wird, muss ein Intervall von einer Woche angegeben werden, zusammen mit einem Intervall Offset von 6 Tagen. In .NET Framework ist Sonntag der erste Tag der Woche.  
  
 Wenn die Cursor Benutzeroberfläche aktiviert ist, indem die <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.IsUserEnabled%2A>-Eigenschaft festgelegt wird und auf die Maus in einer Diagramm Fläche geklickt wird, wird die Position des Cursors auf den nächstgelegenen Speicherort festgelegt.  
  
> [!IMPORTANT]
>  Die <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.Interval%2A>-Eigenschaft hat keine Auswirkung, wenn Sie die Position eines Cursors oder einer Bereichsauswahl Programm gesteuert festlegen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntervalOffset">
      <MemberSignature Language="C#" Value="public double IntervalOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 IntervalOffset" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property IntervalOffset As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double IntervalOffset { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.IntervalOffset : double with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Intervalloffset ab, der beeinflusst, wo der Cursor und die Bereichsauswahl gezeichnet werden können, wenn sie von einem Benutzer festgelegt werden, oder legt ihn fest.</summary>
        <value>Der Offset vom Intervall. Der Standardwert ist 0 (null). Dies entspricht keinen Einschränkungen. Negative Werte sind zulässig.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalOffset%2A>-Eigenschaft bestimmt den Intervall Offset eines Cursors und die Anfangs-und/oder Endpunkte einer Bereichsauswahl. In Verbindung mit der <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.Interval%2A>-Eigenschaft bestimmt diese Eigenschaft, wo ein Cursor und ein Bereich innerhalb einer Diagrammbereich angezeigt werden können. Der Wert 0 (null), der Standardwert, bedeutet, dass kein Offset vorhanden ist.  
  
 Die Maßeinheit wird durch die <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalOffsetType%2A>-Eigenschaft bestimmt.  
  
 Der Offset wirkt sich auf die Speicherorte aus, an denen ein Cursor und die Anfangs-und/oder Endpunkte einer Bereichsauswahl gezeichnet werden können. Um beispielsweise zuzulassen, dass ein Cursor nur jeden Samstag angezeigt wird, muss ein Intervall von einer Woche angegeben werden, zusammen mit einem Intervall Offset von 6 Tagen. In .NET Framework ist Sonntag der erste Tag der Woche.  
  
 Wenn die Cursor Benutzeroberfläche aktiviert ist, indem die <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.IsUserEnabled%2A>-Eigenschaft festgelegt wird und auf die Maus in einer Diagramm Fläche geklickt wird, wird die Position des Cursors auf den nächstgelegenen Speicherort festgelegt.  
  
> [!IMPORTANT]
>  Intervall bezogene Eigenschaften haben keine Auswirkung, wenn eine Bereichsauswahl oder Cursorposition Programm gesteuert festgelegt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntervalOffsetType">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType IntervalOffsetType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType IntervalOffsetType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalOffsetType" />
      <MemberSignature Language="VB.NET" Value="Public Property IntervalOffsetType As DateTimeIntervalType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataVisualization::Charting::DateTimeIntervalType IntervalOffsetType { System::Windows::Forms::DataVisualization::Charting::DateTimeIntervalType get(); void set(System::Windows::Forms::DataVisualization::Charting::DateTimeIntervalType value); };" />
      <MemberSignature Language="F#" Value="member this.IntervalOffsetType : System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalOffsetType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Intervalloffsettyp eines Cursors und ausgewählten Bereichs für eine Achse ab oder legt ihn fest.</summary>
        <value>Ein <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType" />-Enumerationswert, der die Maßeinheit für den Intervalloffset bestimmt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalOffsetType%2A>-Eigenschaft bestimmt den Typ des Intervall Offsets, der mit der <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalOffset%2A>-Eigenschaft angegeben wird.  
  
 Wenn die <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalOffsetType%2A>-Eigenschaft auf <xref:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Auto> festgelegt ist, wird die Eigenschaften Einstellung <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalType%2A> verwendet.  
  
> [!NOTE]
>  Intervall bezogene Eigenschaften haben keine Auswirkung, wenn eine Bereichsauswahl oder Cursorposition Programm gesteuert festgelegt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntervalType">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType IntervalType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType IntervalType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalType" />
      <MemberSignature Language="VB.NET" Value="Public Property IntervalType As DateTimeIntervalType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataVisualization::Charting::DateTimeIntervalType IntervalType { System::Windows::Forms::DataVisualization::Charting::DateTimeIntervalType get(); void set(System::Windows::Forms::DataVisualization::Charting::DateTimeIntervalType value); };" />
      <MemberSignature Language="F#" Value="member this.IntervalType : System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Intervalltyp des Cursors und ausgewählten Bereichs einer Achse ab oder legt ihn fest.</summary>
        <value>Der Intervalltyp des Cursors und ausgewählten Bereichs einer Achse.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalType%2A>-Eigenschaft bestimmt den Typ des Intervalls, das mit der <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.Interval%2A>-Eigenschaft angegeben wird.  
  
 Wenn der Intervalltyp <xref:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Auto> ist, wird die Maßeinheit für das Intervall als `double` behandelt. Dies entspricht einem Tag, wenn <xref:System.DateTime>-Werte angegeben werden.  
  
> [!NOTE]
>  Intervall bezogene Eigenschaften haben keine Auswirkung, wenn eine Bereichsauswahl oder Cursorposition Programm gesteuert festgelegt wird.  
  
 Wenn der Achsen Intervalltyp eine Uhrzeit darstellt, z. b. Stunden, Minuten usw., um die Zoomfunktion ordnungsgemäß zu aktivieren, muss die <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalType%2A> auch auf einen Uhrzeitwert festgelegt werden. Wenn z. b. ChartArea1. AxisX. IntervalType in Stunden ausgedrückt wird, kann ChartArea1. Cursor Type. IntervalType auf Minutes festgelegt werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUserEnabled">
      <MemberSignature Language="C#" Value="public bool IsUserEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUserEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Cursor.IsUserEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsUserEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUserEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsUserEnabled : bool with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Cursor.IsUserEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein Flag ab, das die Cursorbenutzeroberfläche aktiviert oder deaktiviert, oder legt es fest.</summary>
        <value><see langword="true" />, wenn die Cursorbenutzeroberfläche aktiviert ist, andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUserSelectionEnabled">
      <MemberSignature Language="C#" Value="public bool IsUserSelectionEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUserSelectionEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Cursor.IsUserSelectionEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsUserSelectionEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUserSelectionEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsUserSelectionEnabled : bool with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Cursor.IsUserSelectionEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein Flag ab, das die Benutzeroberfläche für die Bereichsauswahl aktiviert oder deaktiviert, oder legt es fest.</summary>
        <value><see langword="true" />, wenn die Benutzeroberfläche für die Bereichsauswahl aktiviert ist, andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color LineColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color LineColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Cursor.LineColor" />
      <MemberSignature Language="VB.NET" Value="Public Property LineColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color LineColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.LineColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Cursor.LineColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "Red")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.ColorConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Cursorlinienfarbe ab oder legt diese fest.</summary>
        <value>Die Linienfarbe des Cursors. Der Standardwert ist <see cref="P:System.Drawing.Color.Red" />sein.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineDashStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.ChartDashStyle LineDashStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataVisualization.Charting.ChartDashStyle LineDashStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Cursor.LineDashStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property LineDashStyle As ChartDashStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataVisualization::Charting::ChartDashStyle LineDashStyle { System::Windows::Forms::DataVisualization::Charting::ChartDashStyle get(); void set(System::Windows::Forms::DataVisualization::Charting::ChartDashStyle value); };" />
      <MemberSignature Language="F#" Value="member this.LineDashStyle : System.Windows.Forms.DataVisualization.Charting.ChartDashStyle with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Cursor.LineDashStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.ChartDashStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Stil der Cursorlinie ab oder legt diesen fest.</summary>
        <value>Das Format der Cursorlinie.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineWidth">
      <MemberSignature Language="C#" Value="public int LineWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LineWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Cursor.LineWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property LineWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LineWidth { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.LineWidth : int with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Cursor.LineWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Linienstärke in Pixeln eines Cursors ab oder legt diese fest.</summary>
        <value>Die Breite der Linie in Pixeln. Der Standardwert ist 1 (eins).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Eigenschaft, um die Linienbreite eines Cursors in Pixel anzugeben.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public double Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Position" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Cursor.Position" />
      <MemberSignature Language="VB.NET" Value="Public Property Position As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Position { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Position : double with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Cursor.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(NaN)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ParenthesizePropertyName(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.DataVisualization.Charting.DoubleDateNanValueConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Position eines Cursors ab oder legt diese fest.</summary>
        <value>Die Position des Cursors.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft kann verwendet werden, um die Position eines Cursors zu erhalten und die Cursorposition Programm gesteuert festzulegen.  
  
 Die Position wird als Wert der Achse gemessen, zu der der Cursor gehört, der durch die <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.AxisType%2A>-Eigenschaft bestimmt wird. Wenn der Cursor z. b. zur primären X-Achse gehört, führt das Festlegen dieser Eigenschaft auf den Wert 1. Januar 2000 dazu, dass der X-Achsen Cursor an der 1. Januar 2000-Position entlang der Achse gezeichnet wird. Wenn dieser Achsen Wert nicht vorhanden ist, wird der Cursor nicht angezeigt.  
  
 Beachten Sie, dass die Eigenschaften "<xref:System.Windows.Forms.DataVisualization.Charting.Cursor.Interval%2A>" und "<xref:System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalOffset%2A>" keine Auswirkung haben, wenn Sie diese Eigenschaft festlegen. Das heißt, der Cursor wird an dieser angegebenen Position angezeigt.  
  
 Wenn diese Eigenschaft festgelegt wird, werden keine <xref:System.Windows.Forms.DataVisualization.Charting.Chart.CursorPositionChanged>-oder <xref:System.Windows.Forms.DataVisualization.Charting.Chart.CursorPositionChanging>-Ereignisse erhoben.  
  
 Alternativ können die Methoden <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SetCursorPosition%2A> und <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SetCursorPixelPosition%2A> verwendet werden, um den Cursor festzulegen.  
  
 Um einen Cursor Programm gesteuert zu entfernen, verwenden Sie diese Eigenschaft, um die Position des Cursors auf <xref:System.Double.NaN> festzulegen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color SelectionColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color SelectionColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionColor" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color SelectionColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "LightGray")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.ColorConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine semitransparente Farbe ab, die einen Datenbereich hervorhebt, oder legt sie fest.</summary>
        <value>Die Farbe des markierten Bereichs. Der Standardwert ist <see cref="P:System.Drawing.Color.LightGray" /> mit einem Alphawert von 120.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft bestimmt die Farbe der Bereichsauswahl und kann auf einen beliebigen gültigen ARGB (Alpha, rot, grün, blau)-Wert festgelegt werden. Wenn ein Alpha-Wert, der die Transparenz Ebene bestimmt, nicht bereitgestellt wird, wird ein standardalphawert von 120 verwendet.  
  
 Die ausgewählte Farbe kann für die X-und Y-Achsen Cursor festgelegt werden, die mit den Eigenschaften <xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.CursorX%2A> und <xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.CursorY%2A> des Objekts <xref:System.Windows.Forms.DataVisualization.Charting.ChartArea> implementiert werden. Wenn ein Bereich nur auf der x-Achse ausgewählt ist, wird der <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionColor%2A>-Wert für den Cursor der x-Achse verwendet. Wenn ein Bereich nur auf der y-Achse ausgewählt ist, wird der <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionColor%2A>-Wert für den y-Achsen Cursor verwendet. Wenn ein Bereich entlang beider Achsen ausgewählt ist, wird der <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionColor%2A>-Wert für den Y-Achsen-Cursor auch für die ausgewählte Farbe verwendet.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionEnd">
      <MemberSignature Language="C#" Value="public double SelectionEnd { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 SelectionEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionEnd" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionEnd As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double SelectionEnd { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionEnd : double with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(NaN)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.DataVisualization.Charting.DoubleDateNanValueConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Endposition einer Bereichsauswahl ab oder legt diese fest.</summary>
        <value>Die Endposition der Bereichsauswahl.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Benutzer kann einen Bereich innerhalb einer Diagramm Fläche auswählen, indem er mit der linken Maustaste klickt und dann die Maus zieht. Beachten Sie, dass die <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.IsUserSelectionEnabled%2A>-Eigenschaft ebenfalls auf `true` festgelegt werden muss. Außerdem kann eine Bereichsauswahl Programm gesteuert entweder mithilfe der Eigenschaften <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionEnd%2A> und <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionStart%2A> oder der <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SetSelectionPosition%2A>-oder <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SetSelectionPixelPosition%2A>-Methode festgelegt werden.  
  
 Die Endposition einer Bereichsauswahl wird als Wert der Achse berechnet, zu der der Cursor gehört. Wenn der Cursor z. b. zur primären x-Achse gehört und Sie die <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionEnd%2A>-Eigenschaft auf einen Wert von 31. Dezember 2000 festlegen, wird das Ende des ausgewählten Bereichs am 31. Dezember 2000 auf der primären x-Achse angezeigt.  
  
 Um eine Bereichsauswahl Programm gesteuert zu entfernen, legen Sie den Anfangs-und Endpunkt des Bereichs auf <xref:System.Double.NaN> fest, indem Sie die Eigenschaften <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionEnd%2A> und <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionStart%2A> verwenden, oder verwenden Sie die <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SetSelectionPosition%2A>-Methode.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionStart">
      <MemberSignature Language="C#" Value="public double SelectionStart { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 SelectionStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionStart" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionStart As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double SelectionStart { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionStart : double with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(NaN)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.DataVisualization.Charting.DoubleDateNanValueConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anfangsposition des ausgewählten Bereichs eines Cursors ab oder legt sie fest.</summary>
        <value>Die Anfangsposition des ausgewählten Bereichs eines Cursors.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Benutzer kann einen Bereich auswählen, indem er mit der linken Maustaste klickt und die Cursorposition durchziehen der Maus verschiebt. Beachten Sie, dass die <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.IsUserSelectionEnabled%2A>-Eigenschaft ebenfalls auf `true` festgelegt werden muss. Außerdem kann eine Bereichsauswahl Programm gesteuert entweder mithilfe der Eigenschaften <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionEnd%2A> und <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionStart%2A> oder der <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SetSelectionPosition%2A>-oder <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SetSelectionPixelPosition%2A>-Methode festgelegt werden.  
  
 Die Anfangsposition einer Bereichsauswahl wird als Wert der Achse berechnet, zu der der Cursor gehört. Wenn der Cursor z. b. zur primären x-Achse gehört und Sie die <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionStart%2A>-Eigenschaft auf den Wert 1. Januar 2000 festlegen, wird der Anfang des ausgewählten Bereichs am 1. Januar 2000 auf der primären x-Achse angezeigt.  
  
 Um eine Bereichsauswahl Programm gesteuert zu entfernen, legen Sie den Anfangs-und Endpunkt des Bereichs auf <xref:System.Double.NaN> fest, indem Sie die Eigenschaften <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionEnd%2A> und <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionStart%2A> verwenden, oder verwenden Sie die <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SetSelectionPosition%2A>-Methode.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCursorPixelPosition">
      <MemberSignature Language="C#" Value="public void SetCursorPixelPosition (System.Drawing.PointF point, bool roundToBoundary);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCursorPixelPosition(valuetype System.Drawing.PointF point, bool roundToBoundary) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.Cursor.SetCursorPixelPosition(System.Drawing.PointF,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCursorPixelPosition (point As PointF, roundToBoundary As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCursorPixelPosition(System::Drawing::PointF point, bool roundToBoundary);" />
      <MemberSignature Language="F#" Value="member this.SetCursorPixelPosition : System.Drawing.PointF * bool -&gt; unit" Usage="cursor.SetCursorPixelPosition (point, roundToBoundary)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" />
        <Parameter Name="roundToBoundary" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="point">Eine <see cref="T:System.Drawing.PointF" />-Struktur, die angibt, wo der Cursor gezeichnet wird.</param>
        <param name="roundToBoundary">Bei <see langword="true" /> wird der Cursor entlang der nächsten Diagrammbereichsbegrenzung gezeichnet, wenn die angegebene Position nicht innerhalb eines <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" />-Objekts liegt.</param>
        <summary>Zeigt einen Cursor an der angegebenen Position an. Angegeben in Pixel.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCursorPosition">
      <MemberSignature Language="C#" Value="public void SetCursorPosition (double newPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCursorPosition(float64 newPosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.Cursor.SetCursorPosition(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCursorPosition (newPosition As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCursorPosition(double newPosition);" />
      <MemberSignature Language="F#" Value="member this.SetCursorPosition : double -&gt; unit" Usage="cursor.SetCursorPosition newPosition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newPosition" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="newPosition">Die neue Position des Cursors. Gemessen als Wert entlang der relevanten Achse.</param>
        <summary>Legt die Position eines Cursors in einem Diagrammbereich am angegebenen Achsenwert fest.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSelectionPixelPosition">
      <MemberSignature Language="C#" Value="public void SetSelectionPixelPosition (System.Drawing.PointF startPoint, System.Drawing.PointF endPoint, bool roundToBoundary);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSelectionPixelPosition(valuetype System.Drawing.PointF startPoint, valuetype System.Drawing.PointF endPoint, bool roundToBoundary) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.Cursor.SetSelectionPixelPosition(System.Drawing.PointF,System.Drawing.PointF,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSelectionPixelPosition (startPoint As PointF, endPoint As PointF, roundToBoundary As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSelectionPixelPosition(System::Drawing::PointF startPoint, System::Drawing::PointF endPoint, bool roundToBoundary);" />
      <MemberSignature Language="F#" Value="member this.SetSelectionPixelPosition : System.Drawing.PointF * System.Drawing.PointF * bool -&gt; unit" Usage="cursor.SetSelectionPixelPosition (startPoint, endPoint, roundToBoundary)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startPoint" Type="System.Drawing.PointF" />
        <Parameter Name="endPoint" Type="System.Drawing.PointF" />
        <Parameter Name="roundToBoundary" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="startPoint">Eine <see cref="T:System.Drawing.PointF" />-Struktur, die angibt, wo die Bereichsauswahl beginnt.</param>
        <param name="endPoint">Eine <see cref="T:System.Drawing.PointF" />-Struktur, die angibt, wo die Bereichsauswahl endet.</param>
        <param name="roundToBoundary">Bei <see langword="true" /> werden die Start- und Endpunkte auf die nächste Diagrammbereichsbegrenzung gerundet, wenn die angegebenen Positionen nicht innerhalb eines <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" />-Objekts liegen.</param>
        <summary>Legt die Start- und Endpositionen einer Bereichsauswahl fest.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSelectionPosition">
      <MemberSignature Language="C#" Value="public void SetSelectionPosition (double newStart, double newEnd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSelectionPosition(float64 newStart, float64 newEnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.Cursor.SetSelectionPosition(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSelectionPosition (newStart As Double, newEnd As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSelectionPosition(double newStart, double newEnd);" />
      <MemberSignature Language="F#" Value="member this.SetSelectionPosition : double * double -&gt; unit" Usage="cursor.SetSelectionPosition (newStart, newEnd)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newStart" Type="System.Double" />
        <Parameter Name="newEnd" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="newStart">Die neue Anfangsposition der Bereichsauswahl. Gemessen als Wert entlang der relevanten Achse.</param>
        <param name="newEnd">Die neue Endposition der Bereichsauswahl. Gemessen als Wert entlang der relevanten Achse.</param>
        <summary>Legt die Position eines ausgewählten Bereichs in einem Diagrammbereich an den angegebenen Achsenwerten fest.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

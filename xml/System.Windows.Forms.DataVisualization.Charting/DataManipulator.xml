<Type Name="DataManipulator" FullName="System.Windows.Forms.DataVisualization.Charting.DataManipulator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b2701d9e9cb557f7159250802364512835851bc8" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86710944" /></Metadata><TypeSignature Language="C#" Value="public class DataManipulator : System.Windows.Forms.DataVisualization.Charting.DataFormula" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataManipulator extends System.Windows.Forms.DataVisualization.Charting.DataFormula" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.DataVisualization.Charting.DataManipulator" />
  <TypeSignature Language="VB.NET" Value="Public Class DataManipulator&#xA;Inherits DataFormula" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataManipulator : System::Windows::Forms::DataVisualization::Charting::DataFormula" />
  <TypeSignature Language="F#" Value="type DataManipulator = class&#xA;    inherit DataFormula" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.DataVisualization.Charting.DataFormula</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt eine Methode bereit, die zur Laufzeit Datenbearbeitungsvorgänge ausführt. Diese Klasse wird von der <see cref="P:System.Windows.Forms.DataVisualization.Charting.Chart.DataManipulator" />-Eigenschaft des <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" />-Stammobjekts verfügbar gemacht.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataManipulator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataManipulator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataManipulator" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExportSeriesValues">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Exportiert die Daten aus einer Reihe oder aus der Sammlung der Reihen in das <see cref="T:System.Data.DataSet" />-Objekt.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExportSeriesValues">
      <MemberSignature Language="C#" Value="public System.Data.DataSet ExportSeriesValues ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataSet ExportSeriesValues() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.ExportSeriesValues" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportSeriesValues () As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataSet ^ ExportSeriesValues();" />
      <MemberSignature Language="F#" Value="member this.ExportSeriesValues : unit -&gt; System.Data.DataSet" Usage="dataManipulator.ExportSeriesValues " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Exportiert die Daten für jede in der <see cref="T:System.Windows.Forms.DataVisualization.Charting.SeriesCollection" /> gespeicherte Reihe in das <see cref="T:System.Data.DataSet" />-Objekt.</summary>
        <returns>Ein <see cref="T:System.Data.DataSet" />-Objekt, das die Daten der exportierten Reihen enthält.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportSeriesValues">
      <MemberSignature Language="C#" Value="public System.Data.DataSet ExportSeriesValues (string seriesNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataSet ExportSeriesValues(string seriesNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.ExportSeriesValues(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportSeriesValues (seriesNames As String) As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataSet ^ ExportSeriesValues(System::String ^ seriesNames);" />
      <MemberSignature Language="F#" Value="member this.ExportSeriesValues : string -&gt; System.Data.DataSet" Usage="dataManipulator.ExportSeriesValues seriesNames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seriesNames" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="seriesNames">Eine durch Trennzeichen getrennte Liste von Namen der zu exportierenden <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />.</param>
        <summary>Exportiert die Daten aus einer oder mehreren Reihen in das <see cref="T:System.Data.DataSet" />-Objekt.</summary>
        <returns>Ein <see cref="T:System.Data.DataSet" />-Objekt, das die Daten der exportierten Reihen enthält.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportSeriesValues">
      <MemberSignature Language="C#" Value="public System.Data.DataSet ExportSeriesValues (System.Windows.Forms.DataVisualization.Charting.Series series);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataSet ExportSeriesValues(class System.Windows.Forms.DataVisualization.Charting.Series series) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.ExportSeriesValues(System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportSeriesValues (series As Series) As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataSet ^ ExportSeriesValues(System::Windows::Forms::DataVisualization::Charting::Series ^ series);" />
      <MemberSignature Language="F#" Value="member this.ExportSeriesValues : System.Windows.Forms.DataVisualization.Charting.Series -&gt; System.Data.DataSet" Usage="dataManipulator.ExportSeriesValues series" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="series" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="series">Die zu exportierende Reihe.</param>
        <summary>Exportiert die Daten aus der angegebenen Reihe in das <see cref="T:System.Data.DataSet" />-Objekt.</summary>
        <returns>Ein <see cref="T:System.Data.DataSet" />-Objekt, das die Daten der exportierten Reihen enthält.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Filter">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Filtert eine oder mehrere Reihen oder filtert den Datenpunkt in einer Reihe oder einer Sammlung von Reihen durch Anwenden einer Standardfilterregel oder einer benutzerdefinierten Filterregel.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public void Filter (System.Windows.Forms.DataVisualization.Charting.IDataPointFilter filterInterface, string inputSeriesNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Filter(class System.Windows.Forms.DataVisualization.Charting.IDataPointFilter filterInterface, string inputSeriesNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.IDataPointFilter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Filter (filterInterface As IDataPointFilter, inputSeriesNames As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Filter(System::Windows::Forms::DataVisualization::Charting::IDataPointFilter ^ filterInterface, System::String ^ inputSeriesNames);" />
      <MemberSignature Language="F#" Value="member this.Filter : System.Windows.Forms.DataVisualization.Charting.IDataPointFilter * string -&gt; unit" Usage="dataManipulator.Filter (filterInterface, inputSeriesNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filterInterface" Type="System.Windows.Forms.DataVisualization.Charting.IDataPointFilter" />
        <Parameter Name="inputSeriesNames" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filterInterface">Ein Objekt, das die <see cref="T:System.Windows.Forms.DataVisualization.Charting.IDataPointFilter" />-Schnittstelle implementiert.</param>
        <param name="inputSeriesNames">Eine durch Trennzeichen getrennte Liste von Namen der zu filternden <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />.</param>
        <summary>Führt eine benutzerdefinierte Filterung der Datenpunkte in einer oder mehreren Reihen auf Grundlage der Punkte in der ersten Reihe aus. In den gefilterten <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekten werden auch die geänderten Daten gespeichert.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public void Filter (System.Windows.Forms.DataVisualization.Charting.IDataPointFilter filterInterface, System.Windows.Forms.DataVisualization.Charting.Series inputSeries);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Filter(class System.Windows.Forms.DataVisualization.Charting.IDataPointFilter filterInterface, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.IDataPointFilter,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Filter (filterInterface As IDataPointFilter, inputSeries As Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Filter(System::Windows::Forms::DataVisualization::Charting::IDataPointFilter ^ filterInterface, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries);" />
      <MemberSignature Language="F#" Value="member this.Filter : System.Windows.Forms.DataVisualization.Charting.IDataPointFilter * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.Filter (filterInterface, inputSeries)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filterInterface" Type="System.Windows.Forms.DataVisualization.Charting.IDataPointFilter" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="filterInterface">Ein Objekt, das die <see cref="T:System.Windows.Forms.DataVisualization.Charting.IDataPointFilter" />-Schnittstelle implementiert.</param>
        <param name="inputSeries">Das <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekt, das gefiltert wird.</param>
        <summary>Führt eine benutzerdefinierte Filterung der Datenpunkte in einer Reihe aus. Im gefilterten <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekt werden auch die geänderten Daten gespeichert.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public void Filter (System.Windows.Forms.DataVisualization.Charting.CompareMethod compareMethod, double compareValue, string inputSeriesNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Filter(valuetype System.Windows.Forms.DataVisualization.Charting.CompareMethod compareMethod, float64 compareValue, string inputSeriesNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.CompareMethod,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Filter (compareMethod As CompareMethod, compareValue As Double, inputSeriesNames As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Filter(System::Windows::Forms::DataVisualization::Charting::CompareMethod compareMethod, double compareValue, System::String ^ inputSeriesNames);" />
      <MemberSignature Language="F#" Value="member this.Filter : System.Windows.Forms.DataVisualization.Charting.CompareMethod * double * string -&gt; unit" Usage="dataManipulator.Filter (compareMethod, compareValue, inputSeriesNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compareMethod" Type="System.Windows.Forms.DataVisualization.Charting.CompareMethod" />
        <Parameter Name="compareValue" Type="System.Double" />
        <Parameter Name="inputSeriesNames" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="compareMethod">Ein <see cref="T:System.Windows.Forms.DataVisualization.Charting.CompareMethod" />-Enumerationswert, der die Vergleichsmethode für die Filterregel bestimmt. Kann <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.LessThan" />, <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.EqualTo" /> usw. sein.</param>
        <param name="compareValue">Der Wertteil der Filterregel, die auf die ersten y-Werte der Datenpunkte angewendet wird. In der Filterregel „&lt;6“ ist der Wert beispielsweise gleich 6.</param>
        <param name="inputSeriesNames">Eine durch Trennzeichen getrennte Liste von Namen der zu filternden <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />.</param>
        <summary>Filtert eine oder mehrere Reihen, indem auf den ersten y-Wert der Datenpunkte in der ersten Reihe eine Filterregel angewendet wird. Die gefilterten <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekte werden zum Speichern der geänderten Daten verwendet.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public void Filter (System.Windows.Forms.DataVisualization.Charting.CompareMethod compareMethod, double compareValue, System.Windows.Forms.DataVisualization.Charting.Series inputSeries);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Filter(valuetype System.Windows.Forms.DataVisualization.Charting.CompareMethod compareMethod, float64 compareValue, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.CompareMethod,System.Double,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Filter (compareMethod As CompareMethod, compareValue As Double, inputSeries As Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Filter(System::Windows::Forms::DataVisualization::Charting::CompareMethod compareMethod, double compareValue, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries);" />
      <MemberSignature Language="F#" Value="member this.Filter : System.Windows.Forms.DataVisualization.Charting.CompareMethod * double * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.Filter (compareMethod, compareValue, inputSeries)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compareMethod" Type="System.Windows.Forms.DataVisualization.Charting.CompareMethod" />
        <Parameter Name="compareValue" Type="System.Double" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="compareMethod">Ein <see cref="T:System.Windows.Forms.DataVisualization.Charting.CompareMethod" />-Enumerationswert, der die Vergleichsmethode für die Filterregel bestimmt. Kann <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.LessThan" />, <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.EqualTo" /> usw. sein.</param>
        <param name="compareValue">Der Wertteil der Filterregel, die auf die ersten y-Werte der Datenpunkte angewendet wird. In der Filterregel „&lt;6“ ist der Wert beispielsweise gleich 6.</param>
        <param name="inputSeries">Das <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekt, das gefiltert wird.</param>
        <summary>Filtert die Datenpunkte in einer Reihe, indem auf den ersten y-Wert jedes Datenpunkts eine Filterregel angewendet wird. Im gefilterten <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekt werden auch die geänderten Daten gespeichert.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public void Filter (System.Windows.Forms.DataVisualization.Charting.DateRangeType dateRange, string rangeElements, string inputSeriesNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Filter(valuetype System.Windows.Forms.DataVisualization.Charting.DateRangeType dateRange, string rangeElements, string inputSeriesNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.DateRangeType,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Filter (dateRange As DateRangeType, rangeElements As String, inputSeriesNames As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Filter(System::Windows::Forms::DataVisualization::Charting::DateRangeType dateRange, System::String ^ rangeElements, System::String ^ inputSeriesNames);" />
      <MemberSignature Language="F#" Value="member this.Filter : System.Windows.Forms.DataVisualization.Charting.DateRangeType * string * string -&gt; unit" Usage="dataManipulator.Filter (dateRange, rangeElements, inputSeriesNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateRange" Type="System.Windows.Forms.DataVisualization.Charting.DateRangeType" />
        <Parameter Name="rangeElements" Type="System.String" />
        <Parameter Name="inputSeriesNames" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateRange">Ein <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateRangeType" />-Enumerationswert, der ein Datums-/Uhrzeitintervall darstellt, z. B. Tage der Woche, Tage des Monats usw. Bestimmt den Bereich, in dem die angegebenen Elemente gefiltert werden.</param>
        <param name="rangeElements">Gibt die zu filternden Elemente in dem vom <paramref name="dateRange" />-Parameter festgelegten Datums-/Uhrzeitbereich an. Kann ein einzelner Wert sein, z. B. "7", mehrere durch Trennzeichen getrennte Werte, z. B. "5,6", ein Bereich von Werten, z. B. "9-11", oder jede Variante davon, z. B. "5,6,9-11".</param>
        <param name="inputSeriesNames">Eine durch Trennzeichen getrennte Liste von Namen der zu filternden <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />.</param>
        <summary>Filtert die Datenpunkte einer oder mehrerer Reihen, indem die angegebenen Datenpunkte entfernt oder für die angegebenen Datums-/Uhrzeitbereiche als leer markiert werden. Die gefilterten <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekte werden zum Speichern der geänderten Daten verwendet.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public void Filter (System.Windows.Forms.DataVisualization.Charting.DateRangeType dateRange, string rangeElements, System.Windows.Forms.DataVisualization.Charting.Series inputSeries);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Filter(valuetype System.Windows.Forms.DataVisualization.Charting.DateRangeType dateRange, string rangeElements, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.DateRangeType,System.String,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Filter (dateRange As DateRangeType, rangeElements As String, inputSeries As Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Filter(System::Windows::Forms::DataVisualization::Charting::DateRangeType dateRange, System::String ^ rangeElements, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries);" />
      <MemberSignature Language="F#" Value="member this.Filter : System.Windows.Forms.DataVisualization.Charting.DateRangeType * string * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.Filter (dateRange, rangeElements, inputSeries)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateRange" Type="System.Windows.Forms.DataVisualization.Charting.DateRangeType" />
        <Parameter Name="rangeElements" Type="System.String" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="dateRange">Ein <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateRangeType" />-Enumerationswert, der ein Datums-/Uhrzeitintervall darstellt, z. B. Tage der Woche, Tage des Monats usw. Bestimmt den Bereich, in dem die angegebenen Elemente gefiltert werden.</param>
        <param name="rangeElements">Gibt die zu filternden Elemente in dem vom <paramref name="dateRange" />-Parameter festgelegten Datums-/Uhrzeitbereich an. Kann ein einzelner Wert sein, z. B. "7", mehrere durch Trennzeichen getrennte Werte, z. B. "5,6", ein Bereich von Werten, z. B. "9-11", oder jede Variante davon, z. B. "5,6,9-11".</param>
        <param name="inputSeries">Das zu filternde <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekt.</param>
        <summary>Filtert die Datenpunkte in einer Reihe, indem die angegebenen Punkte entfernt oder für die angegebenen Datums-/Uhrzeitbereiche als leer markiert werden. Das gefilterte <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekt wird zum Speichern der geänderten Daten verwendet.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public void Filter (System.Windows.Forms.DataVisualization.Charting.IDataPointFilter filterInterface, string inputSeriesNames, string outputSeriesNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Filter(class System.Windows.Forms.DataVisualization.Charting.IDataPointFilter filterInterface, string inputSeriesNames, string outputSeriesNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.IDataPointFilter,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Filter (filterInterface As IDataPointFilter, inputSeriesNames As String, outputSeriesNames As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Filter(System::Windows::Forms::DataVisualization::Charting::IDataPointFilter ^ filterInterface, System::String ^ inputSeriesNames, System::String ^ outputSeriesNames);" />
      <MemberSignature Language="F#" Value="member this.Filter : System.Windows.Forms.DataVisualization.Charting.IDataPointFilter * string * string -&gt; unit" Usage="dataManipulator.Filter (filterInterface, inputSeriesNames, outputSeriesNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filterInterface" Type="System.Windows.Forms.DataVisualization.Charting.IDataPointFilter" />
        <Parameter Name="inputSeriesNames" Type="System.String" />
        <Parameter Name="outputSeriesNames" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filterInterface">Ein Objekt, das die <see cref="T:System.Windows.Forms.DataVisualization.Charting.IDataPointFilter" />-Schnittstelle implementiert.</param>
        <param name="inputSeriesNames">Eine durch Trennzeichen getrennte Liste von Namen der zu filternden <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />.</param>
        <param name="outputSeriesNames">Eine durch Trennzeichen getrennte Liste von Namen der <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />, in denen die gefilterten Daten gespeichert werden. Stellen Sie sicher, dass die Anzahl der Ausgabereihen mit der Anzahl der Eingabereihen übereinstimmt, andernfalls wird eine Ausnahme ausgelöst.</param>
        <summary>Führt eine benutzerdefinierte Filterung der Datenpunkte in einer oder mehreren Reihen auf Grundlage der Punkte in der ersten Reihe aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public void Filter (System.Windows.Forms.DataVisualization.Charting.IDataPointFilter filterInterface, System.Windows.Forms.DataVisualization.Charting.Series inputSeries, System.Windows.Forms.DataVisualization.Charting.Series outputSeries);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Filter(class System.Windows.Forms.DataVisualization.Charting.IDataPointFilter filterInterface, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries, class System.Windows.Forms.DataVisualization.Charting.Series outputSeries) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.IDataPointFilter,System.Windows.Forms.DataVisualization.Charting.Series,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Filter (filterInterface As IDataPointFilter, inputSeries As Series, outputSeries As Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Filter(System::Windows::Forms::DataVisualization::Charting::IDataPointFilter ^ filterInterface, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries, System::Windows::Forms::DataVisualization::Charting::Series ^ outputSeries);" />
      <MemberSignature Language="F#" Value="member this.Filter : System.Windows.Forms.DataVisualization.Charting.IDataPointFilter * System.Windows.Forms.DataVisualization.Charting.Series * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.Filter (filterInterface, inputSeries, outputSeries)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filterInterface" Type="System.Windows.Forms.DataVisualization.Charting.IDataPointFilter" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
        <Parameter Name="outputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="filterInterface">Ein Objekt, das die <see cref="T:System.Windows.Forms.DataVisualization.Charting.IDataPointFilter" />-Schnittstelle implementiert.</param>
        <param name="inputSeries">Das zu filternde <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekt.</param>
        <param name="outputSeries">Ein <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekt, in dem die gefilterten Daten gespeichert werden. Wenn die Reihe nicht vorhanden ist, wird eine Ausnahme ausgelöst.</param>
        <summary>Führt eine benutzerdefinierte Filterung der Datenpunkte in einer Reihe aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public void Filter (System.Windows.Forms.DataVisualization.Charting.CompareMethod compareMethod, double compareValue, string inputSeriesNames, string outputSeriesNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Filter(valuetype System.Windows.Forms.DataVisualization.Charting.CompareMethod compareMethod, float64 compareValue, string inputSeriesNames, string outputSeriesNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.CompareMethod,System.Double,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Filter (compareMethod As CompareMethod, compareValue As Double, inputSeriesNames As String, outputSeriesNames As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Filter(System::Windows::Forms::DataVisualization::Charting::CompareMethod compareMethod, double compareValue, System::String ^ inputSeriesNames, System::String ^ outputSeriesNames);" />
      <MemberSignature Language="F#" Value="member this.Filter : System.Windows.Forms.DataVisualization.Charting.CompareMethod * double * string * string -&gt; unit" Usage="dataManipulator.Filter (compareMethod, compareValue, inputSeriesNames, outputSeriesNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compareMethod" Type="System.Windows.Forms.DataVisualization.Charting.CompareMethod" />
        <Parameter Name="compareValue" Type="System.Double" />
        <Parameter Name="inputSeriesNames" Type="System.String" />
        <Parameter Name="outputSeriesNames" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="compareMethod">Ein <see cref="T:System.Windows.Forms.DataVisualization.Charting.CompareMethod" />-Enumerationswert, der die Vergleichsmethode für die Filterregel bestimmt. Kann <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.LessThan" />, <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.EqualTo" /> usw. sein.</param>
        <param name="compareValue">Der Wertteil der Filterregel, die auf die ersten y-Werte der Datenpunkte angewendet wird. In der Filterregel „&lt;6“ ist der Wert beispielsweise gleich 6.</param>
        <param name="inputSeriesNames">Eine durch Trennzeichen getrennte Liste von Namen der zu filternden <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />.</param>
        <param name="outputSeriesNames">Eine durch Trennzeichen getrennte Liste von Namen der <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />, in denen die gefilterten Daten gespeichert werden. Die Anzahl der Ausgabereihen muss mit der Anzahl der Eingabereihen übereinstimmen. Andernfalls wird eine Ausnahme ausgelöst.</param>
        <summary>Filtert eine oder mehrere Reihen, indem auf den ersten y-Wert jedes Datenpunkts in der ersten Reihe eine Filterregel angewendet wird.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public void Filter (System.Windows.Forms.DataVisualization.Charting.CompareMethod compareMethod, double compareValue, System.Windows.Forms.DataVisualization.Charting.Series inputSeries, System.Windows.Forms.DataVisualization.Charting.Series outputSeries);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Filter(valuetype System.Windows.Forms.DataVisualization.Charting.CompareMethod compareMethod, float64 compareValue, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries, class System.Windows.Forms.DataVisualization.Charting.Series outputSeries) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.CompareMethod,System.Double,System.Windows.Forms.DataVisualization.Charting.Series,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Filter (compareMethod As CompareMethod, compareValue As Double, inputSeries As Series, outputSeries As Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Filter(System::Windows::Forms::DataVisualization::Charting::CompareMethod compareMethod, double compareValue, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries, System::Windows::Forms::DataVisualization::Charting::Series ^ outputSeries);" />
      <MemberSignature Language="F#" Value="member this.Filter : System.Windows.Forms.DataVisualization.Charting.CompareMethod * double * System.Windows.Forms.DataVisualization.Charting.Series * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.Filter (compareMethod, compareValue, inputSeries, outputSeries)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compareMethod" Type="System.Windows.Forms.DataVisualization.Charting.CompareMethod" />
        <Parameter Name="compareValue" Type="System.Double" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
        <Parameter Name="outputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="compareMethod">Ein <see cref="T:System.Windows.Forms.DataVisualization.Charting.CompareMethod" />-Enumerationswert, der die Vergleichsmethode für die Filterregel bestimmt. Kann <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.LessThan" />, <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.EqualTo" /> usw. sein.</param>
        <param name="compareValue">Der Wertteil der Filterregel, die auf die ersten y-Werte der Datenpunkte angewendet wird. In der Filterregel „&lt;6“ ist der Wert beispielsweise gleich 6.</param>
        <param name="inputSeries">Das zu filternde <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekt.</param>
        <param name="outputSeries">Ein <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekt, in dem die gefilterten Daten gespeichert werden. Wenn die Reihe nicht vorhanden ist, wird eine Ausnahme ausgelöst.</param>
        <summary>Filtert die Datenpunkte in einer Reihe, indem auf den ersten y-Wert jedes Datenpunkts eine Filterregel angewendet wird.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public void Filter (System.Windows.Forms.DataVisualization.Charting.DateRangeType dateRange, string rangeElements, string inputSeriesNames, string outputSeriesNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Filter(valuetype System.Windows.Forms.DataVisualization.Charting.DateRangeType dateRange, string rangeElements, string inputSeriesNames, string outputSeriesNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.DateRangeType,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Filter (dateRange As DateRangeType, rangeElements As String, inputSeriesNames As String, outputSeriesNames As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Filter(System::Windows::Forms::DataVisualization::Charting::DateRangeType dateRange, System::String ^ rangeElements, System::String ^ inputSeriesNames, System::String ^ outputSeriesNames);" />
      <MemberSignature Language="F#" Value="member this.Filter : System.Windows.Forms.DataVisualization.Charting.DateRangeType * string * string * string -&gt; unit" Usage="dataManipulator.Filter (dateRange, rangeElements, inputSeriesNames, outputSeriesNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateRange" Type="System.Windows.Forms.DataVisualization.Charting.DateRangeType" />
        <Parameter Name="rangeElements" Type="System.String" />
        <Parameter Name="inputSeriesNames" Type="System.String" />
        <Parameter Name="outputSeriesNames" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateRange">Ein <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateRangeType" />-Enumerationswert, der ein Datums-/Uhrzeitintervall darstellt, z. B. Tage der Woche, Tage des Monats usw. Bestimmt den Bereich, in dem die angegebenen Elemente gefiltert werden.</param>
        <param name="rangeElements">Gibt die zu filternden Elemente in dem vom <paramref name="dateRange" />-Parameter festgelegten Datums-/Uhrzeitbereich an. Kann ein einzelner Wert sein, z. B. "7", mehrere durch Trennzeichen getrennte Werte, z. B. "5,6", ein Bereich von Werten, z. B. "9-11", oder jede Variante davon, z. B. "5,6,9-11".</param>
        <param name="inputSeriesNames">Eine durch Trennzeichen getrennte Liste von Namen der zu filternden <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />.</param>
        <param name="outputSeriesNames">Eine durch Trennzeichen getrennte Liste von Namen der <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />, in denen die gefilterten Daten gespeichert werden. Stellen Sie sicher, dass die Anzahl der Ausgabereihen mit der Anzahl der Eingabereihen übereinstimmt, andernfalls wird eine Ausnahme ausgelöst.</param>
        <summary>Filtert die Datenpunkte einer oder mehrerer Reihen, indem die angegebenen Datenpunkte entfernt oder für die angegebenen Datums-/Uhrzeitbereiche als leer markiert werden.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public void Filter (System.Windows.Forms.DataVisualization.Charting.DateRangeType dateRange, string rangeElements, System.Windows.Forms.DataVisualization.Charting.Series inputSeries, System.Windows.Forms.DataVisualization.Charting.Series outputSeries);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Filter(valuetype System.Windows.Forms.DataVisualization.Charting.DateRangeType dateRange, string rangeElements, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries, class System.Windows.Forms.DataVisualization.Charting.Series outputSeries) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.DateRangeType,System.String,System.Windows.Forms.DataVisualization.Charting.Series,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Filter (dateRange As DateRangeType, rangeElements As String, inputSeries As Series, outputSeries As Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Filter(System::Windows::Forms::DataVisualization::Charting::DateRangeType dateRange, System::String ^ rangeElements, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries, System::Windows::Forms::DataVisualization::Charting::Series ^ outputSeries);" />
      <MemberSignature Language="F#" Value="member this.Filter : System.Windows.Forms.DataVisualization.Charting.DateRangeType * string * System.Windows.Forms.DataVisualization.Charting.Series * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.Filter (dateRange, rangeElements, inputSeries, outputSeries)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateRange" Type="System.Windows.Forms.DataVisualization.Charting.DateRangeType" />
        <Parameter Name="rangeElements" Type="System.String" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
        <Parameter Name="outputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="dateRange">Ein <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateRangeType" />-Enumerationswert, der ein Datums-/Uhrzeitintervall darstellt, z. B. Tage der Woche, Tage des Monats usw. Bestimmt den Bereich, in dem die angegebenen Elemente gefiltert werden.</param>
        <param name="rangeElements">Gibt die zu filternden Elemente in dem vom <paramref name="dateRange" />-Parameter festgelegten Datums-/Uhrzeitbereich an. Kann ein einzelner Wert sein, z. B. "7", mehrere durch Trennzeichen getrennte Werte, z. B. "5,6", ein Bereich von Werten, z. B. "9-11", oder jede Variante davon, z. B. "5,6,9-11".</param>
        <param name="inputSeries">Das zu filternde <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekt.</param>
        <param name="outputSeries">Ein <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekt, in dem die gefilterten Daten gespeichert werden. Wenn die Reihe nicht vorhanden ist, wird eine Ausnahme ausgelöst.</param>
        <summary>Filtert die Datenpunkte in einer Reihe, indem die angegebenen Punkte entfernt oder für die angegebenen Datums-/Uhrzeitbereiche als leer markiert werden.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public void Filter (System.Windows.Forms.DataVisualization.Charting.CompareMethod compareMethod, double compareValue, string inputSeriesNames, string outputSeriesNames, string usingValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Filter(valuetype System.Windows.Forms.DataVisualization.Charting.CompareMethod compareMethod, float64 compareValue, string inputSeriesNames, string outputSeriesNames, string usingValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.CompareMethod,System.Double,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Filter (compareMethod As CompareMethod, compareValue As Double, inputSeriesNames As String, outputSeriesNames As String, usingValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Filter(System::Windows::Forms::DataVisualization::Charting::CompareMethod compareMethod, double compareValue, System::String ^ inputSeriesNames, System::String ^ outputSeriesNames, System::String ^ usingValue);" />
      <MemberSignature Language="F#" Value="member this.Filter : System.Windows.Forms.DataVisualization.Charting.CompareMethod * double * string * string * string -&gt; unit" Usage="dataManipulator.Filter (compareMethod, compareValue, inputSeriesNames, outputSeriesNames, usingValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compareMethod" Type="System.Windows.Forms.DataVisualization.Charting.CompareMethod" />
        <Parameter Name="compareValue" Type="System.Double" />
        <Parameter Name="inputSeriesNames" Type="System.String" />
        <Parameter Name="outputSeriesNames" Type="System.String" />
        <Parameter Name="usingValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="compareMethod">Ein <see cref="T:System.Windows.Forms.DataVisualization.Charting.CompareMethod" />-Enumerationswert, der die Vergleichsmethode für die Filterregel bestimmt. Kann <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.LessThan" />, <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.EqualTo" /> usw. sein.</param>
        <param name="compareValue">Der Wertteil der Filterregel, die auf die ersten y-Werte der Datenpunkte angewendet wird. In der Filterregel „&lt;6“ ist der Wert beispielsweise gleich 6.</param>
        <param name="inputSeriesNames">Eine durch Trennzeichen getrennte Liste von Namen der zu filternden <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />.</param>
        <param name="outputSeriesNames">Eine durch Trennzeichen getrennte Liste von Namen der <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />, in denen die gefilterten Daten gespeichert werden. Die Anzahl der Ausgabereihen muss gleich der Anzahl der Eingabereihen sein. Andernfalls wird eine Ausnahme ausgelöst.</param>
        <param name="usingValue">Der Datenpunktwert, auf den die Filterregel angewendet wird. Kann X, Y, Y2, Y3 usw. sein.</param>
        <summary>Filtert eine oder mehrere Reihen, indem auf die angegebenen Datenpunktwerte in der ersten Reihe eine Filterregel angewendet wird.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public void Filter (System.Windows.Forms.DataVisualization.Charting.CompareMethod compareMethod, double compareValue, System.Windows.Forms.DataVisualization.Charting.Series inputSeries, System.Windows.Forms.DataVisualization.Charting.Series outputSeries, string usingValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Filter(valuetype System.Windows.Forms.DataVisualization.Charting.CompareMethod compareMethod, float64 compareValue, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries, class System.Windows.Forms.DataVisualization.Charting.Series outputSeries, string usingValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.CompareMethod,System.Double,System.Windows.Forms.DataVisualization.Charting.Series,System.Windows.Forms.DataVisualization.Charting.Series,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Filter (compareMethod As CompareMethod, compareValue As Double, inputSeries As Series, outputSeries As Series, usingValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Filter(System::Windows::Forms::DataVisualization::Charting::CompareMethod compareMethod, double compareValue, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries, System::Windows::Forms::DataVisualization::Charting::Series ^ outputSeries, System::String ^ usingValue);" />
      <MemberSignature Language="F#" Value="member this.Filter : System.Windows.Forms.DataVisualization.Charting.CompareMethod * double * System.Windows.Forms.DataVisualization.Charting.Series * System.Windows.Forms.DataVisualization.Charting.Series * string -&gt; unit" Usage="dataManipulator.Filter (compareMethod, compareValue, inputSeries, outputSeries, usingValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compareMethod" Type="System.Windows.Forms.DataVisualization.Charting.CompareMethod" />
        <Parameter Name="compareValue" Type="System.Double" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
        <Parameter Name="outputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
        <Parameter Name="usingValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="compareMethod">Ein <see cref="T:System.Windows.Forms.DataVisualization.Charting.CompareMethod" />-Enumerationswert, der die Vergleichsmethode für die Filterregel bestimmt. Kann <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.LessThan" />, <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.EqualTo" /> usw. sein.</param>
        <param name="compareValue">Der Wertteil der Filterregel, die auf die ersten y-Werte der Datenpunkte angewendet wird. In der Filterregel „&lt;6“ ist der Wert beispielsweise gleich 6.</param>
        <param name="inputSeries">Das zu filternde <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekt.</param>
        <param name="outputSeries">Ein <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekt, in dem die gefilterten Daten gespeichert werden. Wenn die Reihe nicht vorhanden ist, wird eine Ausnahme ausgelöst.</param>
        <param name="usingValue">Der Datenpunktwert, auf den die Filterregel angewendet wird. Kann X, Y, Y2, Y3 usw. sein.</param>
        <summary>Filtert die Datenpunkte in einer Reihe, indem auf die angegebenen Datenpunktwerte für den Vergleich eine Filterregel angewendet wird.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterMatchedPoints">
      <MemberSignature Language="C#" Value="public bool FilterMatchedPoints { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FilterMatchedPoints" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterMatchedPoints" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterMatchedPoints As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool FilterMatchedPoints { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.FilterMatchedPoints : bool with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterMatchedPoints" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der bestimmt, ob Punkte gefiltert werden, wenn sie mit Kriterien übereinstimmen, die in Argumenten in den <c>Filter</c>-Methoden dieser Klasse angegeben werden, oder legt diesen Wert fest.</summary>
        <value><see langword="true" />, wenn Punkte gefiltert werden, die mit angegebenen Kriterien übereinstimmen. <see langword="false" />, wenn Punkte gefiltert werden, die nicht mit den Kriterien übereinstimmen. Der Standardwert ist <see langword="true" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterSetEmptyPoints">
      <MemberSignature Language="C#" Value="public bool FilterSetEmptyPoints { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FilterSetEmptyPoints" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterSetEmptyPoints" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterSetEmptyPoints As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool FilterSetEmptyPoints { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.FilterSetEmptyPoints : bool with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterSetEmptyPoints" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein Flag ab, das angibt, ob mit der <c>Filter</c>- oder der <c>FilterTopN</c>-Methode gefilterte Punkte entfernt oder als leer markiert werden, oder legt dieses Flag fest.</summary>
        <value><see langword="true" />, wenn gefilterte Punkte als leer markiert werden, <see langword="false" />, wenn sie entfernt werden. Der Standardwert ist <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FilterTopN">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Filtert alle Datenpunkte in einer oder mehreren Reihen mit Ausnahme einer angegebenen Anzahl von Punkten.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilterTopN">
      <MemberSignature Language="C#" Value="public void FilterTopN (int pointCount, string inputSeriesNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FilterTopN(int32 pointCount, string inputSeriesNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterTopN(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilterTopN (pointCount As Integer, inputSeriesNames As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FilterTopN(int pointCount, System::String ^ inputSeriesNames);" />
      <MemberSignature Language="F#" Value="member this.FilterTopN : int * string -&gt; unit" Usage="dataManipulator.FilterTopN (pointCount, inputSeriesNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointCount" Type="System.Int32" />
        <Parameter Name="inputSeriesNames" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pointCount">Die Anzahl der Datenpunkte, die beim Filtervorgang nicht entfernt werden.</param>
        <param name="inputSeriesNames">Eine durch Trennzeichen getrennte Liste von Namen der zu filternden <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />.</param>
        <summary>Filtert alle Datenpunkte in einer oder mehreren Reihen mit Ausnahme einer angegebenen Anzahl von Punkten. Die Punkte, die nicht gefiltert werden, entsprechen Punkten in der ersten Reihe, die die größten ersten y-Werte aufweisen. Die gefilterten <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekte werden zum Speichern der geänderten Daten verwendet.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterTopN">
      <MemberSignature Language="C#" Value="public void FilterTopN (int pointCount, System.Windows.Forms.DataVisualization.Charting.Series inputSeries);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FilterTopN(int32 pointCount, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterTopN(System.Int32,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilterTopN (pointCount As Integer, inputSeries As Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FilterTopN(int pointCount, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries);" />
      <MemberSignature Language="F#" Value="member this.FilterTopN : int * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.FilterTopN (pointCount, inputSeries)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointCount" Type="System.Int32" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="pointCount">Die Anzahl der Datenpunkte, die beim Filtervorgang nicht entfernt werden.</param>
        <param name="inputSeries">Das zu filternde <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekt.</param>
        <summary>Filtert alle Datenpunkte in einer Reihe außer einer angegebenen Anzahl von Punkten mit den größten ersten y-Werten. Das gefilterte <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekt wird zum Speichern der geänderten Daten verwendet.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterTopN">
      <MemberSignature Language="C#" Value="public void FilterTopN (int pointCount, string inputSeriesNames, string outputSeriesNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FilterTopN(int32 pointCount, string inputSeriesNames, string outputSeriesNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterTopN(System.Int32,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilterTopN (pointCount As Integer, inputSeriesNames As String, outputSeriesNames As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FilterTopN(int pointCount, System::String ^ inputSeriesNames, System::String ^ outputSeriesNames);" />
      <MemberSignature Language="F#" Value="member this.FilterTopN : int * string * string -&gt; unit" Usage="dataManipulator.FilterTopN (pointCount, inputSeriesNames, outputSeriesNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointCount" Type="System.Int32" />
        <Parameter Name="inputSeriesNames" Type="System.String" />
        <Parameter Name="outputSeriesNames" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pointCount">Die Anzahl der Datenpunkte, die beim Filtervorgang nicht entfernt werden.</param>
        <param name="inputSeriesNames">Eine durch Trennzeichen getrennte Liste von Namen der zu filternden <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />.</param>
        <param name="outputSeriesNames">Eine durch Trennzeichen getrennte Liste von Namen der <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />, in denen die gefilterten Daten gespeichert werden. Stellen Sie sicher, dass die Anzahl der Ausgabereihen mit der Anzahl der Eingabereihen übereinstimmt, andernfalls wird eine Ausnahme ausgelöst.</param>
        <summary>Filtert alle Datenpunkte in einer oder mehreren Reihen mit Ausnahme einer angegebenen Anzahl von Punkten. Die Punkte, die nicht gefiltert werden, entsprechen Punkten in der ersten Reihe, die die größten ersten y-Werte aufweisen.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterTopN">
      <MemberSignature Language="C#" Value="public void FilterTopN (int pointCount, System.Windows.Forms.DataVisualization.Charting.Series inputSeries, System.Windows.Forms.DataVisualization.Charting.Series outputSeries);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FilterTopN(int32 pointCount, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries, class System.Windows.Forms.DataVisualization.Charting.Series outputSeries) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterTopN(System.Int32,System.Windows.Forms.DataVisualization.Charting.Series,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilterTopN (pointCount As Integer, inputSeries As Series, outputSeries As Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FilterTopN(int pointCount, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries, System::Windows::Forms::DataVisualization::Charting::Series ^ outputSeries);" />
      <MemberSignature Language="F#" Value="member this.FilterTopN : int * System.Windows.Forms.DataVisualization.Charting.Series * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.FilterTopN (pointCount, inputSeries, outputSeries)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointCount" Type="System.Int32" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
        <Parameter Name="outputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="pointCount">Die Anzahl der Datenpunkte, die beim Filtervorgang nicht entfernt werden.</param>
        <param name="inputSeries">Das zu filternde <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekt.</param>
        <param name="outputSeries">Ein <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekt, in dem die gefilterten Daten gespeichert werden. Wenn die Reihe nicht vorhanden ist, wird eine Ausnahme ausgelöst.</param>
        <summary>Filtert alle Datenpunkte in einer Reihe außer einer angegebenen Anzahl von Punkten mit den größten ersten y-Werten.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterTopN">
      <MemberSignature Language="C#" Value="public void FilterTopN (int pointCount, string inputSeriesNames, string outputSeriesNames, string usingValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FilterTopN(int32 pointCount, string inputSeriesNames, string outputSeriesNames, string usingValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterTopN(System.Int32,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilterTopN (pointCount As Integer, inputSeriesNames As String, outputSeriesNames As String, usingValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FilterTopN(int pointCount, System::String ^ inputSeriesNames, System::String ^ outputSeriesNames, System::String ^ usingValue);" />
      <MemberSignature Language="F#" Value="member this.FilterTopN : int * string * string * string -&gt; unit" Usage="dataManipulator.FilterTopN (pointCount, inputSeriesNames, outputSeriesNames, usingValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointCount" Type="System.Int32" />
        <Parameter Name="inputSeriesNames" Type="System.String" />
        <Parameter Name="outputSeriesNames" Type="System.String" />
        <Parameter Name="usingValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pointCount">Die Anzahl der Datenpunkte, die beim Filtervorgang nicht entfernt werden.</param>
        <param name="inputSeriesNames">Eine durch Trennzeichen getrennte Liste von Namen der zu filternden <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />.</param>
        <param name="outputSeriesNames">Eine durch Trennzeichen getrennte Liste von Namen der <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />, in denen die gefilterten Daten gespeichert werden. Stellen Sie sicher, dass die Anzahl der Ausgabereihen mit der Anzahl der Eingabereihen übereinstimmt, andernfalls wird eine Ausnahme ausgelöst.</param>
        <param name="usingValue">Der Datenpunktwert, auf den die Filterregel angewendet wird. Kann X, Y, Y2, Y3 usw. sein.</param>
        <summary>Filtert alle Datenpunkte in einer oder mehreren Reihen mit Ausnahme einer angegebenen Anzahl von Punkten. Die Punkte, die nicht gefiltert werden, entsprechen Punkten in der ersten Reihe, die die größten Werte aufweisen.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterTopN">
      <MemberSignature Language="C#" Value="public void FilterTopN (int pointCount, System.Windows.Forms.DataVisualization.Charting.Series inputSeries, System.Windows.Forms.DataVisualization.Charting.Series outputSeries, string usingValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FilterTopN(int32 pointCount, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries, class System.Windows.Forms.DataVisualization.Charting.Series outputSeries, string usingValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterTopN(System.Int32,System.Windows.Forms.DataVisualization.Charting.Series,System.Windows.Forms.DataVisualization.Charting.Series,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilterTopN (pointCount As Integer, inputSeries As Series, outputSeries As Series, usingValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FilterTopN(int pointCount, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries, System::Windows::Forms::DataVisualization::Charting::Series ^ outputSeries, System::String ^ usingValue);" />
      <MemberSignature Language="F#" Value="member this.FilterTopN : int * System.Windows.Forms.DataVisualization.Charting.Series * System.Windows.Forms.DataVisualization.Charting.Series * string -&gt; unit" Usage="dataManipulator.FilterTopN (pointCount, inputSeries, outputSeries, usingValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointCount" Type="System.Int32" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
        <Parameter Name="outputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
        <Parameter Name="usingValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pointCount">Die Anzahl der Datenpunkte, die beim Filtervorgang nicht entfernt werden.</param>
        <param name="inputSeries">Das zu filternde <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekt.</param>
        <param name="outputSeries">Ein <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekt, in dem die gefilterten Daten gespeichert werden. Wenn die Reihe nicht vorhanden ist, wird eine Ausnahme ausgelöst.</param>
        <param name="usingValue">Der Datenpunktwert, auf den die Filterregel angewendet wird. Kann X, Y, Y2, Y3 usw. sein.</param>
        <summary>Filtert alle Datenpunkte in einer Reihe außer einer angegebenen Anzahl von Punkten mit den größten Werten.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterTopN">
      <MemberSignature Language="C#" Value="public void FilterTopN (int pointCount, string inputSeriesNames, string outputSeriesNames, string usingValue, bool getTopValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FilterTopN(int32 pointCount, string inputSeriesNames, string outputSeriesNames, string usingValue, bool getTopValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterTopN(System.Int32,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilterTopN (pointCount As Integer, inputSeriesNames As String, outputSeriesNames As String, usingValue As String, getTopValues As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FilterTopN(int pointCount, System::String ^ inputSeriesNames, System::String ^ outputSeriesNames, System::String ^ usingValue, bool getTopValues);" />
      <MemberSignature Language="F#" Value="member this.FilterTopN : int * string * string * string * bool -&gt; unit" Usage="dataManipulator.FilterTopN (pointCount, inputSeriesNames, outputSeriesNames, usingValue, getTopValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointCount" Type="System.Int32" />
        <Parameter Name="inputSeriesNames" Type="System.String" />
        <Parameter Name="outputSeriesNames" Type="System.String" />
        <Parameter Name="usingValue" Type="System.String" />
        <Parameter Name="getTopValues" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="pointCount">Die Anzahl der Datenpunkte, die beim Filtervorgang nicht entfernt werden.</param>
        <param name="inputSeriesNames">Eine durch Trennzeichen getrennte Liste von Namen der zu filternden <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />.</param>
        <param name="outputSeriesNames">Eine durch Trennzeichen getrennte Liste von Namen der <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />, in denen die gefilterten Daten gespeichert werden. Stellen Sie sicher, dass die Anzahl der Ausgabereihen mit der Anzahl der Eingabereihen übereinstimmt, andernfalls wird eine Ausnahme ausgelöst.</param>
        <param name="usingValue">Der Datenpunktwert, auf den die Filterregel angewendet wird. Kann X, Y, Y2, Y3 usw. sein.</param>
        <param name="getTopValues"><see langword="true" />, wenn die größten Werte beibehalten werden, <see langword="false" />, wenn die kleinsten Werte beibehalten werden.</param>
        <summary>Filtert alle Datenpunkte in einer oder mehreren Reihen mit Ausnahme einer angegebenen Anzahl von Punkten. Die Punkte, die nicht gefiltert werden, entsprechen Punkten in der ersten Eingabereihe, die über die größten oder kleinsten Werte verfügen.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterTopN">
      <MemberSignature Language="C#" Value="public void FilterTopN (int pointCount, System.Windows.Forms.DataVisualization.Charting.Series inputSeries, System.Windows.Forms.DataVisualization.Charting.Series outputSeries, string usingValue, bool getTopValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FilterTopN(int32 pointCount, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries, class System.Windows.Forms.DataVisualization.Charting.Series outputSeries, string usingValue, bool getTopValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterTopN(System.Int32,System.Windows.Forms.DataVisualization.Charting.Series,System.Windows.Forms.DataVisualization.Charting.Series,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilterTopN (pointCount As Integer, inputSeries As Series, outputSeries As Series, usingValue As String, getTopValues As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FilterTopN(int pointCount, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries, System::Windows::Forms::DataVisualization::Charting::Series ^ outputSeries, System::String ^ usingValue, bool getTopValues);" />
      <MemberSignature Language="F#" Value="member this.FilterTopN : int * System.Windows.Forms.DataVisualization.Charting.Series * System.Windows.Forms.DataVisualization.Charting.Series * string * bool -&gt; unit" Usage="dataManipulator.FilterTopN (pointCount, inputSeries, outputSeries, usingValue, getTopValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointCount" Type="System.Int32" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
        <Parameter Name="outputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
        <Parameter Name="usingValue" Type="System.String" />
        <Parameter Name="getTopValues" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="pointCount">Die Anzahl der Datenpunkte, die beim Filtervorgang nicht entfernt werden.</param>
        <param name="inputSeries">Das zu filternde <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekt.</param>
        <param name="outputSeries">Ein <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekt, in dem die gefilterten Daten gespeichert werden. Wenn die Reihe nicht vorhanden ist, wird eine Ausnahme ausgelöst.</param>
        <param name="usingValue">Der Datenpunktwert, auf den die Filterregel angewendet wird. Kann X, Y, Y2, Y3 usw. sein.</param>
        <param name="getTopValues"><see langword="true" />, wenn die größten Werte beibehalten werden, <see langword="false" />, wenn die kleinsten Werte beibehalten werden.</param>
        <summary>Filtert alle Datenpunkte in einer Reihe außer einer angegebenen Anzahl von Punkten mit den kleinsten oder größten Werten.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Group">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gruppiert Datenpunkte für eine oder mehrere Reihen mit einer oder mehreren Formeln.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Group">
      <MemberSignature Language="C#" Value="public void Group (string formula, double interval, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, string inputSeriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Group(string formula, float64 interval, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, string inputSeriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Group(System.String,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Group (formula As String, interval As Double, intervalType As IntervalType, inputSeriesName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Group(System::String ^ formula, double interval, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalType, System::String ^ inputSeriesName);" />
      <MemberSignature Language="F#" Value="member this.Group : string * double * System.Windows.Forms.DataVisualization.Charting.IntervalType * string -&gt; unit" Usage="dataManipulator.Group (formula, interval, intervalType, inputSeriesName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formula" Type="System.String" />
        <Parameter Name="interval" Type="System.Double" />
        <Parameter Name="intervalType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="inputSeriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="formula">Eine durch Trennzeichen getrennte Liste einer oder mehrerer Formeln zur Berechnung der gruppierten Datenpunktwerte.</param>
        <param name="interval">Die Größe des Intervalls, das auf fehlende Datenpunkte überprüft wird.</param>
        <param name="intervalType">Die Maßeinheit für den <paramref name="interval" />-Parameter.</param>
        <param name="inputSeriesName">Eine durch Trennzeichen getrennte Liste von Namen der zu gruppierenden <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />.</param>
        <summary>Gruppiert Datenpunkte für eine oder mehrere Reihen mit einer oder mehreren Formeln. Die ursprünglichen Daten werden in den Reihen gelöscht, und diese werden zum Speichern der neuen Datenpunkte verwendet.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Group">
      <MemberSignature Language="C#" Value="public void Group (string formula, double interval, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, System.Windows.Forms.DataVisualization.Charting.Series inputSeries);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Group(string formula, float64 interval, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Group(System.String,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Group (formula As String, interval As Double, intervalType As IntervalType, inputSeries As Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Group(System::String ^ formula, double interval, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalType, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries);" />
      <MemberSignature Language="F#" Value="member this.Group : string * double * System.Windows.Forms.DataVisualization.Charting.IntervalType * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.Group (formula, interval, intervalType, inputSeries)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formula" Type="System.String" />
        <Parameter Name="interval" Type="System.Double" />
        <Parameter Name="intervalType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="formula">Eine durch Trennzeichen getrennte Liste einer oder mehrerer Formeln zur Berechnung der gruppierten Datenpunktwerte.</param>
        <param name="interval">Die Größe des Intervalls, das auf fehlende Datenpunkte überprüft wird.</param>
        <param name="intervalType">Die Maßeinheit für den <paramref name="interval" />-Parameter.</param>
        <param name="inputSeries">Das zu gruppierende <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekt.</param>
        <summary>Gruppiert Datenpunkte in einer Reihe mit einer oder mehreren Formeln. Die ursprünglichen Daten werden in der zu gruppierenden Reihe gelöscht, und diese wird zum Speichern der neuen Datenpunkte verwendet.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Group">
      <MemberSignature Language="C#" Value="public void Group (string formula, double interval, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, string inputSeriesName, string outputSeriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Group(string formula, float64 interval, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, string inputSeriesName, string outputSeriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Group(System.String,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Group (formula As String, interval As Double, intervalType As IntervalType, inputSeriesName As String, outputSeriesName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Group(System::String ^ formula, double interval, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalType, System::String ^ inputSeriesName, System::String ^ outputSeriesName);" />
      <MemberSignature Language="F#" Value="member this.Group : string * double * System.Windows.Forms.DataVisualization.Charting.IntervalType * string * string -&gt; unit" Usage="dataManipulator.Group (formula, interval, intervalType, inputSeriesName, outputSeriesName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formula" Type="System.String" />
        <Parameter Name="interval" Type="System.Double" />
        <Parameter Name="intervalType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="inputSeriesName" Type="System.String" />
        <Parameter Name="outputSeriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="formula">Eine durch Trennzeichen getrennte Liste einer oder mehrerer Formeln zur Berechnung der gruppierten Datenpunktwerte.</param>
        <param name="interval">Die Größe des Intervalls, das auf fehlende Datenpunkte überprüft wird.</param>
        <param name="intervalType">Die Maßeinheit für den <paramref name="interval" />-Parameter.</param>
        <param name="inputSeriesName">Eine durch Trennzeichen getrennte Liste von Namen der zu gruppierenden <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />.</param>
        <param name="outputSeriesName">Eine durch Trennzeichen getrennte Liste von Namen der <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />, in denen die gruppierten Datenpunkte gespeichert werden. Wenn eine Reihe nicht vorhanden ist, wird sie erstellt; wenn sie vorhanden ist, werden zuerst sämtliche Daten daraus gelöscht, bevor gruppierte Datenpunkte gespeichert werden. Die Anzahl der Ausgabereihen muss mit der Anzahl der Eingabereihen übereinstimmen. Andernfalls wird eine Ausnahme ausgelöst.</param>
        <summary>Gruppiert Datenpunkte für eine oder mehrere Reihen mit einer oder mehreren Formeln. Die gruppierten Datenpunkte werden in Ausgabereihen gespeichert.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Group">
      <MemberSignature Language="C#" Value="public void Group (string formula, double interval, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, System.Windows.Forms.DataVisualization.Charting.Series inputSeries, System.Windows.Forms.DataVisualization.Charting.Series outputSeries);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Group(string formula, float64 interval, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries, class System.Windows.Forms.DataVisualization.Charting.Series outputSeries) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Group(System.String,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Windows.Forms.DataVisualization.Charting.Series,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Group (formula As String, interval As Double, intervalType As IntervalType, inputSeries As Series, outputSeries As Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Group(System::String ^ formula, double interval, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalType, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries, System::Windows::Forms::DataVisualization::Charting::Series ^ outputSeries);" />
      <MemberSignature Language="F#" Value="member this.Group : string * double * System.Windows.Forms.DataVisualization.Charting.IntervalType * System.Windows.Forms.DataVisualization.Charting.Series * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.Group (formula, interval, intervalType, inputSeries, outputSeries)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formula" Type="System.String" />
        <Parameter Name="interval" Type="System.Double" />
        <Parameter Name="intervalType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
        <Parameter Name="outputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="formula">Eine durch Trennzeichen getrennte Liste einer oder mehrerer Formeln zur Berechnung der gruppierten Datenpunktwerte.</param>
        <param name="interval">Die Größe des Intervalls, das auf fehlende Datenpunkte überprüft wird.</param>
        <param name="intervalType">Die Maßeinheit für den <paramref name="interval" />-Parameter.</param>
        <param name="inputSeries">Das zu gruppierende <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekt.</param>
        <param name="outputSeries">Die <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />, in der die neuen, durch den Gruppierungsvorgang erstellten Datenpunkte gespeichert werden. Wenn sie nicht vorhanden ist, wird eine Ausnahme ausgelöst.</param>
        <summary>Gruppiert Datenpunkte in einer Reihe mit einer oder mehreren Formeln. Die gruppierten Datenpunkte werden in einer Ausgabereihe gespeichert.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Group">
      <MemberSignature Language="C#" Value="public void Group (string formula, double interval, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, double intervalOffset, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalOffsetType, string inputSeriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Group(string formula, float64 interval, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, float64 intervalOffset, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalOffsetType, string inputSeriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Group(System.String,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Group (formula As String, interval As Double, intervalType As IntervalType, intervalOffset As Double, intervalOffsetType As IntervalType, inputSeriesName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Group(System::String ^ formula, double interval, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalType, double intervalOffset, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalOffsetType, System::String ^ inputSeriesName);" />
      <MemberSignature Language="F#" Value="member this.Group : string * double * System.Windows.Forms.DataVisualization.Charting.IntervalType * double * System.Windows.Forms.DataVisualization.Charting.IntervalType * string -&gt; unit" Usage="dataManipulator.Group (formula, interval, intervalType, intervalOffset, intervalOffsetType, inputSeriesName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formula" Type="System.String" />
        <Parameter Name="interval" Type="System.Double" />
        <Parameter Name="intervalType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="intervalOffset" Type="System.Double" />
        <Parameter Name="intervalOffsetType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="inputSeriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="formula">Eine durch Trennzeichen getrennte Liste einer oder mehrerer Formeln zur Berechnung der gruppierten Datenpunktwerte.</param>
        <param name="interval">Die Größe des Intervalls, das auf fehlende Datenpunkte überprüft wird.</param>
        <param name="intervalType">Die Maßeinheit für den <paramref name="interval" />-Parameter.</param>
        <param name="intervalOffset">Die Größe des Intervalloffsets.</param>
        <param name="intervalOffsetType">Die Maßeinheit für den Intervalloffset.</param>
        <param name="inputSeriesName">Eine durch Trennzeichen getrennte Liste von Namen der zu gruppierenden <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />.</param>
        <summary>Gruppiert Datenpunkte für eine oder mehrere Reihen mit einer oder mehreren Formeln. Die ursprünglichen Daten werden in den Reihen gelöscht, und diese werden zum Speichern der neuen Datenpunkte verwendet.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Group">
      <MemberSignature Language="C#" Value="public void Group (string formula, double interval, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, double intervalOffset, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalOffsetType, System.Windows.Forms.DataVisualization.Charting.Series inputSeries);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Group(string formula, float64 interval, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, float64 intervalOffset, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalOffsetType, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Group(System.String,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Group (formula As String, interval As Double, intervalType As IntervalType, intervalOffset As Double, intervalOffsetType As IntervalType, inputSeries As Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Group(System::String ^ formula, double interval, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalType, double intervalOffset, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalOffsetType, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries);" />
      <MemberSignature Language="F#" Value="member this.Group : string * double * System.Windows.Forms.DataVisualization.Charting.IntervalType * double * System.Windows.Forms.DataVisualization.Charting.IntervalType * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.Group (formula, interval, intervalType, intervalOffset, intervalOffsetType, inputSeries)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formula" Type="System.String" />
        <Parameter Name="interval" Type="System.Double" />
        <Parameter Name="intervalType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="intervalOffset" Type="System.Double" />
        <Parameter Name="intervalOffsetType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="formula">Eine durch Trennzeichen getrennte Liste einer oder mehrerer Formeln zur Berechnung der gruppierten Datenpunktwerte.</param>
        <param name="interval">Die Größe des Intervalls, das auf fehlende Datenpunkte überprüft wird.</param>
        <param name="intervalType">Die Maßeinheit für den <paramref name="interval" />-Parameter.</param>
        <param name="intervalOffset">Die Größe des Intervalloffsets.</param>
        <param name="intervalOffsetType">Die Maßeinheit für den Intervalloffset.</param>
        <param name="inputSeries">Das zu gruppierende <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekt.</param>
        <summary>Gruppiert Datenpunkte in einer Reihe mit einer oder mehreren Formeln. Die ursprünglichen Daten werden in der zu gruppierenden Reihe gelöscht, und diese wird zum Speichern der neuen Datenpunkte verwendet.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Group">
      <MemberSignature Language="C#" Value="public void Group (string formula, double interval, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, double intervalOffset, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalOffsetType, string inputSeriesName, string outputSeriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Group(string formula, float64 interval, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, float64 intervalOffset, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalOffsetType, string inputSeriesName, string outputSeriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Group(System.String,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Group (formula As String, interval As Double, intervalType As IntervalType, intervalOffset As Double, intervalOffsetType As IntervalType, inputSeriesName As String, outputSeriesName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Group(System::String ^ formula, double interval, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalType, double intervalOffset, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalOffsetType, System::String ^ inputSeriesName, System::String ^ outputSeriesName);" />
      <MemberSignature Language="F#" Value="member this.Group : string * double * System.Windows.Forms.DataVisualization.Charting.IntervalType * double * System.Windows.Forms.DataVisualization.Charting.IntervalType * string * string -&gt; unit" Usage="dataManipulator.Group (formula, interval, intervalType, intervalOffset, intervalOffsetType, inputSeriesName, outputSeriesName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formula" Type="System.String" />
        <Parameter Name="interval" Type="System.Double" />
        <Parameter Name="intervalType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="intervalOffset" Type="System.Double" />
        <Parameter Name="intervalOffsetType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="inputSeriesName" Type="System.String" />
        <Parameter Name="outputSeriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="formula">Eine durch Trennzeichen getrennte Liste einer oder mehrerer Formeln zur Berechnung der gruppierten Datenpunktwerte.</param>
        <param name="interval">Die Größe des Intervalls, das auf fehlende Datenpunkte überprüft wird.</param>
        <param name="intervalType">Die Maßeinheit für den <paramref name="interval" />-Parameter.</param>
        <param name="intervalOffset">Die Größe des Intervalloffsets.</param>
        <param name="intervalOffsetType">Die Maßeinheit für den Intervalloffset.</param>
        <param name="inputSeriesName">Eine durch Trennzeichen getrennte Liste von Namen der zu gruppierenden <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />.</param>
        <param name="outputSeriesName">Eine durch Trennzeichen getrennte Liste von Namen der <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />, in denen die gruppierten Datenpunkte gespeichert werden. Wenn eine Reihe nicht vorhanden ist, wird sie erstellt; wenn sie vorhanden ist, werden zuerst sämtliche Daten daraus gelöscht, bevor gruppierte Datenpunkte gespeichert werden. Die Anzahl der Ausgabereihen muss mit der Anzahl der Eingabereihen übereinstimmen. Andernfalls wird eine Ausnahme ausgelöst.</param>
        <summary>Gruppiert Datenpunkte für eine oder mehrere Reihen mit einer oder mehreren Formeln. Die gruppierten Datenpunkte werden in Ausgabereihen gespeichert, und für Intervalle kann ein Offset verwendet werden.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Group">
      <MemberSignature Language="C#" Value="public void Group (string formula, double interval, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, double intervalOffset, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalOffsetType, System.Windows.Forms.DataVisualization.Charting.Series inputSeries, System.Windows.Forms.DataVisualization.Charting.Series outputSeries);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Group(string formula, float64 interval, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, float64 intervalOffset, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalOffsetType, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries, class System.Windows.Forms.DataVisualization.Charting.Series outputSeries) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Group(System.String,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Windows.Forms.DataVisualization.Charting.Series,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Group (formula As String, interval As Double, intervalType As IntervalType, intervalOffset As Double, intervalOffsetType As IntervalType, inputSeries As Series, outputSeries As Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Group(System::String ^ formula, double interval, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalType, double intervalOffset, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalOffsetType, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries, System::Windows::Forms::DataVisualization::Charting::Series ^ outputSeries);" />
      <MemberSignature Language="F#" Value="member this.Group : string * double * System.Windows.Forms.DataVisualization.Charting.IntervalType * double * System.Windows.Forms.DataVisualization.Charting.IntervalType * System.Windows.Forms.DataVisualization.Charting.Series * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.Group (formula, interval, intervalType, intervalOffset, intervalOffsetType, inputSeries, outputSeries)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formula" Type="System.String" />
        <Parameter Name="interval" Type="System.Double" />
        <Parameter Name="intervalType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="intervalOffset" Type="System.Double" />
        <Parameter Name="intervalOffsetType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
        <Parameter Name="outputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="formula">Eine durch Trennzeichen getrennte Liste einer oder mehrerer Formeln zur Berechnung der gruppierten Datenpunktwerte.</param>
        <param name="interval">Die Größe des Intervalls, das auf fehlende Datenpunkte überprüft wird.</param>
        <param name="intervalType">Die Maßeinheit für den <paramref name="interval" />-Parameter.</param>
        <param name="intervalOffset">Die Größe des Intervalloffsets.</param>
        <param name="intervalOffsetType">Die Maßeinheit für den Intervalloffset.</param>
        <param name="inputSeries">Das zu gruppierende <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekt.</param>
        <param name="outputSeries">Die <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />, in der die neuen, durch den Gruppierungsvorgang erstellten Datenpunkte gespeichert werden. Wenn sie nicht vorhanden ist, wird eine Ausnahme ausgelöst.</param>
        <summary>Gruppiert Datenpunkte in einer Reihe mit einer oder mehreren Formeln. Die gruppierten Datenpunkte werden in einer Ausgabereihe gespeichert, und für Intervalle kann ein Offset verwendet werden.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GroupByAxisLabel">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gruppiert Datenpunkte in einer oder mehreren Reihen mit einer oder mehreren Formeln nach Achsenbezeichnungen.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GroupByAxisLabel">
      <MemberSignature Language="C#" Value="public void GroupByAxisLabel (string formula, string inputSeriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GroupByAxisLabel(string formula, string inputSeriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.GroupByAxisLabel(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GroupByAxisLabel (formula As String, inputSeriesName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GroupByAxisLabel(System::String ^ formula, System::String ^ inputSeriesName);" />
      <MemberSignature Language="F#" Value="member this.GroupByAxisLabel : string * string -&gt; unit" Usage="dataManipulator.GroupByAxisLabel (formula, inputSeriesName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formula" Type="System.String" />
        <Parameter Name="inputSeriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="formula">Eine durch Trennzeichen getrennte Liste einer oder mehrerer Formeln zur Berechnung der gruppierten Datenpunktwerte.</param>
        <param name="inputSeriesName">Eine durch Trennzeichen getrennte Liste von Namen der Eingabe-<see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />.</param>
        <summary>Gruppiert Datenpunkte in einer oder mehreren Reihen mit einer oder mehreren Formeln nach Achsenbezeichnungen. Ursprüngliche Datenpunktwerte werden gelöscht, und in jeder Reihe werden dann die zugehörigen neuen gruppierten Datenpunkte gespeichert.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupByAxisLabel">
      <MemberSignature Language="C#" Value="public void GroupByAxisLabel (string formula, System.Windows.Forms.DataVisualization.Charting.Series inputSeries);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GroupByAxisLabel(string formula, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.GroupByAxisLabel(System.String,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GroupByAxisLabel (formula As String, inputSeries As Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GroupByAxisLabel(System::String ^ formula, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries);" />
      <MemberSignature Language="F#" Value="member this.GroupByAxisLabel : string * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.GroupByAxisLabel (formula, inputSeries)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formula" Type="System.String" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="formula">Eine durch Trennzeichen getrennte Liste einer oder mehrerer Formeln zur Berechnung der gruppierten Datenpunktwerte.</param>
        <param name="inputSeries">Die Eingabe-<see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />.</param>
        <summary>Gruppiert Datenpunkte in einer Reihe mit einer oder mehreren Formeln nach Achsenbezeichnungen. Ursprüngliche Datenpunktwerte werden gelöscht, und in der Reihe werden dann die neuen gruppierten Datenpunkte gespeichert.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupByAxisLabel">
      <MemberSignature Language="C#" Value="public void GroupByAxisLabel (string formula, string inputSeriesName, string outputSeriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GroupByAxisLabel(string formula, string inputSeriesName, string outputSeriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.GroupByAxisLabel(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GroupByAxisLabel (formula As String, inputSeriesName As String, outputSeriesName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GroupByAxisLabel(System::String ^ formula, System::String ^ inputSeriesName, System::String ^ outputSeriesName);" />
      <MemberSignature Language="F#" Value="member this.GroupByAxisLabel : string * string * string -&gt; unit" Usage="dataManipulator.GroupByAxisLabel (formula, inputSeriesName, outputSeriesName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formula" Type="System.String" />
        <Parameter Name="inputSeriesName" Type="System.String" />
        <Parameter Name="outputSeriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="formula">Eine durch Trennzeichen getrennte Liste einer oder mehrerer Formeln zur Berechnung der gruppierten Datenpunktwerte.</param>
        <param name="inputSeriesName">Eine durch Trennzeichen getrennte Liste von Namen der Eingabe-<see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />.</param>
        <param name="outputSeriesName">Eine durch Trennzeichen getrennte Liste von Namen der <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />, in denen die gruppierten Datenpunkte gespeichert werden. Wenn eine Reihe nicht vorhanden ist, wird sie erstellt; wenn sie vorhanden ist, werden zuerst sämtliche Daten daraus gelöscht, bevor gruppierte Datenpunkte gespeichert werden. Die Anzahl der Ausgabereihen muss mit der Anzahl der Eingabereihen übereinstimmen. Andernfalls wird eine Ausnahme ausgelöst.</param>
        <summary>Gruppiert Datenpunkte in einer oder mehreren Reihen mit einer oder mehreren Formeln nach Achsenbezeichnungen. Die gruppierten Datenpunkte werden in Ausgabereihen gespeichert.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupByAxisLabel">
      <MemberSignature Language="C#" Value="public void GroupByAxisLabel (string formula, System.Windows.Forms.DataVisualization.Charting.Series inputSeries, System.Windows.Forms.DataVisualization.Charting.Series outputSeries);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GroupByAxisLabel(string formula, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries, class System.Windows.Forms.DataVisualization.Charting.Series outputSeries) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.GroupByAxisLabel(System.String,System.Windows.Forms.DataVisualization.Charting.Series,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GroupByAxisLabel (formula As String, inputSeries As Series, outputSeries As Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GroupByAxisLabel(System::String ^ formula, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries, System::Windows::Forms::DataVisualization::Charting::Series ^ outputSeries);" />
      <MemberSignature Language="F#" Value="member this.GroupByAxisLabel : string * System.Windows.Forms.DataVisualization.Charting.Series * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.GroupByAxisLabel (formula, inputSeries, outputSeries)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formula" Type="System.String" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
        <Parameter Name="outputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="formula">Eine durch Trennzeichen getrennte Liste einer oder mehrerer Formeln zur Berechnung der gruppierten Datenpunktwerte.</param>
        <param name="inputSeries">Die zu gruppierende Eingabe-<see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />.</param>
        <param name="outputSeries">Die <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />, in der die neuen, durch den Gruppierungsvorgang erstellten Datenpunkte gespeichert werden. Wenn sie nicht vorhanden ist, wird eine Ausnahme ausgelöst.</param>
        <summary>Gruppiert Datenpunkte in einer Reihe mit einer oder mehreren Formeln nach Achsenbezeichnungen. Die gruppierten Datenpunkte werden in einer Ausgabereihe gespeichert.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InsertEmptyPoints">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ersetzt die fehlenden Datenpunkte in einer Reihe oder einer Auflistung von Reihen durch leere Punkte.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InsertEmptyPoints">
      <MemberSignature Language="C#" Value="public void InsertEmptyPoints (double interval, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, string seriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertEmptyPoints(float64 interval, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, string seriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.InsertEmptyPoints(System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertEmptyPoints (interval As Double, intervalType As IntervalType, seriesName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertEmptyPoints(double interval, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalType, System::String ^ seriesName);" />
      <MemberSignature Language="F#" Value="member this.InsertEmptyPoints : double * System.Windows.Forms.DataVisualization.Charting.IntervalType * string -&gt; unit" Usage="dataManipulator.InsertEmptyPoints (interval, intervalType, seriesName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
        <Parameter Name="intervalType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="seriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="interval">Die Größe des Intervalls, das auf fehlende Datenpunkte überprüft wird.</param>
        <param name="intervalType">Die Maßeinheit für den <paramref name="interval" />-Parameter.</param>
        <param name="seriesName">Eine durch Trennzeichen getrennte Liste von Namen der zu überprüfenden <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />.</param>
        <summary>Ersetzt die fehlenden Datenpunkte in einer oder mehreren Reihen durch leere Punkte. Jede Reihe wird für ein angegebenes Intervall überprüft, das durch das <paramref name="interval" />-Argument und das <paramref name="intervalType" />-Argument bestimmt wird.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertEmptyPoints">
      <MemberSignature Language="C#" Value="public void InsertEmptyPoints (double interval, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, System.Windows.Forms.DataVisualization.Charting.Series series);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertEmptyPoints(float64 interval, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, class System.Windows.Forms.DataVisualization.Charting.Series series) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.InsertEmptyPoints(System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertEmptyPoints (interval As Double, intervalType As IntervalType, series As Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertEmptyPoints(double interval, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalType, System::Windows::Forms::DataVisualization::Charting::Series ^ series);" />
      <MemberSignature Language="F#" Value="member this.InsertEmptyPoints : double * System.Windows.Forms.DataVisualization.Charting.IntervalType * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.InsertEmptyPoints (interval, intervalType, series)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
        <Parameter Name="intervalType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="series" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="interval">Die Größe des Intervalls, das auf fehlende Datenpunkte überprüft wird.</param>
        <param name="intervalType">Die Maßeinheit für den <paramref name="interval" />-Parameter.</param>
        <param name="series">Das <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekt, das überprüft wird.</param>
        <summary>Ersetzt die fehlenden Datenpunkte in einer Reihe durch leere Punkte. Die Reihe wird für ein angegebenes Intervall überprüft, das durch das <paramref name="interval" />-Argument und das <paramref name="intervalType" />-Argument bestimmt wird.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertEmptyPoints">
      <MemberSignature Language="C#" Value="public void InsertEmptyPoints (double interval, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, double intervalOffset, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalOffsetType, string seriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertEmptyPoints(float64 interval, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, float64 intervalOffset, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalOffsetType, string seriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.InsertEmptyPoints(System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertEmptyPoints (interval As Double, intervalType As IntervalType, intervalOffset As Double, intervalOffsetType As IntervalType, seriesName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertEmptyPoints(double interval, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalType, double intervalOffset, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalOffsetType, System::String ^ seriesName);" />
      <MemberSignature Language="F#" Value="member this.InsertEmptyPoints : double * System.Windows.Forms.DataVisualization.Charting.IntervalType * double * System.Windows.Forms.DataVisualization.Charting.IntervalType * string -&gt; unit" Usage="dataManipulator.InsertEmptyPoints (interval, intervalType, intervalOffset, intervalOffsetType, seriesName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
        <Parameter Name="intervalType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="intervalOffset" Type="System.Double" />
        <Parameter Name="intervalOffsetType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="seriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="interval">Die Größe des Intervalls, das auf fehlende Datenpunkte überprüft wird.</param>
        <param name="intervalType">Die Maßeinheit für den <paramref name="interval" />-Parameter.</param>
        <param name="intervalOffset">Die Größe des Intervalloffsets.</param>
        <param name="intervalOffsetType">Die Maßeinheit für den Intervalloffset.</param>
        <param name="seriesName">Eine durch Trennzeichen getrennte Liste von Namen der zu überprüfenden <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />.</param>
        <summary>Ersetzt die fehlenden Datenpunkte in einer oder mehreren Reihen durch leere Punkte. Jede Reihe wird für ein angegebenes Intervall überprüft, das durch die Argumente <paramref name="interval" />, <paramref name="intervalOffset" />, <paramref name="intervalOffsetType" /> und <paramref name="intervalType" /> bestimmt wird.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertEmptyPoints">
      <MemberSignature Language="C#" Value="public void InsertEmptyPoints (double interval, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, double intervalOffset, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalOffsetType, System.Windows.Forms.DataVisualization.Charting.Series series);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertEmptyPoints(float64 interval, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, float64 intervalOffset, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalOffsetType, class System.Windows.Forms.DataVisualization.Charting.Series series) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.InsertEmptyPoints(System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertEmptyPoints (interval As Double, intervalType As IntervalType, intervalOffset As Double, intervalOffsetType As IntervalType, series As Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertEmptyPoints(double interval, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalType, double intervalOffset, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalOffsetType, System::Windows::Forms::DataVisualization::Charting::Series ^ series);" />
      <MemberSignature Language="F#" Value="member this.InsertEmptyPoints : double * System.Windows.Forms.DataVisualization.Charting.IntervalType * double * System.Windows.Forms.DataVisualization.Charting.IntervalType * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.InsertEmptyPoints (interval, intervalType, intervalOffset, intervalOffsetType, series)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
        <Parameter Name="intervalType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="intervalOffset" Type="System.Double" />
        <Parameter Name="intervalOffsetType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="series" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="interval">Die Größe des Intervalls, das auf fehlende Datenpunkte überprüft wird.</param>
        <param name="intervalType">Die Maßeinheit für den <paramref name="interval" />-Parameter.</param>
        <param name="intervalOffset">Die Größe des Intervalloffsets.</param>
        <param name="intervalOffsetType">Die Maßeinheit für den Intervalloffset.</param>
        <param name="series">Das <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekt, in das die leeren Punkte eingefügt werden sollen.</param>
        <summary>Ersetzt die fehlenden Datenpunkte in einer Reihe durch leere Punkte. Die Reihe wird für ein angegebenes Intervall überprüft, das durch die Argumente <paramref name="interval" />, <paramref name="intervalOffset" />, <paramref name="intervalOffsetType" /> und <paramref name="intervalType" /> bestimmt wird.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertEmptyPoints">
      <MemberSignature Language="C#" Value="public void InsertEmptyPoints (double interval, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, double intervalOffset, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalOffsetType, double fromXValue, double toXValue, string seriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertEmptyPoints(float64 interval, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, float64 intervalOffset, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalOffsetType, float64 fromXValue, float64 toXValue, string seriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.InsertEmptyPoints(System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertEmptyPoints (interval As Double, intervalType As IntervalType, intervalOffset As Double, intervalOffsetType As IntervalType, fromXValue As Double, toXValue As Double, seriesName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertEmptyPoints(double interval, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalType, double intervalOffset, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalOffsetType, double fromXValue, double toXValue, System::String ^ seriesName);" />
      <MemberSignature Language="F#" Value="member this.InsertEmptyPoints : double * System.Windows.Forms.DataVisualization.Charting.IntervalType * double * System.Windows.Forms.DataVisualization.Charting.IntervalType * double * double * string -&gt; unit" Usage="dataManipulator.InsertEmptyPoints (interval, intervalType, intervalOffset, intervalOffsetType, fromXValue, toXValue, seriesName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
        <Parameter Name="intervalType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="intervalOffset" Type="System.Double" />
        <Parameter Name="intervalOffsetType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="fromXValue" Type="System.Double" />
        <Parameter Name="toXValue" Type="System.Double" />
        <Parameter Name="seriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="interval">Die Größe des Intervalls, das auf fehlende Datenpunkte überprüft wird.</param>
        <param name="intervalType">Die Maßeinheit für den <paramref name="interval" />-Parameter.</param>
        <param name="intervalOffset">Die Größe des Intervalloffsets.</param>
        <param name="intervalOffsetType">Die Maßeinheit für den Intervalloffset.</param>
        <param name="fromXValue">Der Anfangspunkt des zu überprüfenden Reihenbereichs. Verwendet die x-Werte der Datenpunkte.</param>
        <param name="toXValue">Der Endpunkt des zu überprüfenden Reihenbereichs. Verwendet die x-Werte der Datenpunkte.</param>
        <param name="seriesName">Eine durch Trennzeichen getrennte Liste von Namen der zu überprüfenden <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />.</param>
        <summary>Ersetzt die fehlenden Datenpunkte in einer oder mehreren Reihen durch leere Punkte. Jede Reihe wird für ein angegebenes Intervall überprüft, das durch die Argumente <paramref name="interval" />, <paramref name="intervalOffset" />, <paramref name="intervalOffsetType" /> und <paramref name="intervalType" /> bestimmt wird. Der zu überprüfende Reihenbereich wird durch das <paramref name="toXValue" />-Argument und das <paramref name="fromXValue" />-Argument bestimmt.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertEmptyPoints">
      <MemberSignature Language="C#" Value="public void InsertEmptyPoints (double interval, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, double intervalOffset, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalOffsetType, double fromXValue, double toXValue, System.Windows.Forms.DataVisualization.Charting.Series series);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertEmptyPoints(float64 interval, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, float64 intervalOffset, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalOffsetType, float64 fromXValue, float64 toXValue, class System.Windows.Forms.DataVisualization.Charting.Series series) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.InsertEmptyPoints(System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Double,System.Double,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertEmptyPoints (interval As Double, intervalType As IntervalType, intervalOffset As Double, intervalOffsetType As IntervalType, fromXValue As Double, toXValue As Double, series As Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertEmptyPoints(double interval, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalType, double intervalOffset, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalOffsetType, double fromXValue, double toXValue, System::Windows::Forms::DataVisualization::Charting::Series ^ series);" />
      <MemberSignature Language="F#" Value="member this.InsertEmptyPoints : double * System.Windows.Forms.DataVisualization.Charting.IntervalType * double * System.Windows.Forms.DataVisualization.Charting.IntervalType * double * double * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.InsertEmptyPoints (interval, intervalType, intervalOffset, intervalOffsetType, fromXValue, toXValue, series)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
        <Parameter Name="intervalType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="intervalOffset" Type="System.Double" />
        <Parameter Name="intervalOffsetType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="fromXValue" Type="System.Double" />
        <Parameter Name="toXValue" Type="System.Double" />
        <Parameter Name="series" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="interval">Die Größe des Intervalls, das auf fehlende Datenpunkte überprüft wird.</param>
        <param name="intervalType">Die Maßeinheit für den <paramref name="interval" />-Parameter.</param>
        <param name="intervalOffset">Die Größe des Intervalloffsets.</param>
        <param name="intervalOffsetType">Die Maßeinheit für den Intervalloffset.</param>
        <param name="fromXValue">Der Anfangspunkt des zu überprüfenden Reihenbereichs. Verwendet die x-Werte der Datenpunkte.</param>
        <param name="toXValue">Der Endpunkt des zu überprüfenden Reihenbereichs. Verwendet die x-Werte der Datenpunkte.</param>
        <param name="series">Die <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />, in die die leeren Punkte eingefügt werden sollen.</param>
        <summary>Ersetzt die fehlenden Datenpunkte in einer Reihe durch leere Punkte. Die Reihe wird für ein angegebenes Intervall überprüft, das durch die Argumente <paramref name="interval" />, <paramref name="intervalOffset" />, <paramref name="intervalOffsetType" /> und <paramref name="intervalType" /> bestimmt wird. Der zu überprüfende Reihenbereich wird durch das <paramref name="toXValue" />-Argument und das <paramref name="fromXValue" />-Argument bestimmt.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Sort">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Führt eine benutzerdefinierte Sortierung der Datenpunkte in mindestens einer Reihe aus.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (System.Collections.Generic.IComparer&lt;System.Windows.Forms.DataVisualization.Charting.DataPoint&gt; comparer, string seriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(class System.Collections.Generic.IComparer`1&lt;class System.Windows.Forms.DataVisualization.Charting.DataPoint&gt; comparer, string seriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Sort(System.Collections.Generic.IComparer{System.Windows.Forms.DataVisualization.Charting.DataPoint},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (comparer As IComparer(Of DataPoint), seriesName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(System::Collections::Generic::IComparer&lt;System::Windows::Forms::DataVisualization::Charting::DataPoint ^&gt; ^ comparer, System::String ^ seriesName);" />
      <MemberSignature Language="F#" Value="member this.Sort : System.Collections.Generic.IComparer&lt;System.Windows.Forms.DataVisualization.Charting.DataPoint&gt; * string -&gt; unit" Usage="dataManipulator.Sort (comparer, seriesName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;System.Windows.Forms.DataVisualization.Charting.DataPoint&gt;" />
        <Parameter Name="seriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="comparer">Ein Objekt, das die <see cref="T:System.Collections.IComparer" />-Schnittstelle implementiert und die benutzerdefinierte Sortierlogik bereitstellt.</param>
        <param name="seriesName">Eine durch Trennzeichen getrennte Liste von Namen der zu sortierenden <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />.</param>
        <summary>Führt eine benutzerdefinierte Sortierung der Datenpunkte in mindestens einer Reihe aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode führt eine benutzerdefinierte Sortierung der Datenpunkte in einer oder mehreren Reihen aus. die Sortier Logik wird durch den- `comparer` Parameter definiert. Überschreiben und implementieren Sie die- <xref:System.Collections.IComparer.Compare%2A> Methode der- <xref:System.Collections.IComparer> Schnittstelle, führen Sie die Vergleiche aus, und geben Sie dann `true` oder zurück `false` . Die Sortierreihenfolge wird durch den Rückgabewert bestimmt.  
  
 Beachten Sie Folgendes: Wenn mehrere Reihen sortiert sind, muss die Reihe ausgerichtet werden. andernfalls wird eine Ausnahme ausgelöst.  
  
 Die zwei Objekt Parameter der- <xref:System.Collections.IComparer.Compare%2A> Methode müssen immer vom Typ sein <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> .  
  
> [!IMPORTANT]
>  Alle Datenpunkte, unabhängig von der Reihe, zu der Sie gehören, werden basierend auf der ersten Reihe sortiert. Wenn sich die Position eines Daten Punkts in der ersten Reihe ändert, ändern sich auch alle entsprechenden Punkte in der anderen Serie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (System.Collections.Generic.IComparer&lt;System.Windows.Forms.DataVisualization.Charting.DataPoint&gt; comparer, System.Windows.Forms.DataVisualization.Charting.Series series);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(class System.Collections.Generic.IComparer`1&lt;class System.Windows.Forms.DataVisualization.Charting.DataPoint&gt; comparer, class System.Windows.Forms.DataVisualization.Charting.Series series) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Sort(System.Collections.Generic.IComparer{System.Windows.Forms.DataVisualization.Charting.DataPoint},System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (comparer As IComparer(Of DataPoint), series As Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(System::Collections::Generic::IComparer&lt;System::Windows::Forms::DataVisualization::Charting::DataPoint ^&gt; ^ comparer, System::Windows::Forms::DataVisualization::Charting::Series ^ series);" />
      <MemberSignature Language="F#" Value="member this.Sort : System.Collections.Generic.IComparer&lt;System.Windows.Forms.DataVisualization.Charting.DataPoint&gt; * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.Sort (comparer, series)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;System.Windows.Forms.DataVisualization.Charting.DataPoint&gt;" />
        <Parameter Name="series" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="comparer">Ein Objekt, das die <see cref="T:System.Collections.IComparer" />-Schnittstelle implementiert und die benutzerdefinierte Sortierlogik bereitstellt.</param>
        <param name="series">Das zu sortierende <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekt.</param>
        <summary>Führt eine benutzerdefinierte Sortierung der Datenpunkte in einer Reihe aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode führt eine benutzerdefinierte Sortierung der Datenpunkte in einer Reihe aus. die Sortier Logik wird durch den- `comparer` Parameter definiert. Überschreiben und implementieren Sie die- <xref:System.Collections.IComparer.Compare%2A> Methode der- <xref:System.Collections.IComparer> Schnittstelle, führen Sie die Vergleiche aus, und geben Sie dann `true` oder zurück `false` . Die Sortierreihenfolge wird durch den Rückgabewert bestimmt.  
  
 Die zwei Objekt Parameter der- <xref:System.Collections.IComparer.Compare%2A> Methode müssen immer vom Typ sein <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> .  
  
 Verwenden Sie die-Methode, um eine benutzerdefinierte Sortierung für mehr als eine Reihe pro Funktionsaufrufe auszuführen <xref:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Sort%2A> .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (System.Windows.Forms.DataVisualization.Charting.PointSortOrder pointSortOrder, string seriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(valuetype System.Windows.Forms.DataVisualization.Charting.PointSortOrder pointSortOrder, string seriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Sort(System.Windows.Forms.DataVisualization.Charting.PointSortOrder,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (pointSortOrder As PointSortOrder, seriesName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(System::Windows::Forms::DataVisualization::Charting::PointSortOrder pointSortOrder, System::String ^ seriesName);" />
      <MemberSignature Language="F#" Value="member this.Sort : System.Windows.Forms.DataVisualization.Charting.PointSortOrder * string -&gt; unit" Usage="dataManipulator.Sort (pointSortOrder, seriesName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointSortOrder" Type="System.Windows.Forms.DataVisualization.Charting.PointSortOrder" />
        <Parameter Name="seriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pointSortOrder">Ein <see cref="T:System.Windows.Forms.DataVisualization.Charting.PointSortOrder" />-Enumerationswert, der bestimmt, ob die Sortierung aufsteigend oder absteigend erfolgt.</param>
        <param name="seriesName">Eine durch Trennzeichen getrennte Liste von Namen der zu sortierenden <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />.</param>
        <summary>Führt eine Sortierung der Datenpunkte in einer oder mehreren Reihen in der angegebenen Reihenfolge aus. Die Sortierung beruht auf dem ersten y-Wert jedes Datenpunkts.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (System.Windows.Forms.DataVisualization.Charting.PointSortOrder pointSortOrder, System.Windows.Forms.DataVisualization.Charting.Series series);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(valuetype System.Windows.Forms.DataVisualization.Charting.PointSortOrder pointSortOrder, class System.Windows.Forms.DataVisualization.Charting.Series series) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Sort(System.Windows.Forms.DataVisualization.Charting.PointSortOrder,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (pointSortOrder As PointSortOrder, series As Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(System::Windows::Forms::DataVisualization::Charting::PointSortOrder pointSortOrder, System::Windows::Forms::DataVisualization::Charting::Series ^ series);" />
      <MemberSignature Language="F#" Value="member this.Sort : System.Windows.Forms.DataVisualization.Charting.PointSortOrder * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.Sort (pointSortOrder, series)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointSortOrder" Type="System.Windows.Forms.DataVisualization.Charting.PointSortOrder" />
        <Parameter Name="series" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="pointSortOrder">Ein <see cref="T:System.Windows.Forms.DataVisualization.Charting.PointSortOrder" />-Enumerationswert, der bestimmt, ob die Sortierung aufsteigend oder absteigend erfolgt.</param>
        <param name="series">Das zu sortierende <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekt.</param>
        <summary>Führt eine Sortierung der Datenpunkte in einer Reihe in der angegebenen Reihenfolge aus. Die Sortierung beruht auf dem ersten y-Wert jedes Datenpunkts.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (System.Windows.Forms.DataVisualization.Charting.PointSortOrder pointSortOrder, string sortBy, string seriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(valuetype System.Windows.Forms.DataVisualization.Charting.PointSortOrder pointSortOrder, string sortBy, string seriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Sort(System.Windows.Forms.DataVisualization.Charting.PointSortOrder,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (pointSortOrder As PointSortOrder, sortBy As String, seriesName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(System::Windows::Forms::DataVisualization::Charting::PointSortOrder pointSortOrder, System::String ^ sortBy, System::String ^ seriesName);" />
      <MemberSignature Language="F#" Value="member this.Sort : System.Windows.Forms.DataVisualization.Charting.PointSortOrder * string * string -&gt; unit" Usage="dataManipulator.Sort (pointSortOrder, sortBy, seriesName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointSortOrder" Type="System.Windows.Forms.DataVisualization.Charting.PointSortOrder" />
        <Parameter Name="sortBy" Type="System.String" />
        <Parameter Name="seriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pointSortOrder">Ein <see cref="T:System.Windows.Forms.DataVisualization.Charting.PointSortOrder" />-Enumerationswert, der bestimmt, ob die Sortierung aufsteigend oder absteigend erfolgt.</param>
        <param name="sortBy">Ein <see langword="string" />-Wert, der die zu sortierenden Datenpunktwerte darstellt. Mögliche Werte: "X", "Y", "Y2", "Y3", "AxisLabel" usw.</param>
        <param name="seriesName">Eine durch Trennzeichen getrennte Liste von Namen der zu sortierenden <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />.</param>
        <summary>Führt eine Sortierung der Datenpunkte in einer oder mehreren Reihen in der angegebenen Reihenfolge aus. Die Sortierung kann auf einem beliebigen verfügbaren Datenpunktwert beruhen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode führt eine aufsteigende oder absteigende Sortierung an Datenpunkten in einer Reihe durch und basiert auf dem Wert, der im Parameter festgelegt wird, `sortBy` z. b. "X", "AxisLabel", "Y", "Y1" usw.  
  
 Beachten Sie Folgendes: Wenn mehrere Reihen sortiert sind, muss die Reihe ausgerichtet werden. andernfalls wird eine Ausnahme ausgelöst.  
  
> [!IMPORTANT]
>  Alle Reihen werden mit dem angegebenen Y-Wert aus der ersten aufgelisteten Reihe sortiert. Das heißt, dass alle Datenpunkte, unabhängig von der Reihe, zu der Sie gehören, basierend auf der ersten Reihe sortiert werden.  
  
 Um Punkte mithilfe einer benutzerdefinierten Sortier Routine zu sortieren, verwenden Sie eine andere Definition dieser überladenen Methode.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (System.Windows.Forms.DataVisualization.Charting.PointSortOrder pointSortOrder, string sortBy, System.Windows.Forms.DataVisualization.Charting.Series series);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(valuetype System.Windows.Forms.DataVisualization.Charting.PointSortOrder pointSortOrder, string sortBy, class System.Windows.Forms.DataVisualization.Charting.Series series) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Sort(System.Windows.Forms.DataVisualization.Charting.PointSortOrder,System.String,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (pointSortOrder As PointSortOrder, sortBy As String, series As Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(System::Windows::Forms::DataVisualization::Charting::PointSortOrder pointSortOrder, System::String ^ sortBy, System::Windows::Forms::DataVisualization::Charting::Series ^ series);" />
      <MemberSignature Language="F#" Value="member this.Sort : System.Windows.Forms.DataVisualization.Charting.PointSortOrder * string * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.Sort (pointSortOrder, sortBy, series)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointSortOrder" Type="System.Windows.Forms.DataVisualization.Charting.PointSortOrder" />
        <Parameter Name="sortBy" Type="System.String" />
        <Parameter Name="series" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="pointSortOrder">Ein <see cref="T:System.Windows.Forms.DataVisualization.Charting.PointSortOrder" />-Enumerationswert, der bestimmt, ob die Sortierung aufsteigend oder absteigend erfolgt.</param>
        <param name="sortBy">Ein <see langword="string" />-Wert, der die zu sortierenden Datenpunktwerte darstellt. Mögliche Werte: "X", "Y", "Y2", "Y3", "AxisLabel" usw.</param>
        <param name="series">Das zu sortierende <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />-Objekt.</param>
        <summary>Führt eine Sortierung der Datenpunkte in einer Reihe in der angegebenen Reihenfolge aus. Die Sortierung kann auf einem beliebigen verfügbaren Datenpunktwert beruhen.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

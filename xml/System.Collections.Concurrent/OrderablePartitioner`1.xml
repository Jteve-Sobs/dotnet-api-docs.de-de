<Type Name="OrderablePartitioner&lt;TSource&gt;" FullName="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="de2f7ca1f9ad8cde63f18b23657bb6edef4fdab4" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86780319" /></Metadata><TypeSignature Language="C#" Value="public abstract class OrderablePartitioner&lt;TSource&gt; : System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit OrderablePartitioner`1&lt;TSource&gt; extends System.Collections.Concurrent.Partitioner`1&lt;!TSource&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Concurrent.OrderablePartitioner`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class OrderablePartitioner(Of TSource)&#xA;Inherits Partitioner(Of TSource)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TSource&gt;&#xA;public ref class OrderablePartitioner abstract : System::Collections::Concurrent::Partitioner&lt;TSource&gt;" />
  <TypeSignature Language="F#" Value="type OrderablePartitioner&lt;'Source&gt; = class&#xA;    inherit Partitioner&lt;'Source&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Concurrent</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.14.0</AssemblyVersion>
    <AssemblyVersion>4.0.15.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Collections.Concurrent" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Collections.Concurrent" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="TSource" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Collections.Concurrent.Partitioner&lt;TSource&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="TSource">TSource</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TSource"><span data-ttu-id="0d498-101">Typ der Elemente in der Auflistung.</span><span class="sxs-lookup"><span data-stu-id="0d498-101">Type of the elements in the collection.</span></span></typeparam>
    <summary><span data-ttu-id="0d498-102">Stellt eine bestimmte Methode dar, mit der eine sortierbare Datenquelle in mehrere Partitionen aufgeteilt wird.</span><span class="sxs-lookup"><span data-stu-id="0d498-102">Represents a particular manner of splitting an orderable data source into multiple partitions.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d498-103">Die Implementierung der abgeleiteten Klasse ist dafür verantwortlich, die Elemente in einer beliebigen Weise in Schlüssel-Wert-Paaren anzuordnen.</span><span class="sxs-lookup"><span data-stu-id="0d498-103">The implementation of the derived class is responsible for ordering the elements into key-value pairs in whatever manner is appropriate.</span></span> <span data-ttu-id="0d498-104">Weitere Informationen finden Sie unter [Custom Partitioners for PLINQ and TPL (Benutzerdefinierte Partitionierer für PLINQ und TPL)](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span><span class="sxs-lookup"><span data-stu-id="0d498-104">For more information, see [Custom Partitioners for PLINQ and TPL](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0d498-105">Im folgenden Beispiel wird gezeigt, wie ein sortierbaren-partiierer implementiert wird, der jeweils ein Element zurückgibt:</span><span class="sxs-lookup"><span data-stu-id="0d498-105">The following example shows how to implement an orderable partitioner that returns one element at a time:</span></span>  
  
 [!code-csharp[System.Collections.Concurrent.OrderablePartitioner#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.concurrent.orderablepartitioner/cs/orderablepartitioner.cs#1)]
 [!code-vb[System.Collections.Concurrent.OrderablePartitioner#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.concurrent.orderablepartitioner/vb/orderablepartitioner.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="0d498-106">Alle öffentlichen Member von <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> sind Thread sicher und können von mehreren Threads gleichzeitig aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="0d498-106">All public members of <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> are thread-safe and may be called from multiple threads concurrently.</span></span></threadsafe>
    <related type="Article" href="/dotnet/standard/parallel-programming/how-to-speed-up-small-loop-bodies"><span data-ttu-id="0d498-107">Vorgehensweise: Beschleunigen von kurzen Schleifenkörpern</span><span class="sxs-lookup"><span data-stu-id="0d498-107">How to: Speed Up Small Loop Bodies</span></span></related>
    <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-dynamic-partitions"><span data-ttu-id="0d498-108">Vorgehensweise: Implementieren von dynamischen Partitionen</span><span class="sxs-lookup"><span data-stu-id="0d498-108">How to: Implement Dynamic Partitions</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected OrderablePartitioner (bool keysOrderedInEachPartition, bool keysOrderedAcrossPartitions, bool keysNormalized);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(bool keysOrderedInEachPartition, bool keysOrderedAcrossPartitions, bool keysNormalized) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.OrderablePartitioner`1.#ctor(System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (keysOrderedInEachPartition As Boolean, keysOrderedAcrossPartitions As Boolean, keysNormalized As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; OrderablePartitioner(bool keysOrderedInEachPartition, bool keysOrderedAcrossPartitions, bool keysNormalized);" />
      <MemberSignature Language="F#" Value="new System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; : bool * bool * bool -&gt; System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt;" Usage="new System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; (keysOrderedInEachPartition, keysOrderedAcrossPartitions, keysNormalized)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="keysOrderedInEachPartition" Type="System.Boolean" />
        <Parameter Name="keysOrderedAcrossPartitions" Type="System.Boolean" />
        <Parameter Name="keysNormalized" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="keysOrderedInEachPartition"><span data-ttu-id="0d498-109">Gibt an, ob die Elemente in jeder Partition in der Reihenfolge zunehmender Schlüssel zurückgegeben werden.</span><span class="sxs-lookup"><span data-stu-id="0d498-109">Indicates whether the elements in each partition are yielded in the order of increasing keys.</span></span></param>
        <param name="keysOrderedAcrossPartitions"><span data-ttu-id="0d498-110">Gibt an, ob Elemente in einer früheren Partition immer vor Elementen in einer späteren Partition vorkommen.</span><span class="sxs-lookup"><span data-stu-id="0d498-110">Indicates whether elements in an earlier partition always come before elements in a later partition.</span></span> <span data-ttu-id="0d498-111">Wenn true, verfügt jedes Element in Partition 0 über einen kleineren Sortierschlüssel als ein Element in Partition 1, jedes Element in Partition 1 verfügt über einen kleineren Sortierschlüssel als ein Element in Partition 2 usw.</span><span class="sxs-lookup"><span data-stu-id="0d498-111">If true, each element in partition 0 has a smaller order key than any element in partition 1, each element in partition 1 has a smaller order key than any element in partition 2, and so on.</span></span></param>
        <param name="keysNormalized"><span data-ttu-id="0d498-112">Gibt an, ob Schlüssel normalisiert sind.</span><span class="sxs-lookup"><span data-stu-id="0d498-112">Indicates whether keys are normalized.</span></span> <span data-ttu-id="0d498-113">Wenn TRUE, sind alle Sortierschlüssel eindeutige ganze Zahlen im Bereich</span><span class="sxs-lookup"><span data-stu-id="0d498-113">If true, all order keys are distinct integers in the range [0 ..</span></span> <span data-ttu-id="0d498-114">[0..numberOfElements-1].</span><span class="sxs-lookup"><span data-stu-id="0d498-114">numberOfElements-1].</span></span> <span data-ttu-id="0d498-115">Wenn false, müssen Sortierschlüssel immer noch eindeutig sein, allerdings wird nur ihre relative Reihenfolge betrachtet, nicht ihre absoluten Werte.</span><span class="sxs-lookup"><span data-stu-id="0d498-115">If false, order keys must still be distinct, but only their relative order is considered, not their absolute values.</span></span></param>
        <summary><span data-ttu-id="0d498-116">Wird von Konstruktoren in abgeleiteten Klassen aufgerufen, um die <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" />-Klasse mit den angegebenen Einschränkungen für die Indexschlüssel zu initialisieren.</span><span class="sxs-lookup"><span data-stu-id="0d498-116">Called from constructors in derived classes to initialize the <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> class with the specified constraints on the index keys.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d498-117">Weitere Informationen finden Sie unter [Custom Partitioners for PLINQ and TPL (Benutzerdefinierte Partitionierer für PLINQ und TPL)](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span><span class="sxs-lookup"><span data-stu-id="0d498-117">For more information, see [Custom Partitioners for PLINQ and TPL](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl"><span data-ttu-id="0d498-118">Benutzerdefinierte Partitionierer für PLINQ und TPL</span><span class="sxs-lookup"><span data-stu-id="0d498-118">Custom Partitioners for PLINQ and TPL</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-speed-up-small-loop-bodies"><span data-ttu-id="0d498-119">Vorgehensweise: Beschleunigen von kurzen Schleifenkörpern</span><span class="sxs-lookup"><span data-stu-id="0d498-119">How to: Speed Up Small Loop Bodies</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-a-partitioner-for-static-partitioning"><span data-ttu-id="0d498-120">Gewusst wie: Implementieren eines Partitionierers mit einer statischen Anzahl von Partitionen</span><span class="sxs-lookup"><span data-stu-id="0d498-120">How to: Implement a Partitioner With a Static Number of Partitions</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-dynamic-partitions"><span data-ttu-id="0d498-121">Vorgehensweise: Implementieren von dynamischen Partitionen</span><span class="sxs-lookup"><span data-stu-id="0d498-121">How to: Implement Dynamic Partitions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetDynamicPartitions">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IEnumerable&lt;TSource&gt; GetDynamicPartitions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IEnumerable`1&lt;!TSource&gt; GetDynamicPartitions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDynamicPartitions () As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ GetDynamicPartitions();" />
      <MemberSignature Language="F#" Value="override this.GetDynamicPartitions : unit -&gt; seq&lt;'Source&gt;" Usage="orderablePartitioner.GetDynamicPartitions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0d498-122">Erstellt ein Objekt, das die zugrunde liegende Auflistung in eine variable Anzahl von Partitionen partitionieren kann.</span><span class="sxs-lookup"><span data-stu-id="0d498-122">Creates an object that can partition the underlying collection into a variable number of partitions.</span></span></summary>
        <returns><span data-ttu-id="0d498-123">Ein Objekt, das Partitionen über der zugrunde liegenden Datenquelle erstellen kann.</span><span class="sxs-lookup"><span data-stu-id="0d498-123">An object that can create partitions over the underlying data source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d498-124">Das zurückgegebene Objekt implementiert die- <xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType> Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="0d498-124">The returned object implements the <xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType> interface.</span></span> <span data-ttu-id="0d498-125">Durch Aufrufen <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> von für das-Objekt wird eine weitere Partition für die Sequenz erstellt.</span><span class="sxs-lookup"><span data-stu-id="0d498-125">Calling <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the object creates another partition over the sequence.</span></span>  
  
 <span data-ttu-id="0d498-126">Die Standard Implementierung bietet das gleiche Verhalten wie <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderableDynamicPartitions%2A> mit der Ausnahme, dass der zurückgegebene Satz von Partitionen nicht die Schlüssel für die Elemente bereitstellt.</span><span class="sxs-lookup"><span data-stu-id="0d498-126">The default implementation provides the same behavior as <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderableDynamicPartitions%2A> except that the returned set of partitions does not provide the keys for the elements.</span></span>  
  
 <span data-ttu-id="0d498-127">Die- <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetDynamicPartitions%2A> Methode wird nur unterstützt, wenn die- <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> Eigenschaft true zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="0d498-127">The <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetDynamicPartitions%2A> method is only supported if the <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> property returns true.</span></span>  
  
 <span data-ttu-id="0d498-128">Weitere Informationen finden Sie unter [Custom Partitioners for PLINQ and TPL (Benutzerdefinierte Partitionierer für PLINQ und TPL)](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span><span class="sxs-lookup"><span data-stu-id="0d498-128">For more information, see [Custom Partitioners for PLINQ and TPL](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0d498-129">Dynamische Partitionierung wird nicht von der Basisklasse unterstützt.</span><span class="sxs-lookup"><span data-stu-id="0d498-129">Dynamic partitioning is not supported by the base class.</span></span> <span data-ttu-id="0d498-130">Sie muss in abgeleiteten Klassen implementiert werden.</span><span class="sxs-lookup"><span data-stu-id="0d498-130">It must be implemented in derived classes.</span></span></exception>
        <related type="Article" href="/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl"><span data-ttu-id="0d498-131">Benutzerdefinierte Partitionierer für PLINQ und TPL</span><span class="sxs-lookup"><span data-stu-id="0d498-131">Custom Partitioners for PLINQ and TPL</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-speed-up-small-loop-bodies"><span data-ttu-id="0d498-132">Vorgehensweise: Beschleunigen von kurzen Schleifenkörpern</span><span class="sxs-lookup"><span data-stu-id="0d498-132">How to: Speed Up Small Loop Bodies</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-a-partitioner-for-static-partitioning"><span data-ttu-id="0d498-133">Gewusst wie: Implementieren eines Partitionierers mit einer statischen Anzahl von Partitionen</span><span class="sxs-lookup"><span data-stu-id="0d498-133">How to: Implement a Partitioner With a Static Number of Partitions</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-dynamic-partitions"><span data-ttu-id="0d498-134">Vorgehensweise: Implementieren von dynamischen Partitionen</span><span class="sxs-lookup"><span data-stu-id="0d498-134">How to: Implement Dynamic Partitions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetOrderableDynamicPartitions">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;long,TSource&gt;&gt; GetOrderableDynamicPartitions ();" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;int64, !TSource&gt;&gt; GetOrderableDynamicPartitions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOrderableDynamicPartitions () As IEnumerable(Of KeyValuePair(Of Long, TSource))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;long, TSource&gt;&gt; ^ GetOrderableDynamicPartitions();" />
      <MemberSignature Language="F#" Value="abstract member GetOrderableDynamicPartitions : unit -&gt; seq&lt;System.Collections.Generic.KeyValuePair&lt;int64, 'Source&gt;&gt;&#xA;override this.GetOrderableDynamicPartitions : unit -&gt; seq&lt;System.Collections.Generic.KeyValuePair&lt;int64, 'Source&gt;&gt;" Usage="orderablePartitioner.GetOrderableDynamicPartitions " />
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;long,TSource&gt;&gt;? GetOrderableDynamicPartitions ();" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.Int64,TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0d498-135">Erstellt ein Objekt, das die zugrunde liegende Auflistung in eine variable Anzahl von Partitionen partitionieren kann.</span><span class="sxs-lookup"><span data-stu-id="0d498-135">Creates an object that can partition the underlying collection into a variable number of partitions.</span></span></summary>
        <returns><span data-ttu-id="0d498-136">Ein Objekt, das Partitionen über der zugrunde liegenden Datenquelle erstellen kann.</span><span class="sxs-lookup"><span data-stu-id="0d498-136">An object that can create partitions over the underlying data source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d498-137">Das zurückgegebene Objekt implementiert die- <xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType> Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="0d498-137">The returned object implements the <xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType> interface.</span></span> <span data-ttu-id="0d498-138">Durch Aufrufen <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> von für das-Objekt wird eine weitere Partition für die Sequenz erstellt.</span><span class="sxs-lookup"><span data-stu-id="0d498-138">Calling <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the object creates another partition over the sequence.</span></span>  
  
 <span data-ttu-id="0d498-139">Jede Partition wird als Enumerator für Schlüssel-Wert-Paare dargestellt.</span><span class="sxs-lookup"><span data-stu-id="0d498-139">Each partition is represented as an enumerator over key-value pairs.</span></span> <span data-ttu-id="0d498-140">Der Wert im Paar ist das-Element selbst, und der Schlüssel ist eine ganze Zahl, die die relative Reihenfolge dieses Elements gegen andere Elemente bestimmt.</span><span class="sxs-lookup"><span data-stu-id="0d498-140">The value in the pair is the element itself, and the key is an integer which determines the relative ordering of this element against other elements.</span></span>  
  
 <span data-ttu-id="0d498-141">Die- <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderableDynamicPartitions%2A> Methode wird nur unterstützt, wenn die- <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> Eigenschaft true zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="0d498-141">The <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderableDynamicPartitions%2A> method is only supported if the <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> property returns true.</span></span>  
  
 <span data-ttu-id="0d498-142">Weitere Informationen finden Sie unter [Custom Partitioners for PLINQ and TPL (Benutzerdefinierte Partitionierer für PLINQ und TPL)](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span><span class="sxs-lookup"><span data-stu-id="0d498-142">For more information, see [Custom Partitioners for PLINQ and TPL](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0d498-143">Dynamische Partitionierung wird nicht von diesem Partitionierer unterstützt.</span><span class="sxs-lookup"><span data-stu-id="0d498-143">Dynamic partitioning is not supported by this partitioner.</span></span></exception>
        <related type="Article" href="/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl"><span data-ttu-id="0d498-144">Benutzerdefinierte Partitionierer für PLINQ und TPL</span><span class="sxs-lookup"><span data-stu-id="0d498-144">Custom Partitioners for PLINQ and TPL</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-speed-up-small-loop-bodies"><span data-ttu-id="0d498-145">Vorgehensweise: Beschleunigen von kurzen Schleifenkörpern</span><span class="sxs-lookup"><span data-stu-id="0d498-145">How to: Speed Up Small Loop Bodies</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-a-partitioner-for-static-partitioning"><span data-ttu-id="0d498-146">Gewusst wie: Implementieren eines Partitionierers mit einer statischen Anzahl von Partitionen</span><span class="sxs-lookup"><span data-stu-id="0d498-146">How to: Implement a Partitioner With a Static Number of Partitions</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-dynamic-partitions"><span data-ttu-id="0d498-147">Vorgehensweise: Implementieren von dynamischen Partitionen</span><span class="sxs-lookup"><span data-stu-id="0d498-147">How to: Implement Dynamic Partitions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetOrderablePartitions">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IList&lt;System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;long,TSource&gt;&gt;&gt; GetOrderablePartitions (int partitionCount);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Collections.Generic.IEnumerator`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;int64, !TSource&gt;&gt;&gt; GetOrderablePartitions(int32 partitionCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetOrderablePartitions (partitionCount As Integer) As IList(Of IEnumerator(Of KeyValuePair(Of Long, TSource)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IList&lt;System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;long, TSource&gt;&gt; ^&gt; ^ GetOrderablePartitions(int partitionCount);" />
      <MemberSignature Language="F#" Value="abstract member GetOrderablePartitions : int -&gt; System.Collections.Generic.IList&lt;System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;int64, 'Source&gt;&gt;&gt;" Usage="orderablePartitioner.GetOrderablePartitions partitionCount" />
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IList&lt;System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;long,TSource&gt;&gt;&gt;? GetOrderablePartitions (int partitionCount);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;System.Int64,TSource&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="partitionCount"><span data-ttu-id="0d498-148">Die Anzahl der zu erstellenden Partitionen.</span><span class="sxs-lookup"><span data-stu-id="0d498-148">The number of partitions to create.</span></span></param>
        <summary><span data-ttu-id="0d498-149">Partitioniert die zugrunde liegende Auflistung in die angegebene Anzahl sortierbarer Partitionen.</span><span class="sxs-lookup"><span data-stu-id="0d498-149">Partitions the underlying collection into the specified number of orderable partitions.</span></span></summary>
        <returns><span data-ttu-id="0d498-150">Eine Liste, die <paramref name="partitionCount" />-Enumeratoren enthält.</span><span class="sxs-lookup"><span data-stu-id="0d498-150">A list containing <paramref name="partitionCount" /> enumerators.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d498-151">Jede Partition wird als Enumerator für Schlüssel-Wert-Paare dargestellt.</span><span class="sxs-lookup"><span data-stu-id="0d498-151">Each partition is represented as an enumerator over key-value pairs.</span></span>  
  
 <span data-ttu-id="0d498-152">Der Wert des Paars ist das-Element selbst, und der Schlüssel ist eine ganze Zahl, die die relative Reihenfolge dieses Elements für andere Elemente in der Datenquelle bestimmt.</span><span class="sxs-lookup"><span data-stu-id="0d498-152">The value of the pair is the element itself, and the key is an integer which determines the relative ordering of this element against other elements in the data source.</span></span>  
  
 <span data-ttu-id="0d498-153">Weitere Informationen finden Sie unter [Custom Partitioners for PLINQ and TPL (Benutzerdefinierte Partitionierer für PLINQ und TPL)](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span><span class="sxs-lookup"><span data-stu-id="0d498-153">For more information, see [Custom Partitioners for PLINQ and TPL](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl"><span data-ttu-id="0d498-154">Benutzerdefinierte Partitionierer für PLINQ und TPL</span><span class="sxs-lookup"><span data-stu-id="0d498-154">Custom Partitioners for PLINQ and TPL</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-speed-up-small-loop-bodies"><span data-ttu-id="0d498-155">Vorgehensweise: Beschleunigen von kurzen Schleifenkörpern</span><span class="sxs-lookup"><span data-stu-id="0d498-155">How to: Speed Up Small Loop Bodies</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-a-partitioner-for-static-partitioning"><span data-ttu-id="0d498-156">Gewusst wie: Implementieren eines Partitionierers mit einer statischen Anzahl von Partitionen</span><span class="sxs-lookup"><span data-stu-id="0d498-156">How to: Implement a Partitioner With a Static Number of Partitions</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-dynamic-partitions"><span data-ttu-id="0d498-157">Vorgehensweise: Implementieren von dynamischen Partitionen</span><span class="sxs-lookup"><span data-stu-id="0d498-157">How to: Implement Dynamic Partitions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetPartitions">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IList&lt;System.Collections.Generic.IEnumerator&lt;TSource&gt;&gt; GetPartitions (int partitionCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IList`1&lt;class System.Collections.Generic.IEnumerator`1&lt;!TSource&gt;&gt; GetPartitions(int32 partitionCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPartitions (partitionCount As Integer) As IList(Of IEnumerator(Of TSource))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Collections::Generic::IList&lt;System::Collections::Generic::IEnumerator&lt;TSource&gt; ^&gt; ^ GetPartitions(int partitionCount);" />
      <MemberSignature Language="F#" Value="override this.GetPartitions : int -&gt; System.Collections.Generic.IList&lt;System.Collections.Generic.IEnumerator&lt;'Source&gt;&gt;" Usage="orderablePartitioner.GetPartitions partitionCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Collections.Generic.IEnumerator&lt;TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="partitionCount"><span data-ttu-id="0d498-158">Die Anzahl der zu erstellenden Partitionen.</span><span class="sxs-lookup"><span data-stu-id="0d498-158">The number of partitions to create.</span></span></param>
        <summary><span data-ttu-id="0d498-159">Partitioniert die zugrunde liegende Auflistung in die angegebene Anzahl geordneter Partitionen.</span><span class="sxs-lookup"><span data-stu-id="0d498-159">Partitions the underlying collection into the given number of ordered partitions.</span></span></summary>
        <returns><span data-ttu-id="0d498-160">Eine Liste, die <paramref name="partitionCount" />-Enumeratoren enthält.</span><span class="sxs-lookup"><span data-stu-id="0d498-160">A list containing <paramref name="partitionCount" /> enumerators.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d498-161">Die Standard Implementierung bietet das gleiche Verhalten wie <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderablePartitions%2A> mit der Ausnahme, dass der zurückgegebene Satz von Partitionen nicht die Schlüssel für die Elemente bereitstellt.</span><span class="sxs-lookup"><span data-stu-id="0d498-161">The default implementation provides the same behavior as <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderablePartitions%2A> except that the returned set of partitions does not provide the keys for the elements.</span></span>  
  
 <span data-ttu-id="0d498-162">Weitere Informationen finden Sie unter [Custom Partitioners for PLINQ and TPL (Benutzerdefinierte Partitionierer für PLINQ und TPL)](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span><span class="sxs-lookup"><span data-stu-id="0d498-162">For more information, see [Custom Partitioners for PLINQ and TPL](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl"><span data-ttu-id="0d498-163">Benutzerdefinierte Partitionierer für PLINQ und TPL</span><span class="sxs-lookup"><span data-stu-id="0d498-163">Custom Partitioners for PLINQ and TPL</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-speed-up-small-loop-bodies"><span data-ttu-id="0d498-164">Vorgehensweise: Beschleunigen von kurzen Schleifenkörpern</span><span class="sxs-lookup"><span data-stu-id="0d498-164">How to: Speed Up Small Loop Bodies</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-a-partitioner-for-static-partitioning"><span data-ttu-id="0d498-165">Gewusst wie: Implementieren eines Partitionierers mit einer statischen Anzahl von Partitionen</span><span class="sxs-lookup"><span data-stu-id="0d498-165">How to: Implement a Partitioner With a Static Number of Partitions</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-dynamic-partitions"><span data-ttu-id="0d498-166">Vorgehensweise: Implementieren von dynamischen Partitionen</span><span class="sxs-lookup"><span data-stu-id="0d498-166">How to: Implement Dynamic Partitions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="KeysNormalized">
      <MemberSignature Language="C#" Value="public bool KeysNormalized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeysNormalized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeysNormalized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool KeysNormalized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.KeysNormalized : bool" Usage="System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt;.KeysNormalized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0d498-167">Ruft ab, ob Sortierschlüssel normalisiert sind.</span><span class="sxs-lookup"><span data-stu-id="0d498-167">Gets whether order keys are normalized.</span></span></summary>
        <value><span data-ttu-id="0d498-168"><see langword="true" /> , wenn die Schlüssel normalisiert sind. andernfalls <see langword="false" /> .</span><span class="sxs-lookup"><span data-stu-id="0d498-168"><see langword="true" /> if the keys are normalized; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d498-169">Wenn <xref:System.Collections.Concurrent.OrderablePartitioner%601.KeysNormalized%2A> true zurückgibt, sind alle Auftrags Schlüssel unterschiedliche ganze Zahlen im Bereich [0..</span><span class="sxs-lookup"><span data-stu-id="0d498-169">If <xref:System.Collections.Concurrent.OrderablePartitioner%601.KeysNormalized%2A> returns true, all order keys are distinct integers in the range [0 ..</span></span> <span data-ttu-id="0d498-170">[0..numberOfElements-1].</span><span class="sxs-lookup"><span data-stu-id="0d498-170">numberOfElements-1].</span></span> <span data-ttu-id="0d498-171">Wenn die Eigenschaft false zurückgibt, müssen die Reihenfolge der Schlüssel weiterhin eindeutig sein, aber nur ihre relative Reihenfolge wird berücksichtigt, nicht Ihre absoluten Werte.</span><span class="sxs-lookup"><span data-stu-id="0d498-171">If the property returns false, order keys must still be distinct, but only their relative order is considered, not their absolute values.</span></span>  
  
 <span data-ttu-id="0d498-172">Weitere Informationen finden Sie unter [Custom Partitioners for PLINQ and TPL (Benutzerdefinierte Partitionierer für PLINQ und TPL)](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span><span class="sxs-lookup"><span data-stu-id="0d498-172">For more information, see [Custom Partitioners for PLINQ and TPL](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeysOrderedAcrossPartitions">
      <MemberSignature Language="C#" Value="public bool KeysOrderedAcrossPartitions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeysOrderedAcrossPartitions" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeysOrderedAcrossPartitions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool KeysOrderedAcrossPartitions { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.KeysOrderedAcrossPartitions : bool" Usage="System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt;.KeysOrderedAcrossPartitions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0d498-173">Ruft ab, ob Elemente in einer früheren Partition immer vor Elementen in einer späteren Partition vorkommen.</span><span class="sxs-lookup"><span data-stu-id="0d498-173">Gets whether elements in an earlier partition always come before elements in a later partition.</span></span></summary>
        <value><span data-ttu-id="0d498-174"><see langword="true" /> , wenn die Elemente in einer früheren Partition immer vor Elementen in einer späteren Partition stehen. andernfalls <see langword="false" /> .</span><span class="sxs-lookup"><span data-stu-id="0d498-174"><see langword="true" /> if the elements in an earlier partition always come before elements in a later partition; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d498-175">Wenn <xref:System.Collections.Concurrent.OrderablePartitioner%601.KeysOrderedAcrossPartitions%2A> true zurückgibt, hat jedes Element in Partition 0 einen kleineren Sortierschlüssel als ein beliebiges Element in Partition 1, jedes Element in Partition 1 hat einen kleineren Sortierschlüssel als ein beliebiges Element in Partition 2 usw.</span><span class="sxs-lookup"><span data-stu-id="0d498-175">If <xref:System.Collections.Concurrent.OrderablePartitioner%601.KeysOrderedAcrossPartitions%2A> returns true, each element in partition 0 has a smaller order key than any element in partition 1, each element in partition 1 has a smaller order key than any element in partition 2, and so on.</span></span>  
  
 <span data-ttu-id="0d498-176">Weitere Informationen finden Sie unter [Custom Partitioners for PLINQ and TPL (Benutzerdefinierte Partitionierer für PLINQ und TPL)](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span><span class="sxs-lookup"><span data-stu-id="0d498-176">For more information, see [Custom Partitioners for PLINQ and TPL](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl"><span data-ttu-id="0d498-177">Benutzerdefinierte Partitionierer für PLINQ und TPL</span><span class="sxs-lookup"><span data-stu-id="0d498-177">Custom Partitioners for PLINQ and TPL</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-speed-up-small-loop-bodies"><span data-ttu-id="0d498-178">Vorgehensweise: Beschleunigen von kurzen Schleifenkörpern</span><span class="sxs-lookup"><span data-stu-id="0d498-178">How to: Speed Up Small Loop Bodies</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-a-partitioner-for-static-partitioning"><span data-ttu-id="0d498-179">Gewusst wie: Implementieren eines Partitionierers mit einer statischen Anzahl von Partitionen</span><span class="sxs-lookup"><span data-stu-id="0d498-179">How to: Implement a Partitioner With a Static Number of Partitions</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-dynamic-partitions"><span data-ttu-id="0d498-180">Vorgehensweise: Implementieren von dynamischen Partitionen</span><span class="sxs-lookup"><span data-stu-id="0d498-180">How to: Implement Dynamic Partitions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="KeysOrderedInEachPartition">
      <MemberSignature Language="C#" Value="public bool KeysOrderedInEachPartition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeysOrderedInEachPartition" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeysOrderedInEachPartition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool KeysOrderedInEachPartition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.KeysOrderedInEachPartition : bool" Usage="System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt;.KeysOrderedInEachPartition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0d498-181">Ruft ab, ob Elemente in jeder Partition in der Reihenfolge zunehmender Schlüssel zurückgegeben werden.</span><span class="sxs-lookup"><span data-stu-id="0d498-181">Gets whether elements in each partition are yielded in the order of increasing keys.</span></span></summary>
        <value><span data-ttu-id="0d498-182"><see langword="true" /> , wenn die Elemente in jeder Partition in der Reihenfolge der zunehmenden Schlüssel zurückgegeben werden. andernfalls <see langword="false" /> .</span><span class="sxs-lookup"><span data-stu-id="0d498-182"><see langword="true" /> if the elements in each partition are yielded in the order of increasing keys; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d498-183">Weitere Informationen finden Sie unter [Custom Partitioners for PLINQ and TPL (Benutzerdefinierte Partitionierer für PLINQ und TPL)](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span><span class="sxs-lookup"><span data-stu-id="0d498-183">For more information, see [Custom Partitioners for PLINQ and TPL](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl"><span data-ttu-id="0d498-184">Benutzerdefinierte Partitionierer für PLINQ und TPL</span><span class="sxs-lookup"><span data-stu-id="0d498-184">Custom Partitioners for PLINQ and TPL</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-speed-up-small-loop-bodies"><span data-ttu-id="0d498-185">Vorgehensweise: Beschleunigen von kurzen Schleifenkörpern</span><span class="sxs-lookup"><span data-stu-id="0d498-185">How to: Speed Up Small Loop Bodies</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-a-partitioner-for-static-partitioning"><span data-ttu-id="0d498-186">Gewusst wie: Implementieren eines Partitionierers mit einer statischen Anzahl von Partitionen</span><span class="sxs-lookup"><span data-stu-id="0d498-186">How to: Implement a Partitioner With a Static Number of Partitions</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-dynamic-partitions"><span data-ttu-id="0d498-187">Vorgehensweise: Implementieren von dynamischen Partitionen</span><span class="sxs-lookup"><span data-stu-id="0d498-187">How to: Implement Dynamic Partitions</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>

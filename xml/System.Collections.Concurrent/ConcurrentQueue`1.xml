<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ConcurrentQueue`1.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac592d93820173a88b490f4ddc7494e6c9e4d136c0c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">92d93820173a88b490f4ddc7494e6c9e4d136c0c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Concurrent.ConcurrentQueue`1">
          <source>The type of the elements contained in the queue.</source>
          <target state="translated">Der Typ der Elemente in der Warteschlange.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Collections.Concurrent.ConcurrentQueue`1">
          <source>Represents a thread-safe first in-first out (FIFO) collection.</source>
          <target state="translated">Stellt eine threadsichere FIFO-Auflistung (First-In-First-Out) dar.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Concurrent.ConcurrentQueue`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> implements the <ph id="ph2">&lt;xref:System.Collections.Generic.IReadOnlyCollection%601&gt;</ph> interface starting with the <ph id="ph3">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph>; in previous versions of the .NET Framework, the <ph id="ph4">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> class did not implement this interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> implementiert die <ph id="ph2">&lt;xref:System.Collections.Generic.IReadOnlyCollection%601&gt;</ph> Schnittstelle beginnend mit der <ph id="ph3">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph>; in früheren Versionen von .NET Framework, die <ph id="ph4">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> Klasse implementiert diese Schnittstelle nicht.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Concurrent.ConcurrentQueue`1">
          <source>The following example shows how to use a <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> to enqueue and dequeue items:</source>
          <target state="translated">Das folgende Beispiel zeigt, wie Sie eine <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> in die Warteschlange eingereiht und dequeue-Elemente:</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Concurrent.ConcurrentQueue`1">
          <source>All public and protected members of <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> are thread-safe and may be used concurrently from multiple threads.</source>
          <target state="translated">Alle öffentlichen und geschützten Member der <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> sind threadsicher und können von mehreren Threads gleichzeitig verwendet werden.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="T:System.Collections.Concurrent.ConcurrentQueue`1">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> class.</source>
          <target state="translated">Initialisiert eine neue Instanz der <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>-Klasse.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> class.</source>
          <target state="translated">Initialisiert eine neue Instanz der <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>-Klasse.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The collection whose elements are copied to the new <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</source>
          <target state="translated">Die Auflistung, deren Elemente in die neue <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> kopiert werden.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> class that contains elements copied from the specified collection</source>
          <target state="translated">Initialisiert eine neue Instanz der <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>-Klasse, die aus der angegebenen Auflistung kopierte Elemente enthält.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;paramref name="collection" /&gt;</ph> argument is null.</source>
          <target state="translated">Das <ph id="ph1">&lt;paramref name="collection" /&gt;</ph>-Argument ist null.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from the <ph id="ph2">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</source>
          <target state="translated">Das eindimensionale <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph>, das das Ziel der aus der <ph id="ph2">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> kopierten Elemente ist.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated">Für das <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> muss eine nullbasierte Indizierung verwendet werden.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">Der nullbasierte Index im <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept>, ab dem kopiert wird.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)">
          <source>Copies the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> elements to an existing one-dimensional <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at the specified array index.</source>
          <target state="translated">Kopiert die <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>-Elemente in ein vorhandenes eindimensionales <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, beginnend beim angegebenen Arrayindex.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is a null reference (Nothing in Visual Basic).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> ist ein NULL-Verweis (Nothing in Visual&amp;#160;Basic).</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> ist kleiner als Null.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is equal to or greater than the length of the <ph id="ph2">&lt;paramref name="array" /&gt;</ph> -or- The number of elements in the source <ph id="ph3">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> is greater than the available space from <ph id="ph4">&lt;paramref name="index" /&gt;</ph> to the end of the destination <ph id="ph5">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> ist gleich oder größer als die Länge des <ph id="ph2">&lt;paramref name="array" /&gt;</ph> -oder- die Anzahl der Elemente in der Quell-<ph id="ph3">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> ist größer als der verfügbare Platz von <ph id="ph4">&lt;paramref name="index" /&gt;</ph> bis zum Ende des Ziel-<ph id="ph5">&lt;paramref name="array" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.Count">
          <source>Gets the number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</source>
          <target state="translated">Ruft die Anzahl der Elemente ab, die in <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> enthalten sind.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.Count">
          <source>The number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</source>
          <target state="translated">Die Anzahl der Elemente, die in <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> enthalten sind.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.Count">
          <source>For determining whether the collection contains any items, use of the <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.IsEmpty%2A&gt;</ph> property is recommended rather than retrieving the number of items from the <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.Count%2A&gt;</ph> property and comparing it to 0.</source>
          <target state="translated">Verwenden, um zu bestimmen, ob die Auflistung keine Elemente enthält, der die <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.IsEmpty%2A&gt;</ph> Eigenschaft wird empfohlen, anstatt das Abrufen der Anzahl der Elemente aus der <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.Count%2A&gt;</ph> -Eigenschaft und mit 0 verglichen wird.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.Enqueue(`0)">
          <source>The object to add to the end of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</source>
          <target state="translated">Das Objekt, das am Ende der <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> hinzugefügt werden soll.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.Enqueue(`0)">
          <source>The value can be a null reference (Nothing in Visual Basic) for reference types.</source>
          <target state="translated">Der Wert kann ein NULL-Verweis (Nothing in Visual Basic) für Verweistypen sein.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.Enqueue(`0)">
          <source>Adds an object to the end of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</source>
          <target state="translated">Fügt am Ende der <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> ein Objekt hinzu.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator">
          <source>Returns an enumerator that iterates through the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</source>
          <target state="translated">Gibt einen Enumerator zurück, der die <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> durchläuft.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator">
          <source>An enumerator for the contents of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</source>
          <target state="translated">Ein Enumerator für den Inhalt der <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator">
          <source>The enumeration represents a moment-in-time snapshot of the contents of the queue.</source>
          <target state="translated">Die Enumeration stellt einen Snapshot des Inhalts der Warteschlange.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator">
          <source>It does not reflect any updates to the collection after <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.GetEnumerator%2A&gt;</ph> was called.</source>
          <target state="translated">Reflektiert keine Änderungen an der Auflistung nach <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.GetEnumerator%2A&gt;</ph> aufgerufen wurde.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator">
          <source>The enumerator is safe to use concurrently with reads from and writes to the queue.</source>
          <target state="translated">Der Enumerator sicher gleichzeitig mit der Lesevorgänge vom verwendet wird, und schreibt in die Warteschlange.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator">
          <source>The enumerator returns the collection elements in the order in which they were added, which is FIFO order (first-in, first-out).</source>
          <target state="translated">Der Enumerator gibt die Elemente der Auflistung zurück, in der Reihenfolge in der sie hinzugefügt wurden, die in FIFO-Reihenfolge (First-in-First-Out) ist.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty">
          <source>Gets a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> is empty.</source>
          <target state="translated">Ruft einen Wert ab, der angibt, ob <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> leer ist.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty">
          <source>true if the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> is empty; otherwise, false.</source>
          <target state="translated">True, wenn der <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> leer ist, andernfalls false.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty">
          <source>For determining whether the collection contains any items, use of this property is recommended rather than retrieving the number of items from the <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.Count%2A&gt;</ph> property and comparing it to 0.</source>
          <target state="translated">Bestimmen, ob die Auflistung keine Elemente enthält, die Verwendung dieser Eigenschaft wird empfohlen, anstatt Abrufen der Anzahl der Elemente aus der <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.Count%2A&gt;</ph> -Eigenschaft und mit 0 verglichen wird.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty">
          <source>However, as this collection is intended to be accessed concurrently, it may be the case that another thread will modify the collection after <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.IsEmpty%2A&gt;</ph> returns, thus invalidating the result.</source>
          <target state="translated">Allerdings wie dieser Auflistung gleichzeitig zugegriffen werden soll, es kann der Fall sein, die die Auflistung nach einem anderen Thread ändern, wird <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.IsEmpty%2A&gt;</ph> zurückgegeben wird, daher wird das Ergebnis ungültig gemacht.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryAdd(`0)">
          <source>The object to add to the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /&gt;</ph>.</source>
          <target state="translated">Das Objekt, das <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /&gt;</ph> hinzugefügt werden soll.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryAdd(`0)">
          <source>The value can be a null reference (Nothing in Visual Basic) for reference types.</source>
          <target state="translated">Der Wert kann ein NULL-Verweis (Nothing in Visual Basic) für Verweistypen sein.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryAdd(`0)">
          <source>Attempts to add an object to the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /&gt;</ph>.</source>
          <target state="translated">Versucht, der <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /&gt;</ph> ein Objekt hinzuzufügen.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryAdd(`0)">
          <source>true if the object was added successfully; otherwise, false.</source>
          <target state="translated">True, wenn das Objekt erfolgreich hinzugefügt wurde, andernfalls false.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryAdd(`0)">
          <source>For <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>, this operation will always add the object to the end of the <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> and return true.</source>
          <target state="translated">Für <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>, dieser Vorgang wird immer das Objekt am Ende hinzufügen der <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> und "true" zurückgeben.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryTake(`0@)">
          <source>When this method returns, if the operation was successful, <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept> contains the object removed.</source>
          <target state="translated">Wenn diese Methode zurückgegeben wird und der Vorgang erfolgreich war, enthält <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept> das entfernte Objekt.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryTake(`0@)">
          <source>If no object was available to be removed, the value is unspecified.</source>
          <target state="translated">Wenn kein Objekt zum Entfernen verfügbar war, ist der Wert nicht angegeben.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryTake(`0@)">
          <source>Attempts to remove and return an object from the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /&gt;</ph>.</source>
          <target state="translated">Versucht, ein Objekt aus der <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /&gt;</ph> zu entfernen und zurückzugeben.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryTake(`0@)">
          <source>true if an element was removed and returned succesfully; otherwise, false.</source>
          <target state="translated">True, wenn ein Element erfolgreich entfernt und zurückgegeben wurde, andernfalls false.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryTake(`0@)">
          <source>For <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>, this operation will attempt to remove the object from the beginning of the <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>.</source>
          <target state="translated">Für <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>, diesen Vorgang versucht, entfernen Sie das Objekt vom Anfang der <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from the <ph id="ph2">&lt;see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /&gt;</ph>.</source>
          <target state="translated">Das eindimensionale <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph>, das das Ziel der aus der <ph id="ph2">&lt;see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /&gt;</ph> kopierten Elemente ist.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated">Für das <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> muss eine nullbasierte Indizierung verwendet werden.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">Der nullbasierte Index im <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept>, ab dem kopiert wird.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>Copies the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> to an <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at a particular <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph> index.</source>
          <target state="translated">Kopiert die Elemente der <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> in ein <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, beginnend bei einem bestimmten <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph>-Index.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is a null reference (Nothing in Visual Basic).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> ist ein NULL-Verweis (Nothing in Visual&amp;#160;Basic).</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> ist kleiner als Null.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> ist mehrdimensional.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or- <ph id="ph1">&lt;paramref name="array" /&gt;</ph> does not have zero-based indexing.</source>
          <target state="translated">-oder- <ph id="ph1">&lt;paramref name="array" /&gt;</ph> hat keine nullbasierte Indizierung.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or- <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is equal to or greater than the length of the <ph id="ph2">&lt;paramref name="array" /&gt;</ph> -or- The number of elements in the source <ph id="ph3">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is greater than the available space from <ph id="ph4">&lt;paramref name="index" /&gt;</ph> to the end of the destination <ph id="ph5">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">- oder - <ph id="ph1">&lt;paramref name="index" /&gt;</ph> ist gleich oder größer als die Länge des <ph id="ph2">&lt;paramref name="array" /&gt;</ph> -oder- die Anzahl der Elemente in der Quell-<ph id="ph3">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> ist größer als der verfügbare Platz von <ph id="ph4">&lt;paramref name="index" /&gt;</ph> bis zum Ende des Ziel-<ph id="ph5">&lt;paramref name="array" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or- The type of the source <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">-oder- Der Typ der Quelle <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> kann nicht automatisch in den Typ des als Ziel festgelegten <ph id="ph2">&lt;paramref name="array" /&gt;</ph> umgewandelt werden.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#IsSynchronized">
          <source>Gets a value indicating whether access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized with the SyncRoot.</source>
          <target state="translated">Ruft einen Wert ab, der angibt, ob der Zugriff auf die <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> mit SyncRoot synchronisiert wird.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#IsSynchronized">
          <source>true if access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized with the SyncRoot; otherwise, false.</source>
          <target state="translated">True, wenn der Zugriff auf die <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> mit SyncRoot synchronisiert wird, andernfalls false.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#IsSynchronized">
          <source>For <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>, this property always returns false.</source>
          <target state="translated">Für <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> gibt diese Eigenschaft immer false zurück.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot">
          <source>Gets an object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated">Ruft ein Objekt ab, mit dem der Zugriff auf <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> synchronisiert werden kann.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot">
          <source>This property is not supported.</source>
          <target state="translated">Diese Eigenschaft wird nicht unterstützt.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot">
          <source>Returns null  (Nothing in Visual Basic).</source>
          <target state="translated">Gibt NULL (Nothing in Visual Basic) zurück.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot">
          <source>The SyncRoot property is not supported.</source>
          <target state="translated">Die SyncRoot-Eigenschaft wird nicht unterstützt.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an enumerator that iterates through a collection.</source>
          <target state="translated">Gibt einen Enumerator zurück, der eine Auflistung durchläuft.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#IEnumerable#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> that can be used to iterate through the collection.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph>, der zum Durchlaufen der Auflistung verwendet werden kann.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.ToArray">
          <source>Copies the elements stored in the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> to a new array.</source>
          <target state="translated">Kopiert die in der <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> gespeicherten Elemente in ein neues Array.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.ToArray">
          <source>A new array containing a snapshot of elements copied from the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</source>
          <target state="translated">Ein neues Array mit einer Momentaufnahme von Elementen, die aus dem <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> kopiert werden.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source>When this method returns, if the operation was successful, <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> contains the object removed.</source>
          <target state="translated">Wenn diese Methode zurückgegeben wird und der Vorgang erfolgreich war, enthält <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> das entfernte Objekt.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source>If no object was available to be removed, the value is unspecified.</source>
          <target state="translated">Wenn kein Objekt zum Entfernen verfügbar war, ist der Wert nicht angegeben.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source>Tries to remove and return the object at the beginning of the concurrent queue.</source>
          <target state="translated">Versucht, das Objekt am Anfang der gleichzeitigen Warteschlange zu entfernen und zurückzugeben.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if an element was removed and returned from the beginning of the <ph id="ph2">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> successfully; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn ein Element vom Anfang der <ph id="ph2">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> erfolgreich entfernt und zurückgegeben wurde, andernfalls <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> handles all synchronization internally.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> Synchronisierung wird intern behandelt.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source>If two threads call <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.TryDequeue%2A&gt;</ph> at precisely the same moment, neither operation is blocked.</source>
          <target state="translated">Wenn zwei Aufruf threads <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.TryDequeue%2A&gt;</ph> an genau den gleichen Zeitpunkt, keiner der Vorgänge blockiert wird.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source>When a conflict is detected between two threads, one thread has to try again to retrieve the next element, and the synchronization is handled internally.</source>
          <target state="translated">Bei Erkennung eines Konflikts zwischen zwei Threads ist ein Thread muss erneut versucht, das nächste Element abzurufen, und die Synchronisierung wird intern behandelt.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.TryDequeue%2A&gt;</ph> tries to remove an element from the queue.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.TryDequeue%2A&gt;</ph> versucht, ein Element aus der Warteschlange zu entfernen.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source>If the method is successful, the item is removed and the method returns <ph id="ph1">`true`</ph>; otherwise, it returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Wenn die Methode erfolgreich ist, wird das Element entfernt und der Methodenrückgabe <ph id="ph1">`true`</ph>ist, andernfalls gibt <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source>That happens atomically with respect to other operations on the queue.</source>
          <target state="translated">In diesem Fall atomar in Bezug auf andere Vorgänge in der Warteschlange.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source>If the queue was populated with code such as <ph id="ph1">`q.Enqueue("a"); q.Enqueue("b"); q.Enqueue("c");`</ph> and two threads concurrently try to dequeue an element, one thread will dequeue <ph id="ph2">`a`</ph> and the other thread will dequeue <ph id="ph3">`b`</ph>.</source>
          <target state="translated">Wenn die Warteschlange mit Code, z. B. aufgefüllt wurde <ph id="ph1">`q.Enqueue("a"); q.Enqueue("b"); q.Enqueue("c");`</ph> und zwei Threads gleichzeitig versuchen, ein Element aus der Warteschlange entfernt, wird ein Thread dequeue <ph id="ph2">`a`</ph> und der andere Thread wird dequeue <ph id="ph3">`b`</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source>Both calls to <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.TryDequeue%2A&gt;</ph> will return <ph id="ph2">`true`</ph>, because they were both able to dequeue an element.</source>
          <target state="translated">Beide Aufrufe von <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.TryDequeue%2A&gt;</ph> zurück <ph id="ph2">`true`</ph>, da sie sowohl in der Lage, ein Element aus der Warteschlange entfernt wurden.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source>If each thread goes back to dequeue an additional element, one of the threads will dequeue <ph id="ph1">`c`</ph> and return <ph id="ph2">`true`</ph>, whereas the other thread will find the queue empty and will return <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Wenn jeder Thread wieder ein weiteres Element aus der Warteschlange entfernt wird, wird einer der Threads dequeue <ph id="ph1">`c`</ph> und zurückgeben <ph id="ph2">`true`</ph>, während der andere Thread die Warteschlange leer findet und zurück <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryPeek(`0@)">
          <source>When this method returns, <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> contains an object from the beginning of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> or an unspecified value if the operation failed.</source>
          <target state="translated">Wenn diese Methode einen Wert zurückgibt, enthält <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> ein Objekt vom Anfang der <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> oder einen nicht angegebenen Wert, wenn bei dem Vorgang ein Fehler aufgetreten ist.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryPeek(`0@)">
          <source>Tries to return an object from the beginning of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> without removing it.</source>
          <target state="translated">Versucht, ein Objekt vom Anfang der <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> zurückzugeben, ohne es zu entfernen.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryPeek(`0@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if an object was returned successfully; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> wenn ein Objekt erfolgreich zurückgegeben wurde, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
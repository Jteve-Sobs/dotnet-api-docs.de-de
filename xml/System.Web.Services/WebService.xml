<Type Name="WebService" FullName="System.Web.Services.WebService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="98f929cd9afc4e38125d09e5d11fc4a420dc5aad" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70470826" /></Metadata><TypeSignature Language="C#" Value="public class WebService : System.ComponentModel.MarshalByValueComponent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebService extends System.ComponentModel.MarshalByValueComponent" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.WebService" />
  <TypeSignature Language="VB.NET" Value="Public Class WebService&#xA;Inherits MarshalByValueComponent" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebService : System::ComponentModel::MarshalByValueComponent" />
  <TypeSignature Language="F#" Value="type WebService = class&#xA;    inherit MarshalByValueComponent" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.MarshalByValueComponent</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Definiert die optionale Basisklasse für XML-Webdienste, wodurch der direkte Zugriff auf gemeinsam genutzte ASP.NET-Objekte (z. B. auf den Anwendungs- und Sitzungszustand) ermöglicht wird.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie keinen Zugriff auf die allgemeinen ASP.NET-Objekte benötigen, können Sie trotzdem einen XML-Webdienst ohne Ableitung <xref:System.Web.Services.WebService>von erstellen. Auf zusätzliche ASP.NET-Objekte kann über <xref:System.Web.Services.WebService.Context%2A>zugegriffen werden.  
  
 XML-Webdienst Methoden, die <xref:System.Web.Services.Protocols.SoapRpcMethodAttribute.OneWay%2A> über die- <xref:System.Web.Services.Protocols.SoapRpcMethodAttribute> Eigenschaft <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> von oder `true`auf festgelegt sind, haben keinen <xref:System.Web.HttpContext>Zugriff auf Ihre. Wenn Sie auf eine der Eigenschaften der <xref:System.Web.Services.WebService> Klasse zugreifen, geben Sie in dieser XML-Webdienst Methode den Wert zurück. `null`  
  
 Wenn Sie die .NET Framework Version 1,0-XML-Webdienst Methoden verwenden, auf die <xref:System.Web.Services.Protocols.SoapRpcMethodAttribute> entweder <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> das-Attribut oder das- <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute.OneWay%2A> Attribut angewendet wird, `true`und die-Eigenschaft von auf fest <xref:System.Web.HttpContext> gelegt ist, haben Sie keinen Zugriff auf Ihre mithilfe des statische <xref:System.Web.HttpContext.Current%2A> Eigenschaft. Um auf zuzugreifen <xref:System.Web.HttpContext>, leiten Sie die Klasse ab, die die XML- <xref:System.Web.Services.WebService> Webdienst Methode <xref:System.Web.Services.WebService.Context%2A> von implementiert, und greifen Sie auf die-Eigenschaft  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein XML-Webdienst erstellt, <xref:System.Web.Services.WebService>der von abgeleitet wird, um <xref:System.Web.Services.WebService.Context%2A> die-Eigenschaft zum Abrufen der Zeit der Anforderung auf dem Server zu verwenden.  
  
 [!code-aspx-csharp[Classic WebService Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic WebService Example/CS/sourcecs.asmx)]
 [!code-aspx-vb[Classic WebService Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic WebService Example/VB/sourcevb.asmx)]
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.WebService.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebService();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.Services.WebService" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public System.Web.HttpApplicationState Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpApplicationState Application" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.WebService.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As HttpApplicationState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpApplicationState ^ Application { System::Web::HttpApplicationState ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Application : System.Web.HttpApplicationState" Usage="System.Web.Services.WebService.Application" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Description("The ASP.NET application object for the current request.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpApplicationState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Anwendungsobjekt für die aktuelle HTTP-Anforderung ab.</summary>
        <value>Ein <see cref="T:System.Web.HttpApplicationState" />-Objekt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XML-Webdienste können sowohl den Anwendungs Status als auch den Sitzungszustand verwenden. Der Anwendungs Zustand wird über alle Sitzungen hinweg verwaltet, die auf einen XML-Webdienst zugreifen, unabhängig davon, ob der Sitzungszustand für <xref:System.Web.Services.WebMethodAttribute.EnableSession%2A> eine Methode deaktiviert <xref:System.Web.Services.WebMethodAttribute>ist (mithilfe der-Eigenschaft des).  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht einen Trefferzähler und erhöht den Zähler jedes Mal, wenn ein Browser die XML-Webdienst Methode aufruft.  
  
 [!code-aspx-csharp[Classic WebService.Application Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic WebService.Application Example/CS/sourcecs.asmx)]
 [!code-aspx-vb[Classic WebService.Application Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic WebService.Application Example/VB/sourcevb.asmx)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.HttpApplicationState" />
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public System.Web.HttpContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpContext Context" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.WebService.Context" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Context As HttpContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpContext ^ Context { System::Web::HttpContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Context : System.Web.HttpContext" Usage="System.Web.Services.WebService.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft <see cref="T:System.Web.HttpContext" /> von ASP.NET für die aktuelle Anforderung ab, wodurch der gesamte HTTP-spezifische Kontext gekapselt wird, der durch den HTTP-Server zum Verarbeiten von Webanforderungen verwendet wird.</summary>
        <value>Der <see cref="T:System.Web.HttpContext" /> von ASP.NET für die aktuelle Anforderung.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XML-Webdienst Methoden, auf die <xref:System.Web.Services.Protocols.SoapRpcMethodAttribute> entweder <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> das-oder das-Attribut <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute.OneWay%2A> angewendet wird, wobei `true`die-Eigenschaft von auf festgelegt <xref:System.Web.HttpContext> ist, haben <xref:System.Web.HttpContext.Current%2A> keinen Zugriff auf Ihre mithilfe der statischen-Eigenschaft. Um auf zuzugreifen <xref:System.Web.HttpContext>, leiten Sie die Klasse ab, die die XML- <xref:System.Web.Services.WebService> Webdienst Methode <xref:System.Web.Services.WebService.Context%2A> von implementiert, und greifen Sie auf die-Eigenschaft  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Web.Services.WebService.Context%2A> -Eigenschaft verwendet, um den Zeitpunkt der Anforderung auf dem Server abzurufen.  
  
 [!code-aspx-csharp[Classic WebService Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic WebService Example/CS/sourcecs.asmx)]
 [!code-aspx-vb[Classic WebService Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic WebService Example/VB/sourcevb.asmx)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception"><paramref name="Context" /> ist <see langword="null" />.</exception>
        <altmember cref="T:System.Web.HttpContext" />
      </Docs>
    </Member>
    <Member MemberName="Server">
      <MemberSignature Language="C#" Value="public System.Web.HttpServerUtility Server { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpServerUtility Server" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.WebService.Server" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Server As HttpServerUtility" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpServerUtility ^ Server { System::Web::HttpServerUtility ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Server : System.Web.HttpServerUtility" Usage="System.Web.Services.WebService.Server" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpServerUtility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="T:System.Web.HttpServerUtility" /> für die aktuelle Anforderung ab.</summary>
        <value>Ein <see cref="T:System.Web.HttpServerUtility" />-Objekt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.HttpServerUtility> -Klasse stellt mehrere Methoden bereit, die bei der Verarbeitung von Webanforderungen verwendet <xref:System.Web.HttpServerUtility.CreateObject%2A> werden können, einschließlich (zum Instanziieren von COM-Objekten).  
  
   
  
## Examples  
 Im folgenden Beispiel wird der Computername des Webservers mithilfe der <xref:System.Web.Services.WebService.Server%2A> -Eigenschaft zurückgegeben.  
  
 [!code-aspx-csharp[Classic WebService.Server Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic WebService.Server Example/CS/sourcecs.asmx)]
 [!code-aspx-vb[Classic WebService.Server Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic WebService.Server Example/VB/sourcevb.asmx)]
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.HttpServerUtility" />
        <altmember cref="M:System.Web.HttpServerUtility.CreateObject(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Session">
      <MemberSignature Language="C#" Value="public System.Web.SessionState.HttpSessionState Session { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.SessionState.HttpSessionState Session" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.WebService.Session" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Session As HttpSessionState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::SessionState::HttpSessionState ^ Session { System::Web::SessionState::HttpSessionState ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Session : System.Web.SessionState.HttpSessionState" Usage="System.Web.Services.WebService.Session" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.SessionState.HttpSessionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Web.SessionState.HttpSessionState" />-Instanz für die aktuelle Anforderung ab.</summary>
        <value>Ein <see cref="T:System.Web.SessionState.HttpSessionState" />, der das ASP.NET-Sitzungszustandsobjekt für die aktuelle Sitzung darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird der Sitzungs Status verwendet, um zu bestimmen, wie oft eine bestimmte Sitzung auf die `SessionHitCounter`XML-Webdienst Methode zugreift. In diesem Beispiel <xref:System.Web.Services.WebMethodAttribute> wird die <xref:System.Web.Services.WebMethodAttribute.EnableSession%2A> -Eigenschaft von auf `true` festgelegt, um Zugriff auf den Sitzungszustand zu erhalten.  
  
 [!code-aspx-csharp[Classic WebMethodAttribute.EnableSession Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic WebMethodAttribute.EnableSession Example/CS/sourcecs.asmx)]
 [!code-aspx-vb[Classic WebMethodAttribute.EnableSession Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic WebMethodAttribute.EnableSession Example/VB/sourcevb.asmx)]
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.SessionState.HttpSessionState" />
      </Docs>
    </Member>
    <Member MemberName="SoapVersion">
      <MemberSignature Language="C#" Value="public System.Web.Services.Protocols.SoapProtocolVersion SoapVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Services.Protocols.SoapProtocolVersion SoapVersion" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.WebService.SoapVersion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SoapVersion As SoapProtocolVersion" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Services::Protocols::SoapProtocolVersion SoapVersion { System::Web::Services::Protocols::SoapProtocolVersion get(); };" />
      <MemberSignature Language="F#" Value="member this.SoapVersion : System.Web.Services.Protocols.SoapProtocolVersion" Usage="System.Web.Services.WebService.SoapVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Services.Protocols.SoapProtocolVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Version des SOAP-Protokolls ab, mit dem die SOAP-Anforderung an den XML-Webdienst ausgeführt wird.</summary>
        <value>Einer der <see cref="T:System.Web.Services.Protocols.SoapProtocolVersion" />-Werte. Die Standardeinstellung ist <see cref="F:System.Web.Services.Protocols.SoapProtocolVersion.Default" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn das SOAP-Protokoll nicht für die Kommunikation mit dem XML-Webdienst verwendet wurde (z. b. HTTP-GET oder http-Post <xref:System.Web.Services.WebService.SoapVersion%2A> ), <xref:System.Web.Services.Protocols.SoapProtocolVersion.Default>ist der Wert der-Eigenschaft.  
  
 Für XML-Webdienste, die nicht von der <xref:System.Web.Services.WebService> -Klasse abgeleitet sind, kann auf die Version des SOAP-Protokolls zugegriffen werden, das zum Erstellen der SOAP-Anforderung an den XML-Webdienst verwendet wird, und zwar mit dem Eintrag <xref:System.Web.HttpContext.Items%2A?displayProperty=nameWithType> "WebServiceSoapVersion" der-Eigenschaft. Dieser Eintrag ist vom Typ <xref:System.Web.Services.Protocols.SoapProtocolVersion>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Services.Protocols.SoapProtocolVersion" />
        <altmember cref="P:System.Web.HttpContext.Items" />
      </Docs>
    </Member>
    <Member MemberName="User">
      <MemberSignature Language="C#" Value="public System.Security.Principal.IPrincipal User { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.IPrincipal User" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.WebService.User" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property User As IPrincipal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Principal::IPrincipal ^ User { System::Security::Principal::IPrincipal ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.User : System.Security.Principal.IPrincipal" Usage="System.Web.Services.WebService.User" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IPrincipal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="P:System.Web.HttpContext.User" />-Objekt des ASP.NET-Servers ab. Kann verwendet werden, um zu authentifizieren, ob ein Benutzer zum Ausführen der Anforderung berechtigt ist.</summary>
        <value>Ein <see cref="T:System.Security.Principal.IPrincipal" />, der das <see cref="P:System.Web.HttpContext.User" />-Objekt des ASP.NET-Servers darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beide Internetinformationsdienste (IIS) und die .NET Framework müssen für die Authentifizierung konfiguriert werden, damit die <xref:System.Web.Services.WebService.User%2A> -Eigenschaft sinnvoll ist. Die Authentifizierung ist der Prozess, bei dem Anmelde Informationen von einem Benutzer akzeptiert werden und die Anmelde Informationen anhand einer Autorität überprüft werden. Wenn die Anmelde Informationen gültig sind, verfügen Sie über eine authentifizierte Identität. Die Authentifizierung im .NET Framework wird konfiguriert, indem Einträge in die Datei "Web. config" platziert werden.  
  
 Im folgenden Beispiel werden die Einträge veranschaulicht, die Sie in der Datei "Web. config" zum Aktivieren der Windows-Authentifizierung platzieren.  
  
```xml
<security>  
 <authentication mode="Windows"> <!-- Mode Options are Windows, Cookie, Passport and None or Empty String -->  
 </authentication>  
 </security>  
```  
  
 Weitere Informationen zum Einrichten der Sicherheit für einen XML-Webdienst finden [Sie unter Sichern von XML-Webdiensten, die mit ASP.NET erstellt wurden](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/w67h0dw7(v=vs.100)).  
  
   
  
## Examples  
 Im folgenden Beispiel wird der Name des authentifizierten Benutzers nachgeschlagen und der Name zurückgegeben.  
  
 [!code-aspx-csharp[Classic WebService.User Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic WebService.User Example/CS/sourcecs.asmx)]
 [!code-aspx-vb[Classic WebService.User Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic WebService.User Example/VB/sourcevb.asmx)]
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Principal.IPrincipal" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/w67h0dw7(v=vs.100)">Sichern von mit ASP.NET erstellten XML-Webdiensten</related>
      </Docs>
    </Member>
  </Members>
</Type>
